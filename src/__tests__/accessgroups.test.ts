/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Access Groups Read Access Group", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("readAccessGroup"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.readAccessGroup({
    idOrName: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    isDsyncManaged: false,
    name: "my-access-group",
    createdAt: "1588720733602",
    teamId: "team_123a6c5209bc3778245d011443644c8d27dc2c50",
    updatedAt: "1588720733602",
    accessGroupId: "ag_123a6c5209bc3778245d011443644c8d27dc2c50",
    membersCount: 5,
    projectsCount: 2,
  });
});

test("Access Groups Read Access Group Id", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("readAccessGroup-id"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.readAccessGroup({
    idOrName: "ag_1a2b3c4d5e6f7g8h9i0j",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    isDsyncManaged: false,
    name: "my-access-group",
    createdAt: "1588720733602",
    teamId: "team_123a6c5209bc3778245d011443644c8d27dc2c50",
    updatedAt: "1588720733602",
    accessGroupId: "ag_123a6c5209bc3778245d011443644c8d27dc2c50",
    membersCount: 5,
    projectsCount: 2,
  });
});

test("Access Groups Read Access Group Name", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("readAccessGroup-name"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.readAccessGroup({
    idOrName: "My Access Group",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    isDsyncManaged: false,
    name: "my-access-group",
    createdAt: "1588720733602",
    teamId: "team_123a6c5209bc3778245d011443644c8d27dc2c50",
    updatedAt: "1588720733602",
    accessGroupId: "ag_123a6c5209bc3778245d011443644c8d27dc2c50",
    membersCount: 5,
    projectsCount: 2,
  });
});

test("Access Groups Update Access Group", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("updateAccessGroup"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.updateAccessGroup({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      name: "My access group",
      projects: [],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    name: "my-access-group",
    createdAt: "1588720733602",
    teamId: "team_123a6c5209bc3778245d011443644c8d27dc2c50",
    updatedAt: "1588720733602",
    accessGroupId: "ag_123a6c5209bc3778245d011443644c8d27dc2c50",
    membersCount: 5,
    projectsCount: 2,
  });
});

test("Access Groups Delete Access Group", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteAccessGroup"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.accessGroups.deleteAccessGroup({
    idOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
});

test("Access Groups List Access Group Members", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("listAccessGroupMembers"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.listAccessGroupMembers({
    idOrName: "ag_pavWOn1iLObbXLRiwVvzmPrTWyTf",
    limit: 20,
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    members: [
      {
        email: "Jaida_Rogahn@yahoo.com",
        uid: "<id>",
        username: "Karianne_Bernier",
        teamRole: "VIEWER",
      },
    ],
    pagination: {
      count: 3878.47,
      next: "<value>",
    },
  });
});

test("Access Groups List Access Groups", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("listAccessGroups"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.listAccessGroups({
    projectId: "prj_pavWOn1iLObbx3RowVvzmPrTWyTf",
    search: "example",
    membersLimit: 20,
    projectsLimit: 20,
    limit: 20,
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Access Groups Create Access Group", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("createAccessGroup"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.createAccessGroup({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      name: "My access group",
      projects: [],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    membersCount: 591.78,
    projectsCount: 3787.91,
    name: "my-access-group",
    createdAt: "1588720733602",
    teamId: "team_123a6c5209bc3778245d011443644c8d27dc2c50",
    updatedAt: "1588720733602",
    accessGroupId: "ag_123a6c5209bc3778245d011443644c8d27dc2c50",
  });
});

test("Access Groups List Access Group Projects", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("listAccessGroupProjects"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.listAccessGroupProjects({
    idOrName: "ag_pavWOn1iLObbXLRiwVvzmPrTWyTf",
    limit: 20,
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    projects: [],
    pagination: {
      count: 7604.02,
      next: "<value>",
    },
  });
});

test("Access Groups Create Access Group Project", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("createAccessGroupProject"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.createAccessGroupProject({
    accessGroupIdOrName: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
      role: "ADMIN",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "PROJECT_VIEWER",
    createdAt: "<value>",
    updatedAt: "<value>",
  });
});

test("Access Groups Read Access Group Project", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("readAccessGroupProject"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.readAccessGroupProject({
    accessGroupIdOrName: "<value>",
    projectId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "ADMIN",
    createdAt: "<value>",
    updatedAt: "<value>",
  });
});

test("Access Groups Read Access Group Project Id", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("readAccessGroupProject-id"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.readAccessGroupProject({
    accessGroupIdOrName: "ag_1a2b3c4d5e6f7g8h9i0j",
    projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "ADMIN",
    createdAt: "1706854122023",
    updatedAt: "1735905380072",
  });
});

test("Access Groups Read Access Group Project Name", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("readAccessGroupProject-name"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.readAccessGroupProject({
    accessGroupIdOrName: "My Access Group",
    projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "PROJECT_DEVELOPER",
    createdAt: "1731124284693",
    updatedAt: "1735836411388",
  });
});

test("Access Groups Update Access Group Project", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("updateAccessGroupProject"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.updateAccessGroupProject({
    accessGroupIdOrName: "<value>",
    projectId: "<id>",
    requestBody: {
      role: "ADMIN",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "ADMIN",
    createdAt: "<value>",
    updatedAt: "<value>",
  });
});

test("Access Groups Update Access Group Project Id", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("updateAccessGroupProject-id"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.updateAccessGroupProject({
    accessGroupIdOrName: "ag_1a2b3c4d5e6f7g8h9i0j",
    projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      role: "ADMIN",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "ADMIN",
    createdAt: "1706645964469",
    updatedAt: "1735872085577",
  });
});

test("Access Groups Update Access Group Project Name", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("updateAccessGroupProject-name"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.accessGroups.updateAccessGroupProject({
    accessGroupIdOrName: "My Access Group",
    projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      role: "ADMIN",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    teamId: "<id>",
    accessGroupId: "<id>",
    projectId: "<id>",
    role: "ADMIN",
    createdAt: "1708158031858",
    updatedAt: "1735838146635",
  });
});

test("Access Groups Delete Access Group Project Id", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteAccessGroupProject-id"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.accessGroups.deleteAccessGroupProject({
    accessGroupIdOrName: "ag_1a2b3c4d5e6f7g8h9i0j",
    projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
});

test("Access Groups Delete Access Group Project Name", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteAccessGroupProject-name"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.accessGroups.deleteAccessGroupProject({
    accessGroupIdOrName: "My Access Group",
    projectId: "prj_ndlgr43fadlPyCtREAqxxdyFK",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
});

test("Access Groups Delete Access Group Project", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteAccessGroupProject"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.accessGroups.deleteAccessGroupProject({
    accessGroupIdOrName: "<value>",
    projectId: "<id>",
  });
});
