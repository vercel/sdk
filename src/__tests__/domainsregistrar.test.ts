/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Domains Registrar Get Supported Tlds", async () => {
  const testHttpClient = createTestHTTPClient("getSupportedTlds");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getSupportedTlds({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    "<value 1>",
    "<value 2>",
  ]);
});

test("Domains Registrar Get Tld Price", async () => {
  const testHttpClient = createTestHTTPClient("getTldPrice");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getTldPrice({
    tld: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    years: 8935.16,
    purchasePrice: 6287.26,
    renewalPrice: 7886.17,
    transferPrice: 1743.63,
  });
});

test("Domains Registrar Get Domain Availability", async () => {
  const testHttpClient = createTestHTTPClient("getDomainAvailability");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getDomainAvailability({
    domain: "hungry-birdbath.info",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    available: false,
  });
});

test("Domains Registrar Get Domain Price", async () => {
  const testHttpClient = createTestHTTPClient("getDomainPrice");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getDomainPrice({
    domain: "excited-dwell.org",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    years: 40.44,
    purchasePrice: 7574.42,
    renewalPrice: 1523.71,
    transferPrice: 2786.9,
  });
});

test("Domains Registrar Get Bulk Availability", async () => {
  const testHttpClient = createTestHTTPClient("getBulkAvailability");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getBulkAvailability({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    requestBody: {
      domains: [
        "<value 1>",
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    results: [],
  });
});

test("Domains Registrar Get Domain Auth Code", async () => {
  const testHttpClient = createTestHTTPClient("getDomainAuthCode");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getDomainAuthCode({
    domain: "ruddy-coil.org",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    authCode: "<value>",
  });
});

test("Domains Registrar Buy Single Domain", async () => {
  const testHttpClient = createTestHTTPClient("buySingleDomain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.buySingleDomain({
    domain: "metallic-simple.com",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    requestBody: {
      autoRenew: false,
      years: 7602.67,
      expectedPrice: 7390.34,
      contactInformation: {
        firstName: "Lexie",
        lastName: "Lemke",
        email: "Lionel21@gmail.com",
        phone: "550.220.6330 x258",
        address1: "<value>",
        city: "Spencerport",
        state: "West Virginia",
        zip: "46432",
        country: "Sweden",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    orderId: "<id>",
    links: {
      "key": {
        href: "<value>",
        method: "GET",
      },
    },
  });
});

test("Domains Registrar Buy Domains", async () => {
  const testHttpClient = createTestHTTPClient("buyDomains");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.buyDomains({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    requestBody: {
      domains: [],
      contactInformation: {
        firstName: "Leonie",
        lastName: "Johnston",
        email: "Anna_Fisher13@hotmail.com",
        phone: "(688) 699-0656",
        address1: "<value>",
        city: "Rennerland",
        state: "New Jersey",
        zip: "70054",
        country: "Peru",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    orderId: "<id>",
    links: {},
  });
});

test("Domains Registrar Transfer In Domain", async () => {
  const testHttpClient = createTestHTTPClient("transferInDomain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.transferInDomain({
    domain: "silky-fund.org",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    requestBody: {
      authCode: "<value>",
      autoRenew: true,
      years: 298.08,
      expectedPrice: 5092.5,
      contactInformation: {
        firstName: "Gabrielle",
        lastName: "Hackett",
        email: "Keshawn99@yahoo.com",
        phone: "(758) 385-1802 x13762",
        address1: "<value>",
        city: "Pattiestead",
        state: "Idaho",
        zip: "64653-9022",
        country: "Bolivia",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    orderId: "<id>",
    links: {},
  });
});

test("Domains Registrar Get Domain Transfer In", async () => {
  const testHttpClient = createTestHTTPClient("getDomainTransferIn");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getDomainTransferIn({
    domain: "unsung-antelope.com",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    status: "pending_transfer",
  });
});

test("Domains Registrar Renew Domain", async () => {
  const testHttpClient = createTestHTTPClient("renewDomain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.renewDomain({
    domain: "scaly-daughter.biz",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    requestBody: {
      years: 1981.72,
      expectedPrice: 7096.16,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    orderId: "<id>",
    links: {},
  });
});

test("Domains Registrar Get Contact Info Schema", async () => {
  const testHttpClient = createTestHTTPClient("getContactInfoSchema");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getContactInfoSchema({
    domain: "tricky-issue.name",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Domains Registrar Get Order", async () => {
  const testHttpClient = createTestHTTPClient("getOrder");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.domainsRegistrar.getOrder({
    orderId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    orderId: "<id>",
    domains: [
      {
        purchaseType: "renewal",
        years: 3271.32,
        domainName: "annual-atrium.biz",
        status: "refunded",
        price: 5522.99,
      },
    ],
    status: "purchasing",
  });
});
