/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Drains Create Drain", async () => {
  const testHttpClient = createTestHTTPClient("createDrain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.drains.createDrain({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    ownerId: "<id>",
    name: "<value>",
    createdAt: 3665.73,
    updatedAt: 3681.88,
    source: {
      kind: "self-served",
    },
  });
});

test("Drains Get Drains", async () => {
  const testHttpClient = createTestHTTPClient("getDrains");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.drains.getDrains({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    drains: [],
  });
});

test("Drains Get Drain", async () => {
  const testHttpClient = createTestHTTPClient("getDrain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.drains.getDrain({
    id: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    ownerId: "<id>",
    name: "<value>",
    createdAt: 1182.63,
    updatedAt: 7579.11,
    source: {
      kind: "integration",
      integrationId: "<id>",
      integrationConfigurationId: "<id>",
    },
  });
});

test("Drains Update Drain", async () => {
  const testHttpClient = createTestHTTPClient("updateDrain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.drains.updateDrain({
    id: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    ownerId: "<id>",
    name: "<value>",
    createdAt: 7781.81,
    updatedAt: 8087.89,
    source: {
      kind: "integration",
      integrationId: "<id>",
      integrationConfigurationId: "<id>",
    },
  });
});

test("Drains Test Drain", async () => {
  const testHttpClient = createTestHTTPClient("testDrain");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.drains.testDrain({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
