/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Edge Config Get Edge Configs", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigs"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigs({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      sizeInBytes: 8239.08,
      itemCount: 557.07,
    },
  ]);
});

test("Edge Config Create Edge Config", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("createEdgeConfig"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.createEdgeConfig({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      slug: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    sizeInBytes: 145.91,
    itemCount: 5042.97,
  });
});

test("Edge Config Get Edge Config", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfig"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfig({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    sizeInBytes: 3967.65,
    itemCount: 7010.13,
  });
});

test("Edge Config Update Edge Config", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("updateEdgeConfig"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.updateEdgeConfig({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      slug: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    sizeInBytes: 5022.37,
    itemCount: 211.31,
  });
});

test("Edge Config Delete Edge Config", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteEdgeConfig"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.edgeConfig.deleteEdgeConfig({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
});

test("Edge Config Get Edge Config Items", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigItems"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigItems({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    key: "<key>",
    value: "5002.95",
    edgeConfigId: "<id>",
    createdAt: 9069.68,
    updatedAt: 6276.41,
  });
});

test("Edge Config Get Edge Config Schema", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigSchema"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigSchema({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Edge Config Patch Edge Config Schema", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("patchEdgeConfigSchema"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.patchEdgeConfigSchema({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      definition: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Edge Config Delete Edge Config Schema", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteEdgeConfigSchema"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.edgeConfig.deleteEdgeConfigSchema({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
});

test("Edge Config Get Edge Config Item", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigItem"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigItem({
    edgeConfigId: "<id>",
    edgeConfigItemKey: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    key: "<key>",
    value: "9966.77",
    edgeConfigId: "<id>",
    createdAt: 1621.85,
    updatedAt: 3034.44,
  });
});

test("Edge Config Get Edge Config Tokens", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigTokens"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigTokens({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    token: "<value>",
    label: "<value>",
    id: "<id>",
    edgeConfigId: "<id>",
    createdAt: 7692.35,
  });
});

test("Edge Config Delete Edge Config Tokens", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteEdgeConfigTokens"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.edgeConfig.deleteEdgeConfigTokens({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      tokens: [],
    },
  });
});

test("Edge Config Get Edge Config Token", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigToken"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigToken({
    edgeConfigId: "<id>",
    token: "<value>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    token: "<value>",
    label: "<value>",
    id: "<id>",
    edgeConfigId: "<id>",
    createdAt: 3597.77,
  });
});

test("Edge Config Create Edge Config Token", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("createEdgeConfigToken"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.createEdgeConfigToken({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      label: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    token: "<value>",
    id: "<id>",
  });
});

test("Edge Config Get Edge Config Backups", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getEdgeConfigBackups"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.edgeConfig.getEdgeConfigBackups({
    edgeConfigId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    backups: [
      {
        id: "<id>",
        lastModified: 2424.25,
      },
      {
        id: "<id>",
        lastModified: 1518.43,
      },
    ],
    pagination: {
      hasNext: true,
    },
  });
});
