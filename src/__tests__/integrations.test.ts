/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Integrations Get Configuration", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("getConfiguration"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.integrations.getConfiguration({
    id: "icfg_cuwj0AdCdH3BwWT4LPijCC7t",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    completedAt: 1558531915505,
    createdAt: 1558531915505,
    id: "icfg_3bwCLgxL8qt5kjRLcv2Dit7F",
    integrationId: "oac_xzpVzcUOgcB1nrVlirtKhbWV",
    ownerId: "kr1PsOIzqEL5Xg6M4VZcZosf",
    projects: [
      "prj_xQxbutw1HpL6HLYPAzt5h75m8NjO",
    ],
    source: "marketplace",
    slug: "slack",
    teamId: "team_nLlpyC6RE1qxydlFKbrxDlud",
    type: "integration-configuration",
    updatedAt: 1558531915505,
    userId: "kr1PsOIzqEL5Xg6M4VZcZosf",
    scopes: [
      "read:project",
      "read-write:log-drain",
    ],
    disabledAt: 1558531915505,
    deletedAt: 1558531915505,
    deleteRequestedAt: 1558531915505,
  });
});

test("Integrations Delete Configuration", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("deleteConfiguration"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.integrations.deleteConfiguration({
    id: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
});

test("Integrations Git Namespaces", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("gitNamespaces"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.integrations.gitNamespaces({
    host: "ghes-test.now.systems",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      provider: "<value>",
      slug: "<value>",
      id: "8350.19",
      ownerType: "<value>",
    },
    {
      provider: "<value>",
      slug: "<value>",
      id: "4647.99",
      ownerType: "<value>",
    },
  ]);
});

test("Integrations Search Repo", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("searchRepo"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.integrations.searchRepo({
    host: "ghes-test.now.systems",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
