/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Marketplace Get Account Info", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("get-account-info"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getAccountInfo({
    integrationConfigurationId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    url: "https://friendly-pleasure.info",
    contact: {
      email: "Horace_Bernhard@yahoo.com",
    },
  });
});

test("Marketplace Get Member", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("get-member"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getMember({
    integrationConfigurationId: "<id>",
    memberId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    id: "<id>",
    role: "ADMIN",
  });
});

test("Marketplace Create Event", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("create-event"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.createEvent({
    integrationConfigurationId: "<id>",
    requestBody: {
      event: {
        type: "installation.updated",
      },
    },
  });
});

test("Marketplace Submit Billing Data", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("submit-billing-data"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.submitBillingData({
    integrationConfigurationId: "<id>",
    requestBody: {
      timestamp: new Date("2024-09-29T02:38:01.476Z"),
      eod: new Date("2022-12-28T23:46:57.523Z"),
      period: {
        start: new Date("2022-06-25T19:04:50.518Z"),
        end: new Date("2023-10-18T01:18:36.230Z"),
      },
      billing: {
        items: [
          {
            billingPlanId: "<id>",
            name: "<value>",
            price: "161.25",
            quantity: 8824.47,
            units: "<value>",
            total: "<value>",
          },
        ],
      },
      usage: [
        {
          resourceId: "<id>",
          name: "<value>",
          type: "rate",
          units: "<value>",
          dayValue: 9439.21,
          periodValue: 6958.71,
        },
        {
          resourceId: "<id>",
          name: "<value>",
          type: "total",
          units: "<value>",
          dayValue: 9892.22,
          periodValue: 4749.62,
        },
        {
          resourceId: "<id>",
          name: "<value>",
          type: "rate",
          units: "<value>",
          dayValue: 7119.53,
          periodValue: 6310.47,
        },
      ],
    },
  });
});

test("Marketplace Submit Invoice", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("submit-invoice"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.submitInvoice({
    integrationConfigurationId: "<id>",
    requestBody: {
      invoiceDate: new Date("2022-06-05T08:54:16.353Z"),
      period: {
        start: new Date("2022-07-26T14:15:15.601Z"),
        end: new Date("2024-10-08T09:35:48.520Z"),
      },
      items: [
        {
          billingPlanId: "<id>",
          name: "<value>",
          price: "905.89",
          quantity: 1684.76,
          units: "<value>",
          total: "<value>",
        },
        {
          billingPlanId: "<id>",
          name: "<value>",
          price: "84.05",
          quantity: 9130.94,
          units: "<value>",
          total: "<value>",
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Marketplace Get Invoice", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("get-invoice"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.marketplace.getInvoice({
    integrationConfigurationId: "<id>",
    invoiceId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    invoiceId: "<id>",
    invoiceDate: "<value>",
    period: {
      start: "<value>",
      end: "<value>",
    },
    items: [
      {
        billingPlanId: "<id>",
        name: "<value>",
        price: "317.28",
        quantity: 1022.19,
        units: "<value>",
        total: "<value>",
      },
    ],
    total: "<value>",
    created: "<value>",
    updated: "<value>",
    state: "scheduled",
    test: false,
  });
});

test("Marketplace Update Invoice", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("update-invoice"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateInvoice({
    integrationConfigurationId: "<id>",
    invoiceId: "<id>",
    requestBody: {
      action: "refund",
      reason: "<value>",
      total: "<value>",
    },
  });
});

test("Marketplace Update Resource Secrets", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("update-resource-secrets"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateResourceSecrets({
    integrationConfigurationId: "<id>",
    integrationProductIdOrSlug: "<value>",
    resourceId: "<id>",
    requestBody: {
      secrets: [],
    },
  });
});

test("Marketplace Update Resource Secrets By Id", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("update-resource-secrets-by-id"),
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  await vercel.marketplace.updateResourceSecretsById({
    integrationConfigurationId: "<id>",
    resourceId: "<id>",
  });
});

test("Marketplace Exchange Sso Token", async () => {
  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: createTestHTTPClient("exchange-sso-token"),
  });

  const result = await vercel.marketplace.exchangeSsoToken({
    code: "<value>",
    clientId: "<id>",
    clientSecret: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    idToken: "<value>",
    accessToken: "<value>",
    tokenType: "<value>",
  });
});
