// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetProjectsProjectIDLogsPresets(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "get_/projects/{projectId}/logs-presets[0]":
			dir.HandlerFunc("get_/projects/{projectId}/logs-presets", testGetProjectsProjectIDLogsPresetsGetProjectsProjectIDLogsPresets0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetProjectsProjectIDLogsPresetsGetProjectsProjectIDLogsPresets0(w http.ResponseWriter, req *http.Request) {
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody []components.Team = []components.Team{
		components.Team{
			ID: "ABCDEFG000011111",
			Data: &components.Data{
				Query:     "<value>",
				CreatorID: "<id>",
				Title:     "<value>",
				GroupID:   "<id>",
				OwnerID:   "<id>",
				ProjectID: "<id>",
				CreatedAt: 76.8,
			},
			CreatorID:     "R6efeCJQ2HKXywuasPDc0fOWB",
			UpdatedAt:     1611796915677,
			Description:   types.String("Our mission is to make cloud computing accessible to everyone."),
			StagingPrefix: "<value>",
			Slug:          "my-team",
			Name:          types.String("My Team"),
			Avatar:        types.String("6eb07268bcfadd309905ffb1579354084c24655c"),
			Membership: components.TeamMembership{
				Confirmed:   true,
				ConfirmedAt: 76.8,
				Role:        components.TeamRole2Owner,
				CreatedAt:   8753.86,
				Created:     3816.98,
			},
			CreatedAt: 1630748523395,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
