// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV10Projects(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getProjects[0]":
			dir.HandlerFunc("getProjects", testGetProjectsGetProjects0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetProjectsGetProjects0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.GetProjectsResponseBody = &operations.GetProjectsResponseBody{
		Projects: []operations.GetProjectsProject{
			operations.GetProjectsProject{
				AccountID: "<id>",
				Crons: &operations.GetProjectsCrons{
					EnabledAt:    5254.53,
					DisabledAt:   nil,
					UpdatedAt:    514.35,
					DeploymentID: types.String("<id>"),
					Definitions: []operations.GetProjectsDefinition{
						operations.GetProjectsDefinition{
							Host:     "vercel.com",
							Path:     "/api/crons/sync-something?hello=world",
							Schedule: "0 0 * * *",
						},
					},
				},
				DirectoryListing: false,
				ID:               "<id>",
				LatestDeployments: []operations.GetProjectsLatestDeployment{
					operations.GetProjectsLatestDeployment{
						ID:        "<id>",
						CreatedAt: 6310.4,
						CreatedIn: "<value>",
						Creator: &operations.GetProjectsCreator{
							Email:    "Howell_Metz@gmail.com",
							UID:      "<id>",
							Username: "Mohammed_Bechtelar67",
						},
						DeploymentHostname:     "<value>",
						Name:                   "<value>",
						Plan:                   operations.GetProjectsPlanPro,
						PreviewCommentsEnabled: types.Bool(false),
						Private:                true,
						ReadyState:             operations.GetProjectsReadyStateError,
						Type:                   operations.GetProjectsTypeLambdasLambdas,
						URL:                    "https://monthly-numeracy.net/",
						UserID:                 "<id>",
					},
					operations.GetProjectsLatestDeployment{
						ID:        "<id>",
						CreatedAt: 6310.4,
						CreatedIn: "<value>",
						Creator: &operations.GetProjectsCreator{
							Email:    "Howell_Metz@gmail.com",
							UID:      "<id>",
							Username: "Mohammed_Bechtelar67",
						},
						DeploymentHostname:     "<value>",
						Name:                   "<value>",
						Plan:                   operations.GetProjectsPlanPro,
						PreviewCommentsEnabled: types.Bool(false),
						Private:                true,
						ReadyState:             operations.GetProjectsReadyStateError,
						Type:                   operations.GetProjectsTypeLambdasLambdas,
						URL:                    "https://monthly-numeracy.net/",
						UserID:                 "<id>",
					},
				},
				Name:        "<value>",
				NodeVersion: operations.GetProjectsNodeVersionFourteenDotX,
				ResourceConfig: operations.GetProjectsResourceConfig{
					FunctionDefaultRegions: []string{
						"<value 1>",
						"<value 2>",
					},
				},
				DefaultResourceConfig: operations.GetProjectsDefaultResourceConfig{
					FunctionDefaultRegions: []string{
						"<value 1>",
						"<value 2>",
					},
				},
				Targets: map[string]*operations.GetProjectsTargets{
					"key": &operations.GetProjectsTargets{
						ID:        "<id>",
						CreatedAt: 3954.3,
						CreatedIn: "<value>",
						Creator: &operations.GetProjectsCreator{
							Email:    "Tavares_Hills95@gmail.com",
							UID:      "<id>",
							Username: "Dariana_Hand",
						},
						DeploymentHostname:     "<value>",
						Name:                   "<value>",
						Plan:                   operations.GetProjectsPlanHobby,
						PreviewCommentsEnabled: types.Bool(false),
						Private:                false,
						ReadyState:             operations.GetProjectsReadyStateError,
						Type:                   operations.GetProjectsTypeLambdasLambdas,
						URL:                    "https://obedient-mentor.org/",
						UserID:                 "<id>",
					},
				},
			},
			operations.GetProjectsProject{
				AccountID: "<id>",
				Crons: &operations.GetProjectsCrons{
					EnabledAt:    5254.53,
					DisabledAt:   nil,
					UpdatedAt:    514.35,
					DeploymentID: types.String("<id>"),
					Definitions: []operations.GetProjectsDefinition{
						operations.GetProjectsDefinition{
							Host:     "vercel.com",
							Path:     "/api/crons/sync-something?hello=world",
							Schedule: "0 0 * * *",
						},
					},
				},
				DirectoryListing: false,
				ID:               "<id>",
				LatestDeployments: []operations.GetProjectsLatestDeployment{
					operations.GetProjectsLatestDeployment{
						ID:        "<id>",
						CreatedAt: 6310.4,
						CreatedIn: "<value>",
						Creator: &operations.GetProjectsCreator{
							Email:    "Howell_Metz@gmail.com",
							UID:      "<id>",
							Username: "Mohammed_Bechtelar67",
						},
						DeploymentHostname:     "<value>",
						Name:                   "<value>",
						Plan:                   operations.GetProjectsPlanPro,
						PreviewCommentsEnabled: types.Bool(false),
						Private:                true,
						ReadyState:             operations.GetProjectsReadyStateError,
						Type:                   operations.GetProjectsTypeLambdasLambdas,
						URL:                    "https://monthly-numeracy.net/",
						UserID:                 "<id>",
					},
					operations.GetProjectsLatestDeployment{
						ID:        "<id>",
						CreatedAt: 6310.4,
						CreatedIn: "<value>",
						Creator: &operations.GetProjectsCreator{
							Email:    "Howell_Metz@gmail.com",
							UID:      "<id>",
							Username: "Mohammed_Bechtelar67",
						},
						DeploymentHostname:     "<value>",
						Name:                   "<value>",
						Plan:                   operations.GetProjectsPlanPro,
						PreviewCommentsEnabled: types.Bool(false),
						Private:                true,
						ReadyState:             operations.GetProjectsReadyStateError,
						Type:                   operations.GetProjectsTypeLambdasLambdas,
						URL:                    "https://monthly-numeracy.net/",
						UserID:                 "<id>",
					},
				},
				Name:        "<value>",
				NodeVersion: operations.GetProjectsNodeVersionFourteenDotX,
				ResourceConfig: operations.GetProjectsResourceConfig{
					FunctionDefaultRegions: []string{
						"<value 1>",
						"<value 2>",
					},
				},
				DefaultResourceConfig: operations.GetProjectsDefaultResourceConfig{
					FunctionDefaultRegions: []string{
						"<value 1>",
						"<value 2>",
					},
				},
				Targets: map[string]*operations.GetProjectsTargets{
					"key": &operations.GetProjectsTargets{
						ID:        "<id>",
						CreatedAt: 3954.3,
						CreatedIn: "<value>",
						Creator: &operations.GetProjectsCreator{
							Email:    "Tavares_Hills95@gmail.com",
							UID:      "<id>",
							Username: "Dariana_Hand",
						},
						DeploymentHostname:     "<value>",
						Name:                   "<value>",
						Plan:                   operations.GetProjectsPlanHobby,
						PreviewCommentsEnabled: types.Bool(false),
						Private:                false,
						ReadyState:             operations.GetProjectsReadyStateError,
						Type:                   operations.GetProjectsTypeLambdasLambdas,
						URL:                    "https://obedient-mentor.org/",
						UserID:                 "<id>",
					},
				},
			},
		},
		Pagination: components.Pagination{
			Count: 20,
			Next:  types.Float64(1540095775951),
			Prev:  types.Float64(1540095775951),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
