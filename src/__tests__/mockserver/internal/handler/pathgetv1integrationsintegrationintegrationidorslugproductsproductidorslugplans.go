// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlans(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "get_/v1/integrations/integration/{integrationIdOrSlug}/products/{productIdOrSlug}/plans[0]":
			dir.HandlerFunc("get_/v1/integrations/integration/{integrationIdOrSlug}/products/{productIdOrSlug}/plans", testGetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansGetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlans0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansGetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlans0(w http.ResponseWriter, req *http.Request) {
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.GetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansResponseBody = &operations.GetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansResponseBody{
		Plans: []operations.GetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansPlan{
			operations.GetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansPlan{
				Type:                  operations.GetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansTypePrepayment,
				ID:                    "<id>",
				Name:                  "<value>",
				Scope:                 operations.GetV1IntegrationsIntegrationIntegrationIDOrSlugProductsProductIDOrSlugPlansScopeResource,
				Description:           "cope unless hierarchy versus ouch more regarding tabulate",
				PaymentMethodRequired: false,
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
