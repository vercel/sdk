// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1LogDrainsID(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getConfigurableLogDrain[0]":
			dir.HandlerFunc("getConfigurableLogDrain", testGetConfigurableLogDrainGetConfigurableLogDrain0)(w, req)
		default:
			http.Error(w, "Unknown test: "+test, http.StatusBadRequest)
		}
	}
}

func testGetConfigurableLogDrainGetConfigurableLogDrain0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &operations.GetConfigurableLogDrainResponseBody{
		ID:             "<id>",
		DeliveryFormat: operations.GetConfigurableLogDrainDeliveryFormatJSON,
		URL:            "https://pleasant-beret.com/",
		Name:           "<value>",
		OwnerID:        "<id>",
		CreatedAt:      9979.70,
		DeletedAt:      types.Float64(2589.89),
		UpdatedAt:      1929.64,
		Environments: []operations.GetConfigurableLogDrainEnvironments{
			operations.GetConfigurableLogDrainEnvironmentsProduction,
			operations.GetConfigurableLogDrainEnvironmentsProduction,
		},
		Secret: "<value>",
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
