// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1ProjectsProjectIDDeploymentsDeploymentIDRuntimeLogs(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getRuntimeLogs[0]":
			dir.HandlerFunc("getRuntimeLogs", testGetRuntimeLogsGetRuntimeLogs0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetRuntimeLogsGetRuntimeLogs0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/stream+json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.GetRuntimeLogsResponseBody = &operations.GetRuntimeLogsResponseBody{
		Level:              operations.GetRuntimeLogsLevelError,
		Message:            "<value>",
		RowID:              "<id>",
		Source:             operations.GetRuntimeLogsSourceServerless,
		TimestampInMs:      3529.38,
		Domain:             "tragic-larva.biz",
		MessageTruncated:   true,
		RequestMethod:      "<value>",
		RequestPath:        "<value>",
		ResponseStatusCode: 5431.32,
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/stream+json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
