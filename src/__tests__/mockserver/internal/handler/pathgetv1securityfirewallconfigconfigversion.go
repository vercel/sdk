// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV1SecurityFirewallConfigConfigVersion(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getFirewallConfig[0]":
			dir.HandlerFunc("getFirewallConfig", testGetFirewallConfigGetFirewallConfig0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetFirewallConfigGetFirewallConfig0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.GetFirewallConfigResponseBody = &operations.GetFirewallConfigResponseBody{
		OwnerID:         "<id>",
		ProjectKey:      "<value>",
		ID:              "<id>",
		Version:         6575.82,
		UpdatedAt:       "1735634663735",
		FirewallEnabled: false,
		Crs: operations.GetFirewallConfigCrs{
			Sd: operations.GetFirewallConfigSd{
				Active: true,
				Action: operations.GetFirewallConfigSdActionLog,
			},
			Ma: operations.GetFirewallConfigMa{
				Active: false,
				Action: operations.GetFirewallConfigMaActionDeny,
			},
			Lfi: operations.GetFirewallConfigLfi{
				Active: false,
				Action: operations.GetFirewallConfigLfiActionDeny,
			},
			Rfi: operations.GetFirewallConfigRfi{
				Active: true,
				Action: operations.GetFirewallConfigRfiActionDeny,
			},
			Rce: operations.GetFirewallConfigRce{
				Active: true,
				Action: operations.GetFirewallConfigRceActionLog,
			},
			Php: operations.GetFirewallConfigPhp{
				Active: true,
				Action: operations.GetFirewallConfigPhpActionDeny,
			},
			Gen: operations.GetFirewallConfigGen{
				Active: true,
				Action: operations.GetFirewallConfigGenActionDeny,
			},
			XSS: operations.GetFirewallConfigXSS{
				Active: false,
				Action: operations.GetFirewallConfigXSSActionLog,
			},
			Sqli: operations.GetFirewallConfigSqli{
				Active: true,
				Action: operations.GetFirewallConfigSqliActionDeny,
			},
			Sf: operations.GetFirewallConfigSf{
				Active: true,
				Action: operations.GetFirewallConfigSfActionLog,
			},
			Java: operations.GetFirewallConfigJava{
				Active: true,
				Action: operations.GetFirewallConfigJavaActionDeny,
			},
		},
		Rules: []operations.GetFirewallConfigRule{
			operations.GetFirewallConfigRule{
				ID:     "<id>",
				Name:   "<value>",
				Active: false,
				ConditionGroup: []operations.GetFirewallConfigConditionGroup{
					operations.GetFirewallConfigConditionGroup{
						Conditions: []operations.GetFirewallConfigCondition{
							operations.GetFirewallConfigCondition{
								Type: operations.GetFirewallConfigTypeHeader,
								Op:   operations.GetFirewallConfigOpEx,
							},
							operations.GetFirewallConfigCondition{
								Type: operations.GetFirewallConfigTypeHeader,
								Op:   operations.GetFirewallConfigOpEx,
							},
						},
					},
				},
				Action: operations.GetFirewallConfigRuleAction{},
			},
		},
		Ips: []operations.GetFirewallConfigIP{
			operations.GetFirewallConfigIP{
				ID:       "<id>",
				Hostname: "graceful-elevator.com",
				IP:       "dc71:cdcf:e1e6:bce1:4c8c:7202:5f76:e329",
				Action:   operations.GetFirewallConfigIPActionBypass,
			},
			operations.GetFirewallConfigIP{
				ID:       "<id>",
				Hostname: "graceful-elevator.com",
				IP:       "dc71:cdcf:e1e6:bce1:4c8c:7202:5f76:e329",
				Action:   operations.GetFirewallConfigIPActionBypass,
			},
			operations.GetFirewallConfigIP{
				ID:       "<id>",
				Hostname: "graceful-elevator.com",
				IP:       "dc71:cdcf:e1e6:bce1:4c8c:7202:5f76:e329",
				Action:   operations.GetFirewallConfigIPActionBypass,
			},
		},
		Changes: []operations.GetFirewallConfigChange{
			operations.GetFirewallConfigChange{},
			operations.GetFirewallConfigChange{},
			operations.GetFirewallConfigChange{},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
