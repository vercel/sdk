// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV2IntegrationsLogDrains(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getIntegrationLogDrains[0]":
			dir.HandlerFunc("getIntegrationLogDrains", testGetIntegrationLogDrainsGetIntegrationLogDrains0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetIntegrationLogDrainsGetIntegrationLogDrains0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody []operations.GetIntegrationLogDrainsResponseBody = []operations.GetIntegrationLogDrainsResponseBody{
		operations.GetIntegrationLogDrainsResponseBody{
			ClientID:        types.String("oac_xRhY4LAB7yLhUADD69EvV7ct"),
			ConfigurationID: types.String("icfg_cuwj0AdCdH3BwWT4LPijCC7t"),
			CreatedAt:       1558531915505,
			ID:              "ld_nBuA7zCID8g4QZ8g",
			DeliveryFormat:  operations.GetIntegrationLogDrainsDeliveryFormatJSON.ToPointer(),
			Name:            "My first log drain",
			OwnerID:         "kr1PsOIzqEL5Xg6M4VZcZosf",
			ProjectID:       types.String("AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb"),
			ProjectIds: []string{
				"AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb",
			},
			URL: "https://example.com/log-drain",
			Sources: []operations.GetIntegrationLogDrainsSource{
				operations.GetIntegrationLogDrainsSourceBuild,
				operations.GetIntegrationLogDrainsSourceEdge,
			},
			CreatedFrom: operations.GetIntegrationLogDrainsCreatedFromIntegration.ToPointer(),
			Headers: map[string]string{
				"key":  "<value>",
				"key1": "<value>",
				"key2": "<value>",
			},
			Environments: []operations.GetIntegrationLogDrainsEnvironment{
				operations.GetIntegrationLogDrainsEnvironmentProduction,
			},
			Branch:       types.String("feature/*"),
			SamplingRate: types.Float64(0.5),
		},
		operations.GetIntegrationLogDrainsResponseBody{
			ClientID:        types.String("oac_xRhY4LAB7yLhUADD69EvV7ct"),
			ConfigurationID: types.String("icfg_cuwj0AdCdH3BwWT4LPijCC7t"),
			CreatedAt:       1558531915505,
			ID:              "ld_nBuA7zCID8g4QZ8g",
			DeliveryFormat:  operations.GetIntegrationLogDrainsDeliveryFormatJSON.ToPointer(),
			Name:            "My first log drain",
			OwnerID:         "kr1PsOIzqEL5Xg6M4VZcZosf",
			ProjectID:       types.String("AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb"),
			ProjectIds: []string{
				"AbCgVkqoxXeXCDWehVir51LHGrrcWL4mkYm14W6UBPWQeb",
			},
			URL: "https://example.com/log-drain",
			Sources: []operations.GetIntegrationLogDrainsSource{
				operations.GetIntegrationLogDrainsSourceBuild,
				operations.GetIntegrationLogDrainsSourceEdge,
			},
			CreatedFrom: operations.GetIntegrationLogDrainsCreatedFromIntegration.ToPointer(),
			Headers: map[string]string{
				"key":  "<value>",
				"key1": "<value>",
				"key2": "<value>",
			},
			Environments: []operations.GetIntegrationLogDrainsEnvironment{
				operations.GetIntegrationLogDrainsEnvironmentProduction,
			},
			Branch:       types.String("feature/*"),
			SamplingRate: types.Float64(0.5),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
