// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV2Teams(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getTeams[0]":
			dir.HandlerFunc("getTeams", testGetTeamsGetTeams0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetTeamsGetTeams0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &operations.GetTeamsResponseBody{
		Teams: []operations.Teams{
			operations.CreateTeamsTeamLimited(
				components.TeamLimited{
					Limited: false,
					LimitedBy: []components.LimitedBy{
						components.LimitedByScope,
					},
					Saml: &components.Saml{
						Connection: &components.Connection{
							Status:                   "linked",
							Type:                     "OktaSAML",
							State:                    "active",
							ConnectedAt:              1611796915677,
							LastReceivedWebhookEvent: types.Float64(1611796915677),
						},
						Directory: &components.Directory{
							Type:                     "OktaSAML",
							State:                    "active",
							ConnectedAt:              1611796915677,
							LastReceivedWebhookEvent: types.Float64(1611796915677),
						},
						Enforced: false,
					},
					ID:     "team_nllPyCtREAqxxdyFKbbMDlxd",
					Slug:   "my-team",
					Name:   types.String("My Team"),
					Avatar: types.String("6eb07268bcfadd309905ffb1579354084c24655c"),
					Membership: components.Membership{
						Confirmed:   false,
						ConfirmedAt: 6027.63,
						Role:        components.RoleSecurity,
						CreatedAt:   4236.55,
						Created:     6458.94,
					},
					Created:   "<value>",
					CreatedAt: 1630748523395,
				},
			),
			operations.CreateTeamsTeam(
				components.Team{
					ID: "ABCDEFG000011111",
					Data: components.Data{
						Query:     "<value>",
						CreatorID: "<id>",
						Title:     "<value>",
						GroupID:   "<id>",
						OwnerID:   "<id>",
						ProjectID: "<id>",
						CreatedAt: 8917.73,
					},
				},
			),
		},
		Pagination: components.Pagination{
			Count: 20,
			Next:  types.Float64(1540095775951),
			Prev:  types.Float64(1540095775951),
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
