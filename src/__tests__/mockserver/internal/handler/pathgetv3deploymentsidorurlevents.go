// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathGetV3DeploymentsIDOrURLEvents(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "getDeploymentEvents[0]":
			dir.HandlerFunc("getDeploymentEvents", testGetDeploymentEventsGetDeploymentEvents0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testGetDeploymentEventsGetDeploymentEvents0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json;q=1", "application/stream+json;q=0"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody []*operations.GetDeploymentEventsResponseBodyUnion = []*operations.GetDeploymentEventsResponseBodyUnion{
		types.Pointer(operations.CreateGetDeploymentEventsResponseBodyUnionGetDeploymentEventsResponseBody2(
			operations.GetDeploymentEventsResponseBody2{
				Created:      9364.53,
				Date:         65.47,
				DeploymentID: "<id>",
				ID:           "<id>",
				Info: operations.Info{
					Type: "<value>",
					Name: "<value>",
				},
				Serial: "<value>",
				Type:   operations.GetDeploymentEventsType2Command,
			},
		)),
		types.Pointer(operations.CreateGetDeploymentEventsResponseBodyUnionGetDeploymentEventsResponseBody1(
			operations.GetDeploymentEventsResponseBody1{
				Type:    operations.GetDeploymentEventsType1Stderr,
				Created: 2829.12,
				Payload: operations.Payload{
					DeploymentID: "<id>",
					ID:           "<id>",
					Date:         7964.23,
					Serial:       "<value>",
				},
			},
		)),
		types.Pointer(operations.CreateGetDeploymentEventsResponseBodyUnionGetDeploymentEventsResponseBody1(
			operations.GetDeploymentEventsResponseBody1{
				Type:    operations.GetDeploymentEventsType1Stderr,
				Created: 2829.12,
				Payload: operations.Payload{
					DeploymentID: "<id>",
					ID:           "<id>",
					Date:         7964.23,
					Serial:       "<value>",
				},
			},
		)),
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
