// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostV11Projects(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "createProject[0]":
			dir.HandlerFunc("createProject", testCreateProjectCreateProject0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testCreateProjectCreateProject0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.CreateProjectResponseBody = &operations.CreateProjectResponseBody{
		AccountID: "<id>",
		Crons: &operations.CreateProjectCrons{
			EnabledAt:    9025.89,
			DisabledAt:   types.Float64(7665.94),
			UpdatedAt:    4493.49,
			DeploymentID: types.String("<id>"),
			Definitions:  []operations.CreateProjectDefinition{},
		},
		DirectoryListing: true,
		ID:               "<id>",
		LatestDeployments: []operations.CreateProjectLatestDeployment{
			operations.CreateProjectLatestDeployment{
				ID:        "<id>",
				CreatedAt: 79.03,
				CreatedIn: "<value>",
				Creator: &operations.CreateProjectCreator{
					Email:    "Merle_Boehm@yahoo.com",
					UID:      "<id>",
					Username: "Wilbert.Conn",
				},
				DeploymentHostname:     "<value>",
				Name:                   "<value>",
				Plan:                   operations.CreateProjectPlanHobby,
				PreviewCommentsEnabled: types.Bool(false),
				Private:                false,
				ReadyState:             operations.CreateProjectReadyStateReady,
				Type:                   operations.CreateProjectTypeLambdasLambdas,
				URL:                    "https://likable-validity.info",
				UserID:                 "<id>",
			},
			operations.CreateProjectLatestDeployment{
				ID:        "<id>",
				CreatedAt: 79.03,
				CreatedIn: "<value>",
				Creator: &operations.CreateProjectCreator{
					Email:    "Merle_Boehm@yahoo.com",
					UID:      "<id>",
					Username: "Wilbert.Conn",
				},
				DeploymentHostname:     "<value>",
				Name:                   "<value>",
				Plan:                   operations.CreateProjectPlanHobby,
				PreviewCommentsEnabled: types.Bool(false),
				Private:                false,
				ReadyState:             operations.CreateProjectReadyStateReady,
				Type:                   operations.CreateProjectTypeLambdasLambdas,
				URL:                    "https://likable-validity.info",
				UserID:                 "<id>",
			},
		},
		Name:        "<value>",
		NodeVersion: operations.CreateProjectNodeVersionSixteenDotX,
		ResourceConfig: operations.CreateProjectResourceConfigResponse{
			FunctionDefaultRegions: []string{
				"<value 1>",
				"<value 2>",
			},
		},
		DefaultResourceConfig: operations.CreateProjectDefaultResourceConfig{
			FunctionDefaultRegions: []string{
				"<value 1>",
			},
		},
		Targets: map[string]*operations.CreateProjectTargets{
			"key": &operations.CreateProjectTargets{
				ID:        "<id>",
				CreatedAt: 3635.11,
				CreatedIn: "<value>",
				Creator: &operations.CreateProjectCreator{
					Email:    "Leanne_Langworth@gmail.com",
					UID:      "<id>",
					Username: "Kurtis_Marks97",
				},
				DeploymentHostname:     "<value>",
				Name:                   "<value>",
				Plan:                   operations.CreateProjectPlanHobby,
				PreviewCommentsEnabled: types.Bool(false),
				Private:                false,
				ReadyState:             operations.CreateProjectReadyStateError,
				Type:                   operations.CreateProjectTypeLambdasLambdas,
				URL:                    "https://twin-hydrolyse.com/",
				UserID:                 "<id>",
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
