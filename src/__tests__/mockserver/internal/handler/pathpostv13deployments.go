// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostV13Deployments(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "createDeployment[0]":
			dir.HandlerFunc("createDeployment", testCreateDeploymentCreateDeployment0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testCreateDeploymentCreateDeployment0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.CreateDeploymentResponseBody = &operations.CreateDeploymentResponseBody{
		Build: operations.CreateDeploymentBuild1{
			Env: []string{
				"<value 1>",
				"<value 2>",
				"<value 3>",
			},
		},
		Env:                       []string{},
		InspectorURL:              nil,
		IsInConcurrentBuildsQueue: false,
		IsInSystemBuildsQueue:     false,
		ProjectSettings:           operations.CreateDeploymentProjectSettingsLambdas{},
		AliasAssigned:             false,
		BootedAt:                  3619.08,
		BuildingAt:                1664.36,
		BuildSkipped:              false,
		Creator: operations.CreateDeploymentCreator{
			UID: "<id>",
		},
		Public:    false,
		Status:    operations.CreateDeploymentStatusCanceled,
		ID:        "<id>",
		Name:      "<value>",
		CreatedAt: 179.28,
		Type:      operations.CreateDeploymentTypeLambdasLambdas,
		Version:   8477.72,
		Meta: map[string]string{
			"key": "<value>",
		},
		ReadyState: operations.CreateDeploymentReadyStateBuilding,
		Regions:    []string{},
		URL:        "https://unwritten-viability.org",
		ProjectID:  "<id>",
		OwnerID:    "<id>",
		Routes:     []operations.CreateDeploymentRouteUnion{},
		Plan:       operations.CreateDeploymentPlanEnterprise,
		CreatedIn:  "<value>",
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
