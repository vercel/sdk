// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostV1ProjectsIDOrNameRollingReleaseApproveStage(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "approveRollingReleaseStage[0]":
			dir.HandlerFunc("approveRollingReleaseStage", testApproveRollingReleaseStageApproveRollingReleaseStage0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testApproveRollingReleaseStageApproveRollingReleaseStage0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", false); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *operations.ApproveRollingReleaseStageResponseBody = &operations.ApproveRollingReleaseStageResponseBody{
		RollingRelease: &operations.ApproveRollingReleaseStageRollingRelease{
			State: operations.ApproveRollingReleaseStageStateActive,
			CurrentDeployment: &operations.ApproveRollingReleaseStageCurrentDeployment{
				ID:           "dpl_abc123",
				Name:         "my-shop@main",
				URL:          "my-shop.vercel.app",
				Target:       operations.ApproveRollingReleaseStageCurrentDeploymentTargetProduction.ToPointer(),
				Source:       operations.ApproveRollingReleaseStageCurrentDeploymentSourceGit.ToPointer(),
				CreatedAt:    1716206500000,
				ReadyState:   operations.ApproveRollingReleaseStageCurrentDeploymentReadyStateReady,
				ReadyStateAt: types.Float64(1716206800000),
			},
			CanaryDeployment: &operations.ApproveRollingReleaseStageCanaryDeployment{
				ID:           "dpl_def456",
				Name:         "my-shop@9c7e2f4",
				URL:          "9c7e2f4-my-shop.vercel.app",
				Target:       operations.ApproveRollingReleaseStageCanaryDeploymentTargetProduction.ToPointer(),
				Source:       operations.ApproveRollingReleaseStageCanaryDeploymentSourceGit.ToPointer(),
				CreatedAt:    1716210100000,
				ReadyState:   operations.ApproveRollingReleaseStageCanaryDeploymentReadyStateReady,
				ReadyStateAt: types.Float64(1716210400000),
			},
			QueuedDeploymentID: types.String("dpl_ghi789"),
			Stages: []operations.ApproveRollingReleaseStageStage{
				operations.ApproveRollingReleaseStageStage{
					Index:            0,
					IsFinalStage:     false,
					TargetPercentage: 5,
					RequireApproval:  true,
					Duration:         nil,
				},
				operations.ApproveRollingReleaseStageStage{
					Index:            1,
					IsFinalStage:     false,
					TargetPercentage: 25,
					RequireApproval:  true,
					Duration:         nil,
				},
				operations.ApproveRollingReleaseStageStage{
					Index:            2,
					IsFinalStage:     false,
					TargetPercentage: 60,
					RequireApproval:  true,
					Duration:         nil,
				},
				operations.ApproveRollingReleaseStageStage{
					Index:            3,
					IsFinalStage:     true,
					TargetPercentage: 100,
					RequireApproval:  false,
					Duration:         nil,
				},
			},
			ActiveStage: &operations.ApproveRollingReleaseStageActiveStage{
				Index:            1,
				IsFinalStage:     false,
				TargetPercentage: 25,
				RequireApproval:  true,
				Duration:         nil,
			},
			NextStage: &operations.ApproveRollingReleaseStageNextStage{
				Index:            2,
				IsFinalStage:     false,
				TargetPercentage: 60,
				RequireApproval:  true,
				Duration:         nil,
			},
			StartedAt: 1716210500000,
			UpdatedAt: 1716210600000,
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
