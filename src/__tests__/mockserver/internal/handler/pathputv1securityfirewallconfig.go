// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/operations"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPutV1SecurityFirewallConfig(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "putFirewallConfig[0]":
			dir.HandlerFunc("putFirewallConfig", testPutFirewallConfigPutFirewallConfig0)(w, req)
		default:
			http.Error(w, "Unknown test: "+test, http.StatusBadRequest)
		}
	}
}

func testPutFirewallConfigPutFirewallConfig0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	respBody := &operations.PutFirewallConfigResponseBody{
		Active: operations.Active{
			OwnerID:         "<id>",
			ProjectKey:      "<value>",
			ID:              "<id>",
			Version:         4570.86,
			UpdatedAt:       "<value>",
			FirewallEnabled: true,
			Crs: operations.PutFirewallConfigCrs{
				Sd: operations.PutFirewallConfigSd{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdActionDeny,
				},
				Ma: operations.PutFirewallConfigMa{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaActionLog,
				},
				Lfi: operations.PutFirewallConfigLfi{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONActionLog,
				},
				Rfi: operations.PutFirewallConfigRfi{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActionDeny,
				},
				Rce: operations.PutFirewallConfigRce{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveActionDeny,
				},
				Php: operations.PutFirewallConfigPhp{
					Active: true,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsActionDeny,
				},
				Gen: operations.PutFirewallConfigGen{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenActionDeny,
				},
				XSS: operations.PutFirewallConfigXSS{
					Active: false,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSActionDeny,
				},
				Sqli: operations.PutFirewallConfigSqli{
					Active: true,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliActionLog,
				},
				Sf: operations.PutFirewallConfigSf{
					Active: true,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfActionDeny,
				},
				Java: operations.PutFirewallConfigJava{
					Active: true,
					Action: operations.PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaActionLog,
				},
			},
			Rules: []operations.PutFirewallConfigRules{
				operations.PutFirewallConfigRules{
					ID:     "<id>",
					Name:   "<value>",
					Active: true,
					ConditionGroup: []operations.PutFirewallConfigConditionGroup{
						operations.PutFirewallConfigConditionGroup{
							Conditions: []operations.PutFirewallConfigConditions{
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeIPAddress,
									Op:   operations.PutFirewallConfigOpSuf,
								},
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeGeoAsNumber,
									Op:   operations.PutFirewallConfigOpPre,
								},
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeJa3Digest,
									Op:   operations.PutFirewallConfigOpInc,
								},
							},
						},
						operations.PutFirewallConfigConditionGroup{
							Conditions: []operations.PutFirewallConfigConditions{
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeGeoAsNumber,
									Op:   operations.PutFirewallConfigOpNeq,
								},
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeProtocol,
									Op:   operations.PutFirewallConfigOpSub,
								},
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeJa3Digest,
									Op:   operations.PutFirewallConfigOpSuf,
								},
							},
						},
						operations.PutFirewallConfigConditionGroup{
							Conditions: []operations.PutFirewallConfigConditions{
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeRegion,
									Op:   operations.PutFirewallConfigOpNeq,
								},
							},
						},
					},
					Action: operations.PutFirewallConfigSecurityResponseAction{},
				},
				operations.PutFirewallConfigRules{
					ID:             "<id>",
					Name:           "<value>",
					Active:         false,
					ConditionGroup: []operations.PutFirewallConfigConditionGroup{},
					Action:         operations.PutFirewallConfigSecurityResponseAction{},
				},
				operations.PutFirewallConfigRules{
					ID:     "<id>",
					Name:   "<value>",
					Active: false,
					ConditionGroup: []operations.PutFirewallConfigConditionGroup{
						operations.PutFirewallConfigConditionGroup{
							Conditions: []operations.PutFirewallConfigConditions{
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeScheme,
									Op:   operations.PutFirewallConfigOpNeq,
								},
							},
						},
						operations.PutFirewallConfigConditionGroup{
							Conditions: []operations.PutFirewallConfigConditions{},
						},
						operations.PutFirewallConfigConditionGroup{
							Conditions: []operations.PutFirewallConfigConditions{
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeHeader,
									Op:   operations.PutFirewallConfigOpInc,
								},
								operations.PutFirewallConfigConditions{
									Type: operations.PutFirewallConfigSecurityTypeQuery,
									Op:   operations.PutFirewallConfigOpEq,
								},
							},
						},
					},
					Action: operations.PutFirewallConfigSecurityResponseAction{},
				},
			},
			Ips:     []operations.PutFirewallConfigIps{},
			Changes: []operations.PutFirewallConfigChanges{},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
