// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type Reason string

const (
	ReasonSubscriptionCanceled    Reason = "SUBSCRIPTION_CANCELED"
	ReasonSubscriptionExpired     Reason = "SUBSCRIPTION_EXPIRED"
	ReasonUnpaidInvoice           Reason = "UNPAID_INVOICE"
	ReasonEnterpriseTrialEnded    Reason = "ENTERPRISE_TRIAL_ENDED"
	ReasonFairUseLimitsExceeded   Reason = "FAIR_USE_LIMITS_EXCEEDED"
	ReasonBlockedForPlatformAbuse Reason = "BLOCKED_FOR_PLATFORM_ABUSE"
)

func (e Reason) ToPointer() *Reason {
	return &e
}
func (e *Reason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBSCRIPTION_CANCELED":
		fallthrough
	case "SUBSCRIPTION_EXPIRED":
		fallthrough
	case "UNPAID_INVOICE":
		fallthrough
	case "ENTERPRISE_TRIAL_ENDED":
		fallthrough
	case "FAIR_USE_LIMITS_EXCEEDED":
		fallthrough
	case "BLOCKED_FOR_PLATFORM_ABUSE":
		*e = Reason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Reason: %v", v)
	}
}

type BlockedDueToOverageType string

const (
	BlockedDueToOverageTypeAnalyticsUsage                          BlockedDueToOverageType = "analyticsUsage"
	BlockedDueToOverageTypeArtifacts                               BlockedDueToOverageType = "artifacts"
	BlockedDueToOverageTypeBandwidth                               BlockedDueToOverageType = "bandwidth"
	BlockedDueToOverageTypeBlobTotalAdvancedRequests               BlockedDueToOverageType = "blobTotalAdvancedRequests"
	BlockedDueToOverageTypeBlobTotalAvgSizeInBytes                 BlockedDueToOverageType = "blobTotalAvgSizeInBytes"
	BlockedDueToOverageTypeBlobTotalGetResponseObjectSizeInBytes   BlockedDueToOverageType = "blobTotalGetResponseObjectSizeInBytes"
	BlockedDueToOverageTypeBlobTotalSimpleRequests                 BlockedDueToOverageType = "blobTotalSimpleRequests"
	BlockedDueToOverageTypeDataCacheRead                           BlockedDueToOverageType = "dataCacheRead"
	BlockedDueToOverageTypeDataCacheWrite                          BlockedDueToOverageType = "dataCacheWrite"
	BlockedDueToOverageTypeEdgeConfigRead                          BlockedDueToOverageType = "edgeConfigRead"
	BlockedDueToOverageTypeEdgeConfigWrite                         BlockedDueToOverageType = "edgeConfigWrite"
	BlockedDueToOverageTypeEdgeFunctionExecutionUnits              BlockedDueToOverageType = "edgeFunctionExecutionUnits"
	BlockedDueToOverageTypeEdgeMiddlewareInvocations               BlockedDueToOverageType = "edgeMiddlewareInvocations"
	BlockedDueToOverageTypeEdgeRequestAdditionalCPUDuration        BlockedDueToOverageType = "edgeRequestAdditionalCpuDuration"
	BlockedDueToOverageTypeEdgeRequest                             BlockedDueToOverageType = "edgeRequest"
	BlockedDueToOverageTypeElasticConcurrencyBuildSlots            BlockedDueToOverageType = "elasticConcurrencyBuildSlots"
	BlockedDueToOverageTypeFastDataTransfer                        BlockedDueToOverageType = "fastDataTransfer"
	BlockedDueToOverageTypeFastOriginTransfer                      BlockedDueToOverageType = "fastOriginTransfer"
	BlockedDueToOverageTypeFunctionDuration                        BlockedDueToOverageType = "functionDuration"
	BlockedDueToOverageTypeFunctionInvocation                      BlockedDueToOverageType = "functionInvocation"
	BlockedDueToOverageTypeImageOptimizationCacheRead              BlockedDueToOverageType = "imageOptimizationCacheRead"
	BlockedDueToOverageTypeImageOptimizationCacheWrite             BlockedDueToOverageType = "imageOptimizationCacheWrite"
	BlockedDueToOverageTypeImageOptimizationTransformation         BlockedDueToOverageType = "imageOptimizationTransformation"
	BlockedDueToOverageTypeLogDrainsVolume                         BlockedDueToOverageType = "logDrainsVolume"
	BlockedDueToOverageTypeMonitoringMetric                        BlockedDueToOverageType = "monitoringMetric"
	BlockedDueToOverageTypeBlobDataTransfer                        BlockedDueToOverageType = "blobDataTransfer"
	BlockedDueToOverageTypeObservabilityEvent                      BlockedDueToOverageType = "observabilityEvent"
	BlockedDueToOverageTypePostgresComputeTime                     BlockedDueToOverageType = "postgresComputeTime"
	BlockedDueToOverageTypePostgresDataStorage                     BlockedDueToOverageType = "postgresDataStorage"
	BlockedDueToOverageTypePostgresDataTransfer                    BlockedDueToOverageType = "postgresDataTransfer"
	BlockedDueToOverageTypePostgresDatabase                        BlockedDueToOverageType = "postgresDatabase"
	BlockedDueToOverageTypePostgresWrittenData                     BlockedDueToOverageType = "postgresWrittenData"
	BlockedDueToOverageTypeServerlessFunctionExecution             BlockedDueToOverageType = "serverlessFunctionExecution"
	BlockedDueToOverageTypeSourceImages                            BlockedDueToOverageType = "sourceImages"
	BlockedDueToOverageTypeStorageRedisTotalBandwidthInBytes       BlockedDueToOverageType = "storageRedisTotalBandwidthInBytes"
	BlockedDueToOverageTypeStorageRedisTotalCommands               BlockedDueToOverageType = "storageRedisTotalCommands"
	BlockedDueToOverageTypeStorageRedisTotalDailyAvgStorageInBytes BlockedDueToOverageType = "storageRedisTotalDailyAvgStorageInBytes"
	BlockedDueToOverageTypeStorageRedisTotalDatabases              BlockedDueToOverageType = "storageRedisTotalDatabases"
	BlockedDueToOverageTypeWafOwaspExcessBytes                     BlockedDueToOverageType = "wafOwaspExcessBytes"
	BlockedDueToOverageTypeWafOwaspRequests                        BlockedDueToOverageType = "wafOwaspRequests"
	BlockedDueToOverageTypeWafRateLimitRequest                     BlockedDueToOverageType = "wafRateLimitRequest"
	BlockedDueToOverageTypeWebAnalyticsEvent                       BlockedDueToOverageType = "webAnalyticsEvent"
)

func (e BlockedDueToOverageType) ToPointer() *BlockedDueToOverageType {
	return &e
}
func (e *BlockedDueToOverageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "blobTotalAdvancedRequests":
		fallthrough
	case "blobTotalAvgSizeInBytes":
		fallthrough
	case "blobTotalGetResponseObjectSizeInBytes":
		fallthrough
	case "blobTotalSimpleRequests":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "edgeRequestAdditionalCpuDuration":
		fallthrough
	case "edgeRequest":
		fallthrough
	case "elasticConcurrencyBuildSlots":
		fallthrough
	case "fastDataTransfer":
		fallthrough
	case "fastOriginTransfer":
		fallthrough
	case "functionDuration":
		fallthrough
	case "functionInvocation":
		fallthrough
	case "imageOptimizationCacheRead":
		fallthrough
	case "imageOptimizationCacheWrite":
		fallthrough
	case "imageOptimizationTransformation":
		fallthrough
	case "logDrainsVolume":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "blobDataTransfer":
		fallthrough
	case "observabilityEvent":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "wafOwaspExcessBytes":
		fallthrough
	case "wafOwaspRequests":
		fallthrough
	case "wafRateLimitRequest":
		fallthrough
	case "webAnalyticsEvent":
		*e = BlockedDueToOverageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BlockedDueToOverageType: %v", v)
	}
}

// SoftBlock - When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
type SoftBlock struct {
	BlockedAt               float64                  `json:"blockedAt"`
	Reason                  Reason                   `json:"reason"`
	BlockedDueToOverageType *BlockedDueToOverageType `json:"blockedDueToOverageType,omitempty"`
}

func (o *SoftBlock) GetBlockedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BlockedAt
}

func (o *SoftBlock) GetReason() Reason {
	if o == nil {
		return Reason("")
	}
	return o.Reason
}

func (o *SoftBlock) GetBlockedDueToOverageType() *BlockedDueToOverageType {
	if o == nil {
		return nil
	}
	return o.BlockedDueToOverageType
}

// Billing - An object containing billing infomation associated with the User account.
type Billing struct {
}

// BuildEntitlements - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type BuildEntitlements struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EnhancedBuilds *bool `json:"enhancedBuilds,omitempty"`
}

func (o *BuildEntitlements) GetEnhancedBuilds() *bool {
	if o == nil {
		return nil
	}
	return o.EnhancedBuilds
}

// PurchaseType - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type PurchaseType string

const (
	PurchaseTypeEnhanced PurchaseType = "enhanced"
)

func (e PurchaseType) ToPointer() *PurchaseType {
	return &e
}
func (e *PurchaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		*e = PurchaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseType: %v", v)
	}
}

// BuildMachine - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type BuildMachine struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	PurchaseType *PurchaseType `json:"purchaseType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	IsDefaultBuildMachine *bool `json:"isDefaultBuildMachine,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	Cores *float64 `json:"cores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	Memory *float64 `json:"memory,omitempty"`
}

func (o *BuildMachine) GetPurchaseType() *PurchaseType {
	if o == nil {
		return nil
	}
	return o.PurchaseType
}

func (o *BuildMachine) GetIsDefaultBuildMachine() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultBuildMachine
}

func (o *BuildMachine) GetCores() *float64 {
	if o == nil {
		return nil
	}
	return o.Cores
}

func (o *BuildMachine) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

// ResourceConfig - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type ResourceConfig struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	NodeType *string `json:"nodeType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ConcurrentBuilds *float64 `json:"concurrentBuilds,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BuildEntitlements *BuildEntitlements `json:"buildEntitlements,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	AwsAccountType *string `json:"awsAccountType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	AwsAccountIds []string `json:"awsAccountIds,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CfZoneName *string `json:"cfZoneName,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ImageOptimizationType *string `json:"imageOptimizationType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeConfigs *float64 `json:"edgeConfigs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeConfigSize *float64 `json:"edgeConfigSize,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeFunctionMaxSizeBytes *float64 `json:"edgeFunctionMaxSizeBytes,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeFunctionExecutionTimeoutMs *float64 `json:"edgeFunctionExecutionTimeoutMs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ServerlessFunctionDefaultMaxExecutionTime *float64 `json:"serverlessFunctionDefaultMaxExecutionTime,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ServerlessFunctionMaxMemorySize *float64 `json:"serverlessFunctionMaxMemorySize,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	KvDatabases *float64 `json:"kvDatabases,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	PostgresDatabases *float64 `json:"postgresDatabases,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BlobStores *float64 `json:"blobStores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	IntegrationStores *float64 `json:"integrationStores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CronJobs *float64 `json:"cronJobs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CronJobsPerProject *float64 `json:"cronJobsPerProject,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	MicrofrontendGroupsPerTeam *float64 `json:"microfrontendGroupsPerTeam,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	MicrofrontendProjectsPerGroup *float64 `json:"microfrontendProjectsPerGroup,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	FlagsExplorerOverridesThreshold *float64 `json:"flagsExplorerOverridesThreshold,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	FlagsExplorerUnlimitedOverrides *bool `json:"flagsExplorerUnlimitedOverrides,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CustomEnvironmentsPerProject *float64 `json:"customEnvironmentsPerProject,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BuildMachine *BuildMachine `json:"buildMachine,omitempty"`
}

func (o *ResourceConfig) GetNodeType() *string {
	if o == nil {
		return nil
	}
	return o.NodeType
}

func (o *ResourceConfig) GetConcurrentBuilds() *float64 {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *ResourceConfig) GetBuildEntitlements() *BuildEntitlements {
	if o == nil {
		return nil
	}
	return o.BuildEntitlements
}

func (o *ResourceConfig) GetAwsAccountType() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountType
}

func (o *ResourceConfig) GetAwsAccountIds() []string {
	if o == nil {
		return nil
	}
	return o.AwsAccountIds
}

func (o *ResourceConfig) GetCfZoneName() *string {
	if o == nil {
		return nil
	}
	return o.CfZoneName
}

func (o *ResourceConfig) GetImageOptimizationType() *string {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationType
}

func (o *ResourceConfig) GetEdgeConfigs() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeConfigs
}

func (o *ResourceConfig) GetEdgeConfigSize() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSize
}

func (o *ResourceConfig) GetEdgeFunctionMaxSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionMaxSizeBytes
}

func (o *ResourceConfig) GetEdgeFunctionExecutionTimeoutMs() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionExecutionTimeoutMs
}

func (o *ResourceConfig) GetServerlessFunctionDefaultMaxExecutionTime() *float64 {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionDefaultMaxExecutionTime
}

func (o *ResourceConfig) GetServerlessFunctionMaxMemorySize() *float64 {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionMaxMemorySize
}

func (o *ResourceConfig) GetKvDatabases() *float64 {
	if o == nil {
		return nil
	}
	return o.KvDatabases
}

func (o *ResourceConfig) GetPostgresDatabases() *float64 {
	if o == nil {
		return nil
	}
	return o.PostgresDatabases
}

func (o *ResourceConfig) GetBlobStores() *float64 {
	if o == nil {
		return nil
	}
	return o.BlobStores
}

func (o *ResourceConfig) GetIntegrationStores() *float64 {
	if o == nil {
		return nil
	}
	return o.IntegrationStores
}

func (o *ResourceConfig) GetCronJobs() *float64 {
	if o == nil {
		return nil
	}
	return o.CronJobs
}

func (o *ResourceConfig) GetCronJobsPerProject() *float64 {
	if o == nil {
		return nil
	}
	return o.CronJobsPerProject
}

func (o *ResourceConfig) GetMicrofrontendGroupsPerTeam() *float64 {
	if o == nil {
		return nil
	}
	return o.MicrofrontendGroupsPerTeam
}

func (o *ResourceConfig) GetMicrofrontendProjectsPerGroup() *float64 {
	if o == nil {
		return nil
	}
	return o.MicrofrontendProjectsPerGroup
}

func (o *ResourceConfig) GetFlagsExplorerOverridesThreshold() *float64 {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerOverridesThreshold
}

func (o *ResourceConfig) GetFlagsExplorerUnlimitedOverrides() *bool {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerUnlimitedOverrides
}

func (o *ResourceConfig) GetCustomEnvironmentsPerProject() *float64 {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentsPerProject
}

func (o *ResourceConfig) GetBuildMachine() *BuildMachine {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

type ViewPreference string

const (
	ViewPreferenceList  ViewPreference = "list"
	ViewPreferenceCards ViewPreference = "cards"
)

func (e ViewPreference) ToPointer() *ViewPreference {
	return &e
}
func (e *ViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		fallthrough
	case "cards":
		*e = ViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ViewPreference: %v", v)
	}
}

type FavoritesViewPreference string

const (
	FavoritesViewPreferenceOpen   FavoritesViewPreference = "open"
	FavoritesViewPreferenceClosed FavoritesViewPreference = "closed"
)

func (e FavoritesViewPreference) ToPointer() *FavoritesViewPreference {
	return &e
}
func (e *FavoritesViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = FavoritesViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FavoritesViewPreference: %v", v)
	}
}

type RecentsViewPreference string

const (
	RecentsViewPreferenceOpen   RecentsViewPreference = "open"
	RecentsViewPreferenceClosed RecentsViewPreference = "closed"
)

func (e RecentsViewPreference) ToPointer() *RecentsViewPreference {
	return &e
}
func (e *RecentsViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = RecentsViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecentsViewPreference: %v", v)
	}
}

// ActiveDashboardViews - set of dashboard view preferences (cards or list) per scopeId
type ActiveDashboardViews struct {
	ScopeID                 string                   `json:"scopeId"`
	ViewPreference          *ViewPreference          `json:"viewPreference,omitempty"`
	FavoritesViewPreference *FavoritesViewPreference `json:"favoritesViewPreference,omitempty"`
	RecentsViewPreference   *RecentsViewPreference   `json:"recentsViewPreference,omitempty"`
}

func (o *ActiveDashboardViews) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *ActiveDashboardViews) GetViewPreference() *ViewPreference {
	if o == nil {
		return nil
	}
	return o.ViewPreference
}

func (o *ActiveDashboardViews) GetFavoritesViewPreference() *FavoritesViewPreference {
	if o == nil {
		return nil
	}
	return o.FavoritesViewPreference
}

func (o *ActiveDashboardViews) GetRecentsViewPreference() *RecentsViewPreference {
	if o == nil {
		return nil
	}
	return o.RecentsViewPreference
}

type ImportFlowGitNamespaceType string

const (
	ImportFlowGitNamespaceTypeStr    ImportFlowGitNamespaceType = "str"
	ImportFlowGitNamespaceTypeNumber ImportFlowGitNamespaceType = "number"
)

type ImportFlowGitNamespace struct {
	Str    *string
	Number *float64

	Type ImportFlowGitNamespaceType
}

func CreateImportFlowGitNamespaceStr(str string) ImportFlowGitNamespace {
	typ := ImportFlowGitNamespaceTypeStr

	return ImportFlowGitNamespace{
		Str:  &str,
		Type: typ,
	}
}

func CreateImportFlowGitNamespaceNumber(number float64) ImportFlowGitNamespace {
	typ := ImportFlowGitNamespaceTypeNumber

	return ImportFlowGitNamespace{
		Number: &number,
		Type:   typ,
	}
}

func (u *ImportFlowGitNamespace) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ImportFlowGitNamespaceTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ImportFlowGitNamespaceTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ImportFlowGitNamespace", string(data))
}

func (u ImportFlowGitNamespace) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type ImportFlowGitNamespace: all fields are null")
}

type ImportFlowGitNamespaceIDType string

const (
	ImportFlowGitNamespaceIDTypeStr    ImportFlowGitNamespaceIDType = "str"
	ImportFlowGitNamespaceIDTypeNumber ImportFlowGitNamespaceIDType = "number"
)

type ImportFlowGitNamespaceID struct {
	Str    *string
	Number *float64

	Type ImportFlowGitNamespaceIDType
}

func CreateImportFlowGitNamespaceIDStr(str string) ImportFlowGitNamespaceID {
	typ := ImportFlowGitNamespaceIDTypeStr

	return ImportFlowGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateImportFlowGitNamespaceIDNumber(number float64) ImportFlowGitNamespaceID {
	typ := ImportFlowGitNamespaceIDTypeNumber

	return ImportFlowGitNamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *ImportFlowGitNamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ImportFlowGitNamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ImportFlowGitNamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ImportFlowGitNamespaceID", string(data))
}

func (u ImportFlowGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type ImportFlowGitNamespaceID: all fields are null")
}

type ImportFlowGitProvider string

const (
	ImportFlowGitProviderGithub           ImportFlowGitProvider = "github"
	ImportFlowGitProviderGitlab           ImportFlowGitProvider = "gitlab"
	ImportFlowGitProviderBitbucket        ImportFlowGitProvider = "bitbucket"
	ImportFlowGitProviderGithubCustomHost ImportFlowGitProvider = "github-custom-host"
)

func (e ImportFlowGitProvider) ToPointer() *ImportFlowGitProvider {
	return &e
}
func (e *ImportFlowGitProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "github-custom-host":
		*e = ImportFlowGitProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImportFlowGitProvider: %v", v)
	}
}

type GitNamespaceIDType string

const (
	GitNamespaceIDTypeStr    GitNamespaceIDType = "str"
	GitNamespaceIDTypeNumber GitNamespaceIDType = "number"
)

type GitNamespaceID struct {
	Str    *string
	Number *float64

	Type GitNamespaceIDType
}

func CreateGitNamespaceIDStr(str string) GitNamespaceID {
	typ := GitNamespaceIDTypeStr

	return GitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGitNamespaceIDNumber(number float64) GitNamespaceID {
	typ := GitNamespaceIDTypeNumber

	return GitNamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GitNamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GitNamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GitNamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GitNamespaceID", string(data))
}

func (u GitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GitNamespaceID: all fields are null")
}

type PreferredScopesAndGitNamespaces struct {
	ScopeID        string          `json:"scopeId"`
	GitNamespaceID *GitNamespaceID `json:"gitNamespaceId"`
}

func (o *PreferredScopesAndGitNamespaces) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *PreferredScopesAndGitNamespaces) GetGitNamespaceID() *GitNamespaceID {
	if o == nil {
		return nil
	}
	return o.GitNamespaceID
}

type Dismissals struct {
	ScopeID   string  `json:"scopeId"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *Dismissals) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *Dismissals) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// DismissedToasts - A record of when, under a certain scopeId, a toast was dismissed
type DismissedToasts struct {
	Name       string       `json:"name"`
	Dismissals []Dismissals `json:"dismissals"`
}

func (o *DismissedToasts) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DismissedToasts) GetDismissals() []Dismissals {
	if o == nil {
		return []Dismissals{}
	}
	return o.Dismissals
}

// FavoriteProjectsAndSpaces - A list of projects and spaces across teams that a user has marked as a favorite.
type FavoriteProjectsAndSpaces struct {
	TeamID    string `json:"teamId"`
	ProjectID string `json:"projectId"`
}

func (o *FavoriteProjectsAndSpaces) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *FavoriteProjectsAndSpaces) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// RemoteCaching - remote caching settings
type RemoteCaching struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *RemoteCaching) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// DataCache - data cache settings
type DataCache struct {
	ExcessBillingEnabled *bool `json:"excessBillingEnabled,omitempty"`
}

func (o *DataCache) GetExcessBillingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ExcessBillingEnabled
}

type WebAnalytics struct {
	BlockedFrom        *float64 `json:"blockedFrom,omitempty"`
	BlockedUntil       *float64 `json:"blockedUntil,omitempty"`
	IsCurrentlyBlocked bool     `json:"isCurrentlyBlocked"`
}

func (o *WebAnalytics) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *WebAnalytics) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *WebAnalytics) GetIsCurrentlyBlocked() bool {
	if o == nil {
		return false
	}
	return o.IsCurrentlyBlocked
}

// FeatureBlocks - Feature blocks for the user
type FeatureBlocks struct {
	WebAnalytics *WebAnalytics `json:"webAnalytics,omitempty"`
}

func (o *FeatureBlocks) GetWebAnalytics() *WebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type NorthstarMigration struct {
	// The ID of the team we created for this user.
	TeamID string `json:"teamId"`
	// The number of projects migrated for this user.
	Projects float64 `json:"projects"`
	// The number of stores migrated for this user.
	Stores float64 `json:"stores"`
	// The number of integration configurations migrated for this user.
	IntegrationConfigurations float64 `json:"integrationConfigurations"`
	// The number of integration clients migrated for this user.
	IntegrationClients float64 `json:"integrationClients"`
	// The migration start time timestamp for this user.
	StartTime float64 `json:"startTime"`
	// The migration end time timestamp for this user.
	EndTime float64 `json:"endTime"`
}

func (o *NorthstarMigration) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *NorthstarMigration) GetProjects() float64 {
	if o == nil {
		return 0.0
	}
	return o.Projects
}

func (o *NorthstarMigration) GetStores() float64 {
	if o == nil {
		return 0.0
	}
	return o.Stores
}

func (o *NorthstarMigration) GetIntegrationConfigurations() float64 {
	if o == nil {
		return 0.0
	}
	return o.IntegrationConfigurations
}

func (o *NorthstarMigration) GetIntegrationClients() float64 {
	if o == nil {
		return 0.0
	}
	return o.IntegrationClients
}

func (o *NorthstarMigration) GetStartTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartTime
}

func (o *NorthstarMigration) GetEndTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.EndTime
}

// Version - The user's version. Will always be `northstar`.
type Version string

const (
	VersionNorthstar Version = "northstar"
)

func (e Version) ToPointer() *Version {
	return &e
}
func (e *Version) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "northstar":
		*e = Version(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Version: %v", v)
	}
}

// AuthUser - Data for the currently authenticated User.
type AuthUser struct {
	// UNIX timestamp (in milliseconds) when the User account was created.
	CreatedAt float64 `json:"createdAt"`
	// When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
	SoftBlock *SoftBlock `json:"softBlock"`
	// An object containing billing infomation associated with the User account.
	Billing *Billing `json:"billing"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ResourceConfig ResourceConfig `json:"resourceConfig"`
	// Prefix that will be used in the URL of "Preview" deployments created by the User account.
	StagingPrefix string `json:"stagingPrefix"`
	// set of dashboard view preferences (cards or list) per scopeId
	ActiveDashboardViews            []ActiveDashboardViews            `json:"activeDashboardViews,omitempty"`
	ImportFlowGitNamespace          *ImportFlowGitNamespace           `json:"importFlowGitNamespace,omitempty"`
	ImportFlowGitNamespaceID        *ImportFlowGitNamespaceID         `json:"importFlowGitNamespaceId,omitempty"`
	ImportFlowGitProvider           *ImportFlowGitProvider            `json:"importFlowGitProvider,omitempty"`
	PreferredScopesAndGitNamespaces []PreferredScopesAndGitNamespaces `json:"preferredScopesAndGitNamespaces,omitempty"`
	// A record of when, under a certain scopeId, a toast was dismissed
	DismissedToasts []DismissedToasts `json:"dismissedToasts,omitempty"`
	// A list of projects and spaces across teams that a user has marked as a favorite.
	FavoriteProjectsAndSpaces []FavoriteProjectsAndSpaces `json:"favoriteProjectsAndSpaces,omitempty"`
	// Whether the user has a trial available for a paid plan subscription.
	HasTrialAvailable bool `json:"hasTrialAvailable"`
	// remote caching settings
	RemoteCaching *RemoteCaching `json:"remoteCaching,omitempty"`
	// data cache settings
	DataCache *DataCache `json:"dataCache,omitempty"`
	// Feature blocks for the user
	FeatureBlocks      *FeatureBlocks      `json:"featureBlocks,omitempty"`
	NorthstarMigration *NorthstarMigration `json:"northstarMigration,omitempty"`
	// The User's unique identifier.
	ID string `json:"id"`
	// Email address associated with the User account.
	Email string `json:"email"`
	// Name associated with the User account, or `null` if none has been provided.
	Name *string `json:"name"`
	// Unique username associated with the User account.
	Username string `json:"username"`
	// SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
	Avatar *string `json:"avatar"`
	// The user's default team.
	DefaultTeamID *string `json:"defaultTeamId"`
	// The user's version. Will always be `northstar`.
	Version Version `json:"version"`
}

func (o *AuthUser) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *AuthUser) GetSoftBlock() *SoftBlock {
	if o == nil {
		return nil
	}
	return o.SoftBlock
}

func (o *AuthUser) GetBilling() *Billing {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *AuthUser) GetResourceConfig() ResourceConfig {
	if o == nil {
		return ResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *AuthUser) GetStagingPrefix() string {
	if o == nil {
		return ""
	}
	return o.StagingPrefix
}

func (o *AuthUser) GetActiveDashboardViews() []ActiveDashboardViews {
	if o == nil {
		return nil
	}
	return o.ActiveDashboardViews
}

func (o *AuthUser) GetImportFlowGitNamespace() *ImportFlowGitNamespace {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitNamespace
}

func (o *AuthUser) GetImportFlowGitNamespaceID() *ImportFlowGitNamespaceID {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitNamespaceID
}

func (o *AuthUser) GetImportFlowGitProvider() *ImportFlowGitProvider {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitProvider
}

func (o *AuthUser) GetPreferredScopesAndGitNamespaces() []PreferredScopesAndGitNamespaces {
	if o == nil {
		return nil
	}
	return o.PreferredScopesAndGitNamespaces
}

func (o *AuthUser) GetDismissedToasts() []DismissedToasts {
	if o == nil {
		return nil
	}
	return o.DismissedToasts
}

func (o *AuthUser) GetFavoriteProjectsAndSpaces() []FavoriteProjectsAndSpaces {
	if o == nil {
		return nil
	}
	return o.FavoriteProjectsAndSpaces
}

func (o *AuthUser) GetHasTrialAvailable() bool {
	if o == nil {
		return false
	}
	return o.HasTrialAvailable
}

func (o *AuthUser) GetRemoteCaching() *RemoteCaching {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *AuthUser) GetDataCache() *DataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *AuthUser) GetFeatureBlocks() *FeatureBlocks {
	if o == nil {
		return nil
	}
	return o.FeatureBlocks
}

func (o *AuthUser) GetNorthstarMigration() *NorthstarMigration {
	if o == nil {
		return nil
	}
	return o.NorthstarMigration
}

func (o *AuthUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AuthUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *AuthUser) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AuthUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *AuthUser) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *AuthUser) GetDefaultTeamID() *string {
	if o == nil {
		return nil
	}
	return o.DefaultTeamID
}

func (o *AuthUser) GetVersion() Version {
	if o == nil {
		return Version("")
	}
	return o.Version
}
