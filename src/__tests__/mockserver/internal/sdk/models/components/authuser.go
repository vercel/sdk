// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type AuthUserReason string

const (
	AuthUserReasonSubscriptionCanceled    AuthUserReason = "SUBSCRIPTION_CANCELED"
	AuthUserReasonSubscriptionExpired     AuthUserReason = "SUBSCRIPTION_EXPIRED"
	AuthUserReasonUnpaidInvoice           AuthUserReason = "UNPAID_INVOICE"
	AuthUserReasonEnterpriseTrialEnded    AuthUserReason = "ENTERPRISE_TRIAL_ENDED"
	AuthUserReasonFairUseLimitsExceeded   AuthUserReason = "FAIR_USE_LIMITS_EXCEEDED"
	AuthUserReasonBlockedForPlatformAbuse AuthUserReason = "BLOCKED_FOR_PLATFORM_ABUSE"
)

func (e AuthUserReason) ToPointer() *AuthUserReason {
	return &e
}
func (e *AuthUserReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBSCRIPTION_CANCELED":
		fallthrough
	case "SUBSCRIPTION_EXPIRED":
		fallthrough
	case "UNPAID_INVOICE":
		fallthrough
	case "ENTERPRISE_TRIAL_ENDED":
		fallthrough
	case "FAIR_USE_LIMITS_EXCEEDED":
		fallthrough
	case "BLOCKED_FOR_PLATFORM_ABUSE":
		*e = AuthUserReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserReason: %v", v)
	}
}

type AuthUserBlockedDueToOverageType string

const (
	AuthUserBlockedDueToOverageTypeAnalyticsUsage                          AuthUserBlockedDueToOverageType = "analyticsUsage"
	AuthUserBlockedDueToOverageTypeArtifacts                               AuthUserBlockedDueToOverageType = "artifacts"
	AuthUserBlockedDueToOverageTypeBandwidth                               AuthUserBlockedDueToOverageType = "bandwidth"
	AuthUserBlockedDueToOverageTypeBlobTotalAdvancedRequests               AuthUserBlockedDueToOverageType = "blobTotalAdvancedRequests"
	AuthUserBlockedDueToOverageTypeBlobTotalAvgSizeInBytes                 AuthUserBlockedDueToOverageType = "blobTotalAvgSizeInBytes"
	AuthUserBlockedDueToOverageTypeBlobTotalGetResponseObjectSizeInBytes   AuthUserBlockedDueToOverageType = "blobTotalGetResponseObjectSizeInBytes"
	AuthUserBlockedDueToOverageTypeBlobTotalSimpleRequests                 AuthUserBlockedDueToOverageType = "blobTotalSimpleRequests"
	AuthUserBlockedDueToOverageTypeConnectDataTransfer                     AuthUserBlockedDueToOverageType = "connectDataTransfer"
	AuthUserBlockedDueToOverageTypeDataCacheRead                           AuthUserBlockedDueToOverageType = "dataCacheRead"
	AuthUserBlockedDueToOverageTypeDataCacheWrite                          AuthUserBlockedDueToOverageType = "dataCacheWrite"
	AuthUserBlockedDueToOverageTypeEdgeConfigRead                          AuthUserBlockedDueToOverageType = "edgeConfigRead"
	AuthUserBlockedDueToOverageTypeEdgeConfigWrite                         AuthUserBlockedDueToOverageType = "edgeConfigWrite"
	AuthUserBlockedDueToOverageTypeEdgeFunctionExecutionUnits              AuthUserBlockedDueToOverageType = "edgeFunctionExecutionUnits"
	AuthUserBlockedDueToOverageTypeEdgeMiddlewareInvocations               AuthUserBlockedDueToOverageType = "edgeMiddlewareInvocations"
	AuthUserBlockedDueToOverageTypeEdgeRequestAdditionalCPUDuration        AuthUserBlockedDueToOverageType = "edgeRequestAdditionalCpuDuration"
	AuthUserBlockedDueToOverageTypeEdgeRequest                             AuthUserBlockedDueToOverageType = "edgeRequest"
	AuthUserBlockedDueToOverageTypeElasticConcurrencyBuildSlots            AuthUserBlockedDueToOverageType = "elasticConcurrencyBuildSlots"
	AuthUserBlockedDueToOverageTypeFastDataTransfer                        AuthUserBlockedDueToOverageType = "fastDataTransfer"
	AuthUserBlockedDueToOverageTypeFastOriginTransfer                      AuthUserBlockedDueToOverageType = "fastOriginTransfer"
	AuthUserBlockedDueToOverageTypeFluidCPUDuration                        AuthUserBlockedDueToOverageType = "fluidCpuDuration"
	AuthUserBlockedDueToOverageTypeFluidDuration                           AuthUserBlockedDueToOverageType = "fluidDuration"
	AuthUserBlockedDueToOverageTypeFunctionDuration                        AuthUserBlockedDueToOverageType = "functionDuration"
	AuthUserBlockedDueToOverageTypeFunctionInvocation                      AuthUserBlockedDueToOverageType = "functionInvocation"
	AuthUserBlockedDueToOverageTypeImageOptimizationCacheRead              AuthUserBlockedDueToOverageType = "imageOptimizationCacheRead"
	AuthUserBlockedDueToOverageTypeImageOptimizationCacheWrite             AuthUserBlockedDueToOverageType = "imageOptimizationCacheWrite"
	AuthUserBlockedDueToOverageTypeImageOptimizationTransformation         AuthUserBlockedDueToOverageType = "imageOptimizationTransformation"
	AuthUserBlockedDueToOverageTypeLogDrainsVolume                         AuthUserBlockedDueToOverageType = "logDrainsVolume"
	AuthUserBlockedDueToOverageTypeMonitoringMetric                        AuthUserBlockedDueToOverageType = "monitoringMetric"
	AuthUserBlockedDueToOverageTypeBlobDataTransfer                        AuthUserBlockedDueToOverageType = "blobDataTransfer"
	AuthUserBlockedDueToOverageTypeObservabilityEvent                      AuthUserBlockedDueToOverageType = "observabilityEvent"
	AuthUserBlockedDueToOverageTypeOnDemandConcurrencyMinutes              AuthUserBlockedDueToOverageType = "onDemandConcurrencyMinutes"
	AuthUserBlockedDueToOverageTypePostgresComputeTime                     AuthUserBlockedDueToOverageType = "postgresComputeTime"
	AuthUserBlockedDueToOverageTypePostgresDataStorage                     AuthUserBlockedDueToOverageType = "postgresDataStorage"
	AuthUserBlockedDueToOverageTypePostgresDataTransfer                    AuthUserBlockedDueToOverageType = "postgresDataTransfer"
	AuthUserBlockedDueToOverageTypePostgresDatabase                        AuthUserBlockedDueToOverageType = "postgresDatabase"
	AuthUserBlockedDueToOverageTypePostgresWrittenData                     AuthUserBlockedDueToOverageType = "postgresWrittenData"
	AuthUserBlockedDueToOverageTypeRuntimeCacheRead                        AuthUserBlockedDueToOverageType = "runtimeCacheRead"
	AuthUserBlockedDueToOverageTypeRuntimeCacheWrite                       AuthUserBlockedDueToOverageType = "runtimeCacheWrite"
	AuthUserBlockedDueToOverageTypeServerlessFunctionExecution             AuthUserBlockedDueToOverageType = "serverlessFunctionExecution"
	AuthUserBlockedDueToOverageTypeSourceImages                            AuthUserBlockedDueToOverageType = "sourceImages"
	AuthUserBlockedDueToOverageTypeStorageRedisTotalBandwidthInBytes       AuthUserBlockedDueToOverageType = "storageRedisTotalBandwidthInBytes"
	AuthUserBlockedDueToOverageTypeStorageRedisTotalCommands               AuthUserBlockedDueToOverageType = "storageRedisTotalCommands"
	AuthUserBlockedDueToOverageTypeStorageRedisTotalDailyAvgStorageInBytes AuthUserBlockedDueToOverageType = "storageRedisTotalDailyAvgStorageInBytes"
	AuthUserBlockedDueToOverageTypeStorageRedisTotalDatabases              AuthUserBlockedDueToOverageType = "storageRedisTotalDatabases"
	AuthUserBlockedDueToOverageTypeWafOwaspExcessBytes                     AuthUserBlockedDueToOverageType = "wafOwaspExcessBytes"
	AuthUserBlockedDueToOverageTypeWafOwaspRequests                        AuthUserBlockedDueToOverageType = "wafOwaspRequests"
	AuthUserBlockedDueToOverageTypeWafRateLimitRequest                     AuthUserBlockedDueToOverageType = "wafRateLimitRequest"
	AuthUserBlockedDueToOverageTypeWebAnalyticsEvent                       AuthUserBlockedDueToOverageType = "webAnalyticsEvent"
)

func (e AuthUserBlockedDueToOverageType) ToPointer() *AuthUserBlockedDueToOverageType {
	return &e
}
func (e *AuthUserBlockedDueToOverageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "blobTotalAdvancedRequests":
		fallthrough
	case "blobTotalAvgSizeInBytes":
		fallthrough
	case "blobTotalGetResponseObjectSizeInBytes":
		fallthrough
	case "blobTotalSimpleRequests":
		fallthrough
	case "connectDataTransfer":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "edgeRequestAdditionalCpuDuration":
		fallthrough
	case "edgeRequest":
		fallthrough
	case "elasticConcurrencyBuildSlots":
		fallthrough
	case "fastDataTransfer":
		fallthrough
	case "fastOriginTransfer":
		fallthrough
	case "fluidCpuDuration":
		fallthrough
	case "fluidDuration":
		fallthrough
	case "functionDuration":
		fallthrough
	case "functionInvocation":
		fallthrough
	case "imageOptimizationCacheRead":
		fallthrough
	case "imageOptimizationCacheWrite":
		fallthrough
	case "imageOptimizationTransformation":
		fallthrough
	case "logDrainsVolume":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "blobDataTransfer":
		fallthrough
	case "observabilityEvent":
		fallthrough
	case "onDemandConcurrencyMinutes":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "runtimeCacheRead":
		fallthrough
	case "runtimeCacheWrite":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "wafOwaspExcessBytes":
		fallthrough
	case "wafOwaspRequests":
		fallthrough
	case "wafRateLimitRequest":
		fallthrough
	case "webAnalyticsEvent":
		*e = AuthUserBlockedDueToOverageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserBlockedDueToOverageType: %v", v)
	}
}

// AuthUserSoftBlock - When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
type AuthUserSoftBlock struct {
	BlockedAt               float64                          `json:"blockedAt"`
	Reason                  AuthUserReason                   `json:"reason"`
	BlockedDueToOverageType *AuthUserBlockedDueToOverageType `json:"blockedDueToOverageType,omitempty"`
}

func (o *AuthUserSoftBlock) GetBlockedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BlockedAt
}

func (o *AuthUserSoftBlock) GetReason() AuthUserReason {
	if o == nil {
		return AuthUserReason("")
	}
	return o.Reason
}

func (o *AuthUserSoftBlock) GetBlockedDueToOverageType() *AuthUserBlockedDueToOverageType {
	if o == nil {
		return nil
	}
	return o.BlockedDueToOverageType
}

// AuthUserBilling - An object containing billing infomation associated with the User account.
type AuthUserBilling struct {
}

// AuthUserBuildEntitlements - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type AuthUserBuildEntitlements struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EnhancedBuilds *bool `json:"enhancedBuilds,omitempty"`
}

func (o *AuthUserBuildEntitlements) GetEnhancedBuilds() *bool {
	if o == nil {
		return nil
	}
	return o.EnhancedBuilds
}

// AuthUserPurchaseType - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type AuthUserPurchaseType string

const (
	AuthUserPurchaseTypeEnhanced AuthUserPurchaseType = "enhanced"
	AuthUserPurchaseTypeTurbo    AuthUserPurchaseType = "turbo"
)

func (e AuthUserPurchaseType) ToPointer() *AuthUserPurchaseType {
	return &e
}
func (e *AuthUserPurchaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = AuthUserPurchaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserPurchaseType: %v", v)
	}
}

// AuthUserBuildMachine - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type AuthUserBuildMachine struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	PurchaseType *AuthUserPurchaseType `json:"purchaseType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	IsDefaultBuildMachine *bool `json:"isDefaultBuildMachine,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	Cores *float64 `json:"cores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	Memory *float64 `json:"memory,omitempty"`
}

func (o *AuthUserBuildMachine) GetPurchaseType() *AuthUserPurchaseType {
	if o == nil {
		return nil
	}
	return o.PurchaseType
}

func (o *AuthUserBuildMachine) GetIsDefaultBuildMachine() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultBuildMachine
}

func (o *AuthUserBuildMachine) GetCores() *float64 {
	if o == nil {
		return nil
	}
	return o.Cores
}

func (o *AuthUserBuildMachine) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

// AuthUserResourceConfig - An object containing infomation related to the amount of platform resources may be allocated to the User account.
type AuthUserResourceConfig struct {
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	NodeType *string `json:"nodeType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ConcurrentBuilds *float64 `json:"concurrentBuilds,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BuildEntitlements *AuthUserBuildEntitlements `json:"buildEntitlements,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	AwsAccountType *string `json:"awsAccountType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	AwsAccountIds []string `json:"awsAccountIds,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CfZoneName *string `json:"cfZoneName,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ImageOptimizationType *string `json:"imageOptimizationType,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeConfigs *float64 `json:"edgeConfigs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeConfigSize *float64 `json:"edgeConfigSize,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeFunctionMaxSizeBytes *float64 `json:"edgeFunctionMaxSizeBytes,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	EdgeFunctionExecutionTimeoutMs *float64 `json:"edgeFunctionExecutionTimeoutMs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ServerlessFunctionMaxMemorySize *float64 `json:"serverlessFunctionMaxMemorySize,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	KvDatabases *float64 `json:"kvDatabases,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	PostgresDatabases *float64 `json:"postgresDatabases,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BlobStores *float64 `json:"blobStores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	IntegrationStores *float64 `json:"integrationStores,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CronJobs *float64 `json:"cronJobs,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CronJobsPerProject *float64 `json:"cronJobsPerProject,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	MicrofrontendGroupsPerTeam *float64 `json:"microfrontendGroupsPerTeam,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	MicrofrontendProjectsPerGroup *float64 `json:"microfrontendProjectsPerGroup,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	FlagsExplorerOverridesThreshold *float64 `json:"flagsExplorerOverridesThreshold,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	FlagsExplorerUnlimitedOverrides *bool `json:"flagsExplorerUnlimitedOverrides,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	CustomEnvironmentsPerProject *float64 `json:"customEnvironmentsPerProject,omitempty"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	BuildMachine *AuthUserBuildMachine `json:"buildMachine,omitempty"`
}

func (o *AuthUserResourceConfig) GetNodeType() *string {
	if o == nil {
		return nil
	}
	return o.NodeType
}

func (o *AuthUserResourceConfig) GetConcurrentBuilds() *float64 {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *AuthUserResourceConfig) GetBuildEntitlements() *AuthUserBuildEntitlements {
	if o == nil {
		return nil
	}
	return o.BuildEntitlements
}

func (o *AuthUserResourceConfig) GetAwsAccountType() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountType
}

func (o *AuthUserResourceConfig) GetAwsAccountIds() []string {
	if o == nil {
		return nil
	}
	return o.AwsAccountIds
}

func (o *AuthUserResourceConfig) GetCfZoneName() *string {
	if o == nil {
		return nil
	}
	return o.CfZoneName
}

func (o *AuthUserResourceConfig) GetImageOptimizationType() *string {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationType
}

func (o *AuthUserResourceConfig) GetEdgeConfigs() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeConfigs
}

func (o *AuthUserResourceConfig) GetEdgeConfigSize() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSize
}

func (o *AuthUserResourceConfig) GetEdgeFunctionMaxSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionMaxSizeBytes
}

func (o *AuthUserResourceConfig) GetEdgeFunctionExecutionTimeoutMs() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionExecutionTimeoutMs
}

func (o *AuthUserResourceConfig) GetServerlessFunctionMaxMemorySize() *float64 {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionMaxMemorySize
}

func (o *AuthUserResourceConfig) GetKvDatabases() *float64 {
	if o == nil {
		return nil
	}
	return o.KvDatabases
}

func (o *AuthUserResourceConfig) GetPostgresDatabases() *float64 {
	if o == nil {
		return nil
	}
	return o.PostgresDatabases
}

func (o *AuthUserResourceConfig) GetBlobStores() *float64 {
	if o == nil {
		return nil
	}
	return o.BlobStores
}

func (o *AuthUserResourceConfig) GetIntegrationStores() *float64 {
	if o == nil {
		return nil
	}
	return o.IntegrationStores
}

func (o *AuthUserResourceConfig) GetCronJobs() *float64 {
	if o == nil {
		return nil
	}
	return o.CronJobs
}

func (o *AuthUserResourceConfig) GetCronJobsPerProject() *float64 {
	if o == nil {
		return nil
	}
	return o.CronJobsPerProject
}

func (o *AuthUserResourceConfig) GetMicrofrontendGroupsPerTeam() *float64 {
	if o == nil {
		return nil
	}
	return o.MicrofrontendGroupsPerTeam
}

func (o *AuthUserResourceConfig) GetMicrofrontendProjectsPerGroup() *float64 {
	if o == nil {
		return nil
	}
	return o.MicrofrontendProjectsPerGroup
}

func (o *AuthUserResourceConfig) GetFlagsExplorerOverridesThreshold() *float64 {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerOverridesThreshold
}

func (o *AuthUserResourceConfig) GetFlagsExplorerUnlimitedOverrides() *bool {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerUnlimitedOverrides
}

func (o *AuthUserResourceConfig) GetCustomEnvironmentsPerProject() *float64 {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentsPerProject
}

func (o *AuthUserResourceConfig) GetBuildMachine() *AuthUserBuildMachine {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

type AuthUserViewPreference string

const (
	AuthUserViewPreferenceList  AuthUserViewPreference = "list"
	AuthUserViewPreferenceCards AuthUserViewPreference = "cards"
)

func (e AuthUserViewPreference) ToPointer() *AuthUserViewPreference {
	return &e
}
func (e *AuthUserViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "list":
		fallthrough
	case "cards":
		*e = AuthUserViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserViewPreference: %v", v)
	}
}

type AuthUserFavoritesViewPreference string

const (
	AuthUserFavoritesViewPreferenceOpen   AuthUserFavoritesViewPreference = "open"
	AuthUserFavoritesViewPreferenceClosed AuthUserFavoritesViewPreference = "closed"
)

func (e AuthUserFavoritesViewPreference) ToPointer() *AuthUserFavoritesViewPreference {
	return &e
}
func (e *AuthUserFavoritesViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = AuthUserFavoritesViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserFavoritesViewPreference: %v", v)
	}
}

type AuthUserRecentsViewPreference string

const (
	AuthUserRecentsViewPreferenceOpen   AuthUserRecentsViewPreference = "open"
	AuthUserRecentsViewPreferenceClosed AuthUserRecentsViewPreference = "closed"
)

func (e AuthUserRecentsViewPreference) ToPointer() *AuthUserRecentsViewPreference {
	return &e
}
func (e *AuthUserRecentsViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = AuthUserRecentsViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserRecentsViewPreference: %v", v)
	}
}

// AuthUserActiveDashboardView - set of dashboard view preferences (cards or list) per scopeId
type AuthUserActiveDashboardView struct {
	ScopeID                 string                           `json:"scopeId"`
	ViewPreference          *AuthUserViewPreference          `json:"viewPreference,omitempty"`
	FavoritesViewPreference *AuthUserFavoritesViewPreference `json:"favoritesViewPreference,omitempty"`
	RecentsViewPreference   *AuthUserRecentsViewPreference   `json:"recentsViewPreference,omitempty"`
}

func (o *AuthUserActiveDashboardView) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *AuthUserActiveDashboardView) GetViewPreference() *AuthUserViewPreference {
	if o == nil {
		return nil
	}
	return o.ViewPreference
}

func (o *AuthUserActiveDashboardView) GetFavoritesViewPreference() *AuthUserFavoritesViewPreference {
	if o == nil {
		return nil
	}
	return o.FavoritesViewPreference
}

func (o *AuthUserActiveDashboardView) GetRecentsViewPreference() *AuthUserRecentsViewPreference {
	if o == nil {
		return nil
	}
	return o.RecentsViewPreference
}

type AuthUserImportFlowGitNamespaceType string

const (
	AuthUserImportFlowGitNamespaceTypeStr    AuthUserImportFlowGitNamespaceType = "str"
	AuthUserImportFlowGitNamespaceTypeNumber AuthUserImportFlowGitNamespaceType = "number"
)

type AuthUserImportFlowGitNamespace struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type AuthUserImportFlowGitNamespaceType
}

func CreateAuthUserImportFlowGitNamespaceStr(str string) AuthUserImportFlowGitNamespace {
	typ := AuthUserImportFlowGitNamespaceTypeStr

	return AuthUserImportFlowGitNamespace{
		Str:  &str,
		Type: typ,
	}
}

func CreateAuthUserImportFlowGitNamespaceNumber(number float64) AuthUserImportFlowGitNamespace {
	typ := AuthUserImportFlowGitNamespaceTypeNumber

	return AuthUserImportFlowGitNamespace{
		Number: &number,
		Type:   typ,
	}
}

func (u *AuthUserImportFlowGitNamespace) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AuthUserImportFlowGitNamespaceTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = AuthUserImportFlowGitNamespaceTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AuthUserImportFlowGitNamespace", string(data))
}

func (u AuthUserImportFlowGitNamespace) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type AuthUserImportFlowGitNamespace: all fields are null")
}

type AuthUserImportFlowGitNamespaceIDType string

const (
	AuthUserImportFlowGitNamespaceIDTypeStr    AuthUserImportFlowGitNamespaceIDType = "str"
	AuthUserImportFlowGitNamespaceIDTypeNumber AuthUserImportFlowGitNamespaceIDType = "number"
)

type AuthUserImportFlowGitNamespaceID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type AuthUserImportFlowGitNamespaceIDType
}

func CreateAuthUserImportFlowGitNamespaceIDStr(str string) AuthUserImportFlowGitNamespaceID {
	typ := AuthUserImportFlowGitNamespaceIDTypeStr

	return AuthUserImportFlowGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateAuthUserImportFlowGitNamespaceIDNumber(number float64) AuthUserImportFlowGitNamespaceID {
	typ := AuthUserImportFlowGitNamespaceIDTypeNumber

	return AuthUserImportFlowGitNamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *AuthUserImportFlowGitNamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AuthUserImportFlowGitNamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = AuthUserImportFlowGitNamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AuthUserImportFlowGitNamespaceID", string(data))
}

func (u AuthUserImportFlowGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type AuthUserImportFlowGitNamespaceID: all fields are null")
}

type AuthUserImportFlowGitProvider string

const (
	AuthUserImportFlowGitProviderGithub           AuthUserImportFlowGitProvider = "github"
	AuthUserImportFlowGitProviderGitlab           AuthUserImportFlowGitProvider = "gitlab"
	AuthUserImportFlowGitProviderBitbucket        AuthUserImportFlowGitProvider = "bitbucket"
	AuthUserImportFlowGitProviderGithubCustomHost AuthUserImportFlowGitProvider = "github-custom-host"
)

func (e AuthUserImportFlowGitProvider) ToPointer() *AuthUserImportFlowGitProvider {
	return &e
}
func (e *AuthUserImportFlowGitProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "github-custom-host":
		*e = AuthUserImportFlowGitProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthUserImportFlowGitProvider: %v", v)
	}
}

type AuthUserGitNamespaceIDType string

const (
	AuthUserGitNamespaceIDTypeStr    AuthUserGitNamespaceIDType = "str"
	AuthUserGitNamespaceIDTypeNumber AuthUserGitNamespaceIDType = "number"
)

type AuthUserGitNamespaceID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type AuthUserGitNamespaceIDType
}

func CreateAuthUserGitNamespaceIDStr(str string) AuthUserGitNamespaceID {
	typ := AuthUserGitNamespaceIDTypeStr

	return AuthUserGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateAuthUserGitNamespaceIDNumber(number float64) AuthUserGitNamespaceID {
	typ := AuthUserGitNamespaceIDTypeNumber

	return AuthUserGitNamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *AuthUserGitNamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = AuthUserGitNamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = AuthUserGitNamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AuthUserGitNamespaceID", string(data))
}

func (u AuthUserGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type AuthUserGitNamespaceID: all fields are null")
}

type AuthUserPreferredScopesAndGitNamespace struct {
	ScopeID        string                  `json:"scopeId"`
	GitNamespaceID *AuthUserGitNamespaceID `json:"gitNamespaceId"`
}

func (o *AuthUserPreferredScopesAndGitNamespace) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *AuthUserPreferredScopesAndGitNamespace) GetGitNamespaceID() *AuthUserGitNamespaceID {
	if o == nil {
		return nil
	}
	return o.GitNamespaceID
}

type AuthUserDismissal struct {
	ScopeID   string  `json:"scopeId"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *AuthUserDismissal) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *AuthUserDismissal) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// AuthUserDismissedToast - A record of when, under a certain scopeId, a toast was dismissed
type AuthUserDismissedToast struct {
	Name       string              `json:"name"`
	Dismissals []AuthUserDismissal `json:"dismissals"`
}

func (o *AuthUserDismissedToast) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *AuthUserDismissedToast) GetDismissals() []AuthUserDismissal {
	if o == nil {
		return []AuthUserDismissal{}
	}
	return o.Dismissals
}

// AuthUserFavoriteProjectsAndSpace - A list of projects and spaces across teams that a user has marked as a favorite.
type AuthUserFavoriteProjectsAndSpace struct {
	TeamID    string `json:"teamId"`
	ProjectID string `json:"projectId"`
}

func (o *AuthUserFavoriteProjectsAndSpace) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *AuthUserFavoriteProjectsAndSpace) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// AuthUserRemoteCaching - remote caching settings
type AuthUserRemoteCaching struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *AuthUserRemoteCaching) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// AuthUserDataCache - data cache settings
type AuthUserDataCache struct {
	ExcessBillingEnabled *bool `json:"excessBillingEnabled,omitempty"`
}

func (o *AuthUserDataCache) GetExcessBillingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ExcessBillingEnabled
}

type AuthUserWebAnalytics struct {
	BlockedFrom        *float64 `json:"blockedFrom,omitempty"`
	BlockedUntil       *float64 `json:"blockedUntil,omitempty"`
	IsCurrentlyBlocked bool     `json:"isCurrentlyBlocked"`
}

func (o *AuthUserWebAnalytics) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *AuthUserWebAnalytics) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *AuthUserWebAnalytics) GetIsCurrentlyBlocked() bool {
	if o == nil {
		return false
	}
	return o.IsCurrentlyBlocked
}

// AuthUserFeatureBlocks - Feature blocks for the user
type AuthUserFeatureBlocks struct {
	WebAnalytics *AuthUserWebAnalytics `json:"webAnalytics,omitempty"`
}

func (o *AuthUserFeatureBlocks) GetWebAnalytics() *AuthUserWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

// AuthUser - Data for the currently authenticated User.
type AuthUser struct {
	// UNIX timestamp (in milliseconds) when the User account was created.
	CreatedAt float64 `json:"createdAt"`
	// When the User account has been "soft blocked", this property will contain the date when the restriction was enacted, and the identifier for why.
	SoftBlock *AuthUserSoftBlock `json:"softBlock"`
	// An object containing billing infomation associated with the User account.
	Billing *AuthUserBilling `json:"billing"`
	// An object containing infomation related to the amount of platform resources may be allocated to the User account.
	ResourceConfig AuthUserResourceConfig `json:"resourceConfig"`
	// Prefix that will be used in the URL of "Preview" deployments created by the User account.
	StagingPrefix string `json:"stagingPrefix"`
	// set of dashboard view preferences (cards or list) per scopeId
	ActiveDashboardViews            []AuthUserActiveDashboardView            `json:"activeDashboardViews,omitempty"`
	ImportFlowGitNamespace          *AuthUserImportFlowGitNamespace          `json:"importFlowGitNamespace,omitempty"`
	ImportFlowGitNamespaceID        *AuthUserImportFlowGitNamespaceID        `json:"importFlowGitNamespaceId,omitempty"`
	ImportFlowGitProvider           *AuthUserImportFlowGitProvider           `json:"importFlowGitProvider,omitempty"`
	PreferredScopesAndGitNamespaces []AuthUserPreferredScopesAndGitNamespace `json:"preferredScopesAndGitNamespaces,omitempty"`
	// A record of when, under a certain scopeId, a toast was dismissed
	DismissedToasts []AuthUserDismissedToast `json:"dismissedToasts,omitempty"`
	// A list of projects and spaces across teams that a user has marked as a favorite.
	FavoriteProjectsAndSpaces []AuthUserFavoriteProjectsAndSpace `json:"favoriteProjectsAndSpaces,omitempty"`
	// Whether the user has a trial available for a paid plan subscription.
	HasTrialAvailable bool `json:"hasTrialAvailable"`
	// remote caching settings
	RemoteCaching *AuthUserRemoteCaching `json:"remoteCaching,omitempty"`
	// data cache settings
	DataCache *AuthUserDataCache `json:"dataCache,omitempty"`
	// Feature blocks for the user
	FeatureBlocks *AuthUserFeatureBlocks `json:"featureBlocks,omitempty"`
	// The User's unique identifier.
	ID string `json:"id"`
	// Email address associated with the User account.
	Email string `json:"email"`
	// Name associated with the User account, or `null` if none has been provided.
	Name *string `json:"name"`
	// Unique username associated with the User account.
	Username string `json:"username"`
	// SHA1 hash of the avatar for the User account. Can be used in conjuction with the ... endpoint to retrieve the avatar image.
	Avatar *string `json:"avatar"`
	// The user's default team.
	DefaultTeamID *string `json:"defaultTeamId"`
}

func (o *AuthUser) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *AuthUser) GetSoftBlock() *AuthUserSoftBlock {
	if o == nil {
		return nil
	}
	return o.SoftBlock
}

func (o *AuthUser) GetBilling() *AuthUserBilling {
	if o == nil {
		return nil
	}
	return o.Billing
}

func (o *AuthUser) GetResourceConfig() AuthUserResourceConfig {
	if o == nil {
		return AuthUserResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *AuthUser) GetStagingPrefix() string {
	if o == nil {
		return ""
	}
	return o.StagingPrefix
}

func (o *AuthUser) GetActiveDashboardViews() []AuthUserActiveDashboardView {
	if o == nil {
		return nil
	}
	return o.ActiveDashboardViews
}

func (o *AuthUser) GetImportFlowGitNamespace() *AuthUserImportFlowGitNamespace {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitNamespace
}

func (o *AuthUser) GetImportFlowGitNamespaceID() *AuthUserImportFlowGitNamespaceID {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitNamespaceID
}

func (o *AuthUser) GetImportFlowGitProvider() *AuthUserImportFlowGitProvider {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitProvider
}

func (o *AuthUser) GetPreferredScopesAndGitNamespaces() []AuthUserPreferredScopesAndGitNamespace {
	if o == nil {
		return nil
	}
	return o.PreferredScopesAndGitNamespaces
}

func (o *AuthUser) GetDismissedToasts() []AuthUserDismissedToast {
	if o == nil {
		return nil
	}
	return o.DismissedToasts
}

func (o *AuthUser) GetFavoriteProjectsAndSpaces() []AuthUserFavoriteProjectsAndSpace {
	if o == nil {
		return nil
	}
	return o.FavoriteProjectsAndSpaces
}

func (o *AuthUser) GetHasTrialAvailable() bool {
	if o == nil {
		return false
	}
	return o.HasTrialAvailable
}

func (o *AuthUser) GetRemoteCaching() *AuthUserRemoteCaching {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *AuthUser) GetDataCache() *AuthUserDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *AuthUser) GetFeatureBlocks() *AuthUserFeatureBlocks {
	if o == nil {
		return nil
	}
	return o.FeatureBlocks
}

func (o *AuthUser) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AuthUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *AuthUser) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *AuthUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *AuthUser) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *AuthUser) GetDefaultTeamID() *string {
	if o == nil {
		return nil
	}
	return o.DefaultTeamID
}
