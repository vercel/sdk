// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type PropertyKeyTag string

const (
	PropertyKeyTagSymbol PropertyKeyTag = "symbol"
)

func (e PropertyKeyTag) ToPointer() *PropertyKeyTag {
	return &e
}
func (e *PropertyKeyTag) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "symbol":
		*e = PropertyKeyTag(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PropertyKeyTag: %v", v)
	}
}

// PropertyKeySymbol - an object to be decoded into a globally shared symbol
type PropertyKeySymbol struct {
	Tag PropertyKeyTag `json:"_tag"`
	Key string         `json:"key"`
}

func (p PropertyKeySymbol) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PropertyKeySymbol) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"_tag", "key"}); err != nil {
		return err
	}
	return nil
}

func (o *PropertyKeySymbol) GetTag() PropertyKeyTag {
	if o == nil {
		return PropertyKeyTag("")
	}
	return o.Tag
}

func (o *PropertyKeySymbol) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

type PropertyKeyType string

const (
	PropertyKeyTypeStr               PropertyKeyType = "str"
	PropertyKeyTypeNumber            PropertyKeyType = "number"
	PropertyKeyTypePropertyKeySymbol PropertyKeyType = "PropertyKey_Symbol"
)

type PropertyKey struct {
	Str               *string            `queryParam:"inline"`
	Number            *float64           `queryParam:"inline"`
	PropertyKeySymbol *PropertyKeySymbol `queryParam:"inline"`

	Type PropertyKeyType
}

func CreatePropertyKeyStr(str string) PropertyKey {
	typ := PropertyKeyTypeStr

	return PropertyKey{
		Str:  &str,
		Type: typ,
	}
}

func CreatePropertyKeyNumber(number float64) PropertyKey {
	typ := PropertyKeyTypeNumber

	return PropertyKey{
		Number: &number,
		Type:   typ,
	}
}

func CreatePropertyKeyPropertyKeySymbol(propertyKeySymbol PropertyKeySymbol) PropertyKey {
	typ := PropertyKeyTypePropertyKeySymbol

	return PropertyKey{
		PropertyKeySymbol: &propertyKeySymbol,
		Type:              typ,
	}
}

func (u *PropertyKey) UnmarshalJSON(data []byte) error {

	var propertyKeySymbol PropertyKeySymbol = PropertyKeySymbol{}
	if err := utils.UnmarshalJSON(data, &propertyKeySymbol, "", true, nil); err == nil {
		u.PropertyKeySymbol = &propertyKeySymbol
		u.Type = PropertyKeyTypePropertyKeySymbol
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = PropertyKeyTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = PropertyKeyTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PropertyKey", string(data))
}

func (u PropertyKey) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.PropertyKeySymbol != nil {
		return utils.MarshalJSON(u.PropertyKeySymbol, "", true)
	}

	return nil, errors.New("could not marshal union type PropertyKey: all fields are null")
}
