// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type TooManyRequestsCode string

const (
	TooManyRequestsCodeTooManyRequests TooManyRequestsCode = "too_many_requests"
)

func (e TooManyRequestsCode) ToPointer() *TooManyRequestsCode {
	return &e
}
func (e *TooManyRequestsCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "too_many_requests":
		*e = TooManyRequestsCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TooManyRequestsCode: %v", v)
	}
}

type RetryAfter struct {
	Value float64 `json:"value"`
	Str   string  `json:"str"`
}

func (o *RetryAfter) GetValue() float64 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

func (o *RetryAfter) GetStr() string {
	if o == nil {
		return ""
	}
	return o.Str
}

type Limit struct {
	Total     float64 `json:"total"`
	Remaining float64 `json:"remaining"`
	Reset     float64 `json:"reset"`
}

func (o *Limit) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

func (o *Limit) GetRemaining() float64 {
	if o == nil {
		return 0.0
	}
	return o.Remaining
}

func (o *Limit) GetReset() float64 {
	if o == nil {
		return 0.0
	}
	return o.Reset
}
