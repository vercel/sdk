// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// EntityType - The type of entity.
type EntityType string

const (
	EntityTypeAuthor         EntityType = "author"
	EntityTypeBitbucketLogin EntityType = "bitbucket_login"
	EntityTypeBold           EntityType = "bold"
	EntityTypeDeploymentHost EntityType = "deployment_host"
	EntityTypeDNSRecord      EntityType = "dns_record"
	EntityTypeGitLink        EntityType = "git_link"
	EntityTypeGithubLogin    EntityType = "github_login"
	EntityTypeGitlabLogin    EntityType = "gitlab_login"
	EntityTypeHookName       EntityType = "hook_name"
	EntityTypeIntegration    EntityType = "integration"
	EntityTypeEdgeConfig     EntityType = "edge-config"
	EntityTypeFlag           EntityType = "flag"
	EntityTypeFlagsSegment   EntityType = "flags-segment"
	EntityTypeFlagsSettings  EntityType = "flags-settings"
	EntityTypeLink           EntityType = "link"
	EntityTypeProjectName    EntityType = "project_name"
	EntityTypeScalingRules   EntityType = "scaling_rules"
	EntityTypeEnvVarName     EntityType = "env_var_name"
	EntityTypeTarget         EntityType = "target"
	EntityTypeStore          EntityType = "store"
	EntityTypeSystem         EntityType = "system"
)

func (e EntityType) ToPointer() *EntityType {
	return &e
}
func (e *EntityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "author":
		fallthrough
	case "bitbucket_login":
		fallthrough
	case "bold":
		fallthrough
	case "deployment_host":
		fallthrough
	case "dns_record":
		fallthrough
	case "git_link":
		fallthrough
	case "github_login":
		fallthrough
	case "gitlab_login":
		fallthrough
	case "hook_name":
		fallthrough
	case "integration":
		fallthrough
	case "edge-config":
		fallthrough
	case "flag":
		fallthrough
	case "flags-segment":
		fallthrough
	case "flags-settings":
		fallthrough
	case "link":
		fallthrough
	case "project_name":
		fallthrough
	case "scaling_rules":
		fallthrough
	case "env_var_name":
		fallthrough
	case "target":
		fallthrough
	case "store":
		fallthrough
	case "system":
		*e = EntityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EntityType: %v", v)
	}
}

// Entity - A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
type Entity struct {
	// The type of entity.
	Type EntityType `json:"type"`
	// The index of where the entity begins within the `text` (inclusive).
	Start float64 `json:"start"`
	// The index of where the entity ends within the `text` (non-inclusive).
	End float64 `json:"end"`
}

func (o *Entity) GetType() EntityType {
	if o == nil {
		return EntityType("")
	}
	return o.Type
}

func (o *Entity) GetStart() float64 {
	if o == nil {
		return 0.0
	}
	return o.Start
}

func (o *Entity) GetEnd() float64 {
	if o == nil {
		return 0.0
	}
	return o.End
}

// User - Metadata for {@link userId}.
type User struct {
	Username string  `json:"username"`
	Avatar   string  `json:"avatar"`
	Email    string  `json:"email"`
	Slug     *string `json:"slug,omitempty"`
	UID      string  `json:"uid"`
}

func (o *User) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *User) GetAvatar() string {
	if o == nil {
		return ""
	}
	return o.Avatar
}

func (o *User) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *User) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *User) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

type PrincipalTypeApp string

const (
	PrincipalTypeAppApp PrincipalTypeApp = "app"
)

func (e PrincipalTypeApp) ToPointer() *PrincipalTypeApp {
	return &e
}
func (e *PrincipalTypeApp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "app":
		*e = PrincipalTypeApp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrincipalTypeApp: %v", v)
	}
}

// PrincipalApp - Metadata for {@link principalId}.
type PrincipalApp struct {
	Type     PrincipalTypeApp `json:"type"`
	ClientID string           `json:"clientId"`
	Name     string           `json:"name"`
}

func (o *PrincipalApp) GetType() PrincipalTypeApp {
	if o == nil {
		return PrincipalTypeApp("")
	}
	return o.Type
}

func (o *PrincipalApp) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *PrincipalApp) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type PrincipalTypeUser string

const (
	PrincipalTypeUserUser PrincipalTypeUser = "user"
)

func (e PrincipalTypeUser) ToPointer() *PrincipalTypeUser {
	return &e
}
func (e *PrincipalTypeUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PrincipalTypeUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrincipalTypeUser: %v", v)
	}
}

// PrincipalUser - Metadata for {@link principalId}.
type PrincipalUser struct {
	Type     *PrincipalTypeUser `json:"type,omitempty"`
	Avatar   string             `json:"avatar"`
	Email    string             `json:"email"`
	Slug     *string            `json:"slug,omitempty"`
	UID      string             `json:"uid"`
	Username string             `json:"username"`
}

func (o *PrincipalUser) GetType() *PrincipalTypeUser {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *PrincipalUser) GetAvatar() string {
	if o == nil {
		return ""
	}
	return o.Avatar
}

func (o *PrincipalUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *PrincipalUser) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PrincipalUser) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *PrincipalUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type PrincipalType string

const (
	PrincipalTypePrincipalUser PrincipalType = "principal_User"
	PrincipalTypePrincipalApp  PrincipalType = "principal_App"
)

type Principal struct {
	PrincipalUser *PrincipalUser `queryParam:"inline"`
	PrincipalApp  *PrincipalApp  `queryParam:"inline"`

	Type PrincipalType
}

func CreatePrincipalPrincipalUser(principalUser PrincipalUser) Principal {
	typ := PrincipalTypePrincipalUser

	return Principal{
		PrincipalUser: &principalUser,
		Type:          typ,
	}
}

func CreatePrincipalPrincipalApp(principalApp PrincipalApp) Principal {
	typ := PrincipalTypePrincipalApp

	return Principal{
		PrincipalApp: &principalApp,
		Type:         typ,
	}
}

func (u *Principal) UnmarshalJSON(data []byte) error {

	var principalApp PrincipalApp = PrincipalApp{}
	if err := utils.UnmarshalJSON(data, &principalApp, "", true, true); err == nil {
		u.PrincipalApp = &principalApp
		u.Type = PrincipalTypePrincipalApp
		return nil
	}

	var principalUser PrincipalUser = PrincipalUser{}
	if err := utils.UnmarshalJSON(data, &principalUser, "", true, true); err == nil {
		u.PrincipalUser = &principalUser
		u.Type = PrincipalTypePrincipalUser
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Principal", string(data))
}

func (u Principal) MarshalJSON() ([]byte, error) {
	if u.PrincipalUser != nil {
		return utils.MarshalJSON(u.PrincipalUser, "", true)
	}

	if u.PrincipalApp != nil {
		return utils.MarshalJSON(u.PrincipalApp, "", true)
	}

	return nil, errors.New("could not marshal union type Principal: all fields are null")
}

type ViaTypeApp string

const (
	ViaTypeAppApp ViaTypeApp = "app"
)

func (e ViaTypeApp) ToPointer() *ViaTypeApp {
	return &e
}
func (e *ViaTypeApp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "app":
		*e = ViaTypeApp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ViaTypeApp: %v", v)
	}
}

// ViaApp - Metadata for {@link viaIds}.
type ViaApp struct {
	Type     ViaTypeApp `json:"type"`
	ClientID string     `json:"clientId"`
	Name     string     `json:"name"`
}

func (o *ViaApp) GetType() ViaTypeApp {
	if o == nil {
		return ViaTypeApp("")
	}
	return o.Type
}

func (o *ViaApp) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ViaApp) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ViaTypeUser string

const (
	ViaTypeUserUser ViaTypeUser = "user"
)

func (e ViaTypeUser) ToPointer() *ViaTypeUser {
	return &e
}
func (e *ViaTypeUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = ViaTypeUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ViaTypeUser: %v", v)
	}
}

// ViaUser - Metadata for {@link viaIds}.
type ViaUser struct {
	Type     *ViaTypeUser `json:"type,omitempty"`
	Avatar   string       `json:"avatar"`
	Email    string       `json:"email"`
	Slug     *string      `json:"slug,omitempty"`
	UID      string       `json:"uid"`
	Username string       `json:"username"`
}

func (o *ViaUser) GetType() *ViaTypeUser {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *ViaUser) GetAvatar() string {
	if o == nil {
		return ""
	}
	return o.Avatar
}

func (o *ViaUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *ViaUser) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ViaUser) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *ViaUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type ViaType string

const (
	ViaTypeViaUser ViaType = "via_User"
	ViaTypeViaApp  ViaType = "via_App"
)

type Via struct {
	ViaUser *ViaUser `queryParam:"inline"`
	ViaApp  *ViaApp  `queryParam:"inline"`

	Type ViaType
}

func CreateViaViaUser(viaUser ViaUser) Via {
	typ := ViaTypeViaUser

	return Via{
		ViaUser: &viaUser,
		Type:    typ,
	}
}

func CreateViaViaApp(viaApp ViaApp) Via {
	typ := ViaTypeViaApp

	return Via{
		ViaApp: &viaApp,
		Type:   typ,
	}
}

func (u *Via) UnmarshalJSON(data []byte) error {

	var viaApp ViaApp = ViaApp{}
	if err := utils.UnmarshalJSON(data, &viaApp, "", true, true); err == nil {
		u.ViaApp = &viaApp
		u.Type = ViaTypeViaApp
		return nil
	}

	var viaUser ViaUser = ViaUser{}
	if err := utils.UnmarshalJSON(data, &viaUser, "", true, true); err == nil {
		u.ViaUser = &viaUser
		u.Type = ViaTypeViaUser
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Via", string(data))
}

func (u Via) MarshalJSON() ([]byte, error) {
	if u.ViaUser != nil {
		return utils.MarshalJSON(u.ViaUser, "", true)
	}

	if u.ViaApp != nil {
		return utils.MarshalJSON(u.ViaApp, "", true)
	}

	return nil, errors.New("could not marshal union type Via: all fields are null")
}

type GrantType string

const (
	GrantTypeAuthorizationCode                     GrantType = "authorization_code"
	GrantTypeRefreshToken                          GrantType = "refresh_token"
	GrantTypeUrnIetfParamsOauthGrantTypeDeviceCode GrantType = "urn:ietf:params:oauth:grant-type:device_code"
	GrantTypeClientCredentials                     GrantType = "client_credentials"
)

func (e GrantType) ToPointer() *GrantType {
	return &e
}
func (e *GrantType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "authorization_code":
		fallthrough
	case "refresh_token":
		fallthrough
	case "urn:ietf:params:oauth:grant-type:device_code":
		fallthrough
	case "client_credentials":
		*e = GrantType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GrantType: %v", v)
	}
}

type AuthMethod string

const (
	AuthMethodEmail     AuthMethod = "email"
	AuthMethodSaml      AuthMethod = "saml"
	AuthMethodGithub    AuthMethod = "github"
	AuthMethodGitlab    AuthMethod = "gitlab"
	AuthMethodBitbucket AuthMethod = "bitbucket"
	AuthMethodManual    AuthMethod = "manual"
	AuthMethodPasskey   AuthMethod = "passkey"
	AuthMethodOtp       AuthMethod = "otp"
	AuthMethodSms       AuthMethod = "sms"
	AuthMethodInvite    AuthMethod = "invite"
	AuthMethodGoogle    AuthMethod = "google"
)

func (e AuthMethod) ToPointer() *AuthMethod {
	return &e
}
func (e *AuthMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email":
		fallthrough
	case "saml":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "manual":
		fallthrough
	case "passkey":
		fallthrough
	case "otp":
		fallthrough
	case "sms":
		fallthrough
	case "invite":
		fallthrough
	case "google":
		*e = AuthMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthMethod: %v", v)
	}
}

// Payload152 - The payload of the event, if requested.
type Payload152 struct {
	GrantType GrantType `json:"grantType"`
	AppName   string    `json:"appName"`
	// access_token TTL
	AtTTL float64 `json:"atTTL"`
	// refresh_token TTL
	RtTTL      *float64   `json:"rtTTL,omitempty"`
	Scope      string     `json:"scope"`
	AuthMethod AuthMethod `json:"authMethod"`
}

func (o *Payload152) GetGrantType() GrantType {
	if o == nil {
		return GrantType("")
	}
	return o.GrantType
}

func (o *Payload152) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

func (o *Payload152) GetAtTTL() float64 {
	if o == nil {
		return 0.0
	}
	return o.AtTTL
}

func (o *Payload152) GetRtTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.RtTTL
}

func (o *Payload152) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *Payload152) GetAuthMethod() AuthMethod {
	if o == nil {
		return AuthMethod("")
	}
	return o.AuthMethod
}

type UserEventTeam10 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam10) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam10) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration8 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration8) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration8) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Peering3 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Peering3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Peering3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload151 - The payload of the event, if requested.
type Payload151 struct {
	Team          UserEventTeam10 `json:"team"`
	Configuration Configuration8  `json:"configuration"`
	Peering       Peering3        `json:"peering"`
	NewName       *string         `json:"newName,omitempty"`
}

func (o *Payload151) GetTeam() UserEventTeam10 {
	if o == nil {
		return UserEventTeam10{}
	}
	return o.Team
}

func (o *Payload151) GetConfiguration() Configuration8 {
	if o == nil {
		return Configuration8{}
	}
	return o.Configuration
}

func (o *Payload151) GetPeering() Peering3 {
	if o == nil {
		return Peering3{}
	}
	return o.Peering
}

func (o *Payload151) GetNewName() *string {
	if o == nil {
		return nil
	}
	return o.NewName
}

type UserEventTeam9 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam9) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam9) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration7 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration7) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration7) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Peering2 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Peering2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Peering2) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload150 - The payload of the event, if requested.
type Payload150 struct {
	Team          UserEventTeam9 `json:"team"`
	Configuration Configuration7 `json:"configuration"`
	Peering       Peering2       `json:"peering"`
}

func (o *Payload150) GetTeam() UserEventTeam9 {
	if o == nil {
		return UserEventTeam9{}
	}
	return o.Team
}

func (o *Payload150) GetConfiguration() Configuration7 {
	if o == nil {
		return Configuration7{}
	}
	return o.Configuration
}

func (o *Payload150) GetPeering() Peering2 {
	if o == nil {
		return Peering2{}
	}
	return o.Peering
}

type UserEventTeam8 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam8) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam8) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration6 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration6) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration6) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Peering1 struct {
	ID        string `json:"id"`
	AccountID string `json:"accountId"`
	Region    string `json:"region"`
	VpcID     string `json:"vpcId"`
}

func (o *Peering1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Peering1) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *Peering1) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *Peering1) GetVpcID() string {
	if o == nil {
		return ""
	}
	return o.VpcID
}

// Payload149 - The payload of the event, if requested.
type Payload149 struct {
	Team          UserEventTeam8 `json:"team"`
	Configuration Configuration6 `json:"configuration"`
	Peering       Peering1       `json:"peering"`
}

func (o *Payload149) GetTeam() UserEventTeam8 {
	if o == nil {
		return UserEventTeam8{}
	}
	return o.Team
}

func (o *Payload149) GetConfiguration() Configuration6 {
	if o == nil {
		return Configuration6{}
	}
	return o.Configuration
}

func (o *Payload149) GetPeering() Peering1 {
	if o == nil {
		return Peering1{}
	}
	return o.Peering
}

// Payload148 - The payload of the event, if requested.
type Payload148 struct {
	AppName string `json:"appName"`
}

func (o *Payload148) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

// Payload147 - The payload of the event, if requested.
type Payload147 struct {
	AppName    string   `json:"appName"`
	NextScopes []string `json:"nextScopes"`
}

func (o *Payload147) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

func (o *Payload147) GetNextScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.NextScopes
}

// Payload146 - The payload of the event, if requested.
type Payload146 struct {
	AppName string   `json:"appName"`
	Scopes  []string `json:"scopes"`
}

func (o *Payload146) GetAppName() string {
	if o == nil {
		return ""
	}
	return o.AppName
}

func (o *Payload146) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

// Payload145 - The payload of the event, if requested.
type Payload145 struct {
	OldName string `json:"oldName"`
	NewName string `json:"newName"`
}

func (o *Payload145) GetOldName() string {
	if o == nil {
		return ""
	}
	return o.OldName
}

func (o *Payload145) GetNewName() string {
	if o == nil {
		return ""
	}
	return o.NewName
}

type Tier string

const (
	TierPro  Tier = "pro"
	TierPlus Tier = "plus"
)

func (e Tier) ToPointer() *Tier {
	return &e
}
func (e *Tier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "plus":
		*e = Tier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Tier: %v", v)
	}
}

// Payload144 - The payload of the event, if requested.
type Payload144 struct {
	Tier Tier `json:"tier"`
}

func (o *Payload144) GetTier() Tier {
	if o == nil {
		return Tier("")
	}
	return o.Tier
}

type ProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *ProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *ProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *ProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type PrevProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *PrevProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PrevProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *PrevProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *PrevProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *PrevProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

// Payload143 - The payload of the event, if requested.
type Payload143 struct {
	ProjectID               string                   `json:"projectId"`
	ProjectName             string                   `json:"projectName"`
	ProjectWebAnalytics     *ProjectWebAnalytics     `json:"projectWebAnalytics,omitempty"`
	PrevProjectWebAnalytics *PrevProjectWebAnalytics `json:"prevProjectWebAnalytics,omitempty"`
}

func (o *Payload143) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload143) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload143) GetProjectWebAnalytics() *ProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.ProjectWebAnalytics
}

func (o *Payload143) GetPrevProjectWebAnalytics() *PrevProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.PrevProjectWebAnalytics
}

type Microfrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *Microfrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *Microfrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *Microfrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type Microfrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *Microfrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *Microfrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *Microfrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Microfrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *Microfrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *Microfrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type MicrofrontendsUnionType string

const (
	MicrofrontendsUnionTypeMicrofrontends1 MicrofrontendsUnionType = "microfrontends_1"
	MicrofrontendsUnionTypeMicrofrontends2 MicrofrontendsUnionType = "microfrontends_2"
)

type MicrofrontendsUnion struct {
	Microfrontends1 *Microfrontends1 `queryParam:"inline"`
	Microfrontends2 *Microfrontends2 `queryParam:"inline"`

	Type MicrofrontendsUnionType
}

func CreateMicrofrontendsUnionMicrofrontends1(microfrontends1 Microfrontends1) MicrofrontendsUnion {
	typ := MicrofrontendsUnionTypeMicrofrontends1

	return MicrofrontendsUnion{
		Microfrontends1: &microfrontends1,
		Type:            typ,
	}
}

func CreateMicrofrontendsUnionMicrofrontends2(microfrontends2 Microfrontends2) MicrofrontendsUnion {
	typ := MicrofrontendsUnionTypeMicrofrontends2

	return MicrofrontendsUnion{
		Microfrontends2: &microfrontends2,
		Type:            typ,
	}
}

func (u *MicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var microfrontends2 Microfrontends2 = Microfrontends2{}
	if err := utils.UnmarshalJSON(data, &microfrontends2, "", true, true); err == nil {
		u.Microfrontends2 = &microfrontends2
		u.Type = MicrofrontendsUnionTypeMicrofrontends2
		return nil
	}

	var microfrontends1 Microfrontends1 = Microfrontends1{}
	if err := utils.UnmarshalJSON(data, &microfrontends1, "", true, true); err == nil {
		u.Microfrontends1 = &microfrontends1
		u.Type = MicrofrontendsUnionTypeMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for MicrofrontendsUnion", string(data))
}

func (u MicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.Microfrontends1 != nil {
		return utils.MarshalJSON(u.Microfrontends1, "", true)
	}

	if u.Microfrontends2 != nil {
		return utils.MarshalJSON(u.Microfrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type MicrofrontendsUnion: all fields are null")
}

type Project12 struct {
	ID             string               `json:"id"`
	Name           string               `json:"name"`
	Microfrontends *MicrofrontendsUnion `json:"microfrontends,omitempty"`
}

func (o *Project12) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project12) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project12) GetMicrofrontends() *MicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

type MicrofrontendsPrev2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *MicrofrontendsPrev2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *MicrofrontendsPrev2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *MicrofrontendsPrev2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type MicrofrontendsPrev1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *MicrofrontendsPrev1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *MicrofrontendsPrev1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *MicrofrontendsPrev1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *MicrofrontendsPrev1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *MicrofrontendsPrev1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *MicrofrontendsPrev1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type PrevMicrofrontendsUnionType string

const (
	PrevMicrofrontendsUnionTypeMicrofrontendsPrev1 PrevMicrofrontendsUnionType = "microfrontends_prev_1"
	PrevMicrofrontendsUnionTypeMicrofrontendsPrev2 PrevMicrofrontendsUnionType = "microfrontends_prev_2"
)

type PrevMicrofrontendsUnion struct {
	MicrofrontendsPrev1 *MicrofrontendsPrev1 `queryParam:"inline"`
	MicrofrontendsPrev2 *MicrofrontendsPrev2 `queryParam:"inline"`

	Type PrevMicrofrontendsUnionType
}

func CreatePrevMicrofrontendsUnionMicrofrontendsPrev1(microfrontendsPrev1 MicrofrontendsPrev1) PrevMicrofrontendsUnion {
	typ := PrevMicrofrontendsUnionTypeMicrofrontendsPrev1

	return PrevMicrofrontendsUnion{
		MicrofrontendsPrev1: &microfrontendsPrev1,
		Type:                typ,
	}
}

func CreatePrevMicrofrontendsUnionMicrofrontendsPrev2(microfrontendsPrev2 MicrofrontendsPrev2) PrevMicrofrontendsUnion {
	typ := PrevMicrofrontendsUnionTypeMicrofrontendsPrev2

	return PrevMicrofrontendsUnion{
		MicrofrontendsPrev2: &microfrontendsPrev2,
		Type:                typ,
	}
}

func (u *PrevMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var microfrontendsPrev2 MicrofrontendsPrev2 = MicrofrontendsPrev2{}
	if err := utils.UnmarshalJSON(data, &microfrontendsPrev2, "", true, true); err == nil {
		u.MicrofrontendsPrev2 = &microfrontendsPrev2
		u.Type = PrevMicrofrontendsUnionTypeMicrofrontendsPrev2
		return nil
	}

	var microfrontendsPrev1 MicrofrontendsPrev1 = MicrofrontendsPrev1{}
	if err := utils.UnmarshalJSON(data, &microfrontendsPrev1, "", true, true); err == nil {
		u.MicrofrontendsPrev1 = &microfrontendsPrev1
		u.Type = PrevMicrofrontendsUnionTypeMicrofrontendsPrev1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PrevMicrofrontendsUnion", string(data))
}

func (u PrevMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.MicrofrontendsPrev1 != nil {
		return utils.MarshalJSON(u.MicrofrontendsPrev1, "", true)
	}

	if u.MicrofrontendsPrev2 != nil {
		return utils.MarshalJSON(u.MicrofrontendsPrev2, "", true)
	}

	return nil, errors.New("could not marshal union type PrevMicrofrontendsUnion: all fields are null")
}

type PrevProject struct {
	Microfrontends *PrevMicrofrontendsUnion `json:"microfrontends,omitempty"`
}

func (o *PrevProject) GetMicrofrontends() *PrevMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

type Prev2 struct {
	Project PrevProject `json:"project"`
}

func (o *Prev2) GetProject() PrevProject {
	if o == nil {
		return PrevProject{}
	}
	return o.Project
}

type Group2 struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

func (o *Group2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Group2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Group2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload142 - The payload of the event, if requested.
type Payload142 struct {
	Project Project12 `json:"project"`
	Prev    Prev2     `json:"prev"`
	Group   Group2    `json:"group"`
}

func (o *Payload142) GetProject() Project12 {
	if o == nil {
		return Project12{}
	}
	return o.Project
}

func (o *Payload142) GetPrev() Prev2 {
	if o == nil {
		return Prev2{}
	}
	return o.Prev
}

func (o *Payload142) GetGroup() Group2 {
	if o == nil {
		return Group2{}
	}
	return o.Group
}

type Project11 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *Project11) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project11) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Group1 struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

func (o *Group1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Group1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Group1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload141 - The payload of the event, if requested.
type Payload141 struct {
	Project Project11 `json:"project"`
	Group   Group1    `json:"group"`
}

func (o *Payload141) GetProject() Project11 {
	if o == nil {
		return Project11{}
	}
	return o.Project
}

func (o *Payload141) GetGroup() Group1 {
	if o == nil {
		return Group1{}
	}
	return o.Group
}

type Prev1 struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

func (o *Prev1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Prev1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

// Payload140 - The payload of the event, if requested.
type Payload140 struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
	Prev Prev1  `json:"prev"`
}

func (o *Payload140) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload140) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Payload140) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload140) GetPrev() Prev1 {
	if o == nil {
		return Prev1{}
	}
	return o.Prev
}

// Payload139 - The payload of the event, if requested.
type Payload139 struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

func (o *Payload139) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload139) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Payload139) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Action4 string

const (
	Action4Enable  Action4 = "enable"
	Action4Disable Action4 = "disable"
)

func (e Action4) ToPointer() *Action4 {
	return &e
}
func (e *Action4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enable":
		fallthrough
	case "disable":
		*e = Action4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action4: %v", v)
	}
}

// Payload138 - The payload of the event, if requested.
type Payload138 struct {
	Action Action4 `json:"action"`
}

func (o *Payload138) GetAction() Action4 {
	if o == nil {
		return Action4("")
	}
	return o.Action
}

// Payload137 - The payload of the event, if requested.
type Payload137 struct {
	EdgeConfigID   string `json:"edgeConfigId"`
	EdgeConfigSlug string `json:"edgeConfigSlug"`
	// ids of deleted tokens
	EdgeConfigTokenIds []string `json:"edgeConfigTokenIds"`
}

func (o *Payload137) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *Payload137) GetEdgeConfigSlug() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigSlug
}

func (o *Payload137) GetEdgeConfigTokenIds() []string {
	if o == nil {
		return []string{}
	}
	return o.EdgeConfigTokenIds
}

// Payload136 - The payload of the event, if requested.
type Payload136 struct {
	EdgeConfigID      string `json:"edgeConfigId"`
	EdgeConfigSlug    string `json:"edgeConfigSlug"`
	EdgeConfigTokenID string `json:"edgeConfigTokenId"`
	Label             string `json:"label"`
}

func (o *Payload136) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *Payload136) GetEdgeConfigSlug() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigSlug
}

func (o *Payload136) GetEdgeConfigTokenID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigTokenID
}

func (o *Payload136) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

// Payload135 - The payload of the event, if requested.
type Payload135 struct {
	EdgeConfigID     string `json:"edgeConfigId"`
	EdgeConfigSlug   string `json:"edgeConfigSlug"`
	EdgeConfigDigest string `json:"edgeConfigDigest"`
}

func (o *Payload135) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *Payload135) GetEdgeConfigSlug() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigSlug
}

func (o *Payload135) GetEdgeConfigDigest() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigDigest
}

type ProjectRole string

const (
	ProjectRoleAdmin            ProjectRole = "ADMIN"
	ProjectRoleProjectDeveloper ProjectRole = "PROJECT_DEVELOPER"
	ProjectRoleProjectViewer    ProjectRole = "PROJECT_VIEWER"
)

func (e ProjectRole) ToPointer() *ProjectRole {
	return &e
}
func (e *ProjectRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ProjectRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectRole: %v", v)
	}
}

type Project10 struct {
	Name            string      `json:"name"`
	Role            ProjectRole `json:"role"`
	InvitedUserName string      `json:"invitedUserName"`
	ID              *string     `json:"id,omitempty"`
	InvitedUserID   *string     `json:"invitedUserId,omitempty"`
}

func (o *Project10) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project10) GetRole() ProjectRole {
	if o == nil {
		return ProjectRole("")
	}
	return o.Role
}

func (o *Project10) GetInvitedUserName() string {
	if o == nil {
		return ""
	}
	return o.InvitedUserName
}

func (o *Project10) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Project10) GetInvitedUserID() *string {
	if o == nil {
		return nil
	}
	return o.InvitedUserID
}

// Payload134 - The payload of the event, if requested.
type Payload134 struct {
	Project Project10 `json:"project"`
}

func (o *Payload134) GetProject() Project10 {
	if o == nil {
		return Project10{}
	}
	return o.Project
}

type Project9 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *Project9) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project9) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type ProjectMembershipRole2 string

const (
	ProjectMembershipRole2Admin            ProjectMembershipRole2 = "ADMIN"
	ProjectMembershipRole2ProjectDeveloper ProjectMembershipRole2 = "PROJECT_DEVELOPER"
	ProjectMembershipRole2ProjectViewer    ProjectMembershipRole2 = "PROJECT_VIEWER"
)

func (e ProjectMembershipRole2) ToPointer() *ProjectMembershipRole2 {
	return &e
}
func (e *ProjectMembershipRole2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ProjectMembershipRole2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectMembershipRole2: %v", v)
	}
}

type ProjectMembershipPreviousRole string

const (
	ProjectMembershipPreviousRoleAdmin            ProjectMembershipPreviousRole = "ADMIN"
	ProjectMembershipPreviousRoleProjectDeveloper ProjectMembershipPreviousRole = "PROJECT_DEVELOPER"
	ProjectMembershipPreviousRoleProjectViewer    ProjectMembershipPreviousRole = "PROJECT_VIEWER"
)

func (e ProjectMembershipPreviousRole) ToPointer() *ProjectMembershipPreviousRole {
	return &e
}
func (e *ProjectMembershipPreviousRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ProjectMembershipPreviousRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectMembershipPreviousRole: %v", v)
	}
}

type ProjectMembership2 struct {
	Role         *ProjectMembershipRole2        `json:"role,omitempty"`
	UID          *string                        `json:"uid,omitempty"`
	CreatedAt    *float64                       `json:"createdAt,omitempty"`
	Username     *string                        `json:"username,omitempty"`
	PreviousRole *ProjectMembershipPreviousRole `json:"previousRole,omitempty"`
}

func (o *ProjectMembership2) GetRole() *ProjectMembershipRole2 {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *ProjectMembership2) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *ProjectMembership2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ProjectMembership2) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *ProjectMembership2) GetPreviousRole() *ProjectMembershipPreviousRole {
	if o == nil {
		return nil
	}
	return o.PreviousRole
}

// Payload133 - The payload of the event, if requested.
type Payload133 struct {
	Project           Project9           `json:"project"`
	ProjectMembership ProjectMembership2 `json:"projectMembership"`
}

func (o *Payload133) GetProject() Project9 {
	if o == nil {
		return Project9{}
	}
	return o.Project
}

func (o *Payload133) GetProjectMembership() ProjectMembership2 {
	if o == nil {
		return ProjectMembership2{}
	}
	return o.ProjectMembership
}

type Project8 struct {
	Name string  `json:"name"`
	ID   *string `json:"id,omitempty"`
}

func (o *Project8) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project8) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type RemovedMembershipRole string

const (
	RemovedMembershipRoleAdmin            RemovedMembershipRole = "ADMIN"
	RemovedMembershipRoleProjectDeveloper RemovedMembershipRole = "PROJECT_DEVELOPER"
	RemovedMembershipRoleProjectViewer    RemovedMembershipRole = "PROJECT_VIEWER"
)

func (e RemovedMembershipRole) ToPointer() *RemovedMembershipRole {
	return &e
}
func (e *RemovedMembershipRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = RemovedMembershipRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemovedMembershipRole: %v", v)
	}
}

type RemovedMembership struct {
	Role      *RemovedMembershipRole `json:"role,omitempty"`
	UID       *string                `json:"uid,omitempty"`
	CreatedAt *float64               `json:"createdAt,omitempty"`
	Username  *string                `json:"username,omitempty"`
}

func (o *RemovedMembership) GetRole() *RemovedMembershipRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *RemovedMembership) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *RemovedMembership) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemovedMembership) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Payload132 - The payload of the event, if requested.
type Payload132 struct {
	Project           Project8          `json:"project"`
	RemovedMembership RemovedMembership `json:"removedMembership"`
}

func (o *Payload132) GetProject() Project8 {
	if o == nil {
		return Project8{}
	}
	return o.Project
}

func (o *Payload132) GetRemovedMembership() RemovedMembership {
	if o == nil {
		return RemovedMembership{}
	}
	return o.RemovedMembership
}

type Project7 struct {
	Name string  `json:"name"`
	ID   *string `json:"id,omitempty"`
}

func (o *Project7) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Project7) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

type ProjectMembershipRole1 string

const (
	ProjectMembershipRole1Admin            ProjectMembershipRole1 = "ADMIN"
	ProjectMembershipRole1ProjectDeveloper ProjectMembershipRole1 = "PROJECT_DEVELOPER"
	ProjectMembershipRole1ProjectViewer    ProjectMembershipRole1 = "PROJECT_VIEWER"
)

func (e ProjectMembershipRole1) ToPointer() *ProjectMembershipRole1 {
	return &e
}
func (e *ProjectMembershipRole1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ProjectMembershipRole1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProjectMembershipRole1: %v", v)
	}
}

type ProjectMembership1 struct {
	Role      *ProjectMembershipRole1 `json:"role,omitempty"`
	UID       *string                 `json:"uid,omitempty"`
	CreatedAt *float64                `json:"createdAt,omitempty"`
	Username  *string                 `json:"username,omitempty"`
}

func (o *ProjectMembership1) GetRole() *ProjectMembershipRole1 {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *ProjectMembership1) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *ProjectMembership1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *ProjectMembership1) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Payload131 - The payload of the event, if requested.
type Payload131 struct {
	Project           Project7            `json:"project"`
	ProjectMembership *ProjectMembership1 `json:"projectMembership"`
}

func (o *Payload131) GetProject() Project7 {
	if o == nil {
		return Project7{}
	}
	return o.Project
}

func (o *Payload131) GetProjectMembership() *ProjectMembership1 {
	if o == nil {
		return nil
	}
	return o.ProjectMembership
}

// Payload130 - The payload of the event, if requested.
type Payload130 struct {
	PreviousProjectName string  `json:"previousProjectName"`
	NewProjectName      string  `json:"newProjectName"`
	OriginAccountName   string  `json:"originAccountName"`
	TransferID          *string `json:"transferId,omitempty"`
}

func (o *Payload130) GetPreviousProjectName() string {
	if o == nil {
		return ""
	}
	return o.PreviousProjectName
}

func (o *Payload130) GetNewProjectName() string {
	if o == nil {
		return ""
	}
	return o.NewProjectName
}

func (o *Payload130) GetOriginAccountName() string {
	if o == nil {
		return ""
	}
	return o.OriginAccountName
}

func (o *Payload130) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

// Payload129 - The payload of the event, if requested.
type Payload129 struct {
	PreviousProjectName    string  `json:"previousProjectName"`
	NewProjectName         string  `json:"newProjectName"`
	DestinationAccountName string  `json:"destinationAccountName"`
	TransferID             *string `json:"transferId,omitempty"`
}

func (o *Payload129) GetPreviousProjectName() string {
	if o == nil {
		return ""
	}
	return o.PreviousProjectName
}

func (o *Payload129) GetNewProjectName() string {
	if o == nil {
		return ""
	}
	return o.NewProjectName
}

func (o *Payload129) GetDestinationAccountName() string {
	if o == nil {
		return ""
	}
	return o.DestinationAccountName
}

func (o *Payload129) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

// Payload128 - The payload of the event, if requested.
type Payload128 struct {
	ProjectName            string  `json:"projectName"`
	DestinationAccountName *string `json:"destinationAccountName"`
	TransferID             *string `json:"transferId,omitempty"`
}

func (o *Payload128) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload128) GetDestinationAccountName() *string {
	if o == nil {
		return nil
	}
	return o.DestinationAccountName
}

func (o *Payload128) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

// Payload127 - The payload of the event, if requested.
type Payload127 struct {
	ProjectID              string  `json:"projectId"`
	ProjectName            string  `json:"projectName"`
	OriginAccountName      string  `json:"originAccountName"`
	DestinationAccountName string  `json:"destinationAccountName"`
	DestinationAccountID   string  `json:"destinationAccountId"`
	TransferID             *string `json:"transferId,omitempty"`
}

func (o *Payload127) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload127) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload127) GetOriginAccountName() string {
	if o == nil {
		return ""
	}
	return o.OriginAccountName
}

func (o *Payload127) GetDestinationAccountName() string {
	if o == nil {
		return ""
	}
	return o.DestinationAccountName
}

func (o *Payload127) GetDestinationAccountID() string {
	if o == nil {
		return ""
	}
	return o.DestinationAccountID
}

func (o *Payload127) GetTransferID() *string {
	if o == nil {
		return nil
	}
	return o.TransferID
}

// Payload126 - The payload of the event, if requested.
type Payload126 struct {
	RequestedTeamName string  `json:"requestedTeamName"`
	RequestedUserName *string `json:"requestedUserName,omitempty"`
	GitUsername       *string `json:"gitUsername,omitempty"`
	GithubUsername    *string `json:"githubUsername,omitempty"`
	GitlabUsername    *string `json:"gitlabUsername,omitempty"`
	BitbucketUsername *string `json:"bitbucketUsername,omitempty"`
}

func (o *Payload126) GetRequestedTeamName() string {
	if o == nil {
		return ""
	}
	return o.RequestedTeamName
}

func (o *Payload126) GetRequestedUserName() *string {
	if o == nil {
		return nil
	}
	return o.RequestedUserName
}

func (o *Payload126) GetGitUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitUsername
}

func (o *Payload126) GetGithubUsername() *string {
	if o == nil {
		return nil
	}
	return o.GithubUsername
}

func (o *Payload126) GetGitlabUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitlabUsername
}

func (o *Payload126) GetBitbucketUsername() *string {
	if o == nil {
		return nil
	}
	return o.BitbucketUsername
}

// Payload125 - The payload of the event, if requested.
type Payload125 struct {
	TeamName          string  `json:"teamName"`
	Username          *string `json:"username,omitempty"`
	GitUsername       *string `json:"gitUsername,omitempty"`
	GithubUsername    *string `json:"githubUsername,omitempty"`
	GitlabUsername    *string `json:"gitlabUsername,omitempty"`
	BitbucketUsername *string `json:"bitbucketUsername,omitempty"`
}

func (o *Payload125) GetTeamName() string {
	if o == nil {
		return ""
	}
	return o.TeamName
}

func (o *Payload125) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *Payload125) GetGitUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitUsername
}

func (o *Payload125) GetGithubUsername() *string {
	if o == nil {
		return nil
	}
	return o.GithubUsername
}

func (o *Payload125) GetGitlabUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitlabUsername
}

func (o *Payload125) GetBitbucketUsername() *string {
	if o == nil {
		return nil
	}
	return o.BitbucketUsername
}

// Payload124 - The payload of the event, if requested.
type Payload124 struct {
	TeamName          string  `json:"teamName"`
	Username          *string `json:"username,omitempty"`
	GitUsername       *string `json:"gitUsername,omitempty"`
	GithubUsername    *string `json:"githubUsername,omitempty"`
	GitlabUsername    *string `json:"gitlabUsername,omitempty"`
	BitbucketUsername *string `json:"bitbucketUsername,omitempty"`
	UpdatedUID        *string `json:"updatedUid,omitempty"`
	TeamID            *string `json:"teamId,omitempty"`
}

func (o *Payload124) GetTeamName() string {
	if o == nil {
		return ""
	}
	return o.TeamName
}

func (o *Payload124) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *Payload124) GetGitUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitUsername
}

func (o *Payload124) GetGithubUsername() *string {
	if o == nil {
		return nil
	}
	return o.GithubUsername
}

func (o *Payload124) GetGitlabUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitlabUsername
}

func (o *Payload124) GetBitbucketUsername() *string {
	if o == nil {
		return nil
	}
	return o.BitbucketUsername
}

func (o *Payload124) GetUpdatedUID() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedUID
}

func (o *Payload124) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

// Payload123 - The payload of the event, if requested.
type Payload123 struct {
	Price    *float64 `json:"price,omitempty"`
	Currency *string  `json:"currency,omitempty"`
}

func (o *Payload123) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Payload123) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

// Payload122 - The payload of the event, if requested.
type Payload122 struct {
	PreviewDeploymentSuffix         *string `json:"previewDeploymentSuffix,omitempty"`
	PreviousPreviewDeploymentSuffix *string `json:"previousPreviewDeploymentSuffix,omitempty"`
}

func (o *Payload122) GetPreviewDeploymentSuffix() *string {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *Payload122) GetPreviousPreviewDeploymentSuffix() *string {
	if o == nil {
		return nil
	}
	return o.PreviousPreviewDeploymentSuffix
}

// Payload121 - The payload of the event, if requested.
type Payload121 struct {
	Price    *float64 `json:"price,omitempty"`
	Currency *string  `json:"currency,omitempty"`
	Enabled  *bool    `json:"enabled,omitempty"`
}

func (o *Payload121) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Payload121) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

func (o *Payload121) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// Payload120 - The payload of the event, if requested.
type Payload120 struct {
	Username string `json:"username"`
}

func (o *Payload120) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// Payload119 - The payload of the event, if requested.
type Payload119 struct {
	Email     string `json:"email"`
	PrevEmail string `json:"prevEmail"`
}

func (o *Payload119) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Payload119) GetPrevEmail() string {
	if o == nil {
		return ""
	}
	return o.PrevEmail
}

// Payload118 - The payload of the event, if requested.
type Payload118 struct {
	MfaEnabled bool `json:"mfaEnabled"`
}

func (o *Payload118) GetMfaEnabled() bool {
	if o == nil {
		return false
	}
	return o.MfaEnabled
}

// Payload117 - The payload of the event, if requested.
type Payload117 struct {
	Enabled      bool `json:"enabled"`
	TotpVerified bool `json:"totpVerified"`
}

func (o *Payload117) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Payload117) GetTotpVerified() bool {
	if o == nil {
		return false
	}
	return o.TotpVerified
}

type Previous struct {
	Enabled      bool `json:"enabled"`
	TotpVerified bool `json:"totpVerified"`
}

func (o *Previous) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Previous) GetTotpVerified() bool {
	if o == nil {
		return false
	}
	return o.TotpVerified
}

type Next struct {
	Enabled      bool `json:"enabled"`
	TotpVerified bool `json:"totpVerified"`
}

func (o *Next) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Next) GetTotpVerified() bool {
	if o == nil {
		return false
	}
	return o.TotpVerified
}

// Payload116 - The payload of the event, if requested.
type Payload116 struct {
	Previous Previous `json:"previous"`
	Next     Next     `json:"next"`
}

func (o *Payload116) GetPrevious() Previous {
	if o == nil {
		return Previous{}
	}
	return o.Previous
}

func (o *Payload116) GetNext() Next {
	if o == nil {
		return Next{}
	}
	return o.Next
}

// UserEventRemoteCaching - Represents configuration for remote caching
type UserEventRemoteCaching struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *UserEventRemoteCaching) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// Payload115 - The payload of the event, if requested.
type Payload115 struct {
	// Represents configuration for remote caching
	RemoteCaching *UserEventRemoteCaching `json:"remoteCaching,omitempty"`
}

func (o *Payload115) GetRemoteCaching() *UserEventRemoteCaching {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

// Payload114 - The payload of the event, if requested.
type Payload114 struct {
	Slug *string `json:"slug,omitempty"`
}

func (o *Payload114) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// Payload113 - The payload of the event, if requested.
type Payload113 struct {
	Name *string `json:"name,omitempty"`
}

func (o *Payload113) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload112 - The payload of the event, if requested.
type Payload112 struct {
	Enforced bool `json:"enforced"`
}

func (o *Payload112) GetEnforced() bool {
	if o == nil {
		return false
	}
	return o.Enforced
}

type PayloadUser3 struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (o *PayloadUser3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PayloadUser3) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// Payload111 - The payload of the event, if requested.
type Payload111 struct {
	Entitlement        string       `json:"entitlement"`
	User               PayloadUser3 `json:"user"`
	PreviousCanceledAt *string      `json:"previousCanceledAt,omitempty"`
}

func (o *Payload111) GetEntitlement() string {
	if o == nil {
		return ""
	}
	return o.Entitlement
}

func (o *Payload111) GetUser() PayloadUser3 {
	if o == nil {
		return PayloadUser3{}
	}
	return o.User
}

func (o *Payload111) GetPreviousCanceledAt() *string {
	if o == nil {
		return nil
	}
	return o.PreviousCanceledAt
}

type PayloadUser2 struct {
	ID       string `json:"id"`
	Username string `json:"username"`
}

func (o *PayloadUser2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PayloadUser2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// Payload110 - The payload of the event, if requested.
type Payload110 struct {
	Entitlement string       `json:"entitlement"`
	User        PayloadUser2 `json:"user"`
}

func (o *Payload110) GetEntitlement() string {
	if o == nil {
		return ""
	}
	return o.Entitlement
}

func (o *Payload110) GetUser() PayloadUser2 {
	if o == nil {
		return PayloadUser2{}
	}
	return o.User
}

type UpdatedUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (o *UpdatedUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *UpdatedUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// Payload109 - The payload of the event, if requested.
type Payload109 struct {
	DirectoryType *string      `json:"directoryType,omitempty"`
	UpdatedUser   *UpdatedUser `json:"updatedUser,omitempty"`
	Role          *string      `json:"role,omitempty"`
	PreviousRole  string       `json:"previousRole"`
	UpdatedUID    *string      `json:"updatedUid,omitempty"`
}

func (o *Payload109) GetDirectoryType() *string {
	if o == nil {
		return nil
	}
	return o.DirectoryType
}

func (o *Payload109) GetUpdatedUser() *UpdatedUser {
	if o == nil {
		return nil
	}
	return o.UpdatedUser
}

func (o *Payload109) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *Payload109) GetPreviousRole() string {
	if o == nil {
		return ""
	}
	return o.PreviousRole
}

func (o *Payload109) GetUpdatedUID() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedUID
}

// Payload108 - The payload of the event, if requested.
type Payload108 struct {
	Role   *string `json:"role,omitempty"`
	UID    string  `json:"uid"`
	Origin *string `json:"origin,omitempty"`
}

func (o *Payload108) GetRole() *string {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *Payload108) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *Payload108) GetOrigin() *string {
	if o == nil {
		return nil
	}
	return o.Origin
}

type DeletedUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (o *DeletedUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *DeletedUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// Payload107 - The payload of the event, if requested.
type Payload107 struct {
	DeletedUser       *DeletedUser `json:"deletedUser,omitempty"`
	DeletedUID        *string      `json:"deletedUid,omitempty"`
	GithubUsername    *string      `json:"githubUsername,omitempty"`
	GitlabUsername    *string      `json:"gitlabUsername,omitempty"`
	BitbucketUsername *string      `json:"bitbucketUsername,omitempty"`
	DirectoryType     *string      `json:"directoryType,omitempty"`
}

func (o *Payload107) GetDeletedUser() *DeletedUser {
	if o == nil {
		return nil
	}
	return o.DeletedUser
}

func (o *Payload107) GetDeletedUID() *string {
	if o == nil {
		return nil
	}
	return o.DeletedUID
}

func (o *Payload107) GetGithubUsername() *string {
	if o == nil {
		return nil
	}
	return o.GithubUsername
}

func (o *Payload107) GetGitlabUsername() *string {
	if o == nil {
		return nil
	}
	return o.GitlabUsername
}

func (o *Payload107) GetBitbucketUsername() *string {
	if o == nil {
		return nil
	}
	return o.BitbucketUsername
}

func (o *Payload107) GetDirectoryType() *string {
	if o == nil {
		return nil
	}
	return o.DirectoryType
}

type InvitedUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (o *InvitedUser) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *InvitedUser) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// Payload106 - The payload of the event, if requested.
type Payload106 struct {
	DirectoryType  *string      `json:"directoryType,omitempty"`
	SsoType        *string      `json:"ssoType,omitempty"`
	InvitedUser    *InvitedUser `json:"invitedUser,omitempty"`
	InvitedEmail   *string      `json:"invitedEmail,omitempty"`
	InvitationRole *string      `json:"invitationRole,omitempty"`
	Entitlements   []string     `json:"entitlements,omitempty"`
	InvitedUID     *string      `json:"invitedUid,omitempty"`
}

func (o *Payload106) GetDirectoryType() *string {
	if o == nil {
		return nil
	}
	return o.DirectoryType
}

func (o *Payload106) GetSsoType() *string {
	if o == nil {
		return nil
	}
	return o.SsoType
}

func (o *Payload106) GetInvitedUser() *InvitedUser {
	if o == nil {
		return nil
	}
	return o.InvitedUser
}

func (o *Payload106) GetInvitedEmail() *string {
	if o == nil {
		return nil
	}
	return o.InvitedEmail
}

func (o *Payload106) GetInvitationRole() *string {
	if o == nil {
		return nil
	}
	return o.InvitationRole
}

func (o *Payload106) GetEntitlements() []string {
	if o == nil {
		return nil
	}
	return o.Entitlements
}

func (o *Payload106) GetInvitedUID() *string {
	if o == nil {
		return nil
	}
	return o.InvitedUID
}

type UserEventReason struct {
	Slug        string `json:"slug"`
	Description string `json:"description"`
}

func (o *UserEventReason) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *UserEventReason) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

// Payload105 - The payload of the event, if requested.
type Payload105 struct {
	Slug    string            `json:"slug"`
	TeamID  string            `json:"teamId"`
	By      string            `json:"by"`
	Reasons []UserEventReason `json:"reasons,omitempty"`
}

func (o *Payload105) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Payload105) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Payload105) GetBy() string {
	if o == nil {
		return ""
	}
	return o.By
}

func (o *Payload105) GetReasons() []UserEventReason {
	if o == nil {
		return nil
	}
	return o.Reasons
}

// Payload104 - The payload of the event, if requested.
type Payload104 struct {
	Slug string `json:"slug"`
}

func (o *Payload104) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type Store struct {
	Name string `json:"name"`
	ID   string `json:"id"`
}

func (o *Store) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Store) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// Payload103 - The payload of the event, if requested.
type Payload103 struct {
	Store   Store   `json:"store"`
	OwnerID *string `json:"ownerId,omitempty"`
}

func (o *Payload103) GetStore() Store {
	if o == nil {
		return Store{}
	}
	return o.Store
}

func (o *Payload103) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

type StoreType string

const (
	StoreTypeRedis    StoreType = "redis"
	StoreTypePostgres StoreType = "postgres"
)

func (e StoreType) ToPointer() *StoreType {
	return &e
}
func (e *StoreType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis":
		fallthrough
	case "postgres":
		*e = StoreType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StoreType: %v", v)
	}
}

// Payload102 - The payload of the event, if requested.
type Payload102 struct {
	StoreType StoreType `json:"storeType"`
}

func (o *Payload102) GetStoreType() StoreType {
	if o == nil {
		return StoreType("")
	}
	return o.StoreType
}

type PayloadType2 string

const (
	PayloadType2Redis       PayloadType2 = "redis"
	PayloadType2Postgres    PayloadType2 = "postgres"
	PayloadType2EdgeConfig  PayloadType2 = "edge-config"
	PayloadType2Blob        PayloadType2 = "blob"
	PayloadType2Integration PayloadType2 = "integration"
)

func (e PayloadType2) ToPointer() *PayloadType2 {
	return &e
}
func (e *PayloadType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis":
		fallthrough
	case "postgres":
		fallthrough
	case "edge-config":
		fallthrough
	case "blob":
		fallthrough
	case "integration":
		*e = PayloadType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PayloadType2: %v", v)
	}
}

// Payload101 - The payload of the event, if requested.
type Payload101 struct {
	ID                    string       `json:"id"`
	Name                  *string      `json:"name,omitempty"`
	ComputeUnitsMax       *float64     `json:"computeUnitsMax,omitempty"`
	ComputeUnitsMin       *float64     `json:"computeUnitsMin,omitempty"`
	SuspendTimeoutSeconds *float64     `json:"suspendTimeoutSeconds,omitempty"`
	Type                  PayloadType2 `json:"type"`
}

func (o *Payload101) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload101) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Payload101) GetComputeUnitsMax() *float64 {
	if o == nil {
		return nil
	}
	return o.ComputeUnitsMax
}

func (o *Payload101) GetComputeUnitsMin() *float64 {
	if o == nil {
		return nil
	}
	return o.ComputeUnitsMin
}

func (o *Payload101) GetSuspendTimeoutSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.SuspendTimeoutSeconds
}

func (o *Payload101) GetType() PayloadType2 {
	if o == nil {
		return PayloadType2("")
	}
	return o.Type
}

// BudgetType - The budget type
type BudgetType string

const (
	BudgetTypeFixed BudgetType = "fixed"
)

func (e BudgetType) ToPointer() *BudgetType {
	return &e
}
func (e *BudgetType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		*e = BudgetType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BudgetType: %v", v)
	}
}

// BudgetPricingPlan - The acive pricing plan the team is billed with
type BudgetPricingPlan string

const (
	BudgetPricingPlanLegacy    BudgetPricingPlan = "legacy"
	BudgetPricingPlanUnbundled BudgetPricingPlan = "unbundled"
)

func (e BudgetPricingPlan) ToPointer() *BudgetPricingPlan {
	return &e
}
func (e *BudgetPricingPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "unbundled":
		*e = BudgetPricingPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BudgetPricingPlan: %v", v)
	}
}

// BudgetItem - Represents a budget for tracking and notifying teams on their spending.
type BudgetItem struct {
	// The budget type
	Type BudgetType `json:"type"`
	// Budget amount
	FixedBudget float64 `json:"fixedBudget"`
	// Array of the last 3 months of spend data
	PreviousSpend []float64 `json:"previousSpend"`
	// Array of 50, 75, 100 to keep track of notifications sent out
	NotifiedAt []float64 `json:"notifiedAt"`
	// Webhook id that corresponds to a webhook in Cosmos webhook collection
	WebhookID *string `json:"webhookId,omitempty"`
	// Keep track if the webhook has been called for the month
	WebhookNotified *bool `json:"webhookNotified,omitempty"`
	// Date time when budget is created
	CreatedAt float64 `json:"createdAt"`
	// Date time when budget is updated last
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// Is the budget currently active for a customer
	IsActive bool `json:"isActive"`
	// Should all projects be paused if budget is exceeded
	PauseProjects *bool `json:"pauseProjects,omitempty"`
	// The acive pricing plan the team is billed with
	PricingPlan *BudgetPricingPlan `json:"pricingPlan,omitempty"`
	// Partition key
	TeamID string `json:"teamId"`
	// Sort key that needs to be unique per teamId
	ID string `json:"id"`
}

func (o *BudgetItem) GetType() BudgetType {
	if o == nil {
		return BudgetType("")
	}
	return o.Type
}

func (o *BudgetItem) GetFixedBudget() float64 {
	if o == nil {
		return 0.0
	}
	return o.FixedBudget
}

func (o *BudgetItem) GetPreviousSpend() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.PreviousSpend
}

func (o *BudgetItem) GetNotifiedAt() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.NotifiedAt
}

func (o *BudgetItem) GetWebhookID() *string {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

func (o *BudgetItem) GetWebhookNotified() *bool {
	if o == nil {
		return nil
	}
	return o.WebhookNotified
}

func (o *BudgetItem) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *BudgetItem) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *BudgetItem) GetIsActive() bool {
	if o == nil {
		return false
	}
	return o.IsActive
}

func (o *BudgetItem) GetPauseProjects() *bool {
	if o == nil {
		return nil
	}
	return o.PauseProjects
}

func (o *BudgetItem) GetPricingPlan() *BudgetPricingPlan {
	if o == nil {
		return nil
	}
	return o.PricingPlan
}

func (o *BudgetItem) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *BudgetItem) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type Budget struct {
	// Represents a budget for tracking and notifying teams on their spending.
	BudgetItem BudgetItem `json:"budgetItem"`
}

func (o *Budget) GetBudgetItem() BudgetItem {
	if o == nil {
		return BudgetItem{}
	}
	return o.BudgetItem
}

// Payload100 - The payload of the event, if requested.
type Payload100 struct {
	Budget Budget `json:"budget"`
}

func (o *Payload100) GetBudget() Budget {
	if o == nil {
		return Budget{}
	}
	return o.Budget
}

// TypeFixed - The budget type
type TypeFixed string

const (
	TypeFixedFixed TypeFixed = "fixed"
)

func (e TypeFixed) ToPointer() *TypeFixed {
	return &e
}
func (e *TypeFixed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed":
		*e = TypeFixed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeFixed: %v", v)
	}
}

// PricingPlan - The acive pricing plan the team is billed with
type PricingPlan string

const (
	PricingPlanLegacy    PricingPlan = "legacy"
	PricingPlanUnbundled PricingPlan = "unbundled"
)

func (e PricingPlan) ToPointer() *PricingPlan {
	return &e
}
func (e *PricingPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "legacy":
		fallthrough
	case "unbundled":
		*e = PricingPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PricingPlan: %v", v)
	}
}

// BudgetFixed - Represents a budget for tracking and notifying teams on their spending.
type BudgetFixed struct {
	// The budget type
	Type TypeFixed `json:"type"`
	// Budget amount
	FixedBudget float64 `json:"fixedBudget"`
	// Array of the last 3 months of spend data
	PreviousSpend []float64 `json:"previousSpend"`
	// Array of 50, 75, 100 to keep track of notifications sent out
	NotifiedAt []float64 `json:"notifiedAt"`
	// Webhook id that corresponds to a webhook in Cosmos webhook collection
	WebhookID *string `json:"webhookId,omitempty"`
	// Keep track if the webhook has been called for the month
	WebhookNotified *bool `json:"webhookNotified,omitempty"`
	// Date time when budget is created
	CreatedAt float64 `json:"createdAt"`
	// Date time when budget is updated last
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// Is the budget currently active for a customer
	IsActive bool `json:"isActive"`
	// Should all projects be paused if budget is exceeded
	PauseProjects *bool `json:"pauseProjects,omitempty"`
	// The acive pricing plan the team is billed with
	PricingPlan *PricingPlan `json:"pricingPlan,omitempty"`
	// Partition key
	TeamID string `json:"teamId"`
	// Sort key that needs to be unique per teamId
	ID string `json:"id"`
}

func (o *BudgetFixed) GetType() TypeFixed {
	if o == nil {
		return TypeFixed("")
	}
	return o.Type
}

func (o *BudgetFixed) GetFixedBudget() float64 {
	if o == nil {
		return 0.0
	}
	return o.FixedBudget
}

func (o *BudgetFixed) GetPreviousSpend() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.PreviousSpend
}

func (o *BudgetFixed) GetNotifiedAt() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.NotifiedAt
}

func (o *BudgetFixed) GetWebhookID() *string {
	if o == nil {
		return nil
	}
	return o.WebhookID
}

func (o *BudgetFixed) GetWebhookNotified() *bool {
	if o == nil {
		return nil
	}
	return o.WebhookNotified
}

func (o *BudgetFixed) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *BudgetFixed) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *BudgetFixed) GetIsActive() bool {
	if o == nil {
		return false
	}
	return o.IsActive
}

func (o *BudgetFixed) GetPauseProjects() *bool {
	if o == nil {
		return nil
	}
	return o.PauseProjects
}

func (o *BudgetFixed) GetPricingPlan() *PricingPlan {
	if o == nil {
		return nil
	}
	return o.PricingPlan
}

func (o *BudgetFixed) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *BudgetFixed) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// Payload99 - The payload of the event, if requested.
type Payload99 struct {
	// Represents a budget for tracking and notifying teams on their spending.
	Budget BudgetFixed `json:"budget"`
}

func (o *Payload99) GetBudget() BudgetFixed {
	if o == nil {
		return BudgetFixed{}
	}
	return o.Budget
}

// Payload98 - The payload of the event, if requested.
type Payload98 struct {
	WebhookURL *string `json:"webhookUrl,omitempty"`
}

func (o *Payload98) GetWebhookURL() *string {
	if o == nil {
		return nil
	}
	return o.WebhookURL
}

type ScalingRules struct {
	Min float64 `json:"min"`
	Max float64 `json:"max"`
}

func (o *ScalingRules) GetMin() float64 {
	if o == nil {
		return 0.0
	}
	return o.Min
}

func (o *ScalingRules) GetMax() float64 {
	if o == nil {
		return 0.0
	}
	return o.Max
}

// Payload97 - The payload of the event, if requested.
type Payload97 struct {
	ScalingRules map[string]ScalingRules `json:"scalingRules"`
	Min          float64                 `json:"min"`
	Max          float64                 `json:"max"`
	URL          string                  `json:"url"`
}

func (o *Payload97) GetScalingRules() map[string]ScalingRules {
	if o == nil {
		return map[string]ScalingRules{}
	}
	return o.ScalingRules
}

func (o *Payload97) GetMin() float64 {
	if o == nil {
		return 0.0
	}
	return o.Min
}

func (o *Payload97) GetMax() float64 {
	if o == nil {
		return 0.0
	}
	return o.Max
}

func (o *Payload97) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

// Payload96 - The payload of the event, if requested.
type Payload96 struct {
	Bio string `json:"bio"`
}

func (o *Payload96) GetBio() string {
	if o == nil {
		return ""
	}
	return o.Bio
}

// Payload95 - The payload of the event, if requested.
type Payload95 struct {
	OldName string  `json:"oldName"`
	NewName string  `json:"newName"`
	UID     *string `json:"uid,omitempty"`
}

func (o *Payload95) GetOldName() string {
	if o == nil {
		return ""
	}
	return o.OldName
}

func (o *Payload95) GetNewName() string {
	if o == nil {
		return ""
	}
	return o.NewName
}

func (o *Payload95) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

type Name struct {
	Name string `json:"name"`
}

func (o *Name) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type NameUnionType string

const (
	NameUnionTypeStr  NameUnionType = "str"
	NameUnionTypeName NameUnionType = "name"
)

type NameUnion struct {
	Str  *string `queryParam:"inline"`
	Name *Name   `queryParam:"inline"`

	Type NameUnionType
}

func CreateNameUnionStr(str string) NameUnion {
	typ := NameUnionTypeStr

	return NameUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateNameUnionName(name Name) NameUnion {
	typ := NameUnionTypeName

	return NameUnion{
		Name: &name,
		Type: typ,
	}
}

func (u *NameUnion) UnmarshalJSON(data []byte) error {

	var name Name = Name{}
	if err := utils.UnmarshalJSON(data, &name, "", true, true); err == nil {
		u.Name = &name
		u.Type = NameUnionTypeName
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = NameUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NameUnion", string(data))
}

func (u NameUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Name != nil {
		return utils.MarshalJSON(u.Name, "", true)
	}

	return nil, errors.New("could not marshal union type NameUnion: all fields are null")
}

// Payload94 - The payload of the event, if requested.
type Payload94 struct {
	UID  string    `json:"uid"`
	Name NameUnion `json:"name"`
}

func (o *Payload94) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *Payload94) GetName() NameUnion {
	if o == nil {
		return NameUnion{}
	}
	return o.Name
}

type UserEventTeam7 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *UserEventTeam7) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam7) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type PreviousRule2 struct {
	Email string `json:"email"`
}

func (o *PreviousRule2) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// Payload93 - The payload of the event, if requested.
type Payload93 struct {
	Team         UserEventTeam7 `json:"team"`
	PreviousRule PreviousRule2  `json:"previousRule"`
}

func (o *Payload93) GetTeam() UserEventTeam7 {
	if o == nil {
		return UserEventTeam7{}
	}
	return o.Team
}

func (o *Payload93) GetPreviousRule() PreviousRule2 {
	if o == nil {
		return PreviousRule2{}
	}
	return o.PreviousRule
}

type UserEventTeam6 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *UserEventTeam6) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam6) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type PreviousRule1 struct {
	Email string `json:"email"`
}

func (o *PreviousRule1) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type NextRule struct {
	Email string `json:"email"`
}

func (o *NextRule) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// Payload92 - The payload of the event, if requested.
type Payload92 struct {
	Team         UserEventTeam6 `json:"team"`
	PreviousRule *PreviousRule1 `json:"previousRule,omitempty"`
	NextRule     *NextRule      `json:"nextRule,omitempty"`
}

func (o *Payload92) GetTeam() UserEventTeam6 {
	if o == nil {
		return UserEventTeam6{}
	}
	return o.Team
}

func (o *Payload92) GetPreviousRule() *PreviousRule1 {
	if o == nil {
		return nil
	}
	return o.PreviousRule
}

func (o *Payload92) GetNextRule() *NextRule {
	if o == nil {
		return nil
	}
	return o.NextRule
}

// Payload91 - The payload of the event, if requested.
type Payload91 struct {
	Email string `json:"email"`
}

func (o *Payload91) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

// Payload90 - The payload of the event, if requested.
type Payload90 struct {
	Email    string `json:"email"`
	Verified bool   `json:"verified"`
}

func (o *Payload90) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Payload90) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

// Payload89 - The payload of the event, if requested.
type Payload89 struct {
	Instances float64 `json:"instances"`
	URL       string  `json:"url"`
}

func (o *Payload89) GetInstances() float64 {
	if o == nil {
		return 0.0
	}
	return o.Instances
}

func (o *Payload89) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

// Payload88 - The payload of the event, if requested.
type Payload88 struct {
	GitProvider                string `json:"gitProvider"`
	GitProviderGroupDescriptor string `json:"gitProviderGroupDescriptor"`
	GitScope                   string `json:"gitScope"`
}

func (o *Payload88) GetGitProvider() string {
	if o == nil {
		return ""
	}
	return o.GitProvider
}

func (o *Payload88) GetGitProviderGroupDescriptor() string {
	if o == nil {
		return ""
	}
	return o.GitProviderGroupDescriptor
}

func (o *Payload88) GetGitScope() string {
	if o == nil {
		return ""
	}
	return o.GitScope
}

// Payload87 - The payload of the event, if requested.
type Payload87 struct {
	ProjectID           *string  `json:"projectId,omitempty"`
	ProjectName         *string  `json:"projectName,omitempty"`
	NewTargetPercentage *float64 `json:"newTargetPercentage,omitempty"`
}

func (o *Payload87) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Payload87) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *Payload87) GetNewTargetPercentage() *float64 {
	if o == nil {
		return nil
	}
	return o.NewTargetPercentage
}

// Payload86 - The payload of the event, if requested.
type Payload86 struct {
	ProjectID   string `json:"projectId"`
	ProjectName string `json:"projectName"`
}

func (o *Payload86) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload86) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

// Payload85 - The payload of the event, if requested.
type Payload85 struct {
	ProjectID string `json:"projectId"`
}

func (o *Payload85) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UserEventTeam5 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam5) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam5) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type EnvIDOldConnectConfigurationEnum string

const (
	EnvIDOldConnectConfigurationEnumPreview    EnvIDOldConnectConfigurationEnum = "preview"
	EnvIDOldConnectConfigurationEnumProduction EnvIDOldConnectConfigurationEnum = "production"
)

func (e EnvIDOldConnectConfigurationEnum) ToPointer() *EnvIDOldConnectConfigurationEnum {
	return &e
}
func (e *EnvIDOldConnectConfigurationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = EnvIDOldConnectConfigurationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvIDOldConnectConfigurationEnum: %v", v)
	}
}

type OldConnectConfigurationEnvIDUnionType string

const (
	OldConnectConfigurationEnvIDUnionTypeStr                              OldConnectConfigurationEnvIDUnionType = "str"
	OldConnectConfigurationEnvIDUnionTypeEnvIDOldConnectConfigurationEnum OldConnectConfigurationEnvIDUnionType = "envId_oldConnectConfiguration_enum"
)

type OldConnectConfigurationEnvIDUnion struct {
	Str                              *string                           `queryParam:"inline"`
	EnvIDOldConnectConfigurationEnum *EnvIDOldConnectConfigurationEnum `queryParam:"inline"`

	Type OldConnectConfigurationEnvIDUnionType
}

func CreateOldConnectConfigurationEnvIDUnionStr(str string) OldConnectConfigurationEnvIDUnion {
	typ := OldConnectConfigurationEnvIDUnionTypeStr

	return OldConnectConfigurationEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateOldConnectConfigurationEnvIDUnionEnvIDOldConnectConfigurationEnum(envIDOldConnectConfigurationEnum EnvIDOldConnectConfigurationEnum) OldConnectConfigurationEnvIDUnion {
	typ := OldConnectConfigurationEnvIDUnionTypeEnvIDOldConnectConfigurationEnum

	return OldConnectConfigurationEnvIDUnion{
		EnvIDOldConnectConfigurationEnum: &envIDOldConnectConfigurationEnum,
		Type:                             typ,
	}
}

func (u *OldConnectConfigurationEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = OldConnectConfigurationEnvIDUnionTypeStr
		return nil
	}

	var envIDOldConnectConfigurationEnum EnvIDOldConnectConfigurationEnum = EnvIDOldConnectConfigurationEnum("")
	if err := utils.UnmarshalJSON(data, &envIDOldConnectConfigurationEnum, "", true, true); err == nil {
		u.EnvIDOldConnectConfigurationEnum = &envIDOldConnectConfigurationEnum
		u.Type = OldConnectConfigurationEnvIDUnionTypeEnvIDOldConnectConfigurationEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OldConnectConfigurationEnvIDUnion", string(data))
}

func (u OldConnectConfigurationEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.EnvIDOldConnectConfigurationEnum != nil {
		return utils.MarshalJSON(u.EnvIDOldConnectConfigurationEnum, "", true)
	}

	return nil, errors.New("could not marshal union type OldConnectConfigurationEnvIDUnion: all fields are null")
}

type OldConnectConfigurationAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *OldConnectConfigurationAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *OldConnectConfigurationAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type OldConnectConfiguration struct {
	EnvID                  OldConnectConfigurationEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                            `json:"connectConfigurationId"`
	Passive                bool                              `json:"passive"`
	BuildsEnabled          bool                              `json:"buildsEnabled"`
	Aws                    *OldConnectConfigurationAws       `json:"aws,omitempty"`
	CreatedAt              float64                           `json:"createdAt"`
	UpdatedAt              float64                           `json:"updatedAt"`
}

func (o *OldConnectConfiguration) GetEnvID() OldConnectConfigurationEnvIDUnion {
	if o == nil {
		return OldConnectConfigurationEnvIDUnion{}
	}
	return o.EnvID
}

func (o *OldConnectConfiguration) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *OldConnectConfiguration) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *OldConnectConfiguration) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *OldConnectConfiguration) GetAws() *OldConnectConfigurationAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *OldConnectConfiguration) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *OldConnectConfiguration) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type EnvIDNewConnectConfigurationEnum string

const (
	EnvIDNewConnectConfigurationEnumPreview    EnvIDNewConnectConfigurationEnum = "preview"
	EnvIDNewConnectConfigurationEnumProduction EnvIDNewConnectConfigurationEnum = "production"
)

func (e EnvIDNewConnectConfigurationEnum) ToPointer() *EnvIDNewConnectConfigurationEnum {
	return &e
}
func (e *EnvIDNewConnectConfigurationEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = EnvIDNewConnectConfigurationEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvIDNewConnectConfigurationEnum: %v", v)
	}
}

type NewConnectConfigurationEnvIDUnionType string

const (
	NewConnectConfigurationEnvIDUnionTypeStr                              NewConnectConfigurationEnvIDUnionType = "str"
	NewConnectConfigurationEnvIDUnionTypeEnvIDNewConnectConfigurationEnum NewConnectConfigurationEnvIDUnionType = "envId_newConnectConfiguration_enum"
)

type NewConnectConfigurationEnvIDUnion struct {
	Str                              *string                           `queryParam:"inline"`
	EnvIDNewConnectConfigurationEnum *EnvIDNewConnectConfigurationEnum `queryParam:"inline"`

	Type NewConnectConfigurationEnvIDUnionType
}

func CreateNewConnectConfigurationEnvIDUnionStr(str string) NewConnectConfigurationEnvIDUnion {
	typ := NewConnectConfigurationEnvIDUnionTypeStr

	return NewConnectConfigurationEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateNewConnectConfigurationEnvIDUnionEnvIDNewConnectConfigurationEnum(envIDNewConnectConfigurationEnum EnvIDNewConnectConfigurationEnum) NewConnectConfigurationEnvIDUnion {
	typ := NewConnectConfigurationEnvIDUnionTypeEnvIDNewConnectConfigurationEnum

	return NewConnectConfigurationEnvIDUnion{
		EnvIDNewConnectConfigurationEnum: &envIDNewConnectConfigurationEnum,
		Type:                             typ,
	}
}

func (u *NewConnectConfigurationEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = NewConnectConfigurationEnvIDUnionTypeStr
		return nil
	}

	var envIDNewConnectConfigurationEnum EnvIDNewConnectConfigurationEnum = EnvIDNewConnectConfigurationEnum("")
	if err := utils.UnmarshalJSON(data, &envIDNewConnectConfigurationEnum, "", true, true); err == nil {
		u.EnvIDNewConnectConfigurationEnum = &envIDNewConnectConfigurationEnum
		u.Type = NewConnectConfigurationEnvIDUnionTypeEnvIDNewConnectConfigurationEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for NewConnectConfigurationEnvIDUnion", string(data))
}

func (u NewConnectConfigurationEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.EnvIDNewConnectConfigurationEnum != nil {
		return utils.MarshalJSON(u.EnvIDNewConnectConfigurationEnum, "", true)
	}

	return nil, errors.New("could not marshal union type NewConnectConfigurationEnvIDUnion: all fields are null")
}

type NewConnectConfigurationAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *NewConnectConfigurationAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *NewConnectConfigurationAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type NewConnectConfiguration struct {
	EnvID                  NewConnectConfigurationEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                            `json:"connectConfigurationId"`
	Passive                bool                              `json:"passive"`
	BuildsEnabled          bool                              `json:"buildsEnabled"`
	Aws                    *NewConnectConfigurationAws       `json:"aws,omitempty"`
	CreatedAt              float64                           `json:"createdAt"`
	UpdatedAt              float64                           `json:"updatedAt"`
}

func (o *NewConnectConfiguration) GetEnvID() NewConnectConfigurationEnvIDUnion {
	if o == nil {
		return NewConnectConfigurationEnvIDUnion{}
	}
	return o.EnvID
}

func (o *NewConnectConfiguration) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *NewConnectConfiguration) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *NewConnectConfiguration) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *NewConnectConfiguration) GetAws() *NewConnectConfigurationAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *NewConnectConfiguration) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *NewConnectConfiguration) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type Project6 struct {
	ID                       string                    `json:"id"`
	Name                     *string                   `json:"name,omitempty"`
	OldConnectConfigurations []OldConnectConfiguration `json:"oldConnectConfigurations"`
	NewConnectConfigurations []NewConnectConfiguration `json:"newConnectConfigurations"`
}

func (o *Project6) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project6) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Project6) GetOldConnectConfigurations() []OldConnectConfiguration {
	if o == nil {
		return nil
	}
	return o.OldConnectConfigurations
}

func (o *Project6) GetNewConnectConfigurations() []NewConnectConfiguration {
	if o == nil {
		return nil
	}
	return o.NewConnectConfigurations
}

// Payload84 - The payload of the event, if requested.
type Payload84 struct {
	Team    UserEventTeam5 `json:"team"`
	Project Project6       `json:"project"`
}

func (o *Payload84) GetTeam() UserEventTeam5 {
	if o == nil {
		return UserEventTeam5{}
	}
	return o.Team
}

func (o *Payload84) GetProject() Project6 {
	if o == nil {
		return Project6{}
	}
	return o.Project
}

// Payload83 - The payload of the event, if requested.
type Payload83 struct {
	Name    string `json:"name"`
	OwnerID string `json:"ownerId"`
}

func (o *Payload83) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload83) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

type Action3 string

const (
	Action3Enabled     Action3 = "enabled"
	Action3Disabled    Action3 = "disabled"
	Action3Regenerated Action3 = "regenerated"
)

func (e Action3) ToPointer() *Action3 {
	return &e
}
func (e *Action3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "regenerated":
		*e = Action3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action3: %v", v)
	}
}

// Payload82 - The payload of the event, if requested.
type Payload82 struct {
	ProjectName string  `json:"projectName"`
	Action      Action3 `json:"action"`
}

func (o *Payload82) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload82) GetAction() Action3 {
	if o == nil {
		return Action3("")
	}
	return o.Action
}

type OptionsAllowlistPath struct {
	Value string `json:"value"`
}

func (o *OptionsAllowlistPath) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type OptionsAllowlist struct {
	Paths []OptionsAllowlistPath `json:"paths"`
}

func (o *OptionsAllowlist) GetPaths() []OptionsAllowlistPath {
	if o == nil {
		return []OptionsAllowlistPath{}
	}
	return o.Paths
}

type OldOptionsAllowlistPath struct {
	Value string `json:"value"`
}

func (o *OldOptionsAllowlistPath) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type OldOptionsAllowlist struct {
	Paths []OldOptionsAllowlistPath `json:"paths"`
}

func (o *OldOptionsAllowlist) GetPaths() []OldOptionsAllowlistPath {
	if o == nil {
		return []OldOptionsAllowlistPath{}
	}
	return o.Paths
}

// Payload81 - The payload of the event, if requested.
type Payload81 struct {
	ProjectName         string               `json:"projectName"`
	OptionsAllowlist    *OptionsAllowlist    `json:"optionsAllowlist,omitempty"`
	OldOptionsAllowlist *OldOptionsAllowlist `json:"oldOptionsAllowlist,omitempty"`
}

func (o *Payload81) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload81) GetOptionsAllowlist() *OptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *Payload81) GetOldOptionsAllowlist() *OldOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OldOptionsAllowlist
}

type TrustedIps string

const (
	TrustedIpsAll                              TrustedIps = "all"
	TrustedIpsPreview                          TrustedIps = "preview"
	TrustedIpsProdDeploymentUrlsAndAllPreviews TrustedIps = "prod_deployment_urls_and_all_previews"
	TrustedIpsProduction                       TrustedIps = "production"
)

func (e TrustedIps) ToPointer() *TrustedIps {
	return &e
}
func (e *TrustedIps) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = TrustedIps(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustedIps: %v", v)
	}
}

type OldTrustedIps string

const (
	OldTrustedIpsAll                              OldTrustedIps = "all"
	OldTrustedIpsPreview                          OldTrustedIps = "preview"
	OldTrustedIpsProdDeploymentUrlsAndAllPreviews OldTrustedIps = "prod_deployment_urls_and_all_previews"
	OldTrustedIpsProduction                       OldTrustedIps = "production"
)

func (e OldTrustedIps) ToPointer() *OldTrustedIps {
	return &e
}
func (e *OldTrustedIps) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "production":
		*e = OldTrustedIps(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldTrustedIps: %v", v)
	}
}

// Payload80 - The payload of the event, if requested.
type Payload80 struct {
	ProjectName      string         `json:"projectName"`
	TrustedIps       *TrustedIps    `json:"trustedIps,omitempty"`
	OldTrustedIps    *OldTrustedIps `json:"oldTrustedIps,omitempty"`
	AddedAddresses   []string       `json:"addedAddresses,omitempty"`
	RemovedAddresses []string       `json:"removedAddresses,omitempty"`
}

func (o *Payload80) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload80) GetTrustedIps() *TrustedIps {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *Payload80) GetOldTrustedIps() *OldTrustedIps {
	if o == nil {
		return nil
	}
	return o.OldTrustedIps
}

func (o *Payload80) GetAddedAddresses() []string {
	if o == nil {
		return nil
	}
	return o.AddedAddresses
}

func (o *Payload80) GetRemovedAddresses() []string {
	if o == nil {
		return nil
	}
	return o.RemovedAddresses
}

type PasswordProtectionEnum string

const (
	PasswordProtectionEnumAll                              PasswordProtectionEnum = "all"
	PasswordProtectionEnumPreview                          PasswordProtectionEnum = "preview"
	PasswordProtectionEnumProdDeploymentUrlsAndAllPreviews PasswordProtectionEnum = "prod_deployment_urls_and_all_previews"
)

func (e PasswordProtectionEnum) ToPointer() *PasswordProtectionEnum {
	return &e
}
func (e *PasswordProtectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = PasswordProtectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordProtectionEnum: %v", v)
	}
}

type PasswordProtectionDeploymentType string

const (
	PasswordProtectionDeploymentTypeAll                              PasswordProtectionDeploymentType = "all"
	PasswordProtectionDeploymentTypePreview                          PasswordProtectionDeploymentType = "preview"
	PasswordProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews PasswordProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e PasswordProtectionDeploymentType) ToPointer() *PasswordProtectionDeploymentType {
	return &e
}
func (e *PasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = PasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordProtectionDeploymentType: %v", v)
	}
}

type PasswordProtection struct {
	DeploymentType PasswordProtectionDeploymentType `json:"deploymentType"`
}

func (o *PasswordProtection) GetDeploymentType() PasswordProtectionDeploymentType {
	if o == nil {
		return PasswordProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type PasswordProtectionUnionType string

const (
	PasswordProtectionUnionTypePasswordProtection     PasswordProtectionUnionType = "passwordProtection"
	PasswordProtectionUnionTypePasswordProtectionEnum PasswordProtectionUnionType = "passwordProtection_enum"
)

type PasswordProtectionUnion struct {
	PasswordProtection     *PasswordProtection     `queryParam:"inline"`
	PasswordProtectionEnum *PasswordProtectionEnum `queryParam:"inline"`

	Type PasswordProtectionUnionType
}

func CreatePasswordProtectionUnionPasswordProtection(passwordProtection PasswordProtection) PasswordProtectionUnion {
	typ := PasswordProtectionUnionTypePasswordProtection

	return PasswordProtectionUnion{
		PasswordProtection: &passwordProtection,
		Type:               typ,
	}
}

func CreatePasswordProtectionUnionPasswordProtectionEnum(passwordProtectionEnum PasswordProtectionEnum) PasswordProtectionUnion {
	typ := PasswordProtectionUnionTypePasswordProtectionEnum

	return PasswordProtectionUnion{
		PasswordProtectionEnum: &passwordProtectionEnum,
		Type:                   typ,
	}
}

func (u *PasswordProtectionUnion) UnmarshalJSON(data []byte) error {

	var passwordProtection PasswordProtection = PasswordProtection{}
	if err := utils.UnmarshalJSON(data, &passwordProtection, "", true, true); err == nil {
		u.PasswordProtection = &passwordProtection
		u.Type = PasswordProtectionUnionTypePasswordProtection
		return nil
	}

	var passwordProtectionEnum PasswordProtectionEnum = PasswordProtectionEnum("")
	if err := utils.UnmarshalJSON(data, &passwordProtectionEnum, "", true, true); err == nil {
		u.PasswordProtectionEnum = &passwordProtectionEnum
		u.Type = PasswordProtectionUnionTypePasswordProtectionEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PasswordProtectionUnion", string(data))
}

func (u PasswordProtectionUnion) MarshalJSON() ([]byte, error) {
	if u.PasswordProtection != nil {
		return utils.MarshalJSON(u.PasswordProtection, "", true)
	}

	if u.PasswordProtectionEnum != nil {
		return utils.MarshalJSON(u.PasswordProtectionEnum, "", true)
	}

	return nil, errors.New("could not marshal union type PasswordProtectionUnion: all fields are null")
}

type OldPasswordProtectionEnum string

const (
	OldPasswordProtectionEnumAll                              OldPasswordProtectionEnum = "all"
	OldPasswordProtectionEnumPreview                          OldPasswordProtectionEnum = "preview"
	OldPasswordProtectionEnumProdDeploymentUrlsAndAllPreviews OldPasswordProtectionEnum = "prod_deployment_urls_and_all_previews"
)

func (e OldPasswordProtectionEnum) ToPointer() *OldPasswordProtectionEnum {
	return &e
}
func (e *OldPasswordProtectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = OldPasswordProtectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldPasswordProtectionEnum: %v", v)
	}
}

type OldPasswordProtectionDeploymentType string

const (
	OldPasswordProtectionDeploymentTypeAll                              OldPasswordProtectionDeploymentType = "all"
	OldPasswordProtectionDeploymentTypePreview                          OldPasswordProtectionDeploymentType = "preview"
	OldPasswordProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews OldPasswordProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e OldPasswordProtectionDeploymentType) ToPointer() *OldPasswordProtectionDeploymentType {
	return &e
}
func (e *OldPasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = OldPasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldPasswordProtectionDeploymentType: %v", v)
	}
}

type OldPasswordProtection struct {
	DeploymentType OldPasswordProtectionDeploymentType `json:"deploymentType"`
}

func (o *OldPasswordProtection) GetDeploymentType() OldPasswordProtectionDeploymentType {
	if o == nil {
		return OldPasswordProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type OldPasswordProtectionUnionType string

const (
	OldPasswordProtectionUnionTypeOldPasswordProtection     OldPasswordProtectionUnionType = "oldPasswordProtection"
	OldPasswordProtectionUnionTypeOldPasswordProtectionEnum OldPasswordProtectionUnionType = "oldPasswordProtection_enum"
)

type OldPasswordProtectionUnion struct {
	OldPasswordProtection     *OldPasswordProtection     `queryParam:"inline"`
	OldPasswordProtectionEnum *OldPasswordProtectionEnum `queryParam:"inline"`

	Type OldPasswordProtectionUnionType
}

func CreateOldPasswordProtectionUnionOldPasswordProtection(oldPasswordProtection OldPasswordProtection) OldPasswordProtectionUnion {
	typ := OldPasswordProtectionUnionTypeOldPasswordProtection

	return OldPasswordProtectionUnion{
		OldPasswordProtection: &oldPasswordProtection,
		Type:                  typ,
	}
}

func CreateOldPasswordProtectionUnionOldPasswordProtectionEnum(oldPasswordProtectionEnum OldPasswordProtectionEnum) OldPasswordProtectionUnion {
	typ := OldPasswordProtectionUnionTypeOldPasswordProtectionEnum

	return OldPasswordProtectionUnion{
		OldPasswordProtectionEnum: &oldPasswordProtectionEnum,
		Type:                      typ,
	}
}

func (u *OldPasswordProtectionUnion) UnmarshalJSON(data []byte) error {

	var oldPasswordProtection OldPasswordProtection = OldPasswordProtection{}
	if err := utils.UnmarshalJSON(data, &oldPasswordProtection, "", true, true); err == nil {
		u.OldPasswordProtection = &oldPasswordProtection
		u.Type = OldPasswordProtectionUnionTypeOldPasswordProtection
		return nil
	}

	var oldPasswordProtectionEnum OldPasswordProtectionEnum = OldPasswordProtectionEnum("")
	if err := utils.UnmarshalJSON(data, &oldPasswordProtectionEnum, "", true, true); err == nil {
		u.OldPasswordProtectionEnum = &oldPasswordProtectionEnum
		u.Type = OldPasswordProtectionUnionTypeOldPasswordProtectionEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OldPasswordProtectionUnion", string(data))
}

func (u OldPasswordProtectionUnion) MarshalJSON() ([]byte, error) {
	if u.OldPasswordProtection != nil {
		return utils.MarshalJSON(u.OldPasswordProtection, "", true)
	}

	if u.OldPasswordProtectionEnum != nil {
		return utils.MarshalJSON(u.OldPasswordProtectionEnum, "", true)
	}

	return nil, errors.New("could not marshal union type OldPasswordProtectionUnion: all fields are null")
}

// Payload79 - The payload of the event, if requested.
type Payload79 struct {
	ProjectName           string                      `json:"projectName"`
	PasswordProtection    *PasswordProtectionUnion    `json:"passwordProtection"`
	OldPasswordProtection *OldPasswordProtectionUnion `json:"oldPasswordProtection"`
}

func (o *Payload79) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload79) GetPasswordProtection() *PasswordProtectionUnion {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *Payload79) GetOldPasswordProtection() *OldPasswordProtectionUnion {
	if o == nil {
		return nil
	}
	return o.OldPasswordProtection
}

type SsoProtectionEnum string

const (
	SsoProtectionEnumAll                              SsoProtectionEnum = "all"
	SsoProtectionEnumPreview                          SsoProtectionEnum = "preview"
	SsoProtectionEnumProdDeploymentUrlsAndAllPreviews SsoProtectionEnum = "prod_deployment_urls_and_all_previews"
)

func (e SsoProtectionEnum) ToPointer() *SsoProtectionEnum {
	return &e
}
func (e *SsoProtectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = SsoProtectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SsoProtectionEnum: %v", v)
	}
}

type SsoProtectionDeploymentType string

const (
	SsoProtectionDeploymentTypeAll                              SsoProtectionDeploymentType = "all"
	SsoProtectionDeploymentTypePreview                          SsoProtectionDeploymentType = "preview"
	SsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews SsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e SsoProtectionDeploymentType) ToPointer() *SsoProtectionDeploymentType {
	return &e
}
func (e *SsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = SsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SsoProtectionDeploymentType: %v", v)
	}
}

type SsoProtection struct {
	DeploymentType SsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *SsoProtection) GetDeploymentType() SsoProtectionDeploymentType {
	if o == nil {
		return SsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type SsoProtectionUnionType string

const (
	SsoProtectionUnionTypeSsoProtection     SsoProtectionUnionType = "ssoProtection"
	SsoProtectionUnionTypeSsoProtectionEnum SsoProtectionUnionType = "ssoProtection_enum"
)

type SsoProtectionUnion struct {
	SsoProtection     *SsoProtection     `queryParam:"inline"`
	SsoProtectionEnum *SsoProtectionEnum `queryParam:"inline"`

	Type SsoProtectionUnionType
}

func CreateSsoProtectionUnionSsoProtection(ssoProtection SsoProtection) SsoProtectionUnion {
	typ := SsoProtectionUnionTypeSsoProtection

	return SsoProtectionUnion{
		SsoProtection: &ssoProtection,
		Type:          typ,
	}
}

func CreateSsoProtectionUnionSsoProtectionEnum(ssoProtectionEnum SsoProtectionEnum) SsoProtectionUnion {
	typ := SsoProtectionUnionTypeSsoProtectionEnum

	return SsoProtectionUnion{
		SsoProtectionEnum: &ssoProtectionEnum,
		Type:              typ,
	}
}

func (u *SsoProtectionUnion) UnmarshalJSON(data []byte) error {

	var ssoProtection SsoProtection = SsoProtection{}
	if err := utils.UnmarshalJSON(data, &ssoProtection, "", true, true); err == nil {
		u.SsoProtection = &ssoProtection
		u.Type = SsoProtectionUnionTypeSsoProtection
		return nil
	}

	var ssoProtectionEnum SsoProtectionEnum = SsoProtectionEnum("")
	if err := utils.UnmarshalJSON(data, &ssoProtectionEnum, "", true, true); err == nil {
		u.SsoProtectionEnum = &ssoProtectionEnum
		u.Type = SsoProtectionUnionTypeSsoProtectionEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for SsoProtectionUnion", string(data))
}

func (u SsoProtectionUnion) MarshalJSON() ([]byte, error) {
	if u.SsoProtection != nil {
		return utils.MarshalJSON(u.SsoProtection, "", true)
	}

	if u.SsoProtectionEnum != nil {
		return utils.MarshalJSON(u.SsoProtectionEnum, "", true)
	}

	return nil, errors.New("could not marshal union type SsoProtectionUnion: all fields are null")
}

type OldSsoProtectionEnum string

const (
	OldSsoProtectionEnumAll                              OldSsoProtectionEnum = "all"
	OldSsoProtectionEnumPreview                          OldSsoProtectionEnum = "preview"
	OldSsoProtectionEnumProdDeploymentUrlsAndAllPreviews OldSsoProtectionEnum = "prod_deployment_urls_and_all_previews"
)

func (e OldSsoProtectionEnum) ToPointer() *OldSsoProtectionEnum {
	return &e
}
func (e *OldSsoProtectionEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = OldSsoProtectionEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldSsoProtectionEnum: %v", v)
	}
}

type OldSsoProtectionDeploymentType string

const (
	OldSsoProtectionDeploymentTypeAll                              OldSsoProtectionDeploymentType = "all"
	OldSsoProtectionDeploymentTypePreview                          OldSsoProtectionDeploymentType = "preview"
	OldSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews OldSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e OldSsoProtectionDeploymentType) ToPointer() *OldSsoProtectionDeploymentType {
	return &e
}
func (e *OldSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = OldSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldSsoProtectionDeploymentType: %v", v)
	}
}

type OldSsoProtection struct {
	DeploymentType OldSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *OldSsoProtection) GetDeploymentType() OldSsoProtectionDeploymentType {
	if o == nil {
		return OldSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type OldSsoProtectionUnionType string

const (
	OldSsoProtectionUnionTypeOldSsoProtection     OldSsoProtectionUnionType = "oldSsoProtection"
	OldSsoProtectionUnionTypeOldSsoProtectionEnum OldSsoProtectionUnionType = "oldSsoProtection_enum"
)

type OldSsoProtectionUnion struct {
	OldSsoProtection     *OldSsoProtection     `queryParam:"inline"`
	OldSsoProtectionEnum *OldSsoProtectionEnum `queryParam:"inline"`

	Type OldSsoProtectionUnionType
}

func CreateOldSsoProtectionUnionOldSsoProtection(oldSsoProtection OldSsoProtection) OldSsoProtectionUnion {
	typ := OldSsoProtectionUnionTypeOldSsoProtection

	return OldSsoProtectionUnion{
		OldSsoProtection: &oldSsoProtection,
		Type:             typ,
	}
}

func CreateOldSsoProtectionUnionOldSsoProtectionEnum(oldSsoProtectionEnum OldSsoProtectionEnum) OldSsoProtectionUnion {
	typ := OldSsoProtectionUnionTypeOldSsoProtectionEnum

	return OldSsoProtectionUnion{
		OldSsoProtectionEnum: &oldSsoProtectionEnum,
		Type:                 typ,
	}
}

func (u *OldSsoProtectionUnion) UnmarshalJSON(data []byte) error {

	var oldSsoProtection OldSsoProtection = OldSsoProtection{}
	if err := utils.UnmarshalJSON(data, &oldSsoProtection, "", true, true); err == nil {
		u.OldSsoProtection = &oldSsoProtection
		u.Type = OldSsoProtectionUnionTypeOldSsoProtection
		return nil
	}

	var oldSsoProtectionEnum OldSsoProtectionEnum = OldSsoProtectionEnum("")
	if err := utils.UnmarshalJSON(data, &oldSsoProtectionEnum, "", true, true); err == nil {
		u.OldSsoProtectionEnum = &oldSsoProtectionEnum
		u.Type = OldSsoProtectionUnionTypeOldSsoProtectionEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OldSsoProtectionUnion", string(data))
}

func (u OldSsoProtectionUnion) MarshalJSON() ([]byte, error) {
	if u.OldSsoProtection != nil {
		return utils.MarshalJSON(u.OldSsoProtection, "", true)
	}

	if u.OldSsoProtectionEnum != nil {
		return utils.MarshalJSON(u.OldSsoProtectionEnum, "", true)
	}

	return nil, errors.New("could not marshal union type OldSsoProtectionUnion: all fields are null")
}

// Payload78 - The payload of the event, if requested.
type Payload78 struct {
	ProjectName      string                 `json:"projectName"`
	SsoProtection    *SsoProtectionUnion    `json:"ssoProtection"`
	OldSsoProtection *OldSsoProtectionUnion `json:"oldSsoProtection"`
}

func (o *Payload78) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload78) GetSsoProtection() *SsoProtectionUnion {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *Payload78) GetOldSsoProtection() *OldSsoProtectionUnion {
	if o == nil {
		return nil
	}
	return o.OldSsoProtection
}

// Payload77 - The payload of the event, if requested.
type Payload77 struct {
	ProjectName *string `json:"projectName,omitempty"`
	ProjectID   string  `json:"projectId"`
}

func (o *Payload77) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *Payload77) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// Payload76 - The payload of the event, if requested.
type Payload76 struct {
	ProjectName          *string        `json:"projectName,omitempty"`
	ProjectID            string         `json:"projectId"`
	ProjectAnalytics     map[string]any `json:"projectAnalytics,omitempty"`
	PrevProjectAnalytics map[string]any `json:"prevProjectAnalytics,omitempty"`
}

func (o *Payload76) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *Payload76) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload76) GetProjectAnalytics() map[string]any {
	if o == nil {
		return nil
	}
	return o.ProjectAnalytics
}

func (o *Payload76) GetPrevProjectAnalytics() map[string]any {
	if o == nil {
		return nil
	}
	return o.PrevProjectAnalytics
}

type ProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *ProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *ProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *ProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *ProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *ProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *ProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type PrevProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *PrevProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PrevProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *PrevProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *PrevProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *PrevProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *PrevProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *PrevProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

// Payload75 - The payload of the event, if requested.
type Payload75 struct {
	ProjectName          *string               `json:"projectName,omitempty"`
	ProjectID            string                `json:"projectId"`
	ProjectAnalytics     *ProjectAnalytics     `json:"projectAnalytics"`
	PrevProjectAnalytics *PrevProjectAnalytics `json:"prevProjectAnalytics"`
}

func (o *Payload75) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *Payload75) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload75) GetProjectAnalytics() *ProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.ProjectAnalytics
}

func (o *Payload75) GetPrevProjectAnalytics() *PrevProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.PrevProjectAnalytics
}

type RemovedUsersRole string

const (
	RemovedUsersRoleOwner       RemovedUsersRole = "OWNER"
	RemovedUsersRoleMember      RemovedUsersRole = "MEMBER"
	RemovedUsersRoleDeveloper   RemovedUsersRole = "DEVELOPER"
	RemovedUsersRoleSecurity    RemovedUsersRole = "SECURITY"
	RemovedUsersRoleBilling     RemovedUsersRole = "BILLING"
	RemovedUsersRoleViewer      RemovedUsersRole = "VIEWER"
	RemovedUsersRoleContributor RemovedUsersRole = "CONTRIBUTOR"
)

func (e RemovedUsersRole) ToPointer() *RemovedUsersRole {
	return &e
}
func (e *RemovedUsersRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = RemovedUsersRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemovedUsersRole: %v", v)
	}
}

type RemovedUsersOrigin string

const (
	RemovedUsersOriginTeams             RemovedUsersOrigin = "teams"
	RemovedUsersOriginSaml              RemovedUsersOrigin = "saml"
	RemovedUsersOriginGithub            RemovedUsersOrigin = "github"
	RemovedUsersOriginGitlab            RemovedUsersOrigin = "gitlab"
	RemovedUsersOriginBitbucket         RemovedUsersOrigin = "bitbucket"
	RemovedUsersOriginMail              RemovedUsersOrigin = "mail"
	RemovedUsersOriginLink              RemovedUsersOrigin = "link"
	RemovedUsersOriginImport            RemovedUsersOrigin = "import"
	RemovedUsersOriginDsync             RemovedUsersOrigin = "dsync"
	RemovedUsersOriginFeedback          RemovedUsersOrigin = "feedback"
	RemovedUsersOriginOrganizationTeams RemovedUsersOrigin = "organization-teams"
)

func (e RemovedUsersOrigin) ToPointer() *RemovedUsersOrigin {
	return &e
}
func (e *RemovedUsersOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "teams":
		fallthrough
	case "saml":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "mail":
		fallthrough
	case "link":
		fallthrough
	case "import":
		fallthrough
	case "dsync":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = RemovedUsersOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemovedUsersOrigin: %v", v)
	}
}

type RemovedUsersGitUserIDType string

const (
	RemovedUsersGitUserIDTypeStr    RemovedUsersGitUserIDType = "str"
	RemovedUsersGitUserIDTypeNumber RemovedUsersGitUserIDType = "number"
)

type RemovedUsersGitUserID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type RemovedUsersGitUserIDType
}

func CreateRemovedUsersGitUserIDStr(str string) RemovedUsersGitUserID {
	typ := RemovedUsersGitUserIDTypeStr

	return RemovedUsersGitUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateRemovedUsersGitUserIDNumber(number float64) RemovedUsersGitUserID {
	typ := RemovedUsersGitUserIDTypeNumber

	return RemovedUsersGitUserID{
		Number: &number,
		Type:   typ,
	}
}

func (u *RemovedUsersGitUserID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RemovedUsersGitUserIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = RemovedUsersGitUserIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemovedUsersGitUserID", string(data))
}

func (u RemovedUsersGitUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type RemovedUsersGitUserID: all fields are null")
}

type RemovedUsersJoinedFrom struct {
	Origin           RemovedUsersOrigin     `json:"origin"`
	CommitID         *string                `json:"commitId,omitempty"`
	RepoID           *string                `json:"repoId,omitempty"`
	RepoPath         *string                `json:"repoPath,omitempty"`
	GitUserID        *RemovedUsersGitUserID `json:"gitUserId,omitempty"`
	GitUserLogin     *string                `json:"gitUserLogin,omitempty"`
	SsoUserID        *string                `json:"ssoUserId,omitempty"`
	SsoConnectedAt   *float64               `json:"ssoConnectedAt,omitempty"`
	IdpUserID        *string                `json:"idpUserId,omitempty"`
	DsyncUserID      *string                `json:"dsyncUserId,omitempty"`
	DsyncConnectedAt *float64               `json:"dsyncConnectedAt,omitempty"`
}

func (o *RemovedUsersJoinedFrom) GetOrigin() RemovedUsersOrigin {
	if o == nil {
		return RemovedUsersOrigin("")
	}
	return o.Origin
}

func (o *RemovedUsersJoinedFrom) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *RemovedUsersJoinedFrom) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *RemovedUsersJoinedFrom) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *RemovedUsersJoinedFrom) GetGitUserID() *RemovedUsersGitUserID {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *RemovedUsersJoinedFrom) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

func (o *RemovedUsersJoinedFrom) GetSsoUserID() *string {
	if o == nil {
		return nil
	}
	return o.SsoUserID
}

func (o *RemovedUsersJoinedFrom) GetSsoConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SsoConnectedAt
}

func (o *RemovedUsersJoinedFrom) GetIdpUserID() *string {
	if o == nil {
		return nil
	}
	return o.IdpUserID
}

func (o *RemovedUsersJoinedFrom) GetDsyncUserID() *string {
	if o == nil {
		return nil
	}
	return o.DsyncUserID
}

func (o *RemovedUsersJoinedFrom) GetDsyncConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DsyncConnectedAt
}

type RemovedUsers struct {
	Role        RemovedUsersRole        `json:"role"`
	Confirmed   bool                    `json:"confirmed"`
	ConfirmedAt *float64                `json:"confirmedAt,omitempty"`
	JoinedFrom  *RemovedUsersJoinedFrom `json:"joinedFrom,omitempty"`
}

func (o *RemovedUsers) GetRole() RemovedUsersRole {
	if o == nil {
		return RemovedUsersRole("")
	}
	return o.Role
}

func (o *RemovedUsers) GetConfirmed() bool {
	if o == nil {
		return false
	}
	return o.Confirmed
}

func (o *RemovedUsers) GetConfirmedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ConfirmedAt
}

func (o *RemovedUsers) GetJoinedFrom() *RemovedUsersJoinedFrom {
	if o == nil {
		return nil
	}
	return o.JoinedFrom
}

// Payload74 - The payload of the event, if requested.
type Payload74 struct {
	Plan           string                  `json:"plan"`
	RemovedUsers   map[string]RemovedUsers `json:"removedUsers,omitempty"`
	PriorPlan      *string                 `json:"priorPlan,omitempty"`
	IsDowngrade    *bool                   `json:"isDowngrade,omitempty"`
	UserAgent      *string                 `json:"userAgent,omitempty"`
	IsReactivate   *bool                   `json:"isReactivate,omitempty"`
	IsTrialUpgrade *bool                   `json:"isTrialUpgrade,omitempty"`
}

func (o *Payload74) GetPlan() string {
	if o == nil {
		return ""
	}
	return o.Plan
}

func (o *Payload74) GetRemovedUsers() map[string]RemovedUsers {
	if o == nil {
		return nil
	}
	return o.RemovedUsers
}

func (o *Payload74) GetPriorPlan() *string {
	if o == nil {
		return nil
	}
	return o.PriorPlan
}

func (o *Payload74) GetIsDowngrade() *bool {
	if o == nil {
		return nil
	}
	return o.IsDowngrade
}

func (o *Payload74) GetUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *Payload74) GetIsReactivate() *bool {
	if o == nil {
		return nil
	}
	return o.IsReactivate
}

func (o *Payload74) GetIsTrialUpgrade() *bool {
	if o == nil {
		return nil
	}
	return o.IsTrialUpgrade
}

// Payload73 - The payload of the event, if requested.
type Payload73 struct {
	ProjectName string `json:"projectName"`
}

func (o *Payload73) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

// Payload72 - The payload of the event, if requested.
type Payload72 struct {
	ProjectID      string `json:"projectId"`
	ToDeploymentID string `json:"toDeploymentId"`
	ProjectName    string `json:"projectName"`
}

func (o *Payload72) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload72) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *Payload72) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

// Payload71 - The payload of the event, if requested.
type Payload71 struct {
	DrainURL        *string `json:"drainUrl"`
	IntegrationName *string `json:"integrationName,omitempty"`
}

func (o *Payload71) GetDrainURL() *string {
	if o == nil {
		return nil
	}
	return o.DrainURL
}

func (o *Payload71) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

// Payload70 - The payload of the event, if requested.
type Payload70 struct {
	LogDrainURL     string  `json:"logDrainUrl"`
	IntegrationName *string `json:"integrationName,omitempty"`
}

func (o *Payload70) GetLogDrainURL() string {
	if o == nil {
		return ""
	}
	return o.LogDrainURL
}

func (o *Payload70) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

// Payload69 - The payload of the event, if requested.
type Payload69 struct {
	LogDrainURL     *string `json:"logDrainUrl"`
	IntegrationName *string `json:"integrationName,omitempty"`
}

func (o *Payload69) GetLogDrainURL() *string {
	if o == nil {
		return nil
	}
	return o.LogDrainURL
}

func (o *Payload69) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

type BrowserName string

const (
	BrowserNameIphone  BrowserName = "iphone"
	BrowserNameIpad    BrowserName = "ipad"
	BrowserNameIpod    BrowserName = "ipod"
	BrowserNameChrome  BrowserName = "chrome"
	BrowserNameFirefox BrowserName = "firefox"
	BrowserNameMozilla BrowserName = "mozilla"
	BrowserNameUnknown BrowserName = "unknown"
)

func (e BrowserName) ToPointer() *BrowserName {
	return &e
}
func (e *BrowserName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "iphone":
		fallthrough
	case "ipad":
		fallthrough
	case "ipod":
		fallthrough
	case "chrome":
		fallthrough
	case "firefox":
		fallthrough
	case "mozilla":
		fallthrough
	case "unknown":
		*e = BrowserName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BrowserName: %v", v)
	}
}

type Browser struct {
	Name BrowserName `json:"name"`
}

func (o *Browser) GetName() BrowserName {
	if o == nil {
		return BrowserName("")
	}
	return o.Name
}

type OsName string

const (
	OsNameUnknown OsName = "unknown"
	OsNameDarwin  OsName = "darwin"
	OsNameWin32   OsName = "win32"
	OsNameWin     OsName = "win"
	OsNameWindows OsName = "windows"
	OsNameLinux   OsName = "linux"
	OsNameFreebsd OsName = "freebsd"
	OsNameSunos   OsName = "sunos"
	OsNameMac     OsName = "mac"
	OsNameIos     OsName = "ios"
	OsNameAndroid OsName = "android"
	OsNameMacOs   OsName = "Mac OS"
	OsNameOsX     OsName = "OS X"
)

func (e OsName) ToPointer() *OsName {
	return &e
}
func (e *OsName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unknown":
		fallthrough
	case "darwin":
		fallthrough
	case "win32":
		fallthrough
	case "win":
		fallthrough
	case "windows":
		fallthrough
	case "linux":
		fallthrough
	case "freebsd":
		fallthrough
	case "sunos":
		fallthrough
	case "mac":
		fallthrough
	case "ios":
		fallthrough
	case "android":
		fallthrough
	case "Mac OS":
		fallthrough
	case "OS X":
		*e = OsName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OsName: %v", v)
	}
}

type Os struct {
	Name OsName `json:"name"`
}

func (o *Os) GetName() OsName {
	if o == nil {
		return OsName("")
	}
	return o.Name
}

type UserAgent struct {
	Browser Browser `json:"browser"`
	Ua      string  `json:"ua"`
	Program string  `json:"program"`
	Os      Os      `json:"os"`
}

func (o *UserAgent) GetBrowser() Browser {
	if o == nil {
		return Browser{}
	}
	return o.Browser
}

func (o *UserAgent) GetUa() string {
	if o == nil {
		return ""
	}
	return o.Ua
}

func (o *UserAgent) GetProgram() string {
	if o == nil {
		return ""
	}
	return o.Program
}

func (o *UserAgent) GetOs() Os {
	if o == nil {
		return Os{}
	}
	return o.Os
}

type CityNames struct {
	En string `json:"en"`
}

func (o *CityNames) GetEn() string {
	if o == nil {
		return ""
	}
	return o.En
}

type City struct {
	Names CityNames `json:"names"`
}

func (o *City) GetNames() CityNames {
	if o == nil {
		return CityNames{}
	}
	return o.Names
}

type CountryNames struct {
	En string `json:"en"`
}

func (o *CountryNames) GetEn() string {
	if o == nil {
		return ""
	}
	return o.En
}

type Country struct {
	Names CountryNames `json:"names"`
}

func (o *Country) GetNames() CountryNames {
	if o == nil {
		return CountryNames{}
	}
	return o.Names
}

type MostSpecificSubdivisionNames struct {
	En string `json:"en"`
}

func (o *MostSpecificSubdivisionNames) GetEn() string {
	if o == nil {
		return ""
	}
	return o.En
}

type MostSpecificSubdivision struct {
	Names MostSpecificSubdivisionNames `json:"names"`
}

func (o *MostSpecificSubdivision) GetNames() MostSpecificSubdivisionNames {
	if o == nil {
		return MostSpecificSubdivisionNames{}
	}
	return o.Names
}

type Geolocation struct {
	City                    *City                    `json:"city,omitempty"`
	Country                 Country                  `json:"country"`
	MostSpecificSubdivision *MostSpecificSubdivision `json:"most_specific_subdivision,omitempty"`
	RegionName              *string                  `json:"regionName,omitempty"`
}

func (o *Geolocation) GetCity() *City {
	if o == nil {
		return nil
	}
	return o.City
}

func (o *Geolocation) GetCountry() Country {
	if o == nil {
		return Country{}
	}
	return o.Country
}

func (o *Geolocation) GetMostSpecificSubdivision() *MostSpecificSubdivision {
	if o == nil {
		return nil
	}
	return o.MostSpecificSubdivision
}

func (o *Geolocation) GetRegionName() *string {
	if o == nil {
		return nil
	}
	return o.RegionName
}

// Payload68 - The payload of the event, if requested.
type Payload68 struct {
	UserAgent    *UserAgent   `json:"userAgent,omitempty"`
	Geolocation  *Geolocation `json:"geolocation,omitempty"`
	ViaGithub    bool         `json:"viaGithub"`
	ViaGitlab    bool         `json:"viaGitlab"`
	ViaBitbucket bool         `json:"viaBitbucket"`
	ViaGoogle    bool         `json:"viaGoogle"`
	ViaSamlSso   bool         `json:"viaSamlSso"`
	ViaPasskey   bool         `json:"viaPasskey"`
	SsoType      *string      `json:"ssoType,omitempty"`
	Env          *string      `json:"env,omitempty"`
	Os           *string      `json:"os,omitempty"`
	Username     *string      `json:"username,omitempty"`
}

func (o *Payload68) GetUserAgent() *UserAgent {
	if o == nil {
		return nil
	}
	return o.UserAgent
}

func (o *Payload68) GetGeolocation() *Geolocation {
	if o == nil {
		return nil
	}
	return o.Geolocation
}

func (o *Payload68) GetViaGithub() bool {
	if o == nil {
		return false
	}
	return o.ViaGithub
}

func (o *Payload68) GetViaGitlab() bool {
	if o == nil {
		return false
	}
	return o.ViaGitlab
}

func (o *Payload68) GetViaBitbucket() bool {
	if o == nil {
		return false
	}
	return o.ViaBitbucket
}

func (o *Payload68) GetViaGoogle() bool {
	if o == nil {
		return false
	}
	return o.ViaGoogle
}

func (o *Payload68) GetViaSamlSso() bool {
	if o == nil {
		return false
	}
	return o.ViaSamlSso
}

func (o *Payload68) GetViaPasskey() bool {
	if o == nil {
		return false
	}
	return o.ViaPasskey
}

func (o *Payload68) GetSsoType() *string {
	if o == nil {
		return nil
	}
	return o.SsoType
}

func (o *Payload68) GetEnv() *string {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *Payload68) GetOs() *string {
	if o == nil {
		return nil
	}
	return o.Os
}

func (o *Payload68) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Payload67 - The payload of the event, if requested.
type Payload67 struct {
	IntegrationID   string   `json:"integrationId"`
	ConfigurationID string   `json:"configurationId"`
	IntegrationSlug string   `json:"integrationSlug"`
	IntegrationName string   `json:"integrationName"`
	OwnerID         string   `json:"ownerId"`
	ProjectIds      []string `json:"projectIds,omitempty"`
	ConfirmedScopes []string `json:"confirmedScopes"`
}

func (o *Payload67) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Payload67) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

func (o *Payload67) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *Payload67) GetIntegrationName() string {
	if o == nil {
		return ""
	}
	return o.IntegrationName
}

func (o *Payload67) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Payload67) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *Payload67) GetConfirmedScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.ConfirmedScopes
}

// Payload66 - The payload of the event, if requested.
type Payload66 struct {
	ProjectID        string  `json:"projectId"`
	FromDeploymentID string  `json:"fromDeploymentId"`
	ToDeploymentID   string  `json:"toDeploymentId"`
	ProjectName      string  `json:"projectName"`
	Reason           *string `json:"reason,omitempty"`
}

func (o *Payload66) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload66) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *Payload66) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *Payload66) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload66) GetReason() *string {
	if o == nil {
		return nil
	}
	return o.Reason
}

// Payload65 - The payload of the event, if requested.
type Payload65 struct {
	IntegrationID   string   `json:"integrationId"`
	ConfigurationID string   `json:"configurationId"`
	IntegrationSlug string   `json:"integrationSlug"`
	IntegrationName string   `json:"integrationName"`
	OwnerID         string   `json:"ownerId"`
	ProjectIds      []string `json:"projectIds,omitempty"`
}

func (o *Payload65) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Payload65) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

func (o *Payload65) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *Payload65) GetIntegrationName() string {
	if o == nil {
		return ""
	}
	return o.IntegrationName
}

func (o *Payload65) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Payload65) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

// Payload64 - The payload of the event, if requested.
type Payload64 struct {
	IntegrationID   string  `json:"integrationId"`
	ConfigurationID string  `json:"configurationId"`
	IntegrationSlug string  `json:"integrationSlug"`
	IntegrationName string  `json:"integrationName"`
	OwnerID         string  `json:"ownerId"`
	BillingPlanID   string  `json:"billingPlanId"`
	BillingPlanName *string `json:"billingPlanName,omitempty"`
}

func (o *Payload64) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Payload64) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

func (o *Payload64) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *Payload64) GetIntegrationName() string {
	if o == nil {
		return ""
	}
	return o.IntegrationName
}

func (o *Payload64) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Payload64) GetBillingPlanID() string {
	if o == nil {
		return ""
	}
	return o.BillingPlanID
}

func (o *Payload64) GetBillingPlanName() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanName
}

type Configuration5 struct {
	IntegrationID   string  `json:"integrationId"`
	ConfigurationID string  `json:"configurationId"`
	IntegrationSlug string  `json:"integrationSlug"`
	IntegrationName *string `json:"integrationName,omitempty"`
}

func (o *Configuration5) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Configuration5) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

func (o *Configuration5) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *Configuration5) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

// Payload63 - The payload of the event, if requested.
type Payload63 struct {
	Configurations []Configuration5 `json:"configurations"`
	OwnerID        string           `json:"ownerId"`
}

func (o *Payload63) GetConfigurations() []Configuration5 {
	if o == nil {
		return []Configuration5{}
	}
	return o.Configurations
}

func (o *Payload63) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

type BlockHistoryAction string

const (
	BlockHistoryActionHardBlocked BlockHistoryAction = "hard-blocked"
	BlockHistoryActionSoftBlocked BlockHistoryAction = "soft-blocked"
	BlockHistoryActionUnblocked   BlockHistoryAction = "unblocked"
)

func (e BlockHistoryAction) ToPointer() *BlockHistoryAction {
	return &e
}
func (e *BlockHistoryAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "hard-blocked":
		fallthrough
	case "soft-blocked":
		fallthrough
	case "unblocked":
		*e = BlockHistoryAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BlockHistoryAction: %v", v)
	}
}

// BlockHistory - Since June 2023
type BlockHistory struct {
	Action     BlockHistoryAction `json:"action"`
	CreatedAt  float64            `json:"createdAt"`
	CaseID     *string            `json:"caseId,omitempty"`
	Reason     string             `json:"reason"`
	Actor      *string            `json:"actor,omitempty"`
	StatusCode *float64           `json:"statusCode,omitempty"`
	Comment    *string            `json:"comment,omitempty"`
}

func (o *BlockHistory) GetAction() BlockHistoryAction {
	if o == nil {
		return BlockHistoryAction("")
	}
	return o.Action
}

func (o *BlockHistory) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *BlockHistory) GetCaseID() *string {
	if o == nil {
		return nil
	}
	return o.CaseID
}

func (o *BlockHistory) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *BlockHistory) GetActor() *string {
	if o == nil {
		return nil
	}
	return o.Actor
}

func (o *BlockHistory) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *BlockHistory) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// History - (scanner history). Since November 2021. First element is newest.
type History struct {
	Scanner string  `json:"scanner"`
	Reason  string  `json:"reason"`
	By      string  `json:"by"`
	ByID    string  `json:"byId"`
	At      float64 `json:"at"`
}

func (o *History) GetScanner() string {
	if o == nil {
		return ""
	}
	return o.Scanner
}

func (o *History) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *History) GetBy() string {
	if o == nil {
		return ""
	}
	return o.By
}

func (o *History) GetByID() string {
	if o == nil {
		return ""
	}
	return o.ByID
}

func (o *History) GetAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.At
}

type Abuse struct {
	// Since June 2023
	BlockHistory []BlockHistory `json:"blockHistory,omitempty"`
	// Since March 2022. Helps abuse checks by tracking git auths. Format: `<platform>:<detail>:<value>`
	GitAuthHistory []string `json:"gitAuthHistory,omitempty"`
	// (scanner history). Since November 2021. First element is newest.
	History []History `json:"history,omitempty"`
	// Since September 2023. How often did this owner trigger an actual git lineage deploy block?
	GitLineageBlocks *float64 `json:"gitLineageBlocks,omitempty"`
	// Since September 2023. How often did this owner trigger a git lineage deploy block dry run?
	GitLineageBlocksDry *float64 `json:"gitLineageBlocksDry,omitempty"`
	// Since November 2021. Guides the abuse scanner in build container.
	Scanner *string `json:"scanner,omitempty"`
	// Since November 2021
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreationUserAgent   *string  `json:"creationUserAgent,omitempty"`
	CreationIP          *string  `json:"creationIp,omitempty"`
	RemovedPhoneNumbers *string  `json:"removedPhoneNumbers,omitempty"`
}

func (o *Abuse) GetBlockHistory() []BlockHistory {
	if o == nil {
		return nil
	}
	return o.BlockHistory
}

func (o *Abuse) GetGitAuthHistory() []string {
	if o == nil {
		return nil
	}
	return o.GitAuthHistory
}

func (o *Abuse) GetHistory() []History {
	if o == nil {
		return nil
	}
	return o.History
}

func (o *Abuse) GetGitLineageBlocks() *float64 {
	if o == nil {
		return nil
	}
	return o.GitLineageBlocks
}

func (o *Abuse) GetGitLineageBlocksDry() *float64 {
	if o == nil {
		return nil
	}
	return o.GitLineageBlocksDry
}

func (o *Abuse) GetScanner() *string {
	if o == nil {
		return nil
	}
	return o.Scanner
}

func (o *Abuse) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Abuse) GetCreationUserAgent() *string {
	if o == nil {
		return nil
	}
	return o.CreationUserAgent
}

func (o *Abuse) GetCreationIP() *string {
	if o == nil {
		return nil
	}
	return o.CreationIP
}

func (o *Abuse) GetRemovedPhoneNumbers() *string {
	if o == nil {
		return nil
	}
	return o.RemovedPhoneNumbers
}

type Plan string

const (
	PlanPro        Plan = "pro"
	PlanEnterprise Plan = "enterprise"
	PlanHobby      Plan = "hobby"
)

func (e Plan) ToPointer() *Plan {
	return &e
}
func (e *Plan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = Plan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Plan: %v", v)
	}
}

type UserEventBilling struct {
	Plan Plan `json:"plan"`
}

func (o *UserEventBilling) GetPlan() Plan {
	if o == nil {
		return Plan("")
	}
	return o.Plan
}

type CredentialType2 string

const (
	CredentialType2GithubOauthCustomHost CredentialType2 = "github-oauth-custom-host"
	CredentialType2GithubAppCustomHost   CredentialType2 = "github-app-custom-host"
)

func (e CredentialType2) ToPointer() *CredentialType2 {
	return &e
}
func (e *CredentialType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-oauth-custom-host":
		fallthrough
	case "github-app-custom-host":
		*e = CredentialType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CredentialType2: %v", v)
	}
}

type Credential2 struct {
	Type CredentialType2 `json:"type"`
	Host string          `json:"host"`
	ID   string          `json:"id"`
}

func (o *Credential2) GetType() CredentialType2 {
	if o == nil {
		return CredentialType2("")
	}
	return o.Type
}

func (o *Credential2) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Credential2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CredentialType1 string

const (
	CredentialType1Gitlab      CredentialType1 = "gitlab"
	CredentialType1Bitbucket   CredentialType1 = "bitbucket"
	CredentialType1Google      CredentialType1 = "google"
	CredentialType1GithubOauth CredentialType1 = "github-oauth"
	CredentialType1GithubApp   CredentialType1 = "github-app"
)

func (e CredentialType1) ToPointer() *CredentialType1 {
	return &e
}
func (e *CredentialType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "google":
		fallthrough
	case "github-oauth":
		fallthrough
	case "github-app":
		*e = CredentialType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CredentialType1: %v", v)
	}
}

type Credential1 struct {
	Type CredentialType1 `json:"type"`
	ID   string          `json:"id"`
}

func (o *Credential1) GetType() CredentialType1 {
	if o == nil {
		return CredentialType1("")
	}
	return o.Type
}

func (o *Credential1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CredentialUnionType string

const (
	CredentialUnionTypeCredential1 CredentialUnionType = "credential_1"
	CredentialUnionTypeCredential2 CredentialUnionType = "credential_2"
)

type CredentialUnion struct {
	Credential1 *Credential1 `queryParam:"inline"`
	Credential2 *Credential2 `queryParam:"inline"`

	Type CredentialUnionType
}

func CreateCredentialUnionCredential1(credential1 Credential1) CredentialUnion {
	typ := CredentialUnionTypeCredential1

	return CredentialUnion{
		Credential1: &credential1,
		Type:        typ,
	}
}

func CreateCredentialUnionCredential2(credential2 Credential2) CredentialUnion {
	typ := CredentialUnionTypeCredential2

	return CredentialUnion{
		Credential2: &credential2,
		Type:        typ,
	}
}

func (u *CredentialUnion) UnmarshalJSON(data []byte) error {

	var credential1 Credential1 = Credential1{}
	if err := utils.UnmarshalJSON(data, &credential1, "", true, true); err == nil {
		u.Credential1 = &credential1
		u.Type = CredentialUnionTypeCredential1
		return nil
	}

	var credential2 Credential2 = Credential2{}
	if err := utils.UnmarshalJSON(data, &credential2, "", true, true); err == nil {
		u.Credential2 = &credential2
		u.Type = CredentialUnionTypeCredential2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CredentialUnion", string(data))
}

func (u CredentialUnion) MarshalJSON() ([]byte, error) {
	if u.Credential1 != nil {
		return utils.MarshalJSON(u.Credential1, "", true)
	}

	if u.Credential2 != nil {
		return utils.MarshalJSON(u.Credential2, "", true)
	}

	return nil, errors.New("could not marshal union type CredentialUnion: all fields are null")
}

type UserEventDataCache struct {
	ExcessBillingEnabled *bool `json:"excessBillingEnabled,omitempty"`
}

func (o *UserEventDataCache) GetExcessBillingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ExcessBillingEnabled
}

type UserEventDismissal struct {
	ScopeID   string  `json:"scopeId"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *UserEventDismissal) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *UserEventDismissal) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

type UserEventDismissedToast struct {
	Name       string               `json:"name"`
	Dismissals []UserEventDismissal `json:"dismissals"`
}

func (o *UserEventDismissedToast) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UserEventDismissedToast) GetDismissals() []UserEventDismissal {
	if o == nil {
		return []UserEventDismissal{}
	}
	return o.Dismissals
}

type UserEventFavoriteProjectsAndSpace struct {
	TeamID    string `json:"teamId"`
	ProjectID string `json:"projectId"`
}

func (o *UserEventFavoriteProjectsAndSpace) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *UserEventFavoriteProjectsAndSpace) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UserEventImportFlowGitNamespaceType string

const (
	UserEventImportFlowGitNamespaceTypeStr    UserEventImportFlowGitNamespaceType = "str"
	UserEventImportFlowGitNamespaceTypeNumber UserEventImportFlowGitNamespaceType = "number"
)

type UserEventImportFlowGitNamespace struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type UserEventImportFlowGitNamespaceType
}

func CreateUserEventImportFlowGitNamespaceStr(str string) UserEventImportFlowGitNamespace {
	typ := UserEventImportFlowGitNamespaceTypeStr

	return UserEventImportFlowGitNamespace{
		Str:  &str,
		Type: typ,
	}
}

func CreateUserEventImportFlowGitNamespaceNumber(number float64) UserEventImportFlowGitNamespace {
	typ := UserEventImportFlowGitNamespaceTypeNumber

	return UserEventImportFlowGitNamespace{
		Number: &number,
		Type:   typ,
	}
}

func (u *UserEventImportFlowGitNamespace) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UserEventImportFlowGitNamespaceTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UserEventImportFlowGitNamespaceTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UserEventImportFlowGitNamespace", string(data))
}

func (u UserEventImportFlowGitNamespace) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UserEventImportFlowGitNamespace: all fields are null")
}

type UserEventImportFlowGitNamespaceIDType string

const (
	UserEventImportFlowGitNamespaceIDTypeStr    UserEventImportFlowGitNamespaceIDType = "str"
	UserEventImportFlowGitNamespaceIDTypeNumber UserEventImportFlowGitNamespaceIDType = "number"
)

type UserEventImportFlowGitNamespaceID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type UserEventImportFlowGitNamespaceIDType
}

func CreateUserEventImportFlowGitNamespaceIDStr(str string) UserEventImportFlowGitNamespaceID {
	typ := UserEventImportFlowGitNamespaceIDTypeStr

	return UserEventImportFlowGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateUserEventImportFlowGitNamespaceIDNumber(number float64) UserEventImportFlowGitNamespaceID {
	typ := UserEventImportFlowGitNamespaceIDTypeNumber

	return UserEventImportFlowGitNamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *UserEventImportFlowGitNamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UserEventImportFlowGitNamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UserEventImportFlowGitNamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UserEventImportFlowGitNamespaceID", string(data))
}

func (u UserEventImportFlowGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UserEventImportFlowGitNamespaceID: all fields are null")
}

type UserEventImportFlowGitProvider string

const (
	UserEventImportFlowGitProviderGithub           UserEventImportFlowGitProvider = "github"
	UserEventImportFlowGitProviderGitlab           UserEventImportFlowGitProvider = "gitlab"
	UserEventImportFlowGitProviderBitbucket        UserEventImportFlowGitProvider = "bitbucket"
	UserEventImportFlowGitProviderGithubCustomHost UserEventImportFlowGitProvider = "github-custom-host"
)

func (e UserEventImportFlowGitProvider) ToPointer() *UserEventImportFlowGitProvider {
	return &e
}
func (e *UserEventImportFlowGitProvider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "github-custom-host":
		*e = UserEventImportFlowGitProvider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventImportFlowGitProvider: %v", v)
	}
}

type UserEventGitNamespaceIDType string

const (
	UserEventGitNamespaceIDTypeStr    UserEventGitNamespaceIDType = "str"
	UserEventGitNamespaceIDTypeNumber UserEventGitNamespaceIDType = "number"
)

type UserEventGitNamespaceID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type UserEventGitNamespaceIDType
}

func CreateUserEventGitNamespaceIDStr(str string) UserEventGitNamespaceID {
	typ := UserEventGitNamespaceIDTypeStr

	return UserEventGitNamespaceID{
		Str:  &str,
		Type: typ,
	}
}

func CreateUserEventGitNamespaceIDNumber(number float64) UserEventGitNamespaceID {
	typ := UserEventGitNamespaceIDTypeNumber

	return UserEventGitNamespaceID{
		Number: &number,
		Type:   typ,
	}
}

func (u *UserEventGitNamespaceID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UserEventGitNamespaceIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UserEventGitNamespaceIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UserEventGitNamespaceID", string(data))
}

func (u UserEventGitNamespaceID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UserEventGitNamespaceID: all fields are null")
}

type UserEventPreferredScopesAndGitNamespace struct {
	ScopeID        string                   `json:"scopeId"`
	GitNamespaceID *UserEventGitNamespaceID `json:"gitNamespaceId"`
}

func (o *UserEventPreferredScopesAndGitNamespace) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *UserEventPreferredScopesAndGitNamespace) GetGitNamespaceID() *UserEventGitNamespaceID {
	if o == nil {
		return nil
	}
	return o.GitNamespaceID
}

type PreventAutoBlockingType string

const (
	PreventAutoBlockingTypeNumber  PreventAutoBlockingType = "number"
	PreventAutoBlockingTypeBoolean PreventAutoBlockingType = "boolean"
)

type PreventAutoBlocking struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type PreventAutoBlockingType
}

func CreatePreventAutoBlockingNumber(number float64) PreventAutoBlocking {
	typ := PreventAutoBlockingTypeNumber

	return PreventAutoBlocking{
		Number: &number,
		Type:   typ,
	}
}

func CreatePreventAutoBlockingBoolean(boolean bool) PreventAutoBlocking {
	typ := PreventAutoBlockingTypeBoolean

	return PreventAutoBlocking{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *PreventAutoBlocking) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PreventAutoBlockingTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = PreventAutoBlockingTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PreventAutoBlocking", string(data))
}

func (u PreventAutoBlocking) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type PreventAutoBlocking: all fields are null")
}

// RemoteCachingUser - Represents configuration for remote caching
type RemoteCachingUser struct {
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *RemoteCachingUser) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

type UserEventBuildEntitlements struct {
	EnhancedBuilds *bool `json:"enhancedBuilds,omitempty"`
}

func (o *UserEventBuildEntitlements) GetEnhancedBuilds() *bool {
	if o == nil {
		return nil
	}
	return o.EnhancedBuilds
}

type UserEventPurchaseType string

const (
	UserEventPurchaseTypeEnhanced UserEventPurchaseType = "enhanced"
	UserEventPurchaseTypeTurbo    UserEventPurchaseType = "turbo"
)

func (e UserEventPurchaseType) ToPointer() *UserEventPurchaseType {
	return &e
}
func (e *UserEventPurchaseType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = UserEventPurchaseType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventPurchaseType: %v", v)
	}
}

type UserEventBuildMachine struct {
	PurchaseType          *UserEventPurchaseType `json:"purchaseType,omitempty"`
	IsDefaultBuildMachine *bool                  `json:"isDefaultBuildMachine,omitempty"`
	Cores                 *float64               `json:"cores,omitempty"`
	Memory                *float64               `json:"memory,omitempty"`
}

func (o *UserEventBuildMachine) GetPurchaseType() *UserEventPurchaseType {
	if o == nil {
		return nil
	}
	return o.PurchaseType
}

func (o *UserEventBuildMachine) GetIsDefaultBuildMachine() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultBuildMachine
}

func (o *UserEventBuildMachine) GetCores() *float64 {
	if o == nil {
		return nil
	}
	return o.Cores
}

func (o *UserEventBuildMachine) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

type UserEventResourceConfig struct {
	NodeType                        *string                     `json:"nodeType,omitempty"`
	ConcurrentBuilds                *float64                    `json:"concurrentBuilds,omitempty"`
	BuildEntitlements               *UserEventBuildEntitlements `json:"buildEntitlements,omitempty"`
	AwsAccountType                  *string                     `json:"awsAccountType,omitempty"`
	AwsAccountIds                   []string                    `json:"awsAccountIds,omitempty"`
	CfZoneName                      *string                     `json:"cfZoneName,omitempty"`
	ImageOptimizationType           *string                     `json:"imageOptimizationType,omitempty"`
	EdgeConfigs                     *float64                    `json:"edgeConfigs,omitempty"`
	EdgeConfigSize                  *float64                    `json:"edgeConfigSize,omitempty"`
	EdgeFunctionMaxSizeBytes        *float64                    `json:"edgeFunctionMaxSizeBytes,omitempty"`
	EdgeFunctionExecutionTimeoutMs  *float64                    `json:"edgeFunctionExecutionTimeoutMs,omitempty"`
	ServerlessFunctionMaxMemorySize *float64                    `json:"serverlessFunctionMaxMemorySize,omitempty"`
	KvDatabases                     *float64                    `json:"kvDatabases,omitempty"`
	PostgresDatabases               *float64                    `json:"postgresDatabases,omitempty"`
	BlobStores                      *float64                    `json:"blobStores,omitempty"`
	IntegrationStores               *float64                    `json:"integrationStores,omitempty"`
	CronJobs                        *float64                    `json:"cronJobs,omitempty"`
	CronJobsPerProject              *float64                    `json:"cronJobsPerProject,omitempty"`
	MicrofrontendGroupsPerTeam      *float64                    `json:"microfrontendGroupsPerTeam,omitempty"`
	MicrofrontendProjectsPerGroup   *float64                    `json:"microfrontendProjectsPerGroup,omitempty"`
	FlagsExplorerOverridesThreshold *float64                    `json:"flagsExplorerOverridesThreshold,omitempty"`
	FlagsExplorerUnlimitedOverrides *bool                       `json:"flagsExplorerUnlimitedOverrides,omitempty"`
	CustomEnvironmentsPerProject    *float64                    `json:"customEnvironmentsPerProject,omitempty"`
	BuildMachine                    *UserEventBuildMachine      `json:"buildMachine,omitempty"`
}

func (o *UserEventResourceConfig) GetNodeType() *string {
	if o == nil {
		return nil
	}
	return o.NodeType
}

func (o *UserEventResourceConfig) GetConcurrentBuilds() *float64 {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UserEventResourceConfig) GetBuildEntitlements() *UserEventBuildEntitlements {
	if o == nil {
		return nil
	}
	return o.BuildEntitlements
}

func (o *UserEventResourceConfig) GetAwsAccountType() *string {
	if o == nil {
		return nil
	}
	return o.AwsAccountType
}

func (o *UserEventResourceConfig) GetAwsAccountIds() []string {
	if o == nil {
		return nil
	}
	return o.AwsAccountIds
}

func (o *UserEventResourceConfig) GetCfZoneName() *string {
	if o == nil {
		return nil
	}
	return o.CfZoneName
}

func (o *UserEventResourceConfig) GetImageOptimizationType() *string {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationType
}

func (o *UserEventResourceConfig) GetEdgeConfigs() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeConfigs
}

func (o *UserEventResourceConfig) GetEdgeConfigSize() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSize
}

func (o *UserEventResourceConfig) GetEdgeFunctionMaxSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionMaxSizeBytes
}

func (o *UserEventResourceConfig) GetEdgeFunctionExecutionTimeoutMs() *float64 {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionExecutionTimeoutMs
}

func (o *UserEventResourceConfig) GetServerlessFunctionMaxMemorySize() *float64 {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionMaxMemorySize
}

func (o *UserEventResourceConfig) GetKvDatabases() *float64 {
	if o == nil {
		return nil
	}
	return o.KvDatabases
}

func (o *UserEventResourceConfig) GetPostgresDatabases() *float64 {
	if o == nil {
		return nil
	}
	return o.PostgresDatabases
}

func (o *UserEventResourceConfig) GetBlobStores() *float64 {
	if o == nil {
		return nil
	}
	return o.BlobStores
}

func (o *UserEventResourceConfig) GetIntegrationStores() *float64 {
	if o == nil {
		return nil
	}
	return o.IntegrationStores
}

func (o *UserEventResourceConfig) GetCronJobs() *float64 {
	if o == nil {
		return nil
	}
	return o.CronJobs
}

func (o *UserEventResourceConfig) GetCronJobsPerProject() *float64 {
	if o == nil {
		return nil
	}
	return o.CronJobsPerProject
}

func (o *UserEventResourceConfig) GetMicrofrontendGroupsPerTeam() *float64 {
	if o == nil {
		return nil
	}
	return o.MicrofrontendGroupsPerTeam
}

func (o *UserEventResourceConfig) GetMicrofrontendProjectsPerGroup() *float64 {
	if o == nil {
		return nil
	}
	return o.MicrofrontendProjectsPerGroup
}

func (o *UserEventResourceConfig) GetFlagsExplorerOverridesThreshold() *float64 {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerOverridesThreshold
}

func (o *UserEventResourceConfig) GetFlagsExplorerUnlimitedOverrides() *bool {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerUnlimitedOverrides
}

func (o *UserEventResourceConfig) GetCustomEnvironmentsPerProject() *float64 {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentsPerProject
}

func (o *UserEventResourceConfig) GetBuildMachine() *UserEventBuildMachine {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

type ResourceLimits struct {
	Max      float64 `json:"max"`
	Duration float64 `json:"duration"`
}

func (o *ResourceLimits) GetMax() float64 {
	if o == nil {
		return 0.0
	}
	return o.Max
}

func (o *ResourceLimits) GetDuration() float64 {
	if o == nil {
		return 0.0
	}
	return o.Duration
}

type UserEventViewPreference string

const (
	UserEventViewPreferenceCards UserEventViewPreference = "cards"
	UserEventViewPreferenceList  UserEventViewPreference = "list"
)

func (e UserEventViewPreference) ToPointer() *UserEventViewPreference {
	return &e
}
func (e *UserEventViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cards":
		fallthrough
	case "list":
		*e = UserEventViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventViewPreference: %v", v)
	}
}

type UserEventFavoritesViewPreference string

const (
	UserEventFavoritesViewPreferenceOpen   UserEventFavoritesViewPreference = "open"
	UserEventFavoritesViewPreferenceClosed UserEventFavoritesViewPreference = "closed"
)

func (e UserEventFavoritesViewPreference) ToPointer() *UserEventFavoritesViewPreference {
	return &e
}
func (e *UserEventFavoritesViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = UserEventFavoritesViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventFavoritesViewPreference: %v", v)
	}
}

type UserEventRecentsViewPreference string

const (
	UserEventRecentsViewPreferenceOpen   UserEventRecentsViewPreference = "open"
	UserEventRecentsViewPreferenceClosed UserEventRecentsViewPreference = "closed"
)

func (e UserEventRecentsViewPreference) ToPointer() *UserEventRecentsViewPreference {
	return &e
}
func (e *UserEventRecentsViewPreference) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "open":
		fallthrough
	case "closed":
		*e = UserEventRecentsViewPreference(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventRecentsViewPreference: %v", v)
	}
}

type UserEventActiveDashboardView struct {
	ScopeID                 string                            `json:"scopeId"`
	ViewPreference          *UserEventViewPreference          `json:"viewPreference,omitempty"`
	FavoritesViewPreference *UserEventFavoritesViewPreference `json:"favoritesViewPreference,omitempty"`
	RecentsViewPreference   *UserEventRecentsViewPreference   `json:"recentsViewPreference,omitempty"`
}

func (o *UserEventActiveDashboardView) GetScopeID() string {
	if o == nil {
		return ""
	}
	return o.ScopeID
}

func (o *UserEventActiveDashboardView) GetViewPreference() *UserEventViewPreference {
	if o == nil {
		return nil
	}
	return o.ViewPreference
}

func (o *UserEventActiveDashboardView) GetFavoritesViewPreference() *UserEventFavoritesViewPreference {
	if o == nil {
		return nil
	}
	return o.FavoritesViewPreference
}

func (o *UserEventActiveDashboardView) GetRecentsViewPreference() *UserEventRecentsViewPreference {
	if o == nil {
		return nil
	}
	return o.RecentsViewPreference
}

type SecondaryEmail struct {
	Email    string `json:"email"`
	Verified bool   `json:"verified"`
}

func (o *SecondaryEmail) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *SecondaryEmail) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

type Rules struct {
	Email string `json:"email"`
}

func (o *Rules) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

type EmailNotifications struct {
	Rules map[string]Rules `json:"rules,omitempty"`
}

func (o *EmailNotifications) GetRules() map[string]Rules {
	if o == nil {
		return nil
	}
	return o.Rules
}

type SiftScoresReason struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *SiftScoresReason) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SiftScoresReason) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type SiftScores struct {
	Score   float64            `json:"score"`
	Reasons []SiftScoresReason `json:"reasons"`
}

func (o *SiftScores) GetScore() float64 {
	if o == nil {
		return 0.0
	}
	return o.Score
}

func (o *SiftScores) GetReasons() []SiftScoresReason {
	if o == nil {
		return []SiftScoresReason{}
	}
	return o.Reasons
}

type NameString string

const (
	NameStringString NameString = "string"
)

func (e NameString) ToPointer() *NameString {
	return &e
}
func (e *NameString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = NameString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NameString: %v", v)
	}
}

type SiftRoute struct {
	Name NameString `json:"name"`
}

func (o *SiftRoute) GetName() NameString {
	if o == nil {
		return NameString("")
	}
	return o.Name
}

type ReasonUserEnum string

const (
	ReasonUserEnumSubscriptionCanceled    ReasonUserEnum = "SUBSCRIPTION_CANCELED"
	ReasonUserEnumSubscriptionExpired     ReasonUserEnum = "SUBSCRIPTION_EXPIRED"
	ReasonUserEnumUnpaidInvoice           ReasonUserEnum = "UNPAID_INVOICE"
	ReasonUserEnumEnterpriseTrialEnded    ReasonUserEnum = "ENTERPRISE_TRIAL_ENDED"
	ReasonUserEnumFairUseLimitsExceeded   ReasonUserEnum = "FAIR_USE_LIMITS_EXCEEDED"
	ReasonUserEnumBlockedForPlatformAbuse ReasonUserEnum = "BLOCKED_FOR_PLATFORM_ABUSE"
)

func (e ReasonUserEnum) ToPointer() *ReasonUserEnum {
	return &e
}
func (e *ReasonUserEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "SUBSCRIPTION_CANCELED":
		fallthrough
	case "SUBSCRIPTION_EXPIRED":
		fallthrough
	case "UNPAID_INVOICE":
		fallthrough
	case "ENTERPRISE_TRIAL_ENDED":
		fallthrough
	case "FAIR_USE_LIMITS_EXCEEDED":
		fallthrough
	case "BLOCKED_FOR_PLATFORM_ABUSE":
		*e = ReasonUserEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReasonUserEnum: %v", v)
	}
}

type UserEventBlockedDueToOverageType string

const (
	UserEventBlockedDueToOverageTypeAnalyticsUsage                          UserEventBlockedDueToOverageType = "analyticsUsage"
	UserEventBlockedDueToOverageTypeArtifacts                               UserEventBlockedDueToOverageType = "artifacts"
	UserEventBlockedDueToOverageTypeBandwidth                               UserEventBlockedDueToOverageType = "bandwidth"
	UserEventBlockedDueToOverageTypeBlobTotalAdvancedRequests               UserEventBlockedDueToOverageType = "blobTotalAdvancedRequests"
	UserEventBlockedDueToOverageTypeBlobTotalAvgSizeInBytes                 UserEventBlockedDueToOverageType = "blobTotalAvgSizeInBytes"
	UserEventBlockedDueToOverageTypeBlobTotalGetResponseObjectSizeInBytes   UserEventBlockedDueToOverageType = "blobTotalGetResponseObjectSizeInBytes"
	UserEventBlockedDueToOverageTypeBlobTotalSimpleRequests                 UserEventBlockedDueToOverageType = "blobTotalSimpleRequests"
	UserEventBlockedDueToOverageTypeConnectDataTransfer                     UserEventBlockedDueToOverageType = "connectDataTransfer"
	UserEventBlockedDueToOverageTypeDataCacheRead                           UserEventBlockedDueToOverageType = "dataCacheRead"
	UserEventBlockedDueToOverageTypeDataCacheWrite                          UserEventBlockedDueToOverageType = "dataCacheWrite"
	UserEventBlockedDueToOverageTypeEdgeConfigRead                          UserEventBlockedDueToOverageType = "edgeConfigRead"
	UserEventBlockedDueToOverageTypeEdgeConfigWrite                         UserEventBlockedDueToOverageType = "edgeConfigWrite"
	UserEventBlockedDueToOverageTypeEdgeFunctionExecutionUnits              UserEventBlockedDueToOverageType = "edgeFunctionExecutionUnits"
	UserEventBlockedDueToOverageTypeEdgeMiddlewareInvocations               UserEventBlockedDueToOverageType = "edgeMiddlewareInvocations"
	UserEventBlockedDueToOverageTypeEdgeRequestAdditionalCPUDuration        UserEventBlockedDueToOverageType = "edgeRequestAdditionalCpuDuration"
	UserEventBlockedDueToOverageTypeEdgeRequest                             UserEventBlockedDueToOverageType = "edgeRequest"
	UserEventBlockedDueToOverageTypeElasticConcurrencyBuildSlots            UserEventBlockedDueToOverageType = "elasticConcurrencyBuildSlots"
	UserEventBlockedDueToOverageTypeFastDataTransfer                        UserEventBlockedDueToOverageType = "fastDataTransfer"
	UserEventBlockedDueToOverageTypeFastOriginTransfer                      UserEventBlockedDueToOverageType = "fastOriginTransfer"
	UserEventBlockedDueToOverageTypeFluidCPUDuration                        UserEventBlockedDueToOverageType = "fluidCpuDuration"
	UserEventBlockedDueToOverageTypeFluidDuration                           UserEventBlockedDueToOverageType = "fluidDuration"
	UserEventBlockedDueToOverageTypeFunctionDuration                        UserEventBlockedDueToOverageType = "functionDuration"
	UserEventBlockedDueToOverageTypeFunctionInvocation                      UserEventBlockedDueToOverageType = "functionInvocation"
	UserEventBlockedDueToOverageTypeImageOptimizationCacheRead              UserEventBlockedDueToOverageType = "imageOptimizationCacheRead"
	UserEventBlockedDueToOverageTypeImageOptimizationCacheWrite             UserEventBlockedDueToOverageType = "imageOptimizationCacheWrite"
	UserEventBlockedDueToOverageTypeImageOptimizationTransformation         UserEventBlockedDueToOverageType = "imageOptimizationTransformation"
	UserEventBlockedDueToOverageTypeLogDrainsVolume                         UserEventBlockedDueToOverageType = "logDrainsVolume"
	UserEventBlockedDueToOverageTypeMonitoringMetric                        UserEventBlockedDueToOverageType = "monitoringMetric"
	UserEventBlockedDueToOverageTypeBlobDataTransfer                        UserEventBlockedDueToOverageType = "blobDataTransfer"
	UserEventBlockedDueToOverageTypeObservabilityEvent                      UserEventBlockedDueToOverageType = "observabilityEvent"
	UserEventBlockedDueToOverageTypeOnDemandConcurrencyMinutes              UserEventBlockedDueToOverageType = "onDemandConcurrencyMinutes"
	UserEventBlockedDueToOverageTypePostgresComputeTime                     UserEventBlockedDueToOverageType = "postgresComputeTime"
	UserEventBlockedDueToOverageTypePostgresDataStorage                     UserEventBlockedDueToOverageType = "postgresDataStorage"
	UserEventBlockedDueToOverageTypePostgresDataTransfer                    UserEventBlockedDueToOverageType = "postgresDataTransfer"
	UserEventBlockedDueToOverageTypePostgresDatabase                        UserEventBlockedDueToOverageType = "postgresDatabase"
	UserEventBlockedDueToOverageTypePostgresWrittenData                     UserEventBlockedDueToOverageType = "postgresWrittenData"
	UserEventBlockedDueToOverageTypeRuntimeCacheRead                        UserEventBlockedDueToOverageType = "runtimeCacheRead"
	UserEventBlockedDueToOverageTypeRuntimeCacheWrite                       UserEventBlockedDueToOverageType = "runtimeCacheWrite"
	UserEventBlockedDueToOverageTypeServerlessFunctionExecution             UserEventBlockedDueToOverageType = "serverlessFunctionExecution"
	UserEventBlockedDueToOverageTypeSourceImages                            UserEventBlockedDueToOverageType = "sourceImages"
	UserEventBlockedDueToOverageTypeStorageRedisTotalBandwidthInBytes       UserEventBlockedDueToOverageType = "storageRedisTotalBandwidthInBytes"
	UserEventBlockedDueToOverageTypeStorageRedisTotalCommands               UserEventBlockedDueToOverageType = "storageRedisTotalCommands"
	UserEventBlockedDueToOverageTypeStorageRedisTotalDailyAvgStorageInBytes UserEventBlockedDueToOverageType = "storageRedisTotalDailyAvgStorageInBytes"
	UserEventBlockedDueToOverageTypeStorageRedisTotalDatabases              UserEventBlockedDueToOverageType = "storageRedisTotalDatabases"
	UserEventBlockedDueToOverageTypeWafOwaspExcessBytes                     UserEventBlockedDueToOverageType = "wafOwaspExcessBytes"
	UserEventBlockedDueToOverageTypeWafOwaspRequests                        UserEventBlockedDueToOverageType = "wafOwaspRequests"
	UserEventBlockedDueToOverageTypeWafRateLimitRequest                     UserEventBlockedDueToOverageType = "wafRateLimitRequest"
	UserEventBlockedDueToOverageTypeWebAnalyticsEvent                       UserEventBlockedDueToOverageType = "webAnalyticsEvent"
)

func (e UserEventBlockedDueToOverageType) ToPointer() *UserEventBlockedDueToOverageType {
	return &e
}
func (e *UserEventBlockedDueToOverageType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "blobTotalAdvancedRequests":
		fallthrough
	case "blobTotalAvgSizeInBytes":
		fallthrough
	case "blobTotalGetResponseObjectSizeInBytes":
		fallthrough
	case "blobTotalSimpleRequests":
		fallthrough
	case "connectDataTransfer":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "edgeRequestAdditionalCpuDuration":
		fallthrough
	case "edgeRequest":
		fallthrough
	case "elasticConcurrencyBuildSlots":
		fallthrough
	case "fastDataTransfer":
		fallthrough
	case "fastOriginTransfer":
		fallthrough
	case "fluidCpuDuration":
		fallthrough
	case "fluidDuration":
		fallthrough
	case "functionDuration":
		fallthrough
	case "functionInvocation":
		fallthrough
	case "imageOptimizationCacheRead":
		fallthrough
	case "imageOptimizationCacheWrite":
		fallthrough
	case "imageOptimizationTransformation":
		fallthrough
	case "logDrainsVolume":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "blobDataTransfer":
		fallthrough
	case "observabilityEvent":
		fallthrough
	case "onDemandConcurrencyMinutes":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "runtimeCacheRead":
		fallthrough
	case "runtimeCacheWrite":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "wafOwaspExcessBytes":
		fallthrough
	case "wafOwaspRequests":
		fallthrough
	case "wafRateLimitRequest":
		fallthrough
	case "webAnalyticsEvent":
		*e = UserEventBlockedDueToOverageType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventBlockedDueToOverageType: %v", v)
	}
}

type UserEventSoftBlock struct {
	BlockedAt               float64                           `json:"blockedAt"`
	Reason                  ReasonUserEnum                    `json:"reason"`
	BlockedDueToOverageType *UserEventBlockedDueToOverageType `json:"blockedDueToOverageType,omitempty"`
}

func (o *UserEventSoftBlock) GetBlockedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BlockedAt
}

func (o *UserEventSoftBlock) GetReason() ReasonUserEnum {
	if o == nil {
		return ReasonUserEnum("")
	}
	return o.Reason
}

func (o *UserEventSoftBlock) GetBlockedDueToOverageType() *UserEventBlockedDueToOverageType {
	if o == nil {
		return nil
	}
	return o.BlockedDueToOverageType
}

type TeamRole1 string

const (
	TeamRole1Owner       TeamRole1 = "OWNER"
	TeamRole1Member      TeamRole1 = "MEMBER"
	TeamRole1Developer   TeamRole1 = "DEVELOPER"
	TeamRole1Security    TeamRole1 = "SECURITY"
	TeamRole1Billing     TeamRole1 = "BILLING"
	TeamRole1Viewer      TeamRole1 = "VIEWER"
	TeamRole1Contributor TeamRole1 = "CONTRIBUTOR"
)

func (e TeamRole1) ToPointer() *TeamRole1 {
	return &e
}
func (e *TeamRole1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = TeamRole1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamRole1: %v", v)
	}
}

type UserEventTeamRole string

const (
	UserEventTeamRoleOwner       UserEventTeamRole = "OWNER"
	UserEventTeamRoleMember      UserEventTeamRole = "MEMBER"
	UserEventTeamRoleDeveloper   UserEventTeamRole = "DEVELOPER"
	UserEventTeamRoleSecurity    UserEventTeamRole = "SECURITY"
	UserEventTeamRoleBilling     UserEventTeamRole = "BILLING"
	UserEventTeamRoleViewer      UserEventTeamRole = "VIEWER"
	UserEventTeamRoleContributor UserEventTeamRole = "CONTRIBUTOR"
)

func (e UserEventTeamRole) ToPointer() *UserEventTeamRole {
	return &e
}
func (e *UserEventTeamRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = UserEventTeamRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventTeamRole: %v", v)
	}
}

type UserEventTeamPermission string

const (
	UserEventTeamPermissionCreateProject            UserEventTeamPermission = "CreateProject"
	UserEventTeamPermissionFullProductionDeployment UserEventTeamPermission = "FullProductionDeployment"
	UserEventTeamPermissionUsageViewer              UserEventTeamPermission = "UsageViewer"
	UserEventTeamPermissionEnvVariableManager       UserEventTeamPermission = "EnvVariableManager"
	UserEventTeamPermissionEnvironmentManager       UserEventTeamPermission = "EnvironmentManager"
)

func (e UserEventTeamPermission) ToPointer() *UserEventTeamPermission {
	return &e
}
func (e *UserEventTeamPermission) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateProject":
		fallthrough
	case "FullProductionDeployment":
		fallthrough
	case "UsageViewer":
		fallthrough
	case "EnvVariableManager":
		fallthrough
	case "EnvironmentManager":
		*e = UserEventTeamPermission(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventTeamPermission: %v", v)
	}
}

type TeamOrigin1 string

const (
	TeamOrigin1Teams             TeamOrigin1 = "teams"
	TeamOrigin1Saml              TeamOrigin1 = "saml"
	TeamOrigin1Github            TeamOrigin1 = "github"
	TeamOrigin1Gitlab            TeamOrigin1 = "gitlab"
	TeamOrigin1Bitbucket         TeamOrigin1 = "bitbucket"
	TeamOrigin1Mail              TeamOrigin1 = "mail"
	TeamOrigin1Link              TeamOrigin1 = "link"
	TeamOrigin1Import            TeamOrigin1 = "import"
	TeamOrigin1Dsync             TeamOrigin1 = "dsync"
	TeamOrigin1Feedback          TeamOrigin1 = "feedback"
	TeamOrigin1OrganizationTeams TeamOrigin1 = "organization-teams"
)

func (e TeamOrigin1) ToPointer() *TeamOrigin1 {
	return &e
}
func (e *TeamOrigin1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "teams":
		fallthrough
	case "saml":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "mail":
		fallthrough
	case "link":
		fallthrough
	case "import":
		fallthrough
	case "dsync":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = TeamOrigin1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamOrigin1: %v", v)
	}
}

type TeamGitUserID1Type string

const (
	TeamGitUserID1TypeStr    TeamGitUserID1Type = "str"
	TeamGitUserID1TypeNumber TeamGitUserID1Type = "number"
)

type TeamGitUserID1 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type TeamGitUserID1Type
}

func CreateTeamGitUserID1Str(str string) TeamGitUserID1 {
	typ := TeamGitUserID1TypeStr

	return TeamGitUserID1{
		Str:  &str,
		Type: typ,
	}
}

func CreateTeamGitUserID1Number(number float64) TeamGitUserID1 {
	typ := TeamGitUserID1TypeNumber

	return TeamGitUserID1{
		Number: &number,
		Type:   typ,
	}
}

func (u *TeamGitUserID1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TeamGitUserID1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = TeamGitUserID1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TeamGitUserID1", string(data))
}

func (u TeamGitUserID1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type TeamGitUserID1: all fields are null")
}

type TeamJoinedFrom1 struct {
	Origin           TeamOrigin1     `json:"origin"`
	CommitID         *string         `json:"commitId,omitempty"`
	RepoID           *string         `json:"repoId,omitempty"`
	RepoPath         *string         `json:"repoPath,omitempty"`
	GitUserID        *TeamGitUserID1 `json:"gitUserId,omitempty"`
	GitUserLogin     *string         `json:"gitUserLogin,omitempty"`
	SsoUserID        *string         `json:"ssoUserId,omitempty"`
	SsoConnectedAt   *float64        `json:"ssoConnectedAt,omitempty"`
	IdpUserID        *string         `json:"idpUserId,omitempty"`
	DsyncUserID      *string         `json:"dsyncUserId,omitempty"`
	DsyncConnectedAt *float64        `json:"dsyncConnectedAt,omitempty"`
}

func (o *TeamJoinedFrom1) GetOrigin() TeamOrigin1 {
	if o == nil {
		return TeamOrigin1("")
	}
	return o.Origin
}

func (o *TeamJoinedFrom1) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *TeamJoinedFrom1) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *TeamJoinedFrom1) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *TeamJoinedFrom1) GetGitUserID() *TeamGitUserID1 {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *TeamJoinedFrom1) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

func (o *TeamJoinedFrom1) GetSsoUserID() *string {
	if o == nil {
		return nil
	}
	return o.SsoUserID
}

func (o *TeamJoinedFrom1) GetSsoConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SsoConnectedAt
}

func (o *TeamJoinedFrom1) GetIdpUserID() *string {
	if o == nil {
		return nil
	}
	return o.IdpUserID
}

func (o *TeamJoinedFrom1) GetDsyncUserID() *string {
	if o == nil {
		return nil
	}
	return o.DsyncUserID
}

func (o *TeamJoinedFrom1) GetDsyncConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DsyncConnectedAt
}

type TeamUser struct {
	Created           *float64                  `json:"created,omitempty"`
	CreatedAt         *float64                  `json:"createdAt,omitempty"`
	TeamID            string                    `json:"teamId"`
	Role              *TeamRole1                `json:"role,omitempty"`
	Confirmed         *bool                     `json:"confirmed,omitempty"`
	ConfirmedAt       *float64                  `json:"confirmedAt,omitempty"`
	AccessRequestedAt *float64                  `json:"accessRequestedAt,omitempty"`
	TeamRoles         []UserEventTeamRole       `json:"teamRoles,omitempty"`
	TeamPermissions   []UserEventTeamPermission `json:"teamPermissions,omitempty"`
	JoinedFrom        *TeamJoinedFrom1          `json:"joinedFrom,omitempty"`
}

func (o *TeamUser) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *TeamUser) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *TeamUser) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *TeamUser) GetRole() *TeamRole1 {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *TeamUser) GetConfirmed() *bool {
	if o == nil {
		return nil
	}
	return o.Confirmed
}

func (o *TeamUser) GetConfirmedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ConfirmedAt
}

func (o *TeamUser) GetAccessRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessRequestedAt
}

func (o *TeamUser) GetTeamRoles() []UserEventTeamRole {
	if o == nil {
		return nil
	}
	return o.TeamRoles
}

func (o *TeamUser) GetTeamPermissions() []UserEventTeamPermission {
	if o == nil {
		return nil
	}
	return o.TeamPermissions
}

func (o *TeamUser) GetJoinedFrom() *TeamJoinedFrom1 {
	if o == nil {
		return nil
	}
	return o.JoinedFrom
}

type PayloadTypeUser string

const (
	PayloadTypeUserUser PayloadTypeUser = "user"
)

func (e PayloadTypeUser) ToPointer() *PayloadTypeUser {
	return &e
}
func (e *PayloadTypeUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = PayloadTypeUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PayloadTypeUser: %v", v)
	}
}

// UsageAlerts - Contains the timestamps when a user was notified about their usage
type UsageAlerts struct {
	WarningAt  *float64 `json:"warningAt,omitempty"`
	BlockingAt *float64 `json:"blockingAt,omitempty"`
}

func (o *UsageAlerts) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *UsageAlerts) GetBlockingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockingAt
}

type AnalyticsUsage struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *AnalyticsUsage) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *AnalyticsUsage) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *AnalyticsUsage) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type Artifacts struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *Artifacts) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *Artifacts) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *Artifacts) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type Bandwidth struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *Bandwidth) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *Bandwidth) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *Bandwidth) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type BlobTotalAdvancedRequests struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *BlobTotalAdvancedRequests) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *BlobTotalAdvancedRequests) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *BlobTotalAdvancedRequests) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type BlobTotalAvgSizeInBytes struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *BlobTotalAvgSizeInBytes) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *BlobTotalAvgSizeInBytes) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *BlobTotalAvgSizeInBytes) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type BlobTotalGetResponseObjectSizeInBytes struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *BlobTotalGetResponseObjectSizeInBytes) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *BlobTotalGetResponseObjectSizeInBytes) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *BlobTotalGetResponseObjectSizeInBytes) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type BlobTotalSimpleRequests struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *BlobTotalSimpleRequests) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *BlobTotalSimpleRequests) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *BlobTotalSimpleRequests) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type ConnectDataTransfer struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *ConnectDataTransfer) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *ConnectDataTransfer) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *ConnectDataTransfer) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type DataCacheRead struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *DataCacheRead) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *DataCacheRead) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *DataCacheRead) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type DataCacheWrite struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *DataCacheWrite) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *DataCacheWrite) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *DataCacheWrite) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type EdgeConfigRead struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *EdgeConfigRead) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *EdgeConfigRead) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *EdgeConfigRead) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type EdgeConfigWrite struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *EdgeConfigWrite) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *EdgeConfigWrite) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *EdgeConfigWrite) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type EdgeFunctionExecutionUnits struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *EdgeFunctionExecutionUnits) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *EdgeFunctionExecutionUnits) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *EdgeFunctionExecutionUnits) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type EdgeMiddlewareInvocations struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *EdgeMiddlewareInvocations) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *EdgeMiddlewareInvocations) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *EdgeMiddlewareInvocations) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type EdgeRequestAdditionalCPUDuration struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *EdgeRequestAdditionalCPUDuration) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *EdgeRequestAdditionalCPUDuration) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *EdgeRequestAdditionalCPUDuration) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type EdgeRequest struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *EdgeRequest) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *EdgeRequest) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *EdgeRequest) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type ElasticConcurrencyBuildSlots struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *ElasticConcurrencyBuildSlots) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *ElasticConcurrencyBuildSlots) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *ElasticConcurrencyBuildSlots) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type FastDataTransfer struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *FastDataTransfer) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *FastDataTransfer) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *FastDataTransfer) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type FastOriginTransfer struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *FastOriginTransfer) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *FastOriginTransfer) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *FastOriginTransfer) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type FluidCPUDuration struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *FluidCPUDuration) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *FluidCPUDuration) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *FluidCPUDuration) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type FluidDuration struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *FluidDuration) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *FluidDuration) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *FluidDuration) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type FunctionDuration struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *FunctionDuration) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *FunctionDuration) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *FunctionDuration) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type FunctionInvocation struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *FunctionInvocation) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *FunctionInvocation) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *FunctionInvocation) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type ImageOptimizationCacheRead struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *ImageOptimizationCacheRead) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *ImageOptimizationCacheRead) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *ImageOptimizationCacheRead) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type ImageOptimizationCacheWrite struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *ImageOptimizationCacheWrite) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *ImageOptimizationCacheWrite) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *ImageOptimizationCacheWrite) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type OverageUsageAlertsImageOptimizationTransformation struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *OverageUsageAlertsImageOptimizationTransformation) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *OverageUsageAlertsImageOptimizationTransformation) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *OverageUsageAlertsImageOptimizationTransformation) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type LogDrainsVolume struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *LogDrainsVolume) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *LogDrainsVolume) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *LogDrainsVolume) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type MonitoringMetric struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *MonitoringMetric) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *MonitoringMetric) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *MonitoringMetric) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type BlobDataTransfer struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *BlobDataTransfer) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *BlobDataTransfer) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *BlobDataTransfer) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type ObservabilityEvent struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *ObservabilityEvent) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *ObservabilityEvent) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *ObservabilityEvent) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type OnDemandConcurrencyMinutes struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *OnDemandConcurrencyMinutes) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *OnDemandConcurrencyMinutes) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *OnDemandConcurrencyMinutes) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type PostgresComputeTime struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *PostgresComputeTime) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *PostgresComputeTime) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *PostgresComputeTime) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type PostgresDataStorage struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *PostgresDataStorage) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *PostgresDataStorage) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *PostgresDataStorage) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type PostgresDataTransfer struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *PostgresDataTransfer) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *PostgresDataTransfer) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *PostgresDataTransfer) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type PostgresDatabase struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *PostgresDatabase) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *PostgresDatabase) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *PostgresDatabase) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type PostgresWrittenData struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *PostgresWrittenData) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *PostgresWrittenData) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *PostgresWrittenData) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type RuntimeCacheRead struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *RuntimeCacheRead) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *RuntimeCacheRead) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *RuntimeCacheRead) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type RuntimeCacheWrite struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *RuntimeCacheWrite) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *RuntimeCacheWrite) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *RuntimeCacheWrite) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type ServerlessFunctionExecution struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *ServerlessFunctionExecution) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *ServerlessFunctionExecution) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *ServerlessFunctionExecution) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type OverageUsageAlertsSourceImages struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *OverageUsageAlertsSourceImages) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *OverageUsageAlertsSourceImages) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *OverageUsageAlertsSourceImages) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type StorageRedisTotalBandwidthInBytes struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *StorageRedisTotalBandwidthInBytes) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *StorageRedisTotalBandwidthInBytes) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *StorageRedisTotalBandwidthInBytes) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type StorageRedisTotalCommands struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *StorageRedisTotalCommands) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *StorageRedisTotalCommands) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *StorageRedisTotalCommands) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type StorageRedisTotalDailyAvgStorageInBytes struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *StorageRedisTotalDailyAvgStorageInBytes) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type StorageRedisTotalDatabases struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *StorageRedisTotalDatabases) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *StorageRedisTotalDatabases) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *StorageRedisTotalDatabases) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type WafOwaspExcessBytes struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *WafOwaspExcessBytes) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *WafOwaspExcessBytes) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *WafOwaspExcessBytes) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type WafOwaspRequests struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *WafOwaspRequests) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *WafOwaspRequests) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *WafOwaspRequests) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type WafRateLimitRequest struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *WafRateLimitRequest) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *WafRateLimitRequest) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *WafRateLimitRequest) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type WebAnalyticsEvent struct {
	CurrentThreshold float64  `json:"currentThreshold"`
	WarningAt        *float64 `json:"warningAt,omitempty"`
	BlockedAt        *float64 `json:"blockedAt,omitempty"`
}

func (o *WebAnalyticsEvent) GetCurrentThreshold() float64 {
	if o == nil {
		return 0.0
	}
	return o.CurrentThreshold
}

func (o *WebAnalyticsEvent) GetWarningAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WarningAt
}

func (o *WebAnalyticsEvent) GetBlockedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedAt
}

type OverageUsageAlerts struct {
	AnalyticsUsage                          *AnalyticsUsage                                    `json:"analyticsUsage,omitempty"`
	Artifacts                               *Artifacts                                         `json:"artifacts,omitempty"`
	Bandwidth                               *Bandwidth                                         `json:"bandwidth,omitempty"`
	BlobTotalAdvancedRequests               *BlobTotalAdvancedRequests                         `json:"blobTotalAdvancedRequests,omitempty"`
	BlobTotalAvgSizeInBytes                 *BlobTotalAvgSizeInBytes                           `json:"blobTotalAvgSizeInBytes,omitempty"`
	BlobTotalGetResponseObjectSizeInBytes   *BlobTotalGetResponseObjectSizeInBytes             `json:"blobTotalGetResponseObjectSizeInBytes,omitempty"`
	BlobTotalSimpleRequests                 *BlobTotalSimpleRequests                           `json:"blobTotalSimpleRequests,omitempty"`
	ConnectDataTransfer                     *ConnectDataTransfer                               `json:"connectDataTransfer,omitempty"`
	DataCacheRead                           *DataCacheRead                                     `json:"dataCacheRead,omitempty"`
	DataCacheWrite                          *DataCacheWrite                                    `json:"dataCacheWrite,omitempty"`
	EdgeConfigRead                          *EdgeConfigRead                                    `json:"edgeConfigRead,omitempty"`
	EdgeConfigWrite                         *EdgeConfigWrite                                   `json:"edgeConfigWrite,omitempty"`
	EdgeFunctionExecutionUnits              *EdgeFunctionExecutionUnits                        `json:"edgeFunctionExecutionUnits,omitempty"`
	EdgeMiddlewareInvocations               *EdgeMiddlewareInvocations                         `json:"edgeMiddlewareInvocations,omitempty"`
	EdgeRequestAdditionalCPUDuration        *EdgeRequestAdditionalCPUDuration                  `json:"edgeRequestAdditionalCpuDuration,omitempty"`
	EdgeRequest                             *EdgeRequest                                       `json:"edgeRequest,omitempty"`
	ElasticConcurrencyBuildSlots            *ElasticConcurrencyBuildSlots                      `json:"elasticConcurrencyBuildSlots,omitempty"`
	FastDataTransfer                        *FastDataTransfer                                  `json:"fastDataTransfer,omitempty"`
	FastOriginTransfer                      *FastOriginTransfer                                `json:"fastOriginTransfer,omitempty"`
	FluidCPUDuration                        *FluidCPUDuration                                  `json:"fluidCpuDuration,omitempty"`
	FluidDuration                           *FluidDuration                                     `json:"fluidDuration,omitempty"`
	FunctionDuration                        *FunctionDuration                                  `json:"functionDuration,omitempty"`
	FunctionInvocation                      *FunctionInvocation                                `json:"functionInvocation,omitempty"`
	ImageOptimizationCacheRead              *ImageOptimizationCacheRead                        `json:"imageOptimizationCacheRead,omitempty"`
	ImageOptimizationCacheWrite             *ImageOptimizationCacheWrite                       `json:"imageOptimizationCacheWrite,omitempty"`
	ImageOptimizationTransformation         *OverageUsageAlertsImageOptimizationTransformation `json:"imageOptimizationTransformation,omitempty"`
	LogDrainsVolume                         *LogDrainsVolume                                   `json:"logDrainsVolume,omitempty"`
	MonitoringMetric                        *MonitoringMetric                                  `json:"monitoringMetric,omitempty"`
	BlobDataTransfer                        *BlobDataTransfer                                  `json:"blobDataTransfer,omitempty"`
	ObservabilityEvent                      *ObservabilityEvent                                `json:"observabilityEvent,omitempty"`
	OnDemandConcurrencyMinutes              *OnDemandConcurrencyMinutes                        `json:"onDemandConcurrencyMinutes,omitempty"`
	PostgresComputeTime                     *PostgresComputeTime                               `json:"postgresComputeTime,omitempty"`
	PostgresDataStorage                     *PostgresDataStorage                               `json:"postgresDataStorage,omitempty"`
	PostgresDataTransfer                    *PostgresDataTransfer                              `json:"postgresDataTransfer,omitempty"`
	PostgresDatabase                        *PostgresDatabase                                  `json:"postgresDatabase,omitempty"`
	PostgresWrittenData                     *PostgresWrittenData                               `json:"postgresWrittenData,omitempty"`
	RuntimeCacheRead                        *RuntimeCacheRead                                  `json:"runtimeCacheRead,omitempty"`
	RuntimeCacheWrite                       *RuntimeCacheWrite                                 `json:"runtimeCacheWrite,omitempty"`
	ServerlessFunctionExecution             *ServerlessFunctionExecution                       `json:"serverlessFunctionExecution,omitempty"`
	SourceImages                            *OverageUsageAlertsSourceImages                    `json:"sourceImages,omitempty"`
	StorageRedisTotalBandwidthInBytes       *StorageRedisTotalBandwidthInBytes                 `json:"storageRedisTotalBandwidthInBytes,omitempty"`
	StorageRedisTotalCommands               *StorageRedisTotalCommands                         `json:"storageRedisTotalCommands,omitempty"`
	StorageRedisTotalDailyAvgStorageInBytes *StorageRedisTotalDailyAvgStorageInBytes           `json:"storageRedisTotalDailyAvgStorageInBytes,omitempty"`
	StorageRedisTotalDatabases              *StorageRedisTotalDatabases                        `json:"storageRedisTotalDatabases,omitempty"`
	WafOwaspExcessBytes                     *WafOwaspExcessBytes                               `json:"wafOwaspExcessBytes,omitempty"`
	WafOwaspRequests                        *WafOwaspRequests                                  `json:"wafOwaspRequests,omitempty"`
	WafRateLimitRequest                     *WafRateLimitRequest                               `json:"wafRateLimitRequest,omitempty"`
	WebAnalyticsEvent                       *WebAnalyticsEvent                                 `json:"webAnalyticsEvent,omitempty"`
}

func (o *OverageUsageAlerts) GetAnalyticsUsage() *AnalyticsUsage {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *OverageUsageAlerts) GetArtifacts() *Artifacts {
	if o == nil {
		return nil
	}
	return o.Artifacts
}

func (o *OverageUsageAlerts) GetBandwidth() *Bandwidth {
	if o == nil {
		return nil
	}
	return o.Bandwidth
}

func (o *OverageUsageAlerts) GetBlobTotalAdvancedRequests() *BlobTotalAdvancedRequests {
	if o == nil {
		return nil
	}
	return o.BlobTotalAdvancedRequests
}

func (o *OverageUsageAlerts) GetBlobTotalAvgSizeInBytes() *BlobTotalAvgSizeInBytes {
	if o == nil {
		return nil
	}
	return o.BlobTotalAvgSizeInBytes
}

func (o *OverageUsageAlerts) GetBlobTotalGetResponseObjectSizeInBytes() *BlobTotalGetResponseObjectSizeInBytes {
	if o == nil {
		return nil
	}
	return o.BlobTotalGetResponseObjectSizeInBytes
}

func (o *OverageUsageAlerts) GetBlobTotalSimpleRequests() *BlobTotalSimpleRequests {
	if o == nil {
		return nil
	}
	return o.BlobTotalSimpleRequests
}

func (o *OverageUsageAlerts) GetConnectDataTransfer() *ConnectDataTransfer {
	if o == nil {
		return nil
	}
	return o.ConnectDataTransfer
}

func (o *OverageUsageAlerts) GetDataCacheRead() *DataCacheRead {
	if o == nil {
		return nil
	}
	return o.DataCacheRead
}

func (o *OverageUsageAlerts) GetDataCacheWrite() *DataCacheWrite {
	if o == nil {
		return nil
	}
	return o.DataCacheWrite
}

func (o *OverageUsageAlerts) GetEdgeConfigRead() *EdgeConfigRead {
	if o == nil {
		return nil
	}
	return o.EdgeConfigRead
}

func (o *OverageUsageAlerts) GetEdgeConfigWrite() *EdgeConfigWrite {
	if o == nil {
		return nil
	}
	return o.EdgeConfigWrite
}

func (o *OverageUsageAlerts) GetEdgeFunctionExecutionUnits() *EdgeFunctionExecutionUnits {
	if o == nil {
		return nil
	}
	return o.EdgeFunctionExecutionUnits
}

func (o *OverageUsageAlerts) GetEdgeMiddlewareInvocations() *EdgeMiddlewareInvocations {
	if o == nil {
		return nil
	}
	return o.EdgeMiddlewareInvocations
}

func (o *OverageUsageAlerts) GetEdgeRequestAdditionalCPUDuration() *EdgeRequestAdditionalCPUDuration {
	if o == nil {
		return nil
	}
	return o.EdgeRequestAdditionalCPUDuration
}

func (o *OverageUsageAlerts) GetEdgeRequest() *EdgeRequest {
	if o == nil {
		return nil
	}
	return o.EdgeRequest
}

func (o *OverageUsageAlerts) GetElasticConcurrencyBuildSlots() *ElasticConcurrencyBuildSlots {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyBuildSlots
}

func (o *OverageUsageAlerts) GetFastDataTransfer() *FastDataTransfer {
	if o == nil {
		return nil
	}
	return o.FastDataTransfer
}

func (o *OverageUsageAlerts) GetFastOriginTransfer() *FastOriginTransfer {
	if o == nil {
		return nil
	}
	return o.FastOriginTransfer
}

func (o *OverageUsageAlerts) GetFluidCPUDuration() *FluidCPUDuration {
	if o == nil {
		return nil
	}
	return o.FluidCPUDuration
}

func (o *OverageUsageAlerts) GetFluidDuration() *FluidDuration {
	if o == nil {
		return nil
	}
	return o.FluidDuration
}

func (o *OverageUsageAlerts) GetFunctionDuration() *FunctionDuration {
	if o == nil {
		return nil
	}
	return o.FunctionDuration
}

func (o *OverageUsageAlerts) GetFunctionInvocation() *FunctionInvocation {
	if o == nil {
		return nil
	}
	return o.FunctionInvocation
}

func (o *OverageUsageAlerts) GetImageOptimizationCacheRead() *ImageOptimizationCacheRead {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationCacheRead
}

func (o *OverageUsageAlerts) GetImageOptimizationCacheWrite() *ImageOptimizationCacheWrite {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationCacheWrite
}

func (o *OverageUsageAlerts) GetImageOptimizationTransformation() *OverageUsageAlertsImageOptimizationTransformation {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationTransformation
}

func (o *OverageUsageAlerts) GetLogDrainsVolume() *LogDrainsVolume {
	if o == nil {
		return nil
	}
	return o.LogDrainsVolume
}

func (o *OverageUsageAlerts) GetMonitoringMetric() *MonitoringMetric {
	if o == nil {
		return nil
	}
	return o.MonitoringMetric
}

func (o *OverageUsageAlerts) GetBlobDataTransfer() *BlobDataTransfer {
	if o == nil {
		return nil
	}
	return o.BlobDataTransfer
}

func (o *OverageUsageAlerts) GetObservabilityEvent() *ObservabilityEvent {
	if o == nil {
		return nil
	}
	return o.ObservabilityEvent
}

func (o *OverageUsageAlerts) GetOnDemandConcurrencyMinutes() *OnDemandConcurrencyMinutes {
	if o == nil {
		return nil
	}
	return o.OnDemandConcurrencyMinutes
}

func (o *OverageUsageAlerts) GetPostgresComputeTime() *PostgresComputeTime {
	if o == nil {
		return nil
	}
	return o.PostgresComputeTime
}

func (o *OverageUsageAlerts) GetPostgresDataStorage() *PostgresDataStorage {
	if o == nil {
		return nil
	}
	return o.PostgresDataStorage
}

func (o *OverageUsageAlerts) GetPostgresDataTransfer() *PostgresDataTransfer {
	if o == nil {
		return nil
	}
	return o.PostgresDataTransfer
}

func (o *OverageUsageAlerts) GetPostgresDatabase() *PostgresDatabase {
	if o == nil {
		return nil
	}
	return o.PostgresDatabase
}

func (o *OverageUsageAlerts) GetPostgresWrittenData() *PostgresWrittenData {
	if o == nil {
		return nil
	}
	return o.PostgresWrittenData
}

func (o *OverageUsageAlerts) GetRuntimeCacheRead() *RuntimeCacheRead {
	if o == nil {
		return nil
	}
	return o.RuntimeCacheRead
}

func (o *OverageUsageAlerts) GetRuntimeCacheWrite() *RuntimeCacheWrite {
	if o == nil {
		return nil
	}
	return o.RuntimeCacheWrite
}

func (o *OverageUsageAlerts) GetServerlessFunctionExecution() *ServerlessFunctionExecution {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionExecution
}

func (o *OverageUsageAlerts) GetSourceImages() *OverageUsageAlertsSourceImages {
	if o == nil {
		return nil
	}
	return o.SourceImages
}

func (o *OverageUsageAlerts) GetStorageRedisTotalBandwidthInBytes() *StorageRedisTotalBandwidthInBytes {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalBandwidthInBytes
}

func (o *OverageUsageAlerts) GetStorageRedisTotalCommands() *StorageRedisTotalCommands {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalCommands
}

func (o *OverageUsageAlerts) GetStorageRedisTotalDailyAvgStorageInBytes() *StorageRedisTotalDailyAvgStorageInBytes {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalDailyAvgStorageInBytes
}

func (o *OverageUsageAlerts) GetStorageRedisTotalDatabases() *StorageRedisTotalDatabases {
	if o == nil {
		return nil
	}
	return o.StorageRedisTotalDatabases
}

func (o *OverageUsageAlerts) GetWafOwaspExcessBytes() *WafOwaspExcessBytes {
	if o == nil {
		return nil
	}
	return o.WafOwaspExcessBytes
}

func (o *OverageUsageAlerts) GetWafOwaspRequests() *WafOwaspRequests {
	if o == nil {
		return nil
	}
	return o.WafOwaspRequests
}

func (o *OverageUsageAlerts) GetWafRateLimitRequest() *WafRateLimitRequest {
	if o == nil {
		return nil
	}
	return o.WafRateLimitRequest
}

func (o *OverageUsageAlerts) GetWebAnalyticsEvent() *WebAnalyticsEvent {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsEvent
}

// OverageMetadata - Contains the timestamps for usage summary emails.
type OverageMetadata struct {
	// Tracks if the first time on-demand overage email has been sent.
	FirstTimeOnDemandNotificationSentAt *float64 `json:"firstTimeOnDemandNotificationSentAt,omitempty"`
	// Tracks the last time we sent a daily summary email.
	DailyOverageSummaryEmailSentAt *float64 `json:"dailyOverageSummaryEmailSentAt,omitempty"`
	// Tracks the last time we sent a weekly summary email.
	WeeklyOverageSummaryEmailSentAt *float64 `json:"weeklyOverageSummaryEmailSentAt,omitempty"`
	// Tracks when the overage summary email will stop auto-sending. We currently lock the user into email for a month after the last on-demand usage.
	OverageSummaryExpiresAt *float64 `json:"overageSummaryExpiresAt,omitempty"`
	// Tracks the last time we sent a increased on-demand email.
	IncreasedOnDemandEmailSentAt *float64 `json:"increasedOnDemandEmailSentAt,omitempty"`
}

func (o *OverageMetadata) GetFirstTimeOnDemandNotificationSentAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstTimeOnDemandNotificationSentAt
}

func (o *OverageMetadata) GetDailyOverageSummaryEmailSentAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DailyOverageSummaryEmailSentAt
}

func (o *OverageMetadata) GetWeeklyOverageSummaryEmailSentAt() *float64 {
	if o == nil {
		return nil
	}
	return o.WeeklyOverageSummaryEmailSentAt
}

func (o *OverageMetadata) GetOverageSummaryExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.OverageSummaryExpiresAt
}

func (o *OverageMetadata) GetIncreasedOnDemandEmailSentAt() *float64 {
	if o == nil {
		return nil
	}
	return o.IncreasedOnDemandEmailSentAt
}

// UserEventEnablePreviewFeedback - Whether the Vercel Toolbar is enabled for preview deployments.
type UserEventEnablePreviewFeedback string

const (
	UserEventEnablePreviewFeedbackDefault      UserEventEnablePreviewFeedback = "default"
	UserEventEnablePreviewFeedbackOn           UserEventEnablePreviewFeedback = "on"
	UserEventEnablePreviewFeedbackOff          UserEventEnablePreviewFeedback = "off"
	UserEventEnablePreviewFeedbackOnForce      UserEventEnablePreviewFeedback = "on-force"
	UserEventEnablePreviewFeedbackOffForce     UserEventEnablePreviewFeedback = "off-force"
	UserEventEnablePreviewFeedbackDefaultForce UserEventEnablePreviewFeedback = "default-force"
)

func (e UserEventEnablePreviewFeedback) ToPointer() *UserEventEnablePreviewFeedback {
	return &e
}
func (e *UserEventEnablePreviewFeedback) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "default":
		fallthrough
	case "on":
		fallthrough
	case "off":
		fallthrough
	case "on-force":
		fallthrough
	case "off-force":
		fallthrough
	case "default-force":
		*e = UserEventEnablePreviewFeedback(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UserEventEnablePreviewFeedback: %v", v)
	}
}

type WebAnalyticsBlockReason string

const (
	WebAnalyticsBlockReasonAdminOverride  WebAnalyticsBlockReason = "admin_override"
	WebAnalyticsBlockReasonLimitsExceeded WebAnalyticsBlockReason = "limits_exceeded"
)

func (e WebAnalyticsBlockReason) ToPointer() *WebAnalyticsBlockReason {
	return &e
}
func (e *WebAnalyticsBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = WebAnalyticsBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WebAnalyticsBlockReason: %v", v)
	}
}

type UserEventWebAnalytics struct {
	UpdatedAt        *float64                 `json:"updatedAt,omitempty"`
	BlockedFrom      *float64                 `json:"blockedFrom,omitempty"`
	BlockedUntil     *float64                 `json:"blockedUntil,omitempty"`
	BlockReason      *WebAnalyticsBlockReason `json:"blockReason,omitempty"`
	GraceEmailSentAt *float64                 `json:"graceEmailSentAt,omitempty"`
}

func (o *UserEventWebAnalytics) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UserEventWebAnalytics) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *UserEventWebAnalytics) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *UserEventWebAnalytics) GetBlockReason() *WebAnalyticsBlockReason {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *UserEventWebAnalytics) GetGraceEmailSentAt() *float64 {
	if o == nil {
		return nil
	}
	return o.GraceEmailSentAt
}

type MonitoringBlockReason string

const (
	MonitoringBlockReasonAdminOverride  MonitoringBlockReason = "admin_override"
	MonitoringBlockReasonLimitsExceeded MonitoringBlockReason = "limits_exceeded"
)

func (e MonitoringBlockReason) ToPointer() *MonitoringBlockReason {
	return &e
}
func (e *MonitoringBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = MonitoringBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MonitoringBlockReason: %v", v)
	}
}

type MonitoringBlockType string

const (
	MonitoringBlockTypeSoft MonitoringBlockType = "soft"
	MonitoringBlockTypeHard MonitoringBlockType = "hard"
)

func (e MonitoringBlockType) ToPointer() *MonitoringBlockType {
	return &e
}
func (e *MonitoringBlockType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "soft":
		fallthrough
	case "hard":
		*e = MonitoringBlockType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MonitoringBlockType: %v", v)
	}
}

// Monitoring - A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)
type Monitoring struct {
	UpdatedAt    *float64               `json:"updatedAt,omitempty"`
	BlockedFrom  *float64               `json:"blockedFrom,omitempty"`
	BlockedUntil *float64               `json:"blockedUntil,omitempty"`
	BlockReason  *MonitoringBlockReason `json:"blockReason,omitempty"`
	BlockType    MonitoringBlockType    `json:"blockType"`
}

func (o *Monitoring) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Monitoring) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *Monitoring) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *Monitoring) GetBlockReason() *MonitoringBlockReason {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *Monitoring) GetBlockType() MonitoringBlockType {
	if o == nil {
		return MonitoringBlockType("")
	}
	return o.BlockType
}

type ObservabilityPlusBlockReason string

const (
	ObservabilityPlusBlockReasonAdminOverride  ObservabilityPlusBlockReason = "admin_override"
	ObservabilityPlusBlockReasonLimitsExceeded ObservabilityPlusBlockReason = "limits_exceeded"
)

func (e ObservabilityPlusBlockReason) ToPointer() *ObservabilityPlusBlockReason {
	return &e
}
func (e *ObservabilityPlusBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = ObservabilityPlusBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ObservabilityPlusBlockReason: %v", v)
	}
}

type ObservabilityPlusBlockType string

const (
	ObservabilityPlusBlockTypeSoft ObservabilityPlusBlockType = "soft"
	ObservabilityPlusBlockTypeHard ObservabilityPlusBlockType = "hard"
)

func (e ObservabilityPlusBlockType) ToPointer() *ObservabilityPlusBlockType {
	return &e
}
func (e *ObservabilityPlusBlockType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "soft":
		fallthrough
	case "hard":
		*e = ObservabilityPlusBlockType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ObservabilityPlusBlockType: %v", v)
	}
}

type ObservabilityPlus struct {
	UpdatedAt    *float64                      `json:"updatedAt,omitempty"`
	BlockedFrom  *float64                      `json:"blockedFrom,omitempty"`
	BlockedUntil *float64                      `json:"blockedUntil,omitempty"`
	BlockReason  *ObservabilityPlusBlockReason `json:"blockReason,omitempty"`
	BlockType    ObservabilityPlusBlockType    `json:"blockType"`
}

func (o *ObservabilityPlus) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *ObservabilityPlus) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *ObservabilityPlus) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *ObservabilityPlus) GetBlockReason() *ObservabilityPlusBlockReason {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *ObservabilityPlus) GetBlockType() ObservabilityPlusBlockType {
	if o == nil {
		return ObservabilityPlusBlockType("")
	}
	return o.BlockType
}

type DataCacheBlockReason string

const (
	DataCacheBlockReasonAdminOverride  DataCacheBlockReason = "admin_override"
	DataCacheBlockReasonLimitsExceeded DataCacheBlockReason = "limits_exceeded"
)

func (e DataCacheBlockReason) ToPointer() *DataCacheBlockReason {
	return &e
}
func (e *DataCacheBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = DataCacheBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DataCacheBlockReason: %v", v)
	}
}

type FeatureBlocksDataCache struct {
	UpdatedAt    float64              `json:"updatedAt"`
	BlockedFrom  *float64             `json:"blockedFrom,omitempty"`
	BlockedUntil *float64             `json:"blockedUntil,omitempty"`
	BlockReason  DataCacheBlockReason `json:"blockReason"`
}

func (o *FeatureBlocksDataCache) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *FeatureBlocksDataCache) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *FeatureBlocksDataCache) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *FeatureBlocksDataCache) GetBlockReason() DataCacheBlockReason {
	if o == nil {
		return DataCacheBlockReason("")
	}
	return o.BlockReason
}

type ImageOptimizationTransformationBlockReason string

const (
	ImageOptimizationTransformationBlockReasonAdminOverride  ImageOptimizationTransformationBlockReason = "admin_override"
	ImageOptimizationTransformationBlockReasonLimitsExceeded ImageOptimizationTransformationBlockReason = "limits_exceeded"
)

func (e ImageOptimizationTransformationBlockReason) ToPointer() *ImageOptimizationTransformationBlockReason {
	return &e
}
func (e *ImageOptimizationTransformationBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = ImageOptimizationTransformationBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ImageOptimizationTransformationBlockReason: %v", v)
	}
}

type FeatureBlocksImageOptimizationTransformation struct {
	UpdatedAt    float64                                    `json:"updatedAt"`
	BlockedFrom  *float64                                   `json:"blockedFrom,omitempty"`
	BlockedUntil *float64                                   `json:"blockedUntil,omitempty"`
	BlockReason  ImageOptimizationTransformationBlockReason `json:"blockReason"`
}

func (o *FeatureBlocksImageOptimizationTransformation) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *FeatureBlocksImageOptimizationTransformation) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *FeatureBlocksImageOptimizationTransformation) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *FeatureBlocksImageOptimizationTransformation) GetBlockReason() ImageOptimizationTransformationBlockReason {
	if o == nil {
		return ImageOptimizationTransformationBlockReason("")
	}
	return o.BlockReason
}

type SourceImagesBlockReason string

const (
	SourceImagesBlockReasonAdminOverride  SourceImagesBlockReason = "admin_override"
	SourceImagesBlockReasonLimitsExceeded SourceImagesBlockReason = "limits_exceeded"
)

func (e SourceImagesBlockReason) ToPointer() *SourceImagesBlockReason {
	return &e
}
func (e *SourceImagesBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = SourceImagesBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SourceImagesBlockReason: %v", v)
	}
}

type FeatureBlocksSourceImages struct {
	UpdatedAt    float64                 `json:"updatedAt"`
	BlockedFrom  *float64                `json:"blockedFrom,omitempty"`
	BlockedUntil *float64                `json:"blockedUntil,omitempty"`
	BlockReason  SourceImagesBlockReason `json:"blockReason"`
}

func (o *FeatureBlocksSourceImages) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *FeatureBlocksSourceImages) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *FeatureBlocksSourceImages) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *FeatureBlocksSourceImages) GetBlockReason() SourceImagesBlockReason {
	if o == nil {
		return SourceImagesBlockReason("")
	}
	return o.BlockReason
}

type BlobBlockReason string

const (
	BlobBlockReasonAdminOverride  BlobBlockReason = "admin_override"
	BlobBlockReasonLimitsExceeded BlobBlockReason = "limits_exceeded"
)

func (e BlobBlockReason) ToPointer() *BlobBlockReason {
	return &e
}
func (e *BlobBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = BlobBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BlobBlockReason: %v", v)
	}
}

type BlobOverageReason string

const (
	BlobOverageReasonAnalyticsUsage                          BlobOverageReason = "analyticsUsage"
	BlobOverageReasonArtifacts                               BlobOverageReason = "artifacts"
	BlobOverageReasonBandwidth                               BlobOverageReason = "bandwidth"
	BlobOverageReasonBlobTotalAdvancedRequests               BlobOverageReason = "blobTotalAdvancedRequests"
	BlobOverageReasonBlobTotalAvgSizeInBytes                 BlobOverageReason = "blobTotalAvgSizeInBytes"
	BlobOverageReasonBlobTotalGetResponseObjectSizeInBytes   BlobOverageReason = "blobTotalGetResponseObjectSizeInBytes"
	BlobOverageReasonBlobTotalSimpleRequests                 BlobOverageReason = "blobTotalSimpleRequests"
	BlobOverageReasonConnectDataTransfer                     BlobOverageReason = "connectDataTransfer"
	BlobOverageReasonDataCacheRead                           BlobOverageReason = "dataCacheRead"
	BlobOverageReasonDataCacheWrite                          BlobOverageReason = "dataCacheWrite"
	BlobOverageReasonEdgeConfigRead                          BlobOverageReason = "edgeConfigRead"
	BlobOverageReasonEdgeConfigWrite                         BlobOverageReason = "edgeConfigWrite"
	BlobOverageReasonEdgeFunctionExecutionUnits              BlobOverageReason = "edgeFunctionExecutionUnits"
	BlobOverageReasonEdgeMiddlewareInvocations               BlobOverageReason = "edgeMiddlewareInvocations"
	BlobOverageReasonEdgeRequestAdditionalCPUDuration        BlobOverageReason = "edgeRequestAdditionalCpuDuration"
	BlobOverageReasonEdgeRequest                             BlobOverageReason = "edgeRequest"
	BlobOverageReasonElasticConcurrencyBuildSlots            BlobOverageReason = "elasticConcurrencyBuildSlots"
	BlobOverageReasonFastDataTransfer                        BlobOverageReason = "fastDataTransfer"
	BlobOverageReasonFastOriginTransfer                      BlobOverageReason = "fastOriginTransfer"
	BlobOverageReasonFluidCPUDuration                        BlobOverageReason = "fluidCpuDuration"
	BlobOverageReasonFluidDuration                           BlobOverageReason = "fluidDuration"
	BlobOverageReasonFunctionDuration                        BlobOverageReason = "functionDuration"
	BlobOverageReasonFunctionInvocation                      BlobOverageReason = "functionInvocation"
	BlobOverageReasonImageOptimizationCacheRead              BlobOverageReason = "imageOptimizationCacheRead"
	BlobOverageReasonImageOptimizationCacheWrite             BlobOverageReason = "imageOptimizationCacheWrite"
	BlobOverageReasonImageOptimizationTransformation         BlobOverageReason = "imageOptimizationTransformation"
	BlobOverageReasonLogDrainsVolume                         BlobOverageReason = "logDrainsVolume"
	BlobOverageReasonMonitoringMetric                        BlobOverageReason = "monitoringMetric"
	BlobOverageReasonBlobDataTransfer                        BlobOverageReason = "blobDataTransfer"
	BlobOverageReasonObservabilityEvent                      BlobOverageReason = "observabilityEvent"
	BlobOverageReasonOnDemandConcurrencyMinutes              BlobOverageReason = "onDemandConcurrencyMinutes"
	BlobOverageReasonPostgresComputeTime                     BlobOverageReason = "postgresComputeTime"
	BlobOverageReasonPostgresDataStorage                     BlobOverageReason = "postgresDataStorage"
	BlobOverageReasonPostgresDataTransfer                    BlobOverageReason = "postgresDataTransfer"
	BlobOverageReasonPostgresDatabase                        BlobOverageReason = "postgresDatabase"
	BlobOverageReasonPostgresWrittenData                     BlobOverageReason = "postgresWrittenData"
	BlobOverageReasonRuntimeCacheRead                        BlobOverageReason = "runtimeCacheRead"
	BlobOverageReasonRuntimeCacheWrite                       BlobOverageReason = "runtimeCacheWrite"
	BlobOverageReasonServerlessFunctionExecution             BlobOverageReason = "serverlessFunctionExecution"
	BlobOverageReasonSourceImages                            BlobOverageReason = "sourceImages"
	BlobOverageReasonStorageRedisTotalBandwidthInBytes       BlobOverageReason = "storageRedisTotalBandwidthInBytes"
	BlobOverageReasonStorageRedisTotalCommands               BlobOverageReason = "storageRedisTotalCommands"
	BlobOverageReasonStorageRedisTotalDailyAvgStorageInBytes BlobOverageReason = "storageRedisTotalDailyAvgStorageInBytes"
	BlobOverageReasonStorageRedisTotalDatabases              BlobOverageReason = "storageRedisTotalDatabases"
	BlobOverageReasonWafOwaspExcessBytes                     BlobOverageReason = "wafOwaspExcessBytes"
	BlobOverageReasonWafOwaspRequests                        BlobOverageReason = "wafOwaspRequests"
	BlobOverageReasonWafRateLimitRequest                     BlobOverageReason = "wafRateLimitRequest"
	BlobOverageReasonWebAnalyticsEvent                       BlobOverageReason = "webAnalyticsEvent"
)

func (e BlobOverageReason) ToPointer() *BlobOverageReason {
	return &e
}
func (e *BlobOverageReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "blobTotalAdvancedRequests":
		fallthrough
	case "blobTotalAvgSizeInBytes":
		fallthrough
	case "blobTotalGetResponseObjectSizeInBytes":
		fallthrough
	case "blobTotalSimpleRequests":
		fallthrough
	case "connectDataTransfer":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "edgeRequestAdditionalCpuDuration":
		fallthrough
	case "edgeRequest":
		fallthrough
	case "elasticConcurrencyBuildSlots":
		fallthrough
	case "fastDataTransfer":
		fallthrough
	case "fastOriginTransfer":
		fallthrough
	case "fluidCpuDuration":
		fallthrough
	case "fluidDuration":
		fallthrough
	case "functionDuration":
		fallthrough
	case "functionInvocation":
		fallthrough
	case "imageOptimizationCacheRead":
		fallthrough
	case "imageOptimizationCacheWrite":
		fallthrough
	case "imageOptimizationTransformation":
		fallthrough
	case "logDrainsVolume":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "blobDataTransfer":
		fallthrough
	case "observabilityEvent":
		fallthrough
	case "onDemandConcurrencyMinutes":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "runtimeCacheRead":
		fallthrough
	case "runtimeCacheWrite":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "wafOwaspExcessBytes":
		fallthrough
	case "wafOwaspRequests":
		fallthrough
	case "wafRateLimitRequest":
		fallthrough
	case "webAnalyticsEvent":
		*e = BlobOverageReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BlobOverageReason: %v", v)
	}
}

type Blob struct {
	UpdatedAt     *float64          `json:"updatedAt,omitempty"`
	BlockedFrom   *float64          `json:"blockedFrom,omitempty"`
	BlockedUntil  *float64          `json:"blockedUntil,omitempty"`
	BlockReason   *BlobBlockReason  `json:"blockReason,omitempty"`
	OverageReason BlobOverageReason `json:"overageReason"`
}

func (o *Blob) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Blob) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *Blob) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *Blob) GetBlockReason() *BlobBlockReason {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *Blob) GetOverageReason() BlobOverageReason {
	if o == nil {
		return BlobOverageReason("")
	}
	return o.OverageReason
}

type PostgresBlockReason string

const (
	PostgresBlockReasonAdminOverride  PostgresBlockReason = "admin_override"
	PostgresBlockReasonLimitsExceeded PostgresBlockReason = "limits_exceeded"
)

func (e PostgresBlockReason) ToPointer() *PostgresBlockReason {
	return &e
}
func (e *PostgresBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = PostgresBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostgresBlockReason: %v", v)
	}
}

type PostgresOverageReason string

const (
	PostgresOverageReasonAnalyticsUsage                          PostgresOverageReason = "analyticsUsage"
	PostgresOverageReasonArtifacts                               PostgresOverageReason = "artifacts"
	PostgresOverageReasonBandwidth                               PostgresOverageReason = "bandwidth"
	PostgresOverageReasonBlobTotalAdvancedRequests               PostgresOverageReason = "blobTotalAdvancedRequests"
	PostgresOverageReasonBlobTotalAvgSizeInBytes                 PostgresOverageReason = "blobTotalAvgSizeInBytes"
	PostgresOverageReasonBlobTotalGetResponseObjectSizeInBytes   PostgresOverageReason = "blobTotalGetResponseObjectSizeInBytes"
	PostgresOverageReasonBlobTotalSimpleRequests                 PostgresOverageReason = "blobTotalSimpleRequests"
	PostgresOverageReasonConnectDataTransfer                     PostgresOverageReason = "connectDataTransfer"
	PostgresOverageReasonDataCacheRead                           PostgresOverageReason = "dataCacheRead"
	PostgresOverageReasonDataCacheWrite                          PostgresOverageReason = "dataCacheWrite"
	PostgresOverageReasonEdgeConfigRead                          PostgresOverageReason = "edgeConfigRead"
	PostgresOverageReasonEdgeConfigWrite                         PostgresOverageReason = "edgeConfigWrite"
	PostgresOverageReasonEdgeFunctionExecutionUnits              PostgresOverageReason = "edgeFunctionExecutionUnits"
	PostgresOverageReasonEdgeMiddlewareInvocations               PostgresOverageReason = "edgeMiddlewareInvocations"
	PostgresOverageReasonEdgeRequestAdditionalCPUDuration        PostgresOverageReason = "edgeRequestAdditionalCpuDuration"
	PostgresOverageReasonEdgeRequest                             PostgresOverageReason = "edgeRequest"
	PostgresOverageReasonElasticConcurrencyBuildSlots            PostgresOverageReason = "elasticConcurrencyBuildSlots"
	PostgresOverageReasonFastDataTransfer                        PostgresOverageReason = "fastDataTransfer"
	PostgresOverageReasonFastOriginTransfer                      PostgresOverageReason = "fastOriginTransfer"
	PostgresOverageReasonFluidCPUDuration                        PostgresOverageReason = "fluidCpuDuration"
	PostgresOverageReasonFluidDuration                           PostgresOverageReason = "fluidDuration"
	PostgresOverageReasonFunctionDuration                        PostgresOverageReason = "functionDuration"
	PostgresOverageReasonFunctionInvocation                      PostgresOverageReason = "functionInvocation"
	PostgresOverageReasonImageOptimizationCacheRead              PostgresOverageReason = "imageOptimizationCacheRead"
	PostgresOverageReasonImageOptimizationCacheWrite             PostgresOverageReason = "imageOptimizationCacheWrite"
	PostgresOverageReasonImageOptimizationTransformation         PostgresOverageReason = "imageOptimizationTransformation"
	PostgresOverageReasonLogDrainsVolume                         PostgresOverageReason = "logDrainsVolume"
	PostgresOverageReasonMonitoringMetric                        PostgresOverageReason = "monitoringMetric"
	PostgresOverageReasonBlobDataTransfer                        PostgresOverageReason = "blobDataTransfer"
	PostgresOverageReasonObservabilityEvent                      PostgresOverageReason = "observabilityEvent"
	PostgresOverageReasonOnDemandConcurrencyMinutes              PostgresOverageReason = "onDemandConcurrencyMinutes"
	PostgresOverageReasonPostgresComputeTime                     PostgresOverageReason = "postgresComputeTime"
	PostgresOverageReasonPostgresDataStorage                     PostgresOverageReason = "postgresDataStorage"
	PostgresOverageReasonPostgresDataTransfer                    PostgresOverageReason = "postgresDataTransfer"
	PostgresOverageReasonPostgresDatabase                        PostgresOverageReason = "postgresDatabase"
	PostgresOverageReasonPostgresWrittenData                     PostgresOverageReason = "postgresWrittenData"
	PostgresOverageReasonRuntimeCacheRead                        PostgresOverageReason = "runtimeCacheRead"
	PostgresOverageReasonRuntimeCacheWrite                       PostgresOverageReason = "runtimeCacheWrite"
	PostgresOverageReasonServerlessFunctionExecution             PostgresOverageReason = "serverlessFunctionExecution"
	PostgresOverageReasonSourceImages                            PostgresOverageReason = "sourceImages"
	PostgresOverageReasonStorageRedisTotalBandwidthInBytes       PostgresOverageReason = "storageRedisTotalBandwidthInBytes"
	PostgresOverageReasonStorageRedisTotalCommands               PostgresOverageReason = "storageRedisTotalCommands"
	PostgresOverageReasonStorageRedisTotalDailyAvgStorageInBytes PostgresOverageReason = "storageRedisTotalDailyAvgStorageInBytes"
	PostgresOverageReasonStorageRedisTotalDatabases              PostgresOverageReason = "storageRedisTotalDatabases"
	PostgresOverageReasonWafOwaspExcessBytes                     PostgresOverageReason = "wafOwaspExcessBytes"
	PostgresOverageReasonWafOwaspRequests                        PostgresOverageReason = "wafOwaspRequests"
	PostgresOverageReasonWafRateLimitRequest                     PostgresOverageReason = "wafRateLimitRequest"
	PostgresOverageReasonWebAnalyticsEvent                       PostgresOverageReason = "webAnalyticsEvent"
)

func (e PostgresOverageReason) ToPointer() *PostgresOverageReason {
	return &e
}
func (e *PostgresOverageReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "blobTotalAdvancedRequests":
		fallthrough
	case "blobTotalAvgSizeInBytes":
		fallthrough
	case "blobTotalGetResponseObjectSizeInBytes":
		fallthrough
	case "blobTotalSimpleRequests":
		fallthrough
	case "connectDataTransfer":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "edgeRequestAdditionalCpuDuration":
		fallthrough
	case "edgeRequest":
		fallthrough
	case "elasticConcurrencyBuildSlots":
		fallthrough
	case "fastDataTransfer":
		fallthrough
	case "fastOriginTransfer":
		fallthrough
	case "fluidCpuDuration":
		fallthrough
	case "fluidDuration":
		fallthrough
	case "functionDuration":
		fallthrough
	case "functionInvocation":
		fallthrough
	case "imageOptimizationCacheRead":
		fallthrough
	case "imageOptimizationCacheWrite":
		fallthrough
	case "imageOptimizationTransformation":
		fallthrough
	case "logDrainsVolume":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "blobDataTransfer":
		fallthrough
	case "observabilityEvent":
		fallthrough
	case "onDemandConcurrencyMinutes":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "runtimeCacheRead":
		fallthrough
	case "runtimeCacheWrite":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "wafOwaspExcessBytes":
		fallthrough
	case "wafOwaspRequests":
		fallthrough
	case "wafRateLimitRequest":
		fallthrough
	case "webAnalyticsEvent":
		*e = PostgresOverageReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PostgresOverageReason: %v", v)
	}
}

type Postgres struct {
	UpdatedAt     *float64              `json:"updatedAt,omitempty"`
	BlockedFrom   *float64              `json:"blockedFrom,omitempty"`
	BlockedUntil  *float64              `json:"blockedUntil,omitempty"`
	BlockReason   *PostgresBlockReason  `json:"blockReason,omitempty"`
	OverageReason PostgresOverageReason `json:"overageReason"`
}

func (o *Postgres) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Postgres) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *Postgres) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *Postgres) GetBlockReason() *PostgresBlockReason {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *Postgres) GetOverageReason() PostgresOverageReason {
	if o == nil {
		return PostgresOverageReason("")
	}
	return o.OverageReason
}

type RedisBlockReason string

const (
	RedisBlockReasonAdminOverride  RedisBlockReason = "admin_override"
	RedisBlockReasonLimitsExceeded RedisBlockReason = "limits_exceeded"
)

func (e RedisBlockReason) ToPointer() *RedisBlockReason {
	return &e
}
func (e *RedisBlockReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "admin_override":
		fallthrough
	case "limits_exceeded":
		*e = RedisBlockReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RedisBlockReason: %v", v)
	}
}

type RedisOverageReason string

const (
	RedisOverageReasonAnalyticsUsage                          RedisOverageReason = "analyticsUsage"
	RedisOverageReasonArtifacts                               RedisOverageReason = "artifacts"
	RedisOverageReasonBandwidth                               RedisOverageReason = "bandwidth"
	RedisOverageReasonBlobTotalAdvancedRequests               RedisOverageReason = "blobTotalAdvancedRequests"
	RedisOverageReasonBlobTotalAvgSizeInBytes                 RedisOverageReason = "blobTotalAvgSizeInBytes"
	RedisOverageReasonBlobTotalGetResponseObjectSizeInBytes   RedisOverageReason = "blobTotalGetResponseObjectSizeInBytes"
	RedisOverageReasonBlobTotalSimpleRequests                 RedisOverageReason = "blobTotalSimpleRequests"
	RedisOverageReasonConnectDataTransfer                     RedisOverageReason = "connectDataTransfer"
	RedisOverageReasonDataCacheRead                           RedisOverageReason = "dataCacheRead"
	RedisOverageReasonDataCacheWrite                          RedisOverageReason = "dataCacheWrite"
	RedisOverageReasonEdgeConfigRead                          RedisOverageReason = "edgeConfigRead"
	RedisOverageReasonEdgeConfigWrite                         RedisOverageReason = "edgeConfigWrite"
	RedisOverageReasonEdgeFunctionExecutionUnits              RedisOverageReason = "edgeFunctionExecutionUnits"
	RedisOverageReasonEdgeMiddlewareInvocations               RedisOverageReason = "edgeMiddlewareInvocations"
	RedisOverageReasonEdgeRequestAdditionalCPUDuration        RedisOverageReason = "edgeRequestAdditionalCpuDuration"
	RedisOverageReasonEdgeRequest                             RedisOverageReason = "edgeRequest"
	RedisOverageReasonElasticConcurrencyBuildSlots            RedisOverageReason = "elasticConcurrencyBuildSlots"
	RedisOverageReasonFastDataTransfer                        RedisOverageReason = "fastDataTransfer"
	RedisOverageReasonFastOriginTransfer                      RedisOverageReason = "fastOriginTransfer"
	RedisOverageReasonFluidCPUDuration                        RedisOverageReason = "fluidCpuDuration"
	RedisOverageReasonFluidDuration                           RedisOverageReason = "fluidDuration"
	RedisOverageReasonFunctionDuration                        RedisOverageReason = "functionDuration"
	RedisOverageReasonFunctionInvocation                      RedisOverageReason = "functionInvocation"
	RedisOverageReasonImageOptimizationCacheRead              RedisOverageReason = "imageOptimizationCacheRead"
	RedisOverageReasonImageOptimizationCacheWrite             RedisOverageReason = "imageOptimizationCacheWrite"
	RedisOverageReasonImageOptimizationTransformation         RedisOverageReason = "imageOptimizationTransformation"
	RedisOverageReasonLogDrainsVolume                         RedisOverageReason = "logDrainsVolume"
	RedisOverageReasonMonitoringMetric                        RedisOverageReason = "monitoringMetric"
	RedisOverageReasonBlobDataTransfer                        RedisOverageReason = "blobDataTransfer"
	RedisOverageReasonObservabilityEvent                      RedisOverageReason = "observabilityEvent"
	RedisOverageReasonOnDemandConcurrencyMinutes              RedisOverageReason = "onDemandConcurrencyMinutes"
	RedisOverageReasonPostgresComputeTime                     RedisOverageReason = "postgresComputeTime"
	RedisOverageReasonPostgresDataStorage                     RedisOverageReason = "postgresDataStorage"
	RedisOverageReasonPostgresDataTransfer                    RedisOverageReason = "postgresDataTransfer"
	RedisOverageReasonPostgresDatabase                        RedisOverageReason = "postgresDatabase"
	RedisOverageReasonPostgresWrittenData                     RedisOverageReason = "postgresWrittenData"
	RedisOverageReasonRuntimeCacheRead                        RedisOverageReason = "runtimeCacheRead"
	RedisOverageReasonRuntimeCacheWrite                       RedisOverageReason = "runtimeCacheWrite"
	RedisOverageReasonServerlessFunctionExecution             RedisOverageReason = "serverlessFunctionExecution"
	RedisOverageReasonSourceImages                            RedisOverageReason = "sourceImages"
	RedisOverageReasonStorageRedisTotalBandwidthInBytes       RedisOverageReason = "storageRedisTotalBandwidthInBytes"
	RedisOverageReasonStorageRedisTotalCommands               RedisOverageReason = "storageRedisTotalCommands"
	RedisOverageReasonStorageRedisTotalDailyAvgStorageInBytes RedisOverageReason = "storageRedisTotalDailyAvgStorageInBytes"
	RedisOverageReasonStorageRedisTotalDatabases              RedisOverageReason = "storageRedisTotalDatabases"
	RedisOverageReasonWafOwaspExcessBytes                     RedisOverageReason = "wafOwaspExcessBytes"
	RedisOverageReasonWafOwaspRequests                        RedisOverageReason = "wafOwaspRequests"
	RedisOverageReasonWafRateLimitRequest                     RedisOverageReason = "wafRateLimitRequest"
	RedisOverageReasonWebAnalyticsEvent                       RedisOverageReason = "webAnalyticsEvent"
)

func (e RedisOverageReason) ToPointer() *RedisOverageReason {
	return &e
}
func (e *RedisOverageReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "analyticsUsage":
		fallthrough
	case "artifacts":
		fallthrough
	case "bandwidth":
		fallthrough
	case "blobTotalAdvancedRequests":
		fallthrough
	case "blobTotalAvgSizeInBytes":
		fallthrough
	case "blobTotalGetResponseObjectSizeInBytes":
		fallthrough
	case "blobTotalSimpleRequests":
		fallthrough
	case "connectDataTransfer":
		fallthrough
	case "dataCacheRead":
		fallthrough
	case "dataCacheWrite":
		fallthrough
	case "edgeConfigRead":
		fallthrough
	case "edgeConfigWrite":
		fallthrough
	case "edgeFunctionExecutionUnits":
		fallthrough
	case "edgeMiddlewareInvocations":
		fallthrough
	case "edgeRequestAdditionalCpuDuration":
		fallthrough
	case "edgeRequest":
		fallthrough
	case "elasticConcurrencyBuildSlots":
		fallthrough
	case "fastDataTransfer":
		fallthrough
	case "fastOriginTransfer":
		fallthrough
	case "fluidCpuDuration":
		fallthrough
	case "fluidDuration":
		fallthrough
	case "functionDuration":
		fallthrough
	case "functionInvocation":
		fallthrough
	case "imageOptimizationCacheRead":
		fallthrough
	case "imageOptimizationCacheWrite":
		fallthrough
	case "imageOptimizationTransformation":
		fallthrough
	case "logDrainsVolume":
		fallthrough
	case "monitoringMetric":
		fallthrough
	case "blobDataTransfer":
		fallthrough
	case "observabilityEvent":
		fallthrough
	case "onDemandConcurrencyMinutes":
		fallthrough
	case "postgresComputeTime":
		fallthrough
	case "postgresDataStorage":
		fallthrough
	case "postgresDataTransfer":
		fallthrough
	case "postgresDatabase":
		fallthrough
	case "postgresWrittenData":
		fallthrough
	case "runtimeCacheRead":
		fallthrough
	case "runtimeCacheWrite":
		fallthrough
	case "serverlessFunctionExecution":
		fallthrough
	case "sourceImages":
		fallthrough
	case "storageRedisTotalBandwidthInBytes":
		fallthrough
	case "storageRedisTotalCommands":
		fallthrough
	case "storageRedisTotalDailyAvgStorageInBytes":
		fallthrough
	case "storageRedisTotalDatabases":
		fallthrough
	case "wafOwaspExcessBytes":
		fallthrough
	case "wafOwaspRequests":
		fallthrough
	case "wafRateLimitRequest":
		fallthrough
	case "webAnalyticsEvent":
		*e = RedisOverageReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RedisOverageReason: %v", v)
	}
}

type Redis struct {
	UpdatedAt     *float64           `json:"updatedAt,omitempty"`
	BlockedFrom   *float64           `json:"blockedFrom,omitempty"`
	BlockedUntil  *float64           `json:"blockedUntil,omitempty"`
	BlockReason   *RedisBlockReason  `json:"blockReason,omitempty"`
	OverageReason RedisOverageReason `json:"overageReason"`
}

func (o *Redis) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Redis) GetBlockedFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedFrom
}

func (o *Redis) GetBlockedUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.BlockedUntil
}

func (o *Redis) GetBlockReason() *RedisBlockReason {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *Redis) GetOverageReason() RedisOverageReason {
	if o == nil {
		return RedisOverageReason("")
	}
	return o.OverageReason
}

// UserEventFeatureBlocks - Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all).
type UserEventFeatureBlocks struct {
	WebAnalytics *UserEventWebAnalytics `json:"webAnalytics,omitempty"`
	// A soft block indicates a temporary pause in data collection (ex limit exceeded for the current cycle) A hard block indicates a stoppage in data collection that requires manual intervention (ex upgrading a pro trial)
	Monitoring                      *Monitoring                                   `json:"monitoring,omitempty"`
	ObservabilityPlus               *ObservabilityPlus                            `json:"observabilityPlus,omitempty"`
	DataCache                       *FeatureBlocksDataCache                       `json:"dataCache,omitempty"`
	ImageOptimizationTransformation *FeatureBlocksImageOptimizationTransformation `json:"imageOptimizationTransformation,omitempty"`
	SourceImages                    *FeatureBlocksSourceImages                    `json:"sourceImages,omitempty"`
	Blob                            *Blob                                         `json:"blob,omitempty"`
	Postgres                        *Postgres                                     `json:"postgres,omitempty"`
	Redis                           *Redis                                        `json:"redis,omitempty"`
}

func (o *UserEventFeatureBlocks) GetWebAnalytics() *UserEventWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UserEventFeatureBlocks) GetMonitoring() *Monitoring {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UserEventFeatureBlocks) GetObservabilityPlus() *ObservabilityPlus {
	if o == nil {
		return nil
	}
	return o.ObservabilityPlus
}

func (o *UserEventFeatureBlocks) GetDataCache() *FeatureBlocksDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UserEventFeatureBlocks) GetImageOptimizationTransformation() *FeatureBlocksImageOptimizationTransformation {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationTransformation
}

func (o *UserEventFeatureBlocks) GetSourceImages() *FeatureBlocksSourceImages {
	if o == nil {
		return nil
	}
	return o.SourceImages
}

func (o *UserEventFeatureBlocks) GetBlob() *Blob {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UserEventFeatureBlocks) GetPostgres() *Postgres {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UserEventFeatureBlocks) GetRedis() *Redis {
	if o == nil {
		return nil
	}
	return o.Redis
}

type Version string

const (
	VersionNorthstar Version = "northstar"
)

func (e Version) ToPointer() *Version {
	return &e
}
func (e *Version) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "northstar":
		*e = Version(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Version: %v", v)
	}
}

// NorthstarMigration - An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`.
type NorthstarMigration struct {
	// The ID of the team we created for this user.
	TeamID string `json:"teamId"`
	// The number of projects migrated for this user.
	Projects float64 `json:"projects"`
	// The number of stores migrated for this user.
	Stores float64 `json:"stores"`
	// The number of integration configurations migrated for this user.
	IntegrationConfigurations float64 `json:"integrationConfigurations"`
	// The number of integration clients migrated for this user.
	IntegrationClients float64 `json:"integrationClients"`
	// The migration start time timestamp for this user.
	StartTime float64 `json:"startTime"`
	// The migration end time timestamp for this user.
	EndTime float64 `json:"endTime"`
}

func (o *NorthstarMigration) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *NorthstarMigration) GetProjects() float64 {
	if o == nil {
		return 0.0
	}
	return o.Projects
}

func (o *NorthstarMigration) GetStores() float64 {
	if o == nil {
		return 0.0
	}
	return o.Stores
}

func (o *NorthstarMigration) GetIntegrationConfigurations() float64 {
	if o == nil {
		return 0.0
	}
	return o.IntegrationConfigurations
}

func (o *NorthstarMigration) GetIntegrationClients() float64 {
	if o == nil {
		return 0.0
	}
	return o.IntegrationClients
}

func (o *NorthstarMigration) GetStartTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartTime
}

func (o *NorthstarMigration) GetEndTime() float64 {
	if o == nil {
		return 0.0
	}
	return o.EndTime
}

type Totp struct {
	Secret    string  `json:"secret"`
	CreatedAt float64 `json:"createdAt"`
}

func (o *Totp) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *Totp) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// MfaConfiguration - MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in.
type MfaConfiguration struct {
	Enabled       bool     `json:"enabled"`
	EnabledAt     *float64 `json:"enabledAt,omitempty"`
	RecoveryCodes []string `json:"recoveryCodes"`
	Totp          *Totp    `json:"totp,omitempty"`
}

func (o *MfaConfiguration) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *MfaConfiguration) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *MfaConfiguration) GetRecoveryCodes() []string {
	if o == nil {
		return []string{}
	}
	return o.RecoveryCodes
}

func (o *MfaConfiguration) GetTotp() *Totp {
	if o == nil {
		return nil
	}
	return o.Totp
}

type NewOwner struct {
	Abuse                           *Abuse                                    `json:"abuse,omitempty"`
	AcceptanceState                 *string                                   `json:"acceptanceState,omitempty"`
	AcceptedAt                      *float64                                  `json:"acceptedAt,omitempty"`
	Avatar                          *string                                   `json:"avatar,omitempty"`
	Billing                         UserEventBilling                          `json:"billing"`
	Blocked                         *float64                                  `json:"blocked"`
	BlockReason                     *string                                   `json:"blockReason,omitempty"`
	Created                         *float64                                  `json:"created,omitempty"`
	CreatedAt                       float64                                   `json:"createdAt"`
	Credentials                     []CredentialUnion                         `json:"credentials,omitempty"`
	CustomerID                      *string                                   `json:"customerId,omitempty"`
	OrbCustomerID                   *string                                   `json:"orbCustomerId,omitempty"`
	DataCache                       *UserEventDataCache                       `json:"dataCache,omitempty"`
	DeletedAt                       *float64                                  `json:"deletedAt,omitempty"`
	DeploymentSecret                string                                    `json:"deploymentSecret"`
	DismissedTeams                  []string                                  `json:"dismissedTeams,omitempty"`
	DismissedToasts                 []UserEventDismissedToast                 `json:"dismissedToasts,omitempty"`
	FavoriteProjectsAndSpaces       []UserEventFavoriteProjectsAndSpace       `json:"favoriteProjectsAndSpaces,omitempty"`
	Email                           string                                    `json:"email"`
	ID                              string                                    `json:"id"`
	ImportFlowGitNamespace          *UserEventImportFlowGitNamespace          `json:"importFlowGitNamespace,omitempty"`
	ImportFlowGitNamespaceID        *UserEventImportFlowGitNamespaceID        `json:"importFlowGitNamespaceId,omitempty"`
	ImportFlowGitProvider           *UserEventImportFlowGitProvider           `json:"importFlowGitProvider,omitempty"`
	PreferredScopesAndGitNamespaces []UserEventPreferredScopesAndGitNamespace `json:"preferredScopesAndGitNamespaces,omitempty"`
	IsDomainReseller                *bool                                     `json:"isDomainReseller,omitempty"`
	IsZeitPub                       *bool                                     `json:"isZeitPub,omitempty"`
	MaxActiveSlots                  *float64                                  `json:"maxActiveSlots,omitempty"`
	Name                            *string                                   `json:"name,omitempty"`
	PhoneNumber                     *string                                   `json:"phoneNumber,omitempty"`
	PlatformVersion                 *float64                                  `json:"platformVersion"`
	PreventAutoBlocking             *PreventAutoBlocking                      `json:"preventAutoBlocking,omitempty"`
	// Overrides our DEFAULT project domains limit per account or per project.
	ProjectDomainsLimit *float64 `json:"projectDomainsLimit,omitempty"`
	// Represents configuration for remote caching
	RemoteCaching                *RemoteCachingUser       `json:"remoteCaching,omitempty"`
	RemovedAliasesAt             *float64                 `json:"removedAliasesAt,omitempty"`
	RemovedBillingSubscriptionAt *float64                 `json:"removedBillingSubscriptionAt,omitempty"`
	RemovedConfigurationsAt      *float64                 `json:"removedConfigurationsAt,omitempty"`
	RemovedDeploymentsAt         *float64                 `json:"removedDeploymentsAt,omitempty"`
	RemovedDomiansAt             *float64                 `json:"removedDomiansAt,omitempty"`
	RemovedEventsAt              *float64                 `json:"removedEventsAt,omitempty"`
	RemovedProjectsAt            *float64                 `json:"removedProjectsAt,omitempty"`
	RemovedSecretsAt             *float64                 `json:"removedSecretsAt,omitempty"`
	RemovedSharedEnvVarsAt       *float64                 `json:"removedSharedEnvVarsAt,omitempty"`
	RemovedEdgeConfigsAt         *float64                 `json:"removedEdgeConfigsAt,omitempty"`
	ResourceConfig               *UserEventResourceConfig `json:"resourceConfig,omitempty"`
	// User | Team resource limits
	ResourceLimits       map[string]ResourceLimits      `json:"resourceLimits,omitempty"`
	ActiveDashboardViews []UserEventActiveDashboardView `json:"activeDashboardViews,omitempty"`
	SecondaryEmails      []SecondaryEmail               `json:"secondaryEmails,omitempty"`
	EmailNotifications   *EmailNotifications            `json:"emailNotifications,omitempty"`
	SiftScore            *float64                       `json:"siftScore,omitempty"`
	SiftScores           map[string]SiftScores          `json:"siftScores,omitempty"`
	SiftRoute            *SiftRoute                     `json:"siftRoute,omitempty"`
	SfdcID               *string                        `json:"sfdcId,omitempty"`
	SoftBlock            *UserEventSoftBlock            `json:"softBlock,omitempty"`
	StagingPrefix        string                         `json:"stagingPrefix"`
	SysToken             string                         `json:"sysToken"`
	// A helper that allows to describe a relationship attribute. It receives the shape of a relationship plus the foreignKey name to make it mandatory in the resulting type.
	Teams []TeamUser `json:"teams,omitempty"`
	// Introduced 2022-04-12 An array of teamIds (for trial teams created after 2022-04-01), created by the user in question. Used in determining whether the team has a trial available in utils/api-teams/user-has-trial-available.ts.
	TrialTeamIds []string `json:"trialTeamIds,omitempty"`
	// Introduced 2022-04-19 Number of maximum trials to allocate to a user. When undefined, defaults to MAX_TRIALS in utils/api-teams/user-has-trial-available.ts. This is set to trialTeamIds + 1 by services/api-backoffice/src/handlers/add-additional-trial.ts.
	MaxTrials *float64 `json:"maxTrials,omitempty"`
	// Deprecated on 2022-04-12 in favor of trialTeamIds and using utils/api-teams/user-has-trial-available.ts.
	TrialTeamID *string         `json:"trialTeamId,omitempty"`
	Type        PayloadTypeUser `json:"type"`
	// Contains the timestamps when a user was notified about their usage
	UsageAlerts        *UsageAlerts        `json:"usageAlerts,omitempty"`
	OverageUsageAlerts *OverageUsageAlerts `json:"overageUsageAlerts,omitempty"`
	// Contains the timestamps for usage summary emails.
	OverageMetadata *OverageMetadata `json:"overageMetadata,omitempty"`
	Username        string           `json:"username"`
	UpdatedAt       float64          `json:"updatedAt"`
	// Whether the Vercel Toolbar is enabled for preview deployments.
	EnablePreviewFeedback *UserEventEnablePreviewFeedback `json:"enablePreviewFeedback,omitempty"`
	// Information about which features are blocked for a user. Blocks can be either soft (the user can still access the feature, but with a warning, e.g. prompting an upgrade) or hard (the user cannot access the feature at all).
	FeatureBlocks *UserEventFeatureBlocks `json:"featureBlocks,omitempty"`
	DefaultTeamID *string                 `json:"defaultTeamId,omitempty"`
	Version       Version                 `json:"version"`
	// An archive of information about the Northstar migration, derived from the old (deprecated) property, `northstarMigrationEvents`.
	NorthstarMigration *NorthstarMigration `json:"northstarMigration,omitempty"`
	// The salesforce opportunity ID that this user is linked to. This is used to automatically associate a team of the user's choosing with the opportunity.
	OpportunityID *string `json:"opportunityId,omitempty"`
	// MFA configuration. When enabled, the user will be required to provide a second factor of authentication when logging in.
	MfaConfiguration *MfaConfiguration `json:"mfaConfiguration,omitempty"`
}

func (o *NewOwner) GetAbuse() *Abuse {
	if o == nil {
		return nil
	}
	return o.Abuse
}

func (o *NewOwner) GetAcceptanceState() *string {
	if o == nil {
		return nil
	}
	return o.AcceptanceState
}

func (o *NewOwner) GetAcceptedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AcceptedAt
}

func (o *NewOwner) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *NewOwner) GetBilling() UserEventBilling {
	if o == nil {
		return UserEventBilling{}
	}
	return o.Billing
}

func (o *NewOwner) GetBlocked() *float64 {
	if o == nil {
		return nil
	}
	return o.Blocked
}

func (o *NewOwner) GetBlockReason() *string {
	if o == nil {
		return nil
	}
	return o.BlockReason
}

func (o *NewOwner) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *NewOwner) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *NewOwner) GetCredentials() []CredentialUnion {
	if o == nil {
		return nil
	}
	return o.Credentials
}

func (o *NewOwner) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *NewOwner) GetOrbCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.OrbCustomerID
}

func (o *NewOwner) GetDataCache() *UserEventDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *NewOwner) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *NewOwner) GetDeploymentSecret() string {
	if o == nil {
		return ""
	}
	return o.DeploymentSecret
}

func (o *NewOwner) GetDismissedTeams() []string {
	if o == nil {
		return nil
	}
	return o.DismissedTeams
}

func (o *NewOwner) GetDismissedToasts() []UserEventDismissedToast {
	if o == nil {
		return nil
	}
	return o.DismissedToasts
}

func (o *NewOwner) GetFavoriteProjectsAndSpaces() []UserEventFavoriteProjectsAndSpace {
	if o == nil {
		return nil
	}
	return o.FavoriteProjectsAndSpaces
}

func (o *NewOwner) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *NewOwner) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *NewOwner) GetImportFlowGitNamespace() *UserEventImportFlowGitNamespace {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitNamespace
}

func (o *NewOwner) GetImportFlowGitNamespaceID() *UserEventImportFlowGitNamespaceID {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitNamespaceID
}

func (o *NewOwner) GetImportFlowGitProvider() *UserEventImportFlowGitProvider {
	if o == nil {
		return nil
	}
	return o.ImportFlowGitProvider
}

func (o *NewOwner) GetPreferredScopesAndGitNamespaces() []UserEventPreferredScopesAndGitNamespace {
	if o == nil {
		return nil
	}
	return o.PreferredScopesAndGitNamespaces
}

func (o *NewOwner) GetIsDomainReseller() *bool {
	if o == nil {
		return nil
	}
	return o.IsDomainReseller
}

func (o *NewOwner) GetIsZeitPub() *bool {
	if o == nil {
		return nil
	}
	return o.IsZeitPub
}

func (o *NewOwner) GetMaxActiveSlots() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxActiveSlots
}

func (o *NewOwner) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *NewOwner) GetPhoneNumber() *string {
	if o == nil {
		return nil
	}
	return o.PhoneNumber
}

func (o *NewOwner) GetPlatformVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.PlatformVersion
}

func (o *NewOwner) GetPreventAutoBlocking() *PreventAutoBlocking {
	if o == nil {
		return nil
	}
	return o.PreventAutoBlocking
}

func (o *NewOwner) GetProjectDomainsLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectDomainsLimit
}

func (o *NewOwner) GetRemoteCaching() *RemoteCachingUser {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *NewOwner) GetRemovedAliasesAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedAliasesAt
}

func (o *NewOwner) GetRemovedBillingSubscriptionAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedBillingSubscriptionAt
}

func (o *NewOwner) GetRemovedConfigurationsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedConfigurationsAt
}

func (o *NewOwner) GetRemovedDeploymentsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedDeploymentsAt
}

func (o *NewOwner) GetRemovedDomiansAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedDomiansAt
}

func (o *NewOwner) GetRemovedEventsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedEventsAt
}

func (o *NewOwner) GetRemovedProjectsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedProjectsAt
}

func (o *NewOwner) GetRemovedSecretsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedSecretsAt
}

func (o *NewOwner) GetRemovedSharedEnvVarsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedSharedEnvVarsAt
}

func (o *NewOwner) GetRemovedEdgeConfigsAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RemovedEdgeConfigsAt
}

func (o *NewOwner) GetResourceConfig() *UserEventResourceConfig {
	if o == nil {
		return nil
	}
	return o.ResourceConfig
}

func (o *NewOwner) GetResourceLimits() map[string]ResourceLimits {
	if o == nil {
		return nil
	}
	return o.ResourceLimits
}

func (o *NewOwner) GetActiveDashboardViews() []UserEventActiveDashboardView {
	if o == nil {
		return nil
	}
	return o.ActiveDashboardViews
}

func (o *NewOwner) GetSecondaryEmails() []SecondaryEmail {
	if o == nil {
		return nil
	}
	return o.SecondaryEmails
}

func (o *NewOwner) GetEmailNotifications() *EmailNotifications {
	if o == nil {
		return nil
	}
	return o.EmailNotifications
}

func (o *NewOwner) GetSiftScore() *float64 {
	if o == nil {
		return nil
	}
	return o.SiftScore
}

func (o *NewOwner) GetSiftScores() map[string]SiftScores {
	if o == nil {
		return nil
	}
	return o.SiftScores
}

func (o *NewOwner) GetSiftRoute() *SiftRoute {
	if o == nil {
		return nil
	}
	return o.SiftRoute
}

func (o *NewOwner) GetSfdcID() *string {
	if o == nil {
		return nil
	}
	return o.SfdcID
}

func (o *NewOwner) GetSoftBlock() *UserEventSoftBlock {
	if o == nil {
		return nil
	}
	return o.SoftBlock
}

func (o *NewOwner) GetStagingPrefix() string {
	if o == nil {
		return ""
	}
	return o.StagingPrefix
}

func (o *NewOwner) GetSysToken() string {
	if o == nil {
		return ""
	}
	return o.SysToken
}

func (o *NewOwner) GetTeams() []TeamUser {
	if o == nil {
		return nil
	}
	return o.Teams
}

func (o *NewOwner) GetTrialTeamIds() []string {
	if o == nil {
		return nil
	}
	return o.TrialTeamIds
}

func (o *NewOwner) GetMaxTrials() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxTrials
}

func (o *NewOwner) GetTrialTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TrialTeamID
}

func (o *NewOwner) GetType() PayloadTypeUser {
	if o == nil {
		return PayloadTypeUser("")
	}
	return o.Type
}

func (o *NewOwner) GetUsageAlerts() *UsageAlerts {
	if o == nil {
		return nil
	}
	return o.UsageAlerts
}

func (o *NewOwner) GetOverageUsageAlerts() *OverageUsageAlerts {
	if o == nil {
		return nil
	}
	return o.OverageUsageAlerts
}

func (o *NewOwner) GetOverageMetadata() *OverageMetadata {
	if o == nil {
		return nil
	}
	return o.OverageMetadata
}

func (o *NewOwner) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *NewOwner) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *NewOwner) GetEnablePreviewFeedback() *UserEventEnablePreviewFeedback {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *NewOwner) GetFeatureBlocks() *UserEventFeatureBlocks {
	if o == nil {
		return nil
	}
	return o.FeatureBlocks
}

func (o *NewOwner) GetDefaultTeamID() *string {
	if o == nil {
		return nil
	}
	return o.DefaultTeamID
}

func (o *NewOwner) GetVersion() Version {
	if o == nil {
		return Version("")
	}
	return o.Version
}

func (o *NewOwner) GetNorthstarMigration() *NorthstarMigration {
	if o == nil {
		return nil
	}
	return o.NorthstarMigration
}

func (o *NewOwner) GetOpportunityID() *string {
	if o == nil {
		return nil
	}
	return o.OpportunityID
}

func (o *NewOwner) GetMfaConfiguration() *MfaConfiguration {
	if o == nil {
		return nil
	}
	return o.MfaConfiguration
}

// Payload62 - The payload of the event, if requested.
type Payload62 struct {
	UserID          string    `json:"userId"`
	IntegrationID   string    `json:"integrationId"`
	ConfigurationID string    `json:"configurationId"`
	IntegrationSlug string    `json:"integrationSlug"`
	IntegrationName *string   `json:"integrationName,omitempty"`
	NewOwner        *NewOwner `json:"newOwner"`
}

func (o *Payload62) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *Payload62) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Payload62) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

func (o *Payload62) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *Payload62) GetIntegrationName() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationName
}

func (o *Payload62) GetNewOwner() *NewOwner {
	if o == nil {
		return nil
	}
	return o.NewOwner
}

// Payload61 - The payload of the event, if requested.
type Payload61 struct {
	IntegrationID   string `json:"integrationId"`
	IntegrationSlug string `json:"integrationSlug"`
	IntegrationName string `json:"integrationName"`
}

func (o *Payload61) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *Payload61) GetIntegrationSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationSlug
}

func (o *Payload61) GetIntegrationName() string {
	if o == nil {
		return ""
	}
	return o.IntegrationName
}

// Payload60 - The payload of the event, if requested.
type Payload60 struct {
	ProjectID string `json:"projectId"`
	Scope     string `json:"scope"`
	Source    string `json:"source"`
}

func (o *Payload60) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload60) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *Payload60) GetSource() string {
	if o == nil {
		return ""
	}
	return o.Source
}

type ConfigChange struct {
}

// Payload59 - The payload of the event, if requested.
type Payload59 struct {
	ProjectID         string         `json:"projectId"`
	Restore           bool           `json:"restore"`
	ConfigVersion     float64        `json:"configVersion"`
	ConfigChangeCount float64        `json:"configChangeCount"`
	ConfigChanges     []ConfigChange `json:"configChanges"`
}

func (o *Payload59) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Payload59) GetRestore() bool {
	if o == nil {
		return false
	}
	return o.Restore
}

func (o *Payload59) GetConfigVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.ConfigVersion
}

func (o *Payload59) GetConfigChangeCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ConfigChangeCount
}

func (o *Payload59) GetConfigChanges() []ConfigChange {
	if o == nil {
		return []ConfigChange{}
	}
	return o.ConfigChanges
}

// OldEnvVarType - The type of this cosmos doc instance, if blank, assume secret.
type OldEnvVarType string

const (
	OldEnvVarTypeSystem    OldEnvVarType = "system"
	OldEnvVarTypeEncrypted OldEnvVarType = "encrypted"
	OldEnvVarTypePlain     OldEnvVarType = "plain"
	OldEnvVarTypeSensitive OldEnvVarType = "sensitive"
)

func (e OldEnvVarType) ToPointer() *OldEnvVarType {
	return &e
}
func (e *OldEnvVarType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = OldEnvVarType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldEnvVarType: %v", v)
	}
}

// OldEnvVarTarget - environments this env variable targets
type OldEnvVarTarget string

const (
	OldEnvVarTargetProduction  OldEnvVarTarget = "production"
	OldEnvVarTargetPreview     OldEnvVarTarget = "preview"
	OldEnvVarTargetDevelopment OldEnvVarTarget = "development"
)

func (e OldEnvVarTarget) ToPointer() *OldEnvVarTarget {
	return &e
}
func (e *OldEnvVarTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = OldEnvVarTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldEnvVarTarget: %v", v)
	}
}

type OldEnvVar struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *OldEnvVarType `json:"type,omitempty"`
	// environments this env variable targets
	Target []OldEnvVarTarget `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string `json:"lastEditedByDisplayName,omitempty"`
}

func (o OldEnvVar) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OldEnvVar) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OldEnvVar) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *OldEnvVar) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *OldEnvVar) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *OldEnvVar) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *OldEnvVar) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *OldEnvVar) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *OldEnvVar) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *OldEnvVar) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *OldEnvVar) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *OldEnvVar) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *OldEnvVar) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *OldEnvVar) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *OldEnvVar) GetType() *OldEnvVarType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *OldEnvVar) GetTarget() []OldEnvVarTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *OldEnvVar) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *OldEnvVar) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *OldEnvVar) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *OldEnvVar) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

// NewEnvVarType - The type of this cosmos doc instance, if blank, assume secret.
type NewEnvVarType string

const (
	NewEnvVarTypeSystem    NewEnvVarType = "system"
	NewEnvVarTypeEncrypted NewEnvVarType = "encrypted"
	NewEnvVarTypePlain     NewEnvVarType = "plain"
	NewEnvVarTypeSensitive NewEnvVarType = "sensitive"
)

func (e NewEnvVarType) ToPointer() *NewEnvVarType {
	return &e
}
func (e *NewEnvVarType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = NewEnvVarType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NewEnvVarType: %v", v)
	}
}

// NewEnvVarTarget - environments this env variable targets
type NewEnvVarTarget string

const (
	NewEnvVarTargetProduction  NewEnvVarTarget = "production"
	NewEnvVarTargetPreview     NewEnvVarTarget = "preview"
	NewEnvVarTargetDevelopment NewEnvVarTarget = "development"
)

func (e NewEnvVarTarget) ToPointer() *NewEnvVarTarget {
	return &e
}
func (e *NewEnvVarTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = NewEnvVarTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NewEnvVarTarget: %v", v)
	}
}

type NewEnvVar struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *NewEnvVarType `json:"type,omitempty"`
	// environments this env variable targets
	Target []NewEnvVarTarget `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string `json:"lastEditedByDisplayName,omitempty"`
}

func (n NewEnvVar) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(n, "", false)
}

func (n *NewEnvVar) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &n, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *NewEnvVar) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *NewEnvVar) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *NewEnvVar) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *NewEnvVar) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *NewEnvVar) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *NewEnvVar) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *NewEnvVar) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *NewEnvVar) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *NewEnvVar) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *NewEnvVar) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *NewEnvVar) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *NewEnvVar) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *NewEnvVar) GetType() *NewEnvVarType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *NewEnvVar) GetTarget() []NewEnvVarTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *NewEnvVar) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *NewEnvVar) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *NewEnvVar) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *NewEnvVar) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

type OldTarget string

const (
	OldTargetProduction  OldTarget = "production"
	OldTargetPreview     OldTarget = "preview"
	OldTargetDevelopment OldTarget = "development"
)

func (e OldTarget) ToPointer() *OldTarget {
	return &e
}
func (e *OldTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = OldTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OldTarget: %v", v)
	}
}

type NewTarget string

const (
	NewTargetProduction  NewTarget = "production"
	NewTargetPreview     NewTarget = "preview"
	NewTargetDevelopment NewTarget = "development"
)

func (e NewTarget) ToPointer() *NewTarget {
	return &e
}
func (e *NewTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = NewTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NewTarget: %v", v)
	}
}

type OldProject struct {
	ProjectName *string `json:"projectName,omitempty"`
	ProjectID   string  `json:"projectId"`
}

func (o *OldProject) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *OldProject) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type NewProject struct {
	ProjectName *string `json:"projectName,omitempty"`
	ProjectID   string  `json:"projectId"`
}

func (o *NewProject) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *NewProject) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateDiff struct {
	ID           string       `json:"id"`
	Key          *string      `json:"key,omitempty"`
	NewKey       *string      `json:"newKey,omitempty"`
	OldTarget    []OldTarget  `json:"oldTarget,omitempty"`
	NewTarget    []NewTarget  `json:"newTarget,omitempty"`
	OldType      *string      `json:"oldType,omitempty"`
	NewType      *string      `json:"newType,omitempty"`
	OldProjects  []OldProject `json:"oldProjects,omitempty"`
	NewProjects  []NewProject `json:"newProjects,omitempty"`
	ChangedValue bool         `json:"changedValue"`
}

func (o *UpdateDiff) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateDiff) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateDiff) GetNewKey() *string {
	if o == nil {
		return nil
	}
	return o.NewKey
}

func (o *UpdateDiff) GetOldTarget() []OldTarget {
	if o == nil {
		return nil
	}
	return o.OldTarget
}

func (o *UpdateDiff) GetNewTarget() []NewTarget {
	if o == nil {
		return nil
	}
	return o.NewTarget
}

func (o *UpdateDiff) GetOldType() *string {
	if o == nil {
		return nil
	}
	return o.OldType
}

func (o *UpdateDiff) GetNewType() *string {
	if o == nil {
		return nil
	}
	return o.NewType
}

func (o *UpdateDiff) GetOldProjects() []OldProject {
	if o == nil {
		return nil
	}
	return o.OldProjects
}

func (o *UpdateDiff) GetNewProjects() []NewProject {
	if o == nil {
		return nil
	}
	return o.NewProjects
}

func (o *UpdateDiff) GetChangedValue() bool {
	if o == nil {
		return false
	}
	return o.ChangedValue
}

// Payload58 - The payload of the event, if requested.
type Payload58 struct {
	OldEnvVar  *OldEnvVar  `json:"oldEnvVar,omitempty"`
	NewEnvVar  *NewEnvVar  `json:"newEnvVar,omitempty"`
	UpdateDiff *UpdateDiff `json:"updateDiff,omitempty"`
}

func (o *Payload58) GetOldEnvVar() *OldEnvVar {
	if o == nil {
		return nil
	}
	return o.OldEnvVar
}

func (o *Payload58) GetNewEnvVar() *NewEnvVar {
	if o == nil {
		return nil
	}
	return o.NewEnvVar
}

func (o *Payload58) GetUpdateDiff() *UpdateDiff {
	if o == nil {
		return nil
	}
	return o.UpdateDiff
}

// PayloadType1 - The type of this cosmos doc instance, if blank, assume secret.
type PayloadType1 string

const (
	PayloadType1System    PayloadType1 = "system"
	PayloadType1Encrypted PayloadType1 = "encrypted"
	PayloadType1Plain     PayloadType1 = "plain"
	PayloadType1Sensitive PayloadType1 = "sensitive"
)

func (e PayloadType1) ToPointer() *PayloadType1 {
	return &e
}
func (e *PayloadType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = PayloadType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PayloadType1: %v", v)
	}
}

// TargetEnum - environments this env variable targets
type TargetEnum string

const (
	TargetEnumProduction  TargetEnum = "production"
	TargetEnumPreview     TargetEnum = "preview"
	TargetEnumDevelopment TargetEnum = "development"
)

func (e TargetEnum) ToPointer() *TargetEnum {
	return &e
}
func (e *TargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = TargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetEnum: %v", v)
	}
}

// Payload57 - The payload of the event, if requested.
type Payload57 struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *PayloadType1 `json:"type,omitempty"`
	// environments this env variable targets
	Target []TargetEnum `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string  `json:"lastEditedByDisplayName,omitempty"`
	ProjectNames            []string `json:"projectNames,omitempty"`
}

func (p Payload57) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *Payload57) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, true); err != nil {
		return err
	}
	return nil
}

func (o *Payload57) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Payload57) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Payload57) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Payload57) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Payload57) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Payload57) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *Payload57) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Payload57) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Payload57) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Payload57) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Payload57) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Payload57) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Payload57) GetType() *PayloadType1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Payload57) GetTarget() []TargetEnum {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Payload57) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *Payload57) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Payload57) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Payload57) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

func (o *Payload57) GetProjectNames() []string {
	if o == nil {
		return nil
	}
	return o.ProjectNames
}

type TargetType string

const (
	TargetTypeStr        TargetType = "str"
	TargetTypeArrayOfStr TargetType = "arrayOfStr"
)

type Target struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type TargetType
}

func CreateTargetStr(str string) Target {
	typ := TargetTypeStr

	return Target{
		Str:  &str,
		Type: typ,
	}
}

func CreateTargetArrayOfStr(arrayOfStr []string) Target {
	typ := TargetTypeArrayOfStr

	return Target{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *Target) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = TargetTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = TargetTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Target", string(data))
}

func (u Target) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type Target: all fields are null")
}

// Payload56 - The payload of the event, if requested.
type Payload56 struct {
	Key               *string `json:"key,omitempty"`
	ProjectID         *string `json:"projectId,omitempty"`
	ProjectName       *string `json:"projectName,omitempty"`
	Target            *Target `json:"target,omitempty"`
	ID                *string `json:"id,omitempty"`
	GitBranch         *string `json:"gitBranch,omitempty"`
	EdgeConfigID      *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string `json:"edgeConfigTokenId,omitempty"`
	Source            *string `json:"source,omitempty"`
}

func (o *Payload56) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Payload56) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Payload56) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *Payload56) GetTarget() *Target {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Payload56) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Payload56) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Payload56) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Payload56) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Payload56) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

// Payload55 - The payload of the event, if requested.
type Payload55 struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

func (o *Payload55) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Payload55) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload54 - The payload of the event, if requested.
type Payload54 struct {
	Sha             string `json:"sha"`
	GitUserPlatform string `json:"gitUserPlatform"`
	ProjectName     string `json:"projectName"`
}

func (o *Payload54) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *Payload54) GetGitUserPlatform() string {
	if o == nil {
		return ""
	}
	return o.GitUserPlatform
}

func (o *Payload54) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

// Payload53 - The payload of the event, if requested.
type Payload53 struct {
	Name     string   `json:"name"`
	Price    *float64 `json:"price,omitempty"`
	Currency *string  `json:"currency,omitempty"`
}

func (o *Payload53) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload53) GetPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.Price
}

func (o *Payload53) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

// Payload52 - The payload of the event, if requested.
type Payload52 struct {
	Renew  *bool  `json:"renew,omitempty"`
	Domain string `json:"domain"`
}

func (o *Payload52) GetRenew() *bool {
	if o == nil {
		return nil
	}
	return o.Renew
}

func (o *Payload52) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

// Payload51 - The payload of the event, if requested.
type Payload51 struct {
	Name            string `json:"name"`
	DestinationID   string `json:"destinationId"`
	DestinationName string `json:"destinationName"`
}

func (o *Payload51) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload51) GetDestinationID() string {
	if o == nil {
		return ""
	}
	return o.DestinationID
}

func (o *Payload51) GetDestinationName() string {
	if o == nil {
		return ""
	}
	return o.DestinationName
}

// Payload50 - The payload of the event, if requested.
type Payload50 struct {
	Name            string  `json:"name"`
	DestinationID   *string `json:"destinationId"`
	DestinationName *string `json:"destinationName"`
}

func (o *Payload50) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload50) GetDestinationID() *string {
	if o == nil {
		return nil
	}
	return o.DestinationID
}

func (o *Payload50) GetDestinationName() *string {
	if o == nil {
		return nil
	}
	return o.DestinationName
}

// Payload49 - The payload of the event, if requested.
type Payload49 struct {
	Name     string  `json:"name"`
	FromID   *string `json:"fromId"`
	FromName *string `json:"fromName"`
}

func (o *Payload49) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload49) GetFromID() *string {
	if o == nil {
		return nil
	}
	return o.FromID
}

func (o *Payload49) GetFromName() *string {
	if o == nil {
		return nil
	}
	return o.FromName
}

// Payload48 - The payload of the event, if requested.
type Payload48 struct {
	DomainID string `json:"domainId"`
	Name     string `json:"name"`
}

func (o *Payload48) GetDomainID() string {
	if o == nil {
		return ""
	}
	return o.DomainID
}

func (o *Payload48) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type OldTeam4 struct {
	Name string `json:"name"`
}

func (o *OldTeam4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type NewTeam4 struct {
	Name string `json:"name"`
}

func (o *NewTeam4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload47 - The payload of the event, if requested.
type Payload47 struct {
	Name    string    `json:"name"`
	OldTeam *OldTeam4 `json:"oldTeam,omitempty"`
	NewTeam *NewTeam4 `json:"newTeam,omitempty"`
}

func (o *Payload47) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload47) GetOldTeam() *OldTeam4 {
	if o == nil {
		return nil
	}
	return o.OldTeam
}

func (o *Payload47) GetNewTeam() *NewTeam4 {
	if o == nil {
		return nil
	}
	return o.NewTeam
}

// Payload46 - The payload of the event, if requested.
type Payload46 struct {
	Name      string `json:"name"`
	UserID    string `json:"userId"`
	TeamID    string `json:"teamId"`
	OwnerName string `json:"ownerName"`
}

func (o *Payload46) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload46) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *Payload46) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *Payload46) GetOwnerName() string {
	if o == nil {
		return ""
	}
	return o.OwnerName
}

// Payload45 - The payload of the event, if requested.
type Payload45 struct {
	Name       string `json:"name"`
	CdnEnabled bool   `json:"cdnEnabled"`
}

func (o *Payload45) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload45) GetCdnEnabled() bool {
	if o == nil {
		return false
	}
	return o.CdnEnabled
}

// Payload44 - The payload of the event, if requested.
type Payload44 struct {
	Name     string  `json:"name"`
	Price    float64 `json:"price"`
	Currency *string `json:"currency,omitempty"`
}

func (o *Payload44) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload44) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

func (o *Payload44) GetCurrency() *string {
	if o == nil {
		return nil
	}
	return o.Currency
}

// Payload43 - The payload of the event, if requested.
type Payload43 struct {
	Name string `json:"name"`
}

func (o *Payload43) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload42 - The payload of the event, if requested.
type Payload42 struct {
	ID     string `json:"id"`
	Value  string `json:"value"`
	Name   string `json:"name"`
	Domain string `json:"domain"`
	Type   string `json:"type"`
}

func (o *Payload42) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload42) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Payload42) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload42) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *Payload42) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

// Payload41 - The payload of the event, if requested.
type Payload41 struct {
	ID     string `json:"id"`
	Domain string `json:"domain"`
}

func (o *Payload41) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload41) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

// Payload40 - The payload of the event, if requested.
type Payload40 struct {
	ID         string   `json:"id"`
	Value      string   `json:"value"`
	Name       string   `json:"name"`
	Domain     string   `json:"domain"`
	Type       string   `json:"type"`
	MxPriority *float64 `json:"mxPriority,omitempty"`
}

func (o *Payload40) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload40) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Payload40) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Payload40) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *Payload40) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Payload40) GetMxPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.MxPriority
}

type Deployment3 struct {
	ID   string            `json:"id"`
	Name string            `json:"name"`
	URL  string            `json:"url"`
	Meta map[string]string `json:"meta"`
}

func (o *Deployment3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Deployment3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Deployment3) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Deployment3) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

// Payload39 - The payload of the event, if requested.
type Payload39 struct {
	Deployment   Deployment3 `json:"deployment"`
	DeploymentID string      `json:"deploymentId"`
	URL          string      `json:"url"`
}

func (o *Payload39) GetDeployment() Deployment3 {
	if o == nil {
		return Deployment3{}
	}
	return o.Deployment
}

func (o *Payload39) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *Payload39) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type OldTeam3 struct {
	Name string `json:"name"`
}

func (o *OldTeam3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type NewTeam3 struct {
	Name string `json:"name"`
}

func (o *NewTeam3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload38 - The payload of the event, if requested.
type Payload38 struct {
	URL     string    `json:"url"`
	OldTeam *OldTeam3 `json:"oldTeam,omitempty"`
	NewTeam *NewTeam3 `json:"newTeam,omitempty"`
}

func (o *Payload38) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Payload38) GetOldTeam() *OldTeam3 {
	if o == nil {
		return nil
	}
	return o.OldTeam
}

func (o *Payload38) GetNewTeam() *NewTeam3 {
	if o == nil {
		return nil
	}
	return o.NewTeam
}

type Deployment2 struct {
	ID   string            `json:"id"`
	Name string            `json:"name"`
	URL  string            `json:"url"`
	Meta map[string]string `json:"meta"`
}

func (o *Deployment2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Deployment2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Deployment2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Deployment2) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

// Payload37 - The payload of the event, if requested.
type Payload37 struct {
	Name         *string      `json:"name,omitempty"`
	Alias        []string     `json:"alias,omitempty"`
	Target       *string      `json:"target,omitempty"`
	Deployment   *Deployment2 `json:"deployment,omitempty"`
	URL          string       `json:"url"`
	Forced       *bool        `json:"forced,omitempty"`
	DeploymentID *string      `json:"deploymentId,omitempty"`
	Plan         *string      `json:"plan,omitempty"`
	Project      *string      `json:"project,omitempty"`
	ProjectID    *string      `json:"projectId,omitempty"`
	Regions      []string     `json:"regions,omitempty"`
	Type         *string      `json:"type,omitempty"`
}

func (o *Payload37) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Payload37) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload37) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Payload37) GetDeployment() *Deployment2 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *Payload37) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Payload37) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *Payload37) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *Payload37) GetPlan() *string {
	if o == nil {
		return nil
	}
	return o.Plan
}

func (o *Payload37) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *Payload37) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Payload37) GetRegions() []string {
	if o == nil {
		return nil
	}
	return o.Regions
}

func (o *Payload37) GetType() *string {
	if o == nil {
		return nil
	}
	return o.Type
}

type Project5 struct {
	Name string `json:"name"`
}

func (o *Project5) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type DeployHook struct {
	CreatedAt float64 `json:"createdAt"`
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Ref       string  `json:"ref"`
}

func (o *DeployHook) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *DeployHook) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DeployHook) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DeployHook) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

type Job struct {
	DeployHook DeployHook `json:"deployHook"`
	State      string     `json:"state"`
}

func (o *Job) GetDeployHook() DeployHook {
	if o == nil {
		return DeployHook{}
	}
	return o.DeployHook
}

func (o *Job) GetState() string {
	if o == nil {
		return ""
	}
	return o.State
}

// Payload36 - The payload of the event, if requested.
type Payload36 struct {
	Project Project5 `json:"project"`
	Job     Job      `json:"job"`
}

func (o *Payload36) GetProject() Project5 {
	if o == nil {
		return Project5{}
	}
	return o.Project
}

func (o *Payload36) GetJob() Job {
	if o == nil {
		return Job{}
	}
	return o.Job
}

// Payload35 - The payload of the event, if requested.
type Payload35 struct {
	BitbucketEmail string  `json:"bitbucketEmail"`
	BitbucketLogin string  `json:"bitbucketLogin"`
	BitbucketName  *string `json:"bitbucketName,omitempty"`
}

func (o *Payload35) GetBitbucketEmail() string {
	if o == nil {
		return ""
	}
	return o.BitbucketEmail
}

func (o *Payload35) GetBitbucketLogin() string {
	if o == nil {
		return ""
	}
	return o.BitbucketLogin
}

func (o *Payload35) GetBitbucketName() *string {
	if o == nil {
		return nil
	}
	return o.BitbucketName
}

// Payload34 - The payload of the event, if requested.
type Payload34 struct {
	GitlabLogin string  `json:"gitlabLogin"`
	GitlabEmail string  `json:"gitlabEmail"`
	GitlabName  *string `json:"gitlabName,omitempty"`
}

func (o *Payload34) GetGitlabLogin() string {
	if o == nil {
		return ""
	}
	return o.GitlabLogin
}

func (o *Payload34) GetGitlabEmail() string {
	if o == nil {
		return ""
	}
	return o.GitlabEmail
}

func (o *Payload34) GetGitlabName() *string {
	if o == nil {
		return nil
	}
	return o.GitlabName
}

// Payload33 - The payload of the event, if requested.
type Payload33 struct {
	GithubLogin string `json:"githubLogin"`
}

func (o *Payload33) GetGithubLogin() string {
	if o == nil {
		return ""
	}
	return o.GithubLogin
}

type UserEventTeam4 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration4 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration4) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload32 - The payload of the event, if requested.
type Payload32 struct {
	Team          UserEventTeam4 `json:"team"`
	Configuration Configuration4 `json:"configuration"`
	NewName       string         `json:"newName"`
}

func (o *Payload32) GetTeam() UserEventTeam4 {
	if o == nil {
		return UserEventTeam4{}
	}
	return o.Team
}

func (o *Payload32) GetConfiguration() Configuration4 {
	if o == nil {
		return Configuration4{}
	}
	return o.Configuration
}

func (o *Payload32) GetNewName() string {
	if o == nil {
		return ""
	}
	return o.NewName
}

type UserEventTeam3 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration3 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Project4 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Project4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project4) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload31 - The payload of the event, if requested.
type Payload31 struct {
	Team          UserEventTeam3 `json:"team"`
	Configuration Configuration3 `json:"configuration"`
	Project       Project4       `json:"project"`
}

func (o *Payload31) GetTeam() UserEventTeam3 {
	if o == nil {
		return UserEventTeam3{}
	}
	return o.Team
}

func (o *Payload31) GetConfiguration() Configuration3 {
	if o == nil {
		return Configuration3{}
	}
	return o.Configuration
}

func (o *Payload31) GetProject() Project4 {
	if o == nil {
		return Project4{}
	}
	return o.Project
}

type UserEventTeam2 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration2 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration2) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Project3 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Project3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload30 - The payload of the event, if requested.
type Payload30 struct {
	Team          UserEventTeam2 `json:"team"`
	Configuration Configuration2 `json:"configuration"`
	Project       Project3       `json:"project"`
	BuildsEnabled *bool          `json:"buildsEnabled,omitempty"`
	Passive       *bool          `json:"passive,omitempty"`
}

func (o *Payload30) GetTeam() UserEventTeam2 {
	if o == nil {
		return UserEventTeam2{}
	}
	return o.Team
}

func (o *Payload30) GetConfiguration() Configuration2 {
	if o == nil {
		return Configuration2{}
	}
	return o.Configuration
}

func (o *Payload30) GetProject() Project3 {
	if o == nil {
		return Project3{}
	}
	return o.Project
}

func (o *Payload30) GetBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.BuildsEnabled
}

func (o *Payload30) GetPassive() *bool {
	if o == nil {
		return nil
	}
	return o.Passive
}

type UserEventTeam1 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *UserEventTeam1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEventTeam1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration1 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Configuration1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Configuration1) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type Project2 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Project2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project2) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

// Payload29 - The payload of the event, if requested.
type Payload29 struct {
	Team          UserEventTeam1 `json:"team"`
	Configuration Configuration1 `json:"configuration"`
	Project       Project2       `json:"project"`
	BuildsEnabled *bool          `json:"buildsEnabled,omitempty"`
}

func (o *Payload29) GetTeam() UserEventTeam1 {
	if o == nil {
		return UserEventTeam1{}
	}
	return o.Team
}

func (o *Payload29) GetConfiguration() Configuration1 {
	if o == nil {
		return Configuration1{}
	}
	return o.Configuration
}

func (o *Payload29) GetProject() Project2 {
	if o == nil {
		return Project2{}
	}
	return o.Project
}

func (o *Payload29) GetBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.BuildsEnabled
}

// Payload28 - The payload of the event, if requested.
type Payload28 struct {
	Suffix string `json:"suffix"`
}

func (o *Payload28) GetSuffix() string {
	if o == nil {
		return ""
	}
	return o.Suffix
}

// Payload27 - The payload of the event, if requested.
type Payload27 struct {
	Status string `json:"status"`
	Suffix string `json:"suffix"`
}

func (o *Payload27) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *Payload27) GetSuffix() string {
	if o == nil {
		return ""
	}
	return o.Suffix
}

// Payload26 - The payload of the event, if requested.
type Payload26 struct {
	Reason *string `json:"reason,omitempty"`
	Suffix string  `json:"suffix"`
}

func (o *Payload26) GetReason() *string {
	if o == nil {
		return nil
	}
	return o.Reason
}

func (o *Payload26) GetSuffix() string {
	if o == nil {
		return ""
	}
	return o.Suffix
}

// Payload25 - The payload of the event, if requested.
type Payload25 struct {
	Cn  *string  `json:"cn,omitempty"`
	Cns []string `json:"cns,omitempty"`
}

func (o *Payload25) GetCn() *string {
	if o == nil {
		return nil
	}
	return o.Cn
}

func (o *Payload25) GetCns() []string {
	if o == nil {
		return nil
	}
	return o.Cns
}

// Payload24 - The payload of the event, if requested.
type Payload24 struct {
	ID  string   `json:"id"`
	Cn  *string  `json:"cn,omitempty"`
	Cns []string `json:"cns,omitempty"`
}

func (o *Payload24) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload24) GetCn() *string {
	if o == nil {
		return nil
	}
	return o.Cn
}

func (o *Payload24) GetCns() []string {
	if o == nil {
		return nil
	}
	return o.Cns
}

// Payload23 - The payload of the event, if requested.
type Payload23 struct {
	Src string `json:"src"`
	Dst string `json:"dst"`
}

func (o *Payload23) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *Payload23) GetDst() string {
	if o == nil {
		return ""
	}
	return o.Dst
}

type OldTeam2 struct {
	Name string `json:"name"`
}

func (o *OldTeam2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type NewTeam2 struct {
	Name string `json:"name"`
}

func (o *NewTeam2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload22 - The payload of the event, if requested.
type Payload22 struct {
	ID      string    `json:"id"`
	OldTeam *OldTeam2 `json:"oldTeam,omitempty"`
	NewTeam *NewTeam2 `json:"newTeam,omitempty"`
}

func (o *Payload22) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload22) GetOldTeam() *OldTeam2 {
	if o == nil {
		return nil
	}
	return o.OldTeam
}

func (o *Payload22) GetNewTeam() *NewTeam2 {
	if o == nil {
		return nil
	}
	return o.NewTeam
}

// Payload21 - The payload of the event, if requested.
type Payload21 struct {
	Cn  *string  `json:"cn,omitempty"`
	Cns []string `json:"cns,omitempty"`
	ID  *string  `json:"id,omitempty"`
}

func (o *Payload21) GetCn() *string {
	if o == nil {
		return nil
	}
	return o.Cn
}

func (o *Payload21) GetCns() []string {
	if o == nil {
		return nil
	}
	return o.Cns
}

func (o *Payload21) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Payload20 - The payload of the event, if requested.
type Payload20 struct {
	Cn     *string  `json:"cn,omitempty"`
	Cns    []string `json:"cns,omitempty"`
	Custom bool     `json:"custom"`
	ID     *string  `json:"id,omitempty"`
}

func (o *Payload20) GetCn() *string {
	if o == nil {
		return nil
	}
	return o.Cn
}

func (o *Payload20) GetCns() []string {
	if o == nil {
		return nil
	}
	return o.Cns
}

func (o *Payload20) GetCustom() bool {
	if o == nil {
		return false
	}
	return o.Custom
}

func (o *Payload20) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

// Payload19 - The payload of the event, if requested.
type Payload19 struct {
	Avatar *string `json:"avatar,omitempty"`
}

func (o *Payload19) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

// Payload18 - The payload of the event, if requested.
type Payload18 struct {
	ProjectName          string `json:"projectName"`
	AutoExposeSystemEnvs bool   `json:"autoExposeSystemEnvs"`
}

func (o *Payload18) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload18) GetAutoExposeSystemEnvs() bool {
	if o == nil {
		return false
	}
	return o.AutoExposeSystemEnvs
}

// Payload17 - The payload of the event, if requested.
type Payload17 struct {
	Alias         string `json:"alias"`
	DeploymentURL string `json:"deploymentUrl"`
}

func (o *Payload17) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *Payload17) GetDeploymentURL() string {
	if o == nil {
		return ""
	}
	return o.DeploymentURL
}

// Payload16 - The payload of the event, if requested.
type Payload16 struct {
	Name         *string `json:"name,omitempty"`
	Alias        string  `json:"alias"`
	AliasID      string  `json:"aliasId"`
	DeploymentID *string `json:"deploymentId"`
}

func (o *Payload16) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Payload16) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *Payload16) GetAliasID() string {
	if o == nil {
		return ""
	}
	return o.AliasID
}

func (o *Payload16) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

type OldTeam1 struct {
	Name string `json:"name"`
}

func (o *OldTeam1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type NewTeam1 struct {
	Name string `json:"name"`
}

func (o *NewTeam1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload15 - The payload of the event, if requested.
type Payload15 struct {
	Name    *string   `json:"name,omitempty"`
	Alias   string    `json:"alias"`
	OldTeam *OldTeam1 `json:"oldTeam,omitempty"`
	NewTeam *NewTeam1 `json:"newTeam,omitempty"`
}

func (o *Payload15) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Payload15) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *Payload15) GetOldTeam() *OldTeam1 {
	if o == nil {
		return nil
	}
	return o.OldTeam
}

func (o *Payload15) GetNewTeam() *NewTeam1 {
	if o == nil {
		return nil
	}
	return o.NewTeam
}

// Payload14 - The payload of the event, if requested.
type Payload14 struct {
	Alias *string `json:"alias,omitempty"`
	Email *string `json:"email,omitempty"`
}

func (o *Payload14) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload14) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

// Payload13 - The payload of the event, if requested.
type Payload13 struct {
	Alias    *string `json:"alias,omitempty"`
	Email    *string `json:"email,omitempty"`
	Username *string `json:"username,omitempty"`
}

func (o *Payload13) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload13) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Payload13) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type Action2 string

const (
	Action2Created Action2 = "created"
	Action2Removed Action2 = "removed"
)

func (e Action2) ToPointer() *Action2 {
	return &e
}
func (e *Action2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "removed":
		*e = Action2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action2: %v", v)
	}
}

// Payload12 - The payload of the event, if requested.
type Payload12 struct {
	ProjectName string  `json:"projectName"`
	Alias       string  `json:"alias"`
	Action      Action2 `json:"action"`
}

func (o *Payload12) GetProjectName() string {
	if o == nil {
		return ""
	}
	return o.ProjectName
}

func (o *Payload12) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *Payload12) GetAction() Action2 {
	if o == nil {
		return Action2("")
	}
	return o.Action
}

// Payload11 - The payload of the event, if requested.
type Payload11 struct {
	Alias    *string `json:"alias,omitempty"`
	AliasID  *string `json:"aliasId,omitempty"`
	UserID   *string `json:"userId,omitempty"`
	Username *string `json:"username,omitempty"`
}

func (o *Payload11) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload11) GetAliasID() *string {
	if o == nil {
		return nil
	}
	return o.AliasID
}

func (o *Payload11) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *Payload11) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Payload10 - The payload of the event, if requested.
type Payload10 struct {
	Alias    *string `json:"alias,omitempty"`
	UserID   *string `json:"userId,omitempty"`
	Username *string `json:"username,omitempty"`
}

func (o *Payload10) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload10) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *Payload10) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Payload9 - The payload of the event, if requested.
type Payload9 struct {
	Alias *string `json:"alias,omitempty"`
}

func (o *Payload9) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

// Payload8 - The payload of the event, if requested.
type Payload8 struct {
	AliasID     *string `json:"aliasId,omitempty"`
	Alias       *string `json:"alias,omitempty"`
	ProjectName *string `json:"projectName,omitempty"`
}

func (o *Payload8) GetAliasID() *string {
	if o == nil {
		return nil
	}
	return o.AliasID
}

func (o *Payload8) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload8) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

type Deployment1 struct {
	ID   string            `json:"id"`
	Name string            `json:"name"`
	URL  string            `json:"url"`
	Meta map[string]string `json:"meta"`
}

func (o *Deployment1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Deployment1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Deployment1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Deployment1) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

// Payload7 - The payload of the event, if requested.
type Payload7 struct {
	Alias              *string      `json:"alias,omitempty"`
	Deployment         *Deployment1 `json:"deployment,omitempty"`
	RuleCount          *float64     `json:"ruleCount,omitempty"`
	DeploymentURL      *string      `json:"deploymentUrl,omitempty"`
	AliasID            *string      `json:"aliasId,omitempty"`
	DeploymentID       *string      `json:"deploymentId,omitempty"`
	OldDeploymentID    *string      `json:"oldDeploymentId,omitempty"`
	Redirect           *string      `json:"redirect,omitempty"`
	RedirectStatusCode *float64     `json:"redirectStatusCode,omitempty"`
	Target             *string      `json:"target,omitempty"`
	System             *bool        `json:"system,omitempty"`
	AliasUpdatedAt     *float64     `json:"aliasUpdatedAt,omitempty"`
}

func (o *Payload7) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Payload7) GetDeployment() *Deployment1 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *Payload7) GetRuleCount() *float64 {
	if o == nil {
		return nil
	}
	return o.RuleCount
}

func (o *Payload7) GetDeploymentURL() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentURL
}

func (o *Payload7) GetAliasID() *string {
	if o == nil {
		return nil
	}
	return o.AliasID
}

func (o *Payload7) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *Payload7) GetOldDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.OldDeploymentID
}

func (o *Payload7) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Payload7) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *Payload7) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Payload7) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *Payload7) GetAliasUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AliasUpdatedAt
}

type AccessGroup4 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *AccessGroup4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccessGroup4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Project1 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *Project1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Project1) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type NextRole string

const (
	NextRoleAdmin            NextRole = "ADMIN"
	NextRoleProjectDeveloper NextRole = "PROJECT_DEVELOPER"
	NextRoleProjectViewer    NextRole = "PROJECT_VIEWER"
)

func (e NextRole) ToPointer() *NextRole {
	return &e
}
func (e *NextRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = NextRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NextRole: %v", v)
	}
}

type PreviousRole string

const (
	PreviousRoleAdmin            PreviousRole = "ADMIN"
	PreviousRoleProjectDeveloper PreviousRole = "PROJECT_DEVELOPER"
	PreviousRoleProjectViewer    PreviousRole = "PROJECT_VIEWER"
)

func (e PreviousRole) ToPointer() *PreviousRole {
	return &e
}
func (e *PreviousRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = PreviousRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PreviousRole: %v", v)
	}
}

// Payload6 - The payload of the event, if requested.
type Payload6 struct {
	AccessGroup  AccessGroup4  `json:"accessGroup"`
	Project      Project1      `json:"project"`
	NextRole     *NextRole     `json:"next_role,omitempty"`
	PreviousRole *PreviousRole `json:"previous_role,omitempty"`
}

func (o *Payload6) GetAccessGroup() AccessGroup4 {
	if o == nil {
		return AccessGroup4{}
	}
	return o.AccessGroup
}

func (o *Payload6) GetProject() Project1 {
	if o == nil {
		return Project1{}
	}
	return o.Project
}

func (o *Payload6) GetNextRole() *NextRole {
	if o == nil {
		return nil
	}
	return o.NextRole
}

func (o *Payload6) GetPreviousRole() *PreviousRole {
	if o == nil {
		return nil
	}
	return o.PreviousRole
}

type AccessGroup3 struct {
	ID   string  `json:"id"`
	Name *string `json:"name,omitempty"`
}

func (o *AccessGroup3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccessGroup3) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type PayloadUser1 struct {
	ID       string  `json:"id"`
	Username *string `json:"username,omitempty"`
}

func (o *PayloadUser1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PayloadUser1) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

// Payload5 - The payload of the event, if requested.
type Payload5 struct {
	AccessGroup   AccessGroup3 `json:"accessGroup"`
	User          PayloadUser1 `json:"user"`
	DirectoryType *string      `json:"directoryType,omitempty"`
}

func (o *Payload5) GetAccessGroup() AccessGroup3 {
	if o == nil {
		return AccessGroup3{}
	}
	return o.AccessGroup
}

func (o *Payload5) GetUser() PayloadUser1 {
	if o == nil {
		return PayloadUser1{}
	}
	return o.User
}

func (o *Payload5) GetDirectoryType() *string {
	if o == nil {
		return nil
	}
	return o.DirectoryType
}

type AccessGroup2 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *AccessGroup2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccessGroup2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload4 - The payload of the event, if requested.
type Payload4 struct {
	Author      string       `json:"author"`
	AccessGroup AccessGroup2 `json:"accessGroup"`
}

func (o *Payload4) GetAuthor() string {
	if o == nil {
		return ""
	}
	return o.Author
}

func (o *Payload4) GetAccessGroup() AccessGroup2 {
	if o == nil {
		return AccessGroup2{}
	}
	return o.AccessGroup
}

type AccessGroup1 struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

func (o *AccessGroup1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AccessGroup1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// Payload3 - The payload of the event, if requested.
type Payload3 struct {
	AccessGroup AccessGroup1 `json:"accessGroup"`
}

func (o *Payload3) GetAccessGroup() AccessGroup1 {
	if o == nil {
		return AccessGroup1{}
	}
	return o.AccessGroup
}

type Action1 string

const (
	Action1Created    Action1 = "created"
	Action1Updated    Action1 = "updated"
	Action1Deleted    Action1 = "deleted"
	Action1Archived   Action1 = "archived"
	Action1Unarchived Action1 = "unarchived"
)

func (e Action1) ToPointer() *Action1 {
	return &e
}
func (e *Action1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "created":
		fallthrough
	case "updated":
		fallthrough
	case "deleted":
		fallthrough
	case "archived":
		fallthrough
	case "unarchived":
		*e = Action1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action1: %v", v)
	}
}

// Payload2 - The payload of the event, if requested.
type Payload2 struct {
	Action    Action1 `json:"action"`
	ID        string  `json:"id"`
	Slug      string  `json:"slug"`
	ProjectID string  `json:"projectId"`
}

func (o *Payload2) GetAction() Action1 {
	if o == nil {
		return Action1("")
	}
	return o.Action
}

func (o *Payload2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Payload2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

// Payload1 - The payload of the event, if requested.
type Payload1 struct {
}

type PayloadUnionType string

const (
	PayloadUnionTypePayload1   PayloadUnionType = "payload_1"
	PayloadUnionTypePayload2   PayloadUnionType = "payload_2"
	PayloadUnionTypePayload3   PayloadUnionType = "payload_3"
	PayloadUnionTypePayload4   PayloadUnionType = "payload_4"
	PayloadUnionTypePayload5   PayloadUnionType = "payload_5"
	PayloadUnionTypePayload6   PayloadUnionType = "payload_6"
	PayloadUnionTypePayload7   PayloadUnionType = "payload_7"
	PayloadUnionTypePayload8   PayloadUnionType = "payload_8"
	PayloadUnionTypePayload9   PayloadUnionType = "payload_9"
	PayloadUnionTypePayload10  PayloadUnionType = "payload_10"
	PayloadUnionTypePayload11  PayloadUnionType = "payload_11"
	PayloadUnionTypePayload12  PayloadUnionType = "payload_12"
	PayloadUnionTypePayload13  PayloadUnionType = "payload_13"
	PayloadUnionTypePayload14  PayloadUnionType = "payload_14"
	PayloadUnionTypePayload15  PayloadUnionType = "payload_15"
	PayloadUnionTypePayload16  PayloadUnionType = "payload_16"
	PayloadUnionTypePayload17  PayloadUnionType = "payload_17"
	PayloadUnionTypePayload18  PayloadUnionType = "payload_18"
	PayloadUnionTypePayload19  PayloadUnionType = "payload_19"
	PayloadUnionTypePayload20  PayloadUnionType = "payload_20"
	PayloadUnionTypePayload21  PayloadUnionType = "payload_21"
	PayloadUnionTypePayload22  PayloadUnionType = "payload_22"
	PayloadUnionTypePayload23  PayloadUnionType = "payload_23"
	PayloadUnionTypePayload24  PayloadUnionType = "payload_24"
	PayloadUnionTypePayload25  PayloadUnionType = "payload_25"
	PayloadUnionTypePayload26  PayloadUnionType = "payload_26"
	PayloadUnionTypePayload27  PayloadUnionType = "payload_27"
	PayloadUnionTypePayload28  PayloadUnionType = "payload_28"
	PayloadUnionTypePayload29  PayloadUnionType = "payload_29"
	PayloadUnionTypePayload30  PayloadUnionType = "payload_30"
	PayloadUnionTypePayload31  PayloadUnionType = "payload_31"
	PayloadUnionTypePayload32  PayloadUnionType = "payload_32"
	PayloadUnionTypePayload33  PayloadUnionType = "payload_33"
	PayloadUnionTypePayload34  PayloadUnionType = "payload_34"
	PayloadUnionTypePayload35  PayloadUnionType = "payload_35"
	PayloadUnionTypePayload36  PayloadUnionType = "payload_36"
	PayloadUnionTypePayload37  PayloadUnionType = "payload_37"
	PayloadUnionTypePayload38  PayloadUnionType = "payload_38"
	PayloadUnionTypePayload39  PayloadUnionType = "payload_39"
	PayloadUnionTypePayload40  PayloadUnionType = "payload_40"
	PayloadUnionTypePayload41  PayloadUnionType = "payload_41"
	PayloadUnionTypePayload42  PayloadUnionType = "payload_42"
	PayloadUnionTypePayload43  PayloadUnionType = "payload_43"
	PayloadUnionTypePayload44  PayloadUnionType = "payload_44"
	PayloadUnionTypePayload45  PayloadUnionType = "payload_45"
	PayloadUnionTypePayload46  PayloadUnionType = "payload_46"
	PayloadUnionTypePayload47  PayloadUnionType = "payload_47"
	PayloadUnionTypePayload48  PayloadUnionType = "payload_48"
	PayloadUnionTypePayload49  PayloadUnionType = "payload_49"
	PayloadUnionTypePayload50  PayloadUnionType = "payload_50"
	PayloadUnionTypePayload51  PayloadUnionType = "payload_51"
	PayloadUnionTypePayload52  PayloadUnionType = "payload_52"
	PayloadUnionTypePayload53  PayloadUnionType = "payload_53"
	PayloadUnionTypePayload54  PayloadUnionType = "payload_54"
	PayloadUnionTypePayload55  PayloadUnionType = "payload_55"
	PayloadUnionTypePayload56  PayloadUnionType = "payload_56"
	PayloadUnionTypePayload57  PayloadUnionType = "payload_57"
	PayloadUnionTypePayload58  PayloadUnionType = "payload_58"
	PayloadUnionTypePayload59  PayloadUnionType = "payload_59"
	PayloadUnionTypePayload60  PayloadUnionType = "payload_60"
	PayloadUnionTypePayload61  PayloadUnionType = "payload_61"
	PayloadUnionTypePayload62  PayloadUnionType = "payload_62"
	PayloadUnionTypePayload63  PayloadUnionType = "payload_63"
	PayloadUnionTypePayload64  PayloadUnionType = "payload_64"
	PayloadUnionTypePayload65  PayloadUnionType = "payload_65"
	PayloadUnionTypePayload66  PayloadUnionType = "payload_66"
	PayloadUnionTypePayload67  PayloadUnionType = "payload_67"
	PayloadUnionTypePayload68  PayloadUnionType = "payload_68"
	PayloadUnionTypePayload69  PayloadUnionType = "payload_69"
	PayloadUnionTypePayload70  PayloadUnionType = "payload_70"
	PayloadUnionTypePayload71  PayloadUnionType = "payload_71"
	PayloadUnionTypePayload72  PayloadUnionType = "payload_72"
	PayloadUnionTypePayload73  PayloadUnionType = "payload_73"
	PayloadUnionTypePayload74  PayloadUnionType = "payload_74"
	PayloadUnionTypePayload75  PayloadUnionType = "payload_75"
	PayloadUnionTypePayload76  PayloadUnionType = "payload_76"
	PayloadUnionTypePayload77  PayloadUnionType = "payload_77"
	PayloadUnionTypePayload78  PayloadUnionType = "payload_78"
	PayloadUnionTypePayload79  PayloadUnionType = "payload_79"
	PayloadUnionTypePayload80  PayloadUnionType = "payload_80"
	PayloadUnionTypePayload81  PayloadUnionType = "payload_81"
	PayloadUnionTypePayload82  PayloadUnionType = "payload_82"
	PayloadUnionTypePayload83  PayloadUnionType = "payload_83"
	PayloadUnionTypePayload84  PayloadUnionType = "payload_84"
	PayloadUnionTypePayload85  PayloadUnionType = "payload_85"
	PayloadUnionTypePayload86  PayloadUnionType = "payload_86"
	PayloadUnionTypePayload87  PayloadUnionType = "payload_87"
	PayloadUnionTypePayload88  PayloadUnionType = "payload_88"
	PayloadUnionTypePayload89  PayloadUnionType = "payload_89"
	PayloadUnionTypePayload90  PayloadUnionType = "payload_90"
	PayloadUnionTypePayload91  PayloadUnionType = "payload_91"
	PayloadUnionTypePayload92  PayloadUnionType = "payload_92"
	PayloadUnionTypePayload93  PayloadUnionType = "payload_93"
	PayloadUnionTypePayload94  PayloadUnionType = "payload_94"
	PayloadUnionTypePayload95  PayloadUnionType = "payload_95"
	PayloadUnionTypePayload96  PayloadUnionType = "payload_96"
	PayloadUnionTypePayload97  PayloadUnionType = "payload_97"
	PayloadUnionTypePayload98  PayloadUnionType = "payload_98"
	PayloadUnionTypePayload99  PayloadUnionType = "payload_99"
	PayloadUnionTypePayload100 PayloadUnionType = "payload_100"
	PayloadUnionTypePayload101 PayloadUnionType = "payload_101"
	PayloadUnionTypePayload102 PayloadUnionType = "payload_102"
	PayloadUnionTypePayload103 PayloadUnionType = "payload_103"
	PayloadUnionTypePayload104 PayloadUnionType = "payload_104"
	PayloadUnionTypePayload105 PayloadUnionType = "payload_105"
	PayloadUnionTypePayload106 PayloadUnionType = "payload_106"
	PayloadUnionTypePayload107 PayloadUnionType = "payload_107"
	PayloadUnionTypePayload108 PayloadUnionType = "payload_108"
	PayloadUnionTypePayload109 PayloadUnionType = "payload_109"
	PayloadUnionTypePayload110 PayloadUnionType = "payload_110"
	PayloadUnionTypePayload111 PayloadUnionType = "payload_111"
	PayloadUnionTypePayload112 PayloadUnionType = "payload_112"
	PayloadUnionTypePayload113 PayloadUnionType = "payload_113"
	PayloadUnionTypePayload114 PayloadUnionType = "payload_114"
	PayloadUnionTypePayload115 PayloadUnionType = "payload_115"
	PayloadUnionTypePayload116 PayloadUnionType = "payload_116"
	PayloadUnionTypePayload117 PayloadUnionType = "payload_117"
	PayloadUnionTypePayload118 PayloadUnionType = "payload_118"
	PayloadUnionTypePayload119 PayloadUnionType = "payload_119"
	PayloadUnionTypePayload120 PayloadUnionType = "payload_120"
	PayloadUnionTypePayload121 PayloadUnionType = "payload_121"
	PayloadUnionTypePayload122 PayloadUnionType = "payload_122"
	PayloadUnionTypePayload123 PayloadUnionType = "payload_123"
	PayloadUnionTypePayload124 PayloadUnionType = "payload_124"
	PayloadUnionTypePayload125 PayloadUnionType = "payload_125"
	PayloadUnionTypePayload126 PayloadUnionType = "payload_126"
	PayloadUnionTypePayload127 PayloadUnionType = "payload_127"
	PayloadUnionTypePayload128 PayloadUnionType = "payload_128"
	PayloadUnionTypePayload129 PayloadUnionType = "payload_129"
	PayloadUnionTypePayload130 PayloadUnionType = "payload_130"
	PayloadUnionTypePayload131 PayloadUnionType = "payload_131"
	PayloadUnionTypePayload132 PayloadUnionType = "payload_132"
	PayloadUnionTypePayload133 PayloadUnionType = "payload_133"
	PayloadUnionTypePayload134 PayloadUnionType = "payload_134"
	PayloadUnionTypePayload135 PayloadUnionType = "payload_135"
	PayloadUnionTypePayload136 PayloadUnionType = "payload_136"
	PayloadUnionTypePayload137 PayloadUnionType = "payload_137"
	PayloadUnionTypePayload138 PayloadUnionType = "payload_138"
	PayloadUnionTypePayload139 PayloadUnionType = "payload_139"
	PayloadUnionTypePayload140 PayloadUnionType = "payload_140"
	PayloadUnionTypePayload141 PayloadUnionType = "payload_141"
	PayloadUnionTypePayload142 PayloadUnionType = "payload_142"
	PayloadUnionTypePayload143 PayloadUnionType = "payload_143"
	PayloadUnionTypePayload144 PayloadUnionType = "payload_144"
	PayloadUnionTypePayload145 PayloadUnionType = "payload_145"
	PayloadUnionTypePayload146 PayloadUnionType = "payload_146"
	PayloadUnionTypePayload147 PayloadUnionType = "payload_147"
	PayloadUnionTypePayload148 PayloadUnionType = "payload_148"
	PayloadUnionTypePayload149 PayloadUnionType = "payload_149"
	PayloadUnionTypePayload150 PayloadUnionType = "payload_150"
	PayloadUnionTypePayload151 PayloadUnionType = "payload_151"
	PayloadUnionTypePayload152 PayloadUnionType = "payload_152"
)

type PayloadUnion struct {
	Payload1   *Payload1   `queryParam:"inline"`
	Payload2   *Payload2   `queryParam:"inline"`
	Payload3   *Payload3   `queryParam:"inline"`
	Payload4   *Payload4   `queryParam:"inline"`
	Payload5   *Payload5   `queryParam:"inline"`
	Payload6   *Payload6   `queryParam:"inline"`
	Payload7   *Payload7   `queryParam:"inline"`
	Payload8   *Payload8   `queryParam:"inline"`
	Payload9   *Payload9   `queryParam:"inline"`
	Payload10  *Payload10  `queryParam:"inline"`
	Payload11  *Payload11  `queryParam:"inline"`
	Payload12  *Payload12  `queryParam:"inline"`
	Payload13  *Payload13  `queryParam:"inline"`
	Payload14  *Payload14  `queryParam:"inline"`
	Payload15  *Payload15  `queryParam:"inline"`
	Payload16  *Payload16  `queryParam:"inline"`
	Payload17  *Payload17  `queryParam:"inline"`
	Payload18  *Payload18  `queryParam:"inline"`
	Payload19  *Payload19  `queryParam:"inline"`
	Payload20  *Payload20  `queryParam:"inline"`
	Payload21  *Payload21  `queryParam:"inline"`
	Payload22  *Payload22  `queryParam:"inline"`
	Payload23  *Payload23  `queryParam:"inline"`
	Payload24  *Payload24  `queryParam:"inline"`
	Payload25  *Payload25  `queryParam:"inline"`
	Payload26  *Payload26  `queryParam:"inline"`
	Payload27  *Payload27  `queryParam:"inline"`
	Payload28  *Payload28  `queryParam:"inline"`
	Payload29  *Payload29  `queryParam:"inline"`
	Payload30  *Payload30  `queryParam:"inline"`
	Payload31  *Payload31  `queryParam:"inline"`
	Payload32  *Payload32  `queryParam:"inline"`
	Payload33  *Payload33  `queryParam:"inline"`
	Payload34  *Payload34  `queryParam:"inline"`
	Payload35  *Payload35  `queryParam:"inline"`
	Payload36  *Payload36  `queryParam:"inline"`
	Payload37  *Payload37  `queryParam:"inline"`
	Payload38  *Payload38  `queryParam:"inline"`
	Payload39  *Payload39  `queryParam:"inline"`
	Payload40  *Payload40  `queryParam:"inline"`
	Payload41  *Payload41  `queryParam:"inline"`
	Payload42  *Payload42  `queryParam:"inline"`
	Payload43  *Payload43  `queryParam:"inline"`
	Payload44  *Payload44  `queryParam:"inline"`
	Payload45  *Payload45  `queryParam:"inline"`
	Payload46  *Payload46  `queryParam:"inline"`
	Payload47  *Payload47  `queryParam:"inline"`
	Payload48  *Payload48  `queryParam:"inline"`
	Payload49  *Payload49  `queryParam:"inline"`
	Payload50  *Payload50  `queryParam:"inline"`
	Payload51  *Payload51  `queryParam:"inline"`
	Payload52  *Payload52  `queryParam:"inline"`
	Payload53  *Payload53  `queryParam:"inline"`
	Payload54  *Payload54  `queryParam:"inline"`
	Payload55  *Payload55  `queryParam:"inline"`
	Payload56  *Payload56  `queryParam:"inline"`
	Payload57  *Payload57  `queryParam:"inline"`
	Payload58  *Payload58  `queryParam:"inline"`
	Payload59  *Payload59  `queryParam:"inline"`
	Payload60  *Payload60  `queryParam:"inline"`
	Payload61  *Payload61  `queryParam:"inline"`
	Payload62  *Payload62  `queryParam:"inline"`
	Payload63  *Payload63  `queryParam:"inline"`
	Payload64  *Payload64  `queryParam:"inline"`
	Payload65  *Payload65  `queryParam:"inline"`
	Payload66  *Payload66  `queryParam:"inline"`
	Payload67  *Payload67  `queryParam:"inline"`
	Payload68  *Payload68  `queryParam:"inline"`
	Payload69  *Payload69  `queryParam:"inline"`
	Payload70  *Payload70  `queryParam:"inline"`
	Payload71  *Payload71  `queryParam:"inline"`
	Payload72  *Payload72  `queryParam:"inline"`
	Payload73  *Payload73  `queryParam:"inline"`
	Payload74  *Payload74  `queryParam:"inline"`
	Payload75  *Payload75  `queryParam:"inline"`
	Payload76  *Payload76  `queryParam:"inline"`
	Payload77  *Payload77  `queryParam:"inline"`
	Payload78  *Payload78  `queryParam:"inline"`
	Payload79  *Payload79  `queryParam:"inline"`
	Payload80  *Payload80  `queryParam:"inline"`
	Payload81  *Payload81  `queryParam:"inline"`
	Payload82  *Payload82  `queryParam:"inline"`
	Payload83  *Payload83  `queryParam:"inline"`
	Payload84  *Payload84  `queryParam:"inline"`
	Payload85  *Payload85  `queryParam:"inline"`
	Payload86  *Payload86  `queryParam:"inline"`
	Payload87  *Payload87  `queryParam:"inline"`
	Payload88  *Payload88  `queryParam:"inline"`
	Payload89  *Payload89  `queryParam:"inline"`
	Payload90  *Payload90  `queryParam:"inline"`
	Payload91  *Payload91  `queryParam:"inline"`
	Payload92  *Payload92  `queryParam:"inline"`
	Payload93  *Payload93  `queryParam:"inline"`
	Payload94  *Payload94  `queryParam:"inline"`
	Payload95  *Payload95  `queryParam:"inline"`
	Payload96  *Payload96  `queryParam:"inline"`
	Payload97  *Payload97  `queryParam:"inline"`
	Payload98  *Payload98  `queryParam:"inline"`
	Payload99  *Payload99  `queryParam:"inline"`
	Payload100 *Payload100 `queryParam:"inline"`
	Payload101 *Payload101 `queryParam:"inline"`
	Payload102 *Payload102 `queryParam:"inline"`
	Payload103 *Payload103 `queryParam:"inline"`
	Payload104 *Payload104 `queryParam:"inline"`
	Payload105 *Payload105 `queryParam:"inline"`
	Payload106 *Payload106 `queryParam:"inline"`
	Payload107 *Payload107 `queryParam:"inline"`
	Payload108 *Payload108 `queryParam:"inline"`
	Payload109 *Payload109 `queryParam:"inline"`
	Payload110 *Payload110 `queryParam:"inline"`
	Payload111 *Payload111 `queryParam:"inline"`
	Payload112 *Payload112 `queryParam:"inline"`
	Payload113 *Payload113 `queryParam:"inline"`
	Payload114 *Payload114 `queryParam:"inline"`
	Payload115 *Payload115 `queryParam:"inline"`
	Payload116 *Payload116 `queryParam:"inline"`
	Payload117 *Payload117 `queryParam:"inline"`
	Payload118 *Payload118 `queryParam:"inline"`
	Payload119 *Payload119 `queryParam:"inline"`
	Payload120 *Payload120 `queryParam:"inline"`
	Payload121 *Payload121 `queryParam:"inline"`
	Payload122 *Payload122 `queryParam:"inline"`
	Payload123 *Payload123 `queryParam:"inline"`
	Payload124 *Payload124 `queryParam:"inline"`
	Payload125 *Payload125 `queryParam:"inline"`
	Payload126 *Payload126 `queryParam:"inline"`
	Payload127 *Payload127 `queryParam:"inline"`
	Payload128 *Payload128 `queryParam:"inline"`
	Payload129 *Payload129 `queryParam:"inline"`
	Payload130 *Payload130 `queryParam:"inline"`
	Payload131 *Payload131 `queryParam:"inline"`
	Payload132 *Payload132 `queryParam:"inline"`
	Payload133 *Payload133 `queryParam:"inline"`
	Payload134 *Payload134 `queryParam:"inline"`
	Payload135 *Payload135 `queryParam:"inline"`
	Payload136 *Payload136 `queryParam:"inline"`
	Payload137 *Payload137 `queryParam:"inline"`
	Payload138 *Payload138 `queryParam:"inline"`
	Payload139 *Payload139 `queryParam:"inline"`
	Payload140 *Payload140 `queryParam:"inline"`
	Payload141 *Payload141 `queryParam:"inline"`
	Payload142 *Payload142 `queryParam:"inline"`
	Payload143 *Payload143 `queryParam:"inline"`
	Payload144 *Payload144 `queryParam:"inline"`
	Payload145 *Payload145 `queryParam:"inline"`
	Payload146 *Payload146 `queryParam:"inline"`
	Payload147 *Payload147 `queryParam:"inline"`
	Payload148 *Payload148 `queryParam:"inline"`
	Payload149 *Payload149 `queryParam:"inline"`
	Payload150 *Payload150 `queryParam:"inline"`
	Payload151 *Payload151 `queryParam:"inline"`
	Payload152 *Payload152 `queryParam:"inline"`

	Type PayloadUnionType
}

func CreatePayloadUnionPayload1(payload1 Payload1) PayloadUnion {
	typ := PayloadUnionTypePayload1

	return PayloadUnion{
		Payload1: &payload1,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload2(payload2 Payload2) PayloadUnion {
	typ := PayloadUnionTypePayload2

	return PayloadUnion{
		Payload2: &payload2,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload3(payload3 Payload3) PayloadUnion {
	typ := PayloadUnionTypePayload3

	return PayloadUnion{
		Payload3: &payload3,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload4(payload4 Payload4) PayloadUnion {
	typ := PayloadUnionTypePayload4

	return PayloadUnion{
		Payload4: &payload4,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload5(payload5 Payload5) PayloadUnion {
	typ := PayloadUnionTypePayload5

	return PayloadUnion{
		Payload5: &payload5,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload6(payload6 Payload6) PayloadUnion {
	typ := PayloadUnionTypePayload6

	return PayloadUnion{
		Payload6: &payload6,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload7(payload7 Payload7) PayloadUnion {
	typ := PayloadUnionTypePayload7

	return PayloadUnion{
		Payload7: &payload7,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload8(payload8 Payload8) PayloadUnion {
	typ := PayloadUnionTypePayload8

	return PayloadUnion{
		Payload8: &payload8,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload9(payload9 Payload9) PayloadUnion {
	typ := PayloadUnionTypePayload9

	return PayloadUnion{
		Payload9: &payload9,
		Type:     typ,
	}
}

func CreatePayloadUnionPayload10(payload10 Payload10) PayloadUnion {
	typ := PayloadUnionTypePayload10

	return PayloadUnion{
		Payload10: &payload10,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload11(payload11 Payload11) PayloadUnion {
	typ := PayloadUnionTypePayload11

	return PayloadUnion{
		Payload11: &payload11,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload12(payload12 Payload12) PayloadUnion {
	typ := PayloadUnionTypePayload12

	return PayloadUnion{
		Payload12: &payload12,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload13(payload13 Payload13) PayloadUnion {
	typ := PayloadUnionTypePayload13

	return PayloadUnion{
		Payload13: &payload13,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload14(payload14 Payload14) PayloadUnion {
	typ := PayloadUnionTypePayload14

	return PayloadUnion{
		Payload14: &payload14,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload15(payload15 Payload15) PayloadUnion {
	typ := PayloadUnionTypePayload15

	return PayloadUnion{
		Payload15: &payload15,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload16(payload16 Payload16) PayloadUnion {
	typ := PayloadUnionTypePayload16

	return PayloadUnion{
		Payload16: &payload16,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload17(payload17 Payload17) PayloadUnion {
	typ := PayloadUnionTypePayload17

	return PayloadUnion{
		Payload17: &payload17,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload18(payload18 Payload18) PayloadUnion {
	typ := PayloadUnionTypePayload18

	return PayloadUnion{
		Payload18: &payload18,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload19(payload19 Payload19) PayloadUnion {
	typ := PayloadUnionTypePayload19

	return PayloadUnion{
		Payload19: &payload19,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload20(payload20 Payload20) PayloadUnion {
	typ := PayloadUnionTypePayload20

	return PayloadUnion{
		Payload20: &payload20,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload21(payload21 Payload21) PayloadUnion {
	typ := PayloadUnionTypePayload21

	return PayloadUnion{
		Payload21: &payload21,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload22(payload22 Payload22) PayloadUnion {
	typ := PayloadUnionTypePayload22

	return PayloadUnion{
		Payload22: &payload22,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload23(payload23 Payload23) PayloadUnion {
	typ := PayloadUnionTypePayload23

	return PayloadUnion{
		Payload23: &payload23,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload24(payload24 Payload24) PayloadUnion {
	typ := PayloadUnionTypePayload24

	return PayloadUnion{
		Payload24: &payload24,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload25(payload25 Payload25) PayloadUnion {
	typ := PayloadUnionTypePayload25

	return PayloadUnion{
		Payload25: &payload25,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload26(payload26 Payload26) PayloadUnion {
	typ := PayloadUnionTypePayload26

	return PayloadUnion{
		Payload26: &payload26,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload27(payload27 Payload27) PayloadUnion {
	typ := PayloadUnionTypePayload27

	return PayloadUnion{
		Payload27: &payload27,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload28(payload28 Payload28) PayloadUnion {
	typ := PayloadUnionTypePayload28

	return PayloadUnion{
		Payload28: &payload28,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload29(payload29 Payload29) PayloadUnion {
	typ := PayloadUnionTypePayload29

	return PayloadUnion{
		Payload29: &payload29,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload30(payload30 Payload30) PayloadUnion {
	typ := PayloadUnionTypePayload30

	return PayloadUnion{
		Payload30: &payload30,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload31(payload31 Payload31) PayloadUnion {
	typ := PayloadUnionTypePayload31

	return PayloadUnion{
		Payload31: &payload31,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload32(payload32 Payload32) PayloadUnion {
	typ := PayloadUnionTypePayload32

	return PayloadUnion{
		Payload32: &payload32,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload33(payload33 Payload33) PayloadUnion {
	typ := PayloadUnionTypePayload33

	return PayloadUnion{
		Payload33: &payload33,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload34(payload34 Payload34) PayloadUnion {
	typ := PayloadUnionTypePayload34

	return PayloadUnion{
		Payload34: &payload34,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload35(payload35 Payload35) PayloadUnion {
	typ := PayloadUnionTypePayload35

	return PayloadUnion{
		Payload35: &payload35,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload36(payload36 Payload36) PayloadUnion {
	typ := PayloadUnionTypePayload36

	return PayloadUnion{
		Payload36: &payload36,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload37(payload37 Payload37) PayloadUnion {
	typ := PayloadUnionTypePayload37

	return PayloadUnion{
		Payload37: &payload37,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload38(payload38 Payload38) PayloadUnion {
	typ := PayloadUnionTypePayload38

	return PayloadUnion{
		Payload38: &payload38,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload39(payload39 Payload39) PayloadUnion {
	typ := PayloadUnionTypePayload39

	return PayloadUnion{
		Payload39: &payload39,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload40(payload40 Payload40) PayloadUnion {
	typ := PayloadUnionTypePayload40

	return PayloadUnion{
		Payload40: &payload40,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload41(payload41 Payload41) PayloadUnion {
	typ := PayloadUnionTypePayload41

	return PayloadUnion{
		Payload41: &payload41,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload42(payload42 Payload42) PayloadUnion {
	typ := PayloadUnionTypePayload42

	return PayloadUnion{
		Payload42: &payload42,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload43(payload43 Payload43) PayloadUnion {
	typ := PayloadUnionTypePayload43

	return PayloadUnion{
		Payload43: &payload43,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload44(payload44 Payload44) PayloadUnion {
	typ := PayloadUnionTypePayload44

	return PayloadUnion{
		Payload44: &payload44,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload45(payload45 Payload45) PayloadUnion {
	typ := PayloadUnionTypePayload45

	return PayloadUnion{
		Payload45: &payload45,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload46(payload46 Payload46) PayloadUnion {
	typ := PayloadUnionTypePayload46

	return PayloadUnion{
		Payload46: &payload46,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload47(payload47 Payload47) PayloadUnion {
	typ := PayloadUnionTypePayload47

	return PayloadUnion{
		Payload47: &payload47,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload48(payload48 Payload48) PayloadUnion {
	typ := PayloadUnionTypePayload48

	return PayloadUnion{
		Payload48: &payload48,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload49(payload49 Payload49) PayloadUnion {
	typ := PayloadUnionTypePayload49

	return PayloadUnion{
		Payload49: &payload49,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload50(payload50 Payload50) PayloadUnion {
	typ := PayloadUnionTypePayload50

	return PayloadUnion{
		Payload50: &payload50,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload51(payload51 Payload51) PayloadUnion {
	typ := PayloadUnionTypePayload51

	return PayloadUnion{
		Payload51: &payload51,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload52(payload52 Payload52) PayloadUnion {
	typ := PayloadUnionTypePayload52

	return PayloadUnion{
		Payload52: &payload52,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload53(payload53 Payload53) PayloadUnion {
	typ := PayloadUnionTypePayload53

	return PayloadUnion{
		Payload53: &payload53,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload54(payload54 Payload54) PayloadUnion {
	typ := PayloadUnionTypePayload54

	return PayloadUnion{
		Payload54: &payload54,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload55(payload55 Payload55) PayloadUnion {
	typ := PayloadUnionTypePayload55

	return PayloadUnion{
		Payload55: &payload55,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload56(payload56 Payload56) PayloadUnion {
	typ := PayloadUnionTypePayload56

	return PayloadUnion{
		Payload56: &payload56,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload57(payload57 Payload57) PayloadUnion {
	typ := PayloadUnionTypePayload57

	return PayloadUnion{
		Payload57: &payload57,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload58(payload58 Payload58) PayloadUnion {
	typ := PayloadUnionTypePayload58

	return PayloadUnion{
		Payload58: &payload58,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload59(payload59 Payload59) PayloadUnion {
	typ := PayloadUnionTypePayload59

	return PayloadUnion{
		Payload59: &payload59,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload60(payload60 Payload60) PayloadUnion {
	typ := PayloadUnionTypePayload60

	return PayloadUnion{
		Payload60: &payload60,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload61(payload61 Payload61) PayloadUnion {
	typ := PayloadUnionTypePayload61

	return PayloadUnion{
		Payload61: &payload61,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload62(payload62 Payload62) PayloadUnion {
	typ := PayloadUnionTypePayload62

	return PayloadUnion{
		Payload62: &payload62,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload63(payload63 Payload63) PayloadUnion {
	typ := PayloadUnionTypePayload63

	return PayloadUnion{
		Payload63: &payload63,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload64(payload64 Payload64) PayloadUnion {
	typ := PayloadUnionTypePayload64

	return PayloadUnion{
		Payload64: &payload64,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload65(payload65 Payload65) PayloadUnion {
	typ := PayloadUnionTypePayload65

	return PayloadUnion{
		Payload65: &payload65,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload66(payload66 Payload66) PayloadUnion {
	typ := PayloadUnionTypePayload66

	return PayloadUnion{
		Payload66: &payload66,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload67(payload67 Payload67) PayloadUnion {
	typ := PayloadUnionTypePayload67

	return PayloadUnion{
		Payload67: &payload67,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload68(payload68 Payload68) PayloadUnion {
	typ := PayloadUnionTypePayload68

	return PayloadUnion{
		Payload68: &payload68,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload69(payload69 Payload69) PayloadUnion {
	typ := PayloadUnionTypePayload69

	return PayloadUnion{
		Payload69: &payload69,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload70(payload70 Payload70) PayloadUnion {
	typ := PayloadUnionTypePayload70

	return PayloadUnion{
		Payload70: &payload70,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload71(payload71 Payload71) PayloadUnion {
	typ := PayloadUnionTypePayload71

	return PayloadUnion{
		Payload71: &payload71,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload72(payload72 Payload72) PayloadUnion {
	typ := PayloadUnionTypePayload72

	return PayloadUnion{
		Payload72: &payload72,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload73(payload73 Payload73) PayloadUnion {
	typ := PayloadUnionTypePayload73

	return PayloadUnion{
		Payload73: &payload73,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload74(payload74 Payload74) PayloadUnion {
	typ := PayloadUnionTypePayload74

	return PayloadUnion{
		Payload74: &payload74,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload75(payload75 Payload75) PayloadUnion {
	typ := PayloadUnionTypePayload75

	return PayloadUnion{
		Payload75: &payload75,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload76(payload76 Payload76) PayloadUnion {
	typ := PayloadUnionTypePayload76

	return PayloadUnion{
		Payload76: &payload76,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload77(payload77 Payload77) PayloadUnion {
	typ := PayloadUnionTypePayload77

	return PayloadUnion{
		Payload77: &payload77,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload78(payload78 Payload78) PayloadUnion {
	typ := PayloadUnionTypePayload78

	return PayloadUnion{
		Payload78: &payload78,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload79(payload79 Payload79) PayloadUnion {
	typ := PayloadUnionTypePayload79

	return PayloadUnion{
		Payload79: &payload79,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload80(payload80 Payload80) PayloadUnion {
	typ := PayloadUnionTypePayload80

	return PayloadUnion{
		Payload80: &payload80,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload81(payload81 Payload81) PayloadUnion {
	typ := PayloadUnionTypePayload81

	return PayloadUnion{
		Payload81: &payload81,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload82(payload82 Payload82) PayloadUnion {
	typ := PayloadUnionTypePayload82

	return PayloadUnion{
		Payload82: &payload82,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload83(payload83 Payload83) PayloadUnion {
	typ := PayloadUnionTypePayload83

	return PayloadUnion{
		Payload83: &payload83,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload84(payload84 Payload84) PayloadUnion {
	typ := PayloadUnionTypePayload84

	return PayloadUnion{
		Payload84: &payload84,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload85(payload85 Payload85) PayloadUnion {
	typ := PayloadUnionTypePayload85

	return PayloadUnion{
		Payload85: &payload85,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload86(payload86 Payload86) PayloadUnion {
	typ := PayloadUnionTypePayload86

	return PayloadUnion{
		Payload86: &payload86,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload87(payload87 Payload87) PayloadUnion {
	typ := PayloadUnionTypePayload87

	return PayloadUnion{
		Payload87: &payload87,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload88(payload88 Payload88) PayloadUnion {
	typ := PayloadUnionTypePayload88

	return PayloadUnion{
		Payload88: &payload88,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload89(payload89 Payload89) PayloadUnion {
	typ := PayloadUnionTypePayload89

	return PayloadUnion{
		Payload89: &payload89,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload90(payload90 Payload90) PayloadUnion {
	typ := PayloadUnionTypePayload90

	return PayloadUnion{
		Payload90: &payload90,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload91(payload91 Payload91) PayloadUnion {
	typ := PayloadUnionTypePayload91

	return PayloadUnion{
		Payload91: &payload91,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload92(payload92 Payload92) PayloadUnion {
	typ := PayloadUnionTypePayload92

	return PayloadUnion{
		Payload92: &payload92,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload93(payload93 Payload93) PayloadUnion {
	typ := PayloadUnionTypePayload93

	return PayloadUnion{
		Payload93: &payload93,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload94(payload94 Payload94) PayloadUnion {
	typ := PayloadUnionTypePayload94

	return PayloadUnion{
		Payload94: &payload94,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload95(payload95 Payload95) PayloadUnion {
	typ := PayloadUnionTypePayload95

	return PayloadUnion{
		Payload95: &payload95,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload96(payload96 Payload96) PayloadUnion {
	typ := PayloadUnionTypePayload96

	return PayloadUnion{
		Payload96: &payload96,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload97(payload97 Payload97) PayloadUnion {
	typ := PayloadUnionTypePayload97

	return PayloadUnion{
		Payload97: &payload97,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload98(payload98 Payload98) PayloadUnion {
	typ := PayloadUnionTypePayload98

	return PayloadUnion{
		Payload98: &payload98,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload99(payload99 Payload99) PayloadUnion {
	typ := PayloadUnionTypePayload99

	return PayloadUnion{
		Payload99: &payload99,
		Type:      typ,
	}
}

func CreatePayloadUnionPayload100(payload100 Payload100) PayloadUnion {
	typ := PayloadUnionTypePayload100

	return PayloadUnion{
		Payload100: &payload100,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload101(payload101 Payload101) PayloadUnion {
	typ := PayloadUnionTypePayload101

	return PayloadUnion{
		Payload101: &payload101,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload102(payload102 Payload102) PayloadUnion {
	typ := PayloadUnionTypePayload102

	return PayloadUnion{
		Payload102: &payload102,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload103(payload103 Payload103) PayloadUnion {
	typ := PayloadUnionTypePayload103

	return PayloadUnion{
		Payload103: &payload103,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload104(payload104 Payload104) PayloadUnion {
	typ := PayloadUnionTypePayload104

	return PayloadUnion{
		Payload104: &payload104,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload105(payload105 Payload105) PayloadUnion {
	typ := PayloadUnionTypePayload105

	return PayloadUnion{
		Payload105: &payload105,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload106(payload106 Payload106) PayloadUnion {
	typ := PayloadUnionTypePayload106

	return PayloadUnion{
		Payload106: &payload106,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload107(payload107 Payload107) PayloadUnion {
	typ := PayloadUnionTypePayload107

	return PayloadUnion{
		Payload107: &payload107,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload108(payload108 Payload108) PayloadUnion {
	typ := PayloadUnionTypePayload108

	return PayloadUnion{
		Payload108: &payload108,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload109(payload109 Payload109) PayloadUnion {
	typ := PayloadUnionTypePayload109

	return PayloadUnion{
		Payload109: &payload109,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload110(payload110 Payload110) PayloadUnion {
	typ := PayloadUnionTypePayload110

	return PayloadUnion{
		Payload110: &payload110,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload111(payload111 Payload111) PayloadUnion {
	typ := PayloadUnionTypePayload111

	return PayloadUnion{
		Payload111: &payload111,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload112(payload112 Payload112) PayloadUnion {
	typ := PayloadUnionTypePayload112

	return PayloadUnion{
		Payload112: &payload112,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload113(payload113 Payload113) PayloadUnion {
	typ := PayloadUnionTypePayload113

	return PayloadUnion{
		Payload113: &payload113,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload114(payload114 Payload114) PayloadUnion {
	typ := PayloadUnionTypePayload114

	return PayloadUnion{
		Payload114: &payload114,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload115(payload115 Payload115) PayloadUnion {
	typ := PayloadUnionTypePayload115

	return PayloadUnion{
		Payload115: &payload115,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload116(payload116 Payload116) PayloadUnion {
	typ := PayloadUnionTypePayload116

	return PayloadUnion{
		Payload116: &payload116,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload117(payload117 Payload117) PayloadUnion {
	typ := PayloadUnionTypePayload117

	return PayloadUnion{
		Payload117: &payload117,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload118(payload118 Payload118) PayloadUnion {
	typ := PayloadUnionTypePayload118

	return PayloadUnion{
		Payload118: &payload118,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload119(payload119 Payload119) PayloadUnion {
	typ := PayloadUnionTypePayload119

	return PayloadUnion{
		Payload119: &payload119,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload120(payload120 Payload120) PayloadUnion {
	typ := PayloadUnionTypePayload120

	return PayloadUnion{
		Payload120: &payload120,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload121(payload121 Payload121) PayloadUnion {
	typ := PayloadUnionTypePayload121

	return PayloadUnion{
		Payload121: &payload121,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload122(payload122 Payload122) PayloadUnion {
	typ := PayloadUnionTypePayload122

	return PayloadUnion{
		Payload122: &payload122,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload123(payload123 Payload123) PayloadUnion {
	typ := PayloadUnionTypePayload123

	return PayloadUnion{
		Payload123: &payload123,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload124(payload124 Payload124) PayloadUnion {
	typ := PayloadUnionTypePayload124

	return PayloadUnion{
		Payload124: &payload124,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload125(payload125 Payload125) PayloadUnion {
	typ := PayloadUnionTypePayload125

	return PayloadUnion{
		Payload125: &payload125,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload126(payload126 Payload126) PayloadUnion {
	typ := PayloadUnionTypePayload126

	return PayloadUnion{
		Payload126: &payload126,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload127(payload127 Payload127) PayloadUnion {
	typ := PayloadUnionTypePayload127

	return PayloadUnion{
		Payload127: &payload127,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload128(payload128 Payload128) PayloadUnion {
	typ := PayloadUnionTypePayload128

	return PayloadUnion{
		Payload128: &payload128,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload129(payload129 Payload129) PayloadUnion {
	typ := PayloadUnionTypePayload129

	return PayloadUnion{
		Payload129: &payload129,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload130(payload130 Payload130) PayloadUnion {
	typ := PayloadUnionTypePayload130

	return PayloadUnion{
		Payload130: &payload130,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload131(payload131 Payload131) PayloadUnion {
	typ := PayloadUnionTypePayload131

	return PayloadUnion{
		Payload131: &payload131,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload132(payload132 Payload132) PayloadUnion {
	typ := PayloadUnionTypePayload132

	return PayloadUnion{
		Payload132: &payload132,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload133(payload133 Payload133) PayloadUnion {
	typ := PayloadUnionTypePayload133

	return PayloadUnion{
		Payload133: &payload133,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload134(payload134 Payload134) PayloadUnion {
	typ := PayloadUnionTypePayload134

	return PayloadUnion{
		Payload134: &payload134,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload135(payload135 Payload135) PayloadUnion {
	typ := PayloadUnionTypePayload135

	return PayloadUnion{
		Payload135: &payload135,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload136(payload136 Payload136) PayloadUnion {
	typ := PayloadUnionTypePayload136

	return PayloadUnion{
		Payload136: &payload136,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload137(payload137 Payload137) PayloadUnion {
	typ := PayloadUnionTypePayload137

	return PayloadUnion{
		Payload137: &payload137,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload138(payload138 Payload138) PayloadUnion {
	typ := PayloadUnionTypePayload138

	return PayloadUnion{
		Payload138: &payload138,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload139(payload139 Payload139) PayloadUnion {
	typ := PayloadUnionTypePayload139

	return PayloadUnion{
		Payload139: &payload139,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload140(payload140 Payload140) PayloadUnion {
	typ := PayloadUnionTypePayload140

	return PayloadUnion{
		Payload140: &payload140,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload141(payload141 Payload141) PayloadUnion {
	typ := PayloadUnionTypePayload141

	return PayloadUnion{
		Payload141: &payload141,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload142(payload142 Payload142) PayloadUnion {
	typ := PayloadUnionTypePayload142

	return PayloadUnion{
		Payload142: &payload142,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload143(payload143 Payload143) PayloadUnion {
	typ := PayloadUnionTypePayload143

	return PayloadUnion{
		Payload143: &payload143,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload144(payload144 Payload144) PayloadUnion {
	typ := PayloadUnionTypePayload144

	return PayloadUnion{
		Payload144: &payload144,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload145(payload145 Payload145) PayloadUnion {
	typ := PayloadUnionTypePayload145

	return PayloadUnion{
		Payload145: &payload145,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload146(payload146 Payload146) PayloadUnion {
	typ := PayloadUnionTypePayload146

	return PayloadUnion{
		Payload146: &payload146,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload147(payload147 Payload147) PayloadUnion {
	typ := PayloadUnionTypePayload147

	return PayloadUnion{
		Payload147: &payload147,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload148(payload148 Payload148) PayloadUnion {
	typ := PayloadUnionTypePayload148

	return PayloadUnion{
		Payload148: &payload148,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload149(payload149 Payload149) PayloadUnion {
	typ := PayloadUnionTypePayload149

	return PayloadUnion{
		Payload149: &payload149,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload150(payload150 Payload150) PayloadUnion {
	typ := PayloadUnionTypePayload150

	return PayloadUnion{
		Payload150: &payload150,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload151(payload151 Payload151) PayloadUnion {
	typ := PayloadUnionTypePayload151

	return PayloadUnion{
		Payload151: &payload151,
		Type:       typ,
	}
}

func CreatePayloadUnionPayload152(payload152 Payload152) PayloadUnion {
	typ := PayloadUnionTypePayload152

	return PayloadUnion{
		Payload152: &payload152,
		Type:       typ,
	}
}

func (u *PayloadUnion) UnmarshalJSON(data []byte) error {

	var payload1 Payload1 = Payload1{}
	if err := utils.UnmarshalJSON(data, &payload1, "", true, true); err == nil {
		u.Payload1 = &payload1
		u.Type = PayloadUnionTypePayload1
		return nil
	}

	var payload96 Payload96 = Payload96{}
	if err := utils.UnmarshalJSON(data, &payload96, "", true, true); err == nil {
		u.Payload96 = &payload96
		u.Type = PayloadUnionTypePayload96
		return nil
	}

	var payload28 Payload28 = Payload28{}
	if err := utils.UnmarshalJSON(data, &payload28, "", true, true); err == nil {
		u.Payload28 = &payload28
		u.Type = PayloadUnionTypePayload28
		return nil
	}

	var payload114 Payload114 = Payload114{}
	if err := utils.UnmarshalJSON(data, &payload114, "", true, true); err == nil {
		u.Payload114 = &payload114
		u.Type = PayloadUnionTypePayload114
		return nil
	}

	var payload73 Payload73 = Payload73{}
	if err := utils.UnmarshalJSON(data, &payload73, "", true, true); err == nil {
		u.Payload73 = &payload73
		u.Type = PayloadUnionTypePayload73
		return nil
	}

	var payload85 Payload85 = Payload85{}
	if err := utils.UnmarshalJSON(data, &payload85, "", true, true); err == nil {
		u.Payload85 = &payload85
		u.Type = PayloadUnionTypePayload85
		return nil
	}

	var payload91 Payload91 = Payload91{}
	if err := utils.UnmarshalJSON(data, &payload91, "", true, true); err == nil {
		u.Payload91 = &payload91
		u.Type = PayloadUnionTypePayload91
		return nil
	}

	var payload144 Payload144 = Payload144{}
	if err := utils.UnmarshalJSON(data, &payload144, "", true, true); err == nil {
		u.Payload144 = &payload144
		u.Type = PayloadUnionTypePayload144
		return nil
	}

	var payload9 Payload9 = Payload9{}
	if err := utils.UnmarshalJSON(data, &payload9, "", true, true); err == nil {
		u.Payload9 = &payload9
		u.Type = PayloadUnionTypePayload9
		return nil
	}

	var payload98 Payload98 = Payload98{}
	if err := utils.UnmarshalJSON(data, &payload98, "", true, true); err == nil {
		u.Payload98 = &payload98
		u.Type = PayloadUnionTypePayload98
		return nil
	}

	var payload138 Payload138 = Payload138{}
	if err := utils.UnmarshalJSON(data, &payload138, "", true, true); err == nil {
		u.Payload138 = &payload138
		u.Type = PayloadUnionTypePayload138
		return nil
	}

	var payload134 Payload134 = Payload134{}
	if err := utils.UnmarshalJSON(data, &payload134, "", true, true); err == nil {
		u.Payload134 = &payload134
		u.Type = PayloadUnionTypePayload134
		return nil
	}

	var payload99 Payload99 = Payload99{}
	if err := utils.UnmarshalJSON(data, &payload99, "", true, true); err == nil {
		u.Payload99 = &payload99
		u.Type = PayloadUnionTypePayload99
		return nil
	}

	var payload100 Payload100 = Payload100{}
	if err := utils.UnmarshalJSON(data, &payload100, "", true, true); err == nil {
		u.Payload100 = &payload100
		u.Type = PayloadUnionTypePayload100
		return nil
	}

	var payload102 Payload102 = Payload102{}
	if err := utils.UnmarshalJSON(data, &payload102, "", true, true); err == nil {
		u.Payload102 = &payload102
		u.Type = PayloadUnionTypePayload102
		return nil
	}

	var payload113 Payload113 = Payload113{}
	if err := utils.UnmarshalJSON(data, &payload113, "", true, true); err == nil {
		u.Payload113 = &payload113
		u.Type = PayloadUnionTypePayload113
		return nil
	}

	var payload104 Payload104 = Payload104{}
	if err := utils.UnmarshalJSON(data, &payload104, "", true, true); err == nil {
		u.Payload104 = &payload104
		u.Type = PayloadUnionTypePayload104
		return nil
	}

	var payload148 Payload148 = Payload148{}
	if err := utils.UnmarshalJSON(data, &payload148, "", true, true); err == nil {
		u.Payload148 = &payload148
		u.Type = PayloadUnionTypePayload148
		return nil
	}

	var payload19 Payload19 = Payload19{}
	if err := utils.UnmarshalJSON(data, &payload19, "", true, true); err == nil {
		u.Payload19 = &payload19
		u.Type = PayloadUnionTypePayload19
		return nil
	}

	var payload112 Payload112 = Payload112{}
	if err := utils.UnmarshalJSON(data, &payload112, "", true, true); err == nil {
		u.Payload112 = &payload112
		u.Type = PayloadUnionTypePayload112
		return nil
	}

	var payload43 Payload43 = Payload43{}
	if err := utils.UnmarshalJSON(data, &payload43, "", true, true); err == nil {
		u.Payload43 = &payload43
		u.Type = PayloadUnionTypePayload43
		return nil
	}

	var payload120 Payload120 = Payload120{}
	if err := utils.UnmarshalJSON(data, &payload120, "", true, true); err == nil {
		u.Payload120 = &payload120
		u.Type = PayloadUnionTypePayload120
		return nil
	}

	var payload3 Payload3 = Payload3{}
	if err := utils.UnmarshalJSON(data, &payload3, "", true, true); err == nil {
		u.Payload3 = &payload3
		u.Type = PayloadUnionTypePayload3
		return nil
	}

	var payload33 Payload33 = Payload33{}
	if err := utils.UnmarshalJSON(data, &payload33, "", true, true); err == nil {
		u.Payload33 = &payload33
		u.Type = PayloadUnionTypePayload33
		return nil
	}

	var payload115 Payload115 = Payload115{}
	if err := utils.UnmarshalJSON(data, &payload115, "", true, true); err == nil {
		u.Payload115 = &payload115
		u.Type = PayloadUnionTypePayload115
		return nil
	}

	var payload118 Payload118 = Payload118{}
	if err := utils.UnmarshalJSON(data, &payload118, "", true, true); err == nil {
		u.Payload118 = &payload118
		u.Type = PayloadUnionTypePayload118
		return nil
	}

	var payload4 Payload4 = Payload4{}
	if err := utils.UnmarshalJSON(data, &payload4, "", true, true); err == nil {
		u.Payload4 = &payload4
		u.Type = PayloadUnionTypePayload4
		return nil
	}

	var payload48 Payload48 = Payload48{}
	if err := utils.UnmarshalJSON(data, &payload48, "", true, true); err == nil {
		u.Payload48 = &payload48
		u.Type = PayloadUnionTypePayload48
		return nil
	}

	var payload26 Payload26 = Payload26{}
	if err := utils.UnmarshalJSON(data, &payload26, "", true, true); err == nil {
		u.Payload26 = &payload26
		u.Type = PayloadUnionTypePayload26
		return nil
	}

	var payload117 Payload117 = Payload117{}
	if err := utils.UnmarshalJSON(data, &payload117, "", true, true); err == nil {
		u.Payload117 = &payload117
		u.Type = PayloadUnionTypePayload117
		return nil
	}

	var payload116 Payload116 = Payload116{}
	if err := utils.UnmarshalJSON(data, &payload116, "", true, true); err == nil {
		u.Payload116 = &payload116
		u.Type = PayloadUnionTypePayload116
		return nil
	}

	var payload25 Payload25 = Payload25{}
	if err := utils.UnmarshalJSON(data, &payload25, "", true, true); err == nil {
		u.Payload25 = &payload25
		u.Type = PayloadUnionTypePayload25
		return nil
	}

	var payload119 Payload119 = Payload119{}
	if err := utils.UnmarshalJSON(data, &payload119, "", true, true); err == nil {
		u.Payload119 = &payload119
		u.Type = PayloadUnionTypePayload119
		return nil
	}

	var payload23 Payload23 = Payload23{}
	if err := utils.UnmarshalJSON(data, &payload23, "", true, true); err == nil {
		u.Payload23 = &payload23
		u.Type = PayloadUnionTypePayload23
		return nil
	}

	var payload36 Payload36 = Payload36{}
	if err := utils.UnmarshalJSON(data, &payload36, "", true, true); err == nil {
		u.Payload36 = &payload36
		u.Type = PayloadUnionTypePayload36
		return nil
	}

	var payload122 Payload122 = Payload122{}
	if err := utils.UnmarshalJSON(data, &payload122, "", true, true); err == nil {
		u.Payload122 = &payload122
		u.Type = PayloadUnionTypePayload122
		return nil
	}

	var payload123 Payload123 = Payload123{}
	if err := utils.UnmarshalJSON(data, &payload123, "", true, true); err == nil {
		u.Payload123 = &payload123
		u.Type = PayloadUnionTypePayload123
		return nil
	}

	var payload110 Payload110 = Payload110{}
	if err := utils.UnmarshalJSON(data, &payload110, "", true, true); err == nil {
		u.Payload110 = &payload110
		u.Type = PayloadUnionTypePayload110
		return nil
	}

	var payload18 Payload18 = Payload18{}
	if err := utils.UnmarshalJSON(data, &payload18, "", true, true); err == nil {
		u.Payload18 = &payload18
		u.Type = PayloadUnionTypePayload18
		return nil
	}

	var payload17 Payload17 = Payload17{}
	if err := utils.UnmarshalJSON(data, &payload17, "", true, true); err == nil {
		u.Payload17 = &payload17
		u.Type = PayloadUnionTypePayload17
		return nil
	}

	var payload41 Payload41 = Payload41{}
	if err := utils.UnmarshalJSON(data, &payload41, "", true, true); err == nil {
		u.Payload41 = &payload41
		u.Type = PayloadUnionTypePayload41
		return nil
	}

	var payload103 Payload103 = Payload103{}
	if err := utils.UnmarshalJSON(data, &payload103, "", true, true); err == nil {
		u.Payload103 = &payload103
		u.Type = PayloadUnionTypePayload103
		return nil
	}

	var payload131 Payload131 = Payload131{}
	if err := utils.UnmarshalJSON(data, &payload131, "", true, true); err == nil {
		u.Payload131 = &payload131
		u.Type = PayloadUnionTypePayload131
		return nil
	}

	var payload132 Payload132 = Payload132{}
	if err := utils.UnmarshalJSON(data, &payload132, "", true, true); err == nil {
		u.Payload132 = &payload132
		u.Type = PayloadUnionTypePayload132
		return nil
	}

	var payload45 Payload45 = Payload45{}
	if err := utils.UnmarshalJSON(data, &payload45, "", true, true); err == nil {
		u.Payload45 = &payload45
		u.Type = PayloadUnionTypePayload45
		return nil
	}

	var payload14 Payload14 = Payload14{}
	if err := utils.UnmarshalJSON(data, &payload14, "", true, true); err == nil {
		u.Payload14 = &payload14
		u.Type = PayloadUnionTypePayload14
		return nil
	}

	var payload133 Payload133 = Payload133{}
	if err := utils.UnmarshalJSON(data, &payload133, "", true, true); err == nil {
		u.Payload133 = &payload133
		u.Type = PayloadUnionTypePayload133
		return nil
	}

	var payload27 Payload27 = Payload27{}
	if err := utils.UnmarshalJSON(data, &payload27, "", true, true); err == nil {
		u.Payload27 = &payload27
		u.Type = PayloadUnionTypePayload27
		return nil
	}

	var payload141 Payload141 = Payload141{}
	if err := utils.UnmarshalJSON(data, &payload141, "", true, true); err == nil {
		u.Payload141 = &payload141
		u.Type = PayloadUnionTypePayload141
		return nil
	}

	var payload69 Payload69 = Payload69{}
	if err := utils.UnmarshalJSON(data, &payload69, "", true, true); err == nil {
		u.Payload69 = &payload69
		u.Type = PayloadUnionTypePayload69
		return nil
	}

	var payload94 Payload94 = Payload94{}
	if err := utils.UnmarshalJSON(data, &payload94, "", true, true); err == nil {
		u.Payload94 = &payload94
		u.Type = PayloadUnionTypePayload94
		return nil
	}

	var payload52 Payload52 = Payload52{}
	if err := utils.UnmarshalJSON(data, &payload52, "", true, true); err == nil {
		u.Payload52 = &payload52
		u.Type = PayloadUnionTypePayload52
		return nil
	}

	var payload93 Payload93 = Payload93{}
	if err := utils.UnmarshalJSON(data, &payload93, "", true, true); err == nil {
		u.Payload93 = &payload93
		u.Type = PayloadUnionTypePayload93
		return nil
	}

	var payload145 Payload145 = Payload145{}
	if err := utils.UnmarshalJSON(data, &payload145, "", true, true); err == nil {
		u.Payload145 = &payload145
		u.Type = PayloadUnionTypePayload145
		return nil
	}

	var payload55 Payload55 = Payload55{}
	if err := utils.UnmarshalJSON(data, &payload55, "", true, true); err == nil {
		u.Payload55 = &payload55
		u.Type = PayloadUnionTypePayload55
		return nil
	}

	var payload90 Payload90 = Payload90{}
	if err := utils.UnmarshalJSON(data, &payload90, "", true, true); err == nil {
		u.Payload90 = &payload90
		u.Type = PayloadUnionTypePayload90
		return nil
	}

	var payload89 Payload89 = Payload89{}
	if err := utils.UnmarshalJSON(data, &payload89, "", true, true); err == nil {
		u.Payload89 = &payload89
		u.Type = PayloadUnionTypePayload89
		return nil
	}

	var payload86 Payload86 = Payload86{}
	if err := utils.UnmarshalJSON(data, &payload86, "", true, true); err == nil {
		u.Payload86 = &payload86
		u.Type = PayloadUnionTypePayload86
		return nil
	}

	var payload146 Payload146 = Payload146{}
	if err := utils.UnmarshalJSON(data, &payload146, "", true, true); err == nil {
		u.Payload146 = &payload146
		u.Type = PayloadUnionTypePayload146
		return nil
	}

	var payload84 Payload84 = Payload84{}
	if err := utils.UnmarshalJSON(data, &payload84, "", true, true); err == nil {
		u.Payload84 = &payload84
		u.Type = PayloadUnionTypePayload84
		return nil
	}

	var payload83 Payload83 = Payload83{}
	if err := utils.UnmarshalJSON(data, &payload83, "", true, true); err == nil {
		u.Payload83 = &payload83
		u.Type = PayloadUnionTypePayload83
		return nil
	}

	var payload82 Payload82 = Payload82{}
	if err := utils.UnmarshalJSON(data, &payload82, "", true, true); err == nil {
		u.Payload82 = &payload82
		u.Type = PayloadUnionTypePayload82
		return nil
	}

	var payload63 Payload63 = Payload63{}
	if err := utils.UnmarshalJSON(data, &payload63, "", true, true); err == nil {
		u.Payload63 = &payload63
		u.Type = PayloadUnionTypePayload63
		return nil
	}

	var payload77 Payload77 = Payload77{}
	if err := utils.UnmarshalJSON(data, &payload77, "", true, true); err == nil {
		u.Payload77 = &payload77
		u.Type = PayloadUnionTypePayload77
		return nil
	}

	var payload147 Payload147 = Payload147{}
	if err := utils.UnmarshalJSON(data, &payload147, "", true, true); err == nil {
		u.Payload147 = &payload147
		u.Type = PayloadUnionTypePayload147
		return nil
	}

	var payload71 Payload71 = Payload71{}
	if err := utils.UnmarshalJSON(data, &payload71, "", true, true); err == nil {
		u.Payload71 = &payload71
		u.Type = PayloadUnionTypePayload71
		return nil
	}

	var payload70 Payload70 = Payload70{}
	if err := utils.UnmarshalJSON(data, &payload70, "", true, true); err == nil {
		u.Payload70 = &payload70
		u.Type = PayloadUnionTypePayload70
		return nil
	}

	var payload39 Payload39 = Payload39{}
	if err := utils.UnmarshalJSON(data, &payload39, "", true, true); err == nil {
		u.Payload39 = &payload39
		u.Type = PayloadUnionTypePayload39
		return nil
	}

	var payload38 Payload38 = Payload38{}
	if err := utils.UnmarshalJSON(data, &payload38, "", true, true); err == nil {
		u.Payload38 = &payload38
		u.Type = PayloadUnionTypePayload38
		return nil
	}

	var payload150 Payload150 = Payload150{}
	if err := utils.UnmarshalJSON(data, &payload150, "", true, true); err == nil {
		u.Payload150 = &payload150
		u.Type = PayloadUnionTypePayload150
		return nil
	}

	var payload149 Payload149 = Payload149{}
	if err := utils.UnmarshalJSON(data, &payload149, "", true, true); err == nil {
		u.Payload149 = &payload149
		u.Type = PayloadUnionTypePayload149
		return nil
	}

	var payload72 Payload72 = Payload72{}
	if err := utils.UnmarshalJSON(data, &payload72, "", true, true); err == nil {
		u.Payload72 = &payload72
		u.Type = PayloadUnionTypePayload72
		return nil
	}

	var payload5 Payload5 = Payload5{}
	if err := utils.UnmarshalJSON(data, &payload5, "", true, true); err == nil {
		u.Payload5 = &payload5
		u.Type = PayloadUnionTypePayload5
		return nil
	}

	var payload8 Payload8 = Payload8{}
	if err := utils.UnmarshalJSON(data, &payload8, "", true, true); err == nil {
		u.Payload8 = &payload8
		u.Type = PayloadUnionTypePayload8
		return nil
	}

	var payload142 Payload142 = Payload142{}
	if err := utils.UnmarshalJSON(data, &payload142, "", true, true); err == nil {
		u.Payload142 = &payload142
		u.Type = PayloadUnionTypePayload142
		return nil
	}

	var payload10 Payload10 = Payload10{}
	if err := utils.UnmarshalJSON(data, &payload10, "", true, true); err == nil {
		u.Payload10 = &payload10
		u.Type = PayloadUnionTypePayload10
		return nil
	}

	var payload139 Payload139 = Payload139{}
	if err := utils.UnmarshalJSON(data, &payload139, "", true, true); err == nil {
		u.Payload139 = &payload139
		u.Type = PayloadUnionTypePayload139
		return nil
	}

	var payload78 Payload78 = Payload78{}
	if err := utils.UnmarshalJSON(data, &payload78, "", true, true); err == nil {
		u.Payload78 = &payload78
		u.Type = PayloadUnionTypePayload78
		return nil
	}

	var payload79 Payload79 = Payload79{}
	if err := utils.UnmarshalJSON(data, &payload79, "", true, true); err == nil {
		u.Payload79 = &payload79
		u.Type = PayloadUnionTypePayload79
		return nil
	}

	var payload137 Payload137 = Payload137{}
	if err := utils.UnmarshalJSON(data, &payload137, "", true, true); err == nil {
		u.Payload137 = &payload137
		u.Type = PayloadUnionTypePayload137
		return nil
	}

	var payload81 Payload81 = Payload81{}
	if err := utils.UnmarshalJSON(data, &payload81, "", true, true); err == nil {
		u.Payload81 = &payload81
		u.Type = PayloadUnionTypePayload81
		return nil
	}

	var payload135 Payload135 = Payload135{}
	if err := utils.UnmarshalJSON(data, &payload135, "", true, true); err == nil {
		u.Payload135 = &payload135
		u.Type = PayloadUnionTypePayload135
		return nil
	}

	var payload61 Payload61 = Payload61{}
	if err := utils.UnmarshalJSON(data, &payload61, "", true, true); err == nil {
		u.Payload61 = &payload61
		u.Type = PayloadUnionTypePayload61
		return nil
	}

	var payload60 Payload60 = Payload60{}
	if err := utils.UnmarshalJSON(data, &payload60, "", true, true); err == nil {
		u.Payload60 = &payload60
		u.Type = PayloadUnionTypePayload60
		return nil
	}

	var payload12 Payload12 = Payload12{}
	if err := utils.UnmarshalJSON(data, &payload12, "", true, true); err == nil {
		u.Payload12 = &payload12
		u.Type = PayloadUnionTypePayload12
		return nil
	}

	var payload58 Payload58 = Payload58{}
	if err := utils.UnmarshalJSON(data, &payload58, "", true, true); err == nil {
		u.Payload58 = &payload58
		u.Type = PayloadUnionTypePayload58
		return nil
	}

	var payload87 Payload87 = Payload87{}
	if err := utils.UnmarshalJSON(data, &payload87, "", true, true); err == nil {
		u.Payload87 = &payload87
		u.Type = PayloadUnionTypePayload87
		return nil
	}

	var payload88 Payload88 = Payload88{}
	if err := utils.UnmarshalJSON(data, &payload88, "", true, true); err == nil {
		u.Payload88 = &payload88
		u.Type = PayloadUnionTypePayload88
		return nil
	}

	var payload13 Payload13 = Payload13{}
	if err := utils.UnmarshalJSON(data, &payload13, "", true, true); err == nil {
		u.Payload13 = &payload13
		u.Type = PayloadUnionTypePayload13
		return nil
	}

	var payload128 Payload128 = Payload128{}
	if err := utils.UnmarshalJSON(data, &payload128, "", true, true); err == nil {
		u.Payload128 = &payload128
		u.Type = PayloadUnionTypePayload128
		return nil
	}

	var payload54 Payload54 = Payload54{}
	if err := utils.UnmarshalJSON(data, &payload54, "", true, true); err == nil {
		u.Payload54 = &payload54
		u.Type = PayloadUnionTypePayload54
		return nil
	}

	var payload92 Payload92 = Payload92{}
	if err := utils.UnmarshalJSON(data, &payload92, "", true, true); err == nil {
		u.Payload92 = &payload92
		u.Type = PayloadUnionTypePayload92
		return nil
	}

	var payload53 Payload53 = Payload53{}
	if err := utils.UnmarshalJSON(data, &payload53, "", true, true); err == nil {
		u.Payload53 = &payload53
		u.Type = PayloadUnionTypePayload53
		return nil
	}

	var payload51 Payload51 = Payload51{}
	if err := utils.UnmarshalJSON(data, &payload51, "", true, true); err == nil {
		u.Payload51 = &payload51
		u.Type = PayloadUnionTypePayload51
		return nil
	}

	var payload95 Payload95 = Payload95{}
	if err := utils.UnmarshalJSON(data, &payload95, "", true, true); err == nil {
		u.Payload95 = &payload95
		u.Type = PayloadUnionTypePayload95
		return nil
	}

	var payload50 Payload50 = Payload50{}
	if err := utils.UnmarshalJSON(data, &payload50, "", true, true); err == nil {
		u.Payload50 = &payload50
		u.Type = PayloadUnionTypePayload50
		return nil
	}

	var payload21 Payload21 = Payload21{}
	if err := utils.UnmarshalJSON(data, &payload21, "", true, true); err == nil {
		u.Payload21 = &payload21
		u.Type = PayloadUnionTypePayload21
		return nil
	}

	var payload49 Payload49 = Payload49{}
	if err := utils.UnmarshalJSON(data, &payload49, "", true, true); err == nil {
		u.Payload49 = &payload49
		u.Type = PayloadUnionTypePayload49
		return nil
	}

	var payload47 Payload47 = Payload47{}
	if err := utils.UnmarshalJSON(data, &payload47, "", true, true); err == nil {
		u.Payload47 = &payload47
		u.Type = PayloadUnionTypePayload47
		return nil
	}

	var payload121 Payload121 = Payload121{}
	if err := utils.UnmarshalJSON(data, &payload121, "", true, true); err == nil {
		u.Payload121 = &payload121
		u.Type = PayloadUnionTypePayload121
		return nil
	}

	var payload22 Payload22 = Payload22{}
	if err := utils.UnmarshalJSON(data, &payload22, "", true, true); err == nil {
		u.Payload22 = &payload22
		u.Type = PayloadUnionTypePayload22
		return nil
	}

	var payload44 Payload44 = Payload44{}
	if err := utils.UnmarshalJSON(data, &payload44, "", true, true); err == nil {
		u.Payload44 = &payload44
		u.Type = PayloadUnionTypePayload44
		return nil
	}

	var payload24 Payload24 = Payload24{}
	if err := utils.UnmarshalJSON(data, &payload24, "", true, true); err == nil {
		u.Payload24 = &payload24
		u.Type = PayloadUnionTypePayload24
		return nil
	}

	var payload31 Payload31 = Payload31{}
	if err := utils.UnmarshalJSON(data, &payload31, "", true, true); err == nil {
		u.Payload31 = &payload31
		u.Type = PayloadUnionTypePayload31
		return nil
	}

	var payload32 Payload32 = Payload32{}
	if err := utils.UnmarshalJSON(data, &payload32, "", true, true); err == nil {
		u.Payload32 = &payload32
		u.Type = PayloadUnionTypePayload32
		return nil
	}

	var payload34 Payload34 = Payload34{}
	if err := utils.UnmarshalJSON(data, &payload34, "", true, true); err == nil {
		u.Payload34 = &payload34
		u.Type = PayloadUnionTypePayload34
		return nil
	}

	var payload35 Payload35 = Payload35{}
	if err := utils.UnmarshalJSON(data, &payload35, "", true, true); err == nil {
		u.Payload35 = &payload35
		u.Type = PayloadUnionTypePayload35
		return nil
	}

	var payload108 Payload108 = Payload108{}
	if err := utils.UnmarshalJSON(data, &payload108, "", true, true); err == nil {
		u.Payload108 = &payload108
		u.Type = PayloadUnionTypePayload108
		return nil
	}

	var payload111 Payload111 = Payload111{}
	if err := utils.UnmarshalJSON(data, &payload111, "", true, true); err == nil {
		u.Payload111 = &payload111
		u.Type = PayloadUnionTypePayload111
		return nil
	}

	var payload16 Payload16 = Payload16{}
	if err := utils.UnmarshalJSON(data, &payload16, "", true, true); err == nil {
		u.Payload16 = &payload16
		u.Type = PayloadUnionTypePayload16
		return nil
	}

	var payload76 Payload76 = Payload76{}
	if err := utils.UnmarshalJSON(data, &payload76, "", true, true); err == nil {
		u.Payload76 = &payload76
		u.Type = PayloadUnionTypePayload76
		return nil
	}

	var payload151 Payload151 = Payload151{}
	if err := utils.UnmarshalJSON(data, &payload151, "", true, true); err == nil {
		u.Payload151 = &payload151
		u.Type = PayloadUnionTypePayload151
		return nil
	}

	var payload2 Payload2 = Payload2{}
	if err := utils.UnmarshalJSON(data, &payload2, "", true, true); err == nil {
		u.Payload2 = &payload2
		u.Type = PayloadUnionTypePayload2
		return nil
	}

	var payload6 Payload6 = Payload6{}
	if err := utils.UnmarshalJSON(data, &payload6, "", true, true); err == nil {
		u.Payload6 = &payload6
		u.Type = PayloadUnionTypePayload6
		return nil
	}

	var payload105 Payload105 = Payload105{}
	if err := utils.UnmarshalJSON(data, &payload105, "", true, true); err == nil {
		u.Payload105 = &payload105
		u.Type = PayloadUnionTypePayload105
		return nil
	}

	var payload143 Payload143 = Payload143{}
	if err := utils.UnmarshalJSON(data, &payload143, "", true, true); err == nil {
		u.Payload143 = &payload143
		u.Type = PayloadUnionTypePayload143
		return nil
	}

	var payload75 Payload75 = Payload75{}
	if err := utils.UnmarshalJSON(data, &payload75, "", true, true); err == nil {
		u.Payload75 = &payload75
		u.Type = PayloadUnionTypePayload75
		return nil
	}

	var payload29 Payload29 = Payload29{}
	if err := utils.UnmarshalJSON(data, &payload29, "", true, true); err == nil {
		u.Payload29 = &payload29
		u.Type = PayloadUnionTypePayload29
		return nil
	}

	var payload140 Payload140 = Payload140{}
	if err := utils.UnmarshalJSON(data, &payload140, "", true, true); err == nil {
		u.Payload140 = &payload140
		u.Type = PayloadUnionTypePayload140
		return nil
	}

	var payload11 Payload11 = Payload11{}
	if err := utils.UnmarshalJSON(data, &payload11, "", true, true); err == nil {
		u.Payload11 = &payload11
		u.Type = PayloadUnionTypePayload11
		return nil
	}

	var payload46 Payload46 = Payload46{}
	if err := utils.UnmarshalJSON(data, &payload46, "", true, true); err == nil {
		u.Payload46 = &payload46
		u.Type = PayloadUnionTypePayload46
		return nil
	}

	var payload97 Payload97 = Payload97{}
	if err := utils.UnmarshalJSON(data, &payload97, "", true, true); err == nil {
		u.Payload97 = &payload97
		u.Type = PayloadUnionTypePayload97
		return nil
	}

	var payload20 Payload20 = Payload20{}
	if err := utils.UnmarshalJSON(data, &payload20, "", true, true); err == nil {
		u.Payload20 = &payload20
		u.Type = PayloadUnionTypePayload20
		return nil
	}

	var payload136 Payload136 = Payload136{}
	if err := utils.UnmarshalJSON(data, &payload136, "", true, true); err == nil {
		u.Payload136 = &payload136
		u.Type = PayloadUnionTypePayload136
		return nil
	}

	var payload15 Payload15 = Payload15{}
	if err := utils.UnmarshalJSON(data, &payload15, "", true, true); err == nil {
		u.Payload15 = &payload15
		u.Type = PayloadUnionTypePayload15
		return nil
	}

	var payload130 Payload130 = Payload130{}
	if err := utils.UnmarshalJSON(data, &payload130, "", true, true); err == nil {
		u.Payload130 = &payload130
		u.Type = PayloadUnionTypePayload130
		return nil
	}

	var payload129 Payload129 = Payload129{}
	if err := utils.UnmarshalJSON(data, &payload129, "", true, true); err == nil {
		u.Payload129 = &payload129
		u.Type = PayloadUnionTypePayload129
		return nil
	}

	var payload42 Payload42 = Payload42{}
	if err := utils.UnmarshalJSON(data, &payload42, "", true, true); err == nil {
		u.Payload42 = &payload42
		u.Type = PayloadUnionTypePayload42
		return nil
	}

	var payload59 Payload59 = Payload59{}
	if err := utils.UnmarshalJSON(data, &payload59, "", true, true); err == nil {
		u.Payload59 = &payload59
		u.Type = PayloadUnionTypePayload59
		return nil
	}

	var payload109 Payload109 = Payload109{}
	if err := utils.UnmarshalJSON(data, &payload109, "", true, true); err == nil {
		u.Payload109 = &payload109
		u.Type = PayloadUnionTypePayload109
		return nil
	}

	var payload66 Payload66 = Payload66{}
	if err := utils.UnmarshalJSON(data, &payload66, "", true, true); err == nil {
		u.Payload66 = &payload66
		u.Type = PayloadUnionTypePayload66
		return nil
	}

	var payload80 Payload80 = Payload80{}
	if err := utils.UnmarshalJSON(data, &payload80, "", true, true); err == nil {
		u.Payload80 = &payload80
		u.Type = PayloadUnionTypePayload80
		return nil
	}

	var payload30 Payload30 = Payload30{}
	if err := utils.UnmarshalJSON(data, &payload30, "", true, true); err == nil {
		u.Payload30 = &payload30
		u.Type = PayloadUnionTypePayload30
		return nil
	}

	var payload62 Payload62 = Payload62{}
	if err := utils.UnmarshalJSON(data, &payload62, "", true, true); err == nil {
		u.Payload62 = &payload62
		u.Type = PayloadUnionTypePayload62
		return nil
	}

	var payload65 Payload65 = Payload65{}
	if err := utils.UnmarshalJSON(data, &payload65, "", true, true); err == nil {
		u.Payload65 = &payload65
		u.Type = PayloadUnionTypePayload65
		return nil
	}

	var payload152 Payload152 = Payload152{}
	if err := utils.UnmarshalJSON(data, &payload152, "", true, true); err == nil {
		u.Payload152 = &payload152
		u.Type = PayloadUnionTypePayload152
		return nil
	}

	var payload125 Payload125 = Payload125{}
	if err := utils.UnmarshalJSON(data, &payload125, "", true, true); err == nil {
		u.Payload125 = &payload125
		u.Type = PayloadUnionTypePayload125
		return nil
	}

	var payload101 Payload101 = Payload101{}
	if err := utils.UnmarshalJSON(data, &payload101, "", true, true); err == nil {
		u.Payload101 = &payload101
		u.Type = PayloadUnionTypePayload101
		return nil
	}

	var payload126 Payload126 = Payload126{}
	if err := utils.UnmarshalJSON(data, &payload126, "", true, true); err == nil {
		u.Payload126 = &payload126
		u.Type = PayloadUnionTypePayload126
		return nil
	}

	var payload127 Payload127 = Payload127{}
	if err := utils.UnmarshalJSON(data, &payload127, "", true, true); err == nil {
		u.Payload127 = &payload127
		u.Type = PayloadUnionTypePayload127
		return nil
	}

	var payload107 Payload107 = Payload107{}
	if err := utils.UnmarshalJSON(data, &payload107, "", true, true); err == nil {
		u.Payload107 = &payload107
		u.Type = PayloadUnionTypePayload107
		return nil
	}

	var payload40 Payload40 = Payload40{}
	if err := utils.UnmarshalJSON(data, &payload40, "", true, true); err == nil {
		u.Payload40 = &payload40
		u.Type = PayloadUnionTypePayload40
		return nil
	}

	var payload74 Payload74 = Payload74{}
	if err := utils.UnmarshalJSON(data, &payload74, "", true, true); err == nil {
		u.Payload74 = &payload74
		u.Type = PayloadUnionTypePayload74
		return nil
	}

	var payload106 Payload106 = Payload106{}
	if err := utils.UnmarshalJSON(data, &payload106, "", true, true); err == nil {
		u.Payload106 = &payload106
		u.Type = PayloadUnionTypePayload106
		return nil
	}

	var payload64 Payload64 = Payload64{}
	if err := utils.UnmarshalJSON(data, &payload64, "", true, true); err == nil {
		u.Payload64 = &payload64
		u.Type = PayloadUnionTypePayload64
		return nil
	}

	var payload67 Payload67 = Payload67{}
	if err := utils.UnmarshalJSON(data, &payload67, "", true, true); err == nil {
		u.Payload67 = &payload67
		u.Type = PayloadUnionTypePayload67
		return nil
	}

	var payload124 Payload124 = Payload124{}
	if err := utils.UnmarshalJSON(data, &payload124, "", true, true); err == nil {
		u.Payload124 = &payload124
		u.Type = PayloadUnionTypePayload124
		return nil
	}

	var payload56 Payload56 = Payload56{}
	if err := utils.UnmarshalJSON(data, &payload56, "", true, true); err == nil {
		u.Payload56 = &payload56
		u.Type = PayloadUnionTypePayload56
		return nil
	}

	var payload7 Payload7 = Payload7{}
	if err := utils.UnmarshalJSON(data, &payload7, "", true, true); err == nil {
		u.Payload7 = &payload7
		u.Type = PayloadUnionTypePayload7
		return nil
	}

	var payload68 Payload68 = Payload68{}
	if err := utils.UnmarshalJSON(data, &payload68, "", true, true); err == nil {
		u.Payload68 = &payload68
		u.Type = PayloadUnionTypePayload68
		return nil
	}

	var payload37 Payload37 = Payload37{}
	if err := utils.UnmarshalJSON(data, &payload37, "", true, true); err == nil {
		u.Payload37 = &payload37
		u.Type = PayloadUnionTypePayload37
		return nil
	}

	var payload57 Payload57 = Payload57{}
	if err := utils.UnmarshalJSON(data, &payload57, "", true, true); err == nil {
		u.Payload57 = &payload57
		u.Type = PayloadUnionTypePayload57
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PayloadUnion", string(data))
}

func (u PayloadUnion) MarshalJSON() ([]byte, error) {
	if u.Payload1 != nil {
		return utils.MarshalJSON(u.Payload1, "", true)
	}

	if u.Payload2 != nil {
		return utils.MarshalJSON(u.Payload2, "", true)
	}

	if u.Payload3 != nil {
		return utils.MarshalJSON(u.Payload3, "", true)
	}

	if u.Payload4 != nil {
		return utils.MarshalJSON(u.Payload4, "", true)
	}

	if u.Payload5 != nil {
		return utils.MarshalJSON(u.Payload5, "", true)
	}

	if u.Payload6 != nil {
		return utils.MarshalJSON(u.Payload6, "", true)
	}

	if u.Payload7 != nil {
		return utils.MarshalJSON(u.Payload7, "", true)
	}

	if u.Payload8 != nil {
		return utils.MarshalJSON(u.Payload8, "", true)
	}

	if u.Payload9 != nil {
		return utils.MarshalJSON(u.Payload9, "", true)
	}

	if u.Payload10 != nil {
		return utils.MarshalJSON(u.Payload10, "", true)
	}

	if u.Payload11 != nil {
		return utils.MarshalJSON(u.Payload11, "", true)
	}

	if u.Payload12 != nil {
		return utils.MarshalJSON(u.Payload12, "", true)
	}

	if u.Payload13 != nil {
		return utils.MarshalJSON(u.Payload13, "", true)
	}

	if u.Payload14 != nil {
		return utils.MarshalJSON(u.Payload14, "", true)
	}

	if u.Payload15 != nil {
		return utils.MarshalJSON(u.Payload15, "", true)
	}

	if u.Payload16 != nil {
		return utils.MarshalJSON(u.Payload16, "", true)
	}

	if u.Payload17 != nil {
		return utils.MarshalJSON(u.Payload17, "", true)
	}

	if u.Payload18 != nil {
		return utils.MarshalJSON(u.Payload18, "", true)
	}

	if u.Payload19 != nil {
		return utils.MarshalJSON(u.Payload19, "", true)
	}

	if u.Payload20 != nil {
		return utils.MarshalJSON(u.Payload20, "", true)
	}

	if u.Payload21 != nil {
		return utils.MarshalJSON(u.Payload21, "", true)
	}

	if u.Payload22 != nil {
		return utils.MarshalJSON(u.Payload22, "", true)
	}

	if u.Payload23 != nil {
		return utils.MarshalJSON(u.Payload23, "", true)
	}

	if u.Payload24 != nil {
		return utils.MarshalJSON(u.Payload24, "", true)
	}

	if u.Payload25 != nil {
		return utils.MarshalJSON(u.Payload25, "", true)
	}

	if u.Payload26 != nil {
		return utils.MarshalJSON(u.Payload26, "", true)
	}

	if u.Payload27 != nil {
		return utils.MarshalJSON(u.Payload27, "", true)
	}

	if u.Payload28 != nil {
		return utils.MarshalJSON(u.Payload28, "", true)
	}

	if u.Payload29 != nil {
		return utils.MarshalJSON(u.Payload29, "", true)
	}

	if u.Payload30 != nil {
		return utils.MarshalJSON(u.Payload30, "", true)
	}

	if u.Payload31 != nil {
		return utils.MarshalJSON(u.Payload31, "", true)
	}

	if u.Payload32 != nil {
		return utils.MarshalJSON(u.Payload32, "", true)
	}

	if u.Payload33 != nil {
		return utils.MarshalJSON(u.Payload33, "", true)
	}

	if u.Payload34 != nil {
		return utils.MarshalJSON(u.Payload34, "", true)
	}

	if u.Payload35 != nil {
		return utils.MarshalJSON(u.Payload35, "", true)
	}

	if u.Payload36 != nil {
		return utils.MarshalJSON(u.Payload36, "", true)
	}

	if u.Payload37 != nil {
		return utils.MarshalJSON(u.Payload37, "", true)
	}

	if u.Payload38 != nil {
		return utils.MarshalJSON(u.Payload38, "", true)
	}

	if u.Payload39 != nil {
		return utils.MarshalJSON(u.Payload39, "", true)
	}

	if u.Payload40 != nil {
		return utils.MarshalJSON(u.Payload40, "", true)
	}

	if u.Payload41 != nil {
		return utils.MarshalJSON(u.Payload41, "", true)
	}

	if u.Payload42 != nil {
		return utils.MarshalJSON(u.Payload42, "", true)
	}

	if u.Payload43 != nil {
		return utils.MarshalJSON(u.Payload43, "", true)
	}

	if u.Payload44 != nil {
		return utils.MarshalJSON(u.Payload44, "", true)
	}

	if u.Payload45 != nil {
		return utils.MarshalJSON(u.Payload45, "", true)
	}

	if u.Payload46 != nil {
		return utils.MarshalJSON(u.Payload46, "", true)
	}

	if u.Payload47 != nil {
		return utils.MarshalJSON(u.Payload47, "", true)
	}

	if u.Payload48 != nil {
		return utils.MarshalJSON(u.Payload48, "", true)
	}

	if u.Payload49 != nil {
		return utils.MarshalJSON(u.Payload49, "", true)
	}

	if u.Payload50 != nil {
		return utils.MarshalJSON(u.Payload50, "", true)
	}

	if u.Payload51 != nil {
		return utils.MarshalJSON(u.Payload51, "", true)
	}

	if u.Payload52 != nil {
		return utils.MarshalJSON(u.Payload52, "", true)
	}

	if u.Payload53 != nil {
		return utils.MarshalJSON(u.Payload53, "", true)
	}

	if u.Payload54 != nil {
		return utils.MarshalJSON(u.Payload54, "", true)
	}

	if u.Payload55 != nil {
		return utils.MarshalJSON(u.Payload55, "", true)
	}

	if u.Payload56 != nil {
		return utils.MarshalJSON(u.Payload56, "", true)
	}

	if u.Payload57 != nil {
		return utils.MarshalJSON(u.Payload57, "", true)
	}

	if u.Payload58 != nil {
		return utils.MarshalJSON(u.Payload58, "", true)
	}

	if u.Payload59 != nil {
		return utils.MarshalJSON(u.Payload59, "", true)
	}

	if u.Payload60 != nil {
		return utils.MarshalJSON(u.Payload60, "", true)
	}

	if u.Payload61 != nil {
		return utils.MarshalJSON(u.Payload61, "", true)
	}

	if u.Payload62 != nil {
		return utils.MarshalJSON(u.Payload62, "", true)
	}

	if u.Payload63 != nil {
		return utils.MarshalJSON(u.Payload63, "", true)
	}

	if u.Payload64 != nil {
		return utils.MarshalJSON(u.Payload64, "", true)
	}

	if u.Payload65 != nil {
		return utils.MarshalJSON(u.Payload65, "", true)
	}

	if u.Payload66 != nil {
		return utils.MarshalJSON(u.Payload66, "", true)
	}

	if u.Payload67 != nil {
		return utils.MarshalJSON(u.Payload67, "", true)
	}

	if u.Payload68 != nil {
		return utils.MarshalJSON(u.Payload68, "", true)
	}

	if u.Payload69 != nil {
		return utils.MarshalJSON(u.Payload69, "", true)
	}

	if u.Payload70 != nil {
		return utils.MarshalJSON(u.Payload70, "", true)
	}

	if u.Payload71 != nil {
		return utils.MarshalJSON(u.Payload71, "", true)
	}

	if u.Payload72 != nil {
		return utils.MarshalJSON(u.Payload72, "", true)
	}

	if u.Payload73 != nil {
		return utils.MarshalJSON(u.Payload73, "", true)
	}

	if u.Payload74 != nil {
		return utils.MarshalJSON(u.Payload74, "", true)
	}

	if u.Payload75 != nil {
		return utils.MarshalJSON(u.Payload75, "", true)
	}

	if u.Payload76 != nil {
		return utils.MarshalJSON(u.Payload76, "", true)
	}

	if u.Payload77 != nil {
		return utils.MarshalJSON(u.Payload77, "", true)
	}

	if u.Payload78 != nil {
		return utils.MarshalJSON(u.Payload78, "", true)
	}

	if u.Payload79 != nil {
		return utils.MarshalJSON(u.Payload79, "", true)
	}

	if u.Payload80 != nil {
		return utils.MarshalJSON(u.Payload80, "", true)
	}

	if u.Payload81 != nil {
		return utils.MarshalJSON(u.Payload81, "", true)
	}

	if u.Payload82 != nil {
		return utils.MarshalJSON(u.Payload82, "", true)
	}

	if u.Payload83 != nil {
		return utils.MarshalJSON(u.Payload83, "", true)
	}

	if u.Payload84 != nil {
		return utils.MarshalJSON(u.Payload84, "", true)
	}

	if u.Payload85 != nil {
		return utils.MarshalJSON(u.Payload85, "", true)
	}

	if u.Payload86 != nil {
		return utils.MarshalJSON(u.Payload86, "", true)
	}

	if u.Payload87 != nil {
		return utils.MarshalJSON(u.Payload87, "", true)
	}

	if u.Payload88 != nil {
		return utils.MarshalJSON(u.Payload88, "", true)
	}

	if u.Payload89 != nil {
		return utils.MarshalJSON(u.Payload89, "", true)
	}

	if u.Payload90 != nil {
		return utils.MarshalJSON(u.Payload90, "", true)
	}

	if u.Payload91 != nil {
		return utils.MarshalJSON(u.Payload91, "", true)
	}

	if u.Payload92 != nil {
		return utils.MarshalJSON(u.Payload92, "", true)
	}

	if u.Payload93 != nil {
		return utils.MarshalJSON(u.Payload93, "", true)
	}

	if u.Payload94 != nil {
		return utils.MarshalJSON(u.Payload94, "", true)
	}

	if u.Payload95 != nil {
		return utils.MarshalJSON(u.Payload95, "", true)
	}

	if u.Payload96 != nil {
		return utils.MarshalJSON(u.Payload96, "", true)
	}

	if u.Payload97 != nil {
		return utils.MarshalJSON(u.Payload97, "", true)
	}

	if u.Payload98 != nil {
		return utils.MarshalJSON(u.Payload98, "", true)
	}

	if u.Payload99 != nil {
		return utils.MarshalJSON(u.Payload99, "", true)
	}

	if u.Payload100 != nil {
		return utils.MarshalJSON(u.Payload100, "", true)
	}

	if u.Payload101 != nil {
		return utils.MarshalJSON(u.Payload101, "", true)
	}

	if u.Payload102 != nil {
		return utils.MarshalJSON(u.Payload102, "", true)
	}

	if u.Payload103 != nil {
		return utils.MarshalJSON(u.Payload103, "", true)
	}

	if u.Payload104 != nil {
		return utils.MarshalJSON(u.Payload104, "", true)
	}

	if u.Payload105 != nil {
		return utils.MarshalJSON(u.Payload105, "", true)
	}

	if u.Payload106 != nil {
		return utils.MarshalJSON(u.Payload106, "", true)
	}

	if u.Payload107 != nil {
		return utils.MarshalJSON(u.Payload107, "", true)
	}

	if u.Payload108 != nil {
		return utils.MarshalJSON(u.Payload108, "", true)
	}

	if u.Payload109 != nil {
		return utils.MarshalJSON(u.Payload109, "", true)
	}

	if u.Payload110 != nil {
		return utils.MarshalJSON(u.Payload110, "", true)
	}

	if u.Payload111 != nil {
		return utils.MarshalJSON(u.Payload111, "", true)
	}

	if u.Payload112 != nil {
		return utils.MarshalJSON(u.Payload112, "", true)
	}

	if u.Payload113 != nil {
		return utils.MarshalJSON(u.Payload113, "", true)
	}

	if u.Payload114 != nil {
		return utils.MarshalJSON(u.Payload114, "", true)
	}

	if u.Payload115 != nil {
		return utils.MarshalJSON(u.Payload115, "", true)
	}

	if u.Payload116 != nil {
		return utils.MarshalJSON(u.Payload116, "", true)
	}

	if u.Payload117 != nil {
		return utils.MarshalJSON(u.Payload117, "", true)
	}

	if u.Payload118 != nil {
		return utils.MarshalJSON(u.Payload118, "", true)
	}

	if u.Payload119 != nil {
		return utils.MarshalJSON(u.Payload119, "", true)
	}

	if u.Payload120 != nil {
		return utils.MarshalJSON(u.Payload120, "", true)
	}

	if u.Payload121 != nil {
		return utils.MarshalJSON(u.Payload121, "", true)
	}

	if u.Payload122 != nil {
		return utils.MarshalJSON(u.Payload122, "", true)
	}

	if u.Payload123 != nil {
		return utils.MarshalJSON(u.Payload123, "", true)
	}

	if u.Payload124 != nil {
		return utils.MarshalJSON(u.Payload124, "", true)
	}

	if u.Payload125 != nil {
		return utils.MarshalJSON(u.Payload125, "", true)
	}

	if u.Payload126 != nil {
		return utils.MarshalJSON(u.Payload126, "", true)
	}

	if u.Payload127 != nil {
		return utils.MarshalJSON(u.Payload127, "", true)
	}

	if u.Payload128 != nil {
		return utils.MarshalJSON(u.Payload128, "", true)
	}

	if u.Payload129 != nil {
		return utils.MarshalJSON(u.Payload129, "", true)
	}

	if u.Payload130 != nil {
		return utils.MarshalJSON(u.Payload130, "", true)
	}

	if u.Payload131 != nil {
		return utils.MarshalJSON(u.Payload131, "", true)
	}

	if u.Payload132 != nil {
		return utils.MarshalJSON(u.Payload132, "", true)
	}

	if u.Payload133 != nil {
		return utils.MarshalJSON(u.Payload133, "", true)
	}

	if u.Payload134 != nil {
		return utils.MarshalJSON(u.Payload134, "", true)
	}

	if u.Payload135 != nil {
		return utils.MarshalJSON(u.Payload135, "", true)
	}

	if u.Payload136 != nil {
		return utils.MarshalJSON(u.Payload136, "", true)
	}

	if u.Payload137 != nil {
		return utils.MarshalJSON(u.Payload137, "", true)
	}

	if u.Payload138 != nil {
		return utils.MarshalJSON(u.Payload138, "", true)
	}

	if u.Payload139 != nil {
		return utils.MarshalJSON(u.Payload139, "", true)
	}

	if u.Payload140 != nil {
		return utils.MarshalJSON(u.Payload140, "", true)
	}

	if u.Payload141 != nil {
		return utils.MarshalJSON(u.Payload141, "", true)
	}

	if u.Payload142 != nil {
		return utils.MarshalJSON(u.Payload142, "", true)
	}

	if u.Payload143 != nil {
		return utils.MarshalJSON(u.Payload143, "", true)
	}

	if u.Payload144 != nil {
		return utils.MarshalJSON(u.Payload144, "", true)
	}

	if u.Payload145 != nil {
		return utils.MarshalJSON(u.Payload145, "", true)
	}

	if u.Payload146 != nil {
		return utils.MarshalJSON(u.Payload146, "", true)
	}

	if u.Payload147 != nil {
		return utils.MarshalJSON(u.Payload147, "", true)
	}

	if u.Payload148 != nil {
		return utils.MarshalJSON(u.Payload148, "", true)
	}

	if u.Payload149 != nil {
		return utils.MarshalJSON(u.Payload149, "", true)
	}

	if u.Payload150 != nil {
		return utils.MarshalJSON(u.Payload150, "", true)
	}

	if u.Payload151 != nil {
		return utils.MarshalJSON(u.Payload151, "", true)
	}

	if u.Payload152 != nil {
		return utils.MarshalJSON(u.Payload152, "", true)
	}

	return nil, errors.New("could not marshal union type PayloadUnion: all fields are null")
}

// UserEvent - Array of events generated by the User.
type UserEvent struct {
	// The unique identifier of the Event.
	ID string `json:"id"`
	// The human-readable text of the Event.
	Text string `json:"text"`
	// A list of "entities" within the event `text`. Useful for enhancing the displayed text with additional styling and links.
	Entities []Entity `json:"entities"`
	// Timestamp (in milliseconds) of when the event was generated.
	CreatedAt float64 `json:"createdAt"`
	// Metadata for {@link userId}.
	User      *User      `json:"user,omitempty"`
	Principal *Principal `json:"principal,omitempty"`
	// Metadata for {@link viaIds}.
	Via []Via `json:"via,omitempty"`
	// When the principal who generated the event is a user, this is their ID; otherwise, it is empty.
	UserID string `json:"userId"`
	// The ID of the principal who generated the event. The principal is typically a user, but it could also be an app, an integration, etc. The principal may have delegated its authority to an acting party, and so {@link viaIds} should be checked as well.
	PrincipalID string `json:"principalId"`
	// If the principal delegated its authority (for example, a user delegating to an app), then this array contains the ID of the current actor. For example, if `principalId` is "user123" and `viaIds` is `["app456"]`, we can say the event was triggered by - "app456 on behalf of user123", or - "user123 via app4556". Both are equivalent. Arbitrarily long chains of delegation can be represented. For example, if `principalId` is "user123" and `viaIds` is `["service1", "service2"]`, we can say the event was triggered by "user123 via service1 via service2".
	ViaIds  []string      `json:"viaIds,omitempty"`
	Payload *PayloadUnion `json:"payload,omitempty"`
}

func (o *UserEvent) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UserEvent) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

func (o *UserEvent) GetEntities() []Entity {
	if o == nil {
		return []Entity{}
	}
	return o.Entities
}

func (o *UserEvent) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UserEvent) GetUser() *User {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UserEvent) GetPrincipal() *Principal {
	if o == nil {
		return nil
	}
	return o.Principal
}

func (o *UserEvent) GetVia() []Via {
	if o == nil {
		return nil
	}
	return o.Via
}

func (o *UserEvent) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UserEvent) GetPrincipalID() string {
	if o == nil {
		return ""
	}
	return o.PrincipalID
}

func (o *UserEvent) GetViaIds() []string {
	if o == nil {
		return nil
	}
	return o.ViaIds
}

func (o *UserEvent) GetPayload() *PayloadUnion {
	if o == nil {
		return nil
	}
	return o.Payload
}
