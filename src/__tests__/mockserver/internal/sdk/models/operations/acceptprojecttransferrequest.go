// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type PaidFeatures struct {
	ConcurrentBuilds        *int64 `json:"concurrentBuilds,omitempty"`
	PasswordProtection      *bool  `json:"passwordProtection,omitempty"`
	PreviewDeploymentSuffix *bool  `json:"previewDeploymentSuffix,omitempty"`
}

func (o *PaidFeatures) GetConcurrentBuilds() *int64 {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *PaidFeatures) GetPasswordProtection() *bool {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *PaidFeatures) GetPreviewDeploymentSuffix() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

type AcceptProjectTransferRequestRequestBody struct {
	// The desired name for the project
	NewProjectName *string       `json:"newProjectName,omitempty"`
	PaidFeatures   *PaidFeatures `json:"paidFeatures,omitempty"`
}

func (o *AcceptProjectTransferRequestRequestBody) GetNewProjectName() *string {
	if o == nil {
		return nil
	}
	return o.NewProjectName
}

func (o *AcceptProjectTransferRequestRequestBody) GetPaidFeatures() *PaidFeatures {
	if o == nil {
		return nil
	}
	return o.PaidFeatures
}

type AcceptProjectTransferRequestRequest struct {
	// The code of the project transfer request.
	Code string `pathParam:"style=simple,explode=false,name=code"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *AcceptProjectTransferRequestRequestBody `request:"mediaType=application/json"`
}

func (o *AcceptProjectTransferRequestRequest) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *AcceptProjectTransferRequestRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *AcceptProjectTransferRequestRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AcceptProjectTransferRequestRequest) GetRequestBody() *AcceptProjectTransferRequestRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// AcceptProjectTransferRequestResponseBody - The project has been transferred successfully.
type AcceptProjectTransferRequestResponseBody struct {
}

type AcceptProjectTransferRequestResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The project has been transferred successfully.
	Object *AcceptProjectTransferRequestResponseBody
}

func (o *AcceptProjectTransferRequestResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AcceptProjectTransferRequestResponse) GetObject() *AcceptProjectTransferRequestResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
