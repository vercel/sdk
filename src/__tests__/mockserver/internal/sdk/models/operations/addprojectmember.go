// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// AddProjectMemberRole3 - The project role of the member that will be added.
type AddProjectMemberRole3 string

const (
	AddProjectMemberRole3Admin            AddProjectMemberRole3 = "ADMIN"
	AddProjectMemberRole3ProjectDeveloper AddProjectMemberRole3 = "PROJECT_DEVELOPER"
	AddProjectMemberRole3ProjectViewer    AddProjectMemberRole3 = "PROJECT_VIEWER"
)

func (e AddProjectMemberRole3) ToPointer() *AddProjectMemberRole3 {
	return &e
}
func (e *AddProjectMemberRole3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = AddProjectMemberRole3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddProjectMemberRole3: %v", v)
	}
}

type AddProjectMemberRequestBody3 struct {
	// The ID of the team member that should be added to this project.
	UID *string `json:"uid,omitempty"`
	// The username of the team member that should be added to this project.
	Username *string `json:"username,omitempty"`
	// The email of the team member that should be added to this project.
	Email string `json:"email"`
	// The project role of the member that will be added.
	Role AddProjectMemberRole3 `json:"role"`
}

func (o *AddProjectMemberRequestBody3) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *AddProjectMemberRequestBody3) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *AddProjectMemberRequestBody3) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *AddProjectMemberRequestBody3) GetRole() AddProjectMemberRole3 {
	if o == nil {
		return AddProjectMemberRole3("")
	}
	return o.Role
}

// AddProjectMemberRole2 - The project role of the member that will be added.
type AddProjectMemberRole2 string

const (
	AddProjectMemberRole2Admin            AddProjectMemberRole2 = "ADMIN"
	AddProjectMemberRole2ProjectDeveloper AddProjectMemberRole2 = "PROJECT_DEVELOPER"
	AddProjectMemberRole2ProjectViewer    AddProjectMemberRole2 = "PROJECT_VIEWER"
)

func (e AddProjectMemberRole2) ToPointer() *AddProjectMemberRole2 {
	return &e
}
func (e *AddProjectMemberRole2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = AddProjectMemberRole2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddProjectMemberRole2: %v", v)
	}
}

type AddProjectMemberRequestBody2 struct {
	// The ID of the team member that should be added to this project.
	UID *string `json:"uid,omitempty"`
	// The username of the team member that should be added to this project.
	Username string `json:"username"`
	// The email of the team member that should be added to this project.
	Email *string `json:"email,omitempty"`
	// The project role of the member that will be added.
	Role AddProjectMemberRole2 `json:"role"`
}

func (o *AddProjectMemberRequestBody2) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *AddProjectMemberRequestBody2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *AddProjectMemberRequestBody2) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *AddProjectMemberRequestBody2) GetRole() AddProjectMemberRole2 {
	if o == nil {
		return AddProjectMemberRole2("")
	}
	return o.Role
}

// AddProjectMemberRole1 - The project role of the member that will be added.
type AddProjectMemberRole1 string

const (
	AddProjectMemberRole1Admin            AddProjectMemberRole1 = "ADMIN"
	AddProjectMemberRole1ProjectDeveloper AddProjectMemberRole1 = "PROJECT_DEVELOPER"
	AddProjectMemberRole1ProjectViewer    AddProjectMemberRole1 = "PROJECT_VIEWER"
)

func (e AddProjectMemberRole1) ToPointer() *AddProjectMemberRole1 {
	return &e
}
func (e *AddProjectMemberRole1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = AddProjectMemberRole1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AddProjectMemberRole1: %v", v)
	}
}

type AddProjectMemberRequestBody1 struct {
	// The ID of the team member that should be added to this project.
	UID string `json:"uid"`
	// The username of the team member that should be added to this project.
	Username *string `json:"username,omitempty"`
	// The email of the team member that should be added to this project.
	Email *string `json:"email,omitempty"`
	// The project role of the member that will be added.
	Role AddProjectMemberRole1 `json:"role"`
}

func (o *AddProjectMemberRequestBody1) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *AddProjectMemberRequestBody1) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *AddProjectMemberRequestBody1) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *AddProjectMemberRequestBody1) GetRole() AddProjectMemberRole1 {
	if o == nil {
		return AddProjectMemberRole1("")
	}
	return o.Role
}

type AddProjectMemberRequestBodyType string

const (
	AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody1 AddProjectMemberRequestBodyType = "addProjectMember_RequestBody_1"
	AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody2 AddProjectMemberRequestBodyType = "addProjectMember_RequestBody_2"
	AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody3 AddProjectMemberRequestBodyType = "addProjectMember_RequestBody_3"
)

type AddProjectMemberRequestBody struct {
	AddProjectMemberRequestBody1 *AddProjectMemberRequestBody1 `queryParam:"inline"`
	AddProjectMemberRequestBody2 *AddProjectMemberRequestBody2 `queryParam:"inline"`
	AddProjectMemberRequestBody3 *AddProjectMemberRequestBody3 `queryParam:"inline"`

	Type AddProjectMemberRequestBodyType
}

func CreateAddProjectMemberRequestBodyAddProjectMemberRequestBody1(addProjectMemberRequestBody1 AddProjectMemberRequestBody1) AddProjectMemberRequestBody {
	typ := AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody1

	return AddProjectMemberRequestBody{
		AddProjectMemberRequestBody1: &addProjectMemberRequestBody1,
		Type:                         typ,
	}
}

func CreateAddProjectMemberRequestBodyAddProjectMemberRequestBody2(addProjectMemberRequestBody2 AddProjectMemberRequestBody2) AddProjectMemberRequestBody {
	typ := AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody2

	return AddProjectMemberRequestBody{
		AddProjectMemberRequestBody2: &addProjectMemberRequestBody2,
		Type:                         typ,
	}
}

func CreateAddProjectMemberRequestBodyAddProjectMemberRequestBody3(addProjectMemberRequestBody3 AddProjectMemberRequestBody3) AddProjectMemberRequestBody {
	typ := AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody3

	return AddProjectMemberRequestBody{
		AddProjectMemberRequestBody3: &addProjectMemberRequestBody3,
		Type:                         typ,
	}
}

func (u *AddProjectMemberRequestBody) UnmarshalJSON(data []byte) error {

	var addProjectMemberRequestBody1 AddProjectMemberRequestBody1 = AddProjectMemberRequestBody1{}
	if err := utils.UnmarshalJSON(data, &addProjectMemberRequestBody1, "", true, true); err == nil {
		u.AddProjectMemberRequestBody1 = &addProjectMemberRequestBody1
		u.Type = AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody1
		return nil
	}

	var addProjectMemberRequestBody2 AddProjectMemberRequestBody2 = AddProjectMemberRequestBody2{}
	if err := utils.UnmarshalJSON(data, &addProjectMemberRequestBody2, "", true, true); err == nil {
		u.AddProjectMemberRequestBody2 = &addProjectMemberRequestBody2
		u.Type = AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody2
		return nil
	}

	var addProjectMemberRequestBody3 AddProjectMemberRequestBody3 = AddProjectMemberRequestBody3{}
	if err := utils.UnmarshalJSON(data, &addProjectMemberRequestBody3, "", true, true); err == nil {
		u.AddProjectMemberRequestBody3 = &addProjectMemberRequestBody3
		u.Type = AddProjectMemberRequestBodyTypeAddProjectMemberRequestBody3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for AddProjectMemberRequestBody", string(data))
}

func (u AddProjectMemberRequestBody) MarshalJSON() ([]byte, error) {
	if u.AddProjectMemberRequestBody1 != nil {
		return utils.MarshalJSON(u.AddProjectMemberRequestBody1, "", true)
	}

	if u.AddProjectMemberRequestBody2 != nil {
		return utils.MarshalJSON(u.AddProjectMemberRequestBody2, "", true)
	}

	if u.AddProjectMemberRequestBody3 != nil {
		return utils.MarshalJSON(u.AddProjectMemberRequestBody3, "", true)
	}

	return nil, errors.New("could not marshal union type AddProjectMemberRequestBody: all fields are null")
}

type AddProjectMemberRequest struct {
	// The ID or name of the Project.
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody AddProjectMemberRequestBody `request:"mediaType=application/json"`
}

func (o *AddProjectMemberRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *AddProjectMemberRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *AddProjectMemberRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AddProjectMemberRequest) GetRequestBody() AddProjectMemberRequestBody {
	if o == nil {
		return AddProjectMemberRequestBody{}
	}
	return o.RequestBody
}

// AddProjectMemberResponseBody - Responds with the project ID on success.
type AddProjectMemberResponseBody struct {
	ID string `json:"id"`
}

func (o *AddProjectMemberResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type AddProjectMemberResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Responds with the project ID on success.
	Object *AddProjectMemberResponseBody
}

func (o *AddProjectMemberResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AddProjectMemberResponse) GetObject() *AddProjectMemberResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
