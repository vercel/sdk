// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type ApproveRollingReleaseStageRequestBody struct {
	// The index of the stage to transition to
	NextStageIndex float64 `json:"nextStageIndex"`
	// The id of the canary deployment to approve for the next stage
	CanaryDeploymentID string `json:"canaryDeploymentId"`
}

func (o *ApproveRollingReleaseStageRequestBody) GetNextStageIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.NextStageIndex
}

func (o *ApproveRollingReleaseStageRequestBody) GetCanaryDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.CanaryDeploymentID
}

type ApproveRollingReleaseStageRequest struct {
	// Project ID or project name (URL-encoded)
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                                `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *ApproveRollingReleaseStageRequestBody `request:"mediaType=application/json"`
}

func (o *ApproveRollingReleaseStageRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *ApproveRollingReleaseStageRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ApproveRollingReleaseStageRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *ApproveRollingReleaseStageRequest) GetRequestBody() *ApproveRollingReleaseStageRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// ApproveRollingReleaseStageState - The current state of the rolling release
type ApproveRollingReleaseStageState string

const (
	ApproveRollingReleaseStageStateActive   ApproveRollingReleaseStageState = "ACTIVE"
	ApproveRollingReleaseStageStateComplete ApproveRollingReleaseStageState = "COMPLETE"
	ApproveRollingReleaseStageStateAborted  ApproveRollingReleaseStageState = "ABORTED"
)

func (e ApproveRollingReleaseStageState) ToPointer() *ApproveRollingReleaseStageState {
	return &e
}
func (e *ApproveRollingReleaseStageState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "ABORTED":
		*e = ApproveRollingReleaseStageState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageState: %v", v)
	}
}

type ApproveRollingReleaseStageCurrentDeploymentTarget string

const (
	ApproveRollingReleaseStageCurrentDeploymentTargetStaging    ApproveRollingReleaseStageCurrentDeploymentTarget = "staging"
	ApproveRollingReleaseStageCurrentDeploymentTargetProduction ApproveRollingReleaseStageCurrentDeploymentTarget = "production"
)

func (e ApproveRollingReleaseStageCurrentDeploymentTarget) ToPointer() *ApproveRollingReleaseStageCurrentDeploymentTarget {
	return &e
}
func (e *ApproveRollingReleaseStageCurrentDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = ApproveRollingReleaseStageCurrentDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageCurrentDeploymentTarget: %v", v)
	}
}

type ApproveRollingReleaseStageCurrentDeploymentSource string

const (
	ApproveRollingReleaseStageCurrentDeploymentSourceAPITriggerGitDeploy ApproveRollingReleaseStageCurrentDeploymentSource = "api-trigger-git-deploy"
	ApproveRollingReleaseStageCurrentDeploymentSourceCli                 ApproveRollingReleaseStageCurrentDeploymentSource = "cli"
	ApproveRollingReleaseStageCurrentDeploymentSourceCloneRepo           ApproveRollingReleaseStageCurrentDeploymentSource = "clone/repo"
	ApproveRollingReleaseStageCurrentDeploymentSourceGit                 ApproveRollingReleaseStageCurrentDeploymentSource = "git"
	ApproveRollingReleaseStageCurrentDeploymentSourceImport              ApproveRollingReleaseStageCurrentDeploymentSource = "import"
	ApproveRollingReleaseStageCurrentDeploymentSourceImportRepo          ApproveRollingReleaseStageCurrentDeploymentSource = "import/repo"
	ApproveRollingReleaseStageCurrentDeploymentSourceRedeploy            ApproveRollingReleaseStageCurrentDeploymentSource = "redeploy"
	ApproveRollingReleaseStageCurrentDeploymentSourceV0Web               ApproveRollingReleaseStageCurrentDeploymentSource = "v0-web"
)

func (e ApproveRollingReleaseStageCurrentDeploymentSource) ToPointer() *ApproveRollingReleaseStageCurrentDeploymentSource {
	return &e
}
func (e *ApproveRollingReleaseStageCurrentDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = ApproveRollingReleaseStageCurrentDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageCurrentDeploymentSource: %v", v)
	}
}

type ApproveRollingReleaseStageCurrentDeploymentReadyState string

const (
	ApproveRollingReleaseStageCurrentDeploymentReadyStateBuilding     ApproveRollingReleaseStageCurrentDeploymentReadyState = "BUILDING"
	ApproveRollingReleaseStageCurrentDeploymentReadyStateError        ApproveRollingReleaseStageCurrentDeploymentReadyState = "ERROR"
	ApproveRollingReleaseStageCurrentDeploymentReadyStateInitializing ApproveRollingReleaseStageCurrentDeploymentReadyState = "INITIALIZING"
	ApproveRollingReleaseStageCurrentDeploymentReadyStateQueued       ApproveRollingReleaseStageCurrentDeploymentReadyState = "QUEUED"
	ApproveRollingReleaseStageCurrentDeploymentReadyStateReady        ApproveRollingReleaseStageCurrentDeploymentReadyState = "READY"
	ApproveRollingReleaseStageCurrentDeploymentReadyStateCanceled     ApproveRollingReleaseStageCurrentDeploymentReadyState = "CANCELED"
)

func (e ApproveRollingReleaseStageCurrentDeploymentReadyState) ToPointer() *ApproveRollingReleaseStageCurrentDeploymentReadyState {
	return &e
}
func (e *ApproveRollingReleaseStageCurrentDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = ApproveRollingReleaseStageCurrentDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageCurrentDeploymentReadyState: %v", v)
	}
}

// ApproveRollingReleaseStageCurrentDeployment - The current deployment receiving production traffic
type ApproveRollingReleaseStageCurrentDeployment struct {
	ID           string                                                `json:"id"`
	Name         string                                                `json:"name"`
	URL          string                                                `json:"url"`
	Target       *ApproveRollingReleaseStageCurrentDeploymentTarget    `json:"target,omitempty"`
	Source       *ApproveRollingReleaseStageCurrentDeploymentSource    `json:"source,omitempty"`
	CreatedAt    float64                                               `json:"createdAt"`
	ReadyState   ApproveRollingReleaseStageCurrentDeploymentReadyState `json:"readyState"`
	ReadyStateAt *float64                                              `json:"readyStateAt,omitempty"`
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetTarget() *ApproveRollingReleaseStageCurrentDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetSource() *ApproveRollingReleaseStageCurrentDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetReadyState() ApproveRollingReleaseStageCurrentDeploymentReadyState {
	if o == nil {
		return ApproveRollingReleaseStageCurrentDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *ApproveRollingReleaseStageCurrentDeployment) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

type ApproveRollingReleaseStageCanaryDeploymentTarget string

const (
	ApproveRollingReleaseStageCanaryDeploymentTargetStaging    ApproveRollingReleaseStageCanaryDeploymentTarget = "staging"
	ApproveRollingReleaseStageCanaryDeploymentTargetProduction ApproveRollingReleaseStageCanaryDeploymentTarget = "production"
)

func (e ApproveRollingReleaseStageCanaryDeploymentTarget) ToPointer() *ApproveRollingReleaseStageCanaryDeploymentTarget {
	return &e
}
func (e *ApproveRollingReleaseStageCanaryDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = ApproveRollingReleaseStageCanaryDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageCanaryDeploymentTarget: %v", v)
	}
}

type ApproveRollingReleaseStageCanaryDeploymentSource string

const (
	ApproveRollingReleaseStageCanaryDeploymentSourceAPITriggerGitDeploy ApproveRollingReleaseStageCanaryDeploymentSource = "api-trigger-git-deploy"
	ApproveRollingReleaseStageCanaryDeploymentSourceCli                 ApproveRollingReleaseStageCanaryDeploymentSource = "cli"
	ApproveRollingReleaseStageCanaryDeploymentSourceCloneRepo           ApproveRollingReleaseStageCanaryDeploymentSource = "clone/repo"
	ApproveRollingReleaseStageCanaryDeploymentSourceGit                 ApproveRollingReleaseStageCanaryDeploymentSource = "git"
	ApproveRollingReleaseStageCanaryDeploymentSourceImport              ApproveRollingReleaseStageCanaryDeploymentSource = "import"
	ApproveRollingReleaseStageCanaryDeploymentSourceImportRepo          ApproveRollingReleaseStageCanaryDeploymentSource = "import/repo"
	ApproveRollingReleaseStageCanaryDeploymentSourceRedeploy            ApproveRollingReleaseStageCanaryDeploymentSource = "redeploy"
	ApproveRollingReleaseStageCanaryDeploymentSourceV0Web               ApproveRollingReleaseStageCanaryDeploymentSource = "v0-web"
)

func (e ApproveRollingReleaseStageCanaryDeploymentSource) ToPointer() *ApproveRollingReleaseStageCanaryDeploymentSource {
	return &e
}
func (e *ApproveRollingReleaseStageCanaryDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = ApproveRollingReleaseStageCanaryDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageCanaryDeploymentSource: %v", v)
	}
}

type ApproveRollingReleaseStageCanaryDeploymentReadyState string

const (
	ApproveRollingReleaseStageCanaryDeploymentReadyStateBuilding     ApproveRollingReleaseStageCanaryDeploymentReadyState = "BUILDING"
	ApproveRollingReleaseStageCanaryDeploymentReadyStateError        ApproveRollingReleaseStageCanaryDeploymentReadyState = "ERROR"
	ApproveRollingReleaseStageCanaryDeploymentReadyStateInitializing ApproveRollingReleaseStageCanaryDeploymentReadyState = "INITIALIZING"
	ApproveRollingReleaseStageCanaryDeploymentReadyStateQueued       ApproveRollingReleaseStageCanaryDeploymentReadyState = "QUEUED"
	ApproveRollingReleaseStageCanaryDeploymentReadyStateReady        ApproveRollingReleaseStageCanaryDeploymentReadyState = "READY"
	ApproveRollingReleaseStageCanaryDeploymentReadyStateCanceled     ApproveRollingReleaseStageCanaryDeploymentReadyState = "CANCELED"
)

func (e ApproveRollingReleaseStageCanaryDeploymentReadyState) ToPointer() *ApproveRollingReleaseStageCanaryDeploymentReadyState {
	return &e
}
func (e *ApproveRollingReleaseStageCanaryDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = ApproveRollingReleaseStageCanaryDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ApproveRollingReleaseStageCanaryDeploymentReadyState: %v", v)
	}
}

// ApproveRollingReleaseStageCanaryDeployment - The canary deployment being rolled out
type ApproveRollingReleaseStageCanaryDeployment struct {
	ID           string                                               `json:"id"`
	Name         string                                               `json:"name"`
	URL          string                                               `json:"url"`
	Target       *ApproveRollingReleaseStageCanaryDeploymentTarget    `json:"target,omitempty"`
	Source       *ApproveRollingReleaseStageCanaryDeploymentSource    `json:"source,omitempty"`
	CreatedAt    float64                                              `json:"createdAt"`
	ReadyState   ApproveRollingReleaseStageCanaryDeploymentReadyState `json:"readyState"`
	ReadyStateAt *float64                                             `json:"readyStateAt,omitempty"`
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetTarget() *ApproveRollingReleaseStageCanaryDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetSource() *ApproveRollingReleaseStageCanaryDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetReadyState() ApproveRollingReleaseStageCanaryDeploymentReadyState {
	if o == nil {
		return ApproveRollingReleaseStageCanaryDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *ApproveRollingReleaseStageCanaryDeployment) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// ApproveRollingReleaseStageStage - All stages configured for this rolling release
type ApproveRollingReleaseStageStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *ApproveRollingReleaseStageStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *ApproveRollingReleaseStageStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *ApproveRollingReleaseStageStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *ApproveRollingReleaseStageStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *ApproveRollingReleaseStageStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// ApproveRollingReleaseStageActiveStage - The currently active stage, null if the rollout is aborted
type ApproveRollingReleaseStageActiveStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *ApproveRollingReleaseStageActiveStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *ApproveRollingReleaseStageActiveStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *ApproveRollingReleaseStageActiveStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *ApproveRollingReleaseStageActiveStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *ApproveRollingReleaseStageActiveStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// ApproveRollingReleaseStageNextStage - The next stage to be activated, null if not in ACTIVE state
type ApproveRollingReleaseStageNextStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *ApproveRollingReleaseStageNextStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *ApproveRollingReleaseStageNextStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *ApproveRollingReleaseStageNextStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *ApproveRollingReleaseStageNextStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *ApproveRollingReleaseStageNextStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// ApproveRollingReleaseStageRollingRelease - Rolling release information including configuration and document details, or null if no rolling release exists
type ApproveRollingReleaseStageRollingRelease struct {
	// The current state of the rolling release
	State ApproveRollingReleaseStageState `json:"state"`
	// The current deployment receiving production traffic
	CurrentDeployment *ApproveRollingReleaseStageCurrentDeployment `json:"currentDeployment"`
	// The canary deployment being rolled out
	CanaryDeployment *ApproveRollingReleaseStageCanaryDeployment `json:"canaryDeployment"`
	// The ID of a deployment queued for the next rolling release
	QueuedDeploymentID *string `json:"queuedDeploymentId"`
	// All stages configured for this rolling release
	Stages []ApproveRollingReleaseStageStage `json:"stages"`
	// The currently active stage, null if the rollout is aborted
	ActiveStage *ApproveRollingReleaseStageActiveStage `json:"activeStage"`
	// The next stage to be activated, null if not in ACTIVE state
	NextStage *ApproveRollingReleaseStageNextStage `json:"nextStage"`
	// Unix timestamp in milliseconds when the rolling release started
	StartedAt float64 `json:"startedAt"`
	// Unix timestamp in milliseconds when the rolling release was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *ApproveRollingReleaseStageRollingRelease) GetState() ApproveRollingReleaseStageState {
	if o == nil {
		return ApproveRollingReleaseStageState("")
	}
	return o.State
}

func (o *ApproveRollingReleaseStageRollingRelease) GetCurrentDeployment() *ApproveRollingReleaseStageCurrentDeployment {
	if o == nil {
		return nil
	}
	return o.CurrentDeployment
}

func (o *ApproveRollingReleaseStageRollingRelease) GetCanaryDeployment() *ApproveRollingReleaseStageCanaryDeployment {
	if o == nil {
		return nil
	}
	return o.CanaryDeployment
}

func (o *ApproveRollingReleaseStageRollingRelease) GetQueuedDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.QueuedDeploymentID
}

func (o *ApproveRollingReleaseStageRollingRelease) GetStages() []ApproveRollingReleaseStageStage {
	if o == nil {
		return []ApproveRollingReleaseStageStage{}
	}
	return o.Stages
}

func (o *ApproveRollingReleaseStageRollingRelease) GetActiveStage() *ApproveRollingReleaseStageActiveStage {
	if o == nil {
		return nil
	}
	return o.ActiveStage
}

func (o *ApproveRollingReleaseStageRollingRelease) GetNextStage() *ApproveRollingReleaseStageNextStage {
	if o == nil {
		return nil
	}
	return o.NextStage
}

func (o *ApproveRollingReleaseStageRollingRelease) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *ApproveRollingReleaseStageRollingRelease) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

// ApproveRollingReleaseStageResponseBody - The response format for rolling release endpoints that return rolling release information
type ApproveRollingReleaseStageResponseBody struct {
	// Rolling release information including configuration and document details, or null if no rolling release exists
	RollingRelease *ApproveRollingReleaseStageRollingRelease `json:"rollingRelease"`
}

func (o *ApproveRollingReleaseStageResponseBody) GetRollingRelease() *ApproveRollingReleaseStageRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

type ApproveRollingReleaseStageResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ApproveRollingReleaseStageResponseBody
}

func (o *ApproveRollingReleaseStageResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ApproveRollingReleaseStageResponse) GetObject() *ApproveRollingReleaseStageResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
