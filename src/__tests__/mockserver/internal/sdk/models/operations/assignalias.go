// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type AssignAliasRequestBody struct {
	// The alias we want to assign to the deployment defined in the URL
	Alias *string `json:"alias,omitempty"`
	// The redirect property will take precedence over the deployment id from the URL and consists of a hostname (like test.com) to which the alias should redirect using status code 307
	Redirect *string `json:"redirect,omitempty"`
}

func (o *AssignAliasRequestBody) GetAlias() *string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *AssignAliasRequestBody) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

type AssignAliasRequest struct {
	// The ID of the deployment the aliases should be listed for
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                `queryParam:"style=form,explode=true,name=slug"`
	RequestBody AssignAliasRequestBody `request:"mediaType=application/json"`
}

func (o *AssignAliasRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *AssignAliasRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *AssignAliasRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *AssignAliasRequest) GetRequestBody() AssignAliasRequestBody {
	if o == nil {
		return AssignAliasRequestBody{}
	}
	return o.RequestBody
}

// AssignAliasResponseBody - The alias was successfully assigned to the deployment
type AssignAliasResponseBody struct {
	// The unique identifier of the alias
	UID string `json:"uid"`
	// The assigned alias name
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The unique identifier of the previously aliased deployment, only received when the alias was used before
	OldDeploymentID *string `json:"oldDeploymentId,omitempty"`
}

func (a AssignAliasResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(a, "", false)
}

func (a *AssignAliasResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &a, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *AssignAliasResponseBody) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *AssignAliasResponseBody) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *AssignAliasResponseBody) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *AssignAliasResponseBody) GetOldDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.OldDeploymentID
}

type AssignAliasResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The alias was successfully assigned to the deployment
	Object *AssignAliasResponseBody
}

func (o *AssignAliasResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *AssignAliasResponse) GetObject() *AssignAliasResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
