// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type BuyDomainsDomain struct {
	DomainName string  `json:"domainName"`
	AutoRenew  bool    `json:"autoRenew"`
	Years      float64 `json:"years"`
	// Represents a monetary amount in USD dollars
	ExpectedPrice float64 `json:"expectedPrice"`
}

func (o *BuyDomainsDomain) GetDomainName() string {
	if o == nil {
		return ""
	}
	return o.DomainName
}

func (o *BuyDomainsDomain) GetAutoRenew() bool {
	if o == nil {
		return false
	}
	return o.AutoRenew
}

func (o *BuyDomainsDomain) GetYears() float64 {
	if o == nil {
		return 0.0
	}
	return o.Years
}

func (o *BuyDomainsDomain) GetExpectedPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpectedPrice
}

type BuyDomainsAdditional struct {
}

type BuyDomainsContactInformation struct {
	// a non empty string
	FirstName string `json:"firstName"`
	// a non empty string
	LastName string `json:"lastName"`
	// a non empty string
	Email string `json:"email"`
	// A valid E.164 phone number
	Phone string `json:"phone"`
	// a non empty string
	Address1 string `json:"address1"`
	// a non empty string
	Address2 *string `json:"address2,omitempty"`
	// a non empty string
	City string `json:"city"`
	// a non empty string
	State string `json:"state"`
	// a non empty string
	Zip string `json:"zip"`
	// A valid ISO 3166-1 alpha-2 country code
	Country string `json:"country"`
	// a non empty string
	CompanyName *string `json:"companyName,omitempty"`
	// A valid E.164 phone number
	Fax        *string               `json:"fax,omitempty"`
	Additional *BuyDomainsAdditional `json:"additional,omitempty"`
}

func (o *BuyDomainsContactInformation) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *BuyDomainsContactInformation) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *BuyDomainsContactInformation) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *BuyDomainsContactInformation) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

func (o *BuyDomainsContactInformation) GetAddress1() string {
	if o == nil {
		return ""
	}
	return o.Address1
}

func (o *BuyDomainsContactInformation) GetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.Address2
}

func (o *BuyDomainsContactInformation) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *BuyDomainsContactInformation) GetState() string {
	if o == nil {
		return ""
	}
	return o.State
}

func (o *BuyDomainsContactInformation) GetZip() string {
	if o == nil {
		return ""
	}
	return o.Zip
}

func (o *BuyDomainsContactInformation) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *BuyDomainsContactInformation) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *BuyDomainsContactInformation) GetFax() *string {
	if o == nil {
		return nil
	}
	return o.Fax
}

func (o *BuyDomainsContactInformation) GetAdditional() *BuyDomainsAdditional {
	if o == nil {
		return nil
	}
	return o.Additional
}

type BuyDomainsRequest struct {
	Domains            []BuyDomainsDomain           `json:"domains"`
	ContactInformation BuyDomainsContactInformation `json:"contactInformation"`
}

func (o *BuyDomainsRequest) GetDomains() []BuyDomainsDomain {
	if o == nil {
		return []BuyDomainsDomain{}
	}
	return o.Domains
}

func (o *BuyDomainsRequest) GetContactInformation() BuyDomainsContactInformation {
	if o == nil {
		return BuyDomainsContactInformation{}
	}
	return o.ContactInformation
}

type BuyDomainsMethod string

const (
	BuyDomainsMethodGet BuyDomainsMethod = "GET"
)

func (e BuyDomainsMethod) ToPointer() *BuyDomainsMethod {
	return &e
}
func (e *BuyDomainsMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		*e = BuyDomainsMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BuyDomainsMethod: %v", v)
	}
}

type BuyDomainsLinks struct {
	Href   string           `json:"href"`
	Method BuyDomainsMethod `json:"method"`
}

func (o *BuyDomainsLinks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *BuyDomainsLinks) GetMethod() BuyDomainsMethod {
	if o == nil {
		return BuyDomainsMethod("")
	}
	return o.Method
}

// BuyDomainsResponseBody - Success
type BuyDomainsResponseBody struct {
	OrderID string                     `json:"orderId"`
	Links   map[string]BuyDomainsLinks `json:"_links"`
}

func (o *BuyDomainsResponseBody) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *BuyDomainsResponseBody) GetLinks() map[string]BuyDomainsLinks {
	if o == nil {
		return map[string]BuyDomainsLinks{}
	}
	return o.Links
}

type BuyDomainsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *BuyDomainsResponseBody
}

func (o *BuyDomainsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BuyDomainsResponse) GetObject() *BuyDomainsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
