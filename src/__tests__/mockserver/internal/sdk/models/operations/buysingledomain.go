// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type BuySingleDomainAdditional struct {
}

type BuySingleDomainContactInformation struct {
	// a non empty string
	FirstName string `json:"firstName"`
	// a non empty string
	LastName string `json:"lastName"`
	// a non empty string
	Email string `json:"email"`
	// A valid E.164 phone number
	Phone string `json:"phone"`
	// a non empty string
	Address1 string `json:"address1"`
	// a non empty string
	Address2 *string `json:"address2,omitempty"`
	// a non empty string
	City string `json:"city"`
	// a non empty string
	State string `json:"state"`
	// a non empty string
	Zip string `json:"zip"`
	// A valid ISO 3166-1 alpha-2 country code
	Country string `json:"country"`
	// a non empty string
	CompanyName *string `json:"companyName,omitempty"`
	// A valid E.164 phone number
	Fax        *string                    `json:"fax,omitempty"`
	Additional *BuySingleDomainAdditional `json:"additional,omitempty"`
}

func (o *BuySingleDomainContactInformation) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *BuySingleDomainContactInformation) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *BuySingleDomainContactInformation) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *BuySingleDomainContactInformation) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

func (o *BuySingleDomainContactInformation) GetAddress1() string {
	if o == nil {
		return ""
	}
	return o.Address1
}

func (o *BuySingleDomainContactInformation) GetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.Address2
}

func (o *BuySingleDomainContactInformation) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *BuySingleDomainContactInformation) GetState() string {
	if o == nil {
		return ""
	}
	return o.State
}

func (o *BuySingleDomainContactInformation) GetZip() string {
	if o == nil {
		return ""
	}
	return o.Zip
}

func (o *BuySingleDomainContactInformation) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *BuySingleDomainContactInformation) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *BuySingleDomainContactInformation) GetFax() *string {
	if o == nil {
		return nil
	}
	return o.Fax
}

func (o *BuySingleDomainContactInformation) GetAdditional() *BuySingleDomainAdditional {
	if o == nil {
		return nil
	}
	return o.Additional
}

type BuySingleDomainRequestBody struct {
	AutoRenew bool    `json:"autoRenew"`
	Years     float64 `json:"years"`
	// Represents a monetary amount in USD dollars
	ExpectedPrice      float64                           `json:"expectedPrice"`
	ContactInformation BuySingleDomainContactInformation `json:"contactInformation"`
}

func (o *BuySingleDomainRequestBody) GetAutoRenew() bool {
	if o == nil {
		return false
	}
	return o.AutoRenew
}

func (o *BuySingleDomainRequestBody) GetYears() float64 {
	if o == nil {
		return 0.0
	}
	return o.Years
}

func (o *BuySingleDomainRequestBody) GetExpectedPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpectedPrice
}

func (o *BuySingleDomainRequestBody) GetContactInformation() BuySingleDomainContactInformation {
	if o == nil {
		return BuySingleDomainContactInformation{}
	}
	return o.ContactInformation
}

type BuySingleDomainRequest struct {
	Domain      string                     `pathParam:"style=simple,explode=false,name=domain"`
	RequestBody BuySingleDomainRequestBody `request:"mediaType=application/json"`
}

func (o *BuySingleDomainRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *BuySingleDomainRequest) GetRequestBody() BuySingleDomainRequestBody {
	if o == nil {
		return BuySingleDomainRequestBody{}
	}
	return o.RequestBody
}

type BuySingleDomainMethod string

const (
	BuySingleDomainMethodGet    BuySingleDomainMethod = "GET"
	BuySingleDomainMethodPost   BuySingleDomainMethod = "POST"
	BuySingleDomainMethodPut    BuySingleDomainMethod = "PUT"
	BuySingleDomainMethodDelete BuySingleDomainMethod = "DELETE"
	BuySingleDomainMethodPatch  BuySingleDomainMethod = "PATCH"
)

func (e BuySingleDomainMethod) ToPointer() *BuySingleDomainMethod {
	return &e
}
func (e *BuySingleDomainMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		fallthrough
	case "PATCH":
		*e = BuySingleDomainMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for BuySingleDomainMethod: %v", v)
	}
}

type BuySingleDomainLinks struct {
	Href   string                `json:"href"`
	Method BuySingleDomainMethod `json:"method"`
}

func (o *BuySingleDomainLinks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *BuySingleDomainLinks) GetMethod() BuySingleDomainMethod {
	if o == nil {
		return BuySingleDomainMethod("")
	}
	return o.Method
}

// BuySingleDomainResponseBody - Success
type BuySingleDomainResponseBody struct {
	OrderID string                          `json:"orderId"`
	Links   map[string]BuySingleDomainLinks `json:"_links"`
}

func (o *BuySingleDomainResponseBody) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *BuySingleDomainResponseBody) GetLinks() map[string]BuySingleDomainLinks {
	if o == nil {
		return map[string]BuySingleDomainLinks{}
	}
	return o.Links
}

type BuySingleDomainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *BuySingleDomainResponseBody
}

func (o *BuySingleDomainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *BuySingleDomainResponse) GetObject() *BuySingleDomainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
