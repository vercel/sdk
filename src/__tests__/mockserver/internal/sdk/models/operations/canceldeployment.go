// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type CancelDeploymentRequest struct {
	// The unique identifier of the deployment.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *CancelDeploymentRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CancelDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type CancelDeploymentAliasAssignedAtType string

const (
	CancelDeploymentAliasAssignedAtTypeNumber  CancelDeploymentAliasAssignedAtType = "number"
	CancelDeploymentAliasAssignedAtTypeBoolean CancelDeploymentAliasAssignedAtType = "boolean"
)

type CancelDeploymentAliasAssignedAt struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type CancelDeploymentAliasAssignedAtType
}

func CreateCancelDeploymentAliasAssignedAtNumber(number float64) CancelDeploymentAliasAssignedAt {
	typ := CancelDeploymentAliasAssignedAtTypeNumber

	return CancelDeploymentAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateCancelDeploymentAliasAssignedAtBoolean(boolean bool) CancelDeploymentAliasAssignedAt {
	typ := CancelDeploymentAliasAssignedAtTypeBoolean

	return CancelDeploymentAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CancelDeploymentAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CancelDeploymentAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentAliasAssignedAt", string(data))
}

func (u CancelDeploymentAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentAliasAssignedAt: all fields are null")
}

type CancelDeploymentBuild1 struct {
	Env []string `json:"env"`
}

func (o *CancelDeploymentBuild1) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type CancelDeploymentBuild2 struct {
	Use    string         `json:"use"`
	Src    *string        `json:"src,omitempty"`
	Config map[string]any `json:"config,omitempty"`
}

func (o *CancelDeploymentBuild2) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *CancelDeploymentBuild2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CancelDeploymentBuild2) GetConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.Config
}

type CancelDeploymentFramework string

const (
	CancelDeploymentFrameworkBlitzjs        CancelDeploymentFramework = "blitzjs"
	CancelDeploymentFrameworkNextjs         CancelDeploymentFramework = "nextjs"
	CancelDeploymentFrameworkGatsby         CancelDeploymentFramework = "gatsby"
	CancelDeploymentFrameworkRemix          CancelDeploymentFramework = "remix"
	CancelDeploymentFrameworkReactRouter    CancelDeploymentFramework = "react-router"
	CancelDeploymentFrameworkAstro          CancelDeploymentFramework = "astro"
	CancelDeploymentFrameworkHexo           CancelDeploymentFramework = "hexo"
	CancelDeploymentFrameworkEleventy       CancelDeploymentFramework = "eleventy"
	CancelDeploymentFrameworkDocusaurus2    CancelDeploymentFramework = "docusaurus-2"
	CancelDeploymentFrameworkDocusaurus     CancelDeploymentFramework = "docusaurus"
	CancelDeploymentFrameworkPreact         CancelDeploymentFramework = "preact"
	CancelDeploymentFrameworkSolidstart1    CancelDeploymentFramework = "solidstart-1"
	CancelDeploymentFrameworkSolidstart     CancelDeploymentFramework = "solidstart"
	CancelDeploymentFrameworkDojo           CancelDeploymentFramework = "dojo"
	CancelDeploymentFrameworkEmber          CancelDeploymentFramework = "ember"
	CancelDeploymentFrameworkVue            CancelDeploymentFramework = "vue"
	CancelDeploymentFrameworkScully         CancelDeploymentFramework = "scully"
	CancelDeploymentFrameworkIonicAngular   CancelDeploymentFramework = "ionic-angular"
	CancelDeploymentFrameworkAngular        CancelDeploymentFramework = "angular"
	CancelDeploymentFrameworkPolymer        CancelDeploymentFramework = "polymer"
	CancelDeploymentFrameworkSvelte         CancelDeploymentFramework = "svelte"
	CancelDeploymentFrameworkSveltekit      CancelDeploymentFramework = "sveltekit"
	CancelDeploymentFrameworkSveltekit1     CancelDeploymentFramework = "sveltekit-1"
	CancelDeploymentFrameworkIonicReact     CancelDeploymentFramework = "ionic-react"
	CancelDeploymentFrameworkCreateReactApp CancelDeploymentFramework = "create-react-app"
	CancelDeploymentFrameworkGridsome       CancelDeploymentFramework = "gridsome"
	CancelDeploymentFrameworkUmijs          CancelDeploymentFramework = "umijs"
	CancelDeploymentFrameworkSapper         CancelDeploymentFramework = "sapper"
	CancelDeploymentFrameworkSaber          CancelDeploymentFramework = "saber"
	CancelDeploymentFrameworkStencil        CancelDeploymentFramework = "stencil"
	CancelDeploymentFrameworkNuxtjs         CancelDeploymentFramework = "nuxtjs"
	CancelDeploymentFrameworkRedwoodjs      CancelDeploymentFramework = "redwoodjs"
	CancelDeploymentFrameworkHugo           CancelDeploymentFramework = "hugo"
	CancelDeploymentFrameworkJekyll         CancelDeploymentFramework = "jekyll"
	CancelDeploymentFrameworkBrunch         CancelDeploymentFramework = "brunch"
	CancelDeploymentFrameworkMiddleman      CancelDeploymentFramework = "middleman"
	CancelDeploymentFrameworkZola           CancelDeploymentFramework = "zola"
	CancelDeploymentFrameworkHydrogen       CancelDeploymentFramework = "hydrogen"
	CancelDeploymentFrameworkVite           CancelDeploymentFramework = "vite"
	CancelDeploymentFrameworkVitepress      CancelDeploymentFramework = "vitepress"
	CancelDeploymentFrameworkVuepress       CancelDeploymentFramework = "vuepress"
	CancelDeploymentFrameworkParcel         CancelDeploymentFramework = "parcel"
	CancelDeploymentFrameworkFasthtml       CancelDeploymentFramework = "fasthtml"
	CancelDeploymentFrameworkSanityV3       CancelDeploymentFramework = "sanity-v3"
	CancelDeploymentFrameworkSanity         CancelDeploymentFramework = "sanity"
	CancelDeploymentFrameworkStorybook      CancelDeploymentFramework = "storybook"
	CancelDeploymentFrameworkNitro          CancelDeploymentFramework = "nitro"
	CancelDeploymentFrameworkHono           CancelDeploymentFramework = "hono"
	CancelDeploymentFrameworkExpress        CancelDeploymentFramework = "express"
	CancelDeploymentFrameworkXmcp           CancelDeploymentFramework = "xmcp"
)

func (e CancelDeploymentFramework) ToPointer() *CancelDeploymentFramework {
	return &e
}
func (e *CancelDeploymentFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		fallthrough
	case "nitro":
		fallthrough
	case "hono":
		fallthrough
	case "express":
		fallthrough
	case "xmcp":
		*e = CancelDeploymentFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentFramework: %v", v)
	}
}

type CancelDeploymentSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *CancelDeploymentSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CancelDeploymentSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CancelDeploymentSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelDeploymentSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *CancelDeploymentSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type CancelDeploymentWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *CancelDeploymentWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CancelDeploymentWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelDeploymentWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CancelDeploymentWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type CancelDeploymentProjectSettings struct {
	BuildCommand                *string                        `json:"buildCommand,omitempty"`
	DevCommand                  *string                        `json:"devCommand,omitempty"`
	Framework                   *CancelDeploymentFramework     `json:"framework,omitempty"`
	CommandForIgnoringBuildStep *string                        `json:"commandForIgnoringBuildStep,omitempty"`
	InstallCommand              *string                        `json:"installCommand,omitempty"`
	OutputDirectory             *string                        `json:"outputDirectory,omitempty"`
	SpeedInsights               *CancelDeploymentSpeedInsights `json:"speedInsights,omitempty"`
	WebAnalytics                *CancelDeploymentWebAnalytics  `json:"webAnalytics,omitempty"`
}

func (o *CancelDeploymentProjectSettings) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CancelDeploymentProjectSettings) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CancelDeploymentProjectSettings) GetFramework() *CancelDeploymentFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CancelDeploymentProjectSettings) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CancelDeploymentProjectSettings) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CancelDeploymentProjectSettings) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CancelDeploymentProjectSettings) GetSpeedInsights() *CancelDeploymentSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *CancelDeploymentProjectSettings) GetWebAnalytics() *CancelDeploymentWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type CancelDeploymentIntegrationsStatus string

const (
	CancelDeploymentIntegrationsStatusError   CancelDeploymentIntegrationsStatus = "error"
	CancelDeploymentIntegrationsStatusTimeout CancelDeploymentIntegrationsStatus = "timeout"
	CancelDeploymentIntegrationsStatusSkipped CancelDeploymentIntegrationsStatus = "skipped"
	CancelDeploymentIntegrationsStatusPending CancelDeploymentIntegrationsStatus = "pending"
	CancelDeploymentIntegrationsStatusReady   CancelDeploymentIntegrationsStatus = "ready"
)

func (e CancelDeploymentIntegrationsStatus) ToPointer() *CancelDeploymentIntegrationsStatus {
	return &e
}
func (e *CancelDeploymentIntegrationsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "timeout":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "ready":
		*e = CancelDeploymentIntegrationsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentIntegrationsStatus: %v", v)
	}
}

type CancelDeploymentIntegrations struct {
	Status      CancelDeploymentIntegrationsStatus `json:"status"`
	StartedAt   float64                            `json:"startedAt"`
	CompletedAt *float64                           `json:"completedAt,omitempty"`
	SkippedAt   *float64                           `json:"skippedAt,omitempty"`
	SkippedBy   *string                            `json:"skippedBy,omitempty"`
}

func (o *CancelDeploymentIntegrations) GetStatus() CancelDeploymentIntegrationsStatus {
	if o == nil {
		return CancelDeploymentIntegrationsStatus("")
	}
	return o.Status
}

func (o *CancelDeploymentIntegrations) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *CancelDeploymentIntegrations) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *CancelDeploymentIntegrations) GetSkippedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkippedAt
}

func (o *CancelDeploymentIntegrations) GetSkippedBy() *string {
	if o == nil {
		return nil
	}
	return o.SkippedBy
}

// CancelDeploymentProtocol - Must be `http` or `https`.
type CancelDeploymentProtocol string

const (
	CancelDeploymentProtocolHTTP  CancelDeploymentProtocol = "http"
	CancelDeploymentProtocolHTTPS CancelDeploymentProtocol = "https"
)

func (e CancelDeploymentProtocol) ToPointer() *CancelDeploymentProtocol {
	return &e
}
func (e *CancelDeploymentProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = CancelDeploymentProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentProtocol: %v", v)
	}
}

type CancelDeploymentRemotePattern struct {
	// Must be `http` or `https`.
	Protocol *CancelDeploymentProtocol `json:"protocol,omitempty"`
	// Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
	Hostname string `json:"hostname"`
	// Can be literal port such as `8080` or empty string meaning no port.
	Port *string `json:"port,omitempty"`
	// Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
	Pathname *string `json:"pathname,omitempty"`
	// Can be literal query string such as `?v=1` or empty string meaning no query string.
	Search *string `json:"search,omitempty"`
}

func (o *CancelDeploymentRemotePattern) GetProtocol() *CancelDeploymentProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *CancelDeploymentRemotePattern) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *CancelDeploymentRemotePattern) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CancelDeploymentRemotePattern) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *CancelDeploymentRemotePattern) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type CancelDeploymentLocalPattern struct {
	// Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
	Pathname *string `json:"pathname,omitempty"`
	// Can be literal query string such as `?v=1` or empty string meaning no query string.
	Search *string `json:"search,omitempty"`
}

func (o *CancelDeploymentLocalPattern) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *CancelDeploymentLocalPattern) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type CancelDeploymentFormat string

const (
	CancelDeploymentFormatImageAvif CancelDeploymentFormat = "image/avif"
	CancelDeploymentFormatImageWebp CancelDeploymentFormat = "image/webp"
)

func (e CancelDeploymentFormat) ToPointer() *CancelDeploymentFormat {
	return &e
}
func (e *CancelDeploymentFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image/avif":
		fallthrough
	case "image/webp":
		*e = CancelDeploymentFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentFormat: %v", v)
	}
}

type CancelDeploymentContentDispositionType string

const (
	CancelDeploymentContentDispositionTypeInline     CancelDeploymentContentDispositionType = "inline"
	CancelDeploymentContentDispositionTypeAttachment CancelDeploymentContentDispositionType = "attachment"
)

func (e CancelDeploymentContentDispositionType) ToPointer() *CancelDeploymentContentDispositionType {
	return &e
}
func (e *CancelDeploymentContentDispositionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inline":
		fallthrough
	case "attachment":
		*e = CancelDeploymentContentDispositionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentContentDispositionType: %v", v)
	}
}

type CancelDeploymentImages struct {
	Sizes                  []float64                               `json:"sizes,omitempty"`
	Qualities              []float64                               `json:"qualities,omitempty"`
	Domains                []string                                `json:"domains,omitempty"`
	RemotePatterns         []CancelDeploymentRemotePattern         `json:"remotePatterns,omitempty"`
	LocalPatterns          []CancelDeploymentLocalPattern          `json:"localPatterns,omitempty"`
	MinimumCacheTTL        *float64                                `json:"minimumCacheTTL,omitempty"`
	Formats                []CancelDeploymentFormat                `json:"formats,omitempty"`
	DangerouslyAllowSVG    *bool                                   `json:"dangerouslyAllowSVG,omitempty"`
	ContentSecurityPolicy  *string                                 `json:"contentSecurityPolicy,omitempty"`
	ContentDispositionType *CancelDeploymentContentDispositionType `json:"contentDispositionType,omitempty"`
}

func (o *CancelDeploymentImages) GetSizes() []float64 {
	if o == nil {
		return nil
	}
	return o.Sizes
}

func (o *CancelDeploymentImages) GetQualities() []float64 {
	if o == nil {
		return nil
	}
	return o.Qualities
}

func (o *CancelDeploymentImages) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *CancelDeploymentImages) GetRemotePatterns() []CancelDeploymentRemotePattern {
	if o == nil {
		return nil
	}
	return o.RemotePatterns
}

func (o *CancelDeploymentImages) GetLocalPatterns() []CancelDeploymentLocalPattern {
	if o == nil {
		return nil
	}
	return o.LocalPatterns
}

func (o *CancelDeploymentImages) GetMinimumCacheTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.MinimumCacheTTL
}

func (o *CancelDeploymentImages) GetFormats() []CancelDeploymentFormat {
	if o == nil {
		return nil
	}
	return o.Formats
}

func (o *CancelDeploymentImages) GetDangerouslyAllowSVG() *bool {
	if o == nil {
		return nil
	}
	return o.DangerouslyAllowSVG
}

func (o *CancelDeploymentImages) GetContentSecurityPolicy() *string {
	if o == nil {
		return nil
	}
	return o.ContentSecurityPolicy
}

func (o *CancelDeploymentImages) GetContentDispositionType() *CancelDeploymentContentDispositionType {
	if o == nil {
		return nil
	}
	return o.ContentDispositionType
}

type CancelDeploymentCreator struct {
	UID      string  `json:"uid"`
	Username *string `json:"username,omitempty"`
	Avatar   *string `json:"avatar,omitempty"`
}

func (o *CancelDeploymentCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CancelDeploymentCreator) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *CancelDeploymentCreator) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type CancelDeploymentLambdaReadyState string

const (
	CancelDeploymentLambdaReadyStateError        CancelDeploymentLambdaReadyState = "ERROR"
	CancelDeploymentLambdaReadyStateBuilding     CancelDeploymentLambdaReadyState = "BUILDING"
	CancelDeploymentLambdaReadyStateInitializing CancelDeploymentLambdaReadyState = "INITIALIZING"
	CancelDeploymentLambdaReadyStateReady        CancelDeploymentLambdaReadyState = "READY"
)

func (e CancelDeploymentLambdaReadyState) ToPointer() *CancelDeploymentLambdaReadyState {
	return &e
}
func (e *CancelDeploymentLambdaReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ERROR":
		fallthrough
	case "BUILDING":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = CancelDeploymentLambdaReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentLambdaReadyState: %v", v)
	}
}

type CancelDeploymentOutput struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *CancelDeploymentOutput) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentOutput) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

// CancelDeploymentLambda - A partial representation of a Build used by the deployment endpoint.
type CancelDeploymentLambda struct {
	ID           string                            `json:"id"`
	CreatedAt    *float64                          `json:"createdAt,omitempty"`
	ReadyState   *CancelDeploymentLambdaReadyState `json:"readyState,omitempty"`
	Entrypoint   *string                           `json:"entrypoint,omitempty"`
	ReadyStateAt *float64                          `json:"readyStateAt,omitempty"`
	Output       []CancelDeploymentOutput          `json:"output"`
}

func (o *CancelDeploymentLambda) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentLambda) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CancelDeploymentLambda) GetReadyState() *CancelDeploymentLambdaReadyState {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *CancelDeploymentLambda) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *CancelDeploymentLambda) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *CancelDeploymentLambda) GetOutput() []CancelDeploymentOutput {
	if o == nil {
		return []CancelDeploymentOutput{}
	}
	return o.Output
}

type CancelDeploymentStatus string

const (
	CancelDeploymentStatusBuilding     CancelDeploymentStatus = "BUILDING"
	CancelDeploymentStatusError        CancelDeploymentStatus = "ERROR"
	CancelDeploymentStatusInitializing CancelDeploymentStatus = "INITIALIZING"
	CancelDeploymentStatusQueued       CancelDeploymentStatus = "QUEUED"
	CancelDeploymentStatusReady        CancelDeploymentStatus = "READY"
	CancelDeploymentStatusCanceled     CancelDeploymentStatus = "CANCELED"
)

func (e CancelDeploymentStatus) ToPointer() *CancelDeploymentStatus {
	return &e
}
func (e *CancelDeploymentStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CancelDeploymentStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentStatus: %v", v)
	}
}

type CancelDeploymentTeam struct {
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Slug   string  `json:"slug"`
	Avatar *string `json:"avatar,omitempty"`
}

func (o *CancelDeploymentTeam) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentTeam) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentTeam) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentTeam) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type CancelDeploymentCustomEnvironment2 struct {
	ID string `json:"id"`
}

func (o *CancelDeploymentCustomEnvironment2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CancelDeploymentCustomEnvironmentType - The type of environment (production, preview, or development)
type CancelDeploymentCustomEnvironmentType string

const (
	CancelDeploymentCustomEnvironmentTypeProduction  CancelDeploymentCustomEnvironmentType = "production"
	CancelDeploymentCustomEnvironmentTypePreview     CancelDeploymentCustomEnvironmentType = "preview"
	CancelDeploymentCustomEnvironmentTypeDevelopment CancelDeploymentCustomEnvironmentType = "development"
)

func (e CancelDeploymentCustomEnvironmentType) ToPointer() *CancelDeploymentCustomEnvironmentType {
	return &e
}
func (e *CancelDeploymentCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CancelDeploymentCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentCustomEnvironmentType: %v", v)
	}
}

// CancelDeploymentBranchMatcherType - The type of matching to perform
type CancelDeploymentBranchMatcherType string

const (
	CancelDeploymentBranchMatcherTypeEndsWith   CancelDeploymentBranchMatcherType = "endsWith"
	CancelDeploymentBranchMatcherTypeStartsWith CancelDeploymentBranchMatcherType = "startsWith"
	CancelDeploymentBranchMatcherTypeEquals     CancelDeploymentBranchMatcherType = "equals"
)

func (e CancelDeploymentBranchMatcherType) ToPointer() *CancelDeploymentBranchMatcherType {
	return &e
}
func (e *CancelDeploymentBranchMatcherType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = CancelDeploymentBranchMatcherType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentBranchMatcherType: %v", v)
	}
}

// CancelDeploymentBranchMatcher - Configuration for matching git branches to this environment
type CancelDeploymentBranchMatcher struct {
	// The type of matching to perform
	Type CancelDeploymentBranchMatcherType `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *CancelDeploymentBranchMatcher) GetType() CancelDeploymentBranchMatcherType {
	if o == nil {
		return CancelDeploymentBranchMatcherType("")
	}
	return o.Type
}

func (o *CancelDeploymentBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// CancelDeploymentVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type CancelDeploymentVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *CancelDeploymentVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CancelDeploymentVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CancelDeploymentVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CancelDeploymentVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// CancelDeploymentDomain - List of domains associated with this environment
type CancelDeploymentDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []CancelDeploymentVerification `json:"verification,omitempty"`
}

func (o *CancelDeploymentDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *CancelDeploymentDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CancelDeploymentDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *CancelDeploymentDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *CancelDeploymentDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CancelDeploymentDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *CancelDeploymentDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CancelDeploymentDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CancelDeploymentDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *CancelDeploymentDomain) GetVerification() []CancelDeploymentVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// CancelDeploymentCustomEnvironment1 - Internal representation of a custom environment with all required properties
type CancelDeploymentCustomEnvironment1 struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type CancelDeploymentCustomEnvironmentType `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *CancelDeploymentBranchMatcher `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []CancelDeploymentDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *CancelDeploymentCustomEnvironment1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentCustomEnvironment1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentCustomEnvironment1) GetType() CancelDeploymentCustomEnvironmentType {
	if o == nil {
		return CancelDeploymentCustomEnvironmentType("")
	}
	return o.Type
}

func (o *CancelDeploymentCustomEnvironment1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CancelDeploymentCustomEnvironment1) GetBranchMatcher() *CancelDeploymentBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CancelDeploymentCustomEnvironment1) GetDomains() []CancelDeploymentDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *CancelDeploymentCustomEnvironment1) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *CancelDeploymentCustomEnvironment1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CancelDeploymentCustomEnvironment1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type CancelDeploymentCustomEnvironmentUnionType string

const (
	CancelDeploymentCustomEnvironmentUnionTypeCancelDeploymentCustomEnvironment1 CancelDeploymentCustomEnvironmentUnionType = "cancelDeployment_customEnvironment_1"
	CancelDeploymentCustomEnvironmentUnionTypeCancelDeploymentCustomEnvironment2 CancelDeploymentCustomEnvironmentUnionType = "cancelDeployment_customEnvironment_2"
)

type CancelDeploymentCustomEnvironmentUnion struct {
	CancelDeploymentCustomEnvironment1 *CancelDeploymentCustomEnvironment1 `queryParam:"inline"`
	CancelDeploymentCustomEnvironment2 *CancelDeploymentCustomEnvironment2 `queryParam:"inline"`

	Type CancelDeploymentCustomEnvironmentUnionType
}

func CreateCancelDeploymentCustomEnvironmentUnionCancelDeploymentCustomEnvironment1(cancelDeploymentCustomEnvironment1 CancelDeploymentCustomEnvironment1) CancelDeploymentCustomEnvironmentUnion {
	typ := CancelDeploymentCustomEnvironmentUnionTypeCancelDeploymentCustomEnvironment1

	return CancelDeploymentCustomEnvironmentUnion{
		CancelDeploymentCustomEnvironment1: &cancelDeploymentCustomEnvironment1,
		Type:                               typ,
	}
}

func CreateCancelDeploymentCustomEnvironmentUnionCancelDeploymentCustomEnvironment2(cancelDeploymentCustomEnvironment2 CancelDeploymentCustomEnvironment2) CancelDeploymentCustomEnvironmentUnion {
	typ := CancelDeploymentCustomEnvironmentUnionTypeCancelDeploymentCustomEnvironment2

	return CancelDeploymentCustomEnvironmentUnion{
		CancelDeploymentCustomEnvironment2: &cancelDeploymentCustomEnvironment2,
		Type:                               typ,
	}
}

func (u *CancelDeploymentCustomEnvironmentUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentCustomEnvironment2 CancelDeploymentCustomEnvironment2 = CancelDeploymentCustomEnvironment2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentCustomEnvironment2, "", true, true); err == nil {
		u.CancelDeploymentCustomEnvironment2 = &cancelDeploymentCustomEnvironment2
		u.Type = CancelDeploymentCustomEnvironmentUnionTypeCancelDeploymentCustomEnvironment2
		return nil
	}

	var cancelDeploymentCustomEnvironment1 CancelDeploymentCustomEnvironment1 = CancelDeploymentCustomEnvironment1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentCustomEnvironment1, "", true, true); err == nil {
		u.CancelDeploymentCustomEnvironment1 = &cancelDeploymentCustomEnvironment1
		u.Type = CancelDeploymentCustomEnvironmentUnionTypeCancelDeploymentCustomEnvironment1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentCustomEnvironmentUnion", string(data))
}

func (u CancelDeploymentCustomEnvironmentUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentCustomEnvironment1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentCustomEnvironment1, "", true)
	}

	if u.CancelDeploymentCustomEnvironment2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentCustomEnvironment2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentCustomEnvironmentUnion: all fields are null")
}

type CancelDeploymentOomReport string

const (
	CancelDeploymentOomReportOutOfMemory CancelDeploymentOomReport = "out-of-memory"
)

func (e CancelDeploymentOomReport) ToPointer() *CancelDeploymentOomReport {
	return &e
}
func (e *CancelDeploymentOomReport) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "out-of-memory":
		*e = CancelDeploymentOomReport(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentOomReport: %v", v)
	}
}

type CancelDeploymentAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CancelDeploymentAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CancelDeploymentAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type CancelDeploymentAliasWarning struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *CancelDeploymentAliasWarning) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CancelDeploymentAliasWarning) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CancelDeploymentAliasWarning) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CancelDeploymentAliasWarning) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type CancelDeploymentChecksState string

const (
	CancelDeploymentChecksStateRegistered CancelDeploymentChecksState = "registered"
	CancelDeploymentChecksStateRunning    CancelDeploymentChecksState = "running"
	CancelDeploymentChecksStateCompleted  CancelDeploymentChecksState = "completed"
)

func (e CancelDeploymentChecksState) ToPointer() *CancelDeploymentChecksState {
	return &e
}
func (e *CancelDeploymentChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CancelDeploymentChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentChecksState: %v", v)
	}
}

type CancelDeploymentChecksConclusion string

const (
	CancelDeploymentChecksConclusionSkipped   CancelDeploymentChecksConclusion = "skipped"
	CancelDeploymentChecksConclusionSucceeded CancelDeploymentChecksConclusion = "succeeded"
	CancelDeploymentChecksConclusionFailed    CancelDeploymentChecksConclusion = "failed"
	CancelDeploymentChecksConclusionCanceled  CancelDeploymentChecksConclusion = "canceled"
)

func (e CancelDeploymentChecksConclusion) ToPointer() *CancelDeploymentChecksConclusion {
	return &e
}
func (e *CancelDeploymentChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "skipped":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "canceled":
		*e = CancelDeploymentChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentChecksConclusion: %v", v)
	}
}

type CancelDeploymentGitSourceTypeBitbucket3 string

const (
	CancelDeploymentGitSourceTypeBitbucket3Bitbucket CancelDeploymentGitSourceTypeBitbucket3 = "bitbucket"
)

func (e CancelDeploymentGitSourceTypeBitbucket3) ToPointer() *CancelDeploymentGitSourceTypeBitbucket3 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeBitbucket3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitSourceTypeBitbucket3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeBitbucket3: %v", v)
	}
}

type CancelDeploymentGitSourceBitbucket3 struct {
	Type          CancelDeploymentGitSourceTypeBitbucket3 `json:"type"`
	Ref           string                                  `json:"ref"`
	Sha           string                                  `json:"sha"`
	Owner         *string                                 `json:"owner,omitempty"`
	Slug          *string                                 `json:"slug,omitempty"`
	WorkspaceUUID string                                  `json:"workspaceUuid"`
	RepoUUID      string                                  `json:"repoUuid"`
}

func (o *CancelDeploymentGitSourceBitbucket3) GetType() CancelDeploymentGitSourceTypeBitbucket3 {
	if o == nil {
		return CancelDeploymentGitSourceTypeBitbucket3("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceBitbucket3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceBitbucket3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceBitbucket3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CancelDeploymentGitSourceBitbucket3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CancelDeploymentGitSourceBitbucket3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *CancelDeploymentGitSourceBitbucket3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type CancelDeploymentGitSourceTypeGitlab2 string

const (
	CancelDeploymentGitSourceTypeGitlab2Gitlab CancelDeploymentGitSourceTypeGitlab2 = "gitlab"
)

func (e CancelDeploymentGitSourceTypeGitlab2) ToPointer() *CancelDeploymentGitSourceTypeGitlab2 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeGitlab2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeploymentGitSourceTypeGitlab2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeGitlab2: %v", v)
	}
}

type CancelDeploymentGitSourceGitlab2 struct {
	Type      CancelDeploymentGitSourceTypeGitlab2 `json:"type"`
	Ref       string                               `json:"ref"`
	Sha       string                               `json:"sha"`
	ProjectID float64                              `json:"projectId"`
}

func (o *CancelDeploymentGitSourceGitlab2) GetType() CancelDeploymentGitSourceTypeGitlab2 {
	if o == nil {
		return CancelDeploymentGitSourceTypeGitlab2("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGitlab2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGitlab2) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGitlab2) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type CancelDeploymentTypeGithubLimited3 string

const (
	CancelDeploymentTypeGithubLimited3GithubLimited CancelDeploymentTypeGithubLimited3 = "github-limited"
)

func (e CancelDeploymentTypeGithubLimited3) ToPointer() *CancelDeploymentTypeGithubLimited3 {
	return &e
}
func (e *CancelDeploymentTypeGithubLimited3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-limited":
		*e = CancelDeploymentTypeGithubLimited3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeGithubLimited3: %v", v)
	}
}

type CancelDeploymentGitSourceGithubLimited3 struct {
	Type   CancelDeploymentTypeGithubLimited3 `json:"type"`
	Ref    string                             `json:"ref"`
	Sha    string                             `json:"sha"`
	RepoID float64                            `json:"repoId"`
	Org    *string                            `json:"org,omitempty"`
	Repo   *string                            `json:"repo,omitempty"`
}

func (o *CancelDeploymentGitSourceGithubLimited3) GetType() CancelDeploymentTypeGithubLimited3 {
	if o == nil {
		return CancelDeploymentTypeGithubLimited3("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithubLimited3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithubLimited3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithubLimited3) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSourceGithubLimited3) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CancelDeploymentGitSourceGithubLimited3) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type CancelDeploymentTypeGithubCustomHost3 string

const (
	CancelDeploymentTypeGithubCustomHost3GithubCustomHost CancelDeploymentTypeGithubCustomHost3 = "github-custom-host"
)

func (e CancelDeploymentTypeGithubCustomHost3) ToPointer() *CancelDeploymentTypeGithubCustomHost3 {
	return &e
}
func (e *CancelDeploymentTypeGithubCustomHost3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = CancelDeploymentTypeGithubCustomHost3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeGithubCustomHost3: %v", v)
	}
}

type CancelDeploymentGitSourceGithubCustomHost3 struct {
	Type   CancelDeploymentTypeGithubCustomHost3 `json:"type"`
	Host   string                                `json:"host"`
	Ref    string                                `json:"ref"`
	Sha    string                                `json:"sha"`
	RepoID float64                               `json:"repoId"`
	Org    *string                               `json:"org,omitempty"`
	Repo   *string                               `json:"repo,omitempty"`
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetType() CancelDeploymentTypeGithubCustomHost3 {
	if o == nil {
		return CancelDeploymentTypeGithubCustomHost3("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CancelDeploymentGitSourceGithubCustomHost3) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type CancelDeploymentGitSourceTypeGithub3 string

const (
	CancelDeploymentGitSourceTypeGithub3Github CancelDeploymentGitSourceTypeGithub3 = "github"
)

func (e CancelDeploymentGitSourceTypeGithub3) ToPointer() *CancelDeploymentGitSourceTypeGithub3 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeGithub3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitSourceTypeGithub3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeGithub3: %v", v)
	}
}

type CancelDeploymentGitSourceGithub3 struct {
	Type   CancelDeploymentGitSourceTypeGithub3 `json:"type"`
	Ref    string                               `json:"ref"`
	Sha    string                               `json:"sha"`
	RepoID float64                              `json:"repoId"`
	Org    *string                              `json:"org,omitempty"`
	Repo   *string                              `json:"repo,omitempty"`
}

func (o *CancelDeploymentGitSourceGithub3) GetType() CancelDeploymentGitSourceTypeGithub3 {
	if o == nil {
		return CancelDeploymentGitSourceTypeGithub3("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithub3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithub3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithub3) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSourceGithub3) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CancelDeploymentGitSourceGithub3) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type CancelDeploymentTypeCustom string

const (
	CancelDeploymentTypeCustomCustom CancelDeploymentTypeCustom = "custom"
)

func (e CancelDeploymentTypeCustom) ToPointer() *CancelDeploymentTypeCustom {
	return &e
}
func (e *CancelDeploymentTypeCustom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = CancelDeploymentTypeCustom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeCustom: %v", v)
	}
}

// CancelDeploymentGitSourceCustom - Allows custom git sources (local folder mounted to the container) in test mode
type CancelDeploymentGitSourceCustom struct {
	Type   CancelDeploymentTypeCustom `json:"type"`
	Ref    string                     `json:"ref"`
	Sha    string                     `json:"sha"`
	GitURL string                     `json:"gitUrl"`
}

func (o *CancelDeploymentGitSourceCustom) GetType() CancelDeploymentTypeCustom {
	if o == nil {
		return CancelDeploymentTypeCustom("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceCustom) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceCustom) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceCustom) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type CancelDeploymentGitSourceTypeBitbucket2 string

const (
	CancelDeploymentGitSourceTypeBitbucket2Bitbucket CancelDeploymentGitSourceTypeBitbucket2 = "bitbucket"
)

func (e CancelDeploymentGitSourceTypeBitbucket2) ToPointer() *CancelDeploymentGitSourceTypeBitbucket2 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeBitbucket2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitSourceTypeBitbucket2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeBitbucket2: %v", v)
	}
}

type CancelDeploymentGitSourceBitbucket2 struct {
	Type  CancelDeploymentGitSourceTypeBitbucket2 `json:"type"`
	Owner string                                  `json:"owner"`
	Slug  string                                  `json:"slug"`
	Ref   *string                                 `json:"ref,omitempty"`
	Sha   *string                                 `json:"sha,omitempty"`
	PrID  *float64                                `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceBitbucket2) GetType() CancelDeploymentGitSourceTypeBitbucket2 {
	if o == nil {
		return CancelDeploymentGitSourceTypeBitbucket2("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceBitbucket2) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeploymentGitSourceBitbucket2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentGitSourceBitbucket2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceBitbucket2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceBitbucket2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceTypeBitbucket1 string

const (
	CancelDeploymentGitSourceTypeBitbucket1Bitbucket CancelDeploymentGitSourceTypeBitbucket1 = "bitbucket"
)

func (e CancelDeploymentGitSourceTypeBitbucket1) ToPointer() *CancelDeploymentGitSourceTypeBitbucket1 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeBitbucket1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitSourceTypeBitbucket1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeBitbucket1: %v", v)
	}
}

type CancelDeploymentGitSourceBitbucket1 struct {
	Type          CancelDeploymentGitSourceTypeBitbucket1 `json:"type"`
	WorkspaceUUID *string                                 `json:"workspaceUuid,omitempty"`
	RepoUUID      string                                  `json:"repoUuid"`
	Ref           *string                                 `json:"ref,omitempty"`
	Sha           *string                                 `json:"sha,omitempty"`
	PrID          *float64                                `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceBitbucket1) GetType() CancelDeploymentGitSourceTypeBitbucket1 {
	if o == nil {
		return CancelDeploymentGitSourceTypeBitbucket1("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceBitbucket1) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *CancelDeploymentGitSourceBitbucket1) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeploymentGitSourceBitbucket1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceBitbucket1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceBitbucket1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceTypeGitlab1 string

const (
	CancelDeploymentGitSourceTypeGitlab1Gitlab CancelDeploymentGitSourceTypeGitlab1 = "gitlab"
)

func (e CancelDeploymentGitSourceTypeGitlab1) ToPointer() *CancelDeploymentGitSourceTypeGitlab1 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeGitlab1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeploymentGitSourceTypeGitlab1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeGitlab1: %v", v)
	}
}

type CancelDeploymentProjectIDType string

const (
	CancelDeploymentProjectIDTypeStr    CancelDeploymentProjectIDType = "str"
	CancelDeploymentProjectIDTypeNumber CancelDeploymentProjectIDType = "number"
)

type CancelDeploymentProjectID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentProjectIDType
}

func CreateCancelDeploymentProjectIDStr(str string) CancelDeploymentProjectID {
	typ := CancelDeploymentProjectIDTypeStr

	return CancelDeploymentProjectID{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentProjectIDNumber(number float64) CancelDeploymentProjectID {
	typ := CancelDeploymentProjectIDTypeNumber

	return CancelDeploymentProjectID{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentProjectID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentProjectIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentProjectIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentProjectID", string(data))
}

func (u CancelDeploymentProjectID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentProjectID: all fields are null")
}

type CancelDeploymentGitSourceGitlab1 struct {
	Type      CancelDeploymentGitSourceTypeGitlab1 `json:"type"`
	ProjectID CancelDeploymentProjectID            `json:"projectId"`
	Ref       *string                              `json:"ref,omitempty"`
	Sha       *string                              `json:"sha,omitempty"`
	PrID      *float64                             `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGitlab1) GetType() CancelDeploymentGitSourceTypeGitlab1 {
	if o == nil {
		return CancelDeploymentGitSourceTypeGitlab1("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGitlab1) GetProjectID() CancelDeploymentProjectID {
	if o == nil {
		return CancelDeploymentProjectID{}
	}
	return o.ProjectID
}

func (o *CancelDeploymentGitSourceGitlab1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGitlab1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGitlab1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentTypeGithubLimited2 string

const (
	CancelDeploymentTypeGithubLimited2GithubLimited CancelDeploymentTypeGithubLimited2 = "github-limited"
)

func (e CancelDeploymentTypeGithubLimited2) ToPointer() *CancelDeploymentTypeGithubLimited2 {
	return &e
}
func (e *CancelDeploymentTypeGithubLimited2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-limited":
		*e = CancelDeploymentTypeGithubLimited2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeGithubLimited2: %v", v)
	}
}

type CancelDeploymentGitSourceGithubLimited2 struct {
	Type CancelDeploymentTypeGithubLimited2 `json:"type"`
	Org  string                             `json:"org"`
	Repo string                             `json:"repo"`
	Ref  *string                            `json:"ref,omitempty"`
	Sha  *string                            `json:"sha,omitempty"`
	PrID *float64                           `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGithubLimited2) GetType() CancelDeploymentTypeGithubLimited2 {
	if o == nil {
		return CancelDeploymentTypeGithubLimited2("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithubLimited2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeploymentGitSourceGithubLimited2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeploymentGitSourceGithubLimited2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithubLimited2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithubLimited2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentTypeGithubLimited1 string

const (
	CancelDeploymentTypeGithubLimited1GithubLimited CancelDeploymentTypeGithubLimited1 = "github-limited"
)

func (e CancelDeploymentTypeGithubLimited1) ToPointer() *CancelDeploymentTypeGithubLimited1 {
	return &e
}
func (e *CancelDeploymentTypeGithubLimited1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-limited":
		*e = CancelDeploymentTypeGithubLimited1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeGithubLimited1: %v", v)
	}
}

type CancelDeploymentRepoID3Type string

const (
	CancelDeploymentRepoID3TypeStr    CancelDeploymentRepoID3Type = "str"
	CancelDeploymentRepoID3TypeNumber CancelDeploymentRepoID3Type = "number"
)

type CancelDeploymentRepoID3 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentRepoID3Type
}

func CreateCancelDeploymentRepoID3Str(str string) CancelDeploymentRepoID3 {
	typ := CancelDeploymentRepoID3TypeStr

	return CancelDeploymentRepoID3{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentRepoID3Number(number float64) CancelDeploymentRepoID3 {
	typ := CancelDeploymentRepoID3TypeNumber

	return CancelDeploymentRepoID3{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentRepoID3) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentRepoID3TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentRepoID3TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRepoID3", string(data))
}

func (u CancelDeploymentRepoID3) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRepoID3: all fields are null")
}

type CancelDeploymentGitSourceGithubLimited1 struct {
	Type   CancelDeploymentTypeGithubLimited1 `json:"type"`
	RepoID CancelDeploymentRepoID3            `json:"repoId"`
	Ref    *string                            `json:"ref,omitempty"`
	Sha    *string                            `json:"sha,omitempty"`
	PrID   *float64                           `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGithubLimited1) GetType() CancelDeploymentTypeGithubLimited1 {
	if o == nil {
		return CancelDeploymentTypeGithubLimited1("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithubLimited1) GetRepoID() CancelDeploymentRepoID3 {
	if o == nil {
		return CancelDeploymentRepoID3{}
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSourceGithubLimited1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithubLimited1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithubLimited1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentTypeGithubCustomHost2 string

const (
	CancelDeploymentTypeGithubCustomHost2GithubCustomHost CancelDeploymentTypeGithubCustomHost2 = "github-custom-host"
)

func (e CancelDeploymentTypeGithubCustomHost2) ToPointer() *CancelDeploymentTypeGithubCustomHost2 {
	return &e
}
func (e *CancelDeploymentTypeGithubCustomHost2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = CancelDeploymentTypeGithubCustomHost2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeGithubCustomHost2: %v", v)
	}
}

type CancelDeploymentGitSourceGithubCustomHost2 struct {
	Type CancelDeploymentTypeGithubCustomHost2 `json:"type"`
	Host string                                `json:"host"`
	Org  string                                `json:"org"`
	Repo string                                `json:"repo"`
	Ref  *string                               `json:"ref,omitempty"`
	Sha  *string                               `json:"sha,omitempty"`
	PrID *float64                              `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetType() CancelDeploymentTypeGithubCustomHost2 {
	if o == nil {
		return CancelDeploymentTypeGithubCustomHost2("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithubCustomHost2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentTypeGithubCustomHost1 string

const (
	CancelDeploymentTypeGithubCustomHost1GithubCustomHost CancelDeploymentTypeGithubCustomHost1 = "github-custom-host"
)

func (e CancelDeploymentTypeGithubCustomHost1) ToPointer() *CancelDeploymentTypeGithubCustomHost1 {
	return &e
}
func (e *CancelDeploymentTypeGithubCustomHost1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = CancelDeploymentTypeGithubCustomHost1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTypeGithubCustomHost1: %v", v)
	}
}

type CancelDeploymentRepoID2Type string

const (
	CancelDeploymentRepoID2TypeStr    CancelDeploymentRepoID2Type = "str"
	CancelDeploymentRepoID2TypeNumber CancelDeploymentRepoID2Type = "number"
)

type CancelDeploymentRepoID2 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentRepoID2Type
}

func CreateCancelDeploymentRepoID2Str(str string) CancelDeploymentRepoID2 {
	typ := CancelDeploymentRepoID2TypeStr

	return CancelDeploymentRepoID2{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentRepoID2Number(number float64) CancelDeploymentRepoID2 {
	typ := CancelDeploymentRepoID2TypeNumber

	return CancelDeploymentRepoID2{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentRepoID2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentRepoID2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentRepoID2TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRepoID2", string(data))
}

func (u CancelDeploymentRepoID2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRepoID2: all fields are null")
}

type CancelDeploymentGitSourceGithubCustomHost1 struct {
	Type   CancelDeploymentTypeGithubCustomHost1 `json:"type"`
	Host   string                                `json:"host"`
	RepoID CancelDeploymentRepoID2               `json:"repoId"`
	Ref    *string                               `json:"ref,omitempty"`
	Sha    *string                               `json:"sha,omitempty"`
	PrID   *float64                              `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGithubCustomHost1) GetType() CancelDeploymentTypeGithubCustomHost1 {
	if o == nil {
		return CancelDeploymentTypeGithubCustomHost1("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithubCustomHost1) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CancelDeploymentGitSourceGithubCustomHost1) GetRepoID() CancelDeploymentRepoID2 {
	if o == nil {
		return CancelDeploymentRepoID2{}
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSourceGithubCustomHost1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithubCustomHost1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithubCustomHost1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceTypeGithub2 string

const (
	CancelDeploymentGitSourceTypeGithub2Github CancelDeploymentGitSourceTypeGithub2 = "github"
)

func (e CancelDeploymentGitSourceTypeGithub2) ToPointer() *CancelDeploymentGitSourceTypeGithub2 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeGithub2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitSourceTypeGithub2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeGithub2: %v", v)
	}
}

type CancelDeploymentGitSourceGithub2 struct {
	Type CancelDeploymentGitSourceTypeGithub2 `json:"type"`
	Org  string                               `json:"org"`
	Repo string                               `json:"repo"`
	Ref  *string                              `json:"ref,omitempty"`
	Sha  *string                              `json:"sha,omitempty"`
	PrID *float64                             `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGithub2) GetType() CancelDeploymentGitSourceTypeGithub2 {
	if o == nil {
		return CancelDeploymentGitSourceTypeGithub2("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithub2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeploymentGitSourceGithub2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeploymentGitSourceGithub2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithub2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithub2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceTypeGithub1 string

const (
	CancelDeploymentGitSourceTypeGithub1Github CancelDeploymentGitSourceTypeGithub1 = "github"
)

func (e CancelDeploymentGitSourceTypeGithub1) ToPointer() *CancelDeploymentGitSourceTypeGithub1 {
	return &e
}
func (e *CancelDeploymentGitSourceTypeGithub1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitSourceTypeGithub1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitSourceTypeGithub1: %v", v)
	}
}

type CancelDeploymentRepoID1Type string

const (
	CancelDeploymentRepoID1TypeStr    CancelDeploymentRepoID1Type = "str"
	CancelDeploymentRepoID1TypeNumber CancelDeploymentRepoID1Type = "number"
)

type CancelDeploymentRepoID1 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentRepoID1Type
}

func CreateCancelDeploymentRepoID1Str(str string) CancelDeploymentRepoID1 {
	typ := CancelDeploymentRepoID1TypeStr

	return CancelDeploymentRepoID1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentRepoID1Number(number float64) CancelDeploymentRepoID1 {
	typ := CancelDeploymentRepoID1TypeNumber

	return CancelDeploymentRepoID1{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentRepoID1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentRepoID1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentRepoID1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRepoID1", string(data))
}

func (u CancelDeploymentRepoID1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRepoID1: all fields are null")
}

type CancelDeploymentGitSourceGithub1 struct {
	Type   CancelDeploymentGitSourceTypeGithub1 `json:"type"`
	RepoID CancelDeploymentRepoID1              `json:"repoId"`
	Ref    *string                              `json:"ref,omitempty"`
	Sha    *string                              `json:"sha,omitempty"`
	PrID   *float64                             `json:"prId,omitempty"`
}

func (o *CancelDeploymentGitSourceGithub1) GetType() CancelDeploymentGitSourceTypeGithub1 {
	if o == nil {
		return CancelDeploymentGitSourceTypeGithub1("")
	}
	return o.Type
}

func (o *CancelDeploymentGitSourceGithub1) GetRepoID() CancelDeploymentRepoID1 {
	if o == nil {
		return CancelDeploymentRepoID1{}
	}
	return o.RepoID
}

func (o *CancelDeploymentGitSourceGithub1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *CancelDeploymentGitSourceGithub1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *CancelDeploymentGitSourceGithub1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type CancelDeploymentGitSourceUnionType string

const (
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub1           CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Github_1"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub2           CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Github_2"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost1 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_GithubCustomHost_1"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost2 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_GithubCustomHost_2"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited1    CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_GithubLimited_1"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited2    CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_GithubLimited_2"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGitlab1           CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Gitlab_1"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket1        CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Bitbucket_1"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket2        CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Bitbucket_2"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceCustom            CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Custom"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub3           CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Github_3"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost3 CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_GithubCustomHost_3"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited3    CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_GithubLimited_3"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGitlab2           CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Gitlab_2"
	CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket3        CancelDeploymentGitSourceUnionType = "cancelDeployment_gitSource_Bitbucket_3"
)

type CancelDeploymentGitSourceUnion struct {
	CancelDeploymentGitSourceGithub1           *CancelDeploymentGitSourceGithub1           `queryParam:"inline"`
	CancelDeploymentGitSourceGithub2           *CancelDeploymentGitSourceGithub2           `queryParam:"inline"`
	CancelDeploymentGitSourceGithubCustomHost1 *CancelDeploymentGitSourceGithubCustomHost1 `queryParam:"inline"`
	CancelDeploymentGitSourceGithubCustomHost2 *CancelDeploymentGitSourceGithubCustomHost2 `queryParam:"inline"`
	CancelDeploymentGitSourceGithubLimited1    *CancelDeploymentGitSourceGithubLimited1    `queryParam:"inline"`
	CancelDeploymentGitSourceGithubLimited2    *CancelDeploymentGitSourceGithubLimited2    `queryParam:"inline"`
	CancelDeploymentGitSourceGitlab1           *CancelDeploymentGitSourceGitlab1           `queryParam:"inline"`
	CancelDeploymentGitSourceBitbucket1        *CancelDeploymentGitSourceBitbucket1        `queryParam:"inline"`
	CancelDeploymentGitSourceBitbucket2        *CancelDeploymentGitSourceBitbucket2        `queryParam:"inline"`
	CancelDeploymentGitSourceCustom            *CancelDeploymentGitSourceCustom            `queryParam:"inline"`
	CancelDeploymentGitSourceGithub3           *CancelDeploymentGitSourceGithub3           `queryParam:"inline"`
	CancelDeploymentGitSourceGithubCustomHost3 *CancelDeploymentGitSourceGithubCustomHost3 `queryParam:"inline"`
	CancelDeploymentGitSourceGithubLimited3    *CancelDeploymentGitSourceGithubLimited3    `queryParam:"inline"`
	CancelDeploymentGitSourceGitlab2           *CancelDeploymentGitSourceGitlab2           `queryParam:"inline"`
	CancelDeploymentGitSourceBitbucket3        *CancelDeploymentGitSourceBitbucket3        `queryParam:"inline"`

	Type CancelDeploymentGitSourceUnionType
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithub1(cancelDeploymentGitSourceGithub1 CancelDeploymentGitSourceGithub1) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub1

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithub1: &cancelDeploymentGitSourceGithub1,
		Type:                             typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithub2(cancelDeploymentGitSourceGithub2 CancelDeploymentGitSourceGithub2) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub2

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithub2: &cancelDeploymentGitSourceGithub2,
		Type:                             typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithubCustomHost1(cancelDeploymentGitSourceGithubCustomHost1 CancelDeploymentGitSourceGithubCustomHost1) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost1

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithubCustomHost1: &cancelDeploymentGitSourceGithubCustomHost1,
		Type: typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithubCustomHost2(cancelDeploymentGitSourceGithubCustomHost2 CancelDeploymentGitSourceGithubCustomHost2) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost2

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithubCustomHost2: &cancelDeploymentGitSourceGithubCustomHost2,
		Type: typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithubLimited1(cancelDeploymentGitSourceGithubLimited1 CancelDeploymentGitSourceGithubLimited1) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited1

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithubLimited1: &cancelDeploymentGitSourceGithubLimited1,
		Type:                                    typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithubLimited2(cancelDeploymentGitSourceGithubLimited2 CancelDeploymentGitSourceGithubLimited2) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited2

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithubLimited2: &cancelDeploymentGitSourceGithubLimited2,
		Type:                                    typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGitlab1(cancelDeploymentGitSourceGitlab1 CancelDeploymentGitSourceGitlab1) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGitlab1

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGitlab1: &cancelDeploymentGitSourceGitlab1,
		Type:                             typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceBitbucket1(cancelDeploymentGitSourceBitbucket1 CancelDeploymentGitSourceBitbucket1) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket1

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceBitbucket1: &cancelDeploymentGitSourceBitbucket1,
		Type:                                typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceBitbucket2(cancelDeploymentGitSourceBitbucket2 CancelDeploymentGitSourceBitbucket2) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket2

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceBitbucket2: &cancelDeploymentGitSourceBitbucket2,
		Type:                                typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceCustom(cancelDeploymentGitSourceCustom CancelDeploymentGitSourceCustom) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceCustom

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceCustom: &cancelDeploymentGitSourceCustom,
		Type:                            typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithub3(cancelDeploymentGitSourceGithub3 CancelDeploymentGitSourceGithub3) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub3

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithub3: &cancelDeploymentGitSourceGithub3,
		Type:                             typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithubCustomHost3(cancelDeploymentGitSourceGithubCustomHost3 CancelDeploymentGitSourceGithubCustomHost3) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost3

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithubCustomHost3: &cancelDeploymentGitSourceGithubCustomHost3,
		Type: typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGithubLimited3(cancelDeploymentGitSourceGithubLimited3 CancelDeploymentGitSourceGithubLimited3) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited3

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGithubLimited3: &cancelDeploymentGitSourceGithubLimited3,
		Type:                                    typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceGitlab2(cancelDeploymentGitSourceGitlab2 CancelDeploymentGitSourceGitlab2) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGitlab2

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceGitlab2: &cancelDeploymentGitSourceGitlab2,
		Type:                             typ,
	}
}

func CreateCancelDeploymentGitSourceUnionCancelDeploymentGitSourceBitbucket3(cancelDeploymentGitSourceBitbucket3 CancelDeploymentGitSourceBitbucket3) CancelDeploymentGitSourceUnion {
	typ := CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket3

	return CancelDeploymentGitSourceUnion{
		CancelDeploymentGitSourceBitbucket3: &cancelDeploymentGitSourceBitbucket3,
		Type:                                typ,
	}
}

func (u *CancelDeploymentGitSourceUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentGitSourceCustom CancelDeploymentGitSourceCustom = CancelDeploymentGitSourceCustom{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceCustom, "", true, true); err == nil {
		u.CancelDeploymentGitSourceCustom = &cancelDeploymentGitSourceCustom
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceCustom
		return nil
	}

	var cancelDeploymentGitSourceGitlab2 CancelDeploymentGitSourceGitlab2 = CancelDeploymentGitSourceGitlab2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGitlab2, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGitlab2 = &cancelDeploymentGitSourceGitlab2
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGitlab2
		return nil
	}

	var cancelDeploymentGitSourceGitlab1 CancelDeploymentGitSourceGitlab1 = CancelDeploymentGitSourceGitlab1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGitlab1, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGitlab1 = &cancelDeploymentGitSourceGitlab1
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGitlab1
		return nil
	}

	var cancelDeploymentGitSourceGithubLimited1 CancelDeploymentGitSourceGithubLimited1 = CancelDeploymentGitSourceGithubLimited1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithubLimited1, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithubLimited1 = &cancelDeploymentGitSourceGithubLimited1
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited1
		return nil
	}

	var cancelDeploymentGitSourceGithub1 CancelDeploymentGitSourceGithub1 = CancelDeploymentGitSourceGithub1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithub1, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithub1 = &cancelDeploymentGitSourceGithub1
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub1
		return nil
	}

	var cancelDeploymentGitSourceGithubLimited2 CancelDeploymentGitSourceGithubLimited2 = CancelDeploymentGitSourceGithubLimited2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithubLimited2, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithubLimited2 = &cancelDeploymentGitSourceGithubLimited2
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited2
		return nil
	}

	var cancelDeploymentGitSourceBitbucket1 CancelDeploymentGitSourceBitbucket1 = CancelDeploymentGitSourceBitbucket1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceBitbucket1, "", true, true); err == nil {
		u.CancelDeploymentGitSourceBitbucket1 = &cancelDeploymentGitSourceBitbucket1
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket1
		return nil
	}

	var cancelDeploymentGitSourceBitbucket2 CancelDeploymentGitSourceBitbucket2 = CancelDeploymentGitSourceBitbucket2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceBitbucket2, "", true, true); err == nil {
		u.CancelDeploymentGitSourceBitbucket2 = &cancelDeploymentGitSourceBitbucket2
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket2
		return nil
	}

	var cancelDeploymentGitSourceGithubCustomHost1 CancelDeploymentGitSourceGithubCustomHost1 = CancelDeploymentGitSourceGithubCustomHost1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithubCustomHost1, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithubCustomHost1 = &cancelDeploymentGitSourceGithubCustomHost1
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost1
		return nil
	}

	var cancelDeploymentGitSourceGithub3 CancelDeploymentGitSourceGithub3 = CancelDeploymentGitSourceGithub3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithub3, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithub3 = &cancelDeploymentGitSourceGithub3
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub3
		return nil
	}

	var cancelDeploymentGitSourceGithubLimited3 CancelDeploymentGitSourceGithubLimited3 = CancelDeploymentGitSourceGithubLimited3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithubLimited3, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithubLimited3 = &cancelDeploymentGitSourceGithubLimited3
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubLimited3
		return nil
	}

	var cancelDeploymentGitSourceGithub2 CancelDeploymentGitSourceGithub2 = CancelDeploymentGitSourceGithub2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithub2, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithub2 = &cancelDeploymentGitSourceGithub2
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithub2
		return nil
	}

	var cancelDeploymentGitSourceGithubCustomHost2 CancelDeploymentGitSourceGithubCustomHost2 = CancelDeploymentGitSourceGithubCustomHost2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithubCustomHost2, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithubCustomHost2 = &cancelDeploymentGitSourceGithubCustomHost2
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost2
		return nil
	}

	var cancelDeploymentGitSourceGithubCustomHost3 CancelDeploymentGitSourceGithubCustomHost3 = CancelDeploymentGitSourceGithubCustomHost3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceGithubCustomHost3, "", true, true); err == nil {
		u.CancelDeploymentGitSourceGithubCustomHost3 = &cancelDeploymentGitSourceGithubCustomHost3
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceGithubCustomHost3
		return nil
	}

	var cancelDeploymentGitSourceBitbucket3 CancelDeploymentGitSourceBitbucket3 = CancelDeploymentGitSourceBitbucket3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitSourceBitbucket3, "", true, true); err == nil {
		u.CancelDeploymentGitSourceBitbucket3 = &cancelDeploymentGitSourceBitbucket3
		u.Type = CancelDeploymentGitSourceUnionTypeCancelDeploymentGitSourceBitbucket3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentGitSourceUnion", string(data))
}

func (u CancelDeploymentGitSourceUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentGitSourceGithub1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithub1, "", true)
	}

	if u.CancelDeploymentGitSourceGithub2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithub2, "", true)
	}

	if u.CancelDeploymentGitSourceGithubCustomHost1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithubCustomHost1, "", true)
	}

	if u.CancelDeploymentGitSourceGithubCustomHost2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithubCustomHost2, "", true)
	}

	if u.CancelDeploymentGitSourceGithubLimited1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithubLimited1, "", true)
	}

	if u.CancelDeploymentGitSourceGithubLimited2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithubLimited2, "", true)
	}

	if u.CancelDeploymentGitSourceGitlab1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGitlab1, "", true)
	}

	if u.CancelDeploymentGitSourceBitbucket1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceBitbucket1, "", true)
	}

	if u.CancelDeploymentGitSourceBitbucket2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceBitbucket2, "", true)
	}

	if u.CancelDeploymentGitSourceCustom != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceCustom, "", true)
	}

	if u.CancelDeploymentGitSourceGithub3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithub3, "", true)
	}

	if u.CancelDeploymentGitSourceGithubCustomHost3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithubCustomHost3, "", true)
	}

	if u.CancelDeploymentGitSourceGithubLimited3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGithubLimited3, "", true)
	}

	if u.CancelDeploymentGitSourceGitlab2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceGitlab2, "", true)
	}

	if u.CancelDeploymentGitSourceBitbucket3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitSourceBitbucket3, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentGitSourceUnion: all fields are null")
}

// CancelDeploymentNodeVersion - If set it overrides the `projectSettings.nodeVersion` for this deployment.
type CancelDeploymentNodeVersion string

const (
	CancelDeploymentNodeVersionTwentyTwoDotX  CancelDeploymentNodeVersion = "22.x"
	CancelDeploymentNodeVersionTwentyDotX     CancelDeploymentNodeVersion = "20.x"
	CancelDeploymentNodeVersionEighteenDotX   CancelDeploymentNodeVersion = "18.x"
	CancelDeploymentNodeVersionSixteenDotX    CancelDeploymentNodeVersion = "16.x"
	CancelDeploymentNodeVersionFourteenDotX   CancelDeploymentNodeVersion = "14.x"
	CancelDeploymentNodeVersionTwelveDotX     CancelDeploymentNodeVersion = "12.x"
	CancelDeploymentNodeVersionTenDotX        CancelDeploymentNodeVersion = "10.x"
	CancelDeploymentNodeVersionEightDot10DotX CancelDeploymentNodeVersion = "8.10.x"
)

func (e CancelDeploymentNodeVersion) ToPointer() *CancelDeploymentNodeVersion {
	return &e
}
func (e *CancelDeploymentNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = CancelDeploymentNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentNodeVersion: %v", v)
	}
}

type CancelDeploymentProject struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *CancelDeploymentProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

type CancelDeploymentReadyState string

const (
	CancelDeploymentReadyStateBuilding     CancelDeploymentReadyState = "BUILDING"
	CancelDeploymentReadyStateError        CancelDeploymentReadyState = "ERROR"
	CancelDeploymentReadyStateInitializing CancelDeploymentReadyState = "INITIALIZING"
	CancelDeploymentReadyStateQueued       CancelDeploymentReadyState = "QUEUED"
	CancelDeploymentReadyStateReady        CancelDeploymentReadyState = "READY"
	CancelDeploymentReadyStateCanceled     CancelDeploymentReadyState = "CANCELED"
)

func (e CancelDeploymentReadyState) ToPointer() *CancelDeploymentReadyState {
	return &e
}
func (e *CancelDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CancelDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentReadyState: %v", v)
	}
}

// CancelDeploymentReadySubstate - Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
type CancelDeploymentReadySubstate string

const (
	CancelDeploymentReadySubstateStaged   CancelDeploymentReadySubstate = "STAGED"
	CancelDeploymentReadySubstateRolling  CancelDeploymentReadySubstate = "ROLLING"
	CancelDeploymentReadySubstatePromoted CancelDeploymentReadySubstate = "PROMOTED"
)

func (e CancelDeploymentReadySubstate) ToPointer() *CancelDeploymentReadySubstate {
	return &e
}
func (e *CancelDeploymentReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = CancelDeploymentReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentReadySubstate: %v", v)
	}
}

type CancelDeploymentSource string

const (
	CancelDeploymentSourceAPITriggerGitDeploy CancelDeploymentSource = "api-trigger-git-deploy"
	CancelDeploymentSourceCli                 CancelDeploymentSource = "cli"
	CancelDeploymentSourceCloneRepo           CancelDeploymentSource = "clone/repo"
	CancelDeploymentSourceGit                 CancelDeploymentSource = "git"
	CancelDeploymentSourceImport              CancelDeploymentSource = "import"
	CancelDeploymentSourceImportRepo          CancelDeploymentSource = "import/repo"
	CancelDeploymentSourceRedeploy            CancelDeploymentSource = "redeploy"
	CancelDeploymentSourceV0Web               CancelDeploymentSource = "v0-web"
)

func (e CancelDeploymentSource) ToPointer() *CancelDeploymentSource {
	return &e
}
func (e *CancelDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = CancelDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentSource: %v", v)
	}
}

type CancelDeploymentTargetEnum string

const (
	CancelDeploymentTargetEnumStaging    CancelDeploymentTargetEnum = "staging"
	CancelDeploymentTargetEnumProduction CancelDeploymentTargetEnum = "production"
)

func (e CancelDeploymentTargetEnum) ToPointer() *CancelDeploymentTargetEnum {
	return &e
}
func (e *CancelDeploymentTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CancelDeploymentTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTargetEnum: %v", v)
	}
}

type CancelDeploymentType string

const (
	CancelDeploymentTypeLambdas CancelDeploymentType = "LAMBDAS"
)

func (e CancelDeploymentType) ToPointer() *CancelDeploymentType {
	return &e
}
func (e *CancelDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CancelDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentType: %v", v)
	}
}

type CancelDeploymentOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *CancelDeploymentOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *CancelDeploymentOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *CancelDeploymentOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *CancelDeploymentOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *CancelDeploymentOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeploymentOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CancelDeploymentOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *CancelDeploymentOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CancelDeploymentOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type CancelDeploymentCron struct {
	Schedule string `json:"schedule"`
	Path     string `json:"path"`
}

func (o *CancelDeploymentCron) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

func (o *CancelDeploymentCron) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type CancelDeploymentArchitecture string

const (
	CancelDeploymentArchitectureX8664 CancelDeploymentArchitecture = "x86_64"
	CancelDeploymentArchitectureArm64 CancelDeploymentArchitecture = "arm64"
)

func (e CancelDeploymentArchitecture) ToPointer() *CancelDeploymentArchitecture {
	return &e
}
func (e *CancelDeploymentArchitecture) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "x86_64":
		fallthrough
	case "arm64":
		*e = CancelDeploymentArchitecture(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentArchitecture: %v", v)
	}
}

// CancelDeploymentFunctionsType - Event type - must be "queue/v1beta" (REQUIRED)
type CancelDeploymentFunctionsType string

const (
	CancelDeploymentFunctionsTypeQueueV1beta CancelDeploymentFunctionsType = "queue/v1beta"
)

func (e CancelDeploymentFunctionsType) ToPointer() *CancelDeploymentFunctionsType {
	return &e
}
func (e *CancelDeploymentFunctionsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "queue/v1beta":
		*e = CancelDeploymentFunctionsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentFunctionsType: %v", v)
	}
}

// CancelDeploymentExperimentalTrigger - Queue trigger event for Vercel's queue system. Handles "queue/v1beta" events with queue-specific configuration.
type CancelDeploymentExperimentalTrigger struct {
	// Event type - must be "queue/v1beta" (REQUIRED)
	Type CancelDeploymentFunctionsType `json:"type"`
	// Name of the queue topic to consume from (REQUIRED)
	Topic string `json:"topic"`
	// Name of the consumer group for this trigger (REQUIRED)
	Consumer string `json:"consumer"`
	// Maximum number of delivery attempts for message processing (OPTIONAL) This represents the total number of times a message can be delivered, not the number of retries. Must be at least 1 if specified. Behavior when not specified depends on the server's default configuration.
	MaxDeliveries *float64 `json:"maxDeliveries,omitempty"`
	// Delay in seconds before retrying failed executions (OPTIONAL) Behavior when not specified depends on the server's default configuration.
	RetryAfterSeconds *float64 `json:"retryAfterSeconds,omitempty"`
	// Initial delay in seconds before first execution attempt (OPTIONAL) Must be 0 or greater. Use 0 for no initial delay. Behavior when not specified depends on the server's default configuration.
	InitialDelaySeconds *float64 `json:"initialDelaySeconds,omitempty"`
}

func (o *CancelDeploymentExperimentalTrigger) GetType() CancelDeploymentFunctionsType {
	if o == nil {
		return CancelDeploymentFunctionsType("")
	}
	return o.Type
}

func (o *CancelDeploymentExperimentalTrigger) GetTopic() string {
	if o == nil {
		return ""
	}
	return o.Topic
}

func (o *CancelDeploymentExperimentalTrigger) GetConsumer() string {
	if o == nil {
		return ""
	}
	return o.Consumer
}

func (o *CancelDeploymentExperimentalTrigger) GetMaxDeliveries() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDeliveries
}

func (o *CancelDeploymentExperimentalTrigger) GetRetryAfterSeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.RetryAfterSeconds
}

func (o *CancelDeploymentExperimentalTrigger) GetInitialDelaySeconds() *float64 {
	if o == nil {
		return nil
	}
	return o.InitialDelaySeconds
}

type CancelDeploymentFunctions struct {
	Architecture         *CancelDeploymentArchitecture         `json:"architecture,omitempty"`
	Memory               *float64                              `json:"memory,omitempty"`
	MaxDuration          *float64                              `json:"maxDuration,omitempty"`
	Runtime              *string                               `json:"runtime,omitempty"`
	IncludeFiles         *string                               `json:"includeFiles,omitempty"`
	ExcludeFiles         *string                               `json:"excludeFiles,omitempty"`
	ExperimentalTriggers []CancelDeploymentExperimentalTrigger `json:"experimentalTriggers,omitempty"`
}

func (o *CancelDeploymentFunctions) GetArchitecture() *CancelDeploymentArchitecture {
	if o == nil {
		return nil
	}
	return o.Architecture
}

func (o *CancelDeploymentFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *CancelDeploymentFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *CancelDeploymentFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *CancelDeploymentFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *CancelDeploymentFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

func (o *CancelDeploymentFunctions) GetExperimentalTriggers() []CancelDeploymentExperimentalTrigger {
	if o == nil {
		return nil
	}
	return o.ExperimentalTriggers
}

type CancelDeploymentPlan string

const (
	CancelDeploymentPlanPro        CancelDeploymentPlan = "pro"
	CancelDeploymentPlanEnterprise CancelDeploymentPlan = "enterprise"
	CancelDeploymentPlanHobby      CancelDeploymentPlan = "hobby"
)

func (e CancelDeploymentPlan) ToPointer() *CancelDeploymentPlan {
	return &e
}
func (e *CancelDeploymentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CancelDeploymentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentPlan: %v", v)
	}
}

type CancelDeploymentRoute3 struct {
	Src        string  `json:"src"`
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
}

func (o *CancelDeploymentRoute3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CancelDeploymentRoute3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *CancelDeploymentRoute3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

type CancelDeploymentHandle string

const (
	CancelDeploymentHandleFilesystem CancelDeploymentHandle = "filesystem"
	CancelDeploymentHandleError      CancelDeploymentHandle = "error"
	CancelDeploymentHandleHit        CancelDeploymentHandle = "hit"
	CancelDeploymentHandleMiss       CancelDeploymentHandle = "miss"
	CancelDeploymentHandleResource   CancelDeploymentHandle = "resource"
	CancelDeploymentHandleRewrite    CancelDeploymentHandle = "rewrite"
)

func (e CancelDeploymentHandle) ToPointer() *CancelDeploymentHandle {
	return &e
}
func (e *CancelDeploymentHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "filesystem":
		fallthrough
	case "error":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "resource":
		fallthrough
	case "rewrite":
		*e = CancelDeploymentHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentHandle: %v", v)
	}
}

type CancelDeploymentRoute2 struct {
	Handle CancelDeploymentHandle `json:"handle"`
	Src    *string                `json:"src,omitempty"`
	Dest   *string                `json:"dest,omitempty"`
	Status *float64               `json:"status,omitempty"`
}

func (o *CancelDeploymentRoute2) GetHandle() CancelDeploymentHandle {
	if o == nil {
		return CancelDeploymentHandle("")
	}
	return o.Handle
}

func (o *CancelDeploymentRoute2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CancelDeploymentRoute2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CancelDeploymentRoute2) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type CancelDeploymentHasType string

const (
	CancelDeploymentHasTypeHeader CancelDeploymentHasType = "header"
	CancelDeploymentHasTypeCookie CancelDeploymentHasType = "cookie"
	CancelDeploymentHasTypeQuery  CancelDeploymentHasType = "query"
)

func (e CancelDeploymentHasType) ToPointer() *CancelDeploymentHasType {
	return &e
}
func (e *CancelDeploymentHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CancelDeploymentHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentHasType: %v", v)
	}
}

type CancelDeploymentHasEq2Type string

const (
	CancelDeploymentHasEq2TypeStr    CancelDeploymentHasEq2Type = "str"
	CancelDeploymentHasEq2TypeNumber CancelDeploymentHasEq2Type = "number"
)

type CancelDeploymentHasEq2 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentHasEq2Type
}

func CreateCancelDeploymentHasEq2Str(str string) CancelDeploymentHasEq2 {
	typ := CancelDeploymentHasEq2TypeStr

	return CancelDeploymentHasEq2{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentHasEq2Number(number float64) CancelDeploymentHasEq2 {
	typ := CancelDeploymentHasEq2TypeNumber

	return CancelDeploymentHasEq2{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentHasEq2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentHasEq2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentHasEq2TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentHasEq2", string(data))
}

func (u CancelDeploymentHasEq2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentHasEq2: all fields are null")
}

type CancelDeploymentHasValue2 struct {
	Eq   *CancelDeploymentHasEq2 `json:"eq,omitempty"`
	Neq  *string                 `json:"neq,omitempty"`
	Inc  []string                `json:"inc,omitempty"`
	Ninc []string                `json:"ninc,omitempty"`
	Pre  *string                 `json:"pre,omitempty"`
	Suf  *string                 `json:"suf,omitempty"`
	Re   *string                 `json:"re,omitempty"`
	Gt   *float64                `json:"gt,omitempty"`
	Gte  *float64                `json:"gte,omitempty"`
	Lt   *float64                `json:"lt,omitempty"`
	Lte  *float64                `json:"lte,omitempty"`
}

func (o *CancelDeploymentHasValue2) GetEq() *CancelDeploymentHasEq2 {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CancelDeploymentHasValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CancelDeploymentHasValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CancelDeploymentHasValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CancelDeploymentHasValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CancelDeploymentHasValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CancelDeploymentHasValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CancelDeploymentHasValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CancelDeploymentHasValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CancelDeploymentHasValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CancelDeploymentHasValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CancelDeploymentHasValueUnion2Type string

const (
	CancelDeploymentHasValueUnion2TypeStr                       CancelDeploymentHasValueUnion2Type = "str"
	CancelDeploymentHasValueUnion2TypeCancelDeploymentHasValue2 CancelDeploymentHasValueUnion2Type = "cancelDeployment_has_value_2"
)

type CancelDeploymentHasValueUnion2 struct {
	Str                       *string                    `queryParam:"inline"`
	CancelDeploymentHasValue2 *CancelDeploymentHasValue2 `queryParam:"inline"`

	Type CancelDeploymentHasValueUnion2Type
}

func CreateCancelDeploymentHasValueUnion2Str(str string) CancelDeploymentHasValueUnion2 {
	typ := CancelDeploymentHasValueUnion2TypeStr

	return CancelDeploymentHasValueUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentHasValueUnion2CancelDeploymentHasValue2(cancelDeploymentHasValue2 CancelDeploymentHasValue2) CancelDeploymentHasValueUnion2 {
	typ := CancelDeploymentHasValueUnion2TypeCancelDeploymentHasValue2

	return CancelDeploymentHasValueUnion2{
		CancelDeploymentHasValue2: &cancelDeploymentHasValue2,
		Type:                      typ,
	}
}

func (u *CancelDeploymentHasValueUnion2) UnmarshalJSON(data []byte) error {

	var cancelDeploymentHasValue2 CancelDeploymentHasValue2 = CancelDeploymentHasValue2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentHasValue2, "", true, true); err == nil {
		u.CancelDeploymentHasValue2 = &cancelDeploymentHasValue2
		u.Type = CancelDeploymentHasValueUnion2TypeCancelDeploymentHasValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentHasValueUnion2TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentHasValueUnion2", string(data))
}

func (u CancelDeploymentHasValueUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CancelDeploymentHasValue2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentHasValue2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentHasValueUnion2: all fields are null")
}

type CancelDeploymentHas struct {
	Type  CancelDeploymentHasType         `json:"type"`
	Key   string                          `json:"key"`
	Value *CancelDeploymentHasValueUnion2 `json:"value,omitempty"`
}

func (o *CancelDeploymentHas) GetType() CancelDeploymentHasType {
	if o == nil {
		return CancelDeploymentHasType("")
	}
	return o.Type
}

func (o *CancelDeploymentHas) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CancelDeploymentHas) GetValue() *CancelDeploymentHasValueUnion2 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CancelDeploymentHasTypeHost string

const (
	CancelDeploymentHasTypeHostHost CancelDeploymentHasTypeHost = "host"
)

func (e CancelDeploymentHasTypeHost) ToPointer() *CancelDeploymentHasTypeHost {
	return &e
}
func (e *CancelDeploymentHasTypeHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CancelDeploymentHasTypeHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentHasTypeHost: %v", v)
	}
}

type CancelDeploymentHasEq1Type string

const (
	CancelDeploymentHasEq1TypeStr    CancelDeploymentHasEq1Type = "str"
	CancelDeploymentHasEq1TypeNumber CancelDeploymentHasEq1Type = "number"
)

type CancelDeploymentHasEq1 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentHasEq1Type
}

func CreateCancelDeploymentHasEq1Str(str string) CancelDeploymentHasEq1 {
	typ := CancelDeploymentHasEq1TypeStr

	return CancelDeploymentHasEq1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentHasEq1Number(number float64) CancelDeploymentHasEq1 {
	typ := CancelDeploymentHasEq1TypeNumber

	return CancelDeploymentHasEq1{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentHasEq1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentHasEq1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentHasEq1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentHasEq1", string(data))
}

func (u CancelDeploymentHasEq1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentHasEq1: all fields are null")
}

type CancelDeploymentHasValue1 struct {
	Eq   *CancelDeploymentHasEq1 `json:"eq,omitempty"`
	Neq  *string                 `json:"neq,omitempty"`
	Inc  []string                `json:"inc,omitempty"`
	Ninc []string                `json:"ninc,omitempty"`
	Pre  *string                 `json:"pre,omitempty"`
	Suf  *string                 `json:"suf,omitempty"`
	Re   *string                 `json:"re,omitempty"`
	Gt   *float64                `json:"gt,omitempty"`
	Gte  *float64                `json:"gte,omitempty"`
	Lt   *float64                `json:"lt,omitempty"`
	Lte  *float64                `json:"lte,omitempty"`
}

func (o *CancelDeploymentHasValue1) GetEq() *CancelDeploymentHasEq1 {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CancelDeploymentHasValue1) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CancelDeploymentHasValue1) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CancelDeploymentHasValue1) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CancelDeploymentHasValue1) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CancelDeploymentHasValue1) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CancelDeploymentHasValue1) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CancelDeploymentHasValue1) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CancelDeploymentHasValue1) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CancelDeploymentHasValue1) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CancelDeploymentHasValue1) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CancelDeploymentHasValueUnion1Type string

const (
	CancelDeploymentHasValueUnion1TypeStr                       CancelDeploymentHasValueUnion1Type = "str"
	CancelDeploymentHasValueUnion1TypeCancelDeploymentHasValue1 CancelDeploymentHasValueUnion1Type = "cancelDeployment_has_value_1"
)

type CancelDeploymentHasValueUnion1 struct {
	Str                       *string                    `queryParam:"inline"`
	CancelDeploymentHasValue1 *CancelDeploymentHasValue1 `queryParam:"inline"`

	Type CancelDeploymentHasValueUnion1Type
}

func CreateCancelDeploymentHasValueUnion1Str(str string) CancelDeploymentHasValueUnion1 {
	typ := CancelDeploymentHasValueUnion1TypeStr

	return CancelDeploymentHasValueUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentHasValueUnion1CancelDeploymentHasValue1(cancelDeploymentHasValue1 CancelDeploymentHasValue1) CancelDeploymentHasValueUnion1 {
	typ := CancelDeploymentHasValueUnion1TypeCancelDeploymentHasValue1

	return CancelDeploymentHasValueUnion1{
		CancelDeploymentHasValue1: &cancelDeploymentHasValue1,
		Type:                      typ,
	}
}

func (u *CancelDeploymentHasValueUnion1) UnmarshalJSON(data []byte) error {

	var cancelDeploymentHasValue1 CancelDeploymentHasValue1 = CancelDeploymentHasValue1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentHasValue1, "", true, true); err == nil {
		u.CancelDeploymentHasValue1 = &cancelDeploymentHasValue1
		u.Type = CancelDeploymentHasValueUnion1TypeCancelDeploymentHasValue1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentHasValueUnion1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentHasValueUnion1", string(data))
}

func (u CancelDeploymentHasValueUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CancelDeploymentHasValue1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentHasValue1, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentHasValueUnion1: all fields are null")
}

type CancelDeploymentHasHost struct {
	Type  CancelDeploymentHasTypeHost    `json:"type"`
	Value CancelDeploymentHasValueUnion1 `json:"value"`
}

func (o *CancelDeploymentHasHost) GetType() CancelDeploymentHasTypeHost {
	if o == nil {
		return CancelDeploymentHasTypeHost("")
	}
	return o.Type
}

func (o *CancelDeploymentHasHost) GetValue() CancelDeploymentHasValueUnion1 {
	if o == nil {
		return CancelDeploymentHasValueUnion1{}
	}
	return o.Value
}

type CancelDeploymentHasUnionType string

const (
	CancelDeploymentHasUnionTypeCancelDeploymentHasHost CancelDeploymentHasUnionType = "cancelDeployment_has_Host"
	CancelDeploymentHasUnionTypeCancelDeploymentHas     CancelDeploymentHasUnionType = "cancelDeployment_has"
)

type CancelDeploymentHasUnion struct {
	CancelDeploymentHasHost *CancelDeploymentHasHost `queryParam:"inline"`
	CancelDeploymentHas     *CancelDeploymentHas     `queryParam:"inline"`

	Type CancelDeploymentHasUnionType
}

func CreateCancelDeploymentHasUnionCancelDeploymentHasHost(cancelDeploymentHasHost CancelDeploymentHasHost) CancelDeploymentHasUnion {
	typ := CancelDeploymentHasUnionTypeCancelDeploymentHasHost

	return CancelDeploymentHasUnion{
		CancelDeploymentHasHost: &cancelDeploymentHasHost,
		Type:                    typ,
	}
}

func CreateCancelDeploymentHasUnionCancelDeploymentHas(cancelDeploymentHas CancelDeploymentHas) CancelDeploymentHasUnion {
	typ := CancelDeploymentHasUnionTypeCancelDeploymentHas

	return CancelDeploymentHasUnion{
		CancelDeploymentHas: &cancelDeploymentHas,
		Type:                typ,
	}
}

func (u *CancelDeploymentHasUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentHasHost CancelDeploymentHasHost = CancelDeploymentHasHost{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentHasHost, "", true, true); err == nil {
		u.CancelDeploymentHasHost = &cancelDeploymentHasHost
		u.Type = CancelDeploymentHasUnionTypeCancelDeploymentHasHost
		return nil
	}

	var cancelDeploymentHas CancelDeploymentHas = CancelDeploymentHas{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentHas, "", true, true); err == nil {
		u.CancelDeploymentHas = &cancelDeploymentHas
		u.Type = CancelDeploymentHasUnionTypeCancelDeploymentHas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentHasUnion", string(data))
}

func (u CancelDeploymentHasUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentHasHost != nil {
		return utils.MarshalJSON(u.CancelDeploymentHasHost, "", true)
	}

	if u.CancelDeploymentHas != nil {
		return utils.MarshalJSON(u.CancelDeploymentHas, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentHasUnion: all fields are null")
}

type CancelDeploymentMissingType string

const (
	CancelDeploymentMissingTypeHeader CancelDeploymentMissingType = "header"
	CancelDeploymentMissingTypeCookie CancelDeploymentMissingType = "cookie"
	CancelDeploymentMissingTypeQuery  CancelDeploymentMissingType = "query"
)

func (e CancelDeploymentMissingType) ToPointer() *CancelDeploymentMissingType {
	return &e
}
func (e *CancelDeploymentMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = CancelDeploymentMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentMissingType: %v", v)
	}
}

type CancelDeploymentMissingEq2Type string

const (
	CancelDeploymentMissingEq2TypeStr    CancelDeploymentMissingEq2Type = "str"
	CancelDeploymentMissingEq2TypeNumber CancelDeploymentMissingEq2Type = "number"
)

type CancelDeploymentMissingEq2 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentMissingEq2Type
}

func CreateCancelDeploymentMissingEq2Str(str string) CancelDeploymentMissingEq2 {
	typ := CancelDeploymentMissingEq2TypeStr

	return CancelDeploymentMissingEq2{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentMissingEq2Number(number float64) CancelDeploymentMissingEq2 {
	typ := CancelDeploymentMissingEq2TypeNumber

	return CancelDeploymentMissingEq2{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentMissingEq2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentMissingEq2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentMissingEq2TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentMissingEq2", string(data))
}

func (u CancelDeploymentMissingEq2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentMissingEq2: all fields are null")
}

type CancelDeploymentMissingValue2 struct {
	Eq   *CancelDeploymentMissingEq2 `json:"eq,omitempty"`
	Neq  *string                     `json:"neq,omitempty"`
	Inc  []string                    `json:"inc,omitempty"`
	Ninc []string                    `json:"ninc,omitempty"`
	Pre  *string                     `json:"pre,omitempty"`
	Suf  *string                     `json:"suf,omitempty"`
	Re   *string                     `json:"re,omitempty"`
	Gt   *float64                    `json:"gt,omitempty"`
	Gte  *float64                    `json:"gte,omitempty"`
	Lt   *float64                    `json:"lt,omitempty"`
	Lte  *float64                    `json:"lte,omitempty"`
}

func (o *CancelDeploymentMissingValue2) GetEq() *CancelDeploymentMissingEq2 {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CancelDeploymentMissingValue2) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CancelDeploymentMissingValue2) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CancelDeploymentMissingValue2) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CancelDeploymentMissingValue2) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CancelDeploymentMissingValue2) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CancelDeploymentMissingValue2) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CancelDeploymentMissingValue2) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CancelDeploymentMissingValue2) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CancelDeploymentMissingValue2) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CancelDeploymentMissingValue2) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CancelDeploymentMissingValueUnion2Type string

const (
	CancelDeploymentMissingValueUnion2TypeStr                           CancelDeploymentMissingValueUnion2Type = "str"
	CancelDeploymentMissingValueUnion2TypeCancelDeploymentMissingValue2 CancelDeploymentMissingValueUnion2Type = "cancelDeployment_missing_value_2"
)

type CancelDeploymentMissingValueUnion2 struct {
	Str                           *string                        `queryParam:"inline"`
	CancelDeploymentMissingValue2 *CancelDeploymentMissingValue2 `queryParam:"inline"`

	Type CancelDeploymentMissingValueUnion2Type
}

func CreateCancelDeploymentMissingValueUnion2Str(str string) CancelDeploymentMissingValueUnion2 {
	typ := CancelDeploymentMissingValueUnion2TypeStr

	return CancelDeploymentMissingValueUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentMissingValueUnion2CancelDeploymentMissingValue2(cancelDeploymentMissingValue2 CancelDeploymentMissingValue2) CancelDeploymentMissingValueUnion2 {
	typ := CancelDeploymentMissingValueUnion2TypeCancelDeploymentMissingValue2

	return CancelDeploymentMissingValueUnion2{
		CancelDeploymentMissingValue2: &cancelDeploymentMissingValue2,
		Type:                          typ,
	}
}

func (u *CancelDeploymentMissingValueUnion2) UnmarshalJSON(data []byte) error {

	var cancelDeploymentMissingValue2 CancelDeploymentMissingValue2 = CancelDeploymentMissingValue2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMissingValue2, "", true, true); err == nil {
		u.CancelDeploymentMissingValue2 = &cancelDeploymentMissingValue2
		u.Type = CancelDeploymentMissingValueUnion2TypeCancelDeploymentMissingValue2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentMissingValueUnion2TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentMissingValueUnion2", string(data))
}

func (u CancelDeploymentMissingValueUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CancelDeploymentMissingValue2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentMissingValue2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentMissingValueUnion2: all fields are null")
}

type CancelDeploymentMissing struct {
	Type  CancelDeploymentMissingType         `json:"type"`
	Key   string                              `json:"key"`
	Value *CancelDeploymentMissingValueUnion2 `json:"value,omitempty"`
}

func (o *CancelDeploymentMissing) GetType() CancelDeploymentMissingType {
	if o == nil {
		return CancelDeploymentMissingType("")
	}
	return o.Type
}

func (o *CancelDeploymentMissing) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CancelDeploymentMissing) GetValue() *CancelDeploymentMissingValueUnion2 {
	if o == nil {
		return nil
	}
	return o.Value
}

type CancelDeploymentMissingTypeHost string

const (
	CancelDeploymentMissingTypeHostHost CancelDeploymentMissingTypeHost = "host"
)

func (e CancelDeploymentMissingTypeHost) ToPointer() *CancelDeploymentMissingTypeHost {
	return &e
}
func (e *CancelDeploymentMissingTypeHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = CancelDeploymentMissingTypeHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentMissingTypeHost: %v", v)
	}
}

type CancelDeploymentMissingEq1Type string

const (
	CancelDeploymentMissingEq1TypeStr    CancelDeploymentMissingEq1Type = "str"
	CancelDeploymentMissingEq1TypeNumber CancelDeploymentMissingEq1Type = "number"
)

type CancelDeploymentMissingEq1 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentMissingEq1Type
}

func CreateCancelDeploymentMissingEq1Str(str string) CancelDeploymentMissingEq1 {
	typ := CancelDeploymentMissingEq1TypeStr

	return CancelDeploymentMissingEq1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentMissingEq1Number(number float64) CancelDeploymentMissingEq1 {
	typ := CancelDeploymentMissingEq1TypeNumber

	return CancelDeploymentMissingEq1{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentMissingEq1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentMissingEq1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentMissingEq1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentMissingEq1", string(data))
}

func (u CancelDeploymentMissingEq1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentMissingEq1: all fields are null")
}

type CancelDeploymentMissingValue1 struct {
	Eq   *CancelDeploymentMissingEq1 `json:"eq,omitempty"`
	Neq  *string                     `json:"neq,omitempty"`
	Inc  []string                    `json:"inc,omitempty"`
	Ninc []string                    `json:"ninc,omitempty"`
	Pre  *string                     `json:"pre,omitempty"`
	Suf  *string                     `json:"suf,omitempty"`
	Re   *string                     `json:"re,omitempty"`
	Gt   *float64                    `json:"gt,omitempty"`
	Gte  *float64                    `json:"gte,omitempty"`
	Lt   *float64                    `json:"lt,omitempty"`
	Lte  *float64                    `json:"lte,omitempty"`
}

func (o *CancelDeploymentMissingValue1) GetEq() *CancelDeploymentMissingEq1 {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CancelDeploymentMissingValue1) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CancelDeploymentMissingValue1) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CancelDeploymentMissingValue1) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CancelDeploymentMissingValue1) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CancelDeploymentMissingValue1) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CancelDeploymentMissingValue1) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CancelDeploymentMissingValue1) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CancelDeploymentMissingValue1) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CancelDeploymentMissingValue1) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CancelDeploymentMissingValue1) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CancelDeploymentMissingValueUnion1Type string

const (
	CancelDeploymentMissingValueUnion1TypeStr                           CancelDeploymentMissingValueUnion1Type = "str"
	CancelDeploymentMissingValueUnion1TypeCancelDeploymentMissingValue1 CancelDeploymentMissingValueUnion1Type = "cancelDeployment_missing_value_1"
)

type CancelDeploymentMissingValueUnion1 struct {
	Str                           *string                        `queryParam:"inline"`
	CancelDeploymentMissingValue1 *CancelDeploymentMissingValue1 `queryParam:"inline"`

	Type CancelDeploymentMissingValueUnion1Type
}

func CreateCancelDeploymentMissingValueUnion1Str(str string) CancelDeploymentMissingValueUnion1 {
	typ := CancelDeploymentMissingValueUnion1TypeStr

	return CancelDeploymentMissingValueUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentMissingValueUnion1CancelDeploymentMissingValue1(cancelDeploymentMissingValue1 CancelDeploymentMissingValue1) CancelDeploymentMissingValueUnion1 {
	typ := CancelDeploymentMissingValueUnion1TypeCancelDeploymentMissingValue1

	return CancelDeploymentMissingValueUnion1{
		CancelDeploymentMissingValue1: &cancelDeploymentMissingValue1,
		Type:                          typ,
	}
}

func (u *CancelDeploymentMissingValueUnion1) UnmarshalJSON(data []byte) error {

	var cancelDeploymentMissingValue1 CancelDeploymentMissingValue1 = CancelDeploymentMissingValue1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMissingValue1, "", true, true); err == nil {
		u.CancelDeploymentMissingValue1 = &cancelDeploymentMissingValue1
		u.Type = CancelDeploymentMissingValueUnion1TypeCancelDeploymentMissingValue1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentMissingValueUnion1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentMissingValueUnion1", string(data))
}

func (u CancelDeploymentMissingValueUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CancelDeploymentMissingValue1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentMissingValue1, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentMissingValueUnion1: all fields are null")
}

type CancelDeploymentMissingHost struct {
	Type  CancelDeploymentMissingTypeHost    `json:"type"`
	Value CancelDeploymentMissingValueUnion1 `json:"value"`
}

func (o *CancelDeploymentMissingHost) GetType() CancelDeploymentMissingTypeHost {
	if o == nil {
		return CancelDeploymentMissingTypeHost("")
	}
	return o.Type
}

func (o *CancelDeploymentMissingHost) GetValue() CancelDeploymentMissingValueUnion1 {
	if o == nil {
		return CancelDeploymentMissingValueUnion1{}
	}
	return o.Value
}

type CancelDeploymentMissingUnionType string

const (
	CancelDeploymentMissingUnionTypeCancelDeploymentMissingHost CancelDeploymentMissingUnionType = "cancelDeployment_missing_Host"
	CancelDeploymentMissingUnionTypeCancelDeploymentMissing     CancelDeploymentMissingUnionType = "cancelDeployment_missing"
)

type CancelDeploymentMissingUnion struct {
	CancelDeploymentMissingHost *CancelDeploymentMissingHost `queryParam:"inline"`
	CancelDeploymentMissing     *CancelDeploymentMissing     `queryParam:"inline"`

	Type CancelDeploymentMissingUnionType
}

func CreateCancelDeploymentMissingUnionCancelDeploymentMissingHost(cancelDeploymentMissingHost CancelDeploymentMissingHost) CancelDeploymentMissingUnion {
	typ := CancelDeploymentMissingUnionTypeCancelDeploymentMissingHost

	return CancelDeploymentMissingUnion{
		CancelDeploymentMissingHost: &cancelDeploymentMissingHost,
		Type:                        typ,
	}
}

func CreateCancelDeploymentMissingUnionCancelDeploymentMissing(cancelDeploymentMissing CancelDeploymentMissing) CancelDeploymentMissingUnion {
	typ := CancelDeploymentMissingUnionTypeCancelDeploymentMissing

	return CancelDeploymentMissingUnion{
		CancelDeploymentMissing: &cancelDeploymentMissing,
		Type:                    typ,
	}
}

func (u *CancelDeploymentMissingUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentMissingHost CancelDeploymentMissingHost = CancelDeploymentMissingHost{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMissingHost, "", true, true); err == nil {
		u.CancelDeploymentMissingHost = &cancelDeploymentMissingHost
		u.Type = CancelDeploymentMissingUnionTypeCancelDeploymentMissingHost
		return nil
	}

	var cancelDeploymentMissing CancelDeploymentMissing = CancelDeploymentMissing{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMissing, "", true, true); err == nil {
		u.CancelDeploymentMissing = &cancelDeploymentMissing
		u.Type = CancelDeploymentMissingUnionTypeCancelDeploymentMissing
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentMissingUnion", string(data))
}

func (u CancelDeploymentMissingUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentMissingHost != nil {
		return utils.MarshalJSON(u.CancelDeploymentMissingHost, "", true)
	}

	if u.CancelDeploymentMissing != nil {
		return utils.MarshalJSON(u.CancelDeploymentMissing, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentMissingUnion: all fields are null")
}

type CancelDeploymentAction string

const (
	CancelDeploymentActionChallenge CancelDeploymentAction = "challenge"
	CancelDeploymentActionDeny      CancelDeploymentAction = "deny"
)

func (e CancelDeploymentAction) ToPointer() *CancelDeploymentAction {
	return &e
}
func (e *CancelDeploymentAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "challenge":
		fallthrough
	case "deny":
		*e = CancelDeploymentAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentAction: %v", v)
	}
}

type CancelDeploymentMitigate struct {
	Action CancelDeploymentAction `json:"action"`
}

func (o *CancelDeploymentMitigate) GetAction() CancelDeploymentAction {
	if o == nil {
		return CancelDeploymentAction("")
	}
	return o.Action
}

type CancelDeploymentTransformType string

const (
	CancelDeploymentTransformTypeRequestHeaders  CancelDeploymentTransformType = "request.headers"
	CancelDeploymentTransformTypeRequestQuery    CancelDeploymentTransformType = "request.query"
	CancelDeploymentTransformTypeResponseHeaders CancelDeploymentTransformType = "response.headers"
)

func (e CancelDeploymentTransformType) ToPointer() *CancelDeploymentTransformType {
	return &e
}
func (e *CancelDeploymentTransformType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "request.headers":
		fallthrough
	case "request.query":
		fallthrough
	case "response.headers":
		*e = CancelDeploymentTransformType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentTransformType: %v", v)
	}
}

type CancelDeploymentOp string

const (
	CancelDeploymentOpSet    CancelDeploymentOp = "set"
	CancelDeploymentOpAppend CancelDeploymentOp = "append"
	CancelDeploymentOpDelete CancelDeploymentOp = "delete"
)

func (e CancelDeploymentOp) ToPointer() *CancelDeploymentOp {
	return &e
}
func (e *CancelDeploymentOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "set":
		fallthrough
	case "append":
		fallthrough
	case "delete":
		*e = CancelDeploymentOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentOp: %v", v)
	}
}

type CancelDeploymentKeyEqType string

const (
	CancelDeploymentKeyEqTypeStr    CancelDeploymentKeyEqType = "str"
	CancelDeploymentKeyEqTypeNumber CancelDeploymentKeyEqType = "number"
)

type CancelDeploymentKeyEq struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type CancelDeploymentKeyEqType
}

func CreateCancelDeploymentKeyEqStr(str string) CancelDeploymentKeyEq {
	typ := CancelDeploymentKeyEqTypeStr

	return CancelDeploymentKeyEq{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentKeyEqNumber(number float64) CancelDeploymentKeyEq {
	typ := CancelDeploymentKeyEqTypeNumber

	return CancelDeploymentKeyEq{
		Number: &number,
		Type:   typ,
	}
}

func (u *CancelDeploymentKeyEq) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentKeyEqTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CancelDeploymentKeyEqTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentKeyEq", string(data))
}

func (u CancelDeploymentKeyEq) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentKeyEq: all fields are null")
}

type CancelDeploymentKey struct {
	Eq   *CancelDeploymentKeyEq `json:"eq,omitempty"`
	Neq  *string                `json:"neq,omitempty"`
	Inc  []string               `json:"inc,omitempty"`
	Ninc []string               `json:"ninc,omitempty"`
	Pre  *string                `json:"pre,omitempty"`
	Suf  *string                `json:"suf,omitempty"`
	Gt   *float64               `json:"gt,omitempty"`
	Gte  *float64               `json:"gte,omitempty"`
	Lt   *float64               `json:"lt,omitempty"`
	Lte  *float64               `json:"lte,omitempty"`
}

func (o *CancelDeploymentKey) GetEq() *CancelDeploymentKeyEq {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CancelDeploymentKey) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CancelDeploymentKey) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CancelDeploymentKey) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CancelDeploymentKey) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CancelDeploymentKey) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CancelDeploymentKey) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CancelDeploymentKey) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CancelDeploymentKey) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CancelDeploymentKey) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CancelDeploymentKeyUnionType string

const (
	CancelDeploymentKeyUnionTypeStr                 CancelDeploymentKeyUnionType = "str"
	CancelDeploymentKeyUnionTypeCancelDeploymentKey CancelDeploymentKeyUnionType = "cancelDeployment_key"
)

type CancelDeploymentKeyUnion struct {
	Str                 *string              `queryParam:"inline"`
	CancelDeploymentKey *CancelDeploymentKey `queryParam:"inline"`

	Type CancelDeploymentKeyUnionType
}

func CreateCancelDeploymentKeyUnionStr(str string) CancelDeploymentKeyUnion {
	typ := CancelDeploymentKeyUnionTypeStr

	return CancelDeploymentKeyUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentKeyUnionCancelDeploymentKey(cancelDeploymentKey CancelDeploymentKey) CancelDeploymentKeyUnion {
	typ := CancelDeploymentKeyUnionTypeCancelDeploymentKey

	return CancelDeploymentKeyUnion{
		CancelDeploymentKey: &cancelDeploymentKey,
		Type:                typ,
	}
}

func (u *CancelDeploymentKeyUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentKey CancelDeploymentKey = CancelDeploymentKey{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentKey, "", true, true); err == nil {
		u.CancelDeploymentKey = &cancelDeploymentKey
		u.Type = CancelDeploymentKeyUnionTypeCancelDeploymentKey
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentKeyUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentKeyUnion", string(data))
}

func (u CancelDeploymentKeyUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CancelDeploymentKey != nil {
		return utils.MarshalJSON(u.CancelDeploymentKey, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentKeyUnion: all fields are null")
}

type CancelDeploymentRouteTarget struct {
	Key CancelDeploymentKeyUnion `json:"key"`
}

func (o *CancelDeploymentRouteTarget) GetKey() CancelDeploymentKeyUnion {
	if o == nil {
		return CancelDeploymentKeyUnion{}
	}
	return o.Key
}

type CancelDeploymentArgsType string

const (
	CancelDeploymentArgsTypeStr        CancelDeploymentArgsType = "str"
	CancelDeploymentArgsTypeArrayOfStr CancelDeploymentArgsType = "arrayOfStr"
)

type CancelDeploymentArgs struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type CancelDeploymentArgsType
}

func CreateCancelDeploymentArgsStr(str string) CancelDeploymentArgs {
	typ := CancelDeploymentArgsTypeStr

	return CancelDeploymentArgs{
		Str:  &str,
		Type: typ,
	}
}

func CreateCancelDeploymentArgsArrayOfStr(arrayOfStr []string) CancelDeploymentArgs {
	typ := CancelDeploymentArgsTypeArrayOfStr

	return CancelDeploymentArgs{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *CancelDeploymentArgs) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CancelDeploymentArgsTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CancelDeploymentArgsTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentArgs", string(data))
}

func (u CancelDeploymentArgs) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentArgs: all fields are null")
}

type CancelDeploymentTransform struct {
	Type   CancelDeploymentTransformType `json:"type"`
	Op     CancelDeploymentOp            `json:"op"`
	Target CancelDeploymentRouteTarget   `json:"target"`
	Args   *CancelDeploymentArgs         `json:"args,omitempty"`
}

func (o *CancelDeploymentTransform) GetType() CancelDeploymentTransformType {
	if o == nil {
		return CancelDeploymentTransformType("")
	}
	return o.Type
}

func (o *CancelDeploymentTransform) GetOp() CancelDeploymentOp {
	if o == nil {
		return CancelDeploymentOp("")
	}
	return o.Op
}

func (o *CancelDeploymentTransform) GetTarget() CancelDeploymentRouteTarget {
	if o == nil {
		return CancelDeploymentRouteTarget{}
	}
	return o.Target
}

func (o *CancelDeploymentTransform) GetArgs() *CancelDeploymentArgs {
	if o == nil {
		return nil
	}
	return o.Args
}

type CancelDeploymentLocale struct {
	Redirect map[string]string `json:"redirect,omitempty"`
	Cookie   *string           `json:"cookie,omitempty"`
}

func (o *CancelDeploymentLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *CancelDeploymentLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

type CancelDeploymentRoute1 struct {
	Src           string                         `json:"src"`
	Dest          *string                        `json:"dest,omitempty"`
	Headers       map[string]string              `json:"headers,omitempty"`
	Methods       []string                       `json:"methods,omitempty"`
	Continue      *bool                          `json:"continue,omitempty"`
	Override      *bool                          `json:"override,omitempty"`
	CaseSensitive *bool                          `json:"caseSensitive,omitempty"`
	Check         *bool                          `json:"check,omitempty"`
	Important     *bool                          `json:"important,omitempty"`
	Status        *float64                       `json:"status,omitempty"`
	Has           []CancelDeploymentHasUnion     `json:"has,omitempty"`
	Missing       []CancelDeploymentMissingUnion `json:"missing,omitempty"`
	Mitigate      *CancelDeploymentMitigate      `json:"mitigate,omitempty"`
	Transforms    []CancelDeploymentTransform    `json:"transforms,omitempty"`
	Locale        *CancelDeploymentLocale        `json:"locale,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string `json:"middlewareRawSrc,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
}

func (o *CancelDeploymentRoute1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *CancelDeploymentRoute1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CancelDeploymentRoute1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CancelDeploymentRoute1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *CancelDeploymentRoute1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *CancelDeploymentRoute1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *CancelDeploymentRoute1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *CancelDeploymentRoute1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *CancelDeploymentRoute1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *CancelDeploymentRoute1) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CancelDeploymentRoute1) GetHas() []CancelDeploymentHasUnion {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CancelDeploymentRoute1) GetMissing() []CancelDeploymentMissingUnion {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CancelDeploymentRoute1) GetMitigate() *CancelDeploymentMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

func (o *CancelDeploymentRoute1) GetTransforms() []CancelDeploymentTransform {
	if o == nil {
		return nil
	}
	return o.Transforms
}

func (o *CancelDeploymentRoute1) GetLocale() *CancelDeploymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *CancelDeploymentRoute1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *CancelDeploymentRoute1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *CancelDeploymentRoute1) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

type CancelDeploymentRouteUnionType string

const (
	CancelDeploymentRouteUnionTypeCancelDeploymentRoute1 CancelDeploymentRouteUnionType = "cancelDeployment_route_1"
	CancelDeploymentRouteUnionTypeCancelDeploymentRoute2 CancelDeploymentRouteUnionType = "cancelDeployment_route_2"
	CancelDeploymentRouteUnionTypeCancelDeploymentRoute3 CancelDeploymentRouteUnionType = "cancelDeployment_route_3"
)

type CancelDeploymentRouteUnion struct {
	CancelDeploymentRoute1 *CancelDeploymentRoute1 `queryParam:"inline"`
	CancelDeploymentRoute2 *CancelDeploymentRoute2 `queryParam:"inline"`
	CancelDeploymentRoute3 *CancelDeploymentRoute3 `queryParam:"inline"`

	Type CancelDeploymentRouteUnionType
}

func CreateCancelDeploymentRouteUnionCancelDeploymentRoute1(cancelDeploymentRoute1 CancelDeploymentRoute1) CancelDeploymentRouteUnion {
	typ := CancelDeploymentRouteUnionTypeCancelDeploymentRoute1

	return CancelDeploymentRouteUnion{
		CancelDeploymentRoute1: &cancelDeploymentRoute1,
		Type:                   typ,
	}
}

func CreateCancelDeploymentRouteUnionCancelDeploymentRoute2(cancelDeploymentRoute2 CancelDeploymentRoute2) CancelDeploymentRouteUnion {
	typ := CancelDeploymentRouteUnionTypeCancelDeploymentRoute2

	return CancelDeploymentRouteUnion{
		CancelDeploymentRoute2: &cancelDeploymentRoute2,
		Type:                   typ,
	}
}

func CreateCancelDeploymentRouteUnionCancelDeploymentRoute3(cancelDeploymentRoute3 CancelDeploymentRoute3) CancelDeploymentRouteUnion {
	typ := CancelDeploymentRouteUnionTypeCancelDeploymentRoute3

	return CancelDeploymentRouteUnion{
		CancelDeploymentRoute3: &cancelDeploymentRoute3,
		Type:                   typ,
	}
}

func (u *CancelDeploymentRouteUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentRoute3 CancelDeploymentRoute3 = CancelDeploymentRoute3{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentRoute3, "", true, true); err == nil {
		u.CancelDeploymentRoute3 = &cancelDeploymentRoute3
		u.Type = CancelDeploymentRouteUnionTypeCancelDeploymentRoute3
		return nil
	}

	var cancelDeploymentRoute2 CancelDeploymentRoute2 = CancelDeploymentRoute2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentRoute2, "", true, true); err == nil {
		u.CancelDeploymentRoute2 = &cancelDeploymentRoute2
		u.Type = CancelDeploymentRouteUnionTypeCancelDeploymentRoute2
		return nil
	}

	var cancelDeploymentRoute1 CancelDeploymentRoute1 = CancelDeploymentRoute1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentRoute1, "", true, true); err == nil {
		u.CancelDeploymentRoute1 = &cancelDeploymentRoute1
		u.Type = CancelDeploymentRouteUnionTypeCancelDeploymentRoute1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentRouteUnion", string(data))
}

func (u CancelDeploymentRouteUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentRoute1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentRoute1, "", true)
	}

	if u.CancelDeploymentRoute2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentRoute2, "", true)
	}

	if u.CancelDeploymentRoute3 != nil {
		return utils.MarshalJSON(u.CancelDeploymentRoute3, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentRouteUnion: all fields are null")
}

type CancelDeploymentGitRepoTypeBitbucket string

const (
	CancelDeploymentGitRepoTypeBitbucketBitbucket CancelDeploymentGitRepoTypeBitbucket = "bitbucket"
)

func (e CancelDeploymentGitRepoTypeBitbucket) ToPointer() *CancelDeploymentGitRepoTypeBitbucket {
	return &e
}
func (e *CancelDeploymentGitRepoTypeBitbucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CancelDeploymentGitRepoTypeBitbucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoTypeBitbucket: %v", v)
	}
}

type CancelDeploymentOwnerType3 string

const (
	CancelDeploymentOwnerType3User CancelDeploymentOwnerType3 = "user"
	CancelDeploymentOwnerType3Team CancelDeploymentOwnerType3 = "team"
)

func (e CancelDeploymentOwnerType3) ToPointer() *CancelDeploymentOwnerType3 {
	return &e
}
func (e *CancelDeploymentOwnerType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeploymentOwnerType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentOwnerType3: %v", v)
	}
}

type CancelDeploymentGitRepoBitbucket struct {
	Owner         string                               `json:"owner"`
	RepoUUID      string                               `json:"repoUuid"`
	Slug          string                               `json:"slug"`
	Type          CancelDeploymentGitRepoTypeBitbucket `json:"type"`
	WorkspaceUUID string                               `json:"workspaceUuid"`
	Path          string                               `json:"path"`
	DefaultBranch string                               `json:"defaultBranch"`
	Name          string                               `json:"name"`
	Private       bool                                 `json:"private"`
	OwnerType     CancelDeploymentOwnerType3           `json:"ownerType"`
}

func (o *CancelDeploymentGitRepoBitbucket) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CancelDeploymentGitRepoBitbucket) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *CancelDeploymentGitRepoBitbucket) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CancelDeploymentGitRepoBitbucket) GetType() CancelDeploymentGitRepoTypeBitbucket {
	if o == nil {
		return CancelDeploymentGitRepoTypeBitbucket("")
	}
	return o.Type
}

func (o *CancelDeploymentGitRepoBitbucket) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *CancelDeploymentGitRepoBitbucket) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentGitRepoBitbucket) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeploymentGitRepoBitbucket) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentGitRepoBitbucket) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeploymentGitRepoBitbucket) GetOwnerType() CancelDeploymentOwnerType3 {
	if o == nil {
		return CancelDeploymentOwnerType3("")
	}
	return o.OwnerType
}

type CancelDeploymentGitRepoTypeGithub string

const (
	CancelDeploymentGitRepoTypeGithubGithub CancelDeploymentGitRepoTypeGithub = "github"
)

func (e CancelDeploymentGitRepoTypeGithub) ToPointer() *CancelDeploymentGitRepoTypeGithub {
	return &e
}
func (e *CancelDeploymentGitRepoTypeGithub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CancelDeploymentGitRepoTypeGithub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoTypeGithub: %v", v)
	}
}

type CancelDeploymentOwnerType2 string

const (
	CancelDeploymentOwnerType2User CancelDeploymentOwnerType2 = "user"
	CancelDeploymentOwnerType2Team CancelDeploymentOwnerType2 = "team"
)

func (e CancelDeploymentOwnerType2) ToPointer() *CancelDeploymentOwnerType2 {
	return &e
}
func (e *CancelDeploymentOwnerType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeploymentOwnerType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentOwnerType2: %v", v)
	}
}

type CancelDeploymentGitRepoGithub struct {
	Org           string                            `json:"org"`
	Repo          string                            `json:"repo"`
	RepoID        float64                           `json:"repoId"`
	Type          CancelDeploymentGitRepoTypeGithub `json:"type"`
	RepoOwnerID   float64                           `json:"repoOwnerId"`
	Path          string                            `json:"path"`
	DefaultBranch string                            `json:"defaultBranch"`
	Name          string                            `json:"name"`
	Private       bool                              `json:"private"`
	OwnerType     CancelDeploymentOwnerType2        `json:"ownerType"`
}

func (o *CancelDeploymentGitRepoGithub) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *CancelDeploymentGitRepoGithub) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *CancelDeploymentGitRepoGithub) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *CancelDeploymentGitRepoGithub) GetType() CancelDeploymentGitRepoTypeGithub {
	if o == nil {
		return CancelDeploymentGitRepoTypeGithub("")
	}
	return o.Type
}

func (o *CancelDeploymentGitRepoGithub) GetRepoOwnerID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoOwnerID
}

func (o *CancelDeploymentGitRepoGithub) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentGitRepoGithub) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeploymentGitRepoGithub) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentGitRepoGithub) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeploymentGitRepoGithub) GetOwnerType() CancelDeploymentOwnerType2 {
	if o == nil {
		return CancelDeploymentOwnerType2("")
	}
	return o.OwnerType
}

type CancelDeploymentGitRepoTypeGitlab string

const (
	CancelDeploymentGitRepoTypeGitlabGitlab CancelDeploymentGitRepoTypeGitlab = "gitlab"
)

func (e CancelDeploymentGitRepoTypeGitlab) ToPointer() *CancelDeploymentGitRepoTypeGitlab {
	return &e
}
func (e *CancelDeploymentGitRepoTypeGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CancelDeploymentGitRepoTypeGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentGitRepoTypeGitlab: %v", v)
	}
}

type CancelDeploymentOwnerType1 string

const (
	CancelDeploymentOwnerType1User CancelDeploymentOwnerType1 = "user"
	CancelDeploymentOwnerType1Team CancelDeploymentOwnerType1 = "team"
)

func (e CancelDeploymentOwnerType1) ToPointer() *CancelDeploymentOwnerType1 {
	return &e
}
func (e *CancelDeploymentOwnerType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		fallthrough
	case "team":
		*e = CancelDeploymentOwnerType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentOwnerType1: %v", v)
	}
}

type CancelDeploymentGitRepoGitlab struct {
	Namespace     string                            `json:"namespace"`
	ProjectID     float64                           `json:"projectId"`
	Type          CancelDeploymentGitRepoTypeGitlab `json:"type"`
	URL           string                            `json:"url"`
	Path          string                            `json:"path"`
	DefaultBranch string                            `json:"defaultBranch"`
	Name          string                            `json:"name"`
	Private       bool                              `json:"private"`
	OwnerType     CancelDeploymentOwnerType1        `json:"ownerType"`
}

func (o *CancelDeploymentGitRepoGitlab) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *CancelDeploymentGitRepoGitlab) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *CancelDeploymentGitRepoGitlab) GetType() CancelDeploymentGitRepoTypeGitlab {
	if o == nil {
		return CancelDeploymentGitRepoTypeGitlab("")
	}
	return o.Type
}

func (o *CancelDeploymentGitRepoGitlab) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CancelDeploymentGitRepoGitlab) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CancelDeploymentGitRepoGitlab) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *CancelDeploymentGitRepoGitlab) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentGitRepoGitlab) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CancelDeploymentGitRepoGitlab) GetOwnerType() CancelDeploymentOwnerType1 {
	if o == nil {
		return CancelDeploymentOwnerType1("")
	}
	return o.OwnerType
}

type CancelDeploymentGitRepoUnionType string

const (
	CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoGitlab    CancelDeploymentGitRepoUnionType = "cancelDeployment_gitRepo_Gitlab"
	CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoGithub    CancelDeploymentGitRepoUnionType = "cancelDeployment_gitRepo_Github"
	CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoBitbucket CancelDeploymentGitRepoUnionType = "cancelDeployment_gitRepo_Bitbucket"
)

type CancelDeploymentGitRepoUnion struct {
	CancelDeploymentGitRepoGitlab    *CancelDeploymentGitRepoGitlab    `queryParam:"inline"`
	CancelDeploymentGitRepoGithub    *CancelDeploymentGitRepoGithub    `queryParam:"inline"`
	CancelDeploymentGitRepoBitbucket *CancelDeploymentGitRepoBitbucket `queryParam:"inline"`

	Type CancelDeploymentGitRepoUnionType
}

func CreateCancelDeploymentGitRepoUnionCancelDeploymentGitRepoGitlab(cancelDeploymentGitRepoGitlab CancelDeploymentGitRepoGitlab) CancelDeploymentGitRepoUnion {
	typ := CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoGitlab

	return CancelDeploymentGitRepoUnion{
		CancelDeploymentGitRepoGitlab: &cancelDeploymentGitRepoGitlab,
		Type:                          typ,
	}
}

func CreateCancelDeploymentGitRepoUnionCancelDeploymentGitRepoGithub(cancelDeploymentGitRepoGithub CancelDeploymentGitRepoGithub) CancelDeploymentGitRepoUnion {
	typ := CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoGithub

	return CancelDeploymentGitRepoUnion{
		CancelDeploymentGitRepoGithub: &cancelDeploymentGitRepoGithub,
		Type:                          typ,
	}
}

func CreateCancelDeploymentGitRepoUnionCancelDeploymentGitRepoBitbucket(cancelDeploymentGitRepoBitbucket CancelDeploymentGitRepoBitbucket) CancelDeploymentGitRepoUnion {
	typ := CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoBitbucket

	return CancelDeploymentGitRepoUnion{
		CancelDeploymentGitRepoBitbucket: &cancelDeploymentGitRepoBitbucket,
		Type:                             typ,
	}
}

func (u *CancelDeploymentGitRepoUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentGitRepoGitlab CancelDeploymentGitRepoGitlab = CancelDeploymentGitRepoGitlab{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitRepoGitlab, "", true, true); err == nil {
		u.CancelDeploymentGitRepoGitlab = &cancelDeploymentGitRepoGitlab
		u.Type = CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoGitlab
		return nil
	}

	var cancelDeploymentGitRepoGithub CancelDeploymentGitRepoGithub = CancelDeploymentGitRepoGithub{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitRepoGithub, "", true, true); err == nil {
		u.CancelDeploymentGitRepoGithub = &cancelDeploymentGitRepoGithub
		u.Type = CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoGithub
		return nil
	}

	var cancelDeploymentGitRepoBitbucket CancelDeploymentGitRepoBitbucket = CancelDeploymentGitRepoBitbucket{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentGitRepoBitbucket, "", true, true); err == nil {
		u.CancelDeploymentGitRepoBitbucket = &cancelDeploymentGitRepoBitbucket
		u.Type = CancelDeploymentGitRepoUnionTypeCancelDeploymentGitRepoBitbucket
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentGitRepoUnion", string(data))
}

func (u CancelDeploymentGitRepoUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentGitRepoGitlab != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitRepoGitlab, "", true)
	}

	if u.CancelDeploymentGitRepoGithub != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitRepoGithub, "", true)
	}

	if u.CancelDeploymentGitRepoBitbucket != nil {
		return utils.MarshalJSON(u.CancelDeploymentGitRepoBitbucket, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentGitRepoUnion: all fields are null")
}

// CancelDeploymentFlags2 - Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
type CancelDeploymentFlags2 struct {
}

type CancelDeploymentOption struct {
	Value *components.FlagJSONValue `json:"value"`
	Label *string                   `json:"label,omitempty"`
}

func (o *CancelDeploymentOption) GetValue() *components.FlagJSONValue {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CancelDeploymentOption) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

type CancelDeploymentDefinitions struct {
	Options     []CancelDeploymentOption `json:"options,omitempty"`
	URL         *string                  `json:"url,omitempty"`
	Description *string                  `json:"description,omitempty"`
}

func (o *CancelDeploymentDefinitions) GetOptions() []CancelDeploymentOption {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *CancelDeploymentDefinitions) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *CancelDeploymentDefinitions) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// CancelDeploymentFlags1 - Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
type CancelDeploymentFlags1 struct {
	Definitions map[string]CancelDeploymentDefinitions `json:"definitions"`
}

func (o *CancelDeploymentFlags1) GetDefinitions() map[string]CancelDeploymentDefinitions {
	if o == nil {
		return map[string]CancelDeploymentDefinitions{}
	}
	return o.Definitions
}

type CancelDeploymentFlagsUnionType string

const (
	CancelDeploymentFlagsUnionTypeCancelDeploymentFlags1        CancelDeploymentFlagsUnionType = "cancelDeployment_flags_1"
	CancelDeploymentFlagsUnionTypeArrayOfCancelDeploymentFlags2 CancelDeploymentFlagsUnionType = "arrayOfCancelDeploymentFlags2"
)

type CancelDeploymentFlagsUnion struct {
	CancelDeploymentFlags1        *CancelDeploymentFlags1  `queryParam:"inline"`
	ArrayOfCancelDeploymentFlags2 []CancelDeploymentFlags2 `queryParam:"inline"`

	Type CancelDeploymentFlagsUnionType
}

func CreateCancelDeploymentFlagsUnionCancelDeploymentFlags1(cancelDeploymentFlags1 CancelDeploymentFlags1) CancelDeploymentFlagsUnion {
	typ := CancelDeploymentFlagsUnionTypeCancelDeploymentFlags1

	return CancelDeploymentFlagsUnion{
		CancelDeploymentFlags1: &cancelDeploymentFlags1,
		Type:                   typ,
	}
}

func CreateCancelDeploymentFlagsUnionArrayOfCancelDeploymentFlags2(arrayOfCancelDeploymentFlags2 []CancelDeploymentFlags2) CancelDeploymentFlagsUnion {
	typ := CancelDeploymentFlagsUnionTypeArrayOfCancelDeploymentFlags2

	return CancelDeploymentFlagsUnion{
		ArrayOfCancelDeploymentFlags2: arrayOfCancelDeploymentFlags2,
		Type:                          typ,
	}
}

func (u *CancelDeploymentFlagsUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentFlags1 CancelDeploymentFlags1 = CancelDeploymentFlags1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentFlags1, "", true, true); err == nil {
		u.CancelDeploymentFlags1 = &cancelDeploymentFlags1
		u.Type = CancelDeploymentFlagsUnionTypeCancelDeploymentFlags1
		return nil
	}

	var arrayOfCancelDeploymentFlags2 []CancelDeploymentFlags2 = []CancelDeploymentFlags2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCancelDeploymentFlags2, "", true, true); err == nil {
		u.ArrayOfCancelDeploymentFlags2 = arrayOfCancelDeploymentFlags2
		u.Type = CancelDeploymentFlagsUnionTypeArrayOfCancelDeploymentFlags2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentFlagsUnion", string(data))
}

func (u CancelDeploymentFlagsUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentFlags1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentFlags1, "", true)
	}

	if u.ArrayOfCancelDeploymentFlags2 != nil {
		return utils.MarshalJSON(u.ArrayOfCancelDeploymentFlags2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentFlagsUnion: all fields are null")
}

// CancelDeploymentApplications - A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
type CancelDeploymentApplications struct {
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// This is the production alias, it will always show the most up to date of each application.
	ProductionHost string `json:"productionHost"`
	// Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
	DeploymentAlias *string `json:"deploymentAlias,omitempty"`
	DeploymentHost  *string `json:"deploymentHost,omitempty"`
}

func (o *CancelDeploymentApplications) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *CancelDeploymentApplications) GetProductionHost() string {
	if o == nil {
		return ""
	}
	return o.ProductionHost
}

func (o *CancelDeploymentApplications) GetDeploymentAlias() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentAlias
}

func (o *CancelDeploymentApplications) GetDeploymentHost() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentHost
}

type CancelDeploymentMicrofrontends2 struct {
	// A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
	Applications map[string]CancelDeploymentApplications `json:"applications,omitempty"`
	IsDefaultApp bool                                    `json:"isDefaultApp"`
	// The project name of the default app of this deployment's microfrontends group.
	DefaultAppProjectName string `json:"defaultAppProjectName"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
	MicrofrontendsAlias2Enabled *bool `json:"microfrontendsAlias2Enabled,omitempty"`
}

func (o *CancelDeploymentMicrofrontends2) GetApplications() map[string]CancelDeploymentApplications {
	if o == nil {
		return nil
	}
	return o.Applications
}

func (o *CancelDeploymentMicrofrontends2) GetIsDefaultApp() bool {
	if o == nil {
		return false
	}
	return o.IsDefaultApp
}

func (o *CancelDeploymentMicrofrontends2) GetDefaultAppProjectName() string {
	if o == nil {
		return ""
	}
	return o.DefaultAppProjectName
}

func (o *CancelDeploymentMicrofrontends2) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *CancelDeploymentMicrofrontends2) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *CancelDeploymentMicrofrontends2) GetMicrofrontendsAlias2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.MicrofrontendsAlias2Enabled
}

type CancelDeploymentMicrofrontends1 struct {
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// The project name of the default app of this deployment's microfrontends group.
	DefaultAppProjectName string `json:"defaultAppProjectName"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether the MicrofrontendsAlias2 team flag should be considered enabled for this deployment or not.
	MicrofrontendsAlias2Enabled *bool `json:"microfrontendsAlias2Enabled,omitempty"`
}

func (o *CancelDeploymentMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *CancelDeploymentMicrofrontends1) GetDefaultAppProjectName() string {
	if o == nil {
		return ""
	}
	return o.DefaultAppProjectName
}

func (o *CancelDeploymentMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *CancelDeploymentMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *CancelDeploymentMicrofrontends1) GetMicrofrontendsAlias2Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.MicrofrontendsAlias2Enabled
}

type CancelDeploymentMicrofrontendsUnionType string

const (
	CancelDeploymentMicrofrontendsUnionTypeCancelDeploymentMicrofrontends1 CancelDeploymentMicrofrontendsUnionType = "cancelDeployment_microfrontends_1"
	CancelDeploymentMicrofrontendsUnionTypeCancelDeploymentMicrofrontends2 CancelDeploymentMicrofrontendsUnionType = "cancelDeployment_microfrontends_2"
)

type CancelDeploymentMicrofrontendsUnion struct {
	CancelDeploymentMicrofrontends1 *CancelDeploymentMicrofrontends1 `queryParam:"inline"`
	CancelDeploymentMicrofrontends2 *CancelDeploymentMicrofrontends2 `queryParam:"inline"`

	Type CancelDeploymentMicrofrontendsUnionType
}

func CreateCancelDeploymentMicrofrontendsUnionCancelDeploymentMicrofrontends1(cancelDeploymentMicrofrontends1 CancelDeploymentMicrofrontends1) CancelDeploymentMicrofrontendsUnion {
	typ := CancelDeploymentMicrofrontendsUnionTypeCancelDeploymentMicrofrontends1

	return CancelDeploymentMicrofrontendsUnion{
		CancelDeploymentMicrofrontends1: &cancelDeploymentMicrofrontends1,
		Type:                            typ,
	}
}

func CreateCancelDeploymentMicrofrontendsUnionCancelDeploymentMicrofrontends2(cancelDeploymentMicrofrontends2 CancelDeploymentMicrofrontends2) CancelDeploymentMicrofrontendsUnion {
	typ := CancelDeploymentMicrofrontendsUnionTypeCancelDeploymentMicrofrontends2

	return CancelDeploymentMicrofrontendsUnion{
		CancelDeploymentMicrofrontends2: &cancelDeploymentMicrofrontends2,
		Type:                            typ,
	}
}

func (u *CancelDeploymentMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var cancelDeploymentMicrofrontends1 CancelDeploymentMicrofrontends1 = CancelDeploymentMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMicrofrontends1, "", true, true); err == nil {
		u.CancelDeploymentMicrofrontends1 = &cancelDeploymentMicrofrontends1
		u.Type = CancelDeploymentMicrofrontendsUnionTypeCancelDeploymentMicrofrontends1
		return nil
	}

	var cancelDeploymentMicrofrontends2 CancelDeploymentMicrofrontends2 = CancelDeploymentMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &cancelDeploymentMicrofrontends2, "", true, true); err == nil {
		u.CancelDeploymentMicrofrontends2 = &cancelDeploymentMicrofrontends2
		u.Type = CancelDeploymentMicrofrontendsUnionTypeCancelDeploymentMicrofrontends2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CancelDeploymentMicrofrontendsUnion", string(data))
}

func (u CancelDeploymentMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.CancelDeploymentMicrofrontends1 != nil {
		return utils.MarshalJSON(u.CancelDeploymentMicrofrontends1, "", true)
	}

	if u.CancelDeploymentMicrofrontends2 != nil {
		return utils.MarshalJSON(u.CancelDeploymentMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type CancelDeploymentMicrofrontendsUnion: all fields are null")
}

type CancelDeploymentFunctionType string

const (
	CancelDeploymentFunctionTypeStandard CancelDeploymentFunctionType = "standard"
	CancelDeploymentFunctionTypeFluid    CancelDeploymentFunctionType = "fluid"
)

func (e CancelDeploymentFunctionType) ToPointer() *CancelDeploymentFunctionType {
	return &e
}
func (e *CancelDeploymentFunctionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "fluid":
		*e = CancelDeploymentFunctionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentFunctionType: %v", v)
	}
}

type CancelDeploymentFunctionMemoryType string

const (
	CancelDeploymentFunctionMemoryTypeStandardLegacy CancelDeploymentFunctionMemoryType = "standard_legacy"
	CancelDeploymentFunctionMemoryTypeStandard       CancelDeploymentFunctionMemoryType = "standard"
	CancelDeploymentFunctionMemoryTypePerformance    CancelDeploymentFunctionMemoryType = "performance"
)

func (e CancelDeploymentFunctionMemoryType) ToPointer() *CancelDeploymentFunctionMemoryType {
	return &e
}
func (e *CancelDeploymentFunctionMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = CancelDeploymentFunctionMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentFunctionMemoryType: %v", v)
	}
}

// CancelDeploymentConfig - Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
type CancelDeploymentConfig struct {
	Version                     *float64                           `json:"version,omitempty"`
	FunctionType                CancelDeploymentFunctionType       `json:"functionType"`
	FunctionMemoryType          CancelDeploymentFunctionMemoryType `json:"functionMemoryType"`
	FunctionTimeout             *float64                           `json:"functionTimeout"`
	SecureComputePrimaryRegion  *string                            `json:"secureComputePrimaryRegion"`
	SecureComputeFallbackRegion *string                            `json:"secureComputeFallbackRegion"`
	IsUsingActiveCPU            *bool                              `json:"isUsingActiveCPU,omitempty"`
}

func (o *CancelDeploymentConfig) GetVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *CancelDeploymentConfig) GetFunctionType() CancelDeploymentFunctionType {
	if o == nil {
		return CancelDeploymentFunctionType("")
	}
	return o.FunctionType
}

func (o *CancelDeploymentConfig) GetFunctionMemoryType() CancelDeploymentFunctionMemoryType {
	if o == nil {
		return CancelDeploymentFunctionMemoryType("")
	}
	return o.FunctionMemoryType
}

func (o *CancelDeploymentConfig) GetFunctionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionTimeout
}

func (o *CancelDeploymentConfig) GetSecureComputePrimaryRegion() *string {
	if o == nil {
		return nil
	}
	return o.SecureComputePrimaryRegion
}

func (o *CancelDeploymentConfig) GetSecureComputeFallbackRegion() *string {
	if o == nil {
		return nil
	}
	return o.SecureComputeFallbackRegion
}

func (o *CancelDeploymentConfig) GetIsUsingActiveCPU() *bool {
	if o == nil {
		return nil
	}
	return o.IsUsingActiveCPU
}

type CancelDeploymentState string

const (
	CancelDeploymentStateSucceeded CancelDeploymentState = "succeeded"
	CancelDeploymentStateFailed    CancelDeploymentState = "failed"
	CancelDeploymentStatePending   CancelDeploymentState = "pending"
)

func (e CancelDeploymentState) ToPointer() *CancelDeploymentState {
	return &e
}
func (e *CancelDeploymentState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "pending":
		*e = CancelDeploymentState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CancelDeploymentState: %v", v)
	}
}

// CancelDeploymentDeploymentAlias - Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
type CancelDeploymentDeploymentAlias struct {
	State       CancelDeploymentState `json:"state"`
	StartedAt   float64               `json:"startedAt"`
	CompletedAt *float64              `json:"completedAt,omitempty"`
}

func (o *CancelDeploymentDeploymentAlias) GetState() CancelDeploymentState {
	if o == nil {
		return CancelDeploymentState("")
	}
	return o.State
}

func (o *CancelDeploymentDeploymentAlias) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *CancelDeploymentDeploymentAlias) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

type CancelDeploymentChecks struct {
	// Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
	DeploymentAlias CancelDeploymentDeploymentAlias `json:"deployment-alias"`
}

func (o *CancelDeploymentChecks) GetDeploymentAlias() CancelDeploymentDeploymentAlias {
	if o == nil {
		return CancelDeploymentDeploymentAlias{}
	}
	return o.DeploymentAlias
}

// CancelDeploymentResponseBody - The private deployment representation of a Deployment.
type CancelDeploymentResponseBody struct {
	AliasAssignedAt           *CancelDeploymentAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	AlwaysRefuseToBuild       *bool                            `json:"alwaysRefuseToBuild,omitempty"`
	Build                     CancelDeploymentBuild1           `json:"build"`
	BuildArtifactUrls         []string                         `json:"buildArtifactUrls,omitempty"`
	Builds                    []CancelDeploymentBuild2         `json:"builds,omitempty"`
	Env                       []string                         `json:"env"`
	InspectorURL              *string                          `json:"inspectorUrl"`
	IsInConcurrentBuildsQueue bool                             `json:"isInConcurrentBuildsQueue"`
	IsInSystemBuildsQueue     bool                             `json:"isInSystemBuildsQueue"`
	ProjectSettings           CancelDeploymentProjectSettings  `json:"projectSettings"`
	ReadyStateReason          *string                          `json:"readyStateReason,omitempty"`
	Integrations              *CancelDeploymentIntegrations    `json:"integrations,omitempty"`
	Images                    *CancelDeploymentImages          `json:"images,omitempty"`
	Alias                     []string                         `json:"alias,omitempty"`
	AliasAssigned             bool                             `json:"aliasAssigned"`
	BootedAt                  float64                          `json:"bootedAt"`
	BuildingAt                float64                          `json:"buildingAt"`
	// Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
	BuildContainerFinishedAt *float64                                `json:"buildContainerFinishedAt,omitempty"`
	BuildSkipped             bool                                    `json:"buildSkipped"`
	Creator                  CancelDeploymentCreator                 `json:"creator"`
	InitReadyAt              *float64                                `json:"initReadyAt,omitempty"`
	IsFirstBranchDeployment  *bool                                   `json:"isFirstBranchDeployment,omitempty"`
	Lambdas                  []CancelDeploymentLambda                `json:"lambdas,omitempty"`
	Public                   bool                                    `json:"public"`
	Ready                    *float64                                `json:"ready,omitempty"`
	Status                   CancelDeploymentStatus                  `json:"status"`
	Team                     *CancelDeploymentTeam                   `json:"team,omitempty"`
	UserAliases              []string                                `json:"userAliases,omitempty"`
	PreviewCommentsEnabled   *bool                                   `json:"previewCommentsEnabled,omitempty"`
	TtyBuildLogs             *bool                                   `json:"ttyBuildLogs,omitempty"`
	CustomEnvironment        *CancelDeploymentCustomEnvironmentUnion `json:"customEnvironment,omitempty"`
	OomReport                *CancelDeploymentOomReport              `json:"oomReport,omitempty"`
	ID                       string                                  `json:"id"`
	AliasError               *CancelDeploymentAliasError             `json:"aliasError,omitempty"`
	AliasFinal               *string                                 `json:"aliasFinal,omitempty"`
	AliasWarning             *CancelDeploymentAliasWarning           `json:"aliasWarning,omitempty"`
	// applies to custom domains only, defaults to `true`
	AutoAssignCustomDomains *bool                             `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                          `json:"automaticAliases,omitempty"`
	BuildErrorAt            *float64                          `json:"buildErrorAt,omitempty"`
	ChecksState             *CancelDeploymentChecksState      `json:"checksState,omitempty"`
	ChecksConclusion        *CancelDeploymentChecksConclusion `json:"checksConclusion,omitempty"`
	CreatedAt               float64                           `json:"createdAt"`
	DeletedAt               *float64                          `json:"deletedAt,omitempty"`
	// Computed field that is only available for deployments with a microfrontend configuration.
	DefaultRoute *string  `json:"defaultRoute,omitempty"`
	CanceledAt   *float64 `json:"canceledAt,omitempty"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
	PassiveRegions    []string                        `json:"passiveRegions,omitempty"`
	GitSource         *CancelDeploymentGitSourceUnion `json:"gitSource,omitempty"`
	Name              string                          `json:"name"`
	Meta              map[string]string               `json:"meta"`
	OriginCacheRegion *string                         `json:"originCacheRegion,omitempty"`
	// If set it overrides the `projectSettings.nodeVersion` for this deployment.
	NodeVersion *CancelDeploymentNodeVersion `json:"nodeVersion,omitempty"`
	Project     *CancelDeploymentProject     `json:"project,omitempty"`
	ReadyState  CancelDeploymentReadyState   `json:"readyState"`
	// Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
	ReadySubstate          *CancelDeploymentReadySubstate       `json:"readySubstate,omitempty"`
	Regions                []string                             `json:"regions"`
	SoftDeletedByRetention *bool                                `json:"softDeletedByRetention,omitempty"`
	Source                 *CancelDeploymentSource              `json:"source,omitempty"`
	Target                 *CancelDeploymentTargetEnum          `json:"target,omitempty"`
	Type                   CancelDeploymentType                 `json:"type"`
	UndeletedAt            *float64                             `json:"undeletedAt,omitempty"`
	URL                    string                               `json:"url"`
	Version                float64                              `json:"version"`
	OidcTokenClaims        *CancelDeploymentOidcTokenClaims     `json:"oidcTokenClaims,omitempty"`
	ConnectBuildsEnabled   *bool                                `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                              `json:"connectConfigurationId,omitempty"`
	CreatedIn              string                               `json:"createdIn"`
	Crons                  []CancelDeploymentCron               `json:"crons,omitempty"`
	Functions              map[string]CancelDeploymentFunctions `json:"functions,omitempty"`
	MonorepoManager        *string                              `json:"monorepoManager,omitempty"`
	OwnerID                string                               `json:"ownerId"`
	// Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
	PassiveConnectConfigurationID *string                              `json:"passiveConnectConfigurationId,omitempty"`
	Plan                          CancelDeploymentPlan                 `json:"plan"`
	ProjectID                     string                               `json:"projectId"`
	Routes                        []CancelDeploymentRouteUnion         `json:"routes"`
	GitRepo                       *CancelDeploymentGitRepoUnion        `json:"gitRepo,omitempty"`
	Flags                         *CancelDeploymentFlagsUnion          `json:"flags,omitempty"`
	Microfrontends                *CancelDeploymentMicrofrontendsUnion `json:"microfrontends,omitempty"`
	// Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
	Config *CancelDeploymentConfig `json:"config,omitempty"`
	Checks *CancelDeploymentChecks `json:"checks,omitempty"`
}

func (o *CancelDeploymentResponseBody) GetAliasAssignedAt() *CancelDeploymentAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *CancelDeploymentResponseBody) GetAlwaysRefuseToBuild() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysRefuseToBuild
}

func (o *CancelDeploymentResponseBody) GetBuild() CancelDeploymentBuild1 {
	if o == nil {
		return CancelDeploymentBuild1{}
	}
	return o.Build
}

func (o *CancelDeploymentResponseBody) GetBuildArtifactUrls() []string {
	if o == nil {
		return nil
	}
	return o.BuildArtifactUrls
}

func (o *CancelDeploymentResponseBody) GetBuilds() []CancelDeploymentBuild2 {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CancelDeploymentResponseBody) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *CancelDeploymentResponseBody) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *CancelDeploymentResponseBody) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *CancelDeploymentResponseBody) GetIsInSystemBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInSystemBuildsQueue
}

func (o *CancelDeploymentResponseBody) GetProjectSettings() CancelDeploymentProjectSettings {
	if o == nil {
		return CancelDeploymentProjectSettings{}
	}
	return o.ProjectSettings
}

func (o *CancelDeploymentResponseBody) GetReadyStateReason() *string {
	if o == nil {
		return nil
	}
	return o.ReadyStateReason
}

func (o *CancelDeploymentResponseBody) GetIntegrations() *CancelDeploymentIntegrations {
	if o == nil {
		return nil
	}
	return o.Integrations
}

func (o *CancelDeploymentResponseBody) GetImages() *CancelDeploymentImages {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *CancelDeploymentResponseBody) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CancelDeploymentResponseBody) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *CancelDeploymentResponseBody) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *CancelDeploymentResponseBody) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *CancelDeploymentResponseBody) GetBuildContainerFinishedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildContainerFinishedAt
}

func (o *CancelDeploymentResponseBody) GetBuildSkipped() bool {
	if o == nil {
		return false
	}
	return o.BuildSkipped
}

func (o *CancelDeploymentResponseBody) GetCreator() CancelDeploymentCreator {
	if o == nil {
		return CancelDeploymentCreator{}
	}
	return o.Creator
}

func (o *CancelDeploymentResponseBody) GetInitReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.InitReadyAt
}

func (o *CancelDeploymentResponseBody) GetIsFirstBranchDeployment() *bool {
	if o == nil {
		return nil
	}
	return o.IsFirstBranchDeployment
}

func (o *CancelDeploymentResponseBody) GetLambdas() []CancelDeploymentLambda {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *CancelDeploymentResponseBody) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *CancelDeploymentResponseBody) GetReady() *float64 {
	if o == nil {
		return nil
	}
	return o.Ready
}

func (o *CancelDeploymentResponseBody) GetStatus() CancelDeploymentStatus {
	if o == nil {
		return CancelDeploymentStatus("")
	}
	return o.Status
}

func (o *CancelDeploymentResponseBody) GetTeam() *CancelDeploymentTeam {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CancelDeploymentResponseBody) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *CancelDeploymentResponseBody) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CancelDeploymentResponseBody) GetTtyBuildLogs() *bool {
	if o == nil {
		return nil
	}
	return o.TtyBuildLogs
}

func (o *CancelDeploymentResponseBody) GetCustomEnvironment() *CancelDeploymentCustomEnvironmentUnion {
	if o == nil {
		return nil
	}
	return o.CustomEnvironment
}

func (o *CancelDeploymentResponseBody) GetOomReport() *CancelDeploymentOomReport {
	if o == nil {
		return nil
	}
	return o.OomReport
}

func (o *CancelDeploymentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CancelDeploymentResponseBody) GetAliasError() *CancelDeploymentAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CancelDeploymentResponseBody) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CancelDeploymentResponseBody) GetAliasWarning() *CancelDeploymentAliasWarning {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *CancelDeploymentResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CancelDeploymentResponseBody) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CancelDeploymentResponseBody) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *CancelDeploymentResponseBody) GetChecksState() *CancelDeploymentChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CancelDeploymentResponseBody) GetChecksConclusion() *CancelDeploymentChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CancelDeploymentResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CancelDeploymentResponseBody) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *CancelDeploymentResponseBody) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *CancelDeploymentResponseBody) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CancelDeploymentResponseBody) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *CancelDeploymentResponseBody) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *CancelDeploymentResponseBody) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *CancelDeploymentResponseBody) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *CancelDeploymentResponseBody) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *CancelDeploymentResponseBody) GetGitSource() *CancelDeploymentGitSourceUnion {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *CancelDeploymentResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CancelDeploymentResponseBody) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *CancelDeploymentResponseBody) GetOriginCacheRegion() *string {
	if o == nil {
		return nil
	}
	return o.OriginCacheRegion
}

func (o *CancelDeploymentResponseBody) GetNodeVersion() *CancelDeploymentNodeVersion {
	if o == nil {
		return nil
	}
	return o.NodeVersion
}

func (o *CancelDeploymentResponseBody) GetProject() *CancelDeploymentProject {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CancelDeploymentResponseBody) GetReadyState() CancelDeploymentReadyState {
	if o == nil {
		return CancelDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *CancelDeploymentResponseBody) GetReadySubstate() *CancelDeploymentReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CancelDeploymentResponseBody) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *CancelDeploymentResponseBody) GetSoftDeletedByRetention() *bool {
	if o == nil {
		return nil
	}
	return o.SoftDeletedByRetention
}

func (o *CancelDeploymentResponseBody) GetSource() *CancelDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CancelDeploymentResponseBody) GetTarget() *CancelDeploymentTargetEnum {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CancelDeploymentResponseBody) GetType() CancelDeploymentType {
	if o == nil {
		return CancelDeploymentType("")
	}
	return o.Type
}

func (o *CancelDeploymentResponseBody) GetUndeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UndeletedAt
}

func (o *CancelDeploymentResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CancelDeploymentResponseBody) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *CancelDeploymentResponseBody) GetOidcTokenClaims() *CancelDeploymentOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *CancelDeploymentResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CancelDeploymentResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CancelDeploymentResponseBody) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CancelDeploymentResponseBody) GetCrons() []CancelDeploymentCron {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CancelDeploymentResponseBody) GetFunctions() map[string]CancelDeploymentFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *CancelDeploymentResponseBody) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CancelDeploymentResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CancelDeploymentResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CancelDeploymentResponseBody) GetPlan() CancelDeploymentPlan {
	if o == nil {
		return CancelDeploymentPlan("")
	}
	return o.Plan
}

func (o *CancelDeploymentResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CancelDeploymentResponseBody) GetRoutes() []CancelDeploymentRouteUnion {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *CancelDeploymentResponseBody) GetGitRepo() *CancelDeploymentGitRepoUnion {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *CancelDeploymentResponseBody) GetFlags() *CancelDeploymentFlagsUnion {
	if o == nil {
		return nil
	}
	return o.Flags
}

func (o *CancelDeploymentResponseBody) GetMicrofrontends() *CancelDeploymentMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *CancelDeploymentResponseBody) GetConfig() *CancelDeploymentConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *CancelDeploymentResponseBody) GetChecks() *CancelDeploymentChecks {
	if o == nil {
		return nil
	}
	return o.Checks
}

type CancelDeploymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CancelDeploymentResponseBody
}

func (o *CancelDeploymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CancelDeploymentResponse) GetObject() *CancelDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
