// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type CompleteRollingReleaseRequestBody struct {
	// The ID of the canary deployment to complete
	CanaryDeploymentID string `json:"canaryDeploymentId"`
}

func (o *CompleteRollingReleaseRequestBody) GetCanaryDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.CanaryDeploymentID
}

type CompleteRollingReleaseRequest struct {
	// Project ID or project name (URL-encoded)
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                            `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CompleteRollingReleaseRequestBody `request:"mediaType=application/json"`
}

func (o *CompleteRollingReleaseRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *CompleteRollingReleaseRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CompleteRollingReleaseRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CompleteRollingReleaseRequest) GetRequestBody() *CompleteRollingReleaseRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CompleteRollingReleaseState - The current state of the rolling release
type CompleteRollingReleaseState string

const (
	CompleteRollingReleaseStateActive   CompleteRollingReleaseState = "ACTIVE"
	CompleteRollingReleaseStateComplete CompleteRollingReleaseState = "COMPLETE"
	CompleteRollingReleaseStateAborted  CompleteRollingReleaseState = "ABORTED"
)

func (e CompleteRollingReleaseState) ToPointer() *CompleteRollingReleaseState {
	return &e
}
func (e *CompleteRollingReleaseState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "ABORTED":
		*e = CompleteRollingReleaseState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseState: %v", v)
	}
}

type CompleteRollingReleaseCurrentDeploymentTarget string

const (
	CompleteRollingReleaseCurrentDeploymentTargetStaging    CompleteRollingReleaseCurrentDeploymentTarget = "staging"
	CompleteRollingReleaseCurrentDeploymentTargetProduction CompleteRollingReleaseCurrentDeploymentTarget = "production"
)

func (e CompleteRollingReleaseCurrentDeploymentTarget) ToPointer() *CompleteRollingReleaseCurrentDeploymentTarget {
	return &e
}
func (e *CompleteRollingReleaseCurrentDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CompleteRollingReleaseCurrentDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseCurrentDeploymentTarget: %v", v)
	}
}

type CompleteRollingReleaseCurrentDeploymentSource string

const (
	CompleteRollingReleaseCurrentDeploymentSourceAPITriggerGitDeploy CompleteRollingReleaseCurrentDeploymentSource = "api-trigger-git-deploy"
	CompleteRollingReleaseCurrentDeploymentSourceCli                 CompleteRollingReleaseCurrentDeploymentSource = "cli"
	CompleteRollingReleaseCurrentDeploymentSourceCloneRepo           CompleteRollingReleaseCurrentDeploymentSource = "clone/repo"
	CompleteRollingReleaseCurrentDeploymentSourceGit                 CompleteRollingReleaseCurrentDeploymentSource = "git"
	CompleteRollingReleaseCurrentDeploymentSourceImport              CompleteRollingReleaseCurrentDeploymentSource = "import"
	CompleteRollingReleaseCurrentDeploymentSourceImportRepo          CompleteRollingReleaseCurrentDeploymentSource = "import/repo"
	CompleteRollingReleaseCurrentDeploymentSourceRedeploy            CompleteRollingReleaseCurrentDeploymentSource = "redeploy"
	CompleteRollingReleaseCurrentDeploymentSourceV0Web               CompleteRollingReleaseCurrentDeploymentSource = "v0-web"
)

func (e CompleteRollingReleaseCurrentDeploymentSource) ToPointer() *CompleteRollingReleaseCurrentDeploymentSource {
	return &e
}
func (e *CompleteRollingReleaseCurrentDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = CompleteRollingReleaseCurrentDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseCurrentDeploymentSource: %v", v)
	}
}

type CompleteRollingReleaseCurrentDeploymentReadyState string

const (
	CompleteRollingReleaseCurrentDeploymentReadyStateBuilding     CompleteRollingReleaseCurrentDeploymentReadyState = "BUILDING"
	CompleteRollingReleaseCurrentDeploymentReadyStateError        CompleteRollingReleaseCurrentDeploymentReadyState = "ERROR"
	CompleteRollingReleaseCurrentDeploymentReadyStateInitializing CompleteRollingReleaseCurrentDeploymentReadyState = "INITIALIZING"
	CompleteRollingReleaseCurrentDeploymentReadyStateQueued       CompleteRollingReleaseCurrentDeploymentReadyState = "QUEUED"
	CompleteRollingReleaseCurrentDeploymentReadyStateReady        CompleteRollingReleaseCurrentDeploymentReadyState = "READY"
	CompleteRollingReleaseCurrentDeploymentReadyStateCanceled     CompleteRollingReleaseCurrentDeploymentReadyState = "CANCELED"
)

func (e CompleteRollingReleaseCurrentDeploymentReadyState) ToPointer() *CompleteRollingReleaseCurrentDeploymentReadyState {
	return &e
}
func (e *CompleteRollingReleaseCurrentDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CompleteRollingReleaseCurrentDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseCurrentDeploymentReadyState: %v", v)
	}
}

// CompleteRollingReleaseCurrentDeployment - The current deployment receiving production traffic
type CompleteRollingReleaseCurrentDeployment struct {
	ID           string                                            `json:"id"`
	Name         string                                            `json:"name"`
	URL          string                                            `json:"url"`
	Target       *CompleteRollingReleaseCurrentDeploymentTarget    `json:"target,omitempty"`
	Source       *CompleteRollingReleaseCurrentDeploymentSource    `json:"source,omitempty"`
	CreatedAt    float64                                           `json:"createdAt"`
	ReadyState   CompleteRollingReleaseCurrentDeploymentReadyState `json:"readyState"`
	ReadyStateAt *float64                                          `json:"readyStateAt,omitempty"`
}

func (o *CompleteRollingReleaseCurrentDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CompleteRollingReleaseCurrentDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CompleteRollingReleaseCurrentDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CompleteRollingReleaseCurrentDeployment) GetTarget() *CompleteRollingReleaseCurrentDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CompleteRollingReleaseCurrentDeployment) GetSource() *CompleteRollingReleaseCurrentDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CompleteRollingReleaseCurrentDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CompleteRollingReleaseCurrentDeployment) GetReadyState() CompleteRollingReleaseCurrentDeploymentReadyState {
	if o == nil {
		return CompleteRollingReleaseCurrentDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *CompleteRollingReleaseCurrentDeployment) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

type CompleteRollingReleaseCanaryDeploymentTarget string

const (
	CompleteRollingReleaseCanaryDeploymentTargetStaging    CompleteRollingReleaseCanaryDeploymentTarget = "staging"
	CompleteRollingReleaseCanaryDeploymentTargetProduction CompleteRollingReleaseCanaryDeploymentTarget = "production"
)

func (e CompleteRollingReleaseCanaryDeploymentTarget) ToPointer() *CompleteRollingReleaseCanaryDeploymentTarget {
	return &e
}
func (e *CompleteRollingReleaseCanaryDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = CompleteRollingReleaseCanaryDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseCanaryDeploymentTarget: %v", v)
	}
}

type CompleteRollingReleaseCanaryDeploymentSource string

const (
	CompleteRollingReleaseCanaryDeploymentSourceAPITriggerGitDeploy CompleteRollingReleaseCanaryDeploymentSource = "api-trigger-git-deploy"
	CompleteRollingReleaseCanaryDeploymentSourceCli                 CompleteRollingReleaseCanaryDeploymentSource = "cli"
	CompleteRollingReleaseCanaryDeploymentSourceCloneRepo           CompleteRollingReleaseCanaryDeploymentSource = "clone/repo"
	CompleteRollingReleaseCanaryDeploymentSourceGit                 CompleteRollingReleaseCanaryDeploymentSource = "git"
	CompleteRollingReleaseCanaryDeploymentSourceImport              CompleteRollingReleaseCanaryDeploymentSource = "import"
	CompleteRollingReleaseCanaryDeploymentSourceImportRepo          CompleteRollingReleaseCanaryDeploymentSource = "import/repo"
	CompleteRollingReleaseCanaryDeploymentSourceRedeploy            CompleteRollingReleaseCanaryDeploymentSource = "redeploy"
	CompleteRollingReleaseCanaryDeploymentSourceV0Web               CompleteRollingReleaseCanaryDeploymentSource = "v0-web"
)

func (e CompleteRollingReleaseCanaryDeploymentSource) ToPointer() *CompleteRollingReleaseCanaryDeploymentSource {
	return &e
}
func (e *CompleteRollingReleaseCanaryDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = CompleteRollingReleaseCanaryDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseCanaryDeploymentSource: %v", v)
	}
}

type CompleteRollingReleaseCanaryDeploymentReadyState string

const (
	CompleteRollingReleaseCanaryDeploymentReadyStateBuilding     CompleteRollingReleaseCanaryDeploymentReadyState = "BUILDING"
	CompleteRollingReleaseCanaryDeploymentReadyStateError        CompleteRollingReleaseCanaryDeploymentReadyState = "ERROR"
	CompleteRollingReleaseCanaryDeploymentReadyStateInitializing CompleteRollingReleaseCanaryDeploymentReadyState = "INITIALIZING"
	CompleteRollingReleaseCanaryDeploymentReadyStateQueued       CompleteRollingReleaseCanaryDeploymentReadyState = "QUEUED"
	CompleteRollingReleaseCanaryDeploymentReadyStateReady        CompleteRollingReleaseCanaryDeploymentReadyState = "READY"
	CompleteRollingReleaseCanaryDeploymentReadyStateCanceled     CompleteRollingReleaseCanaryDeploymentReadyState = "CANCELED"
)

func (e CompleteRollingReleaseCanaryDeploymentReadyState) ToPointer() *CompleteRollingReleaseCanaryDeploymentReadyState {
	return &e
}
func (e *CompleteRollingReleaseCanaryDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CompleteRollingReleaseCanaryDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CompleteRollingReleaseCanaryDeploymentReadyState: %v", v)
	}
}

// CompleteRollingReleaseCanaryDeployment - The canary deployment being rolled out
type CompleteRollingReleaseCanaryDeployment struct {
	ID           string                                           `json:"id"`
	Name         string                                           `json:"name"`
	URL          string                                           `json:"url"`
	Target       *CompleteRollingReleaseCanaryDeploymentTarget    `json:"target,omitempty"`
	Source       *CompleteRollingReleaseCanaryDeploymentSource    `json:"source,omitempty"`
	CreatedAt    float64                                          `json:"createdAt"`
	ReadyState   CompleteRollingReleaseCanaryDeploymentReadyState `json:"readyState"`
	ReadyStateAt *float64                                         `json:"readyStateAt,omitempty"`
}

func (o *CompleteRollingReleaseCanaryDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CompleteRollingReleaseCanaryDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CompleteRollingReleaseCanaryDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CompleteRollingReleaseCanaryDeployment) GetTarget() *CompleteRollingReleaseCanaryDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CompleteRollingReleaseCanaryDeployment) GetSource() *CompleteRollingReleaseCanaryDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *CompleteRollingReleaseCanaryDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CompleteRollingReleaseCanaryDeployment) GetReadyState() CompleteRollingReleaseCanaryDeploymentReadyState {
	if o == nil {
		return CompleteRollingReleaseCanaryDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *CompleteRollingReleaseCanaryDeployment) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// CompleteRollingReleaseStage - All stages configured for this rolling release
type CompleteRollingReleaseStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *CompleteRollingReleaseStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *CompleteRollingReleaseStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *CompleteRollingReleaseStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *CompleteRollingReleaseStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *CompleteRollingReleaseStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// CompleteRollingReleaseActiveStage - The currently active stage, null if the rollout is aborted
type CompleteRollingReleaseActiveStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *CompleteRollingReleaseActiveStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *CompleteRollingReleaseActiveStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *CompleteRollingReleaseActiveStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *CompleteRollingReleaseActiveStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *CompleteRollingReleaseActiveStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// CompleteRollingReleaseNextStage - The next stage to be activated, null if not in ACTIVE state
type CompleteRollingReleaseNextStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *CompleteRollingReleaseNextStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *CompleteRollingReleaseNextStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *CompleteRollingReleaseNextStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *CompleteRollingReleaseNextStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *CompleteRollingReleaseNextStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// CompleteRollingReleaseRollingRelease - Rolling release information including configuration and document details, or null if no rolling release exists
type CompleteRollingReleaseRollingRelease struct {
	// The current state of the rolling release
	State CompleteRollingReleaseState `json:"state"`
	// The current deployment receiving production traffic
	CurrentDeployment *CompleteRollingReleaseCurrentDeployment `json:"currentDeployment"`
	// The canary deployment being rolled out
	CanaryDeployment *CompleteRollingReleaseCanaryDeployment `json:"canaryDeployment"`
	// The ID of a deployment queued for the next rolling release
	QueuedDeploymentID *string `json:"queuedDeploymentId"`
	// All stages configured for this rolling release
	Stages []CompleteRollingReleaseStage `json:"stages"`
	// The currently active stage, null if the rollout is aborted
	ActiveStage *CompleteRollingReleaseActiveStage `json:"activeStage"`
	// The next stage to be activated, null if not in ACTIVE state
	NextStage *CompleteRollingReleaseNextStage `json:"nextStage"`
	// Unix timestamp in milliseconds when the rolling release started
	StartedAt float64 `json:"startedAt"`
	// Unix timestamp in milliseconds when the rolling release was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *CompleteRollingReleaseRollingRelease) GetState() CompleteRollingReleaseState {
	if o == nil {
		return CompleteRollingReleaseState("")
	}
	return o.State
}

func (o *CompleteRollingReleaseRollingRelease) GetCurrentDeployment() *CompleteRollingReleaseCurrentDeployment {
	if o == nil {
		return nil
	}
	return o.CurrentDeployment
}

func (o *CompleteRollingReleaseRollingRelease) GetCanaryDeployment() *CompleteRollingReleaseCanaryDeployment {
	if o == nil {
		return nil
	}
	return o.CanaryDeployment
}

func (o *CompleteRollingReleaseRollingRelease) GetQueuedDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.QueuedDeploymentID
}

func (o *CompleteRollingReleaseRollingRelease) GetStages() []CompleteRollingReleaseStage {
	if o == nil {
		return []CompleteRollingReleaseStage{}
	}
	return o.Stages
}

func (o *CompleteRollingReleaseRollingRelease) GetActiveStage() *CompleteRollingReleaseActiveStage {
	if o == nil {
		return nil
	}
	return o.ActiveStage
}

func (o *CompleteRollingReleaseRollingRelease) GetNextStage() *CompleteRollingReleaseNextStage {
	if o == nil {
		return nil
	}
	return o.NextStage
}

func (o *CompleteRollingReleaseRollingRelease) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *CompleteRollingReleaseRollingRelease) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

// CompleteRollingReleaseResponseBody - The response format for rolling release endpoints that return rolling release information
type CompleteRollingReleaseResponseBody struct {
	// Rolling release information including configuration and document details, or null if no rolling release exists
	RollingRelease *CompleteRollingReleaseRollingRelease `json:"rollingRelease"`
}

func (o *CompleteRollingReleaseResponseBody) GetRollingRelease() *CompleteRollingReleaseRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

type CompleteRollingReleaseResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CompleteRollingReleaseResponseBody
}

func (o *CompleteRollingReleaseResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CompleteRollingReleaseResponse) GetObject() *CompleteRollingReleaseResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
