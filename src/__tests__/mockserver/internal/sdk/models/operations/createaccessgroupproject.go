// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// CreateAccessGroupProjectRoleRequest - The project role that will be added to this Access Group.
type CreateAccessGroupProjectRoleRequest string

const (
	CreateAccessGroupProjectRoleRequestAdmin            CreateAccessGroupProjectRoleRequest = "ADMIN"
	CreateAccessGroupProjectRoleRequestProjectViewer    CreateAccessGroupProjectRoleRequest = "PROJECT_VIEWER"
	CreateAccessGroupProjectRoleRequestProjectDeveloper CreateAccessGroupProjectRoleRequest = "PROJECT_DEVELOPER"
)

func (e CreateAccessGroupProjectRoleRequest) ToPointer() *CreateAccessGroupProjectRoleRequest {
	return &e
}
func (e *CreateAccessGroupProjectRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = CreateAccessGroupProjectRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessGroupProjectRoleRequest: %v", v)
	}
}

type CreateAccessGroupProjectRequestBody struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// The project role that will be added to this Access Group.
	Role CreateAccessGroupProjectRoleRequest `json:"role"`
}

func (o *CreateAccessGroupProjectRequestBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateAccessGroupProjectRequestBody) GetRole() CreateAccessGroupProjectRoleRequest {
	if o == nil {
		return CreateAccessGroupProjectRoleRequest("")
	}
	return o.Role
}

type CreateAccessGroupProjectRequest struct {
	AccessGroupIDOrName string `pathParam:"style=simple,explode=false,name=accessGroupIdOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateAccessGroupProjectRequestBody `request:"mediaType=application/json"`
}

func (o *CreateAccessGroupProjectRequest) GetAccessGroupIDOrName() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupIDOrName
}

func (o *CreateAccessGroupProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateAccessGroupProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateAccessGroupProjectRequest) GetRequestBody() CreateAccessGroupProjectRequestBody {
	if o == nil {
		return CreateAccessGroupProjectRequestBody{}
	}
	return o.RequestBody
}

type CreateAccessGroupProjectRoleResponse string

const (
	CreateAccessGroupProjectRoleResponseAdmin            CreateAccessGroupProjectRoleResponse = "ADMIN"
	CreateAccessGroupProjectRoleResponseProjectDeveloper CreateAccessGroupProjectRoleResponse = "PROJECT_DEVELOPER"
	CreateAccessGroupProjectRoleResponseProjectViewer    CreateAccessGroupProjectRoleResponse = "PROJECT_VIEWER"
)

func (e CreateAccessGroupProjectRoleResponse) ToPointer() *CreateAccessGroupProjectRoleResponse {
	return &e
}
func (e *CreateAccessGroupProjectRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = CreateAccessGroupProjectRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateAccessGroupProjectRoleResponse: %v", v)
	}
}

type CreateAccessGroupProjectResponseBody struct {
	TeamID        string                               `json:"teamId"`
	AccessGroupID string                               `json:"accessGroupId"`
	ProjectID     string                               `json:"projectId"`
	Role          CreateAccessGroupProjectRoleResponse `json:"role"`
	CreatedAt     string                               `json:"createdAt"`
	UpdatedAt     string                               `json:"updatedAt"`
}

func (o *CreateAccessGroupProjectResponseBody) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *CreateAccessGroupProjectResponseBody) GetAccessGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupID
}

func (o *CreateAccessGroupProjectResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateAccessGroupProjectResponseBody) GetRole() CreateAccessGroupProjectRoleResponse {
	if o == nil {
		return CreateAccessGroupProjectRoleResponse("")
	}
	return o.Role
}

func (o *CreateAccessGroupProjectResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *CreateAccessGroupProjectResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type CreateAccessGroupProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateAccessGroupProjectResponseBody
}

func (o *CreateAccessGroupProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateAccessGroupProjectResponse) GetObject() *CreateAccessGroupProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
