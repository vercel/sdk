// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// CreateConfigurableLogDrainDeliveryFormat - The delivery log format
type CreateConfigurableLogDrainDeliveryFormat string

const (
	CreateConfigurableLogDrainDeliveryFormatJSON   CreateConfigurableLogDrainDeliveryFormat = "json"
	CreateConfigurableLogDrainDeliveryFormatNdjson CreateConfigurableLogDrainDeliveryFormat = "ndjson"
)

func (e CreateConfigurableLogDrainDeliveryFormat) ToPointer() *CreateConfigurableLogDrainDeliveryFormat {
	return &e
}
func (e *CreateConfigurableLogDrainDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = CreateConfigurableLogDrainDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainDeliveryFormat: %v", v)
	}
}

type CreateConfigurableLogDrainSource string

const (
	CreateConfigurableLogDrainSourceStatic   CreateConfigurableLogDrainSource = "static"
	CreateConfigurableLogDrainSourceLambda   CreateConfigurableLogDrainSource = "lambda"
	CreateConfigurableLogDrainSourceBuild    CreateConfigurableLogDrainSource = "build"
	CreateConfigurableLogDrainSourceEdge     CreateConfigurableLogDrainSource = "edge"
	CreateConfigurableLogDrainSourceExternal CreateConfigurableLogDrainSource = "external"
	CreateConfigurableLogDrainSourceFirewall CreateConfigurableLogDrainSource = "firewall"
)

func (e CreateConfigurableLogDrainSource) ToPointer() *CreateConfigurableLogDrainSource {
	return &e
}
func (e *CreateConfigurableLogDrainSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "firewall":
		*e = CreateConfigurableLogDrainSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainSource: %v", v)
	}
}

type CreateConfigurableLogDrainEnvironment string

const (
	CreateConfigurableLogDrainEnvironmentPreview    CreateConfigurableLogDrainEnvironment = "preview"
	CreateConfigurableLogDrainEnvironmentProduction CreateConfigurableLogDrainEnvironment = "production"
)

func (e CreateConfigurableLogDrainEnvironment) ToPointer() *CreateConfigurableLogDrainEnvironment {
	return &e
}
func (e *CreateConfigurableLogDrainEnvironment) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = CreateConfigurableLogDrainEnvironment(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateConfigurableLogDrainEnvironment: %v", v)
	}
}

type CreateConfigurableLogDrainRequestBody struct {
	// The delivery log format
	DeliveryFormat CreateConfigurableLogDrainDeliveryFormat `json:"deliveryFormat"`
	// The log drain url
	URL string `json:"url"`
	// Headers to be sent together with the request
	Headers      map[string]string                       `json:"headers,omitempty"`
	ProjectIds   []string                                `json:"projectIds,omitempty"`
	Sources      []CreateConfigurableLogDrainSource      `json:"sources"`
	Environments []CreateConfigurableLogDrainEnvironment `json:"environments,omitempty"`
	// Custom secret of log drain
	Secret *string `json:"secret,omitempty"`
	// The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
	SamplingRate *float64 `json:"samplingRate,omitempty"`
	// The custom name of this log drain.
	Name *string `json:"name,omitempty"`
}

func (o *CreateConfigurableLogDrainRequestBody) GetDeliveryFormat() CreateConfigurableLogDrainDeliveryFormat {
	if o == nil {
		return CreateConfigurableLogDrainDeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *CreateConfigurableLogDrainRequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateConfigurableLogDrainRequestBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateConfigurableLogDrainRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateConfigurableLogDrainRequestBody) GetSources() []CreateConfigurableLogDrainSource {
	if o == nil {
		return []CreateConfigurableLogDrainSource{}
	}
	return o.Sources
}

func (o *CreateConfigurableLogDrainRequestBody) GetEnvironments() []CreateConfigurableLogDrainEnvironment {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateConfigurableLogDrainRequestBody) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateConfigurableLogDrainRequestBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *CreateConfigurableLogDrainRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

type CreateConfigurableLogDrainRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                               `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateConfigurableLogDrainRequestBody `request:"mediaType=application/json"`
}

func (o *CreateConfigurableLogDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateConfigurableLogDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateConfigurableLogDrainRequest) GetRequestBody() CreateConfigurableLogDrainRequestBody {
	if o == nil {
		return CreateConfigurableLogDrainRequestBody{}
	}
	return o.RequestBody
}

type CreateConfigurableLogDrainResponseBody struct {
}

type CreateConfigurableLogDrainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateConfigurableLogDrainResponseBody
}

func (o *CreateConfigurableLogDrainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateConfigurableLogDrainResponse) GetObject() *CreateConfigurableLogDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
