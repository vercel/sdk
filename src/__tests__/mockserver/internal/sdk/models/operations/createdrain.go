// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type CreateDrainProjects string

const (
	CreateDrainProjectsSome CreateDrainProjects = "some"
	CreateDrainProjectsAll  CreateDrainProjects = "all"
)

func (e CreateDrainProjects) ToPointer() *CreateDrainProjects {
	return &e
}
func (e *CreateDrainProjects) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "some":
		fallthrough
	case "all":
		*e = CreateDrainProjects(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainProjects: %v", v)
	}
}

type CreateDrainFilterRequest3 struct {
	Type string `json:"type"`
	Text string `json:"text"`
}

func (c CreateDrainFilterRequest3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterRequest3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterRequest3) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDrainFilterRequest3) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type CreateDrainProjectRequest struct {
	Ids []string `json:"ids,omitempty"`
}

func (c CreateDrainProjectRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainProjectRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainProjectRequest) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type CreateDrainLogRequest struct {
	Sources []string `json:"sources,omitempty"`
}

func (c CreateDrainLogRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainLogRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainLogRequest) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type CreateDrainDeploymentRequest struct {
	Environments []string `json:"environments,omitempty"`
}

func (c CreateDrainDeploymentRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeploymentRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeploymentRequest) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type CreateDrainFilterRequest2 struct {
	Type       string                        `json:"type"`
	Project    *CreateDrainProjectRequest    `json:"project,omitempty"`
	Log        *CreateDrainLogRequest        `json:"log,omitempty"`
	Deployment *CreateDrainDeploymentRequest `json:"deployment,omitempty"`
}

func (c CreateDrainFilterRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterRequest2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDrainFilterRequest2) GetProject() *CreateDrainProjectRequest {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateDrainFilterRequest2) GetLog() *CreateDrainLogRequest {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *CreateDrainFilterRequest2) GetDeployment() *CreateDrainDeploymentRequest {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type CreateDrainFilterRequestUnion2Type string

const (
	CreateDrainFilterRequestUnion2TypeCreateDrainFilterRequest2 CreateDrainFilterRequestUnion2Type = "createDrain_filter_request_2"
	CreateDrainFilterRequestUnion2TypeCreateDrainFilterRequest3 CreateDrainFilterRequestUnion2Type = "createDrain_filter_request_3"
)

type CreateDrainFilterRequestUnion2 struct {
	CreateDrainFilterRequest2 *CreateDrainFilterRequest2 `queryParam:"inline"`
	CreateDrainFilterRequest3 *CreateDrainFilterRequest3 `queryParam:"inline"`

	Type CreateDrainFilterRequestUnion2Type
}

func CreateCreateDrainFilterRequestUnion2CreateDrainFilterRequest2(createDrainFilterRequest2 CreateDrainFilterRequest2) CreateDrainFilterRequestUnion2 {
	typ := CreateDrainFilterRequestUnion2TypeCreateDrainFilterRequest2

	return CreateDrainFilterRequestUnion2{
		CreateDrainFilterRequest2: &createDrainFilterRequest2,
		Type:                      typ,
	}
}

func CreateCreateDrainFilterRequestUnion2CreateDrainFilterRequest3(createDrainFilterRequest3 CreateDrainFilterRequest3) CreateDrainFilterRequestUnion2 {
	typ := CreateDrainFilterRequestUnion2TypeCreateDrainFilterRequest3

	return CreateDrainFilterRequestUnion2{
		CreateDrainFilterRequest3: &createDrainFilterRequest3,
		Type:                      typ,
	}
}

func (u *CreateDrainFilterRequestUnion2) UnmarshalJSON(data []byte) error {

	var createDrainFilterRequest3 CreateDrainFilterRequest3 = CreateDrainFilterRequest3{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterRequest3, "", true, nil); err == nil {
		u.CreateDrainFilterRequest3 = &createDrainFilterRequest3
		u.Type = CreateDrainFilterRequestUnion2TypeCreateDrainFilterRequest3
		return nil
	}

	var createDrainFilterRequest2 CreateDrainFilterRequest2 = CreateDrainFilterRequest2{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterRequest2, "", true, nil); err == nil {
		u.CreateDrainFilterRequest2 = &createDrainFilterRequest2
		u.Type = CreateDrainFilterRequestUnion2TypeCreateDrainFilterRequest2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainFilterRequestUnion2", string(data))
}

func (u CreateDrainFilterRequestUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateDrainFilterRequest2 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterRequest2, "", true)
	}

	if u.CreateDrainFilterRequest3 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterRequest3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainFilterRequestUnion2: all fields are null")
}

type CreateDrainFilterRequest1 struct {
	Version string                         `json:"version"`
	Filter  CreateDrainFilterRequestUnion2 `json:"filter"`
}

func (c CreateDrainFilterRequest1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterRequest1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterRequest1) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

func (o *CreateDrainFilterRequest1) GetFilter() CreateDrainFilterRequestUnion2 {
	if o == nil {
		return CreateDrainFilterRequestUnion2{}
	}
	return o.Filter
}

type CreateDrainFilterRequestUnion1Type string

const (
	CreateDrainFilterRequestUnion1TypeStr                       CreateDrainFilterRequestUnion1Type = "str"
	CreateDrainFilterRequestUnion1TypeCreateDrainFilterRequest1 CreateDrainFilterRequestUnion1Type = "createDrain_filter_request_1"
)

type CreateDrainFilterRequestUnion1 struct {
	Str                       *string                    `queryParam:"inline"`
	CreateDrainFilterRequest1 *CreateDrainFilterRequest1 `queryParam:"inline"`

	Type CreateDrainFilterRequestUnion1Type
}

func CreateCreateDrainFilterRequestUnion1Str(str string) CreateDrainFilterRequestUnion1 {
	typ := CreateDrainFilterRequestUnion1TypeStr

	return CreateDrainFilterRequestUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateDrainFilterRequestUnion1CreateDrainFilterRequest1(createDrainFilterRequest1 CreateDrainFilterRequest1) CreateDrainFilterRequestUnion1 {
	typ := CreateDrainFilterRequestUnion1TypeCreateDrainFilterRequest1

	return CreateDrainFilterRequestUnion1{
		CreateDrainFilterRequest1: &createDrainFilterRequest1,
		Type:                      typ,
	}
}

func (u *CreateDrainFilterRequestUnion1) UnmarshalJSON(data []byte) error {

	var createDrainFilterRequest1 CreateDrainFilterRequest1 = CreateDrainFilterRequest1{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterRequest1, "", true, nil); err == nil {
		u.CreateDrainFilterRequest1 = &createDrainFilterRequest1
		u.Type = CreateDrainFilterRequestUnion1TypeCreateDrainFilterRequest1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateDrainFilterRequestUnion1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainFilterRequestUnion1", string(data))
}

func (u CreateDrainFilterRequestUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateDrainFilterRequest1 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterRequest1, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainFilterRequestUnion1: all fields are null")
}

type CreateDrainSchemasRequest struct {
	Version string `json:"version"`
}

func (o *CreateDrainSchemasRequest) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type CreateDrainDeliveryRequest3 struct {
	Type     string `json:"type"`
	Endpoint string `json:"endpoint"`
	Secret   string `json:"secret"`
}

func (c CreateDrainDeliveryRequest3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryRequest3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryRequest3) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDrainDeliveryRequest3) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryRequest3) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type CreateDrainEndpointRequest struct {
	Traces string `json:"traces"`
}

func (c CreateDrainEndpointRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainEndpointRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainEndpointRequest) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type CreateDrainEndpointUnionType string

const (
	CreateDrainEndpointUnionTypeCreateDrainEndpointRequest CreateDrainEndpointUnionType = "createDrain_endpoint_request"
)

type CreateDrainEndpointUnion struct {
	CreateDrainEndpointRequest *CreateDrainEndpointRequest `queryParam:"inline"`

	Type CreateDrainEndpointUnionType
}

func CreateCreateDrainEndpointUnionCreateDrainEndpointRequest(createDrainEndpointRequest CreateDrainEndpointRequest) CreateDrainEndpointUnion {
	typ := CreateDrainEndpointUnionTypeCreateDrainEndpointRequest

	return CreateDrainEndpointUnion{
		CreateDrainEndpointRequest: &createDrainEndpointRequest,
		Type:                       typ,
	}
}

func (u *CreateDrainEndpointUnion) UnmarshalJSON(data []byte) error {

	var createDrainEndpointRequest CreateDrainEndpointRequest = CreateDrainEndpointRequest{}
	if err := utils.UnmarshalJSON(data, &createDrainEndpointRequest, "", true, nil); err == nil {
		u.CreateDrainEndpointRequest = &createDrainEndpointRequest
		u.Type = CreateDrainEndpointUnionTypeCreateDrainEndpointRequest
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainEndpointUnion", string(data))
}

func (u CreateDrainEndpointUnion) MarshalJSON() ([]byte, error) {
	if u.CreateDrainEndpointRequest != nil {
		return utils.MarshalJSON(u.CreateDrainEndpointRequest, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainEndpointUnion: all fields are null")
}

type CreateDrainEncodingRequest2 string

const (
	CreateDrainEncodingRequest2Proto CreateDrainEncodingRequest2 = "proto"
	CreateDrainEncodingRequest2JSON  CreateDrainEncodingRequest2 = "json"
)

func (e CreateDrainEncodingRequest2) ToPointer() *CreateDrainEncodingRequest2 {
	return &e
}
func (e *CreateDrainEncodingRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "proto":
		fallthrough
	case "json":
		*e = CreateDrainEncodingRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEncodingRequest2: %v", v)
	}
}

type CreateDrainDeliveryRequest2 struct {
	Type     string                      `json:"type"`
	Endpoint CreateDrainEndpointUnion    `json:"endpoint"`
	Encoding CreateDrainEncodingRequest2 `json:"encoding"`
	Headers  map[string]string           `json:"headers"`
	Secret   *string                     `json:"secret,omitempty"`
}

func (c CreateDrainDeliveryRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryRequest2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDrainDeliveryRequest2) GetEndpoint() CreateDrainEndpointUnion {
	if o == nil {
		return CreateDrainEndpointUnion{}
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryRequest2) GetEncoding() CreateDrainEncodingRequest2 {
	if o == nil {
		return CreateDrainEncodingRequest2("")
	}
	return o.Encoding
}

func (o *CreateDrainDeliveryRequest2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *CreateDrainDeliveryRequest2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateDrainCompressionRequest string

const (
	CreateDrainCompressionRequestGzip CreateDrainCompressionRequest = "gzip"
	CreateDrainCompressionRequestNone CreateDrainCompressionRequest = "none"
)

func (e CreateDrainCompressionRequest) ToPointer() *CreateDrainCompressionRequest {
	return &e
}
func (e *CreateDrainCompressionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = CreateDrainCompressionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainCompressionRequest: %v", v)
	}
}

type CreateDrainEncodingRequest1 string

const (
	CreateDrainEncodingRequest1JSON   CreateDrainEncodingRequest1 = "json"
	CreateDrainEncodingRequest1Ndjson CreateDrainEncodingRequest1 = "ndjson"
)

func (e CreateDrainEncodingRequest1) ToPointer() *CreateDrainEncodingRequest1 {
	return &e
}
func (e *CreateDrainEncodingRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = CreateDrainEncodingRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEncodingRequest1: %v", v)
	}
}

type CreateDrainDeliveryRequest1 struct {
	Type        string                         `json:"type"`
	Endpoint    string                         `json:"endpoint"`
	Compression *CreateDrainCompressionRequest `json:"compression,omitempty"`
	Encoding    CreateDrainEncodingRequest1    `json:"encoding"`
	Headers     map[string]string              `json:"headers"`
	Secret      *string                        `json:"secret,omitempty"`
}

func (c CreateDrainDeliveryRequest1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryRequest1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryRequest1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDrainDeliveryRequest1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryRequest1) GetCompression() *CreateDrainCompressionRequest {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *CreateDrainDeliveryRequest1) GetEncoding() CreateDrainEncodingRequest1 {
	if o == nil {
		return CreateDrainEncodingRequest1("")
	}
	return o.Encoding
}

func (o *CreateDrainDeliveryRequest1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *CreateDrainDeliveryRequest1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateDrainDeliveryRequestUnionType string

const (
	CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest1 CreateDrainDeliveryRequestUnionType = "createDrain_delivery_request_1"
	CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest2 CreateDrainDeliveryRequestUnionType = "createDrain_delivery_request_2"
	CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest3 CreateDrainDeliveryRequestUnionType = "createDrain_delivery_request_3"
)

type CreateDrainDeliveryRequestUnion struct {
	CreateDrainDeliveryRequest1 *CreateDrainDeliveryRequest1 `queryParam:"inline"`
	CreateDrainDeliveryRequest2 *CreateDrainDeliveryRequest2 `queryParam:"inline"`
	CreateDrainDeliveryRequest3 *CreateDrainDeliveryRequest3 `queryParam:"inline"`

	Type CreateDrainDeliveryRequestUnionType
}

func CreateCreateDrainDeliveryRequestUnionCreateDrainDeliveryRequest1(createDrainDeliveryRequest1 CreateDrainDeliveryRequest1) CreateDrainDeliveryRequestUnion {
	typ := CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest1

	return CreateDrainDeliveryRequestUnion{
		CreateDrainDeliveryRequest1: &createDrainDeliveryRequest1,
		Type:                        typ,
	}
}

func CreateCreateDrainDeliveryRequestUnionCreateDrainDeliveryRequest2(createDrainDeliveryRequest2 CreateDrainDeliveryRequest2) CreateDrainDeliveryRequestUnion {
	typ := CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest2

	return CreateDrainDeliveryRequestUnion{
		CreateDrainDeliveryRequest2: &createDrainDeliveryRequest2,
		Type:                        typ,
	}
}

func CreateCreateDrainDeliveryRequestUnionCreateDrainDeliveryRequest3(createDrainDeliveryRequest3 CreateDrainDeliveryRequest3) CreateDrainDeliveryRequestUnion {
	typ := CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest3

	return CreateDrainDeliveryRequestUnion{
		CreateDrainDeliveryRequest3: &createDrainDeliveryRequest3,
		Type:                        typ,
	}
}

func (u *CreateDrainDeliveryRequestUnion) UnmarshalJSON(data []byte) error {

	var createDrainDeliveryRequest1 CreateDrainDeliveryRequest1 = CreateDrainDeliveryRequest1{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryRequest1, "", true, nil); err == nil {
		u.CreateDrainDeliveryRequest1 = &createDrainDeliveryRequest1
		u.Type = CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest1
		return nil
	}

	var createDrainDeliveryRequest2 CreateDrainDeliveryRequest2 = CreateDrainDeliveryRequest2{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryRequest2, "", true, nil); err == nil {
		u.CreateDrainDeliveryRequest2 = &createDrainDeliveryRequest2
		u.Type = CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest2
		return nil
	}

	var createDrainDeliveryRequest3 CreateDrainDeliveryRequest3 = CreateDrainDeliveryRequest3{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryRequest3, "", true, nil); err == nil {
		u.CreateDrainDeliveryRequest3 = &createDrainDeliveryRequest3
		u.Type = CreateDrainDeliveryRequestUnionTypeCreateDrainDeliveryRequest3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainDeliveryRequestUnion", string(data))
}

func (u CreateDrainDeliveryRequestUnion) MarshalJSON() ([]byte, error) {
	if u.CreateDrainDeliveryRequest1 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryRequest1, "", true)
	}

	if u.CreateDrainDeliveryRequest2 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryRequest2, "", true)
	}

	if u.CreateDrainDeliveryRequest3 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryRequest3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainDeliveryRequestUnion: all fields are null")
}

// CreateDrainEnvRequest - Environment to apply sampling to
type CreateDrainEnvRequest string

const (
	CreateDrainEnvRequestProduction CreateDrainEnvRequest = "production"
	CreateDrainEnvRequestPreview    CreateDrainEnvRequest = "preview"
)

func (e CreateDrainEnvRequest) ToPointer() *CreateDrainEnvRequest {
	return &e
}
func (e *CreateDrainEnvRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateDrainEnvRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEnvRequest: %v", v)
	}
}

type CreateDrainSamplingRequest struct {
	Type string `json:"type"`
	// Sampling rate from 0 to 1 (e.g., 0.1 for 10%)
	Rate float64 `json:"rate"`
	// Environment to apply sampling to
	Env *CreateDrainEnvRequest `json:"env,omitempty"`
	// Request path prefix to apply the sampling rule to
	RequestPath *string `json:"requestPath,omitempty"`
}

func (o *CreateDrainSamplingRequest) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateDrainSamplingRequest) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *CreateDrainSamplingRequest) GetEnv() *CreateDrainEnvRequest {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateDrainSamplingRequest) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type CreateDrainTransform struct {
	ID string `json:"id"`
}

func (o *CreateDrainTransform) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type CreateDrainSourceRequest4 struct {
	Kind *string `default:"self-served" json:"kind"`
}

func (c CreateDrainSourceRequest4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceRequest4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceRequest4) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type CreateDrainSourceRequest3 struct {
	Kind *string `default:"integration" json:"kind"`
}

func (c CreateDrainSourceRequest3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceRequest3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceRequest3) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type CreateDrainSourceRequest2 struct {
	Kind       *string `default:"integration" json:"kind"`
	ResourceID string  `json:"resourceId"`
}

func (c CreateDrainSourceRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"resourceId"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceRequest2) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *CreateDrainSourceRequest2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type CreateDrainSourceRequest1 struct {
	Kind               *string `default:"integration" json:"kind"`
	ExternalResourceID string  `json:"externalResourceId"`
}

func (c CreateDrainSourceRequest1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceRequest1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"externalResourceId"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceRequest1) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *CreateDrainSourceRequest1) GetExternalResourceID() string {
	if o == nil {
		return ""
	}
	return o.ExternalResourceID
}

type CreateDrainSourceRequestUnion2Type string

const (
	CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest1 CreateDrainSourceRequestUnion2Type = "createDrain_source_request_1"
	CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest2 CreateDrainSourceRequestUnion2Type = "createDrain_source_request_2"
	CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest3 CreateDrainSourceRequestUnion2Type = "createDrain_source_request_3"
)

type CreateDrainSourceRequestUnion2 struct {
	CreateDrainSourceRequest1 *CreateDrainSourceRequest1 `queryParam:"inline"`
	CreateDrainSourceRequest2 *CreateDrainSourceRequest2 `queryParam:"inline"`
	CreateDrainSourceRequest3 *CreateDrainSourceRequest3 `queryParam:"inline"`

	Type CreateDrainSourceRequestUnion2Type
}

func CreateCreateDrainSourceRequestUnion2CreateDrainSourceRequest1(createDrainSourceRequest1 CreateDrainSourceRequest1) CreateDrainSourceRequestUnion2 {
	typ := CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest1

	return CreateDrainSourceRequestUnion2{
		CreateDrainSourceRequest1: &createDrainSourceRequest1,
		Type:                      typ,
	}
}

func CreateCreateDrainSourceRequestUnion2CreateDrainSourceRequest2(createDrainSourceRequest2 CreateDrainSourceRequest2) CreateDrainSourceRequestUnion2 {
	typ := CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest2

	return CreateDrainSourceRequestUnion2{
		CreateDrainSourceRequest2: &createDrainSourceRequest2,
		Type:                      typ,
	}
}

func CreateCreateDrainSourceRequestUnion2CreateDrainSourceRequest3(createDrainSourceRequest3 CreateDrainSourceRequest3) CreateDrainSourceRequestUnion2 {
	typ := CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest3

	return CreateDrainSourceRequestUnion2{
		CreateDrainSourceRequest3: &createDrainSourceRequest3,
		Type:                      typ,
	}
}

func (u *CreateDrainSourceRequestUnion2) UnmarshalJSON(data []byte) error {

	var createDrainSourceRequest1 CreateDrainSourceRequest1 = CreateDrainSourceRequest1{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceRequest1, "", true, nil); err == nil {
		u.CreateDrainSourceRequest1 = &createDrainSourceRequest1
		u.Type = CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest1
		return nil
	}

	var createDrainSourceRequest2 CreateDrainSourceRequest2 = CreateDrainSourceRequest2{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceRequest2, "", true, nil); err == nil {
		u.CreateDrainSourceRequest2 = &createDrainSourceRequest2
		u.Type = CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest2
		return nil
	}

	var createDrainSourceRequest3 CreateDrainSourceRequest3 = CreateDrainSourceRequest3{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceRequest3, "", true, nil); err == nil {
		u.CreateDrainSourceRequest3 = &createDrainSourceRequest3
		u.Type = CreateDrainSourceRequestUnion2TypeCreateDrainSourceRequest3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainSourceRequestUnion2", string(data))
}

func (u CreateDrainSourceRequestUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateDrainSourceRequest1 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceRequest1, "", true)
	}

	if u.CreateDrainSourceRequest2 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceRequest2, "", true)
	}

	if u.CreateDrainSourceRequest3 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceRequest3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainSourceRequestUnion2: all fields are null")
}

type CreateDrainSourceRequestUnion1Type string

const (
	CreateDrainSourceRequestUnion1TypeCreateDrainSourceRequestUnion2 CreateDrainSourceRequestUnion1Type = "createDrain_source_request_union_2"
	CreateDrainSourceRequestUnion1TypeCreateDrainSourceRequest4      CreateDrainSourceRequestUnion1Type = "createDrain_source_request_4"
)

type CreateDrainSourceRequestUnion1 struct {
	CreateDrainSourceRequestUnion2 *CreateDrainSourceRequestUnion2 `queryParam:"inline"`
	CreateDrainSourceRequest4      *CreateDrainSourceRequest4      `queryParam:"inline"`

	Type CreateDrainSourceRequestUnion1Type
}

func CreateCreateDrainSourceRequestUnion1CreateDrainSourceRequestUnion2(createDrainSourceRequestUnion2 CreateDrainSourceRequestUnion2) CreateDrainSourceRequestUnion1 {
	typ := CreateDrainSourceRequestUnion1TypeCreateDrainSourceRequestUnion2

	return CreateDrainSourceRequestUnion1{
		CreateDrainSourceRequestUnion2: &createDrainSourceRequestUnion2,
		Type:                           typ,
	}
}

func CreateCreateDrainSourceRequestUnion1CreateDrainSourceRequest4(createDrainSourceRequest4 CreateDrainSourceRequest4) CreateDrainSourceRequestUnion1 {
	typ := CreateDrainSourceRequestUnion1TypeCreateDrainSourceRequest4

	return CreateDrainSourceRequestUnion1{
		CreateDrainSourceRequest4: &createDrainSourceRequest4,
		Type:                      typ,
	}
}

func (u *CreateDrainSourceRequestUnion1) UnmarshalJSON(data []byte) error {

	var createDrainSourceRequestUnion2 CreateDrainSourceRequestUnion2 = CreateDrainSourceRequestUnion2{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceRequestUnion2, "", true, nil); err == nil {
		u.CreateDrainSourceRequestUnion2 = &createDrainSourceRequestUnion2
		u.Type = CreateDrainSourceRequestUnion1TypeCreateDrainSourceRequestUnion2
		return nil
	}

	var createDrainSourceRequest4 CreateDrainSourceRequest4 = CreateDrainSourceRequest4{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceRequest4, "", true, nil); err == nil {
		u.CreateDrainSourceRequest4 = &createDrainSourceRequest4
		u.Type = CreateDrainSourceRequestUnion1TypeCreateDrainSourceRequest4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainSourceRequestUnion1", string(data))
}

func (u CreateDrainSourceRequestUnion1) MarshalJSON() ([]byte, error) {
	if u.CreateDrainSourceRequestUnion2 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceRequestUnion2, "", true)
	}

	if u.CreateDrainSourceRequest4 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceRequest4, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainSourceRequestUnion1: all fields are null")
}

type CreateDrainRequestBody struct {
	Name       string                               `json:"name"`
	Projects   CreateDrainProjects                  `json:"projects"`
	ProjectIds []string                             `json:"projectIds,omitempty"`
	Filter     *CreateDrainFilterRequestUnion1      `json:"filter,omitempty"`
	Schemas    map[string]CreateDrainSchemasRequest `json:"schemas"`
	Delivery   *CreateDrainDeliveryRequestUnion     `json:"delivery,omitempty"`
	Sampling   []CreateDrainSamplingRequest         `json:"sampling,omitempty"`
	Transforms []CreateDrainTransform               `json:"transforms,omitempty"`
	Source     *CreateDrainSourceRequestUnion1      `json:"source,omitempty"`
}

func (o *CreateDrainRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDrainRequestBody) GetProjects() CreateDrainProjects {
	if o == nil {
		return CreateDrainProjects("")
	}
	return o.Projects
}

func (o *CreateDrainRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateDrainRequestBody) GetFilter() *CreateDrainFilterRequestUnion1 {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *CreateDrainRequestBody) GetSchemas() map[string]CreateDrainSchemasRequest {
	if o == nil {
		return map[string]CreateDrainSchemasRequest{}
	}
	return o.Schemas
}

func (o *CreateDrainRequestBody) GetDelivery() *CreateDrainDeliveryRequestUnion {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *CreateDrainRequestBody) GetSampling() []CreateDrainSamplingRequest {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *CreateDrainRequestBody) GetTransforms() []CreateDrainTransform {
	if o == nil {
		return nil
	}
	return o.Transforms
}

func (o *CreateDrainRequestBody) GetSource() *CreateDrainSourceRequestUnion1 {
	if o == nil {
		return nil
	}
	return o.Source
}

type CreateDrainRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                 `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateDrainRequestBody `request:"mediaType=application/json"`
}

func (o *CreateDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateDrainRequest) GetRequestBody() *CreateDrainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateDrainCreatedFrom2 string

const (
	CreateDrainCreatedFrom2SelfServed  CreateDrainCreatedFrom2 = "self-served"
	CreateDrainCreatedFrom2Integration CreateDrainCreatedFrom2 = "integration"
)

func (e CreateDrainCreatedFrom2) ToPointer() *CreateDrainCreatedFrom2 {
	return &e
}
func (e *CreateDrainCreatedFrom2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = CreateDrainCreatedFrom2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainCreatedFrom2: %v", v)
	}
}

type CreateDrainSchemasLog2 struct {
}

func (c CreateDrainSchemasLog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSchemasLog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainTrace2 struct {
}

func (c CreateDrainTrace2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainTrace2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainAnalytics2 struct {
}

func (c CreateDrainAnalytics2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainAnalytics2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainSpeedInsights2 struct {
}

func (c CreateDrainSpeedInsights2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSpeedInsights2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainSchemasResponse2 struct {
	Log           *CreateDrainSchemasLog2    `json:"log,omitempty"`
	Trace         *CreateDrainTrace2         `json:"trace,omitempty"`
	Analytics     *CreateDrainAnalytics2     `json:"analytics,omitempty"`
	SpeedInsights *CreateDrainSpeedInsights2 `json:"speed_insights,omitempty"`
}

func (c CreateDrainSchemasResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSchemasResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSchemasResponse2) GetLog() *CreateDrainSchemasLog2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *CreateDrainSchemasResponse2) GetTrace() *CreateDrainTrace2 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *CreateDrainSchemasResponse2) GetAnalytics() *CreateDrainAnalytics2 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateDrainSchemasResponse2) GetSpeedInsights() *CreateDrainSpeedInsights2 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type CreateDrainTypeInternal2 string

const (
	CreateDrainTypeInternal2Internal CreateDrainTypeInternal2 = "internal"
)

func (e CreateDrainTypeInternal2) ToPointer() *CreateDrainTypeInternal2 {
	return &e
}
func (e *CreateDrainTypeInternal2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = CreateDrainTypeInternal2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeInternal2: %v", v)
	}
}

type CreateDrainTarget2 string

const (
	CreateDrainTarget2VercelOtelTracesDb CreateDrainTarget2 = "vercel-otel-traces-db"
)

func (e CreateDrainTarget2) ToPointer() *CreateDrainTarget2 {
	return &e
}
func (e *CreateDrainTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = CreateDrainTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTarget2: %v", v)
	}
}

type CreateDrainDeliveryVercelOtelTracesDb2 struct {
	Type   CreateDrainTypeInternal2 `json:"type"`
	Target CreateDrainTarget2       `json:"target"`
}

func (c CreateDrainDeliveryVercelOtelTracesDb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryVercelOtelTracesDb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryVercelOtelTracesDb2) GetType() CreateDrainTypeInternal2 {
	if o == nil {
		return CreateDrainTypeInternal2("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryVercelOtelTracesDb2) GetTarget() CreateDrainTarget2 {
	if o == nil {
		return CreateDrainTarget2("")
	}
	return o.Target
}

type CreateDrainTypeClickhouse2 string

const (
	CreateDrainTypeClickhouse2Clickhouse CreateDrainTypeClickhouse2 = "clickhouse"
)

func (e CreateDrainTypeClickhouse2) ToPointer() *CreateDrainTypeClickhouse2 {
	return &e
}
func (e *CreateDrainTypeClickhouse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = CreateDrainTypeClickhouse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeClickhouse2: %v", v)
	}
}

type CreateDrainDeliveryClickhouse2 struct {
	Type     CreateDrainTypeClickhouse2 `json:"type"`
	Endpoint string                     `json:"endpoint"`
	Table    string                     `json:"table"`
}

func (c CreateDrainDeliveryClickhouse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryClickhouse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryClickhouse2) GetType() CreateDrainTypeClickhouse2 {
	if o == nil {
		return CreateDrainTypeClickhouse2("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryClickhouse2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryClickhouse2) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type CreateDrainTypeSyslog2 string

const (
	CreateDrainTypeSyslog2Syslog CreateDrainTypeSyslog2 = "syslog"
)

func (e CreateDrainTypeSyslog2) ToPointer() *CreateDrainTypeSyslog2 {
	return &e
}
func (e *CreateDrainTypeSyslog2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = CreateDrainTypeSyslog2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeSyslog2: %v", v)
	}
}

type CreateDrainDeliverySyslog2 struct {
	Type     CreateDrainTypeSyslog2 `json:"type"`
	Endpoint string                 `json:"endpoint"`
	Secret   string                 `json:"secret"`
}

func (c CreateDrainDeliverySyslog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliverySyslog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliverySyslog2) GetType() CreateDrainTypeSyslog2 {
	if o == nil {
		return CreateDrainTypeSyslog2("")
	}
	return o.Type
}

func (o *CreateDrainDeliverySyslog2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliverySyslog2) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type CreateDrainTypeOtlphttp2 string

const (
	CreateDrainTypeOtlphttp2Otlphttp CreateDrainTypeOtlphttp2 = "otlphttp"
)

func (e CreateDrainTypeOtlphttp2) ToPointer() *CreateDrainTypeOtlphttp2 {
	return &e
}
func (e *CreateDrainTypeOtlphttp2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = CreateDrainTypeOtlphttp2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeOtlphttp2: %v", v)
	}
}

type CreateDrainEndpointResponse2 struct {
	Traces string `json:"traces"`
}

func (c CreateDrainEndpointResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainEndpointResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainEndpointResponse2) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type CreateDrainEncodingResponse4 string

const (
	CreateDrainEncodingResponse4JSON  CreateDrainEncodingResponse4 = "json"
	CreateDrainEncodingResponse4Proto CreateDrainEncodingResponse4 = "proto"
)

func (e CreateDrainEncodingResponse4) ToPointer() *CreateDrainEncodingResponse4 {
	return &e
}
func (e *CreateDrainEncodingResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = CreateDrainEncodingResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEncodingResponse4: %v", v)
	}
}

type CreateDrainDeliveryOtlphttp2 struct {
	Type     CreateDrainTypeOtlphttp2     `json:"type"`
	Endpoint CreateDrainEndpointResponse2 `json:"endpoint"`
	Encoding CreateDrainEncodingResponse4 `json:"encoding"`
	Headers  map[string]string            `json:"headers"`
	Secret   *string                      `json:"secret,omitempty"`
}

func (c CreateDrainDeliveryOtlphttp2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryOtlphttp2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryOtlphttp2) GetType() CreateDrainTypeOtlphttp2 {
	if o == nil {
		return CreateDrainTypeOtlphttp2("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryOtlphttp2) GetEndpoint() CreateDrainEndpointResponse2 {
	if o == nil {
		return CreateDrainEndpointResponse2{}
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryOtlphttp2) GetEncoding() CreateDrainEncodingResponse4 {
	if o == nil {
		return CreateDrainEncodingResponse4("")
	}
	return o.Encoding
}

func (o *CreateDrainDeliveryOtlphttp2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *CreateDrainDeliveryOtlphttp2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateDrainTypeHTTP2 string

const (
	CreateDrainTypeHTTP2HTTP CreateDrainTypeHTTP2 = "http"
)

func (e CreateDrainTypeHTTP2) ToPointer() *CreateDrainTypeHTTP2 {
	return &e
}
func (e *CreateDrainTypeHTTP2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = CreateDrainTypeHTTP2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeHTTP2: %v", v)
	}
}

type CreateDrainEncodingResponse3 string

const (
	CreateDrainEncodingResponse3JSON   CreateDrainEncodingResponse3 = "json"
	CreateDrainEncodingResponse3Ndjson CreateDrainEncodingResponse3 = "ndjson"
)

func (e CreateDrainEncodingResponse3) ToPointer() *CreateDrainEncodingResponse3 {
	return &e
}
func (e *CreateDrainEncodingResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = CreateDrainEncodingResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEncodingResponse3: %v", v)
	}
}

type CreateDrainCompressionResponse2 string

const (
	CreateDrainCompressionResponse2Gzip CreateDrainCompressionResponse2 = "gzip"
	CreateDrainCompressionResponse2None CreateDrainCompressionResponse2 = "none"
)

func (e CreateDrainCompressionResponse2) ToPointer() *CreateDrainCompressionResponse2 {
	return &e
}
func (e *CreateDrainCompressionResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = CreateDrainCompressionResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainCompressionResponse2: %v", v)
	}
}

type CreateDrainDeliveryHTTP2 struct {
	Type        CreateDrainTypeHTTP2             `json:"type"`
	Endpoint    string                           `json:"endpoint"`
	Encoding    CreateDrainEncodingResponse3     `json:"encoding"`
	Compression *CreateDrainCompressionResponse2 `json:"compression,omitempty"`
	Headers     map[string]string                `json:"headers"`
	Secret      *string                          `json:"secret,omitempty"`
}

func (c CreateDrainDeliveryHTTP2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryHTTP2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryHTTP2) GetType() CreateDrainTypeHTTP2 {
	if o == nil {
		return CreateDrainTypeHTTP2("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryHTTP2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryHTTP2) GetEncoding() CreateDrainEncodingResponse3 {
	if o == nil {
		return CreateDrainEncodingResponse3("")
	}
	return o.Encoding
}

func (o *CreateDrainDeliveryHTTP2) GetCompression() *CreateDrainCompressionResponse2 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *CreateDrainDeliveryHTTP2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *CreateDrainDeliveryHTTP2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateDrainDeliveryResponseUnion2Type string

const (
	CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryHTTP2               CreateDrainDeliveryResponseUnion2Type = "createDrain_delivery_HTTP_2"
	CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryOtlphttp2           CreateDrainDeliveryResponseUnion2Type = "createDrain_delivery_Otlphttp_2"
	CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliverySyslog2             CreateDrainDeliveryResponseUnion2Type = "createDrain_delivery_Syslog_2"
	CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryClickhouse2         CreateDrainDeliveryResponseUnion2Type = "createDrain_delivery_Clickhouse_2"
	CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryVercelOtelTracesDb2 CreateDrainDeliveryResponseUnion2Type = "createDrain_delivery_VercelOtelTracesDb_2"
)

type CreateDrainDeliveryResponseUnion2 struct {
	CreateDrainDeliveryHTTP2               *CreateDrainDeliveryHTTP2               `queryParam:"inline"`
	CreateDrainDeliveryOtlphttp2           *CreateDrainDeliveryOtlphttp2           `queryParam:"inline"`
	CreateDrainDeliverySyslog2             *CreateDrainDeliverySyslog2             `queryParam:"inline"`
	CreateDrainDeliveryClickhouse2         *CreateDrainDeliveryClickhouse2         `queryParam:"inline"`
	CreateDrainDeliveryVercelOtelTracesDb2 *CreateDrainDeliveryVercelOtelTracesDb2 `queryParam:"inline"`

	Type CreateDrainDeliveryResponseUnion2Type
}

func CreateCreateDrainDeliveryResponseUnion2CreateDrainDeliveryHTTP2(createDrainDeliveryHTTP2 CreateDrainDeliveryHTTP2) CreateDrainDeliveryResponseUnion2 {
	typ := CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryHTTP2

	return CreateDrainDeliveryResponseUnion2{
		CreateDrainDeliveryHTTP2: &createDrainDeliveryHTTP2,
		Type:                     typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion2CreateDrainDeliveryOtlphttp2(createDrainDeliveryOtlphttp2 CreateDrainDeliveryOtlphttp2) CreateDrainDeliveryResponseUnion2 {
	typ := CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryOtlphttp2

	return CreateDrainDeliveryResponseUnion2{
		CreateDrainDeliveryOtlphttp2: &createDrainDeliveryOtlphttp2,
		Type:                         typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion2CreateDrainDeliverySyslog2(createDrainDeliverySyslog2 CreateDrainDeliverySyslog2) CreateDrainDeliveryResponseUnion2 {
	typ := CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliverySyslog2

	return CreateDrainDeliveryResponseUnion2{
		CreateDrainDeliverySyslog2: &createDrainDeliverySyslog2,
		Type:                       typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion2CreateDrainDeliveryClickhouse2(createDrainDeliveryClickhouse2 CreateDrainDeliveryClickhouse2) CreateDrainDeliveryResponseUnion2 {
	typ := CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryClickhouse2

	return CreateDrainDeliveryResponseUnion2{
		CreateDrainDeliveryClickhouse2: &createDrainDeliveryClickhouse2,
		Type:                           typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion2CreateDrainDeliveryVercelOtelTracesDb2(createDrainDeliveryVercelOtelTracesDb2 CreateDrainDeliveryVercelOtelTracesDb2) CreateDrainDeliveryResponseUnion2 {
	typ := CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryVercelOtelTracesDb2

	return CreateDrainDeliveryResponseUnion2{
		CreateDrainDeliveryVercelOtelTracesDb2: &createDrainDeliveryVercelOtelTracesDb2,
		Type:                                   typ,
	}
}

func (u *CreateDrainDeliveryResponseUnion2) UnmarshalJSON(data []byte) error {

	var createDrainDeliveryHTTP2 CreateDrainDeliveryHTTP2 = CreateDrainDeliveryHTTP2{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryHTTP2, "", true, nil); err == nil {
		u.CreateDrainDeliveryHTTP2 = &createDrainDeliveryHTTP2
		u.Type = CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryHTTP2
		return nil
	}

	var createDrainDeliveryOtlphttp2 CreateDrainDeliveryOtlphttp2 = CreateDrainDeliveryOtlphttp2{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryOtlphttp2, "", true, nil); err == nil {
		u.CreateDrainDeliveryOtlphttp2 = &createDrainDeliveryOtlphttp2
		u.Type = CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryOtlphttp2
		return nil
	}

	var createDrainDeliverySyslog2 CreateDrainDeliverySyslog2 = CreateDrainDeliverySyslog2{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliverySyslog2, "", true, nil); err == nil {
		u.CreateDrainDeliverySyslog2 = &createDrainDeliverySyslog2
		u.Type = CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliverySyslog2
		return nil
	}

	var createDrainDeliveryClickhouse2 CreateDrainDeliveryClickhouse2 = CreateDrainDeliveryClickhouse2{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryClickhouse2, "", true, nil); err == nil {
		u.CreateDrainDeliveryClickhouse2 = &createDrainDeliveryClickhouse2
		u.Type = CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryClickhouse2
		return nil
	}

	var createDrainDeliveryVercelOtelTracesDb2 CreateDrainDeliveryVercelOtelTracesDb2 = CreateDrainDeliveryVercelOtelTracesDb2{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryVercelOtelTracesDb2, "", true, nil); err == nil {
		u.CreateDrainDeliveryVercelOtelTracesDb2 = &createDrainDeliveryVercelOtelTracesDb2
		u.Type = CreateDrainDeliveryResponseUnion2TypeCreateDrainDeliveryVercelOtelTracesDb2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainDeliveryResponseUnion2", string(data))
}

func (u CreateDrainDeliveryResponseUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateDrainDeliveryHTTP2 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryHTTP2, "", true)
	}

	if u.CreateDrainDeliveryOtlphttp2 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryOtlphttp2, "", true)
	}

	if u.CreateDrainDeliverySyslog2 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliverySyslog2, "", true)
	}

	if u.CreateDrainDeliveryClickhouse2 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryClickhouse2, "", true)
	}

	if u.CreateDrainDeliveryVercelOtelTracesDb2 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryVercelOtelTracesDb2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainDeliveryResponseUnion2: all fields are null")
}

type CreateDrainTypeHeadSampling2 string

const (
	CreateDrainTypeHeadSampling2HeadSampling CreateDrainTypeHeadSampling2 = "head_sampling"
)

func (e CreateDrainTypeHeadSampling2) ToPointer() *CreateDrainTypeHeadSampling2 {
	return &e
}
func (e *CreateDrainTypeHeadSampling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = CreateDrainTypeHeadSampling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeHeadSampling2: %v", v)
	}
}

type CreateDrainEnvHeadSampling2 string

const (
	CreateDrainEnvHeadSampling2Production CreateDrainEnvHeadSampling2 = "production"
	CreateDrainEnvHeadSampling2Preview    CreateDrainEnvHeadSampling2 = "preview"
)

func (e CreateDrainEnvHeadSampling2) ToPointer() *CreateDrainEnvHeadSampling2 {
	return &e
}
func (e *CreateDrainEnvHeadSampling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateDrainEnvHeadSampling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEnvHeadSampling2: %v", v)
	}
}

type CreateDrainSamplingResponse2 struct {
	Type        CreateDrainTypeHeadSampling2 `json:"type"`
	Rate        float64                      `json:"rate"`
	Env         *CreateDrainEnvHeadSampling2 `json:"env,omitempty"`
	RequestPath *string                      `json:"requestPath,omitempty"`
}

func (c CreateDrainSamplingResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSamplingResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSamplingResponse2) GetType() CreateDrainTypeHeadSampling2 {
	if o == nil {
		return CreateDrainTypeHeadSampling2("")
	}
	return o.Type
}

func (o *CreateDrainSamplingResponse2) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *CreateDrainSamplingResponse2) GetEnv() *CreateDrainEnvHeadSampling2 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateDrainSamplingResponse2) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type CreateDrainStatus2 string

const (
	CreateDrainStatus2Enabled  CreateDrainStatus2 = "enabled"
	CreateDrainStatus2Disabled CreateDrainStatus2 = "disabled"
	CreateDrainStatus2Errored  CreateDrainStatus2 = "errored"
)

func (e CreateDrainStatus2) ToPointer() *CreateDrainStatus2 {
	return &e
}
func (e *CreateDrainStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = CreateDrainStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainStatus2: %v", v)
	}
}

type CreateDrainDisabledReason2 string

const (
	CreateDrainDisabledReason2DisabledByOwner      CreateDrainDisabledReason2 = "disabled-by-owner"
	CreateDrainDisabledReason2FeatureNotAvailable  CreateDrainDisabledReason2 = "feature-not-available"
	CreateDrainDisabledReason2AccountPlanDowngrade CreateDrainDisabledReason2 = "account-plan-downgrade"
	CreateDrainDisabledReason2DisabledByAdmin      CreateDrainDisabledReason2 = "disabled-by-admin"
)

func (e CreateDrainDisabledReason2) ToPointer() *CreateDrainDisabledReason2 {
	return &e
}
func (e *CreateDrainDisabledReason2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = CreateDrainDisabledReason2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainDisabledReason2: %v", v)
	}
}

type CreateDrainKindIntegration2 string

const (
	CreateDrainKindIntegration2Integration CreateDrainKindIntegration2 = "integration"
)

func (e CreateDrainKindIntegration2) ToPointer() *CreateDrainKindIntegration2 {
	return &e
}
func (e *CreateDrainKindIntegration2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = CreateDrainKindIntegration2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainKindIntegration2: %v", v)
	}
}

type CreateDrainSourceIntegration2 struct {
	Kind                       CreateDrainKindIntegration2 `json:"kind"`
	ResourceID                 *string                     `json:"resourceId,omitempty"`
	ExternalResourceID         *string                     `json:"externalResourceId,omitempty"`
	IntegrationID              string                      `json:"integrationId"`
	IntegrationConfigurationID string                      `json:"integrationConfigurationId"`
}

func (c CreateDrainSourceIntegration2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceIntegration2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceIntegration2) GetKind() CreateDrainKindIntegration2 {
	if o == nil {
		return CreateDrainKindIntegration2("")
	}
	return o.Kind
}

func (o *CreateDrainSourceIntegration2) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *CreateDrainSourceIntegration2) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *CreateDrainSourceIntegration2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateDrainSourceIntegration2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateDrainKindSelfServed2 string

const (
	CreateDrainKindSelfServed2SelfServed CreateDrainKindSelfServed2 = "self-served"
)

func (e CreateDrainKindSelfServed2) ToPointer() *CreateDrainKindSelfServed2 {
	return &e
}
func (e *CreateDrainKindSelfServed2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = CreateDrainKindSelfServed2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainKindSelfServed2: %v", v)
	}
}

type CreateDrainSourceSelfServed2 struct {
	Kind CreateDrainKindSelfServed2 `json:"kind"`
}

func (c CreateDrainSourceSelfServed2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceSelfServed2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceSelfServed2) GetKind() CreateDrainKindSelfServed2 {
	if o == nil {
		return CreateDrainKindSelfServed2("")
	}
	return o.Kind
}

type CreateDrainResponseBodySourceUnion2Type string

const (
	CreateDrainResponseBodySourceUnion2TypeCreateDrainSourceSelfServed2  CreateDrainResponseBodySourceUnion2Type = "createDrain_source_SelfServed_2"
	CreateDrainResponseBodySourceUnion2TypeCreateDrainSourceIntegration2 CreateDrainResponseBodySourceUnion2Type = "createDrain_source_Integration_2"
)

type CreateDrainResponseBodySourceUnion2 struct {
	CreateDrainSourceSelfServed2  *CreateDrainSourceSelfServed2  `queryParam:"inline"`
	CreateDrainSourceIntegration2 *CreateDrainSourceIntegration2 `queryParam:"inline"`

	Type CreateDrainResponseBodySourceUnion2Type
}

func CreateCreateDrainResponseBodySourceUnion2CreateDrainSourceSelfServed2(createDrainSourceSelfServed2 CreateDrainSourceSelfServed2) CreateDrainResponseBodySourceUnion2 {
	typ := CreateDrainResponseBodySourceUnion2TypeCreateDrainSourceSelfServed2

	return CreateDrainResponseBodySourceUnion2{
		CreateDrainSourceSelfServed2: &createDrainSourceSelfServed2,
		Type:                         typ,
	}
}

func CreateCreateDrainResponseBodySourceUnion2CreateDrainSourceIntegration2(createDrainSourceIntegration2 CreateDrainSourceIntegration2) CreateDrainResponseBodySourceUnion2 {
	typ := CreateDrainResponseBodySourceUnion2TypeCreateDrainSourceIntegration2

	return CreateDrainResponseBodySourceUnion2{
		CreateDrainSourceIntegration2: &createDrainSourceIntegration2,
		Type:                          typ,
	}
}

func (u *CreateDrainResponseBodySourceUnion2) UnmarshalJSON(data []byte) error {

	var createDrainSourceIntegration2 CreateDrainSourceIntegration2 = CreateDrainSourceIntegration2{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceIntegration2, "", true, nil); err == nil {
		u.CreateDrainSourceIntegration2 = &createDrainSourceIntegration2
		u.Type = CreateDrainResponseBodySourceUnion2TypeCreateDrainSourceIntegration2
		return nil
	}

	var createDrainSourceSelfServed2 CreateDrainSourceSelfServed2 = CreateDrainSourceSelfServed2{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceSelfServed2, "", true, nil); err == nil {
		u.CreateDrainSourceSelfServed2 = &createDrainSourceSelfServed2
		u.Type = CreateDrainResponseBodySourceUnion2TypeCreateDrainSourceSelfServed2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainResponseBodySourceUnion2", string(data))
}

func (u CreateDrainResponseBodySourceUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateDrainSourceSelfServed2 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceSelfServed2, "", true)
	}

	if u.CreateDrainSourceIntegration2 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceIntegration2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainResponseBodySourceUnion2: all fields are null")
}

type CreateDrainVersionV22 string

const (
	CreateDrainVersionV22V2 CreateDrainVersionV22 = "v2"
)

func (e CreateDrainVersionV22) ToPointer() *CreateDrainVersionV22 {
	return &e
}
func (e *CreateDrainVersionV22) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = CreateDrainVersionV22(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainVersionV22: %v", v)
	}
}

type CreateDrainTypeOdata2 string

const (
	CreateDrainTypeOdata2Odata CreateDrainTypeOdata2 = "odata"
)

func (e CreateDrainTypeOdata2) ToPointer() *CreateDrainTypeOdata2 {
	return &e
}
func (e *CreateDrainTypeOdata2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = CreateDrainTypeOdata2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeOdata2: %v", v)
	}
}

type CreateDrainFilterOdata2 struct {
	Type CreateDrainTypeOdata2 `json:"type"`
	Text string                `json:"text"`
}

func (c CreateDrainFilterOdata2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterOdata2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterOdata2) GetType() CreateDrainTypeOdata2 {
	if o == nil {
		return CreateDrainTypeOdata2("")
	}
	return o.Type
}

func (o *CreateDrainFilterOdata2) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type CreateDrainTypeBasic2 string

const (
	CreateDrainTypeBasic2Basic CreateDrainTypeBasic2 = "basic"
)

func (e CreateDrainTypeBasic2) ToPointer() *CreateDrainTypeBasic2 {
	return &e
}
func (e *CreateDrainTypeBasic2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = CreateDrainTypeBasic2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeBasic2: %v", v)
	}
}

type CreateDrainFilterV2Project2 struct {
	Ids []string `json:"ids,omitempty"`
}

func (c CreateDrainFilterV2Project2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2Project2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2Project2) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type CreateDrainFilterV2Log2 struct {
	Sources []string `json:"sources,omitempty"`
}

func (c CreateDrainFilterV2Log2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2Log2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2Log2) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type CreateDrainFilterV2Deployment2 struct {
	Environments []string `json:"environments,omitempty"`
}

func (c CreateDrainFilterV2Deployment2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2Deployment2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2Deployment2) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type CreateDrainFilterBasic2 struct {
	Type       CreateDrainTypeBasic2           `json:"type"`
	Project    *CreateDrainFilterV2Project2    `json:"project,omitempty"`
	Log        *CreateDrainFilterV2Log2        `json:"log,omitempty"`
	Deployment *CreateDrainFilterV2Deployment2 `json:"deployment,omitempty"`
}

func (c CreateDrainFilterBasic2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterBasic2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterBasic2) GetType() CreateDrainTypeBasic2 {
	if o == nil {
		return CreateDrainTypeBasic2("")
	}
	return o.Type
}

func (o *CreateDrainFilterBasic2) GetProject() *CreateDrainFilterV2Project2 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateDrainFilterBasic2) GetLog() *CreateDrainFilterV2Log2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *CreateDrainFilterBasic2) GetDeployment() *CreateDrainFilterV2Deployment2 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type CreateDrainFilterResponseUnion2Type string

const (
	CreateDrainFilterResponseUnion2TypeCreateDrainFilterBasic2 CreateDrainFilterResponseUnion2Type = "createDrain_filter_Basic_2"
	CreateDrainFilterResponseUnion2TypeCreateDrainFilterOdata2 CreateDrainFilterResponseUnion2Type = "createDrain_filter_Odata_2"
)

type CreateDrainFilterResponseUnion2 struct {
	CreateDrainFilterBasic2 *CreateDrainFilterBasic2 `queryParam:"inline"`
	CreateDrainFilterOdata2 *CreateDrainFilterOdata2 `queryParam:"inline"`

	Type CreateDrainFilterResponseUnion2Type
}

func CreateCreateDrainFilterResponseUnion2CreateDrainFilterBasic2(createDrainFilterBasic2 CreateDrainFilterBasic2) CreateDrainFilterResponseUnion2 {
	typ := CreateDrainFilterResponseUnion2TypeCreateDrainFilterBasic2

	return CreateDrainFilterResponseUnion2{
		CreateDrainFilterBasic2: &createDrainFilterBasic2,
		Type:                    typ,
	}
}

func CreateCreateDrainFilterResponseUnion2CreateDrainFilterOdata2(createDrainFilterOdata2 CreateDrainFilterOdata2) CreateDrainFilterResponseUnion2 {
	typ := CreateDrainFilterResponseUnion2TypeCreateDrainFilterOdata2

	return CreateDrainFilterResponseUnion2{
		CreateDrainFilterOdata2: &createDrainFilterOdata2,
		Type:                    typ,
	}
}

func (u *CreateDrainFilterResponseUnion2) UnmarshalJSON(data []byte) error {

	var createDrainFilterOdata2 CreateDrainFilterOdata2 = CreateDrainFilterOdata2{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterOdata2, "", true, nil); err == nil {
		u.CreateDrainFilterOdata2 = &createDrainFilterOdata2
		u.Type = CreateDrainFilterResponseUnion2TypeCreateDrainFilterOdata2
		return nil
	}

	var createDrainFilterBasic2 CreateDrainFilterBasic2 = CreateDrainFilterBasic2{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterBasic2, "", true, nil); err == nil {
		u.CreateDrainFilterBasic2 = &createDrainFilterBasic2
		u.Type = CreateDrainFilterResponseUnion2TypeCreateDrainFilterBasic2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainFilterResponseUnion2", string(data))
}

func (u CreateDrainFilterResponseUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateDrainFilterBasic2 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterBasic2, "", true)
	}

	if u.CreateDrainFilterOdata2 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterOdata2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainFilterResponseUnion2: all fields are null")
}

type CreateDrainFilterV2V22 struct {
	Version CreateDrainVersionV22           `json:"version"`
	Filter  CreateDrainFilterResponseUnion2 `json:"filter"`
}

func (c CreateDrainFilterV2V22) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2V22) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2V22) GetVersion() CreateDrainVersionV22 {
	if o == nil {
		return CreateDrainVersionV22("")
	}
	return o.Version
}

func (o *CreateDrainFilterV2V22) GetFilter() CreateDrainFilterResponseUnion2 {
	if o == nil {
		return CreateDrainFilterResponseUnion2{}
	}
	return o.Filter
}

type CreateDrainVersionV12 string

const (
	CreateDrainVersionV12V1 CreateDrainVersionV12 = "v1"
)

func (e CreateDrainVersionV12) ToPointer() *CreateDrainVersionV12 {
	return &e
}
func (e *CreateDrainVersionV12) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = CreateDrainVersionV12(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainVersionV12: %v", v)
	}
}

type CreateDrainFilterV2V12 struct {
	Version CreateDrainVersionV12 `json:"version"`
}

func (c CreateDrainFilterV2V12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2V12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2V12) GetVersion() CreateDrainVersionV12 {
	if o == nil {
		return CreateDrainVersionV12("")
	}
	return o.Version
}

type CreateDrainFilterV2Union2Type string

const (
	CreateDrainFilterV2Union2TypeCreateDrainFilterV2V12 CreateDrainFilterV2Union2Type = "createDrain_filterV2_V1_2"
	CreateDrainFilterV2Union2TypeCreateDrainFilterV2V22 CreateDrainFilterV2Union2Type = "createDrain_filterV2_V2_2"
)

type CreateDrainFilterV2Union2 struct {
	CreateDrainFilterV2V12 *CreateDrainFilterV2V12 `queryParam:"inline"`
	CreateDrainFilterV2V22 *CreateDrainFilterV2V22 `queryParam:"inline"`

	Type CreateDrainFilterV2Union2Type
}

func CreateCreateDrainFilterV2Union2CreateDrainFilterV2V12(createDrainFilterV2V12 CreateDrainFilterV2V12) CreateDrainFilterV2Union2 {
	typ := CreateDrainFilterV2Union2TypeCreateDrainFilterV2V12

	return CreateDrainFilterV2Union2{
		CreateDrainFilterV2V12: &createDrainFilterV2V12,
		Type:                   typ,
	}
}

func CreateCreateDrainFilterV2Union2CreateDrainFilterV2V22(createDrainFilterV2V22 CreateDrainFilterV2V22) CreateDrainFilterV2Union2 {
	typ := CreateDrainFilterV2Union2TypeCreateDrainFilterV2V22

	return CreateDrainFilterV2Union2{
		CreateDrainFilterV2V22: &createDrainFilterV2V22,
		Type:                   typ,
	}
}

func (u *CreateDrainFilterV2Union2) UnmarshalJSON(data []byte) error {

	var createDrainFilterV2V22 CreateDrainFilterV2V22 = CreateDrainFilterV2V22{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterV2V22, "", true, nil); err == nil {
		u.CreateDrainFilterV2V22 = &createDrainFilterV2V22
		u.Type = CreateDrainFilterV2Union2TypeCreateDrainFilterV2V22
		return nil
	}

	var createDrainFilterV2V12 CreateDrainFilterV2V12 = CreateDrainFilterV2V12{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterV2V12, "", true, nil); err == nil {
		u.CreateDrainFilterV2V12 = &createDrainFilterV2V12
		u.Type = CreateDrainFilterV2Union2TypeCreateDrainFilterV2V12
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainFilterV2Union2", string(data))
}

func (u CreateDrainFilterV2Union2) MarshalJSON() ([]byte, error) {
	if u.CreateDrainFilterV2V12 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterV2V12, "", true)
	}

	if u.CreateDrainFilterV2V22 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterV2V22, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainFilterV2Union2: all fields are null")
}

type CreateDrainFramework string

const (
	CreateDrainFrameworkBlitzjs        CreateDrainFramework = "blitzjs"
	CreateDrainFrameworkNextjs         CreateDrainFramework = "nextjs"
	CreateDrainFrameworkGatsby         CreateDrainFramework = "gatsby"
	CreateDrainFrameworkRemix          CreateDrainFramework = "remix"
	CreateDrainFrameworkReactRouter    CreateDrainFramework = "react-router"
	CreateDrainFrameworkAstro          CreateDrainFramework = "astro"
	CreateDrainFrameworkHexo           CreateDrainFramework = "hexo"
	CreateDrainFrameworkEleventy       CreateDrainFramework = "eleventy"
	CreateDrainFrameworkDocusaurus2    CreateDrainFramework = "docusaurus-2"
	CreateDrainFrameworkDocusaurus     CreateDrainFramework = "docusaurus"
	CreateDrainFrameworkPreact         CreateDrainFramework = "preact"
	CreateDrainFrameworkSolidstart1    CreateDrainFramework = "solidstart-1"
	CreateDrainFrameworkSolidstart     CreateDrainFramework = "solidstart"
	CreateDrainFrameworkDojo           CreateDrainFramework = "dojo"
	CreateDrainFrameworkEmber          CreateDrainFramework = "ember"
	CreateDrainFrameworkVue            CreateDrainFramework = "vue"
	CreateDrainFrameworkScully         CreateDrainFramework = "scully"
	CreateDrainFrameworkIonicAngular   CreateDrainFramework = "ionic-angular"
	CreateDrainFrameworkAngular        CreateDrainFramework = "angular"
	CreateDrainFrameworkPolymer        CreateDrainFramework = "polymer"
	CreateDrainFrameworkSvelte         CreateDrainFramework = "svelte"
	CreateDrainFrameworkSveltekit      CreateDrainFramework = "sveltekit"
	CreateDrainFrameworkSveltekit1     CreateDrainFramework = "sveltekit-1"
	CreateDrainFrameworkIonicReact     CreateDrainFramework = "ionic-react"
	CreateDrainFrameworkCreateReactApp CreateDrainFramework = "create-react-app"
	CreateDrainFrameworkGridsome       CreateDrainFramework = "gridsome"
	CreateDrainFrameworkUmijs          CreateDrainFramework = "umijs"
	CreateDrainFrameworkSapper         CreateDrainFramework = "sapper"
	CreateDrainFrameworkSaber          CreateDrainFramework = "saber"
	CreateDrainFrameworkStencil        CreateDrainFramework = "stencil"
	CreateDrainFrameworkNuxtjs         CreateDrainFramework = "nuxtjs"
	CreateDrainFrameworkRedwoodjs      CreateDrainFramework = "redwoodjs"
	CreateDrainFrameworkHugo           CreateDrainFramework = "hugo"
	CreateDrainFrameworkJekyll         CreateDrainFramework = "jekyll"
	CreateDrainFrameworkBrunch         CreateDrainFramework = "brunch"
	CreateDrainFrameworkMiddleman      CreateDrainFramework = "middleman"
	CreateDrainFrameworkZola           CreateDrainFramework = "zola"
	CreateDrainFrameworkHydrogen       CreateDrainFramework = "hydrogen"
	CreateDrainFrameworkVite           CreateDrainFramework = "vite"
	CreateDrainFrameworkVitepress      CreateDrainFramework = "vitepress"
	CreateDrainFrameworkVuepress       CreateDrainFramework = "vuepress"
	CreateDrainFrameworkParcel         CreateDrainFramework = "parcel"
	CreateDrainFrameworkFastapi        CreateDrainFramework = "fastapi"
	CreateDrainFrameworkFlask          CreateDrainFramework = "flask"
	CreateDrainFrameworkFasthtml       CreateDrainFramework = "fasthtml"
	CreateDrainFrameworkSanityV3       CreateDrainFramework = "sanity-v3"
	CreateDrainFrameworkSanity         CreateDrainFramework = "sanity"
	CreateDrainFrameworkStorybook      CreateDrainFramework = "storybook"
	CreateDrainFrameworkNitro          CreateDrainFramework = "nitro"
	CreateDrainFrameworkHono           CreateDrainFramework = "hono"
	CreateDrainFrameworkExpress        CreateDrainFramework = "express"
	CreateDrainFrameworkH3             CreateDrainFramework = "h3"
	CreateDrainFrameworkNestjs         CreateDrainFramework = "nestjs"
	CreateDrainFrameworkFastify        CreateDrainFramework = "fastify"
	CreateDrainFrameworkXmcp           CreateDrainFramework = "xmcp"
)

func (e CreateDrainFramework) ToPointer() *CreateDrainFramework {
	return &e
}
func (e *CreateDrainFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fastapi":
		fallthrough
	case "flask":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		fallthrough
	case "nitro":
		fallthrough
	case "hono":
		fallthrough
	case "express":
		fallthrough
	case "h3":
		fallthrough
	case "nestjs":
		fallthrough
	case "fastify":
		fallthrough
	case "xmcp":
		*e = CreateDrainFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainFramework: %v", v)
	}
}

type CreateDrainProjectsMetadatum struct {
	ID               string                `json:"id"`
	Name             string                `json:"name"`
	Framework        *CreateDrainFramework `json:"framework,omitempty"`
	LatestDeployment *string               `json:"latestDeployment,omitempty"`
}

func (c CreateDrainProjectsMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainProjectsMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "name"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainProjectsMetadatum) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDrainProjectsMetadatum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDrainProjectsMetadatum) GetFramework() *CreateDrainFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateDrainProjectsMetadatum) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

type CreateDrainResponseBody2 struct {
	ID                          string                              `json:"id"`
	OwnerID                     string                              `json:"ownerId"`
	Name                        string                              `json:"name"`
	CreatedAt                   float64                             `json:"createdAt"`
	CreatedFrom                 *CreateDrainCreatedFrom2            `json:"createdFrom,omitempty"`
	UpdatedAt                   float64                             `json:"updatedAt"`
	ProjectIds                  []string                            `json:"projectIds,omitempty"`
	Schemas                     *CreateDrainSchemasResponse2        `json:"schemas,omitempty"`
	Delivery                    *CreateDrainDeliveryResponseUnion2  `json:"delivery,omitempty"`
	Sampling                    []CreateDrainSamplingResponse2      `json:"sampling,omitempty"`
	TeamID                      *string                             `json:"teamId,omitempty"`
	Status                      *CreateDrainStatus2                 `json:"status,omitempty"`
	DisabledAt                  *float64                            `json:"disabledAt,omitempty"`
	DisabledReason              *CreateDrainDisabledReason2         `json:"disabledReason,omitempty"`
	DisabledBy                  *string                             `json:"disabledBy,omitempty"`
	FirstErrorTimestamp         *float64                            `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID             *string                             `json:"configurationId,omitempty"`
	ClientID                    *string                             `json:"clientId,omitempty"`
	Source                      CreateDrainResponseBodySourceUnion2 `json:"source"`
	Filter                      *string                             `json:"filter,omitempty"`
	FilterV2                    *CreateDrainFilterV2Union2          `json:"filterV2,omitempty"`
	IntegrationIcon             *string                             `json:"integrationIcon,omitempty"`
	IntegrationConfigurationURI *string                             `json:"integrationConfigurationUri,omitempty"`
	IntegrationWebsite          *string                             `json:"integrationWebsite,omitempty"`
	ProjectsMetadata            []CreateDrainProjectsMetadatum      `json:"projectsMetadata,omitempty"`
}

func (c CreateDrainResponseBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainResponseBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDrainResponseBody2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateDrainResponseBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDrainResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateDrainResponseBody2) GetCreatedFrom() *CreateDrainCreatedFrom2 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *CreateDrainResponseBody2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateDrainResponseBody2) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateDrainResponseBody2) GetSchemas() *CreateDrainSchemasResponse2 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateDrainResponseBody2) GetDelivery() *CreateDrainDeliveryResponseUnion2 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *CreateDrainResponseBody2) GetSampling() []CreateDrainSamplingResponse2 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *CreateDrainResponseBody2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateDrainResponseBody2) GetStatus() *CreateDrainStatus2 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateDrainResponseBody2) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateDrainResponseBody2) GetDisabledReason() *CreateDrainDisabledReason2 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *CreateDrainResponseBody2) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *CreateDrainResponseBody2) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *CreateDrainResponseBody2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateDrainResponseBody2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateDrainResponseBody2) GetSource() CreateDrainResponseBodySourceUnion2 {
	if o == nil {
		return CreateDrainResponseBodySourceUnion2{}
	}
	return o.Source
}

func (o *CreateDrainResponseBody2) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *CreateDrainResponseBody2) GetFilterV2() *CreateDrainFilterV2Union2 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

func (o *CreateDrainResponseBody2) GetIntegrationIcon() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIcon
}

func (o *CreateDrainResponseBody2) GetIntegrationConfigurationURI() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationURI
}

func (o *CreateDrainResponseBody2) GetIntegrationWebsite() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationWebsite
}

func (o *CreateDrainResponseBody2) GetProjectsMetadata() []CreateDrainProjectsMetadatum {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

type CreateDrainCreatedFrom1 string

const (
	CreateDrainCreatedFrom1SelfServed  CreateDrainCreatedFrom1 = "self-served"
	CreateDrainCreatedFrom1Integration CreateDrainCreatedFrom1 = "integration"
)

func (e CreateDrainCreatedFrom1) ToPointer() *CreateDrainCreatedFrom1 {
	return &e
}
func (e *CreateDrainCreatedFrom1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = CreateDrainCreatedFrom1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainCreatedFrom1: %v", v)
	}
}

type CreateDrainSchemasLog1 struct {
}

func (c CreateDrainSchemasLog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSchemasLog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainTrace1 struct {
}

func (c CreateDrainTrace1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainTrace1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainAnalytics1 struct {
}

func (c CreateDrainAnalytics1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainAnalytics1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainSpeedInsights1 struct {
}

func (c CreateDrainSpeedInsights1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSpeedInsights1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

type CreateDrainSchemasResponse1 struct {
	Log           *CreateDrainSchemasLog1    `json:"log,omitempty"`
	Trace         *CreateDrainTrace1         `json:"trace,omitempty"`
	Analytics     *CreateDrainAnalytics1     `json:"analytics,omitempty"`
	SpeedInsights *CreateDrainSpeedInsights1 `json:"speed_insights,omitempty"`
}

func (c CreateDrainSchemasResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSchemasResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSchemasResponse1) GetLog() *CreateDrainSchemasLog1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *CreateDrainSchemasResponse1) GetTrace() *CreateDrainTrace1 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *CreateDrainSchemasResponse1) GetAnalytics() *CreateDrainAnalytics1 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateDrainSchemasResponse1) GetSpeedInsights() *CreateDrainSpeedInsights1 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type CreateDrainTypeInternal1 string

const (
	CreateDrainTypeInternal1Internal CreateDrainTypeInternal1 = "internal"
)

func (e CreateDrainTypeInternal1) ToPointer() *CreateDrainTypeInternal1 {
	return &e
}
func (e *CreateDrainTypeInternal1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = CreateDrainTypeInternal1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeInternal1: %v", v)
	}
}

type CreateDrainTarget1 string

const (
	CreateDrainTarget1VercelOtelTracesDb CreateDrainTarget1 = "vercel-otel-traces-db"
)

func (e CreateDrainTarget1) ToPointer() *CreateDrainTarget1 {
	return &e
}
func (e *CreateDrainTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = CreateDrainTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTarget1: %v", v)
	}
}

type CreateDrainDeliveryVercelOtelTracesDb1 struct {
	Type   CreateDrainTypeInternal1 `json:"type"`
	Target CreateDrainTarget1       `json:"target"`
}

func (c CreateDrainDeliveryVercelOtelTracesDb1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryVercelOtelTracesDb1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryVercelOtelTracesDb1) GetType() CreateDrainTypeInternal1 {
	if o == nil {
		return CreateDrainTypeInternal1("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryVercelOtelTracesDb1) GetTarget() CreateDrainTarget1 {
	if o == nil {
		return CreateDrainTarget1("")
	}
	return o.Target
}

type CreateDrainTypeClickhouse1 string

const (
	CreateDrainTypeClickhouse1Clickhouse CreateDrainTypeClickhouse1 = "clickhouse"
)

func (e CreateDrainTypeClickhouse1) ToPointer() *CreateDrainTypeClickhouse1 {
	return &e
}
func (e *CreateDrainTypeClickhouse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = CreateDrainTypeClickhouse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeClickhouse1: %v", v)
	}
}

type CreateDrainDeliveryClickhouse1 struct {
	Type     CreateDrainTypeClickhouse1 `json:"type"`
	Endpoint string                     `json:"endpoint"`
	Table    string                     `json:"table"`
}

func (c CreateDrainDeliveryClickhouse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryClickhouse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryClickhouse1) GetType() CreateDrainTypeClickhouse1 {
	if o == nil {
		return CreateDrainTypeClickhouse1("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryClickhouse1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryClickhouse1) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type CreateDrainTypeSyslog1 string

const (
	CreateDrainTypeSyslog1Syslog CreateDrainTypeSyslog1 = "syslog"
)

func (e CreateDrainTypeSyslog1) ToPointer() *CreateDrainTypeSyslog1 {
	return &e
}
func (e *CreateDrainTypeSyslog1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = CreateDrainTypeSyslog1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeSyslog1: %v", v)
	}
}

type CreateDrainDeliverySyslog1 struct {
	Type     CreateDrainTypeSyslog1 `json:"type"`
	Endpoint string                 `json:"endpoint"`
	Secret   string                 `json:"secret"`
}

func (c CreateDrainDeliverySyslog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliverySyslog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliverySyslog1) GetType() CreateDrainTypeSyslog1 {
	if o == nil {
		return CreateDrainTypeSyslog1("")
	}
	return o.Type
}

func (o *CreateDrainDeliverySyslog1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliverySyslog1) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type CreateDrainTypeOtlphttp1 string

const (
	CreateDrainTypeOtlphttp1Otlphttp CreateDrainTypeOtlphttp1 = "otlphttp"
)

func (e CreateDrainTypeOtlphttp1) ToPointer() *CreateDrainTypeOtlphttp1 {
	return &e
}
func (e *CreateDrainTypeOtlphttp1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = CreateDrainTypeOtlphttp1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeOtlphttp1: %v", v)
	}
}

type CreateDrainEndpointResponse1 struct {
	Traces string `json:"traces"`
}

func (c CreateDrainEndpointResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainEndpointResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainEndpointResponse1) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type CreateDrainEncodingResponse2 string

const (
	CreateDrainEncodingResponse2JSON  CreateDrainEncodingResponse2 = "json"
	CreateDrainEncodingResponse2Proto CreateDrainEncodingResponse2 = "proto"
)

func (e CreateDrainEncodingResponse2) ToPointer() *CreateDrainEncodingResponse2 {
	return &e
}
func (e *CreateDrainEncodingResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = CreateDrainEncodingResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEncodingResponse2: %v", v)
	}
}

type CreateDrainDeliveryOtlphttp1 struct {
	Type     CreateDrainTypeOtlphttp1     `json:"type"`
	Endpoint CreateDrainEndpointResponse1 `json:"endpoint"`
	Encoding CreateDrainEncodingResponse2 `json:"encoding"`
	Headers  map[string]string            `json:"headers"`
	Secret   *string                      `json:"secret,omitempty"`
}

func (c CreateDrainDeliveryOtlphttp1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryOtlphttp1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryOtlphttp1) GetType() CreateDrainTypeOtlphttp1 {
	if o == nil {
		return CreateDrainTypeOtlphttp1("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryOtlphttp1) GetEndpoint() CreateDrainEndpointResponse1 {
	if o == nil {
		return CreateDrainEndpointResponse1{}
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryOtlphttp1) GetEncoding() CreateDrainEncodingResponse2 {
	if o == nil {
		return CreateDrainEncodingResponse2("")
	}
	return o.Encoding
}

func (o *CreateDrainDeliveryOtlphttp1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *CreateDrainDeliveryOtlphttp1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateDrainTypeHTTP1 string

const (
	CreateDrainTypeHTTP1HTTP CreateDrainTypeHTTP1 = "http"
)

func (e CreateDrainTypeHTTP1) ToPointer() *CreateDrainTypeHTTP1 {
	return &e
}
func (e *CreateDrainTypeHTTP1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = CreateDrainTypeHTTP1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeHTTP1: %v", v)
	}
}

type CreateDrainEncodingResponse1 string

const (
	CreateDrainEncodingResponse1JSON   CreateDrainEncodingResponse1 = "json"
	CreateDrainEncodingResponse1Ndjson CreateDrainEncodingResponse1 = "ndjson"
)

func (e CreateDrainEncodingResponse1) ToPointer() *CreateDrainEncodingResponse1 {
	return &e
}
func (e *CreateDrainEncodingResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = CreateDrainEncodingResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEncodingResponse1: %v", v)
	}
}

type CreateDrainCompressionResponse1 string

const (
	CreateDrainCompressionResponse1Gzip CreateDrainCompressionResponse1 = "gzip"
	CreateDrainCompressionResponse1None CreateDrainCompressionResponse1 = "none"
)

func (e CreateDrainCompressionResponse1) ToPointer() *CreateDrainCompressionResponse1 {
	return &e
}
func (e *CreateDrainCompressionResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = CreateDrainCompressionResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainCompressionResponse1: %v", v)
	}
}

type CreateDrainDeliveryHTTP1 struct {
	Type        CreateDrainTypeHTTP1             `json:"type"`
	Endpoint    string                           `json:"endpoint"`
	Encoding    CreateDrainEncodingResponse1     `json:"encoding"`
	Compression *CreateDrainCompressionResponse1 `json:"compression,omitempty"`
	Headers     map[string]string                `json:"headers"`
	Secret      *string                          `json:"secret,omitempty"`
}

func (c CreateDrainDeliveryHTTP1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainDeliveryHTTP1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainDeliveryHTTP1) GetType() CreateDrainTypeHTTP1 {
	if o == nil {
		return CreateDrainTypeHTTP1("")
	}
	return o.Type
}

func (o *CreateDrainDeliveryHTTP1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *CreateDrainDeliveryHTTP1) GetEncoding() CreateDrainEncodingResponse1 {
	if o == nil {
		return CreateDrainEncodingResponse1("")
	}
	return o.Encoding
}

func (o *CreateDrainDeliveryHTTP1) GetCompression() *CreateDrainCompressionResponse1 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *CreateDrainDeliveryHTTP1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *CreateDrainDeliveryHTTP1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type CreateDrainDeliveryResponseUnion1Type string

const (
	CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryHTTP1               CreateDrainDeliveryResponseUnion1Type = "createDrain_delivery_HTTP_1"
	CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryOtlphttp1           CreateDrainDeliveryResponseUnion1Type = "createDrain_delivery_Otlphttp_1"
	CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliverySyslog1             CreateDrainDeliveryResponseUnion1Type = "createDrain_delivery_Syslog_1"
	CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryClickhouse1         CreateDrainDeliveryResponseUnion1Type = "createDrain_delivery_Clickhouse_1"
	CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryVercelOtelTracesDb1 CreateDrainDeliveryResponseUnion1Type = "createDrain_delivery_VercelOtelTracesDb_1"
)

type CreateDrainDeliveryResponseUnion1 struct {
	CreateDrainDeliveryHTTP1               *CreateDrainDeliveryHTTP1               `queryParam:"inline"`
	CreateDrainDeliveryOtlphttp1           *CreateDrainDeliveryOtlphttp1           `queryParam:"inline"`
	CreateDrainDeliverySyslog1             *CreateDrainDeliverySyslog1             `queryParam:"inline"`
	CreateDrainDeliveryClickhouse1         *CreateDrainDeliveryClickhouse1         `queryParam:"inline"`
	CreateDrainDeliveryVercelOtelTracesDb1 *CreateDrainDeliveryVercelOtelTracesDb1 `queryParam:"inline"`

	Type CreateDrainDeliveryResponseUnion1Type
}

func CreateCreateDrainDeliveryResponseUnion1CreateDrainDeliveryHTTP1(createDrainDeliveryHTTP1 CreateDrainDeliveryHTTP1) CreateDrainDeliveryResponseUnion1 {
	typ := CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryHTTP1

	return CreateDrainDeliveryResponseUnion1{
		CreateDrainDeliveryHTTP1: &createDrainDeliveryHTTP1,
		Type:                     typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion1CreateDrainDeliveryOtlphttp1(createDrainDeliveryOtlphttp1 CreateDrainDeliveryOtlphttp1) CreateDrainDeliveryResponseUnion1 {
	typ := CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryOtlphttp1

	return CreateDrainDeliveryResponseUnion1{
		CreateDrainDeliveryOtlphttp1: &createDrainDeliveryOtlphttp1,
		Type:                         typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion1CreateDrainDeliverySyslog1(createDrainDeliverySyslog1 CreateDrainDeliverySyslog1) CreateDrainDeliveryResponseUnion1 {
	typ := CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliverySyslog1

	return CreateDrainDeliveryResponseUnion1{
		CreateDrainDeliverySyslog1: &createDrainDeliverySyslog1,
		Type:                       typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion1CreateDrainDeliveryClickhouse1(createDrainDeliveryClickhouse1 CreateDrainDeliveryClickhouse1) CreateDrainDeliveryResponseUnion1 {
	typ := CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryClickhouse1

	return CreateDrainDeliveryResponseUnion1{
		CreateDrainDeliveryClickhouse1: &createDrainDeliveryClickhouse1,
		Type:                           typ,
	}
}

func CreateCreateDrainDeliveryResponseUnion1CreateDrainDeliveryVercelOtelTracesDb1(createDrainDeliveryVercelOtelTracesDb1 CreateDrainDeliveryVercelOtelTracesDb1) CreateDrainDeliveryResponseUnion1 {
	typ := CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryVercelOtelTracesDb1

	return CreateDrainDeliveryResponseUnion1{
		CreateDrainDeliveryVercelOtelTracesDb1: &createDrainDeliveryVercelOtelTracesDb1,
		Type:                                   typ,
	}
}

func (u *CreateDrainDeliveryResponseUnion1) UnmarshalJSON(data []byte) error {

	var createDrainDeliveryHTTP1 CreateDrainDeliveryHTTP1 = CreateDrainDeliveryHTTP1{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryHTTP1, "", true, nil); err == nil {
		u.CreateDrainDeliveryHTTP1 = &createDrainDeliveryHTTP1
		u.Type = CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryHTTP1
		return nil
	}

	var createDrainDeliveryOtlphttp1 CreateDrainDeliveryOtlphttp1 = CreateDrainDeliveryOtlphttp1{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryOtlphttp1, "", true, nil); err == nil {
		u.CreateDrainDeliveryOtlphttp1 = &createDrainDeliveryOtlphttp1
		u.Type = CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryOtlphttp1
		return nil
	}

	var createDrainDeliverySyslog1 CreateDrainDeliverySyslog1 = CreateDrainDeliverySyslog1{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliverySyslog1, "", true, nil); err == nil {
		u.CreateDrainDeliverySyslog1 = &createDrainDeliverySyslog1
		u.Type = CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliverySyslog1
		return nil
	}

	var createDrainDeliveryClickhouse1 CreateDrainDeliveryClickhouse1 = CreateDrainDeliveryClickhouse1{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryClickhouse1, "", true, nil); err == nil {
		u.CreateDrainDeliveryClickhouse1 = &createDrainDeliveryClickhouse1
		u.Type = CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryClickhouse1
		return nil
	}

	var createDrainDeliveryVercelOtelTracesDb1 CreateDrainDeliveryVercelOtelTracesDb1 = CreateDrainDeliveryVercelOtelTracesDb1{}
	if err := utils.UnmarshalJSON(data, &createDrainDeliveryVercelOtelTracesDb1, "", true, nil); err == nil {
		u.CreateDrainDeliveryVercelOtelTracesDb1 = &createDrainDeliveryVercelOtelTracesDb1
		u.Type = CreateDrainDeliveryResponseUnion1TypeCreateDrainDeliveryVercelOtelTracesDb1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainDeliveryResponseUnion1", string(data))
}

func (u CreateDrainDeliveryResponseUnion1) MarshalJSON() ([]byte, error) {
	if u.CreateDrainDeliveryHTTP1 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryHTTP1, "", true)
	}

	if u.CreateDrainDeliveryOtlphttp1 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryOtlphttp1, "", true)
	}

	if u.CreateDrainDeliverySyslog1 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliverySyslog1, "", true)
	}

	if u.CreateDrainDeliveryClickhouse1 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryClickhouse1, "", true)
	}

	if u.CreateDrainDeliveryVercelOtelTracesDb1 != nil {
		return utils.MarshalJSON(u.CreateDrainDeliveryVercelOtelTracesDb1, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainDeliveryResponseUnion1: all fields are null")
}

type CreateDrainTypeHeadSampling1 string

const (
	CreateDrainTypeHeadSampling1HeadSampling CreateDrainTypeHeadSampling1 = "head_sampling"
)

func (e CreateDrainTypeHeadSampling1) ToPointer() *CreateDrainTypeHeadSampling1 {
	return &e
}
func (e *CreateDrainTypeHeadSampling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = CreateDrainTypeHeadSampling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeHeadSampling1: %v", v)
	}
}

type CreateDrainEnvHeadSampling1 string

const (
	CreateDrainEnvHeadSampling1Production CreateDrainEnvHeadSampling1 = "production"
	CreateDrainEnvHeadSampling1Preview    CreateDrainEnvHeadSampling1 = "preview"
)

func (e CreateDrainEnvHeadSampling1) ToPointer() *CreateDrainEnvHeadSampling1 {
	return &e
}
func (e *CreateDrainEnvHeadSampling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateDrainEnvHeadSampling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainEnvHeadSampling1: %v", v)
	}
}

type CreateDrainSamplingResponse1 struct {
	Type        CreateDrainTypeHeadSampling1 `json:"type"`
	Rate        float64                      `json:"rate"`
	Env         *CreateDrainEnvHeadSampling1 `json:"env,omitempty"`
	RequestPath *string                      `json:"requestPath,omitempty"`
}

func (c CreateDrainSamplingResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSamplingResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSamplingResponse1) GetType() CreateDrainTypeHeadSampling1 {
	if o == nil {
		return CreateDrainTypeHeadSampling1("")
	}
	return o.Type
}

func (o *CreateDrainSamplingResponse1) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *CreateDrainSamplingResponse1) GetEnv() *CreateDrainEnvHeadSampling1 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateDrainSamplingResponse1) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type CreateDrainStatus1 string

const (
	CreateDrainStatus1Enabled  CreateDrainStatus1 = "enabled"
	CreateDrainStatus1Disabled CreateDrainStatus1 = "disabled"
	CreateDrainStatus1Errored  CreateDrainStatus1 = "errored"
)

func (e CreateDrainStatus1) ToPointer() *CreateDrainStatus1 {
	return &e
}
func (e *CreateDrainStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = CreateDrainStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainStatus1: %v", v)
	}
}

type CreateDrainDisabledReason1 string

const (
	CreateDrainDisabledReason1DisabledByOwner      CreateDrainDisabledReason1 = "disabled-by-owner"
	CreateDrainDisabledReason1FeatureNotAvailable  CreateDrainDisabledReason1 = "feature-not-available"
	CreateDrainDisabledReason1AccountPlanDowngrade CreateDrainDisabledReason1 = "account-plan-downgrade"
	CreateDrainDisabledReason1DisabledByAdmin      CreateDrainDisabledReason1 = "disabled-by-admin"
)

func (e CreateDrainDisabledReason1) ToPointer() *CreateDrainDisabledReason1 {
	return &e
}
func (e *CreateDrainDisabledReason1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = CreateDrainDisabledReason1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainDisabledReason1: %v", v)
	}
}

type CreateDrainKindIntegration1 string

const (
	CreateDrainKindIntegration1Integration CreateDrainKindIntegration1 = "integration"
)

func (e CreateDrainKindIntegration1) ToPointer() *CreateDrainKindIntegration1 {
	return &e
}
func (e *CreateDrainKindIntegration1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = CreateDrainKindIntegration1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainKindIntegration1: %v", v)
	}
}

type CreateDrainSourceIntegration1 struct {
	Kind                       CreateDrainKindIntegration1 `json:"kind"`
	ResourceID                 *string                     `json:"resourceId,omitempty"`
	ExternalResourceID         *string                     `json:"externalResourceId,omitempty"`
	IntegrationID              string                      `json:"integrationId"`
	IntegrationConfigurationID string                      `json:"integrationConfigurationId"`
}

func (c CreateDrainSourceIntegration1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceIntegration1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceIntegration1) GetKind() CreateDrainKindIntegration1 {
	if o == nil {
		return CreateDrainKindIntegration1("")
	}
	return o.Kind
}

func (o *CreateDrainSourceIntegration1) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *CreateDrainSourceIntegration1) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *CreateDrainSourceIntegration1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateDrainSourceIntegration1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateDrainKindSelfServed1 string

const (
	CreateDrainKindSelfServed1SelfServed CreateDrainKindSelfServed1 = "self-served"
)

func (e CreateDrainKindSelfServed1) ToPointer() *CreateDrainKindSelfServed1 {
	return &e
}
func (e *CreateDrainKindSelfServed1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = CreateDrainKindSelfServed1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainKindSelfServed1: %v", v)
	}
}

type CreateDrainSourceSelfServed1 struct {
	Kind CreateDrainKindSelfServed1 `json:"kind"`
}

func (c CreateDrainSourceSelfServed1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainSourceSelfServed1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainSourceSelfServed1) GetKind() CreateDrainKindSelfServed1 {
	if o == nil {
		return CreateDrainKindSelfServed1("")
	}
	return o.Kind
}

type CreateDrainResponseBodySourceUnion1Type string

const (
	CreateDrainResponseBodySourceUnion1TypeCreateDrainSourceSelfServed1  CreateDrainResponseBodySourceUnion1Type = "createDrain_source_SelfServed_1"
	CreateDrainResponseBodySourceUnion1TypeCreateDrainSourceIntegration1 CreateDrainResponseBodySourceUnion1Type = "createDrain_source_Integration_1"
)

type CreateDrainResponseBodySourceUnion1 struct {
	CreateDrainSourceSelfServed1  *CreateDrainSourceSelfServed1  `queryParam:"inline"`
	CreateDrainSourceIntegration1 *CreateDrainSourceIntegration1 `queryParam:"inline"`

	Type CreateDrainResponseBodySourceUnion1Type
}

func CreateCreateDrainResponseBodySourceUnion1CreateDrainSourceSelfServed1(createDrainSourceSelfServed1 CreateDrainSourceSelfServed1) CreateDrainResponseBodySourceUnion1 {
	typ := CreateDrainResponseBodySourceUnion1TypeCreateDrainSourceSelfServed1

	return CreateDrainResponseBodySourceUnion1{
		CreateDrainSourceSelfServed1: &createDrainSourceSelfServed1,
		Type:                         typ,
	}
}

func CreateCreateDrainResponseBodySourceUnion1CreateDrainSourceIntegration1(createDrainSourceIntegration1 CreateDrainSourceIntegration1) CreateDrainResponseBodySourceUnion1 {
	typ := CreateDrainResponseBodySourceUnion1TypeCreateDrainSourceIntegration1

	return CreateDrainResponseBodySourceUnion1{
		CreateDrainSourceIntegration1: &createDrainSourceIntegration1,
		Type:                          typ,
	}
}

func (u *CreateDrainResponseBodySourceUnion1) UnmarshalJSON(data []byte) error {

	var createDrainSourceIntegration1 CreateDrainSourceIntegration1 = CreateDrainSourceIntegration1{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceIntegration1, "", true, nil); err == nil {
		u.CreateDrainSourceIntegration1 = &createDrainSourceIntegration1
		u.Type = CreateDrainResponseBodySourceUnion1TypeCreateDrainSourceIntegration1
		return nil
	}

	var createDrainSourceSelfServed1 CreateDrainSourceSelfServed1 = CreateDrainSourceSelfServed1{}
	if err := utils.UnmarshalJSON(data, &createDrainSourceSelfServed1, "", true, nil); err == nil {
		u.CreateDrainSourceSelfServed1 = &createDrainSourceSelfServed1
		u.Type = CreateDrainResponseBodySourceUnion1TypeCreateDrainSourceSelfServed1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainResponseBodySourceUnion1", string(data))
}

func (u CreateDrainResponseBodySourceUnion1) MarshalJSON() ([]byte, error) {
	if u.CreateDrainSourceSelfServed1 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceSelfServed1, "", true)
	}

	if u.CreateDrainSourceIntegration1 != nil {
		return utils.MarshalJSON(u.CreateDrainSourceIntegration1, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainResponseBodySourceUnion1: all fields are null")
}

type CreateDrainVersionV21 string

const (
	CreateDrainVersionV21V2 CreateDrainVersionV21 = "v2"
)

func (e CreateDrainVersionV21) ToPointer() *CreateDrainVersionV21 {
	return &e
}
func (e *CreateDrainVersionV21) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = CreateDrainVersionV21(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainVersionV21: %v", v)
	}
}

type CreateDrainTypeOdata1 string

const (
	CreateDrainTypeOdata1Odata CreateDrainTypeOdata1 = "odata"
)

func (e CreateDrainTypeOdata1) ToPointer() *CreateDrainTypeOdata1 {
	return &e
}
func (e *CreateDrainTypeOdata1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = CreateDrainTypeOdata1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeOdata1: %v", v)
	}
}

type CreateDrainFilterOdata1 struct {
	Type CreateDrainTypeOdata1 `json:"type"`
	Text string                `json:"text"`
}

func (c CreateDrainFilterOdata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterOdata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterOdata1) GetType() CreateDrainTypeOdata1 {
	if o == nil {
		return CreateDrainTypeOdata1("")
	}
	return o.Type
}

func (o *CreateDrainFilterOdata1) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type CreateDrainTypeBasic1 string

const (
	CreateDrainTypeBasic1Basic CreateDrainTypeBasic1 = "basic"
)

func (e CreateDrainTypeBasic1) ToPointer() *CreateDrainTypeBasic1 {
	return &e
}
func (e *CreateDrainTypeBasic1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = CreateDrainTypeBasic1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainTypeBasic1: %v", v)
	}
}

type CreateDrainFilterV2Project1 struct {
	Ids []string `json:"ids,omitempty"`
}

func (c CreateDrainFilterV2Project1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2Project1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2Project1) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type CreateDrainFilterV2Log1 struct {
	Sources []string `json:"sources,omitempty"`
}

func (c CreateDrainFilterV2Log1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2Log1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2Log1) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type CreateDrainFilterV2Deployment1 struct {
	Environments []string `json:"environments,omitempty"`
}

func (c CreateDrainFilterV2Deployment1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2Deployment1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2Deployment1) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type CreateDrainFilterBasic1 struct {
	Type       CreateDrainTypeBasic1           `json:"type"`
	Project    *CreateDrainFilterV2Project1    `json:"project,omitempty"`
	Log        *CreateDrainFilterV2Log1        `json:"log,omitempty"`
	Deployment *CreateDrainFilterV2Deployment1 `json:"deployment,omitempty"`
}

func (c CreateDrainFilterBasic1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterBasic1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterBasic1) GetType() CreateDrainTypeBasic1 {
	if o == nil {
		return CreateDrainTypeBasic1("")
	}
	return o.Type
}

func (o *CreateDrainFilterBasic1) GetProject() *CreateDrainFilterV2Project1 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateDrainFilterBasic1) GetLog() *CreateDrainFilterV2Log1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *CreateDrainFilterBasic1) GetDeployment() *CreateDrainFilterV2Deployment1 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type CreateDrainFilterResponseUnion1Type string

const (
	CreateDrainFilterResponseUnion1TypeCreateDrainFilterBasic1 CreateDrainFilterResponseUnion1Type = "createDrain_filter_Basic_1"
	CreateDrainFilterResponseUnion1TypeCreateDrainFilterOdata1 CreateDrainFilterResponseUnion1Type = "createDrain_filter_Odata_1"
)

type CreateDrainFilterResponseUnion1 struct {
	CreateDrainFilterBasic1 *CreateDrainFilterBasic1 `queryParam:"inline"`
	CreateDrainFilterOdata1 *CreateDrainFilterOdata1 `queryParam:"inline"`

	Type CreateDrainFilterResponseUnion1Type
}

func CreateCreateDrainFilterResponseUnion1CreateDrainFilterBasic1(createDrainFilterBasic1 CreateDrainFilterBasic1) CreateDrainFilterResponseUnion1 {
	typ := CreateDrainFilterResponseUnion1TypeCreateDrainFilterBasic1

	return CreateDrainFilterResponseUnion1{
		CreateDrainFilterBasic1: &createDrainFilterBasic1,
		Type:                    typ,
	}
}

func CreateCreateDrainFilterResponseUnion1CreateDrainFilterOdata1(createDrainFilterOdata1 CreateDrainFilterOdata1) CreateDrainFilterResponseUnion1 {
	typ := CreateDrainFilterResponseUnion1TypeCreateDrainFilterOdata1

	return CreateDrainFilterResponseUnion1{
		CreateDrainFilterOdata1: &createDrainFilterOdata1,
		Type:                    typ,
	}
}

func (u *CreateDrainFilterResponseUnion1) UnmarshalJSON(data []byte) error {

	var createDrainFilterOdata1 CreateDrainFilterOdata1 = CreateDrainFilterOdata1{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterOdata1, "", true, nil); err == nil {
		u.CreateDrainFilterOdata1 = &createDrainFilterOdata1
		u.Type = CreateDrainFilterResponseUnion1TypeCreateDrainFilterOdata1
		return nil
	}

	var createDrainFilterBasic1 CreateDrainFilterBasic1 = CreateDrainFilterBasic1{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterBasic1, "", true, nil); err == nil {
		u.CreateDrainFilterBasic1 = &createDrainFilterBasic1
		u.Type = CreateDrainFilterResponseUnion1TypeCreateDrainFilterBasic1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainFilterResponseUnion1", string(data))
}

func (u CreateDrainFilterResponseUnion1) MarshalJSON() ([]byte, error) {
	if u.CreateDrainFilterBasic1 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterBasic1, "", true)
	}

	if u.CreateDrainFilterOdata1 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterOdata1, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainFilterResponseUnion1: all fields are null")
}

type CreateDrainFilterV2V21 struct {
	Version CreateDrainVersionV21           `json:"version"`
	Filter  CreateDrainFilterResponseUnion1 `json:"filter"`
}

func (c CreateDrainFilterV2V21) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2V21) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2V21) GetVersion() CreateDrainVersionV21 {
	if o == nil {
		return CreateDrainVersionV21("")
	}
	return o.Version
}

func (o *CreateDrainFilterV2V21) GetFilter() CreateDrainFilterResponseUnion1 {
	if o == nil {
		return CreateDrainFilterResponseUnion1{}
	}
	return o.Filter
}

type CreateDrainVersionV11 string

const (
	CreateDrainVersionV11V1 CreateDrainVersionV11 = "v1"
)

func (e CreateDrainVersionV11) ToPointer() *CreateDrainVersionV11 {
	return &e
}
func (e *CreateDrainVersionV11) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = CreateDrainVersionV11(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateDrainVersionV11: %v", v)
	}
}

type CreateDrainFilterV2V11 struct {
	Version CreateDrainVersionV11 `json:"version"`
}

func (c CreateDrainFilterV2V11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainFilterV2V11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainFilterV2V11) GetVersion() CreateDrainVersionV11 {
	if o == nil {
		return CreateDrainVersionV11("")
	}
	return o.Version
}

type CreateDrainFilterV2Union1Type string

const (
	CreateDrainFilterV2Union1TypeCreateDrainFilterV2V11 CreateDrainFilterV2Union1Type = "createDrain_filterV2_V1_1"
	CreateDrainFilterV2Union1TypeCreateDrainFilterV2V21 CreateDrainFilterV2Union1Type = "createDrain_filterV2_V2_1"
)

type CreateDrainFilterV2Union1 struct {
	CreateDrainFilterV2V11 *CreateDrainFilterV2V11 `queryParam:"inline"`
	CreateDrainFilterV2V21 *CreateDrainFilterV2V21 `queryParam:"inline"`

	Type CreateDrainFilterV2Union1Type
}

func CreateCreateDrainFilterV2Union1CreateDrainFilterV2V11(createDrainFilterV2V11 CreateDrainFilterV2V11) CreateDrainFilterV2Union1 {
	typ := CreateDrainFilterV2Union1TypeCreateDrainFilterV2V11

	return CreateDrainFilterV2Union1{
		CreateDrainFilterV2V11: &createDrainFilterV2V11,
		Type:                   typ,
	}
}

func CreateCreateDrainFilterV2Union1CreateDrainFilterV2V21(createDrainFilterV2V21 CreateDrainFilterV2V21) CreateDrainFilterV2Union1 {
	typ := CreateDrainFilterV2Union1TypeCreateDrainFilterV2V21

	return CreateDrainFilterV2Union1{
		CreateDrainFilterV2V21: &createDrainFilterV2V21,
		Type:                   typ,
	}
}

func (u *CreateDrainFilterV2Union1) UnmarshalJSON(data []byte) error {

	var createDrainFilterV2V21 CreateDrainFilterV2V21 = CreateDrainFilterV2V21{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterV2V21, "", true, nil); err == nil {
		u.CreateDrainFilterV2V21 = &createDrainFilterV2V21
		u.Type = CreateDrainFilterV2Union1TypeCreateDrainFilterV2V21
		return nil
	}

	var createDrainFilterV2V11 CreateDrainFilterV2V11 = CreateDrainFilterV2V11{}
	if err := utils.UnmarshalJSON(data, &createDrainFilterV2V11, "", true, nil); err == nil {
		u.CreateDrainFilterV2V11 = &createDrainFilterV2V11
		u.Type = CreateDrainFilterV2Union1TypeCreateDrainFilterV2V11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainFilterV2Union1", string(data))
}

func (u CreateDrainFilterV2Union1) MarshalJSON() ([]byte, error) {
	if u.CreateDrainFilterV2V11 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterV2V11, "", true)
	}

	if u.CreateDrainFilterV2V21 != nil {
		return utils.MarshalJSON(u.CreateDrainFilterV2V21, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainFilterV2Union1: all fields are null")
}

type CreateDrainResponseBody1 struct {
	ID                  string                              `json:"id"`
	OwnerID             string                              `json:"ownerId"`
	Name                string                              `json:"name"`
	CreatedAt           float64                             `json:"createdAt"`
	CreatedFrom         *CreateDrainCreatedFrom1            `json:"createdFrom,omitempty"`
	UpdatedAt           float64                             `json:"updatedAt"`
	ProjectIds          []string                            `json:"projectIds,omitempty"`
	Schemas             *CreateDrainSchemasResponse1        `json:"schemas,omitempty"`
	Delivery            *CreateDrainDeliveryResponseUnion1  `json:"delivery,omitempty"`
	Sampling            []CreateDrainSamplingResponse1      `json:"sampling,omitempty"`
	TeamID              *string                             `json:"teamId,omitempty"`
	Status              *CreateDrainStatus1                 `json:"status,omitempty"`
	DisabledAt          *float64                            `json:"disabledAt,omitempty"`
	DisabledReason      *CreateDrainDisabledReason1         `json:"disabledReason,omitempty"`
	DisabledBy          *string                             `json:"disabledBy,omitempty"`
	FirstErrorTimestamp *float64                            `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID     *string                             `json:"configurationId,omitempty"`
	ClientID            *string                             `json:"clientId,omitempty"`
	Source              CreateDrainResponseBodySourceUnion1 `json:"source"`
	Filter              *string                             `json:"filter,omitempty"`
	FilterV2            *CreateDrainFilterV2Union1          `json:"filterV2,omitempty"`
}

func (c CreateDrainResponseBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateDrainResponseBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateDrainResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateDrainResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateDrainResponseBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateDrainResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateDrainResponseBody1) GetCreatedFrom() *CreateDrainCreatedFrom1 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *CreateDrainResponseBody1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateDrainResponseBody1) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateDrainResponseBody1) GetSchemas() *CreateDrainSchemasResponse1 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *CreateDrainResponseBody1) GetDelivery() *CreateDrainDeliveryResponseUnion1 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *CreateDrainResponseBody1) GetSampling() []CreateDrainSamplingResponse1 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *CreateDrainResponseBody1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateDrainResponseBody1) GetStatus() *CreateDrainStatus1 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateDrainResponseBody1) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateDrainResponseBody1) GetDisabledReason() *CreateDrainDisabledReason1 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *CreateDrainResponseBody1) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *CreateDrainResponseBody1) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *CreateDrainResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateDrainResponseBody1) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateDrainResponseBody1) GetSource() CreateDrainResponseBodySourceUnion1 {
	if o == nil {
		return CreateDrainResponseBodySourceUnion1{}
	}
	return o.Source
}

func (o *CreateDrainResponseBody1) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *CreateDrainResponseBody1) GetFilterV2() *CreateDrainFilterV2Union1 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

type CreateDrainResponseBodyType string

const (
	CreateDrainResponseBodyTypeCreateDrainResponseBody1 CreateDrainResponseBodyType = "createDrain_ResponseBody_1"
	CreateDrainResponseBodyTypeCreateDrainResponseBody2 CreateDrainResponseBodyType = "createDrain_ResponseBody_2"
)

type CreateDrainResponseBody struct {
	CreateDrainResponseBody1 *CreateDrainResponseBody1 `queryParam:"inline"`
	CreateDrainResponseBody2 *CreateDrainResponseBody2 `queryParam:"inline"`

	Type CreateDrainResponseBodyType
}

func CreateCreateDrainResponseBodyCreateDrainResponseBody1(createDrainResponseBody1 CreateDrainResponseBody1) CreateDrainResponseBody {
	typ := CreateDrainResponseBodyTypeCreateDrainResponseBody1

	return CreateDrainResponseBody{
		CreateDrainResponseBody1: &createDrainResponseBody1,
		Type:                     typ,
	}
}

func CreateCreateDrainResponseBodyCreateDrainResponseBody2(createDrainResponseBody2 CreateDrainResponseBody2) CreateDrainResponseBody {
	typ := CreateDrainResponseBodyTypeCreateDrainResponseBody2

	return CreateDrainResponseBody{
		CreateDrainResponseBody2: &createDrainResponseBody2,
		Type:                     typ,
	}
}

func (u *CreateDrainResponseBody) UnmarshalJSON(data []byte) error {

	var createDrainResponseBody1 CreateDrainResponseBody1 = CreateDrainResponseBody1{}
	if err := utils.UnmarshalJSON(data, &createDrainResponseBody1, "", true, nil); err == nil {
		u.CreateDrainResponseBody1 = &createDrainResponseBody1
		u.Type = CreateDrainResponseBodyTypeCreateDrainResponseBody1
		return nil
	}

	var createDrainResponseBody2 CreateDrainResponseBody2 = CreateDrainResponseBody2{}
	if err := utils.UnmarshalJSON(data, &createDrainResponseBody2, "", true, nil); err == nil {
		u.CreateDrainResponseBody2 = &createDrainResponseBody2
		u.Type = CreateDrainResponseBodyTypeCreateDrainResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateDrainResponseBody", string(data))
}

func (u CreateDrainResponseBody) MarshalJSON() ([]byte, error) {
	if u.CreateDrainResponseBody1 != nil {
		return utils.MarshalJSON(u.CreateDrainResponseBody1, "", true)
	}

	if u.CreateDrainResponseBody2 != nil {
		return utils.MarshalJSON(u.CreateDrainResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateDrainResponseBody: all fields are null")
}

type CreateDrainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *CreateDrainResponseBody
}

func (o *CreateDrainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateDrainResponse) GetOneOf() *CreateDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
