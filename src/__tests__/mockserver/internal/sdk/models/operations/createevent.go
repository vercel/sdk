// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type CreateEventEventType string

const (
	CreateEventEventTypeResourceUpdated CreateEventEventType = "resource.updated"
)

func (e CreateEventEventType) ToPointer() *CreateEventEventType {
	return &e
}
func (e *CreateEventEventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "resource.updated":
		*e = CreateEventEventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateEventEventType: %v", v)
	}
}

type Event2 struct {
	Type CreateEventEventType `json:"type"`
	// Partner-provided product slug or id
	ProductID string `json:"productId"`
	// Partner provided resource ID
	ResourceID string `json:"resourceId"`
}

func (o *Event2) GetType() CreateEventEventType {
	if o == nil {
		return CreateEventEventType("")
	}
	return o.Type
}

func (o *Event2) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Event2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type EventType string

const (
	EventTypeInstallationUpdated EventType = "installation.updated"
)

func (e EventType) ToPointer() *EventType {
	return &e
}
func (e *EventType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "installation.updated":
		*e = EventType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EventType: %v", v)
	}
}

type Event1 struct {
	Type EventType `json:"type"`
	// The installation-level billing plan ID
	BillingPlanID *string `json:"billingPlanId,omitempty"`
}

func (o *Event1) GetType() EventType {
	if o == nil {
		return EventType("")
	}
	return o.Type
}

func (o *Event1) GetBillingPlanID() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanID
}

type CreateEventEventUnionType string

const (
	CreateEventEventUnionTypeEvent1 CreateEventEventUnionType = "event_1"
	CreateEventEventUnionTypeEvent2 CreateEventEventUnionType = "event_2"
)

type CreateEventEvent struct {
	Event1 *Event1
	Event2 *Event2

	Type CreateEventEventUnionType
}

func CreateCreateEventEventEvent1(event1 Event1) CreateEventEvent {
	typ := CreateEventEventUnionTypeEvent1

	return CreateEventEvent{
		Event1: &event1,
		Type:   typ,
	}
}

func CreateCreateEventEventEvent2(event2 Event2) CreateEventEvent {
	typ := CreateEventEventUnionTypeEvent2

	return CreateEventEvent{
		Event2: &event2,
		Type:   typ,
	}
}

func (u *CreateEventEvent) UnmarshalJSON(data []byte) error {

	var event1 Event1 = Event1{}
	if err := utils.UnmarshalJSON(data, &event1, "", true, true); err == nil {
		u.Event1 = &event1
		u.Type = CreateEventEventUnionTypeEvent1
		return nil
	}

	var event2 Event2 = Event2{}
	if err := utils.UnmarshalJSON(data, &event2, "", true, true); err == nil {
		u.Event2 = &event2
		u.Type = CreateEventEventUnionTypeEvent2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateEventEvent", string(data))
}

func (u CreateEventEvent) MarshalJSON() ([]byte, error) {
	if u.Event1 != nil {
		return utils.MarshalJSON(u.Event1, "", true)
	}

	if u.Event2 != nil {
		return utils.MarshalJSON(u.Event2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateEventEvent: all fields are null")
}

type CreateEventRequestBody struct {
	Event CreateEventEvent `json:"event"`
}

func (o *CreateEventRequestBody) GetEvent() CreateEventEvent {
	if o == nil {
		return CreateEventEvent{}
	}
	return o.Event
}

type CreateEventRequest struct {
	IntegrationConfigurationID string                 `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	RequestBody                CreateEventRequestBody `request:"mediaType=application/json"`
}

func (o *CreateEventRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *CreateEventRequest) GetRequestBody() CreateEventRequestBody {
	if o == nil {
		return CreateEventRequestBody{}
	}
	return o.RequestBody
}

type CreateEventResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *CreateEventResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
