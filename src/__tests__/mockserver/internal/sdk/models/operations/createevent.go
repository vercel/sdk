// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type TypeResourceUpdated string

const (
	TypeResourceUpdatedResourceUpdated TypeResourceUpdated = "resource.updated"
)

func (e TypeResourceUpdated) ToPointer() *TypeResourceUpdated {
	return &e
}
func (e *TypeResourceUpdated) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "resource.updated":
		*e = TypeResourceUpdated(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeResourceUpdated: %v", v)
	}
}

type EventResourceUpdated struct {
	Type TypeResourceUpdated `json:"type"`
	// Partner-provided product slug or id
	ProductID string `json:"productId"`
	// Partner provided resource ID
	ResourceID string `json:"resourceId"`
}

func (o *EventResourceUpdated) GetType() TypeResourceUpdated {
	if o == nil {
		return TypeResourceUpdated("")
	}
	return o.Type
}

func (o *EventResourceUpdated) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *EventResourceUpdated) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type TypeInstallationUpdated string

const (
	TypeInstallationUpdatedInstallationUpdated TypeInstallationUpdated = "installation.updated"
)

func (e TypeInstallationUpdated) ToPointer() *TypeInstallationUpdated {
	return &e
}
func (e *TypeInstallationUpdated) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "installation.updated":
		*e = TypeInstallationUpdated(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeInstallationUpdated: %v", v)
	}
}

type EventInstallationUpdated struct {
	Type TypeInstallationUpdated `json:"type"`
	// The installation-level billing plan ID
	BillingPlanID *string `json:"billingPlanId,omitempty"`
}

func (o *EventInstallationUpdated) GetType() TypeInstallationUpdated {
	if o == nil {
		return TypeInstallationUpdated("")
	}
	return o.Type
}

func (o *EventInstallationUpdated) GetBillingPlanID() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanID
}

type EventType string

const (
	EventTypeEventInstallationUpdated EventType = "event_InstallationUpdated"
	EventTypeEventResourceUpdated     EventType = "event_ResourceUpdated"
)

type Event struct {
	EventInstallationUpdated *EventInstallationUpdated `queryParam:"inline"`
	EventResourceUpdated     *EventResourceUpdated     `queryParam:"inline"`

	Type EventType
}

func CreateEventEventInstallationUpdated(eventInstallationUpdated EventInstallationUpdated) Event {
	typ := EventTypeEventInstallationUpdated

	return Event{
		EventInstallationUpdated: &eventInstallationUpdated,
		Type:                     typ,
	}
}

func CreateEventEventResourceUpdated(eventResourceUpdated EventResourceUpdated) Event {
	typ := EventTypeEventResourceUpdated

	return Event{
		EventResourceUpdated: &eventResourceUpdated,
		Type:                 typ,
	}
}

func (u *Event) UnmarshalJSON(data []byte) error {

	var eventInstallationUpdated EventInstallationUpdated = EventInstallationUpdated{}
	if err := utils.UnmarshalJSON(data, &eventInstallationUpdated, "", true, true); err == nil {
		u.EventInstallationUpdated = &eventInstallationUpdated
		u.Type = EventTypeEventInstallationUpdated
		return nil
	}

	var eventResourceUpdated EventResourceUpdated = EventResourceUpdated{}
	if err := utils.UnmarshalJSON(data, &eventResourceUpdated, "", true, true); err == nil {
		u.EventResourceUpdated = &eventResourceUpdated
		u.Type = EventTypeEventResourceUpdated
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Event", string(data))
}

func (u Event) MarshalJSON() ([]byte, error) {
	if u.EventInstallationUpdated != nil {
		return utils.MarshalJSON(u.EventInstallationUpdated, "", true)
	}

	if u.EventResourceUpdated != nil {
		return utils.MarshalJSON(u.EventResourceUpdated, "", true)
	}

	return nil, errors.New("could not marshal union type Event: all fields are null")
}

type CreateEventRequestBody struct {
	Event Event `json:"event"`
}

func (o *CreateEventRequestBody) GetEvent() Event {
	if o == nil {
		return Event{}
	}
	return o.Event
}

type CreateEventRequest struct {
	IntegrationConfigurationID string                 `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	RequestBody                CreateEventRequestBody `request:"mediaType=application/json"`
}

func (o *CreateEventRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *CreateEventRequest) GetRequestBody() CreateEventRequestBody {
	if o == nil {
		return CreateEventRequestBody{}
	}
	return o.RequestBody
}

type CreateEventResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *CreateEventResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
