// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// DeliveryFormatRequest - The delivery log format
type DeliveryFormatRequest string

const (
	DeliveryFormatRequestJSON   DeliveryFormatRequest = "json"
	DeliveryFormatRequestNdjson DeliveryFormatRequest = "ndjson"
)

func (e DeliveryFormatRequest) ToPointer() *DeliveryFormatRequest {
	return &e
}
func (e *DeliveryFormatRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = DeliveryFormatRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeliveryFormatRequest: %v", v)
	}
}

type CreateLogDrainSourceRequest string

const (
	CreateLogDrainSourceRequestStatic   CreateLogDrainSourceRequest = "static"
	CreateLogDrainSourceRequestLambda   CreateLogDrainSourceRequest = "lambda"
	CreateLogDrainSourceRequestBuild    CreateLogDrainSourceRequest = "build"
	CreateLogDrainSourceRequestEdge     CreateLogDrainSourceRequest = "edge"
	CreateLogDrainSourceRequestExternal CreateLogDrainSourceRequest = "external"
	CreateLogDrainSourceRequestFirewall CreateLogDrainSourceRequest = "firewall"
)

func (e CreateLogDrainSourceRequest) ToPointer() *CreateLogDrainSourceRequest {
	return &e
}
func (e *CreateLogDrainSourceRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "static":
		fallthrough
	case "lambda":
		fallthrough
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "external":
		fallthrough
	case "firewall":
		*e = CreateLogDrainSourceRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainSourceRequest: %v", v)
	}
}

type EnvironmentRequest string

const (
	EnvironmentRequestPreview    EnvironmentRequest = "preview"
	EnvironmentRequestProduction EnvironmentRequest = "production"
)

func (e EnvironmentRequest) ToPointer() *EnvironmentRequest {
	return &e
}
func (e *EnvironmentRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = EnvironmentRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentRequest: %v", v)
	}
}

type CreateLogDrainRequestBody struct {
	// The name of the log drain
	Name       string   `json:"name"`
	ProjectIds []string `json:"projectIds,omitempty"`
	// A secret to sign log drain notification headers so a consumer can verify their authenticity
	Secret *string `json:"secret,omitempty"`
	// The delivery log format
	DeliveryFormat *DeliveryFormatRequest `json:"deliveryFormat,omitempty"`
	// The url where you will receive logs. The protocol must be `https://` or `http://` when type is `json` and `ndjson`.
	URL     string                        `json:"url"`
	Sources []CreateLogDrainSourceRequest `json:"sources,omitempty"`
	// Headers to be sent together with the request
	Headers      map[string]string    `json:"headers,omitempty"`
	Environments []EnvironmentRequest `json:"environments,omitempty"`
}

func (o *CreateLogDrainRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateLogDrainRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateLogDrainRequestBody) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateLogDrainRequestBody) GetDeliveryFormat() *DeliveryFormatRequest {
	if o == nil {
		return nil
	}
	return o.DeliveryFormat
}

func (o *CreateLogDrainRequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateLogDrainRequestBody) GetSources() []CreateLogDrainSourceRequest {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *CreateLogDrainRequestBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateLogDrainRequestBody) GetEnvironments() []EnvironmentRequest {
	if o == nil {
		return nil
	}
	return o.Environments
}

type CreateLogDrainRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateLogDrainRequestBody `request:"mediaType=application/json"`
}

func (o *CreateLogDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateLogDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateLogDrainRequest) GetRequestBody() CreateLogDrainRequestBody {
	if o == nil {
		return CreateLogDrainRequestBody{}
	}
	return o.RequestBody
}

// CreateLogDrainDeliveryFormatResponse - The delivery log format
type CreateLogDrainDeliveryFormatResponse string

const (
	CreateLogDrainDeliveryFormatResponseJSON     CreateLogDrainDeliveryFormatResponse = "json"
	CreateLogDrainDeliveryFormatResponseNdjson   CreateLogDrainDeliveryFormatResponse = "ndjson"
	CreateLogDrainDeliveryFormatResponseSyslog   CreateLogDrainDeliveryFormatResponse = "syslog"
	CreateLogDrainDeliveryFormatResponseProtobuf CreateLogDrainDeliveryFormatResponse = "protobuf"
)

func (e CreateLogDrainDeliveryFormatResponse) ToPointer() *CreateLogDrainDeliveryFormatResponse {
	return &e
}
func (e *CreateLogDrainDeliveryFormatResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		fallthrough
	case "protobuf":
		*e = CreateLogDrainDeliveryFormatResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainDeliveryFormatResponse: %v", v)
	}
}

// CreateLogDrainSourceResponseBodyEnum - The sources from which logs are currently being delivered to this log drain.
type CreateLogDrainSourceResponseBodyEnum string

const (
	CreateLogDrainSourceResponseBodyEnumBuild    CreateLogDrainSourceResponseBodyEnum = "build"
	CreateLogDrainSourceResponseBodyEnumEdge     CreateLogDrainSourceResponseBodyEnum = "edge"
	CreateLogDrainSourceResponseBodyEnumLambda   CreateLogDrainSourceResponseBodyEnum = "lambda"
	CreateLogDrainSourceResponseBodyEnumStatic   CreateLogDrainSourceResponseBodyEnum = "static"
	CreateLogDrainSourceResponseBodyEnumExternal CreateLogDrainSourceResponseBodyEnum = "external"
	CreateLogDrainSourceResponseBodyEnumFirewall CreateLogDrainSourceResponseBodyEnum = "firewall"
)

func (e CreateLogDrainSourceResponseBodyEnum) ToPointer() *CreateLogDrainSourceResponseBodyEnum {
	return &e
}
func (e *CreateLogDrainSourceResponseBodyEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "lambda":
		fallthrough
	case "static":
		fallthrough
	case "external":
		fallthrough
	case "firewall":
		*e = CreateLogDrainSourceResponseBodyEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainSourceResponseBodyEnum: %v", v)
	}
}

// CreateLogDrainCreatedFrom - Whether the log drain was created by an integration or by a user
type CreateLogDrainCreatedFrom string

const (
	CreateLogDrainCreatedFromIntegration CreateLogDrainCreatedFrom = "integration"
	CreateLogDrainCreatedFromSelfServed  CreateLogDrainCreatedFrom = "self-served"
)

func (e CreateLogDrainCreatedFrom) ToPointer() *CreateLogDrainCreatedFrom {
	return &e
}
func (e *CreateLogDrainCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		fallthrough
	case "self-served":
		*e = CreateLogDrainCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainCreatedFrom: %v", v)
	}
}

// CreateLogDrainEnvironmentResponse - The environment of log drain
type CreateLogDrainEnvironmentResponse string

const (
	CreateLogDrainEnvironmentResponseProduction CreateLogDrainEnvironmentResponse = "production"
	CreateLogDrainEnvironmentResponsePreview    CreateLogDrainEnvironmentResponse = "preview"
)

func (e CreateLogDrainEnvironmentResponse) ToPointer() *CreateLogDrainEnvironmentResponse {
	return &e
}
func (e *CreateLogDrainEnvironmentResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateLogDrainEnvironmentResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainEnvironmentResponse: %v", v)
	}
}

type CreateLogDrainKindIntegration string

const (
	CreateLogDrainKindIntegrationIntegration CreateLogDrainKindIntegration = "integration"
)

func (e CreateLogDrainKindIntegration) ToPointer() *CreateLogDrainKindIntegration {
	return &e
}
func (e *CreateLogDrainKindIntegration) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = CreateLogDrainKindIntegration(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainKindIntegration: %v", v)
	}
}

type CreateLogDrainSourceIntegration struct {
	Kind                       CreateLogDrainKindIntegration `json:"kind"`
	ResourceID                 *string                       `json:"resourceId,omitempty"`
	ExternalResourceID         *string                       `json:"externalResourceId,omitempty"`
	IntegrationID              string                        `json:"integrationId"`
	IntegrationConfigurationID string                        `json:"integrationConfigurationId"`
}

func (c CreateLogDrainSourceIntegration) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateLogDrainSourceIntegration) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateLogDrainSourceIntegration) GetKind() CreateLogDrainKindIntegration {
	if o == nil {
		return CreateLogDrainKindIntegration("")
	}
	return o.Kind
}

func (o *CreateLogDrainSourceIntegration) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *CreateLogDrainSourceIntegration) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *CreateLogDrainSourceIntegration) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateLogDrainSourceIntegration) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateLogDrainKindSelfServed string

const (
	CreateLogDrainKindSelfServedSelfServed CreateLogDrainKindSelfServed = "self-served"
)

func (e CreateLogDrainKindSelfServed) ToPointer() *CreateLogDrainKindSelfServed {
	return &e
}
func (e *CreateLogDrainKindSelfServed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = CreateLogDrainKindSelfServed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateLogDrainKindSelfServed: %v", v)
	}
}

type CreateLogDrainSourceSelfServed struct {
	Kind CreateLogDrainKindSelfServed `json:"kind"`
}

func (c CreateLogDrainSourceSelfServed) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateLogDrainSourceSelfServed) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateLogDrainSourceSelfServed) GetKind() CreateLogDrainKindSelfServed {
	if o == nil {
		return CreateLogDrainKindSelfServed("")
	}
	return o.Kind
}

type CreateLogDrainSourceUnionType string

const (
	CreateLogDrainSourceUnionTypeCreateLogDrainSourceSelfServed  CreateLogDrainSourceUnionType = "createLogDrain_source_SelfServed"
	CreateLogDrainSourceUnionTypeCreateLogDrainSourceIntegration CreateLogDrainSourceUnionType = "createLogDrain_source_Integration"
)

type CreateLogDrainSourceUnion struct {
	CreateLogDrainSourceSelfServed  *CreateLogDrainSourceSelfServed  `queryParam:"inline"`
	CreateLogDrainSourceIntegration *CreateLogDrainSourceIntegration `queryParam:"inline"`

	Type CreateLogDrainSourceUnionType
}

func CreateCreateLogDrainSourceUnionCreateLogDrainSourceSelfServed(createLogDrainSourceSelfServed CreateLogDrainSourceSelfServed) CreateLogDrainSourceUnion {
	typ := CreateLogDrainSourceUnionTypeCreateLogDrainSourceSelfServed

	return CreateLogDrainSourceUnion{
		CreateLogDrainSourceSelfServed: &createLogDrainSourceSelfServed,
		Type:                           typ,
	}
}

func CreateCreateLogDrainSourceUnionCreateLogDrainSourceIntegration(createLogDrainSourceIntegration CreateLogDrainSourceIntegration) CreateLogDrainSourceUnion {
	typ := CreateLogDrainSourceUnionTypeCreateLogDrainSourceIntegration

	return CreateLogDrainSourceUnion{
		CreateLogDrainSourceIntegration: &createLogDrainSourceIntegration,
		Type:                            typ,
	}
}

func (u *CreateLogDrainSourceUnion) UnmarshalJSON(data []byte) error {

	var createLogDrainSourceIntegration CreateLogDrainSourceIntegration = CreateLogDrainSourceIntegration{}
	if err := utils.UnmarshalJSON(data, &createLogDrainSourceIntegration, "", true, nil); err == nil {
		u.CreateLogDrainSourceIntegration = &createLogDrainSourceIntegration
		u.Type = CreateLogDrainSourceUnionTypeCreateLogDrainSourceIntegration
		return nil
	}

	var createLogDrainSourceSelfServed CreateLogDrainSourceSelfServed = CreateLogDrainSourceSelfServed{}
	if err := utils.UnmarshalJSON(data, &createLogDrainSourceSelfServed, "", true, nil); err == nil {
		u.CreateLogDrainSourceSelfServed = &createLogDrainSourceSelfServed
		u.Type = CreateLogDrainSourceUnionTypeCreateLogDrainSourceSelfServed
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateLogDrainSourceUnion", string(data))
}

func (u CreateLogDrainSourceUnion) MarshalJSON() ([]byte, error) {
	if u.CreateLogDrainSourceSelfServed != nil {
		return utils.MarshalJSON(u.CreateLogDrainSourceSelfServed, "", true)
	}

	if u.CreateLogDrainSourceIntegration != nil {
		return utils.MarshalJSON(u.CreateLogDrainSourceIntegration, "", true)
	}

	return nil, errors.New("could not marshal union type CreateLogDrainSourceUnion: all fields are null")
}

// CreateLogDrainResponseBody - The log drain was successfully created
type CreateLogDrainResponseBody struct {
	// The oauth2 client application id that created this log drain
	ClientID *string `json:"clientId,omitempty"`
	// The client configuration this log drain was created with
	ConfigurationID *string `json:"configurationId,omitempty"`
	// A timestamp that tells you when the log drain was created
	CreatedAt float64 `json:"createdAt"`
	// The unique identifier of the log drain. Always prefixed with `ld_`
	ID string `json:"id"`
	// The delivery log format
	DeliveryFormat *CreateLogDrainDeliveryFormatResponse `json:"deliveryFormat,omitempty"`
	// The name of the log drain
	Name string `json:"name"`
	// The identifier of the team or user whose events will trigger the log drain
	OwnerID   string  `json:"ownerId"`
	ProjectID *string `json:"projectId,omitempty"`
	// The identifier of the projects this log drain is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
	// The URL to call when logs are generated
	URL string `json:"url"`
	// The sources from which logs are currently being delivered to this log drain.
	Sources []CreateLogDrainSourceResponseBodyEnum `json:"sources,omitempty"`
	// Whether the log drain was created by an integration or by a user
	CreatedFrom *CreateLogDrainCreatedFrom `json:"createdFrom,omitempty"`
	// The headers to send with the request
	Headers map[string]string `json:"headers,omitempty"`
	// The environment of log drain
	Environments []CreateLogDrainEnvironmentResponse `json:"environments,omitempty"`
	// The branch regexp of log drain
	Branch *string `json:"branch,omitempty"`
	// The sampling rate of log drain
	SamplingRate *float64                  `json:"samplingRate,omitempty"`
	Source       CreateLogDrainSourceUnion `json:"source"`
}

func (o *CreateLogDrainResponseBody) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *CreateLogDrainResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateLogDrainResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateLogDrainResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateLogDrainResponseBody) GetDeliveryFormat() *CreateLogDrainDeliveryFormatResponse {
	if o == nil {
		return nil
	}
	return o.DeliveryFormat
}

func (o *CreateLogDrainResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateLogDrainResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateLogDrainResponseBody) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateLogDrainResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *CreateLogDrainResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateLogDrainResponseBody) GetSources() []CreateLogDrainSourceResponseBodyEnum {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *CreateLogDrainResponseBody) GetCreatedFrom() *CreateLogDrainCreatedFrom {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *CreateLogDrainResponseBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *CreateLogDrainResponseBody) GetEnvironments() []CreateLogDrainEnvironmentResponse {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateLogDrainResponseBody) GetBranch() *string {
	if o == nil {
		return nil
	}
	return o.Branch
}

func (o *CreateLogDrainResponseBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *CreateLogDrainResponseBody) GetSource() CreateLogDrainSourceUnion {
	if o == nil {
		return CreateLogDrainSourceUnion{}
	}
	return o.Source
}

type CreateLogDrainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The log drain was successfully created
	Object *CreateLogDrainResponseBody
}

func (o *CreateLogDrainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateLogDrainResponse) GetObject() *CreateLogDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
