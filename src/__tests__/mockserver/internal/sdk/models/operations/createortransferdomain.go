// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// CreateOrTransferDomainRequestBody3 - transfer-in
type CreateOrTransferDomainRequestBody3 struct {
	// The domain name you want to add.
	Name string `json:"name"`
	// The domain operation to perform. It can be either `add` or `transfer-in`.
	Method string `json:"method"`
	// The authorization code assigned to the domain.
	AuthCode *string `json:"authCode,omitempty"`
	// The price you expect to be charged for the required 1 year renewal.
	ExpectedPrice *float64 `json:"expectedPrice,omitempty"`
}

func (o *CreateOrTransferDomainRequestBody3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOrTransferDomainRequestBody3) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *CreateOrTransferDomainRequestBody3) GetAuthCode() *string {
	if o == nil {
		return nil
	}
	return o.AuthCode
}

func (o *CreateOrTransferDomainRequestBody3) GetExpectedPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpectedPrice
}

// CreateOrTransferDomainRequestBody2 - move-in
type CreateOrTransferDomainRequestBody2 struct {
	// The domain name you want to add.
	Name string `json:"name"`
	// The domain operation to perform. It can be either `add` or `transfer-in`.
	Method string `json:"method"`
	// The move-in token from Move Requested email.
	Token *string `json:"token,omitempty"`
}

func (o *CreateOrTransferDomainRequestBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOrTransferDomainRequestBody2) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *CreateOrTransferDomainRequestBody2) GetToken() *string {
	if o == nil {
		return nil
	}
	return o.Token
}

// CreateOrTransferDomainRequestBody1 - add
type CreateOrTransferDomainRequestBody1 struct {
	// The domain name you want to add.
	Name string `json:"name"`
	// Whether the domain has the Vercel Edge Network enabled or not.
	CdnEnabled *bool `json:"cdnEnabled,omitempty"`
	Zone       *bool `json:"zone,omitempty"`
	// The domain operation to perform. It can be either `add` or `transfer-in`.
	Method *string `json:"method,omitempty"`
}

func (o *CreateOrTransferDomainRequestBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOrTransferDomainRequestBody1) GetCdnEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.CdnEnabled
}

func (o *CreateOrTransferDomainRequestBody1) GetZone() *bool {
	if o == nil {
		return nil
	}
	return o.Zone
}

func (o *CreateOrTransferDomainRequestBody1) GetMethod() *string {
	if o == nil {
		return nil
	}
	return o.Method
}

type CreateOrTransferDomainRequestBodyType string

const (
	CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody1 CreateOrTransferDomainRequestBodyType = "createOrTransferDomain_requestBody_1"
	CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody2 CreateOrTransferDomainRequestBodyType = "createOrTransferDomain_requestBody_2"
	CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody3 CreateOrTransferDomainRequestBodyType = "createOrTransferDomain_requestBody_3"
)

type CreateOrTransferDomainRequestBody struct {
	CreateOrTransferDomainRequestBody1 *CreateOrTransferDomainRequestBody1
	CreateOrTransferDomainRequestBody2 *CreateOrTransferDomainRequestBody2
	CreateOrTransferDomainRequestBody3 *CreateOrTransferDomainRequestBody3

	Type CreateOrTransferDomainRequestBodyType
}

func CreateCreateOrTransferDomainRequestBodyCreateOrTransferDomainRequestBody1(createOrTransferDomainRequestBody1 CreateOrTransferDomainRequestBody1) CreateOrTransferDomainRequestBody {
	typ := CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody1

	return CreateOrTransferDomainRequestBody{
		CreateOrTransferDomainRequestBody1: &createOrTransferDomainRequestBody1,
		Type:                               typ,
	}
}

func CreateCreateOrTransferDomainRequestBodyCreateOrTransferDomainRequestBody2(createOrTransferDomainRequestBody2 CreateOrTransferDomainRequestBody2) CreateOrTransferDomainRequestBody {
	typ := CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody2

	return CreateOrTransferDomainRequestBody{
		CreateOrTransferDomainRequestBody2: &createOrTransferDomainRequestBody2,
		Type:                               typ,
	}
}

func CreateCreateOrTransferDomainRequestBodyCreateOrTransferDomainRequestBody3(createOrTransferDomainRequestBody3 CreateOrTransferDomainRequestBody3) CreateOrTransferDomainRequestBody {
	typ := CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody3

	return CreateOrTransferDomainRequestBody{
		CreateOrTransferDomainRequestBody3: &createOrTransferDomainRequestBody3,
		Type:                               typ,
	}
}

func (u *CreateOrTransferDomainRequestBody) UnmarshalJSON(data []byte) error {

	var createOrTransferDomainRequestBody2 CreateOrTransferDomainRequestBody2 = CreateOrTransferDomainRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createOrTransferDomainRequestBody2, "", true, true); err == nil {
		u.CreateOrTransferDomainRequestBody2 = &createOrTransferDomainRequestBody2
		u.Type = CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody2
		return nil
	}

	var createOrTransferDomainRequestBody1 CreateOrTransferDomainRequestBody1 = CreateOrTransferDomainRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createOrTransferDomainRequestBody1, "", true, true); err == nil {
		u.CreateOrTransferDomainRequestBody1 = &createOrTransferDomainRequestBody1
		u.Type = CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody1
		return nil
	}

	var createOrTransferDomainRequestBody3 CreateOrTransferDomainRequestBody3 = CreateOrTransferDomainRequestBody3{}
	if err := utils.UnmarshalJSON(data, &createOrTransferDomainRequestBody3, "", true, true); err == nil {
		u.CreateOrTransferDomainRequestBody3 = &createOrTransferDomainRequestBody3
		u.Type = CreateOrTransferDomainRequestBodyTypeCreateOrTransferDomainRequestBody3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateOrTransferDomainRequestBody", string(data))
}

func (u CreateOrTransferDomainRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateOrTransferDomainRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateOrTransferDomainRequestBody1, "", true)
	}

	if u.CreateOrTransferDomainRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateOrTransferDomainRequestBody2, "", true)
	}

	if u.CreateOrTransferDomainRequestBody3 != nil {
		return utils.MarshalJSON(u.CreateOrTransferDomainRequestBody3, "", true)
	}

	return nil, errors.New("could not marshal union type CreateOrTransferDomainRequestBody: all fields are null")
}

type CreateOrTransferDomainRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                           `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateOrTransferDomainRequestBody `request:"mediaType=application/json"`
}

func (o *CreateOrTransferDomainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateOrTransferDomainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateOrTransferDomainRequest) GetRequestBody() CreateOrTransferDomainRequestBody {
	if o == nil {
		return CreateOrTransferDomainRequestBody{}
	}
	return o.RequestBody
}

// CreateOrTransferDomainCreator - An object containing information of the domain creator, including the user's id, username, and email.
type CreateOrTransferDomainCreator struct {
	Username         string  `json:"username"`
	Email            string  `json:"email"`
	CustomerID       *string `json:"customerId,omitempty"`
	IsDomainReseller *bool   `json:"isDomainReseller,omitempty"`
	ID               string  `json:"id"`
}

func (o *CreateOrTransferDomainCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *CreateOrTransferDomainCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateOrTransferDomainCreator) GetCustomerID() *string {
	if o == nil {
		return nil
	}
	return o.CustomerID
}

func (o *CreateOrTransferDomainCreator) GetIsDomainReseller() *bool {
	if o == nil {
		return nil
	}
	return o.IsDomainReseller
}

func (o *CreateOrTransferDomainCreator) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// CreateOrTransferDomainServiceType - The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
type CreateOrTransferDomainServiceType string

const (
	CreateOrTransferDomainServiceTypeZeitWorld CreateOrTransferDomainServiceType = "zeit.world"
	CreateOrTransferDomainServiceTypeExternal  CreateOrTransferDomainServiceType = "external"
	CreateOrTransferDomainServiceTypeNa        CreateOrTransferDomainServiceType = "na"
)

func (e CreateOrTransferDomainServiceType) ToPointer() *CreateOrTransferDomainServiceType {
	return &e
}
func (e *CreateOrTransferDomainServiceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "zeit.world":
		fallthrough
	case "external":
		fallthrough
	case "na":
		*e = CreateOrTransferDomainServiceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateOrTransferDomainServiceType: %v", v)
	}
}

type CreateOrTransferDomainDomain struct {
	// If the domain has the ownership verified.
	Verified bool `json:"verified"`
	// A list of the current nameservers of the domain.
	Nameservers []string `json:"nameservers"`
	// A list of the intended nameservers for the domain to point to Vercel DNS.
	IntendedNameservers []string `json:"intendedNameservers"`
	// A list of custom nameservers for the domain to point to. Only applies to domains purchased with Vercel.
	CustomNameservers []string `json:"customNameservers,omitempty"`
	// An object containing information of the domain creator, including the user's id, username, and email.
	Creator CreateOrTransferDomainCreator `json:"creator"`
	// The domain name.
	Name string `json:"name"`
	// If it was purchased through Vercel, the timestamp in milliseconds when it was purchased.
	BoughtAt *float64 `json:"boughtAt"`
	// Timestamp in milliseconds when the domain was created in the registry.
	CreatedAt float64 `json:"createdAt"`
	// Timestamp in milliseconds at which the domain is set to expire. `null` if not bought with Vercel.
	ExpiresAt *float64 `json:"expiresAt"`
	// The unique identifier of the domain.
	ID string `json:"id"`
	// Timestamp in milliseconds at which the domain was ordered.
	OrderedAt *float64 `json:"orderedAt,omitempty"`
	// Indicates whether the domain is set to automatically renew.
	Renew *bool `json:"renew,omitempty"`
	// The type of service the domain is handled by. `external` if the DNS is externally handled, `zeit.world` if handled with Vercel, or `na` if the service is not available.
	ServiceType CreateOrTransferDomainServiceType `json:"serviceType"`
	// Timestamp in milliseconds at which the domain was successfully transferred into Vercel. `null` if the transfer is still processing or was never transferred in.
	TransferredAt *float64 `json:"transferredAt,omitempty"`
	// If transferred into Vercel, timestamp in milliseconds when the domain transfer was initiated.
	TransferStartedAt *float64 `json:"transferStartedAt,omitempty"`
	UserID            string   `json:"userId"`
	TeamID            *string  `json:"teamId"`
}

func (o *CreateOrTransferDomainDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *CreateOrTransferDomainDomain) GetNameservers() []string {
	if o == nil {
		return []string{}
	}
	return o.Nameservers
}

func (o *CreateOrTransferDomainDomain) GetIntendedNameservers() []string {
	if o == nil {
		return []string{}
	}
	return o.IntendedNameservers
}

func (o *CreateOrTransferDomainDomain) GetCustomNameservers() []string {
	if o == nil {
		return nil
	}
	return o.CustomNameservers
}

func (o *CreateOrTransferDomainDomain) GetCreator() CreateOrTransferDomainCreator {
	if o == nil {
		return CreateOrTransferDomainCreator{}
	}
	return o.Creator
}

func (o *CreateOrTransferDomainDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateOrTransferDomainDomain) GetBoughtAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BoughtAt
}

func (o *CreateOrTransferDomainDomain) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateOrTransferDomainDomain) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

func (o *CreateOrTransferDomainDomain) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateOrTransferDomainDomain) GetOrderedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.OrderedAt
}

func (o *CreateOrTransferDomainDomain) GetRenew() *bool {
	if o == nil {
		return nil
	}
	return o.Renew
}

func (o *CreateOrTransferDomainDomain) GetServiceType() CreateOrTransferDomainServiceType {
	if o == nil {
		return CreateOrTransferDomainServiceType("")
	}
	return o.ServiceType
}

func (o *CreateOrTransferDomainDomain) GetTransferredAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferredAt
}

func (o *CreateOrTransferDomainDomain) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *CreateOrTransferDomainDomain) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateOrTransferDomainDomain) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

type CreateOrTransferDomainResponseBody struct {
	Domain CreateOrTransferDomainDomain `json:"domain"`
}

func (o *CreateOrTransferDomainResponseBody) GetDomain() CreateOrTransferDomainDomain {
	if o == nil {
		return CreateOrTransferDomainDomain{}
	}
	return o.Domain
}

type CreateOrTransferDomainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateOrTransferDomainResponseBody
}

func (o *CreateOrTransferDomainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateOrTransferDomainResponse) GetObject() *CreateOrTransferDomainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
