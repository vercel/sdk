// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type TargetEnvironmentVariableEnum2 string

const (
	TargetEnvironmentVariableEnum2Production  TargetEnvironmentVariableEnum2 = "production"
	TargetEnvironmentVariableEnum2Preview     TargetEnvironmentVariableEnum2 = "preview"
	TargetEnvironmentVariableEnum2Development TargetEnvironmentVariableEnum2 = "development"
)

func (e TargetEnvironmentVariableEnum2) ToPointer() *TargetEnvironmentVariableEnum2 {
	return &e
}
func (e *TargetEnvironmentVariableEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = TargetEnvironmentVariableEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetEnvironmentVariableEnum2: %v", v)
	}
}

type TargetEnvironmentVariableEnum1 string

const (
	TargetEnvironmentVariableEnum1Production  TargetEnvironmentVariableEnum1 = "production"
	TargetEnvironmentVariableEnum1Preview     TargetEnvironmentVariableEnum1 = "preview"
	TargetEnvironmentVariableEnum1Development TargetEnvironmentVariableEnum1 = "development"
)

func (e TargetEnvironmentVariableEnum1) ToPointer() *TargetEnvironmentVariableEnum1 {
	return &e
}
func (e *TargetEnvironmentVariableEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = TargetEnvironmentVariableEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetEnvironmentVariableEnum1: %v", v)
	}
}

type EnvironmentVariableTargetUnionType string

const (
	EnvironmentVariableTargetUnionTypeTargetEnvironmentVariableEnum1        EnvironmentVariableTargetUnionType = "target_environmentVariable_enum_1"
	EnvironmentVariableTargetUnionTypeArrayOfTargetEnvironmentVariableEnum2 EnvironmentVariableTargetUnionType = "arrayOfTargetEnvironmentVariableEnum2"
)

// EnvironmentVariableTargetUnion - Deployment Target or Targets in which the ENV variable will be used
type EnvironmentVariableTargetUnion struct {
	TargetEnvironmentVariableEnum1        *TargetEnvironmentVariableEnum1  `queryParam:"inline"`
	ArrayOfTargetEnvironmentVariableEnum2 []TargetEnvironmentVariableEnum2 `queryParam:"inline"`

	Type EnvironmentVariableTargetUnionType
}

func CreateEnvironmentVariableTargetUnionTargetEnvironmentVariableEnum1(targetEnvironmentVariableEnum1 TargetEnvironmentVariableEnum1) EnvironmentVariableTargetUnion {
	typ := EnvironmentVariableTargetUnionTypeTargetEnvironmentVariableEnum1

	return EnvironmentVariableTargetUnion{
		TargetEnvironmentVariableEnum1: &targetEnvironmentVariableEnum1,
		Type:                           typ,
	}
}

func CreateEnvironmentVariableTargetUnionArrayOfTargetEnvironmentVariableEnum2(arrayOfTargetEnvironmentVariableEnum2 []TargetEnvironmentVariableEnum2) EnvironmentVariableTargetUnion {
	typ := EnvironmentVariableTargetUnionTypeArrayOfTargetEnvironmentVariableEnum2

	return EnvironmentVariableTargetUnion{
		ArrayOfTargetEnvironmentVariableEnum2: arrayOfTargetEnvironmentVariableEnum2,
		Type:                                  typ,
	}
}

func (u *EnvironmentVariableTargetUnion) UnmarshalJSON(data []byte) error {

	var targetEnvironmentVariableEnum1 TargetEnvironmentVariableEnum1 = TargetEnvironmentVariableEnum1("")
	if err := utils.UnmarshalJSON(data, &targetEnvironmentVariableEnum1, "", true, true); err == nil {
		u.TargetEnvironmentVariableEnum1 = &targetEnvironmentVariableEnum1
		u.Type = EnvironmentVariableTargetUnionTypeTargetEnvironmentVariableEnum1
		return nil
	}

	var arrayOfTargetEnvironmentVariableEnum2 []TargetEnvironmentVariableEnum2 = []TargetEnvironmentVariableEnum2{}
	if err := utils.UnmarshalJSON(data, &arrayOfTargetEnvironmentVariableEnum2, "", true, true); err == nil {
		u.ArrayOfTargetEnvironmentVariableEnum2 = arrayOfTargetEnvironmentVariableEnum2
		u.Type = EnvironmentVariableTargetUnionTypeArrayOfTargetEnvironmentVariableEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EnvironmentVariableTargetUnion", string(data))
}

func (u EnvironmentVariableTargetUnion) MarshalJSON() ([]byte, error) {
	if u.TargetEnvironmentVariableEnum1 != nil {
		return utils.MarshalJSON(u.TargetEnvironmentVariableEnum1, "", true)
	}

	if u.ArrayOfTargetEnvironmentVariableEnum2 != nil {
		return utils.MarshalJSON(u.ArrayOfTargetEnvironmentVariableEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type EnvironmentVariableTargetUnion: all fields are null")
}

// EnvironmentVariableType - Type of the ENV variable
type EnvironmentVariableType string

const (
	EnvironmentVariableTypeSystem    EnvironmentVariableType = "system"
	EnvironmentVariableTypeSecret    EnvironmentVariableType = "secret"
	EnvironmentVariableTypeEncrypted EnvironmentVariableType = "encrypted"
	EnvironmentVariableTypePlain     EnvironmentVariableType = "plain"
	EnvironmentVariableTypeSensitive EnvironmentVariableType = "sensitive"
)

func (e EnvironmentVariableType) ToPointer() *EnvironmentVariableType {
	return &e
}
func (e *EnvironmentVariableType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = EnvironmentVariableType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EnvironmentVariableType: %v", v)
	}
}

type EnvironmentVariable struct {
	// Name of the ENV variable
	Key string `json:"key"`
	// Deployment Target or Targets in which the ENV variable will be used
	Target EnvironmentVariableTargetUnion `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// Type of the ENV variable
	Type *EnvironmentVariableType `json:"type,omitempty"`
	// Value for the ENV variable
	Value string `json:"value"`
}

func (o *EnvironmentVariable) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EnvironmentVariable) GetTarget() EnvironmentVariableTargetUnion {
	if o == nil {
		return EnvironmentVariableTargetUnion{}
	}
	return o.Target
}

func (o *EnvironmentVariable) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EnvironmentVariable) GetType() *EnvironmentVariableType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EnvironmentVariable) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// CreateProjectFrameworkRequest - The framework that is being used for this project. When `null` is used no framework is selected
type CreateProjectFrameworkRequest string

const (
	CreateProjectFrameworkRequestBlitzjs        CreateProjectFrameworkRequest = "blitzjs"
	CreateProjectFrameworkRequestNextjs         CreateProjectFrameworkRequest = "nextjs"
	CreateProjectFrameworkRequestGatsby         CreateProjectFrameworkRequest = "gatsby"
	CreateProjectFrameworkRequestRemix          CreateProjectFrameworkRequest = "remix"
	CreateProjectFrameworkRequestReactRouter    CreateProjectFrameworkRequest = "react-router"
	CreateProjectFrameworkRequestAstro          CreateProjectFrameworkRequest = "astro"
	CreateProjectFrameworkRequestHexo           CreateProjectFrameworkRequest = "hexo"
	CreateProjectFrameworkRequestEleventy       CreateProjectFrameworkRequest = "eleventy"
	CreateProjectFrameworkRequestDocusaurus2    CreateProjectFrameworkRequest = "docusaurus-2"
	CreateProjectFrameworkRequestDocusaurus     CreateProjectFrameworkRequest = "docusaurus"
	CreateProjectFrameworkRequestPreact         CreateProjectFrameworkRequest = "preact"
	CreateProjectFrameworkRequestSolidstart1    CreateProjectFrameworkRequest = "solidstart-1"
	CreateProjectFrameworkRequestSolidstart     CreateProjectFrameworkRequest = "solidstart"
	CreateProjectFrameworkRequestDojo           CreateProjectFrameworkRequest = "dojo"
	CreateProjectFrameworkRequestEmber          CreateProjectFrameworkRequest = "ember"
	CreateProjectFrameworkRequestVue            CreateProjectFrameworkRequest = "vue"
	CreateProjectFrameworkRequestScully         CreateProjectFrameworkRequest = "scully"
	CreateProjectFrameworkRequestIonicAngular   CreateProjectFrameworkRequest = "ionic-angular"
	CreateProjectFrameworkRequestAngular        CreateProjectFrameworkRequest = "angular"
	CreateProjectFrameworkRequestPolymer        CreateProjectFrameworkRequest = "polymer"
	CreateProjectFrameworkRequestSvelte         CreateProjectFrameworkRequest = "svelte"
	CreateProjectFrameworkRequestSveltekit      CreateProjectFrameworkRequest = "sveltekit"
	CreateProjectFrameworkRequestSveltekit1     CreateProjectFrameworkRequest = "sveltekit-1"
	CreateProjectFrameworkRequestIonicReact     CreateProjectFrameworkRequest = "ionic-react"
	CreateProjectFrameworkRequestCreateReactApp CreateProjectFrameworkRequest = "create-react-app"
	CreateProjectFrameworkRequestGridsome       CreateProjectFrameworkRequest = "gridsome"
	CreateProjectFrameworkRequestUmijs          CreateProjectFrameworkRequest = "umijs"
	CreateProjectFrameworkRequestSapper         CreateProjectFrameworkRequest = "sapper"
	CreateProjectFrameworkRequestSaber          CreateProjectFrameworkRequest = "saber"
	CreateProjectFrameworkRequestStencil        CreateProjectFrameworkRequest = "stencil"
	CreateProjectFrameworkRequestNuxtjs         CreateProjectFrameworkRequest = "nuxtjs"
	CreateProjectFrameworkRequestRedwoodjs      CreateProjectFrameworkRequest = "redwoodjs"
	CreateProjectFrameworkRequestHugo           CreateProjectFrameworkRequest = "hugo"
	CreateProjectFrameworkRequestJekyll         CreateProjectFrameworkRequest = "jekyll"
	CreateProjectFrameworkRequestBrunch         CreateProjectFrameworkRequest = "brunch"
	CreateProjectFrameworkRequestMiddleman      CreateProjectFrameworkRequest = "middleman"
	CreateProjectFrameworkRequestZola           CreateProjectFrameworkRequest = "zola"
	CreateProjectFrameworkRequestHydrogen       CreateProjectFrameworkRequest = "hydrogen"
	CreateProjectFrameworkRequestVite           CreateProjectFrameworkRequest = "vite"
	CreateProjectFrameworkRequestVitepress      CreateProjectFrameworkRequest = "vitepress"
	CreateProjectFrameworkRequestVuepress       CreateProjectFrameworkRequest = "vuepress"
	CreateProjectFrameworkRequestParcel         CreateProjectFrameworkRequest = "parcel"
	CreateProjectFrameworkRequestFasthtml       CreateProjectFrameworkRequest = "fasthtml"
	CreateProjectFrameworkRequestSanityV3       CreateProjectFrameworkRequest = "sanity-v3"
	CreateProjectFrameworkRequestSanity         CreateProjectFrameworkRequest = "sanity"
	CreateProjectFrameworkRequestStorybook      CreateProjectFrameworkRequest = "storybook"
)

func (e CreateProjectFrameworkRequest) ToPointer() *CreateProjectFrameworkRequest {
	return &e
}
func (e *CreateProjectFrameworkRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectFrameworkRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFrameworkRequest: %v", v)
	}
}

// GitRepositoryType - The Git Provider of the repository
type GitRepositoryType string

const (
	GitRepositoryTypeGithub    GitRepositoryType = "github"
	GitRepositoryTypeGitlab    GitRepositoryType = "gitlab"
	GitRepositoryTypeBitbucket GitRepositoryType = "bitbucket"
)

func (e GitRepositoryType) ToPointer() *GitRepositoryType {
	return &e
}
func (e *GitRepositoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = GitRepositoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitRepositoryType: %v", v)
	}
}

// GitRepository - The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
type GitRepository struct {
	// The name of the git repository. For example: \"vercel/next.js\"
	Repo string `json:"repo"`
	// The Git Provider of the repository
	Type GitRepositoryType `json:"type"`
}

func (o *GitRepository) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GitRepository) GetType() GitRepositoryType {
	if o == nil {
		return GitRepositoryType("")
	}
	return o.Type
}

// CreateProjectIssuerModeRequest - team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
type CreateProjectIssuerModeRequest string

const (
	CreateProjectIssuerModeRequestTeam   CreateProjectIssuerModeRequest = "team"
	CreateProjectIssuerModeRequestGlobal CreateProjectIssuerModeRequest = "global"
)

func (e CreateProjectIssuerModeRequest) ToPointer() *CreateProjectIssuerModeRequest {
	return &e
}
func (e *CreateProjectIssuerModeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = CreateProjectIssuerModeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectIssuerModeRequest: %v", v)
	}
}

// CreateProjectOidcTokenConfigRequest - OpenID Connect JSON Web Token generation configuration.
type CreateProjectOidcTokenConfigRequest struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Enabled *bool `default:"true" json:"enabled"`
	// team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
	IssuerMode *CreateProjectIssuerModeRequest `default:"team" json:"issuerMode"`
}

func (c CreateProjectOidcTokenConfigRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateProjectOidcTokenConfigRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *CreateProjectOidcTokenConfigRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateProjectOidcTokenConfigRequest) GetIssuerMode() *CreateProjectIssuerModeRequest {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type CreateProjectFunctionDefaultMemoryTypeRequest string

const (
	CreateProjectFunctionDefaultMemoryTypeRequestStandardLegacy CreateProjectFunctionDefaultMemoryTypeRequest = "standard_legacy"
	CreateProjectFunctionDefaultMemoryTypeRequestStandard       CreateProjectFunctionDefaultMemoryTypeRequest = "standard"
	CreateProjectFunctionDefaultMemoryTypeRequestPerformance    CreateProjectFunctionDefaultMemoryTypeRequest = "performance"
)

func (e CreateProjectFunctionDefaultMemoryTypeRequest) ToPointer() *CreateProjectFunctionDefaultMemoryTypeRequest {
	return &e
}
func (e *CreateProjectFunctionDefaultMemoryTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = CreateProjectFunctionDefaultMemoryTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFunctionDefaultMemoryTypeRequest: %v", v)
	}
}

type CreateProjectBuildMachineTypeRequest string

const (
	CreateProjectBuildMachineTypeRequestEnhanced CreateProjectBuildMachineTypeRequest = "enhanced"
	CreateProjectBuildMachineTypeRequestTurbo    CreateProjectBuildMachineTypeRequest = "turbo"
)

func (e CreateProjectBuildMachineTypeRequest) ToPointer() *CreateProjectBuildMachineTypeRequest {
	return &e
}
func (e *CreateProjectBuildMachineTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = CreateProjectBuildMachineTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectBuildMachineTypeRequest: %v", v)
	}
}

// CreateProjectResourceConfigRequest - Specifies resource override configuration for the project
type CreateProjectResourceConfigRequest struct {
	Fluid *bool `json:"fluid,omitempty"`
	// The regions to deploy Vercel Functions to for this project
	FunctionDefaultRegions    []string                                       `json:"functionDefaultRegions,omitempty"`
	FunctionDefaultTimeout    *float64                                       `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType *CreateProjectFunctionDefaultMemoryTypeRequest `json:"functionDefaultMemoryType,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	FunctionZeroConfigFailover *bool                                 `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                 `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *CreateProjectBuildMachineTypeRequest `json:"buildMachineType,omitempty"`
}

func (o *CreateProjectResourceConfigRequest) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *CreateProjectResourceConfigRequest) GetFunctionDefaultRegions() []string {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultRegions
}

func (o *CreateProjectResourceConfigRequest) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *CreateProjectResourceConfigRequest) GetFunctionDefaultMemoryType() *CreateProjectFunctionDefaultMemoryTypeRequest {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *CreateProjectResourceConfigRequest) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *CreateProjectResourceConfigRequest) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *CreateProjectResourceConfigRequest) GetBuildMachineType() *CreateProjectBuildMachineTypeRequest {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

type CreateProjectRequestBody struct {
	// Opt-in to preview toolbar on the project level
	EnablePreviewFeedback *bool `json:"enablePreviewFeedback,omitempty"`
	// Opt-in to production toolbar on the project level
	EnableProductionFeedback *bool `json:"enableProductionFeedback,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand *string `json:"devCommand,omitempty"`
	// Collection of ENV Variables the Project will use
	EnvironmentVariables []EnvironmentVariable `json:"environmentVariables,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *CreateProjectFrameworkRequest `json:"framework,omitempty"`
	// The Git Repository that will be connected to the project. When this is defined, any pushes to the specified connected Git Repository will be automatically deployed
	GitRepository *GitRepository `json:"gitRepository,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name string `json:"name"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	// OpenID Connect JSON Web Token generation configuration.
	OidcTokenConfig *CreateProjectOidcTokenConfigRequest `json:"oidcTokenConfig,omitempty"`
	// Opt-in to skip deployments when there are no changes to the root directory and its dependencies
	EnableAffectedProjectsDeployments *bool `json:"enableAffectedProjectsDeployments,omitempty"`
	// Specifies resource override configuration for the project
	ResourceConfig *CreateProjectResourceConfigRequest `json:"resourceConfig,omitempty"`
}

func (o *CreateProjectRequestBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *CreateProjectRequestBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *CreateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectRequestBody) GetEnvironmentVariables() []EnvironmentVariable {
	if o == nil {
		return nil
	}
	return o.EnvironmentVariables
}

func (o *CreateProjectRequestBody) GetFramework() *CreateProjectFrameworkRequest {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectRequestBody) GetGitRepository() *GitRepository {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectRequestBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectRequestBody) GetOidcTokenConfig() *CreateProjectOidcTokenConfigRequest {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *CreateProjectRequestBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *CreateProjectRequestBody) GetResourceConfig() *CreateProjectResourceConfigRequest {
	if o == nil {
		return nil
	}
	return o.ResourceConfig
}

type CreateProjectRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateProjectRequestBody `request:"mediaType=application/json"`
}

func (o *CreateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectRequest) GetRequestBody() *CreateProjectRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type CreateProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *CreateProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *CreateProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *CreateProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *CreateProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type CreateProjectSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *CreateProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CreateProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *CreateProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type CreateProjectEnvIDEnum string

const (
	CreateProjectEnvIDEnumProduction CreateProjectEnvIDEnum = "production"
	CreateProjectEnvIDEnumPreview    CreateProjectEnvIDEnum = "preview"
)

func (e CreateProjectEnvIDEnum) ToPointer() *CreateProjectEnvIDEnum {
	return &e
}
func (e *CreateProjectEnvIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = CreateProjectEnvIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvIDEnum: %v", v)
	}
}

type CreateProjectEnvIDUnionType string

const (
	CreateProjectEnvIDUnionTypeStr                    CreateProjectEnvIDUnionType = "str"
	CreateProjectEnvIDUnionTypeCreateProjectEnvIDEnum CreateProjectEnvIDUnionType = "createProject_envId_enum"
)

type CreateProjectEnvIDUnion struct {
	Str                    *string                 `queryParam:"inline"`
	CreateProjectEnvIDEnum *CreateProjectEnvIDEnum `queryParam:"inline"`

	Type CreateProjectEnvIDUnionType
}

func CreateCreateProjectEnvIDUnionStr(str string) CreateProjectEnvIDUnion {
	typ := CreateProjectEnvIDUnionTypeStr

	return CreateProjectEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectEnvIDUnionCreateProjectEnvIDEnum(createProjectEnvIDEnum CreateProjectEnvIDEnum) CreateProjectEnvIDUnion {
	typ := CreateProjectEnvIDUnionTypeCreateProjectEnvIDEnum

	return CreateProjectEnvIDUnion{
		CreateProjectEnvIDEnum: &createProjectEnvIDEnum,
		Type:                   typ,
	}
}

func (u *CreateProjectEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectEnvIDUnionTypeStr
		return nil
	}

	var createProjectEnvIDEnum CreateProjectEnvIDEnum = CreateProjectEnvIDEnum("")
	if err := utils.UnmarshalJSON(data, &createProjectEnvIDEnum, "", true, true); err == nil {
		u.CreateProjectEnvIDEnum = &createProjectEnvIDEnum
		u.Type = CreateProjectEnvIDUnionTypeCreateProjectEnvIDEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvIDUnion", string(data))
}

func (u CreateProjectEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectEnvIDEnum != nil {
		return utils.MarshalJSON(u.CreateProjectEnvIDEnum, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvIDUnion: all fields are null")
}

type CreateProjectAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *CreateProjectAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *CreateProjectAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type CreateProjectConnectConfiguration struct {
	EnvID                  CreateProjectEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                  `json:"connectConfigurationId"`
	Passive                bool                    `json:"passive"`
	BuildsEnabled          bool                    `json:"buildsEnabled"`
	Aws                    *CreateProjectAws       `json:"aws,omitempty"`
	CreatedAt              float64                 `json:"createdAt"`
	UpdatedAt              float64                 `json:"updatedAt"`
}

func (o *CreateProjectConnectConfiguration) GetEnvID() CreateProjectEnvIDUnion {
	if o == nil {
		return CreateProjectEnvIDUnion{}
	}
	return o.EnvID
}

func (o *CreateProjectConnectConfiguration) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectConnectConfiguration) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *CreateProjectConnectConfiguration) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *CreateProjectConnectConfiguration) GetAws() *CreateProjectAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *CreateProjectConnectConfiguration) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectConnectConfiguration) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type CreateProjectDefinition struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *CreateProjectDefinition) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *CreateProjectDefinition) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *CreateProjectDefinition) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type CreateProjectCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                   `json:"deploymentId"`
	Definitions  []CreateProjectDefinition `json:"definitions"`
}

func (o *CreateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *CreateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *CreateProjectCrons) GetDefinitions() []CreateProjectDefinition {
	if o == nil {
		return []CreateProjectDefinition{}
	}
	return o.Definitions
}

type CreateProjectDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *CreateProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *CreateProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *CreateProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type CreateProjectDeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *CreateProjectDeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *CreateProjectDeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type CreateProjectTargetEnvEnum2 string

const (
	CreateProjectTargetEnvEnum2Production  CreateProjectTargetEnvEnum2 = "production"
	CreateProjectTargetEnvEnum2Preview     CreateProjectTargetEnvEnum2 = "preview"
	CreateProjectTargetEnvEnum2Development CreateProjectTargetEnvEnum2 = "development"
)

func (e CreateProjectTargetEnvEnum2) ToPointer() *CreateProjectTargetEnvEnum2 {
	return &e
}
func (e *CreateProjectTargetEnvEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectTargetEnvEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTargetEnvEnum2: %v", v)
	}
}

type CreateProjectTargetEnvEnum1 string

const (
	CreateProjectTargetEnvEnum1Production  CreateProjectTargetEnvEnum1 = "production"
	CreateProjectTargetEnvEnum1Preview     CreateProjectTargetEnvEnum1 = "preview"
	CreateProjectTargetEnvEnum1Development CreateProjectTargetEnvEnum1 = "development"
)

func (e CreateProjectTargetEnvEnum1) ToPointer() *CreateProjectTargetEnvEnum1 {
	return &e
}
func (e *CreateProjectTargetEnvEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectTargetEnvEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTargetEnvEnum1: %v", v)
	}
}

type CreateProjectEnvTargetUnionType string

const (
	CreateProjectEnvTargetUnionTypeArrayOfCreateProjectTargetEnvEnum1 CreateProjectEnvTargetUnionType = "arrayOfCreateProjectTargetEnvEnum1"
	CreateProjectEnvTargetUnionTypeCreateProjectTargetEnvEnum2        CreateProjectEnvTargetUnionType = "createProject_target_env_enum_2"
)

type CreateProjectEnvTargetUnion struct {
	ArrayOfCreateProjectTargetEnvEnum1 []CreateProjectTargetEnvEnum1 `queryParam:"inline"`
	CreateProjectTargetEnvEnum2        *CreateProjectTargetEnvEnum2  `queryParam:"inline"`

	Type CreateProjectEnvTargetUnionType
}

func CreateCreateProjectEnvTargetUnionArrayOfCreateProjectTargetEnvEnum1(arrayOfCreateProjectTargetEnvEnum1 []CreateProjectTargetEnvEnum1) CreateProjectEnvTargetUnion {
	typ := CreateProjectEnvTargetUnionTypeArrayOfCreateProjectTargetEnvEnum1

	return CreateProjectEnvTargetUnion{
		ArrayOfCreateProjectTargetEnvEnum1: arrayOfCreateProjectTargetEnvEnum1,
		Type:                               typ,
	}
}

func CreateCreateProjectEnvTargetUnionCreateProjectTargetEnvEnum2(createProjectTargetEnvEnum2 CreateProjectTargetEnvEnum2) CreateProjectEnvTargetUnion {
	typ := CreateProjectEnvTargetUnionTypeCreateProjectTargetEnvEnum2

	return CreateProjectEnvTargetUnion{
		CreateProjectTargetEnvEnum2: &createProjectTargetEnvEnum2,
		Type:                        typ,
	}
}

func (u *CreateProjectEnvTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfCreateProjectTargetEnvEnum1 []CreateProjectTargetEnvEnum1 = []CreateProjectTargetEnvEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateProjectTargetEnvEnum1, "", true, true); err == nil {
		u.ArrayOfCreateProjectTargetEnvEnum1 = arrayOfCreateProjectTargetEnvEnum1
		u.Type = CreateProjectEnvTargetUnionTypeArrayOfCreateProjectTargetEnvEnum1
		return nil
	}

	var createProjectTargetEnvEnum2 CreateProjectTargetEnvEnum2 = CreateProjectTargetEnvEnum2("")
	if err := utils.UnmarshalJSON(data, &createProjectTargetEnvEnum2, "", true, true); err == nil {
		u.CreateProjectTargetEnvEnum2 = &createProjectTargetEnvEnum2
		u.Type = CreateProjectEnvTargetUnionTypeCreateProjectTargetEnvEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvTargetUnion", string(data))
}

func (u CreateProjectEnvTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateProjectTargetEnvEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateProjectTargetEnvEnum1, "", true)
	}

	if u.CreateProjectTargetEnvEnum2 != nil {
		return utils.MarshalJSON(u.CreateProjectTargetEnvEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvTargetUnion: all fields are null")
}

type CreateProjectEnvType string

const (
	CreateProjectEnvTypeSystem    CreateProjectEnvType = "system"
	CreateProjectEnvTypeEncrypted CreateProjectEnvType = "encrypted"
	CreateProjectEnvTypePlain     CreateProjectEnvType = "plain"
	CreateProjectEnvTypeSensitive CreateProjectEnvType = "sensitive"
	CreateProjectEnvTypeSecret    CreateProjectEnvType = "secret"
)

func (e CreateProjectEnvType) ToPointer() *CreateProjectEnvType {
	return &e
}
func (e *CreateProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = CreateProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvType: %v", v)
	}
}

type CreateProjectTypeFlagsConnectionString string

const (
	CreateProjectTypeFlagsConnectionStringFlagsConnectionString CreateProjectTypeFlagsConnectionString = "flags-connection-string"
)

func (e CreateProjectTypeFlagsConnectionString) ToPointer() *CreateProjectTypeFlagsConnectionString {
	return &e
}
func (e *CreateProjectTypeFlagsConnectionString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = CreateProjectTypeFlagsConnectionString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeFlagsConnectionString: %v", v)
	}
}

type CreateProjectContentHintFlagsConnectionString struct {
	Type      CreateProjectTypeFlagsConnectionString `json:"type"`
	ProjectID string                                 `json:"projectId"`
}

func (o *CreateProjectContentHintFlagsConnectionString) GetType() CreateProjectTypeFlagsConnectionString {
	if o == nil {
		return CreateProjectTypeFlagsConnectionString("")
	}
	return o.Type
}

func (o *CreateProjectContentHintFlagsConnectionString) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreateProjectTypeIntegrationStoreSecret string

const (
	CreateProjectTypeIntegrationStoreSecretIntegrationStoreSecret CreateProjectTypeIntegrationStoreSecret = "integration-store-secret"
)

func (e CreateProjectTypeIntegrationStoreSecret) ToPointer() *CreateProjectTypeIntegrationStoreSecret {
	return &e
}
func (e *CreateProjectTypeIntegrationStoreSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreateProjectTypeIntegrationStoreSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeIntegrationStoreSecret: %v", v)
	}
}

type CreateProjectContentHintIntegrationStoreSecret struct {
	Type                       CreateProjectTypeIntegrationStoreSecret `json:"type"`
	StoreID                    string                                  `json:"storeId"`
	IntegrationID              string                                  `json:"integrationId"`
	IntegrationProductID       string                                  `json:"integrationProductId"`
	IntegrationConfigurationID string                                  `json:"integrationConfigurationId"`
}

func (o *CreateProjectContentHintIntegrationStoreSecret) GetType() CreateProjectTypeIntegrationStoreSecret {
	if o == nil {
		return CreateProjectTypeIntegrationStoreSecret("")
	}
	return o.Type
}

func (o *CreateProjectContentHintIntegrationStoreSecret) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectContentHintIntegrationStoreSecret) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateProjectContentHintIntegrationStoreSecret) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *CreateProjectContentHintIntegrationStoreSecret) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreateProjectTypePostgresURLNoSsl string

const (
	CreateProjectTypePostgresURLNoSslPostgresURLNoSsl CreateProjectTypePostgresURLNoSsl = "postgres-url-no-ssl"
)

func (e CreateProjectTypePostgresURLNoSsl) ToPointer() *CreateProjectTypePostgresURLNoSsl {
	return &e
}
func (e *CreateProjectTypePostgresURLNoSsl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreateProjectTypePostgresURLNoSsl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresURLNoSsl: %v", v)
	}
}

type CreateProjectContentHintPostgresURLNoSsl struct {
	Type    CreateProjectTypePostgresURLNoSsl `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresURLNoSsl) GetType() CreateProjectTypePostgresURLNoSsl {
	if o == nil {
		return CreateProjectTypePostgresURLNoSsl("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresURLNoSsl) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresDatabase string

const (
	CreateProjectTypePostgresDatabasePostgresDatabase CreateProjectTypePostgresDatabase = "postgres-database"
)

func (e CreateProjectTypePostgresDatabase) ToPointer() *CreateProjectTypePostgresDatabase {
	return &e
}
func (e *CreateProjectTypePostgresDatabase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreateProjectTypePostgresDatabase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresDatabase: %v", v)
	}
}

type CreateProjectContentHintPostgresDatabase struct {
	Type    CreateProjectTypePostgresDatabase `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresDatabase) GetType() CreateProjectTypePostgresDatabase {
	if o == nil {
		return CreateProjectTypePostgresDatabase("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresDatabase) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresPassword string

const (
	CreateProjectTypePostgresPasswordPostgresPassword CreateProjectTypePostgresPassword = "postgres-password"
)

func (e CreateProjectTypePostgresPassword) ToPointer() *CreateProjectTypePostgresPassword {
	return &e
}
func (e *CreateProjectTypePostgresPassword) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreateProjectTypePostgresPassword(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresPassword: %v", v)
	}
}

type CreateProjectContentHintPostgresPassword struct {
	Type    CreateProjectTypePostgresPassword `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresPassword) GetType() CreateProjectTypePostgresPassword {
	if o == nil {
		return CreateProjectTypePostgresPassword("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresPassword) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresHost string

const (
	CreateProjectTypePostgresHostPostgresHost CreateProjectTypePostgresHost = "postgres-host"
)

func (e CreateProjectTypePostgresHost) ToPointer() *CreateProjectTypePostgresHost {
	return &e
}
func (e *CreateProjectTypePostgresHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreateProjectTypePostgresHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresHost: %v", v)
	}
}

type CreateProjectContentHintPostgresHost struct {
	Type    CreateProjectTypePostgresHost `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresHost) GetType() CreateProjectTypePostgresHost {
	if o == nil {
		return CreateProjectTypePostgresHost("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresHost) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresUser string

const (
	CreateProjectTypePostgresUserPostgresUser CreateProjectTypePostgresUser = "postgres-user"
)

func (e CreateProjectTypePostgresUser) ToPointer() *CreateProjectTypePostgresUser {
	return &e
}
func (e *CreateProjectTypePostgresUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreateProjectTypePostgresUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresUser: %v", v)
	}
}

type CreateProjectContentHintPostgresUser struct {
	Type    CreateProjectTypePostgresUser `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresUser) GetType() CreateProjectTypePostgresUser {
	if o == nil {
		return CreateProjectTypePostgresUser("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresUser) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresPrismaURL string

const (
	CreateProjectTypePostgresPrismaURLPostgresPrismaURL CreateProjectTypePostgresPrismaURL = "postgres-prisma-url"
)

func (e CreateProjectTypePostgresPrismaURL) ToPointer() *CreateProjectTypePostgresPrismaURL {
	return &e
}
func (e *CreateProjectTypePostgresPrismaURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreateProjectTypePostgresPrismaURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresPrismaURL: %v", v)
	}
}

type CreateProjectContentHintPostgresPrismaURL struct {
	Type    CreateProjectTypePostgresPrismaURL `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresPrismaURL) GetType() CreateProjectTypePostgresPrismaURL {
	if o == nil {
		return CreateProjectTypePostgresPrismaURL("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresPrismaURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresURLNonPooling string

const (
	CreateProjectTypePostgresURLNonPoolingPostgresURLNonPooling CreateProjectTypePostgresURLNonPooling = "postgres-url-non-pooling"
)

func (e CreateProjectTypePostgresURLNonPooling) ToPointer() *CreateProjectTypePostgresURLNonPooling {
	return &e
}
func (e *CreateProjectTypePostgresURLNonPooling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreateProjectTypePostgresURLNonPooling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresURLNonPooling: %v", v)
	}
}

type CreateProjectContentHintPostgresURLNonPooling struct {
	Type    CreateProjectTypePostgresURLNonPooling `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresURLNonPooling) GetType() CreateProjectTypePostgresURLNonPooling {
	if o == nil {
		return CreateProjectTypePostgresURLNonPooling("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresURLNonPooling) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypePostgresURL string

const (
	CreateProjectTypePostgresURLPostgresURL CreateProjectTypePostgresURL = "postgres-url"
)

func (e CreateProjectTypePostgresURL) ToPointer() *CreateProjectTypePostgresURL {
	return &e
}
func (e *CreateProjectTypePostgresURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreateProjectTypePostgresURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypePostgresURL: %v", v)
	}
}

type CreateProjectContentHintPostgresURL struct {
	Type    CreateProjectTypePostgresURL `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectContentHintPostgresURL) GetType() CreateProjectTypePostgresURL {
	if o == nil {
		return CreateProjectTypePostgresURL("")
	}
	return o.Type
}

func (o *CreateProjectContentHintPostgresURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypeBlobReadWriteToken string

const (
	CreateProjectTypeBlobReadWriteTokenBlobReadWriteToken CreateProjectTypeBlobReadWriteToken = "blob-read-write-token"
)

func (e CreateProjectTypeBlobReadWriteToken) ToPointer() *CreateProjectTypeBlobReadWriteToken {
	return &e
}
func (e *CreateProjectTypeBlobReadWriteToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreateProjectTypeBlobReadWriteToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeBlobReadWriteToken: %v", v)
	}
}

type CreateProjectContentHintBlobReadWriteToken struct {
	Type    CreateProjectTypeBlobReadWriteToken `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *CreateProjectContentHintBlobReadWriteToken) GetType() CreateProjectTypeBlobReadWriteToken {
	if o == nil {
		return CreateProjectTypeBlobReadWriteToken("")
	}
	return o.Type
}

func (o *CreateProjectContentHintBlobReadWriteToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypeRedisRestAPIReadOnlyToken string

const (
	CreateProjectTypeRedisRestAPIReadOnlyTokenRedisRestAPIReadOnlyToken CreateProjectTypeRedisRestAPIReadOnlyToken = "redis-rest-api-read-only-token"
)

func (e CreateProjectTypeRedisRestAPIReadOnlyToken) ToPointer() *CreateProjectTypeRedisRestAPIReadOnlyToken {
	return &e
}
func (e *CreateProjectTypeRedisRestAPIReadOnlyToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreateProjectTypeRedisRestAPIReadOnlyToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeRedisRestAPIReadOnlyToken: %v", v)
	}
}

type CreateProjectContentHintRedisRestAPIReadOnlyToken struct {
	Type    CreateProjectTypeRedisRestAPIReadOnlyToken `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *CreateProjectContentHintRedisRestAPIReadOnlyToken) GetType() CreateProjectTypeRedisRestAPIReadOnlyToken {
	if o == nil {
		return CreateProjectTypeRedisRestAPIReadOnlyToken("")
	}
	return o.Type
}

func (o *CreateProjectContentHintRedisRestAPIReadOnlyToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypeRedisRestAPIToken string

const (
	CreateProjectTypeRedisRestAPITokenRedisRestAPIToken CreateProjectTypeRedisRestAPIToken = "redis-rest-api-token"
)

func (e CreateProjectTypeRedisRestAPIToken) ToPointer() *CreateProjectTypeRedisRestAPIToken {
	return &e
}
func (e *CreateProjectTypeRedisRestAPIToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreateProjectTypeRedisRestAPIToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeRedisRestAPIToken: %v", v)
	}
}

type CreateProjectContentHintRedisRestAPIToken struct {
	Type    CreateProjectTypeRedisRestAPIToken `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *CreateProjectContentHintRedisRestAPIToken) GetType() CreateProjectTypeRedisRestAPIToken {
	if o == nil {
		return CreateProjectTypeRedisRestAPIToken("")
	}
	return o.Type
}

func (o *CreateProjectContentHintRedisRestAPIToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypeRedisRestAPIURL string

const (
	CreateProjectTypeRedisRestAPIURLRedisRestAPIURL CreateProjectTypeRedisRestAPIURL = "redis-rest-api-url"
)

func (e CreateProjectTypeRedisRestAPIURL) ToPointer() *CreateProjectTypeRedisRestAPIURL {
	return &e
}
func (e *CreateProjectTypeRedisRestAPIURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreateProjectTypeRedisRestAPIURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeRedisRestAPIURL: %v", v)
	}
}

type CreateProjectContentHintRedisRestAPIURL struct {
	Type    CreateProjectTypeRedisRestAPIURL `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *CreateProjectContentHintRedisRestAPIURL) GetType() CreateProjectTypeRedisRestAPIURL {
	if o == nil {
		return CreateProjectTypeRedisRestAPIURL("")
	}
	return o.Type
}

func (o *CreateProjectContentHintRedisRestAPIURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectTypeRedisURL string

const (
	CreateProjectTypeRedisURLRedisURL CreateProjectTypeRedisURL = "redis-url"
)

func (e CreateProjectTypeRedisURL) ToPointer() *CreateProjectTypeRedisURL {
	return &e
}
func (e *CreateProjectTypeRedisURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreateProjectTypeRedisURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeRedisURL: %v", v)
	}
}

type CreateProjectContentHintRedisURL struct {
	Type    CreateProjectTypeRedisURL `json:"type"`
	StoreID string                    `json:"storeId"`
}

func (o *CreateProjectContentHintRedisURL) GetType() CreateProjectTypeRedisURL {
	if o == nil {
		return CreateProjectTypeRedisURL("")
	}
	return o.Type
}

func (o *CreateProjectContentHintRedisURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectContentHintUnionType string

const (
	CreateProjectContentHintUnionTypeCreateProjectContentHintRedisURL                  CreateProjectContentHintUnionType = "createProject_contentHint_RedisURL"
	CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIURL           CreateProjectContentHintUnionType = "createProject_contentHint_RedisRestAPIURL"
	CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIToken         CreateProjectContentHintUnionType = "createProject_contentHint_RedisRestAPIToken"
	CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIReadOnlyToken CreateProjectContentHintUnionType = "createProject_contentHint_RedisRestAPIReadOnlyToken"
	CreateProjectContentHintUnionTypeCreateProjectContentHintBlobReadWriteToken        CreateProjectContentHintUnionType = "createProject_contentHint_BlobReadWriteToken"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURL               CreateProjectContentHintUnionType = "createProject_contentHint_PostgresURL"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURLNonPooling     CreateProjectContentHintUnionType = "createProject_contentHint_PostgresURLNonPooling"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresPrismaURL         CreateProjectContentHintUnionType = "createProject_contentHint_PostgresPrismaURL"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresUser              CreateProjectContentHintUnionType = "createProject_contentHint_PostgresUser"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresHost              CreateProjectContentHintUnionType = "createProject_contentHint_PostgresHost"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresPassword          CreateProjectContentHintUnionType = "createProject_contentHint_PostgresPassword"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresDatabase          CreateProjectContentHintUnionType = "createProject_contentHint_PostgresDatabase"
	CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURLNoSsl          CreateProjectContentHintUnionType = "createProject_contentHint_PostgresURLNoSsl"
	CreateProjectContentHintUnionTypeCreateProjectContentHintIntegrationStoreSecret    CreateProjectContentHintUnionType = "createProject_contentHint_IntegrationStoreSecret"
	CreateProjectContentHintUnionTypeCreateProjectContentHintFlagsConnectionString     CreateProjectContentHintUnionType = "createProject_contentHint_FlagsConnectionString"
)

type CreateProjectContentHintUnion struct {
	CreateProjectContentHintRedisURL                  *CreateProjectContentHintRedisURL                  `queryParam:"inline"`
	CreateProjectContentHintRedisRestAPIURL           *CreateProjectContentHintRedisRestAPIURL           `queryParam:"inline"`
	CreateProjectContentHintRedisRestAPIToken         *CreateProjectContentHintRedisRestAPIToken         `queryParam:"inline"`
	CreateProjectContentHintRedisRestAPIReadOnlyToken *CreateProjectContentHintRedisRestAPIReadOnlyToken `queryParam:"inline"`
	CreateProjectContentHintBlobReadWriteToken        *CreateProjectContentHintBlobReadWriteToken        `queryParam:"inline"`
	CreateProjectContentHintPostgresURL               *CreateProjectContentHintPostgresURL               `queryParam:"inline"`
	CreateProjectContentHintPostgresURLNonPooling     *CreateProjectContentHintPostgresURLNonPooling     `queryParam:"inline"`
	CreateProjectContentHintPostgresPrismaURL         *CreateProjectContentHintPostgresPrismaURL         `queryParam:"inline"`
	CreateProjectContentHintPostgresUser              *CreateProjectContentHintPostgresUser              `queryParam:"inline"`
	CreateProjectContentHintPostgresHost              *CreateProjectContentHintPostgresHost              `queryParam:"inline"`
	CreateProjectContentHintPostgresPassword          *CreateProjectContentHintPostgresPassword          `queryParam:"inline"`
	CreateProjectContentHintPostgresDatabase          *CreateProjectContentHintPostgresDatabase          `queryParam:"inline"`
	CreateProjectContentHintPostgresURLNoSsl          *CreateProjectContentHintPostgresURLNoSsl          `queryParam:"inline"`
	CreateProjectContentHintIntegrationStoreSecret    *CreateProjectContentHintIntegrationStoreSecret    `queryParam:"inline"`
	CreateProjectContentHintFlagsConnectionString     *CreateProjectContentHintFlagsConnectionString     `queryParam:"inline"`

	Type CreateProjectContentHintUnionType
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintRedisURL(createProjectContentHintRedisURL CreateProjectContentHintRedisURL) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintRedisURL

	return CreateProjectContentHintUnion{
		CreateProjectContentHintRedisURL: &createProjectContentHintRedisURL,
		Type:                             typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintRedisRestAPIURL(createProjectContentHintRedisRestAPIURL CreateProjectContentHintRedisRestAPIURL) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIURL

	return CreateProjectContentHintUnion{
		CreateProjectContentHintRedisRestAPIURL: &createProjectContentHintRedisRestAPIURL,
		Type:                                    typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintRedisRestAPIToken(createProjectContentHintRedisRestAPIToken CreateProjectContentHintRedisRestAPIToken) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIToken

	return CreateProjectContentHintUnion{
		CreateProjectContentHintRedisRestAPIToken: &createProjectContentHintRedisRestAPIToken,
		Type: typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintRedisRestAPIReadOnlyToken(createProjectContentHintRedisRestAPIReadOnlyToken CreateProjectContentHintRedisRestAPIReadOnlyToken) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIReadOnlyToken

	return CreateProjectContentHintUnion{
		CreateProjectContentHintRedisRestAPIReadOnlyToken: &createProjectContentHintRedisRestAPIReadOnlyToken,
		Type: typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintBlobReadWriteToken(createProjectContentHintBlobReadWriteToken CreateProjectContentHintBlobReadWriteToken) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintBlobReadWriteToken

	return CreateProjectContentHintUnion{
		CreateProjectContentHintBlobReadWriteToken: &createProjectContentHintBlobReadWriteToken,
		Type: typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresURL(createProjectContentHintPostgresURL CreateProjectContentHintPostgresURL) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURL

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresURL: &createProjectContentHintPostgresURL,
		Type:                                typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresURLNonPooling(createProjectContentHintPostgresURLNonPooling CreateProjectContentHintPostgresURLNonPooling) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURLNonPooling

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresURLNonPooling: &createProjectContentHintPostgresURLNonPooling,
		Type: typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresPrismaURL(createProjectContentHintPostgresPrismaURL CreateProjectContentHintPostgresPrismaURL) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresPrismaURL

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresPrismaURL: &createProjectContentHintPostgresPrismaURL,
		Type: typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresUser(createProjectContentHintPostgresUser CreateProjectContentHintPostgresUser) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresUser

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresUser: &createProjectContentHintPostgresUser,
		Type:                                 typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresHost(createProjectContentHintPostgresHost CreateProjectContentHintPostgresHost) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresHost

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresHost: &createProjectContentHintPostgresHost,
		Type:                                 typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresPassword(createProjectContentHintPostgresPassword CreateProjectContentHintPostgresPassword) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresPassword

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresPassword: &createProjectContentHintPostgresPassword,
		Type:                                     typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresDatabase(createProjectContentHintPostgresDatabase CreateProjectContentHintPostgresDatabase) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresDatabase

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresDatabase: &createProjectContentHintPostgresDatabase,
		Type:                                     typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintPostgresURLNoSsl(createProjectContentHintPostgresURLNoSsl CreateProjectContentHintPostgresURLNoSsl) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURLNoSsl

	return CreateProjectContentHintUnion{
		CreateProjectContentHintPostgresURLNoSsl: &createProjectContentHintPostgresURLNoSsl,
		Type:                                     typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintIntegrationStoreSecret(createProjectContentHintIntegrationStoreSecret CreateProjectContentHintIntegrationStoreSecret) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintIntegrationStoreSecret

	return CreateProjectContentHintUnion{
		CreateProjectContentHintIntegrationStoreSecret: &createProjectContentHintIntegrationStoreSecret,
		Type: typ,
	}
}

func CreateCreateProjectContentHintUnionCreateProjectContentHintFlagsConnectionString(createProjectContentHintFlagsConnectionString CreateProjectContentHintFlagsConnectionString) CreateProjectContentHintUnion {
	typ := CreateProjectContentHintUnionTypeCreateProjectContentHintFlagsConnectionString

	return CreateProjectContentHintUnion{
		CreateProjectContentHintFlagsConnectionString: &createProjectContentHintFlagsConnectionString,
		Type: typ,
	}
}

func (u *CreateProjectContentHintUnion) UnmarshalJSON(data []byte) error {

	var createProjectContentHintPostgresURLNonPooling CreateProjectContentHintPostgresURLNonPooling = CreateProjectContentHintPostgresURLNonPooling{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresURLNonPooling, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresURLNonPooling = &createProjectContentHintPostgresURLNonPooling
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURLNonPooling
		return nil
	}

	var createProjectContentHintPostgresPassword CreateProjectContentHintPostgresPassword = CreateProjectContentHintPostgresPassword{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresPassword, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresPassword = &createProjectContentHintPostgresPassword
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresPassword
		return nil
	}

	var createProjectContentHintRedisRestAPIToken CreateProjectContentHintRedisRestAPIToken = CreateProjectContentHintRedisRestAPIToken{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintRedisRestAPIToken, "", true, true); err == nil {
		u.CreateProjectContentHintRedisRestAPIToken = &createProjectContentHintRedisRestAPIToken
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIToken
		return nil
	}

	var createProjectContentHintRedisRestAPIReadOnlyToken CreateProjectContentHintRedisRestAPIReadOnlyToken = CreateProjectContentHintRedisRestAPIReadOnlyToken{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintRedisRestAPIReadOnlyToken, "", true, true); err == nil {
		u.CreateProjectContentHintRedisRestAPIReadOnlyToken = &createProjectContentHintRedisRestAPIReadOnlyToken
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIReadOnlyToken
		return nil
	}

	var createProjectContentHintBlobReadWriteToken CreateProjectContentHintBlobReadWriteToken = CreateProjectContentHintBlobReadWriteToken{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintBlobReadWriteToken, "", true, true); err == nil {
		u.CreateProjectContentHintBlobReadWriteToken = &createProjectContentHintBlobReadWriteToken
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintBlobReadWriteToken
		return nil
	}

	var createProjectContentHintPostgresURL CreateProjectContentHintPostgresURL = CreateProjectContentHintPostgresURL{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresURL, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresURL = &createProjectContentHintPostgresURL
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURL
		return nil
	}

	var createProjectContentHintRedisRestAPIURL CreateProjectContentHintRedisRestAPIURL = CreateProjectContentHintRedisRestAPIURL{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintRedisRestAPIURL, "", true, true); err == nil {
		u.CreateProjectContentHintRedisRestAPIURL = &createProjectContentHintRedisRestAPIURL
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintRedisRestAPIURL
		return nil
	}

	var createProjectContentHintPostgresUser CreateProjectContentHintPostgresUser = CreateProjectContentHintPostgresUser{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresUser, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresUser = &createProjectContentHintPostgresUser
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresUser
		return nil
	}

	var createProjectContentHintRedisURL CreateProjectContentHintRedisURL = CreateProjectContentHintRedisURL{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintRedisURL, "", true, true); err == nil {
		u.CreateProjectContentHintRedisURL = &createProjectContentHintRedisURL
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintRedisURL
		return nil
	}

	var createProjectContentHintPostgresHost CreateProjectContentHintPostgresHost = CreateProjectContentHintPostgresHost{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresHost, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresHost = &createProjectContentHintPostgresHost
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresHost
		return nil
	}

	var createProjectContentHintPostgresPrismaURL CreateProjectContentHintPostgresPrismaURL = CreateProjectContentHintPostgresPrismaURL{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresPrismaURL, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresPrismaURL = &createProjectContentHintPostgresPrismaURL
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresPrismaURL
		return nil
	}

	var createProjectContentHintPostgresDatabase CreateProjectContentHintPostgresDatabase = CreateProjectContentHintPostgresDatabase{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresDatabase, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresDatabase = &createProjectContentHintPostgresDatabase
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresDatabase
		return nil
	}

	var createProjectContentHintPostgresURLNoSsl CreateProjectContentHintPostgresURLNoSsl = CreateProjectContentHintPostgresURLNoSsl{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintPostgresURLNoSsl, "", true, true); err == nil {
		u.CreateProjectContentHintPostgresURLNoSsl = &createProjectContentHintPostgresURLNoSsl
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintPostgresURLNoSsl
		return nil
	}

	var createProjectContentHintFlagsConnectionString CreateProjectContentHintFlagsConnectionString = CreateProjectContentHintFlagsConnectionString{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintFlagsConnectionString, "", true, true); err == nil {
		u.CreateProjectContentHintFlagsConnectionString = &createProjectContentHintFlagsConnectionString
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintFlagsConnectionString
		return nil
	}

	var createProjectContentHintIntegrationStoreSecret CreateProjectContentHintIntegrationStoreSecret = CreateProjectContentHintIntegrationStoreSecret{}
	if err := utils.UnmarshalJSON(data, &createProjectContentHintIntegrationStoreSecret, "", true, true); err == nil {
		u.CreateProjectContentHintIntegrationStoreSecret = &createProjectContentHintIntegrationStoreSecret
		u.Type = CreateProjectContentHintUnionTypeCreateProjectContentHintIntegrationStoreSecret
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectContentHintUnion", string(data))
}

func (u CreateProjectContentHintUnion) MarshalJSON() ([]byte, error) {
	if u.CreateProjectContentHintRedisURL != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintRedisURL, "", true)
	}

	if u.CreateProjectContentHintRedisRestAPIURL != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintRedisRestAPIURL, "", true)
	}

	if u.CreateProjectContentHintRedisRestAPIToken != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintRedisRestAPIToken, "", true)
	}

	if u.CreateProjectContentHintRedisRestAPIReadOnlyToken != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintRedisRestAPIReadOnlyToken, "", true)
	}

	if u.CreateProjectContentHintBlobReadWriteToken != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintBlobReadWriteToken, "", true)
	}

	if u.CreateProjectContentHintPostgresURL != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresURL, "", true)
	}

	if u.CreateProjectContentHintPostgresURLNonPooling != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresURLNonPooling, "", true)
	}

	if u.CreateProjectContentHintPostgresPrismaURL != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresPrismaURL, "", true)
	}

	if u.CreateProjectContentHintPostgresUser != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresUser, "", true)
	}

	if u.CreateProjectContentHintPostgresHost != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresHost, "", true)
	}

	if u.CreateProjectContentHintPostgresPassword != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresPassword, "", true)
	}

	if u.CreateProjectContentHintPostgresDatabase != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresDatabase, "", true)
	}

	if u.CreateProjectContentHintPostgresURLNoSsl != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintPostgresURLNoSsl, "", true)
	}

	if u.CreateProjectContentHintIntegrationStoreSecret != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintIntegrationStoreSecret, "", true)
	}

	if u.CreateProjectContentHintFlagsConnectionString != nil {
		return utils.MarshalJSON(u.CreateProjectContentHintFlagsConnectionString, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectContentHintUnion: all fields are null")
}

type CreateProjectTypeFlagsSecret string

const (
	CreateProjectTypeFlagsSecretFlagsSecret CreateProjectTypeFlagsSecret = "flags-secret"
)

func (e CreateProjectTypeFlagsSecret) ToPointer() *CreateProjectTypeFlagsSecret {
	return &e
}
func (e *CreateProjectTypeFlagsSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreateProjectTypeFlagsSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeFlagsSecret: %v", v)
	}
}

// CreateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectInternalContentHint struct {
	Type CreateProjectTypeFlagsSecret `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreateProjectInternalContentHint) GetType() CreateProjectTypeFlagsSecret {
	if o == nil {
		return CreateProjectTypeFlagsSecret("")
	}
	return o.Type
}

func (o *CreateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type CreateProjectEnv struct {
	Target *CreateProjectEnvTargetUnion `json:"target,omitempty"`
	Type   CreateProjectEnvType         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                        `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                          `json:"decrypted,omitempty"`
	Value             string                         `json:"value"`
	VsmValue          *string                        `json:"vsmValue,omitempty"`
	ID                *string                        `json:"id,omitempty"`
	Key               string                         `json:"key"`
	ConfigurationID   *string                        `json:"configurationId,omitempty"`
	CreatedAt         *float64                       `json:"createdAt,omitempty"`
	UpdatedAt         *float64                       `json:"updatedAt,omitempty"`
	CreatedBy         *string                        `json:"createdBy,omitempty"`
	UpdatedBy         *string                        `json:"updatedBy,omitempty"`
	GitBranch         *string                        `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                        `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                        `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreateProjectContentHintUnion `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *CreateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	Comment              *string                           `json:"comment,omitempty"`
	CustomEnvironmentIds []string                          `json:"customEnvironmentIds,omitempty"`
}

func (o *CreateProjectEnv) GetTarget() *CreateProjectEnvTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnv) GetType() CreateProjectEnvType {
	if o == nil {
		return CreateProjectEnvType("")
	}
	return o.Type
}

func (o *CreateProjectEnv) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *CreateProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnv) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *CreateProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *CreateProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *CreateProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *CreateProjectEnv) GetContentHint() *CreateProjectContentHintUnion {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *CreateProjectEnv) GetInternalContentHint() *CreateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *CreateProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnv) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

// CreateProjectCustomEnvironmentType - The type of environment (production, preview, or development)
type CreateProjectCustomEnvironmentType string

const (
	CreateProjectCustomEnvironmentTypeProduction  CreateProjectCustomEnvironmentType = "production"
	CreateProjectCustomEnvironmentTypePreview     CreateProjectCustomEnvironmentType = "preview"
	CreateProjectCustomEnvironmentTypeDevelopment CreateProjectCustomEnvironmentType = "development"
)

func (e CreateProjectCustomEnvironmentType) ToPointer() *CreateProjectCustomEnvironmentType {
	return &e
}
func (e *CreateProjectCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectCustomEnvironmentType: %v", v)
	}
}

// CreateProjectCustomEnvironmentBranchMatcherType - The type of matching to perform
type CreateProjectCustomEnvironmentBranchMatcherType string

const (
	CreateProjectCustomEnvironmentBranchMatcherTypeEndsWith   CreateProjectCustomEnvironmentBranchMatcherType = "endsWith"
	CreateProjectCustomEnvironmentBranchMatcherTypeStartsWith CreateProjectCustomEnvironmentBranchMatcherType = "startsWith"
	CreateProjectCustomEnvironmentBranchMatcherTypeEquals     CreateProjectCustomEnvironmentBranchMatcherType = "equals"
)

func (e CreateProjectCustomEnvironmentBranchMatcherType) ToPointer() *CreateProjectCustomEnvironmentBranchMatcherType {
	return &e
}
func (e *CreateProjectCustomEnvironmentBranchMatcherType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = CreateProjectCustomEnvironmentBranchMatcherType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectCustomEnvironmentBranchMatcherType: %v", v)
	}
}

// CreateProjectCustomEnvironmentBranchMatcher - Configuration for matching git branches to this environment
type CreateProjectCustomEnvironmentBranchMatcher struct {
	// The type of matching to perform
	Type CreateProjectCustomEnvironmentBranchMatcherType `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *CreateProjectCustomEnvironmentBranchMatcher) GetType() CreateProjectCustomEnvironmentBranchMatcherType {
	if o == nil {
		return CreateProjectCustomEnvironmentBranchMatcherType("")
	}
	return o.Type
}

func (o *CreateProjectCustomEnvironmentBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// CreateProjectVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type CreateProjectVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *CreateProjectVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *CreateProjectVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreateProjectVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// CreateProjectDomain - List of domains associated with this environment
type CreateProjectDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []CreateProjectVerification `json:"verification,omitempty"`
}

func (o *CreateProjectDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *CreateProjectDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateProjectDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *CreateProjectDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *CreateProjectDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *CreateProjectDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *CreateProjectDomain) GetVerification() []CreateProjectVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// CreateProjectCustomEnvironment - Internal representation of a custom environment with all required properties
type CreateProjectCustomEnvironment struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type CreateProjectCustomEnvironmentType `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *CreateProjectCustomEnvironmentBranchMatcher `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []CreateProjectDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *CreateProjectCustomEnvironment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectCustomEnvironment) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *CreateProjectCustomEnvironment) GetType() CreateProjectCustomEnvironmentType {
	if o == nil {
		return CreateProjectCustomEnvironmentType("")
	}
	return o.Type
}

func (o *CreateProjectCustomEnvironment) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *CreateProjectCustomEnvironment) GetBranchMatcher() *CreateProjectCustomEnvironmentBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CreateProjectCustomEnvironment) GetDomains() []CreateProjectDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *CreateProjectCustomEnvironment) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *CreateProjectCustomEnvironment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectCustomEnvironment) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type CreateProjectFrameworkResponseBody string

const (
	CreateProjectFrameworkResponseBodyBlitzjs        CreateProjectFrameworkResponseBody = "blitzjs"
	CreateProjectFrameworkResponseBodyNextjs         CreateProjectFrameworkResponseBody = "nextjs"
	CreateProjectFrameworkResponseBodyGatsby         CreateProjectFrameworkResponseBody = "gatsby"
	CreateProjectFrameworkResponseBodyRemix          CreateProjectFrameworkResponseBody = "remix"
	CreateProjectFrameworkResponseBodyReactRouter    CreateProjectFrameworkResponseBody = "react-router"
	CreateProjectFrameworkResponseBodyAstro          CreateProjectFrameworkResponseBody = "astro"
	CreateProjectFrameworkResponseBodyHexo           CreateProjectFrameworkResponseBody = "hexo"
	CreateProjectFrameworkResponseBodyEleventy       CreateProjectFrameworkResponseBody = "eleventy"
	CreateProjectFrameworkResponseBodyDocusaurus2    CreateProjectFrameworkResponseBody = "docusaurus-2"
	CreateProjectFrameworkResponseBodyDocusaurus     CreateProjectFrameworkResponseBody = "docusaurus"
	CreateProjectFrameworkResponseBodyPreact         CreateProjectFrameworkResponseBody = "preact"
	CreateProjectFrameworkResponseBodySolidstart1    CreateProjectFrameworkResponseBody = "solidstart-1"
	CreateProjectFrameworkResponseBodySolidstart     CreateProjectFrameworkResponseBody = "solidstart"
	CreateProjectFrameworkResponseBodyDojo           CreateProjectFrameworkResponseBody = "dojo"
	CreateProjectFrameworkResponseBodyEmber          CreateProjectFrameworkResponseBody = "ember"
	CreateProjectFrameworkResponseBodyVue            CreateProjectFrameworkResponseBody = "vue"
	CreateProjectFrameworkResponseBodyScully         CreateProjectFrameworkResponseBody = "scully"
	CreateProjectFrameworkResponseBodyIonicAngular   CreateProjectFrameworkResponseBody = "ionic-angular"
	CreateProjectFrameworkResponseBodyAngular        CreateProjectFrameworkResponseBody = "angular"
	CreateProjectFrameworkResponseBodyPolymer        CreateProjectFrameworkResponseBody = "polymer"
	CreateProjectFrameworkResponseBodySvelte         CreateProjectFrameworkResponseBody = "svelte"
	CreateProjectFrameworkResponseBodySveltekit      CreateProjectFrameworkResponseBody = "sveltekit"
	CreateProjectFrameworkResponseBodySveltekit1     CreateProjectFrameworkResponseBody = "sveltekit-1"
	CreateProjectFrameworkResponseBodyIonicReact     CreateProjectFrameworkResponseBody = "ionic-react"
	CreateProjectFrameworkResponseBodyCreateReactApp CreateProjectFrameworkResponseBody = "create-react-app"
	CreateProjectFrameworkResponseBodyGridsome       CreateProjectFrameworkResponseBody = "gridsome"
	CreateProjectFrameworkResponseBodyUmijs          CreateProjectFrameworkResponseBody = "umijs"
	CreateProjectFrameworkResponseBodySapper         CreateProjectFrameworkResponseBody = "sapper"
	CreateProjectFrameworkResponseBodySaber          CreateProjectFrameworkResponseBody = "saber"
	CreateProjectFrameworkResponseBodyStencil        CreateProjectFrameworkResponseBody = "stencil"
	CreateProjectFrameworkResponseBodyNuxtjs         CreateProjectFrameworkResponseBody = "nuxtjs"
	CreateProjectFrameworkResponseBodyRedwoodjs      CreateProjectFrameworkResponseBody = "redwoodjs"
	CreateProjectFrameworkResponseBodyHugo           CreateProjectFrameworkResponseBody = "hugo"
	CreateProjectFrameworkResponseBodyJekyll         CreateProjectFrameworkResponseBody = "jekyll"
	CreateProjectFrameworkResponseBodyBrunch         CreateProjectFrameworkResponseBody = "brunch"
	CreateProjectFrameworkResponseBodyMiddleman      CreateProjectFrameworkResponseBody = "middleman"
	CreateProjectFrameworkResponseBodyZola           CreateProjectFrameworkResponseBody = "zola"
	CreateProjectFrameworkResponseBodyHydrogen       CreateProjectFrameworkResponseBody = "hydrogen"
	CreateProjectFrameworkResponseBodyVite           CreateProjectFrameworkResponseBody = "vite"
	CreateProjectFrameworkResponseBodyVitepress      CreateProjectFrameworkResponseBody = "vitepress"
	CreateProjectFrameworkResponseBodyVuepress       CreateProjectFrameworkResponseBody = "vuepress"
	CreateProjectFrameworkResponseBodyParcel         CreateProjectFrameworkResponseBody = "parcel"
	CreateProjectFrameworkResponseBodyFasthtml       CreateProjectFrameworkResponseBody = "fasthtml"
	CreateProjectFrameworkResponseBodySanityV3       CreateProjectFrameworkResponseBody = "sanity-v3"
	CreateProjectFrameworkResponseBodySanity         CreateProjectFrameworkResponseBody = "sanity"
	CreateProjectFrameworkResponseBodyStorybook      CreateProjectFrameworkResponseBody = "storybook"
)

func (e CreateProjectFrameworkResponseBody) ToPointer() *CreateProjectFrameworkResponseBody {
	return &e
}
func (e *CreateProjectFrameworkResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = CreateProjectFrameworkResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFrameworkResponseBody: %v", v)
	}
}

type CreateProjectIPBucket struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *CreateProjectIPBucket) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *CreateProjectIPBucket) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type CreateProjectLatestDeployment struct {
	ID                     string                             `json:"id"`
	Alias                  []string                           `json:"alias,omitempty"`
	AliasAssigned          *CreateProjectAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProjectAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                            `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                           `json:"automaticAliases,omitempty"`
	BranchMatcher          *CreateProjectBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                           `json:"buildingAt,omitempty"`
	Builds                 []CreateProjectBuild               `json:"builds,omitempty"`
	ChecksConclusion       *CreateProjectChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProjectChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                              `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                            `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                            `json:"createdAt"`
	CreatedIn              string                             `json:"createdIn"`
	Creator                *CreateProjectCreator              `json:"creator"`
	DeletedAt              *float64                           `json:"deletedAt,omitempty"`
	DeploymentHostname     string                             `json:"deploymentHostname"`
	Forced                 *bool                              `json:"forced,omitempty"`
	Name                   string                             `json:"name"`
	Meta                   map[string]string                  `json:"meta,omitempty"`
	MonorepoManager        *string                            `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *CreateProjectOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   CreateProjectPlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                       `json:"previewCommentsEnabled,omitempty"`
	Private                bool                        `json:"private"`
	ReadyAt                *float64                    `json:"readyAt,omitempty"`
	ReadyState             CreateProjectReadyState     `json:"readyState"`
	ReadySubstate          *CreateProjectReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                    `json:"requestedAt,omitempty"`
	Target                 *string                     `json:"target,omitempty"`
	TeamID                 *string                     `json:"teamId,omitempty"`
	Type                   CreateProjectTypeLambdas    `json:"type"`
	URL                    string                      `json:"url"`
	UserID                 string                      `json:"userId"`
	WithCache              *bool                       `json:"withCache,omitempty"`
}

func (o *CreateProjectLatestDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectLatestDeployment) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProjectLatestDeployment) GetAliasAssigned() *CreateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProjectLatestDeployment) GetAliasError() *CreateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProjectLatestDeployment) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProjectLatestDeployment) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProjectLatestDeployment) GetBranchMatcher() *CreateProjectBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CreateProjectLatestDeployment) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProjectLatestDeployment) GetBuilds() []CreateProjectBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProjectLatestDeployment) GetChecksConclusion() *CreateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProjectLatestDeployment) GetChecksState() *CreateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProjectLatestDeployment) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectLatestDeployment) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectLatestDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectLatestDeployment) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProjectLatestDeployment) GetCreator() *CreateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProjectLatestDeployment) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *CreateProjectLatestDeployment) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProjectLatestDeployment) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProjectLatestDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectLatestDeployment) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProjectLatestDeployment) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProjectLatestDeployment) GetOidcTokenClaims() *CreateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *CreateProjectLatestDeployment) GetPlan() CreateProjectPlan {
	if o == nil {
		return CreateProjectPlan("")
	}
	return o.Plan
}

func (o *CreateProjectLatestDeployment) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProjectLatestDeployment) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProjectLatestDeployment) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProjectLatestDeployment) GetReadyState() CreateProjectReadyState {
	if o == nil {
		return CreateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProjectLatestDeployment) GetReadySubstate() *CreateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProjectLatestDeployment) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProjectLatestDeployment) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectLatestDeployment) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectLatestDeployment) GetType() CreateProjectTypeLambdas {
	if o == nil {
		return CreateProjectTypeLambdas("")
	}
	return o.Type
}

func (o *CreateProjectLatestDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProjectLatestDeployment) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProjectLatestDeployment) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProjectTypeGithubCustomHost string

const (
	CreateProjectTypeGithubCustomHostGithubCustomHost CreateProjectTypeGithubCustomHost = "github-custom-host"
)

func (e CreateProjectTypeGithubCustomHost) ToPointer() *CreateProjectTypeGithubCustomHost {
	return &e
}
func (e *CreateProjectTypeGithubCustomHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = CreateProjectTypeGithubCustomHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeGithubCustomHost: %v", v)
	}
}

type CreateProjectDeployHook4 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectDeployHook4) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectDeployHook4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectDeployHook4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectDeployHook4) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectDeployHook4) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLinkGithubCustomHost struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                           `json:"repoOwnerId,omitempty"`
	Repo             *string                            `json:"repo,omitempty"`
	RepoID           *float64                           `json:"repoId,omitempty"`
	Type             *CreateProjectTypeGithubCustomHost `json:"type,omitempty"`
	Host             *string                            `json:"host,omitempty"`
	CreatedAt        *float64                           `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectDeployHook4         `json:"deployHooks"`
	GitCredentialID  *string                            `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                           `json:"updatedAt,omitempty"`
	Sourceless       *bool                              `json:"sourceless,omitempty"`
	ProductionBranch *string                            `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLinkGithubCustomHost) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateProjectLinkGithubCustomHost) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *CreateProjectLinkGithubCustomHost) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateProjectLinkGithubCustomHost) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *CreateProjectLinkGithubCustomHost) GetType() *CreateProjectTypeGithubCustomHost {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLinkGithubCustomHost) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *CreateProjectLinkGithubCustomHost) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkGithubCustomHost) GetDeployHooks() []CreateProjectDeployHook4 {
	if o == nil {
		return []CreateProjectDeployHook4{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLinkGithubCustomHost) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLinkGithubCustomHost) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLinkGithubCustomHost) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLinkGithubCustomHost) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectTypeBitbucket string

const (
	CreateProjectTypeBitbucketBitbucket CreateProjectTypeBitbucket = "bitbucket"
)

func (e CreateProjectTypeBitbucket) ToPointer() *CreateProjectTypeBitbucket {
	return &e
}
func (e *CreateProjectTypeBitbucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = CreateProjectTypeBitbucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeBitbucket: %v", v)
	}
}

type CreateProjectDeployHook3 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectDeployHook3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectDeployHook3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectDeployHook3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectDeployHook3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectDeployHook3) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLinkBitbucket struct {
	Name             *string                     `json:"name,omitempty"`
	Slug             *string                     `json:"slug,omitempty"`
	Owner            *string                     `json:"owner,omitempty"`
	Type             *CreateProjectTypeBitbucket `json:"type,omitempty"`
	UUID             *string                     `json:"uuid,omitempty"`
	WorkspaceUUID    *string                     `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                    `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectDeployHook3  `json:"deployHooks"`
	GitCredentialID  *string                     `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                    `json:"updatedAt,omitempty"`
	Sourceless       *bool                       `json:"sourceless,omitempty"`
	ProductionBranch *string                     `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLinkBitbucket) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *CreateProjectLinkBitbucket) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectLinkBitbucket) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *CreateProjectLinkBitbucket) GetType() *CreateProjectTypeBitbucket {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLinkBitbucket) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *CreateProjectLinkBitbucket) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *CreateProjectLinkBitbucket) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkBitbucket) GetDeployHooks() []CreateProjectDeployHook3 {
	if o == nil {
		return []CreateProjectDeployHook3{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLinkBitbucket) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLinkBitbucket) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLinkBitbucket) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLinkBitbucket) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectTypeGitlab string

const (
	CreateProjectTypeGitlabGitlab CreateProjectTypeGitlab = "gitlab"
)

func (e CreateProjectTypeGitlab) ToPointer() *CreateProjectTypeGitlab {
	return &e
}
func (e *CreateProjectTypeGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = CreateProjectTypeGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeGitlab: %v", v)
	}
}

type CreateProjectDeployHook2 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectDeployHook2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectDeployHook2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectDeployHook2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectDeployHook2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectDeployHook2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLinkGitlab struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                   `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                    `json:"projectUrl,omitempty"`
	Type             *CreateProjectTypeGitlab   `json:"type,omitempty"`
	CreatedAt        *float64                   `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectDeployHook2 `json:"deployHooks"`
	GitCredentialID  *string                    `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                   `json:"updatedAt,omitempty"`
	Sourceless       *bool                      `json:"sourceless,omitempty"`
	ProductionBranch *string                    `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLinkGitlab) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectLinkGitlab) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *CreateProjectLinkGitlab) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *CreateProjectLinkGitlab) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *CreateProjectLinkGitlab) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *CreateProjectLinkGitlab) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *CreateProjectLinkGitlab) GetType() *CreateProjectTypeGitlab {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLinkGitlab) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkGitlab) GetDeployHooks() []CreateProjectDeployHook2 {
	if o == nil {
		return []CreateProjectDeployHook2{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLinkGitlab) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLinkGitlab) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLinkGitlab) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLinkGitlab) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectTypeGithub string

const (
	CreateProjectTypeGithubGithub CreateProjectTypeGithub = "github"
)

func (e CreateProjectTypeGithub) ToPointer() *CreateProjectTypeGithub {
	return &e
}
func (e *CreateProjectTypeGithub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = CreateProjectTypeGithub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeGithub: %v", v)
	}
}

type CreateProjectDeployHook1 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *CreateProjectDeployHook1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectDeployHook1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectDeployHook1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectDeployHook1) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *CreateProjectDeployHook1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type CreateProjectLinkGithub struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                   `json:"repoOwnerId,omitempty"`
	Repo             *string                    `json:"repo,omitempty"`
	RepoID           *float64                   `json:"repoId,omitempty"`
	Type             *CreateProjectTypeGithub   `json:"type,omitempty"`
	CreatedAt        *float64                   `json:"createdAt,omitempty"`
	DeployHooks      []CreateProjectDeployHook1 `json:"deployHooks"`
	GitCredentialID  *string                    `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                   `json:"updatedAt,omitempty"`
	Sourceless       *bool                      `json:"sourceless,omitempty"`
	ProductionBranch *string                    `json:"productionBranch,omitempty"`
}

func (o *CreateProjectLinkGithub) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *CreateProjectLinkGithub) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *CreateProjectLinkGithub) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *CreateProjectLinkGithub) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *CreateProjectLinkGithub) GetType() *CreateProjectTypeGithub {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateProjectLinkGithub) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectLinkGithub) GetDeployHooks() []CreateProjectDeployHook1 {
	if o == nil {
		return []CreateProjectDeployHook1{}
	}
	return o.DeployHooks
}

func (o *CreateProjectLinkGithub) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *CreateProjectLinkGithub) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectLinkGithub) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *CreateProjectLinkGithub) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type CreateProjectLinkUnionType string

const (
	CreateProjectLinkUnionTypeCreateProjectLinkGithub           CreateProjectLinkUnionType = "createProject_link_Github"
	CreateProjectLinkUnionTypeCreateProjectLinkGitlab           CreateProjectLinkUnionType = "createProject_link_Gitlab"
	CreateProjectLinkUnionTypeCreateProjectLinkBitbucket        CreateProjectLinkUnionType = "createProject_link_Bitbucket"
	CreateProjectLinkUnionTypeCreateProjectLinkGithubCustomHost CreateProjectLinkUnionType = "createProject_link_GithubCustomHost"
)

type CreateProjectLinkUnion struct {
	CreateProjectLinkGithub           *CreateProjectLinkGithub           `queryParam:"inline"`
	CreateProjectLinkGitlab           *CreateProjectLinkGitlab           `queryParam:"inline"`
	CreateProjectLinkBitbucket        *CreateProjectLinkBitbucket        `queryParam:"inline"`
	CreateProjectLinkGithubCustomHost *CreateProjectLinkGithubCustomHost `queryParam:"inline"`

	Type CreateProjectLinkUnionType
}

func CreateCreateProjectLinkUnionCreateProjectLinkGithub(createProjectLinkGithub CreateProjectLinkGithub) CreateProjectLinkUnion {
	typ := CreateProjectLinkUnionTypeCreateProjectLinkGithub

	return CreateProjectLinkUnion{
		CreateProjectLinkGithub: &createProjectLinkGithub,
		Type:                    typ,
	}
}

func CreateCreateProjectLinkUnionCreateProjectLinkGitlab(createProjectLinkGitlab CreateProjectLinkGitlab) CreateProjectLinkUnion {
	typ := CreateProjectLinkUnionTypeCreateProjectLinkGitlab

	return CreateProjectLinkUnion{
		CreateProjectLinkGitlab: &createProjectLinkGitlab,
		Type:                    typ,
	}
}

func CreateCreateProjectLinkUnionCreateProjectLinkBitbucket(createProjectLinkBitbucket CreateProjectLinkBitbucket) CreateProjectLinkUnion {
	typ := CreateProjectLinkUnionTypeCreateProjectLinkBitbucket

	return CreateProjectLinkUnion{
		CreateProjectLinkBitbucket: &createProjectLinkBitbucket,
		Type:                       typ,
	}
}

func CreateCreateProjectLinkUnionCreateProjectLinkGithubCustomHost(createProjectLinkGithubCustomHost CreateProjectLinkGithubCustomHost) CreateProjectLinkUnion {
	typ := CreateProjectLinkUnionTypeCreateProjectLinkGithubCustomHost

	return CreateProjectLinkUnion{
		CreateProjectLinkGithubCustomHost: &createProjectLinkGithubCustomHost,
		Type:                              typ,
	}
}

func (u *CreateProjectLinkUnion) UnmarshalJSON(data []byte) error {

	var createProjectLinkGithub CreateProjectLinkGithub = CreateProjectLinkGithub{}
	if err := utils.UnmarshalJSON(data, &createProjectLinkGithub, "", true, true); err == nil {
		u.CreateProjectLinkGithub = &createProjectLinkGithub
		u.Type = CreateProjectLinkUnionTypeCreateProjectLinkGithub
		return nil
	}

	var createProjectLinkBitbucket CreateProjectLinkBitbucket = CreateProjectLinkBitbucket{}
	if err := utils.UnmarshalJSON(data, &createProjectLinkBitbucket, "", true, true); err == nil {
		u.CreateProjectLinkBitbucket = &createProjectLinkBitbucket
		u.Type = CreateProjectLinkUnionTypeCreateProjectLinkBitbucket
		return nil
	}

	var createProjectLinkGithubCustomHost CreateProjectLinkGithubCustomHost = CreateProjectLinkGithubCustomHost{}
	if err := utils.UnmarshalJSON(data, &createProjectLinkGithubCustomHost, "", true, true); err == nil {
		u.CreateProjectLinkGithubCustomHost = &createProjectLinkGithubCustomHost
		u.Type = CreateProjectLinkUnionTypeCreateProjectLinkGithubCustomHost
		return nil
	}

	var createProjectLinkGitlab CreateProjectLinkGitlab = CreateProjectLinkGitlab{}
	if err := utils.UnmarshalJSON(data, &createProjectLinkGitlab, "", true, true); err == nil {
		u.CreateProjectLinkGitlab = &createProjectLinkGitlab
		u.Type = CreateProjectLinkUnionTypeCreateProjectLinkGitlab
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectLinkUnion", string(data))
}

func (u CreateProjectLinkUnion) MarshalJSON() ([]byte, error) {
	if u.CreateProjectLinkGithub != nil {
		return utils.MarshalJSON(u.CreateProjectLinkGithub, "", true)
	}

	if u.CreateProjectLinkGitlab != nil {
		return utils.MarshalJSON(u.CreateProjectLinkGitlab, "", true)
	}

	if u.CreateProjectLinkBitbucket != nil {
		return utils.MarshalJSON(u.CreateProjectLinkBitbucket, "", true)
	}

	if u.CreateProjectLinkGithubCustomHost != nil {
		return utils.MarshalJSON(u.CreateProjectLinkGithubCustomHost, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectLinkUnion: all fields are null")
}

type CreateProjectMicrofrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *CreateProjectMicrofrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectMicrofrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *CreateProjectMicrofrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type CreateProjectMicrofrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *CreateProjectMicrofrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateProjectMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *CreateProjectMicrofrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *CreateProjectMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *CreateProjectMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *CreateProjectMicrofrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type CreateProjectMicrofrontendsUnionType string

const (
	CreateProjectMicrofrontendsUnionTypeCreateProjectMicrofrontends1 CreateProjectMicrofrontendsUnionType = "createProject_microfrontends_1"
	CreateProjectMicrofrontendsUnionTypeCreateProjectMicrofrontends2 CreateProjectMicrofrontendsUnionType = "createProject_microfrontends_2"
)

type CreateProjectMicrofrontendsUnion struct {
	CreateProjectMicrofrontends1 *CreateProjectMicrofrontends1 `queryParam:"inline"`
	CreateProjectMicrofrontends2 *CreateProjectMicrofrontends2 `queryParam:"inline"`

	Type CreateProjectMicrofrontendsUnionType
}

func CreateCreateProjectMicrofrontendsUnionCreateProjectMicrofrontends1(createProjectMicrofrontends1 CreateProjectMicrofrontends1) CreateProjectMicrofrontendsUnion {
	typ := CreateProjectMicrofrontendsUnionTypeCreateProjectMicrofrontends1

	return CreateProjectMicrofrontendsUnion{
		CreateProjectMicrofrontends1: &createProjectMicrofrontends1,
		Type:                         typ,
	}
}

func CreateCreateProjectMicrofrontendsUnionCreateProjectMicrofrontends2(createProjectMicrofrontends2 CreateProjectMicrofrontends2) CreateProjectMicrofrontendsUnion {
	typ := CreateProjectMicrofrontendsUnionTypeCreateProjectMicrofrontends2

	return CreateProjectMicrofrontendsUnion{
		CreateProjectMicrofrontends2: &createProjectMicrofrontends2,
		Type:                         typ,
	}
}

func (u *CreateProjectMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var createProjectMicrofrontends2 CreateProjectMicrofrontends2 = CreateProjectMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &createProjectMicrofrontends2, "", true, true); err == nil {
		u.CreateProjectMicrofrontends2 = &createProjectMicrofrontends2
		u.Type = CreateProjectMicrofrontendsUnionTypeCreateProjectMicrofrontends2
		return nil
	}

	var createProjectMicrofrontends1 CreateProjectMicrofrontends1 = CreateProjectMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &createProjectMicrofrontends1, "", true, true); err == nil {
		u.CreateProjectMicrofrontends1 = &createProjectMicrofrontends1
		u.Type = CreateProjectMicrofrontendsUnionTypeCreateProjectMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectMicrofrontendsUnion", string(data))
}

func (u CreateProjectMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.CreateProjectMicrofrontends1 != nil {
		return utils.MarshalJSON(u.CreateProjectMicrofrontends1, "", true)
	}

	if u.CreateProjectMicrofrontends2 != nil {
		return utils.MarshalJSON(u.CreateProjectMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectMicrofrontendsUnion: all fields are null")
}

type CreateProjectNodeVersion string

const (
	CreateProjectNodeVersionTwentyTwoDotX  CreateProjectNodeVersion = "22.x"
	CreateProjectNodeVersionTwentyDotX     CreateProjectNodeVersion = "20.x"
	CreateProjectNodeVersionEighteenDotX   CreateProjectNodeVersion = "18.x"
	CreateProjectNodeVersionSixteenDotX    CreateProjectNodeVersion = "16.x"
	CreateProjectNodeVersionFourteenDotX   CreateProjectNodeVersion = "14.x"
	CreateProjectNodeVersionTwelveDotX     CreateProjectNodeVersion = "12.x"
	CreateProjectNodeVersionTenDotX        CreateProjectNodeVersion = "10.x"
	CreateProjectNodeVersionEightDot10DotX CreateProjectNodeVersion = "8.10.x"
)

func (e CreateProjectNodeVersion) ToPointer() *CreateProjectNodeVersion {
	return &e
}
func (e *CreateProjectNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = CreateProjectNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectNodeVersion: %v", v)
	}
}

type CreateProjectPath struct {
	Value string `json:"value"`
}

func (o *CreateProjectPath) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type CreateProjectOptionsAllowlist struct {
	Paths []CreateProjectPath `json:"paths"`
}

func (o *CreateProjectOptionsAllowlist) GetPaths() []CreateProjectPath {
	if o == nil {
		return []CreateProjectPath{}
	}
	return o.Paths
}

type CreateProjectPasswordProtection struct {
}

type CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse string

const (
	CreateProjectResourceConfigFunctionDefaultMemoryTypeResponseStandardLegacy CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse = "standard_legacy"
	CreateProjectResourceConfigFunctionDefaultMemoryTypeResponseStandard       CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse = "standard"
	CreateProjectResourceConfigFunctionDefaultMemoryTypeResponsePerformance    CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse = "performance"
)

func (e CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse) ToPointer() *CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse {
	return &e
}
func (e *CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse: %v", v)
	}
}

type CreateProjectResourceConfigBuildMachineTypeResponse string

const (
	CreateProjectResourceConfigBuildMachineTypeResponseEnhanced CreateProjectResourceConfigBuildMachineTypeResponse = "enhanced"
	CreateProjectResourceConfigBuildMachineTypeResponseTurbo    CreateProjectResourceConfigBuildMachineTypeResponse = "turbo"
)

func (e CreateProjectResourceConfigBuildMachineTypeResponse) ToPointer() *CreateProjectResourceConfigBuildMachineTypeResponse {
	return &e
}
func (e *CreateProjectResourceConfigBuildMachineTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = CreateProjectResourceConfigBuildMachineTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectResourceConfigBuildMachineTypeResponse: %v", v)
	}
}

type CreateProjectResourceConfigResponse struct {
	Fluid                      *bool                                                         `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                      `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                      `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                         `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                         `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *CreateProjectResourceConfigBuildMachineTypeResponse          `json:"buildMachineType,omitempty"`
}

func (o *CreateProjectResourceConfigResponse) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *CreateProjectResourceConfigResponse) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *CreateProjectResourceConfigResponse) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *CreateProjectResourceConfigResponse) GetFunctionDefaultMemoryType() *CreateProjectResourceConfigFunctionDefaultMemoryTypeResponse {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *CreateProjectResourceConfigResponse) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *CreateProjectResourceConfigResponse) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *CreateProjectResourceConfigResponse) GetBuildMachineType() *CreateProjectResourceConfigBuildMachineTypeResponse {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

// CreateProjectRollbackDescription - Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
type CreateProjectRollbackDescription struct {
	// The user who rolled back the project.
	UserID string `json:"userId"`
	// The username of the user who rolled back the project.
	Username string `json:"username"`
	// User-supplied explanation of why they rolled back the project. Limited to 250 characters.
	Description string `json:"description"`
	// Timestamp of when the rollback was requested.
	CreatedAt float64 `json:"createdAt"`
}

func (o *CreateProjectRollbackDescription) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProjectRollbackDescription) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *CreateProjectRollbackDescription) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *CreateProjectRollbackDescription) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// CreateProjectStage - An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
type CreateProjectStage struct {
	// The percentage of traffic to serve to the new deployment
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires approval to proceed.
	RequireApproval *bool `json:"requireApproval,omitempty"`
	// duration is the total time to serve a stage, at the given targetPercentage.
	Duration *float64 `json:"duration,omitempty"`
}

func (o *CreateProjectStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *CreateProjectStage) GetRequireApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireApproval
}

func (o *CreateProjectStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

type CreateProjectRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
	Stages []CreateProjectStage `json:"stages,omitempty"`
	// Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
	CanaryResponseHeader *bool `json:"canaryResponseHeader,omitempty"`
}

func (o *CreateProjectRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *CreateProjectRollingRelease) GetStages() []CreateProjectStage {
	if o == nil {
		return nil
	}
	return o.Stages
}

func (o *CreateProjectRollingRelease) GetCanaryResponseHeader() *bool {
	if o == nil {
		return nil
	}
	return o.CanaryResponseHeader
}

type CreateProjectDefaultResourceConfigFunctionDefaultMemoryType string

const (
	CreateProjectDefaultResourceConfigFunctionDefaultMemoryTypeStandardLegacy CreateProjectDefaultResourceConfigFunctionDefaultMemoryType = "standard_legacy"
	CreateProjectDefaultResourceConfigFunctionDefaultMemoryTypeStandard       CreateProjectDefaultResourceConfigFunctionDefaultMemoryType = "standard"
	CreateProjectDefaultResourceConfigFunctionDefaultMemoryTypePerformance    CreateProjectDefaultResourceConfigFunctionDefaultMemoryType = "performance"
)

func (e CreateProjectDefaultResourceConfigFunctionDefaultMemoryType) ToPointer() *CreateProjectDefaultResourceConfigFunctionDefaultMemoryType {
	return &e
}
func (e *CreateProjectDefaultResourceConfigFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = CreateProjectDefaultResourceConfigFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectDefaultResourceConfigFunctionDefaultMemoryType: %v", v)
	}
}

type CreateProjectDefaultResourceConfigBuildMachineType string

const (
	CreateProjectDefaultResourceConfigBuildMachineTypeEnhanced CreateProjectDefaultResourceConfigBuildMachineType = "enhanced"
	CreateProjectDefaultResourceConfigBuildMachineTypeTurbo    CreateProjectDefaultResourceConfigBuildMachineType = "turbo"
)

func (e CreateProjectDefaultResourceConfigBuildMachineType) ToPointer() *CreateProjectDefaultResourceConfigBuildMachineType {
	return &e
}
func (e *CreateProjectDefaultResourceConfigBuildMachineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = CreateProjectDefaultResourceConfigBuildMachineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectDefaultResourceConfigBuildMachineType: %v", v)
	}
}

type CreateProjectDefaultResourceConfig struct {
	Fluid                      *bool                                                        `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                     `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                     `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *CreateProjectDefaultResourceConfigFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                        `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                        `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *CreateProjectDefaultResourceConfigBuildMachineType          `json:"buildMachineType,omitempty"`
}

func (o *CreateProjectDefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionDefaultMemoryType() *CreateProjectDefaultResourceConfigFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *CreateProjectDefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *CreateProjectDefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *CreateProjectDefaultResourceConfig) GetBuildMachineType() *CreateProjectDefaultResourceConfigBuildMachineType {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

type CreateProjectSsoProtectionDeploymentType string

const (
	CreateProjectSsoProtectionDeploymentTypePreview                          CreateProjectSsoProtectionDeploymentType = "preview"
	CreateProjectSsoProtectionDeploymentTypeAll                              CreateProjectSsoProtectionDeploymentType = "all"
	CreateProjectSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews CreateProjectSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectSsoProtectionDeploymentType) ToPointer() *CreateProjectSsoProtectionDeploymentType {
	return &e
}
func (e *CreateProjectSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectSsoProtectionDeploymentType: %v", v)
	}
}

type CreateProjectSsoProtection struct {
	DeploymentType CreateProjectSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *CreateProjectSsoProtection) GetDeploymentType() CreateProjectSsoProtectionDeploymentType {
	if o == nil {
		return CreateProjectSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type CreateProjectAliasAssignedType string

const (
	CreateProjectAliasAssignedTypeNumber  CreateProjectAliasAssignedType = "number"
	CreateProjectAliasAssignedTypeBoolean CreateProjectAliasAssignedType = "boolean"
)

type CreateProjectAliasAssigned struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type CreateProjectAliasAssignedType
}

func CreateCreateProjectAliasAssignedNumber(number float64) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeNumber

	return CreateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateCreateProjectAliasAssignedBoolean(boolean bool) CreateProjectAliasAssigned {
	typ := CreateProjectAliasAssignedTypeBoolean

	return CreateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *CreateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = CreateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = CreateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectAliasAssigned", string(data))
}

func (u CreateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectAliasAssigned: all fields are null")
}

type CreateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *CreateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// CreateProjectBranchMatcherTypeLambdas - The type of matching to perform
type CreateProjectBranchMatcherTypeLambdas string

const (
	CreateProjectBranchMatcherTypeLambdasEndsWith   CreateProjectBranchMatcherTypeLambdas = "endsWith"
	CreateProjectBranchMatcherTypeLambdasStartsWith CreateProjectBranchMatcherTypeLambdas = "startsWith"
	CreateProjectBranchMatcherTypeLambdasEquals     CreateProjectBranchMatcherTypeLambdas = "equals"
)

func (e CreateProjectBranchMatcherTypeLambdas) ToPointer() *CreateProjectBranchMatcherTypeLambdas {
	return &e
}
func (e *CreateProjectBranchMatcherTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = CreateProjectBranchMatcherTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectBranchMatcherTypeLambdas: %v", v)
	}
}

type CreateProjectBranchMatcherLambdas struct {
	// The type of matching to perform
	Type CreateProjectBranchMatcherTypeLambdas `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *CreateProjectBranchMatcherLambdas) GetType() CreateProjectBranchMatcherTypeLambdas {
	if o == nil {
		return CreateProjectBranchMatcherTypeLambdas("")
	}
	return o.Type
}

func (o *CreateProjectBranchMatcherLambdas) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type CreateProjectBuild struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *CreateProjectBuild) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *CreateProjectBuild) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectBuild) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type CreateProjectChecksConclusion string

const (
	CreateProjectChecksConclusionSucceeded CreateProjectChecksConclusion = "succeeded"
	CreateProjectChecksConclusionFailed    CreateProjectChecksConclusion = "failed"
	CreateProjectChecksConclusionSkipped   CreateProjectChecksConclusion = "skipped"
	CreateProjectChecksConclusionCanceled  CreateProjectChecksConclusion = "canceled"
)

func (e CreateProjectChecksConclusion) ToPointer() *CreateProjectChecksConclusion {
	return &e
}
func (e *CreateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = CreateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksConclusion: %v", v)
	}
}

type CreateProjectChecksState string

const (
	CreateProjectChecksStateRegistered CreateProjectChecksState = "registered"
	CreateProjectChecksStateRunning    CreateProjectChecksState = "running"
	CreateProjectChecksStateCompleted  CreateProjectChecksState = "completed"
)

func (e CreateProjectChecksState) ToPointer() *CreateProjectChecksState {
	return &e
}
func (e *CreateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = CreateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectChecksState: %v", v)
	}
}

type CreateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *CreateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *CreateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *CreateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *CreateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type CreateProjectOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *CreateProjectOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *CreateProjectOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *CreateProjectOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *CreateProjectOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *CreateProjectOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *CreateProjectOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateProjectOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *CreateProjectOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *CreateProjectOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type CreateProjectPlan string

const (
	CreateProjectPlanPro        CreateProjectPlan = "pro"
	CreateProjectPlanEnterprise CreateProjectPlan = "enterprise"
	CreateProjectPlanHobby      CreateProjectPlan = "hobby"
)

func (e CreateProjectPlan) ToPointer() *CreateProjectPlan {
	return &e
}
func (e *CreateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = CreateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectPlan: %v", v)
	}
}

type CreateProjectReadyState string

const (
	CreateProjectReadyStateBuilding     CreateProjectReadyState = "BUILDING"
	CreateProjectReadyStateError        CreateProjectReadyState = "ERROR"
	CreateProjectReadyStateInitializing CreateProjectReadyState = "INITIALIZING"
	CreateProjectReadyStateQueued       CreateProjectReadyState = "QUEUED"
	CreateProjectReadyStateReady        CreateProjectReadyState = "READY"
	CreateProjectReadyStateCanceled     CreateProjectReadyState = "CANCELED"
)

func (e CreateProjectReadyState) ToPointer() *CreateProjectReadyState {
	return &e
}
func (e *CreateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = CreateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadyState: %v", v)
	}
}

type CreateProjectReadySubstate string

const (
	CreateProjectReadySubstateStaged   CreateProjectReadySubstate = "STAGED"
	CreateProjectReadySubstateRolling  CreateProjectReadySubstate = "ROLLING"
	CreateProjectReadySubstatePromoted CreateProjectReadySubstate = "PROMOTED"
)

func (e CreateProjectReadySubstate) ToPointer() *CreateProjectReadySubstate {
	return &e
}
func (e *CreateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = CreateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectReadySubstate: %v", v)
	}
}

type CreateProjectTypeLambdas string

const (
	CreateProjectTypeLambdasLambdas CreateProjectTypeLambdas = "LAMBDAS"
)

func (e CreateProjectTypeLambdas) ToPointer() *CreateProjectTypeLambdas {
	return &e
}
func (e *CreateProjectTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = CreateProjectTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTypeLambdas: %v", v)
	}
}

type CreateProjectTargets struct {
	ID                     string                             `json:"id"`
	Alias                  []string                           `json:"alias,omitempty"`
	AliasAssigned          *CreateProjectAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *CreateProjectAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                            `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                           `json:"automaticAliases,omitempty"`
	BranchMatcher          *CreateProjectBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                           `json:"buildingAt,omitempty"`
	Builds                 []CreateProjectBuild               `json:"builds,omitempty"`
	ChecksConclusion       *CreateProjectChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *CreateProjectChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                              `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                            `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                            `json:"createdAt"`
	CreatedIn              string                             `json:"createdIn"`
	Creator                *CreateProjectCreator              `json:"creator"`
	DeletedAt              *float64                           `json:"deletedAt,omitempty"`
	DeploymentHostname     string                             `json:"deploymentHostname"`
	Forced                 *bool                              `json:"forced,omitempty"`
	Name                   string                             `json:"name"`
	Meta                   map[string]string                  `json:"meta,omitempty"`
	MonorepoManager        *string                            `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *CreateProjectOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   CreateProjectPlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                       `json:"previewCommentsEnabled,omitempty"`
	Private                bool                        `json:"private"`
	ReadyAt                *float64                    `json:"readyAt,omitempty"`
	ReadyState             CreateProjectReadyState     `json:"readyState"`
	ReadySubstate          *CreateProjectReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                    `json:"requestedAt,omitempty"`
	Target                 *string                     `json:"target,omitempty"`
	TeamID                 *string                     `json:"teamId,omitempty"`
	Type                   CreateProjectTypeLambdas    `json:"type"`
	URL                    string                      `json:"url"`
	UserID                 string                      `json:"userId"`
	WithCache              *bool                       `json:"withCache,omitempty"`
}

func (o *CreateProjectTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *CreateProjectTargets) GetAliasAssigned() *CreateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *CreateProjectTargets) GetAliasError() *CreateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *CreateProjectTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *CreateProjectTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *CreateProjectTargets) GetBranchMatcher() *CreateProjectBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *CreateProjectTargets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *CreateProjectTargets) GetBuilds() []CreateProjectBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *CreateProjectTargets) GetChecksConclusion() *CreateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *CreateProjectTargets) GetChecksState() *CreateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *CreateProjectTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectTargets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *CreateProjectTargets) GetCreator() *CreateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *CreateProjectTargets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *CreateProjectTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *CreateProjectTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *CreateProjectTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *CreateProjectTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *CreateProjectTargets) GetOidcTokenClaims() *CreateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *CreateProjectTargets) GetPlan() CreateProjectPlan {
	if o == nil {
		return CreateProjectPlan("")
	}
	return o.Plan
}

func (o *CreateProjectTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *CreateProjectTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *CreateProjectTargets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *CreateProjectTargets) GetReadyState() CreateProjectReadyState {
	if o == nil {
		return CreateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *CreateProjectTargets) GetReadySubstate() *CreateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *CreateProjectTargets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *CreateProjectTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectTargets) GetType() CreateProjectTypeLambdas {
	if o == nil {
		return CreateProjectTypeLambdas("")
	}
	return o.Type
}

func (o *CreateProjectTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateProjectTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *CreateProjectTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type CreateProjectPermissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	ObservabilityNotebook                    []components.ACLAction `json:"observabilityNotebook,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	VercelAppInstallation                    []components.ACLAction `json:"vercelAppInstallation,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMemberMfaStatus                      []components.ACLAction `json:"teamMemberMfaStatus,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	VercelRun                                []components.ACLAction `json:"vercelRun,omitempty"`
	VercelRunExec                            []components.ACLAction `json:"vercelRunExec,omitempty"`
	APIKey                                   []components.ACLAction `json:"apiKey,omitempty"`
	APIKeyOwnedBySelf                        []components.ACLAction `json:"apiKeyOwnedBySelf,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	BuildMachine                             []components.ACLAction `json:"buildMachine,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	EdgeCacheNamespace                       []components.ACLAction `json:"edgeCacheNamespace,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	OnDemandBuild                            []components.ACLAction `json:"onDemandBuild,omitempty"`
	OnDemandConcurrency                      []components.ACLAction `json:"onDemandConcurrency,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectCheck                             []components.ACLAction `json:"projectCheck,omitempty"`
	ProjectCheckRun                          []components.ACLAction `json:"projectCheckRun,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *CreateProjectPermissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *CreateProjectPermissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *CreateProjectPermissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *CreateProjectPermissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *CreateProjectPermissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *CreateProjectPermissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *CreateProjectPermissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *CreateProjectPermissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *CreateProjectPermissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *CreateProjectPermissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *CreateProjectPermissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *CreateProjectPermissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *CreateProjectPermissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *CreateProjectPermissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *CreateProjectPermissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *CreateProjectPermissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *CreateProjectPermissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *CreateProjectPermissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *CreateProjectPermissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *CreateProjectPermissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *CreateProjectPermissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *CreateProjectPermissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *CreateProjectPermissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *CreateProjectPermissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *CreateProjectPermissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *CreateProjectPermissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *CreateProjectPermissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *CreateProjectPermissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *CreateProjectPermissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *CreateProjectPermissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *CreateProjectPermissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *CreateProjectPermissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *CreateProjectPermissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *CreateProjectPermissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *CreateProjectPermissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *CreateProjectPermissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *CreateProjectPermissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *CreateProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *CreateProjectPermissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *CreateProjectPermissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *CreateProjectPermissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *CreateProjectPermissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *CreateProjectPermissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *CreateProjectPermissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *CreateProjectPermissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *CreateProjectPermissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *CreateProjectPermissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *CreateProjectPermissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *CreateProjectPermissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *CreateProjectPermissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *CreateProjectPermissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *CreateProjectPermissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *CreateProjectPermissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *CreateProjectPermissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *CreateProjectPermissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *CreateProjectPermissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *CreateProjectPermissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *CreateProjectPermissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *CreateProjectPermissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *CreateProjectPermissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *CreateProjectPermissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *CreateProjectPermissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *CreateProjectPermissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *CreateProjectPermissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *CreateProjectPermissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *CreateProjectPermissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *CreateProjectPermissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *CreateProjectPermissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *CreateProjectPermissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *CreateProjectPermissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *CreateProjectPermissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *CreateProjectPermissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *CreateProjectPermissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *CreateProjectPermissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *CreateProjectPermissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *CreateProjectPermissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *CreateProjectPermissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *CreateProjectPermissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *CreateProjectPermissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *CreateProjectPermissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *CreateProjectPermissions) GetObservabilityNotebook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityNotebook
}

func (o *CreateProjectPermissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *CreateProjectPermissions) GetVercelAppInstallation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelAppInstallation
}

func (o *CreateProjectPermissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *CreateProjectPermissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectPermissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *CreateProjectPermissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *CreateProjectPermissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *CreateProjectPermissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *CreateProjectPermissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *CreateProjectPermissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *CreateProjectPermissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *CreateProjectPermissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *CreateProjectPermissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *CreateProjectPermissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *CreateProjectPermissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *CreateProjectPermissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *CreateProjectPermissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *CreateProjectPermissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *CreateProjectPermissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *CreateProjectPermissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *CreateProjectPermissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *CreateProjectPermissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *CreateProjectPermissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *CreateProjectPermissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *CreateProjectPermissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *CreateProjectPermissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *CreateProjectPermissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *CreateProjectPermissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *CreateProjectPermissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *CreateProjectPermissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *CreateProjectPermissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *CreateProjectPermissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *CreateProjectPermissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *CreateProjectPermissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *CreateProjectPermissions) GetTeamMemberMfaStatus() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMemberMfaStatus
}

func (o *CreateProjectPermissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *CreateProjectPermissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *CreateProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *CreateProjectPermissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *CreateProjectPermissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *CreateProjectPermissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *CreateProjectPermissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *CreateProjectPermissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *CreateProjectPermissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *CreateProjectPermissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *CreateProjectPermissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *CreateProjectPermissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *CreateProjectPermissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *CreateProjectPermissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *CreateProjectPermissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *CreateProjectPermissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *CreateProjectPermissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *CreateProjectPermissions) GetVercelRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRun
}

func (o *CreateProjectPermissions) GetVercelRunExec() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRunExec
}

func (o *CreateProjectPermissions) GetAPIKey() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *CreateProjectPermissions) GetAPIKeyOwnedBySelf() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKeyOwnedBySelf
}

func (o *CreateProjectPermissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *CreateProjectPermissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *CreateProjectPermissions) GetBuildMachine() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

func (o *CreateProjectPermissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *CreateProjectPermissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *CreateProjectPermissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *CreateProjectPermissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *CreateProjectPermissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *CreateProjectPermissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *CreateProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *CreateProjectPermissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *CreateProjectPermissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *CreateProjectPermissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *CreateProjectPermissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *CreateProjectPermissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *CreateProjectPermissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *CreateProjectPermissions) GetEdgeCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeCacheNamespace
}

func (o *CreateProjectPermissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *CreateProjectPermissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *CreateProjectPermissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *CreateProjectPermissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectPermissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectPermissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *CreateProjectPermissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *CreateProjectPermissions) GetOnDemandBuild() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandBuild
}

func (o *CreateProjectPermissions) GetOnDemandConcurrency() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandConcurrency
}

func (o *CreateProjectPermissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *CreateProjectPermissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *CreateProjectPermissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *CreateProjectPermissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *CreateProjectPermissions) GetProjectCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheck
}

func (o *CreateProjectPermissions) GetProjectCheckRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheckRun
}

func (o *CreateProjectPermissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *CreateProjectPermissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *CreateProjectPermissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *CreateProjectPermissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *CreateProjectPermissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *CreateProjectPermissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *CreateProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *CreateProjectPermissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *CreateProjectPermissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateProjectPermissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *CreateProjectPermissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *CreateProjectPermissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *CreateProjectPermissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *CreateProjectPermissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *CreateProjectPermissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *CreateProjectPermissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *CreateProjectPermissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *CreateProjectPermissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *CreateProjectPermissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *CreateProjectPermissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *CreateProjectPermissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *CreateProjectPermissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *CreateProjectPermissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *CreateProjectPermissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *CreateProjectPermissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *CreateProjectPermissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *CreateProjectPermissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *CreateProjectPermissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectPermissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectPermissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProjectPermissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *CreateProjectPermissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type CreateProjectLastRollbackTarget struct {
}

type CreateProjectJobStatus string

const (
	CreateProjectJobStatusSucceeded  CreateProjectJobStatus = "succeeded"
	CreateProjectJobStatusFailed     CreateProjectJobStatus = "failed"
	CreateProjectJobStatusSkipped    CreateProjectJobStatus = "skipped"
	CreateProjectJobStatusPending    CreateProjectJobStatus = "pending"
	CreateProjectJobStatusInProgress CreateProjectJobStatus = "in-progress"
)

func (e CreateProjectJobStatus) ToPointer() *CreateProjectJobStatus {
	return &e
}
func (e *CreateProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = CreateProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectJobStatus: %v", v)
	}
}

type CreateProjectLastAliasRequestType string

const (
	CreateProjectLastAliasRequestTypePromote  CreateProjectLastAliasRequestType = "promote"
	CreateProjectLastAliasRequestTypeRollback CreateProjectLastAliasRequestType = "rollback"
)

func (e CreateProjectLastAliasRequestType) ToPointer() *CreateProjectLastAliasRequestType {
	return &e
}
func (e *CreateProjectLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = CreateProjectLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectLastAliasRequestType: %v", v)
	}
}

type CreateProjectLastAliasRequest struct {
	FromDeploymentID string `json:"fromDeploymentId"`
	ToDeploymentID   string `json:"toDeploymentId"`
	// If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
	FromRollingReleaseID *string                           `json:"fromRollingReleaseId,omitempty"`
	JobStatus            CreateProjectJobStatus            `json:"jobStatus"`
	RequestedAt          float64                           `json:"requestedAt"`
	Type                 CreateProjectLastAliasRequestType `json:"type"`
}

func (o *CreateProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *CreateProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *CreateProjectLastAliasRequest) GetFromRollingReleaseID() *string {
	if o == nil {
		return nil
	}
	return o.FromRollingReleaseID
}

func (o *CreateProjectLastAliasRequest) GetJobStatus() CreateProjectJobStatus {
	if o == nil {
		return CreateProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *CreateProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *CreateProjectLastAliasRequest) GetType() CreateProjectLastAliasRequestType {
	if o == nil {
		return CreateProjectLastAliasRequestType("")
	}
	return o.Type
}

type CreateProjectScopeAutomationBypass string

const (
	CreateProjectScopeAutomationBypassAutomationBypass CreateProjectScopeAutomationBypass = "automation-bypass"
)

func (e CreateProjectScopeAutomationBypass) ToPointer() *CreateProjectScopeAutomationBypass {
	return &e
}
func (e *CreateProjectScopeAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = CreateProjectScopeAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectScopeAutomationBypass: %v", v)
	}
}

type CreateProjectProtectionBypassAutomationBypass struct {
	CreatedAt float64                            `json:"createdAt"`
	CreatedBy string                             `json:"createdBy"`
	Scope     CreateProjectScopeAutomationBypass `json:"scope"`
}

func (o *CreateProjectProtectionBypassAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectProtectionBypassAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *CreateProjectProtectionBypassAutomationBypass) GetScope() CreateProjectScopeAutomationBypass {
	if o == nil {
		return CreateProjectScopeAutomationBypass("")
	}
	return o.Scope
}

type CreateProjectScopeIntegrationAutomationBypass string

const (
	CreateProjectScopeIntegrationAutomationBypassIntegrationAutomationBypass CreateProjectScopeIntegrationAutomationBypass = "integration-automation-bypass"
)

func (e CreateProjectScopeIntegrationAutomationBypass) ToPointer() *CreateProjectScopeIntegrationAutomationBypass {
	return &e
}
func (e *CreateProjectScopeIntegrationAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-automation-bypass":
		*e = CreateProjectScopeIntegrationAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectScopeIntegrationAutomationBypass: %v", v)
	}
}

type CreateProjectProtectionBypassIntegrationAutomationBypass struct {
	CreatedAt       float64                                       `json:"createdAt"`
	CreatedBy       string                                        `json:"createdBy"`
	Scope           CreateProjectScopeIntegrationAutomationBypass `json:"scope"`
	IntegrationID   string                                        `json:"integrationId"`
	ConfigurationID string                                        `json:"configurationId"`
}

func (o *CreateProjectProtectionBypassIntegrationAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateProjectProtectionBypassIntegrationAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *CreateProjectProtectionBypassIntegrationAutomationBypass) GetScope() CreateProjectScopeIntegrationAutomationBypass {
	if o == nil {
		return CreateProjectScopeIntegrationAutomationBypass("")
	}
	return o.Scope
}

func (o *CreateProjectProtectionBypassIntegrationAutomationBypass) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateProjectProtectionBypassIntegrationAutomationBypass) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

type CreateProjectProtectionBypassUnionType string

const (
	CreateProjectProtectionBypassUnionTypeCreateProjectProtectionBypassIntegrationAutomationBypass CreateProjectProtectionBypassUnionType = "createProject_protectionBypass_IntegrationAutomationBypass"
	CreateProjectProtectionBypassUnionTypeCreateProjectProtectionBypassAutomationBypass            CreateProjectProtectionBypassUnionType = "createProject_protectionBypass_AutomationBypass"
)

type CreateProjectProtectionBypassUnion struct {
	CreateProjectProtectionBypassIntegrationAutomationBypass *CreateProjectProtectionBypassIntegrationAutomationBypass `queryParam:"inline"`
	CreateProjectProtectionBypassAutomationBypass            *CreateProjectProtectionBypassAutomationBypass            `queryParam:"inline"`

	Type CreateProjectProtectionBypassUnionType
}

func CreateCreateProjectProtectionBypassUnionCreateProjectProtectionBypassIntegrationAutomationBypass(createProjectProtectionBypassIntegrationAutomationBypass CreateProjectProtectionBypassIntegrationAutomationBypass) CreateProjectProtectionBypassUnion {
	typ := CreateProjectProtectionBypassUnionTypeCreateProjectProtectionBypassIntegrationAutomationBypass

	return CreateProjectProtectionBypassUnion{
		CreateProjectProtectionBypassIntegrationAutomationBypass: &createProjectProtectionBypassIntegrationAutomationBypass,
		Type: typ,
	}
}

func CreateCreateProjectProtectionBypassUnionCreateProjectProtectionBypassAutomationBypass(createProjectProtectionBypassAutomationBypass CreateProjectProtectionBypassAutomationBypass) CreateProjectProtectionBypassUnion {
	typ := CreateProjectProtectionBypassUnionTypeCreateProjectProtectionBypassAutomationBypass

	return CreateProjectProtectionBypassUnion{
		CreateProjectProtectionBypassAutomationBypass: &createProjectProtectionBypassAutomationBypass,
		Type: typ,
	}
}

func (u *CreateProjectProtectionBypassUnion) UnmarshalJSON(data []byte) error {

	var createProjectProtectionBypassAutomationBypass CreateProjectProtectionBypassAutomationBypass = CreateProjectProtectionBypassAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &createProjectProtectionBypassAutomationBypass, "", true, true); err == nil {
		u.CreateProjectProtectionBypassAutomationBypass = &createProjectProtectionBypassAutomationBypass
		u.Type = CreateProjectProtectionBypassUnionTypeCreateProjectProtectionBypassAutomationBypass
		return nil
	}

	var createProjectProtectionBypassIntegrationAutomationBypass CreateProjectProtectionBypassIntegrationAutomationBypass = CreateProjectProtectionBypassIntegrationAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &createProjectProtectionBypassIntegrationAutomationBypass, "", true, true); err == nil {
		u.CreateProjectProtectionBypassIntegrationAutomationBypass = &createProjectProtectionBypassIntegrationAutomationBypass
		u.Type = CreateProjectProtectionBypassUnionTypeCreateProjectProtectionBypassIntegrationAutomationBypass
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectProtectionBypassUnion", string(data))
}

func (u CreateProjectProtectionBypassUnion) MarshalJSON() ([]byte, error) {
	if u.CreateProjectProtectionBypassIntegrationAutomationBypass != nil {
		return utils.MarshalJSON(u.CreateProjectProtectionBypassIntegrationAutomationBypass, "", true)
	}

	if u.CreateProjectProtectionBypassAutomationBypass != nil {
		return utils.MarshalJSON(u.CreateProjectProtectionBypassAutomationBypass, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectProtectionBypassUnion: all fields are null")
}

type CreateProjectTrustedIpsDeploymentType2 string

const (
	CreateProjectTrustedIpsDeploymentType2Production                       CreateProjectTrustedIpsDeploymentType2 = "production"
	CreateProjectTrustedIpsDeploymentType2Preview                          CreateProjectTrustedIpsDeploymentType2 = "preview"
	CreateProjectTrustedIpsDeploymentType2All                              CreateProjectTrustedIpsDeploymentType2 = "all"
	CreateProjectTrustedIpsDeploymentType2ProdDeploymentUrlsAndAllPreviews CreateProjectTrustedIpsDeploymentType2 = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectTrustedIpsDeploymentType2) ToPointer() *CreateProjectTrustedIpsDeploymentType2 {
	return &e
}
func (e *CreateProjectTrustedIpsDeploymentType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectTrustedIpsDeploymentType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTrustedIpsDeploymentType2: %v", v)
	}
}

type CreateProjectTrustedIps2 struct {
	DeploymentType CreateProjectTrustedIpsDeploymentType2 `json:"deploymentType"`
}

func (o *CreateProjectTrustedIps2) GetDeploymentType() CreateProjectTrustedIpsDeploymentType2 {
	if o == nil {
		return CreateProjectTrustedIpsDeploymentType2("")
	}
	return o.DeploymentType
}

type CreateProjectTrustedIpsDeploymentType1 string

const (
	CreateProjectTrustedIpsDeploymentType1Production                       CreateProjectTrustedIpsDeploymentType1 = "production"
	CreateProjectTrustedIpsDeploymentType1Preview                          CreateProjectTrustedIpsDeploymentType1 = "preview"
	CreateProjectTrustedIpsDeploymentType1All                              CreateProjectTrustedIpsDeploymentType1 = "all"
	CreateProjectTrustedIpsDeploymentType1ProdDeploymentUrlsAndAllPreviews CreateProjectTrustedIpsDeploymentType1 = "prod_deployment_urls_and_all_previews"
)

func (e CreateProjectTrustedIpsDeploymentType1) ToPointer() *CreateProjectTrustedIpsDeploymentType1 {
	return &e
}
func (e *CreateProjectTrustedIpsDeploymentType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = CreateProjectTrustedIpsDeploymentType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTrustedIpsDeploymentType1: %v", v)
	}
}

type CreateProjectAddress struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *CreateProjectAddress) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectAddress) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type CreateProjectProtectionMode string

const (
	CreateProjectProtectionModeAdditional CreateProjectProtectionMode = "additional"
	CreateProjectProtectionModeExclusive  CreateProjectProtectionMode = "exclusive"
)

func (e CreateProjectProtectionMode) ToPointer() *CreateProjectProtectionMode {
	return &e
}
func (e *CreateProjectProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = CreateProjectProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectProtectionMode: %v", v)
	}
}

type CreateProjectTrustedIps1 struct {
	DeploymentType CreateProjectTrustedIpsDeploymentType1 `json:"deploymentType"`
	Addresses      []CreateProjectAddress                 `json:"addresses"`
	ProtectionMode CreateProjectProtectionMode            `json:"protectionMode"`
}

func (o *CreateProjectTrustedIps1) GetDeploymentType() CreateProjectTrustedIpsDeploymentType1 {
	if o == nil {
		return CreateProjectTrustedIpsDeploymentType1("")
	}
	return o.DeploymentType
}

func (o *CreateProjectTrustedIps1) GetAddresses() []CreateProjectAddress {
	if o == nil {
		return []CreateProjectAddress{}
	}
	return o.Addresses
}

func (o *CreateProjectTrustedIps1) GetProtectionMode() CreateProjectProtectionMode {
	if o == nil {
		return CreateProjectProtectionMode("")
	}
	return o.ProtectionMode
}

type CreateProjectTrustedIpsUnionType string

const (
	CreateProjectTrustedIpsUnionTypeCreateProjectTrustedIps1 CreateProjectTrustedIpsUnionType = "createProject_trustedIps_1"
	CreateProjectTrustedIpsUnionTypeCreateProjectTrustedIps2 CreateProjectTrustedIpsUnionType = "createProject_trustedIps_2"
)

type CreateProjectTrustedIpsUnion struct {
	CreateProjectTrustedIps1 *CreateProjectTrustedIps1 `queryParam:"inline"`
	CreateProjectTrustedIps2 *CreateProjectTrustedIps2 `queryParam:"inline"`

	Type CreateProjectTrustedIpsUnionType
}

func CreateCreateProjectTrustedIpsUnionCreateProjectTrustedIps1(createProjectTrustedIps1 CreateProjectTrustedIps1) CreateProjectTrustedIpsUnion {
	typ := CreateProjectTrustedIpsUnionTypeCreateProjectTrustedIps1

	return CreateProjectTrustedIpsUnion{
		CreateProjectTrustedIps1: &createProjectTrustedIps1,
		Type:                     typ,
	}
}

func CreateCreateProjectTrustedIpsUnionCreateProjectTrustedIps2(createProjectTrustedIps2 CreateProjectTrustedIps2) CreateProjectTrustedIpsUnion {
	typ := CreateProjectTrustedIpsUnionTypeCreateProjectTrustedIps2

	return CreateProjectTrustedIpsUnion{
		CreateProjectTrustedIps2: &createProjectTrustedIps2,
		Type:                     typ,
	}
}

func (u *CreateProjectTrustedIpsUnion) UnmarshalJSON(data []byte) error {

	var createProjectTrustedIps2 CreateProjectTrustedIps2 = CreateProjectTrustedIps2{}
	if err := utils.UnmarshalJSON(data, &createProjectTrustedIps2, "", true, true); err == nil {
		u.CreateProjectTrustedIps2 = &createProjectTrustedIps2
		u.Type = CreateProjectTrustedIpsUnionTypeCreateProjectTrustedIps2
		return nil
	}

	var createProjectTrustedIps1 CreateProjectTrustedIps1 = CreateProjectTrustedIps1{}
	if err := utils.UnmarshalJSON(data, &createProjectTrustedIps1, "", true, true); err == nil {
		u.CreateProjectTrustedIps1 = &createProjectTrustedIps1
		u.Type = CreateProjectTrustedIpsUnionTypeCreateProjectTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectTrustedIpsUnion", string(data))
}

func (u CreateProjectTrustedIpsUnion) MarshalJSON() ([]byte, error) {
	if u.CreateProjectTrustedIps1 != nil {
		return utils.MarshalJSON(u.CreateProjectTrustedIps1, "", true)
	}

	if u.CreateProjectTrustedIps2 != nil {
		return utils.MarshalJSON(u.CreateProjectTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectTrustedIpsUnion: all fields are null")
}

type CreateProjectGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *CreateProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *CreateProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// CreateProjectCreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type CreateProjectCreateDeployments string

const (
	CreateProjectCreateDeploymentsEnabled  CreateProjectCreateDeployments = "enabled"
	CreateProjectCreateDeploymentsDisabled CreateProjectCreateDeployments = "disabled"
)

func (e CreateProjectCreateDeployments) ToPointer() *CreateProjectCreateDeployments {
	return &e
}
func (e *CreateProjectCreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = CreateProjectCreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectCreateDeployments: %v", v)
	}
}

type CreateProjectGitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments CreateProjectCreateDeployments `json:"createDeployments"`
}

func (o *CreateProjectGitProviderOptions) GetCreateDeployments() CreateProjectCreateDeployments {
	if o == nil {
		return CreateProjectCreateDeployments("")
	}
	return o.CreateDeployments
}

type CreateProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *CreateProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *CreateProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *CreateProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *CreateProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type CreateProjectSrc struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectSrc) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectSrc) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectSrc) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectSrc) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectSrc) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectSrc) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectSrc) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectSrc) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectSrc) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectSrc) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectSrc) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectSrcUnionType string

const (
	CreateProjectSrcUnionTypeStr              CreateProjectSrcUnionType = "str"
	CreateProjectSrcUnionTypeCreateProjectSrc CreateProjectSrcUnionType = "createProject_src"
)

type CreateProjectSrcUnion struct {
	Str              *string           `queryParam:"inline"`
	CreateProjectSrc *CreateProjectSrc `queryParam:"inline"`

	Type CreateProjectSrcUnionType
}

func CreateCreateProjectSrcUnionStr(str string) CreateProjectSrcUnion {
	typ := CreateProjectSrcUnionTypeStr

	return CreateProjectSrcUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectSrcUnionCreateProjectSrc(createProjectSrc CreateProjectSrc) CreateProjectSrcUnion {
	typ := CreateProjectSrcUnionTypeCreateProjectSrc

	return CreateProjectSrcUnion{
		CreateProjectSrc: &createProjectSrc,
		Type:             typ,
	}
}

func (u *CreateProjectSrcUnion) UnmarshalJSON(data []byte) error {

	var createProjectSrc CreateProjectSrc = CreateProjectSrc{}
	if err := utils.UnmarshalJSON(data, &createProjectSrc, "", true, true); err == nil {
		u.CreateProjectSrc = &createProjectSrc
		u.Type = CreateProjectSrcUnionTypeCreateProjectSrc
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectSrcUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectSrcUnion", string(data))
}

func (u CreateProjectSrcUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectSrc != nil {
		return utils.MarshalJSON(u.CreateProjectSrc, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectSrcUnion: all fields are null")
}

type CreateProjectHasType string

const (
	CreateProjectHasTypePath               CreateProjectHasType = "path"
	CreateProjectHasTypeHost               CreateProjectHasType = "host"
	CreateProjectHasTypeMethod             CreateProjectHasType = "method"
	CreateProjectHasTypeHeader             CreateProjectHasType = "header"
	CreateProjectHasTypeCookie             CreateProjectHasType = "cookie"
	CreateProjectHasTypeQuery              CreateProjectHasType = "query"
	CreateProjectHasTypeIPAddress          CreateProjectHasType = "ip_address"
	CreateProjectHasTypeProtocol           CreateProjectHasType = "protocol"
	CreateProjectHasTypeScheme             CreateProjectHasType = "scheme"
	CreateProjectHasTypeEnvironment        CreateProjectHasType = "environment"
	CreateProjectHasTypeRegion             CreateProjectHasType = "region"
	CreateProjectHasTypeInitialRequestPath CreateProjectHasType = "initial_request_path"
)

func (e CreateProjectHasType) ToPointer() *CreateProjectHasType {
	return &e
}
func (e *CreateProjectHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = CreateProjectHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectHasType: %v", v)
	}
}

type CreateProjectValueHas struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectValueHas) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectValueHas) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectValueHas) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectValueHas) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectValueHas) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectValueHas) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectValueHas) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectValueHas) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectValueHas) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectValueHas) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectValueHas) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectHasValueUnionType string

const (
	CreateProjectHasValueUnionTypeStr                   CreateProjectHasValueUnionType = "str"
	CreateProjectHasValueUnionTypeCreateProjectValueHas CreateProjectHasValueUnionType = "createProject_value_has"
)

type CreateProjectHasValueUnion struct {
	Str                   *string                `queryParam:"inline"`
	CreateProjectValueHas *CreateProjectValueHas `queryParam:"inline"`

	Type CreateProjectHasValueUnionType
}

func CreateCreateProjectHasValueUnionStr(str string) CreateProjectHasValueUnion {
	typ := CreateProjectHasValueUnionTypeStr

	return CreateProjectHasValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectHasValueUnionCreateProjectValueHas(createProjectValueHas CreateProjectValueHas) CreateProjectHasValueUnion {
	typ := CreateProjectHasValueUnionTypeCreateProjectValueHas

	return CreateProjectHasValueUnion{
		CreateProjectValueHas: &createProjectValueHas,
		Type:                  typ,
	}
}

func (u *CreateProjectHasValueUnion) UnmarshalJSON(data []byte) error {

	var createProjectValueHas CreateProjectValueHas = CreateProjectValueHas{}
	if err := utils.UnmarshalJSON(data, &createProjectValueHas, "", true, true); err == nil {
		u.CreateProjectValueHas = &createProjectValueHas
		u.Type = CreateProjectHasValueUnionTypeCreateProjectValueHas
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectHasValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectHasValueUnion", string(data))
}

func (u CreateProjectHasValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectValueHas != nil {
		return utils.MarshalJSON(u.CreateProjectValueHas, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectHasValueUnion: all fields are null")
}

type CreateProjectHas struct {
	Type  CreateProjectHasType        `json:"type"`
	Key   *string                     `json:"key,omitempty"`
	Value *CreateProjectHasValueUnion `json:"value,omitempty"`
}

func (o *CreateProjectHas) GetType() CreateProjectHasType {
	if o == nil {
		return CreateProjectHasType("")
	}
	return o.Type
}

func (o *CreateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectHas) GetValue() *CreateProjectHasValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectMissingType string

const (
	CreateProjectMissingTypePath               CreateProjectMissingType = "path"
	CreateProjectMissingTypeHost               CreateProjectMissingType = "host"
	CreateProjectMissingTypeMethod             CreateProjectMissingType = "method"
	CreateProjectMissingTypeHeader             CreateProjectMissingType = "header"
	CreateProjectMissingTypeCookie             CreateProjectMissingType = "cookie"
	CreateProjectMissingTypeQuery              CreateProjectMissingType = "query"
	CreateProjectMissingTypeIPAddress          CreateProjectMissingType = "ip_address"
	CreateProjectMissingTypeProtocol           CreateProjectMissingType = "protocol"
	CreateProjectMissingTypeScheme             CreateProjectMissingType = "scheme"
	CreateProjectMissingTypeEnvironment        CreateProjectMissingType = "environment"
	CreateProjectMissingTypeRegion             CreateProjectMissingType = "region"
	CreateProjectMissingTypeInitialRequestPath CreateProjectMissingType = "initial_request_path"
)

func (e CreateProjectMissingType) ToPointer() *CreateProjectMissingType {
	return &e
}
func (e *CreateProjectMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = CreateProjectMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectMissingType: %v", v)
	}
}

type CreateProjectValueMissing struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *CreateProjectValueMissing) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *CreateProjectValueMissing) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *CreateProjectValueMissing) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *CreateProjectValueMissing) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *CreateProjectValueMissing) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *CreateProjectValueMissing) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *CreateProjectValueMissing) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *CreateProjectValueMissing) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *CreateProjectValueMissing) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *CreateProjectValueMissing) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *CreateProjectValueMissing) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type CreateProjectMissingValueUnionType string

const (
	CreateProjectMissingValueUnionTypeStr                       CreateProjectMissingValueUnionType = "str"
	CreateProjectMissingValueUnionTypeCreateProjectValueMissing CreateProjectMissingValueUnionType = "createProject_value_missing"
)

type CreateProjectMissingValueUnion struct {
	Str                       *string                    `queryParam:"inline"`
	CreateProjectValueMissing *CreateProjectValueMissing `queryParam:"inline"`

	Type CreateProjectMissingValueUnionType
}

func CreateCreateProjectMissingValueUnionStr(str string) CreateProjectMissingValueUnion {
	typ := CreateProjectMissingValueUnionTypeStr

	return CreateProjectMissingValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectMissingValueUnionCreateProjectValueMissing(createProjectValueMissing CreateProjectValueMissing) CreateProjectMissingValueUnion {
	typ := CreateProjectMissingValueUnionTypeCreateProjectValueMissing

	return CreateProjectMissingValueUnion{
		CreateProjectValueMissing: &createProjectValueMissing,
		Type:                      typ,
	}
}

func (u *CreateProjectMissingValueUnion) UnmarshalJSON(data []byte) error {

	var createProjectValueMissing CreateProjectValueMissing = CreateProjectValueMissing{}
	if err := utils.UnmarshalJSON(data, &createProjectValueMissing, "", true, true); err == nil {
		u.CreateProjectValueMissing = &createProjectValueMissing
		u.Type = CreateProjectMissingValueUnionTypeCreateProjectValueMissing
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectMissingValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectMissingValueUnion", string(data))
}

func (u CreateProjectMissingValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.CreateProjectValueMissing != nil {
		return utils.MarshalJSON(u.CreateProjectValueMissing, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectMissingValueUnion: all fields are null")
}

type CreateProjectMissing struct {
	Type  CreateProjectMissingType        `json:"type"`
	Key   *string                         `json:"key,omitempty"`
	Value *CreateProjectMissingValueUnion `json:"value,omitempty"`
}

func (o *CreateProjectMissing) GetType() CreateProjectMissingType {
	if o == nil {
		return CreateProjectMissingType("")
	}
	return o.Type
}

func (o *CreateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectMissing) GetValue() *CreateProjectMissingValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type CreateProjectHandle string

const (
	CreateProjectHandleInit     CreateProjectHandle = "init"
	CreateProjectHandleFinalize CreateProjectHandle = "finalize"
)

func (e CreateProjectHandle) ToPointer() *CreateProjectHandle {
	return &e
}
func (e *CreateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = CreateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectHandle: %v", v)
	}
}

type CreateProjectFirewallRouteAction string

const (
	CreateProjectFirewallRouteActionDeny      CreateProjectFirewallRouteAction = "deny"
	CreateProjectFirewallRouteActionChallenge CreateProjectFirewallRouteAction = "challenge"
	CreateProjectFirewallRouteActionLog       CreateProjectFirewallRouteAction = "log"
	CreateProjectFirewallRouteActionBypass    CreateProjectFirewallRouteAction = "bypass"
	CreateProjectFirewallRouteActionRateLimit CreateProjectFirewallRouteAction = "rate_limit"
	CreateProjectFirewallRouteActionRedirect  CreateProjectFirewallRouteAction = "redirect"
)

func (e CreateProjectFirewallRouteAction) ToPointer() *CreateProjectFirewallRouteAction {
	return &e
}
func (e *CreateProjectFirewallRouteAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = CreateProjectFirewallRouteAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectFirewallRouteAction: %v", v)
	}
}

type CreateProjectAlgo string

const (
	CreateProjectAlgoFixedWindow CreateProjectAlgo = "fixed_window"
	CreateProjectAlgoTokenBucket CreateProjectAlgo = "token_bucket"
)

func (e CreateProjectAlgo) ToPointer() *CreateProjectAlgo {
	return &e
}
func (e *CreateProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = CreateProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectAlgo: %v", v)
	}
}

type CreateProjectErl struct {
	Algo   CreateProjectAlgo `json:"algo"`
	Window float64           `json:"window"`
	Limit  float64           `json:"limit"`
	Keys   []string          `json:"keys"`
}

func (o *CreateProjectErl) GetAlgo() CreateProjectAlgo {
	if o == nil {
		return CreateProjectAlgo("")
	}
	return o.Algo
}

func (o *CreateProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *CreateProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *CreateProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type CreateProjectMitigate struct {
	Action CreateProjectFirewallRouteAction `json:"action"`
	RuleID string                           `json:"rule_id"`
	TTL    *float64                         `json:"ttl,omitempty"`
	Erl    *CreateProjectErl                `json:"erl,omitempty"`
}

func (o *CreateProjectMitigate) GetAction() CreateProjectFirewallRouteAction {
	if o == nil {
		return CreateProjectFirewallRouteAction("")
	}
	return o.Action
}

func (o *CreateProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *CreateProjectMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateProjectMitigate) GetErl() *CreateProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type CreateProjectFirewallRoute struct {
	Src      *CreateProjectSrcUnion `json:"src,omitempty"`
	Has      []CreateProjectHas     `json:"has,omitempty"`
	Missing  []CreateProjectMissing `json:"missing,omitempty"`
	Dest     *string                `json:"dest,omitempty"`
	Status   *float64               `json:"status,omitempty"`
	Handle   *CreateProjectHandle   `json:"handle,omitempty"`
	Mitigate *CreateProjectMitigate `json:"mitigate,omitempty"`
}

func (o *CreateProjectFirewallRoute) GetSrc() *CreateProjectSrcUnion {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *CreateProjectFirewallRoute) GetHas() []CreateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *CreateProjectFirewallRoute) GetMissing() []CreateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *CreateProjectFirewallRoute) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *CreateProjectFirewallRoute) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *CreateProjectFirewallRoute) GetHandle() *CreateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *CreateProjectFirewallRoute) GetMitigate() *CreateProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type CreateProjectBotFilterAction string

const (
	CreateProjectBotFilterActionDeny      CreateProjectBotFilterAction = "deny"
	CreateProjectBotFilterActionChallenge CreateProjectBotFilterAction = "challenge"
	CreateProjectBotFilterActionLog       CreateProjectBotFilterAction = "log"
)

func (e CreateProjectBotFilterAction) ToPointer() *CreateProjectBotFilterAction {
	return &e
}
func (e *CreateProjectBotFilterAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = CreateProjectBotFilterAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectBotFilterAction: %v", v)
	}
}

type CreateProjectBotFilter struct {
	Active bool                          `json:"active"`
	Action *CreateProjectBotFilterAction `json:"action,omitempty"`
}

func (o *CreateProjectBotFilter) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateProjectBotFilter) GetAction() *CreateProjectBotFilterAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type CreateProjectAiBotsAction string

const (
	CreateProjectAiBotsActionDeny      CreateProjectAiBotsAction = "deny"
	CreateProjectAiBotsActionChallenge CreateProjectAiBotsAction = "challenge"
	CreateProjectAiBotsActionLog       CreateProjectAiBotsAction = "log"
)

func (e CreateProjectAiBotsAction) ToPointer() *CreateProjectAiBotsAction {
	return &e
}
func (e *CreateProjectAiBotsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = CreateProjectAiBotsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectAiBotsAction: %v", v)
	}
}

type CreateProjectAiBots struct {
	Active bool                       `json:"active"`
	Action *CreateProjectAiBotsAction `json:"action,omitempty"`
}

func (o *CreateProjectAiBots) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateProjectAiBots) GetAction() *CreateProjectAiBotsAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type CreateProjectOwaspAction string

const (
	CreateProjectOwaspActionDeny      CreateProjectOwaspAction = "deny"
	CreateProjectOwaspActionChallenge CreateProjectOwaspAction = "challenge"
	CreateProjectOwaspActionLog       CreateProjectOwaspAction = "log"
)

func (e CreateProjectOwaspAction) ToPointer() *CreateProjectOwaspAction {
	return &e
}
func (e *CreateProjectOwaspAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = CreateProjectOwaspAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectOwaspAction: %v", v)
	}
}

type CreateProjectOwasp struct {
	Active bool                      `json:"active"`
	Action *CreateProjectOwaspAction `json:"action,omitempty"`
}

func (o *CreateProjectOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *CreateProjectOwasp) GetAction() *CreateProjectOwaspAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type CreateProjectManagedRules struct {
	BotFilter CreateProjectBotFilter `json:"bot_filter"`
	AiBots    CreateProjectAiBots    `json:"ai_bots"`
	Owasp     CreateProjectOwasp     `json:"owasp"`
}

func (o *CreateProjectManagedRules) GetBotFilter() CreateProjectBotFilter {
	if o == nil {
		return CreateProjectBotFilter{}
	}
	return o.BotFilter
}

func (o *CreateProjectManagedRules) GetAiBots() CreateProjectAiBots {
	if o == nil {
		return CreateProjectAiBots{}
	}
	return o.AiBots
}

func (o *CreateProjectManagedRules) GetOwasp() CreateProjectOwasp {
	if o == nil {
		return CreateProjectOwasp{}
	}
	return o.Owasp
}

type CreateProjectSecurity struct {
	AttackModeEnabled      *bool                        `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                     `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                        `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                     `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                     `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                     `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []CreateProjectFirewallRoute `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                        `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                        `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                        `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                     `json:"firewallBypassIps,omitempty"`
	ManagedRules           *CreateProjectManagedRules   `json:"managedRules,omitempty"`
}

func (o *CreateProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *CreateProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *CreateProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *CreateProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *CreateProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *CreateProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *CreateProjectSecurity) GetFirewallRoutes() []CreateProjectFirewallRoute {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *CreateProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *CreateProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *CreateProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *CreateProjectSecurity) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *CreateProjectSecurity) GetManagedRules() *CreateProjectManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// CreateProjectIssuerModeResponse - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type CreateProjectIssuerModeResponse string

const (
	CreateProjectIssuerModeResponseTeam   CreateProjectIssuerModeResponse = "team"
	CreateProjectIssuerModeResponseGlobal CreateProjectIssuerModeResponse = "global"
)

func (e CreateProjectIssuerModeResponse) ToPointer() *CreateProjectIssuerModeResponse {
	return &e
}
func (e *CreateProjectIssuerModeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = CreateProjectIssuerModeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectIssuerModeResponse: %v", v)
	}
}

type CreateProjectOidcTokenConfigResponse struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	Enabled *bool `json:"enabled,omitempty"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *CreateProjectIssuerModeResponse `json:"issuerMode,omitempty"`
}

func (o *CreateProjectOidcTokenConfigResponse) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *CreateProjectOidcTokenConfigResponse) GetIssuerMode() *CreateProjectIssuerModeResponse {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type CreateProjectTier string

const (
	CreateProjectTierStandard CreateProjectTier = "standard"
	CreateProjectTierAdvanced CreateProjectTier = "advanced"
	CreateProjectTierCritical CreateProjectTier = "critical"
)

func (e CreateProjectTier) ToPointer() *CreateProjectTier {
	return &e
}
func (e *CreateProjectTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = CreateProjectTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectTier: %v", v)
	}
}

type CreateProjectFeatures struct {
	WebAnalytics *bool `json:"webAnalytics,omitempty"`
}

func (o *CreateProjectFeatures) GetWebAnalytics() *bool {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

// CreateProjectResponseBody - The project was successfuly created
type CreateProjectResponseBody struct {
	AccountID                        string                              `json:"accountId"`
	Analytics                        *CreateProjectAnalytics             `json:"analytics,omitempty"`
	SpeedInsights                    *CreateProjectSpeedInsights         `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs             *bool                               `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains          *bool                               `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                             `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                     *string                             `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                             `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurations            []CreateProjectConnectConfiguration `json:"connectConfigurations,omitempty"`
	ConnectConfigurationID           *string                             `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled             *bool                               `json:"connectBuildsEnabled,omitempty"`
	PassiveConnectConfigurationID    *string                             `json:"passiveConnectConfigurationId,omitempty"`
	CreatedAt                        *float64                            `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility    *bool                               `json:"customerSupportCodeVisibility,omitempty"`
	Crons                            *CreateProjectCrons                 `json:"crons,omitempty"`
	DataCache                        *CreateProjectDataCache             `json:"dataCache,omitempty"`
	DeploymentExpiration             *CreateProjectDeploymentExpiration  `json:"deploymentExpiration,omitempty"`
	DevCommand                       *string                             `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                `json:"directoryListing"`
	InstallCommand                   *string                             `json:"installCommand,omitempty"`
	Env                              []CreateProjectEnv                  `json:"env,omitempty"`
	CustomEnvironments               []CreateProjectCustomEnvironment    `json:"customEnvironments,omitempty"`
	Framework                        *CreateProjectFrameworkResponseBody `json:"framework,omitempty"`
	GitForkProtection                *bool                               `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                               `json:"gitLFS,omitempty"`
	ID                               string                              `json:"id"`
	IPBuckets                        []CreateProjectIPBucket             `json:"ipBuckets,omitempty"`
	LatestDeployments                []CreateProjectLatestDeployment     `json:"latestDeployments,omitempty"`
	Link                             *CreateProjectLinkUnion             `json:"link,omitempty"`
	Microfrontends                   *CreateProjectMicrofrontendsUnion   `json:"microfrontends,omitempty"`
	Name                             string                              `json:"name"`
	NodeVersion                      CreateProjectNodeVersion            `json:"nodeVersion"`
	OptionsAllowlist                 *CreateProjectOptionsAllowlist      `json:"optionsAllowlist,omitempty"`
	OutputDirectory                  *string                             `json:"outputDirectory,omitempty"`
	PasswordProtection               *CreateProjectPasswordProtection    `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane    *bool                               `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                     *bool                               `json:"publicSource,omitempty"`
	ResourceConfig                   CreateProjectResourceConfigResponse `json:"resourceConfig"`
	// Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
	RollbackDescription                  *CreateProjectRollbackDescription             `json:"rollbackDescription,omitempty"`
	RollingRelease                       *CreateProjectRollingRelease                  `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                CreateProjectDefaultResourceConfig            `json:"defaultResourceConfig"`
	RootDirectory                        *string                                       `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                       `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                         `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                      `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                      `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                         `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                         `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                         `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *CreateProjectSsoProtection                   `json:"ssoProtection,omitempty"`
	Targets                              map[string]*CreateProjectTargets              `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                      `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                      `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                       `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                       `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                      `json:"updatedAt,omitempty"`
	Live                                 *bool                                         `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                         `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                         `json:"enableProductionFeedback,omitempty"`
	Permissions                          *CreateProjectPermissions                     `json:"permissions,omitempty"`
	LastRollbackTarget                   *CreateProjectLastRollbackTarget              `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *CreateProjectLastAliasRequest                `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]CreateProjectProtectionBypassUnion `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                         `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *CreateProjectTrustedIpsUnion                 `json:"trustedIps,omitempty"`
	GitComments                          *CreateProjectGitComments                     `json:"gitComments,omitempty"`
	GitProviderOptions                   *CreateProjectGitProviderOptions              `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                         `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                       `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *CreateProjectWebAnalytics                    `json:"webAnalytics,omitempty"`
	Security                             *CreateProjectSecurity                        `json:"security,omitempty"`
	OidcTokenConfig                      *CreateProjectOidcTokenConfigResponse         `json:"oidcTokenConfig,omitempty"`
	Tier                                 *CreateProjectTier                            `json:"tier,omitempty"`
	Features                             *CreateProjectFeatures                        `json:"features,omitempty"`
}

func (o *CreateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *CreateProjectResponseBody) GetAnalytics() *CreateProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *CreateProjectResponseBody) GetSpeedInsights() *CreateProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *CreateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *CreateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *CreateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *CreateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *CreateProjectResponseBody) GetConnectConfigurations() []CreateProjectConnectConfiguration {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurations
}

func (o *CreateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *CreateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *CreateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *CreateProjectResponseBody) GetCrons() *CreateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *CreateProjectResponseBody) GetDataCache() *CreateProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *CreateProjectResponseBody) GetDeploymentExpiration() *CreateProjectDeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *CreateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *CreateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *CreateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *CreateProjectResponseBody) GetEnv() []CreateProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *CreateProjectResponseBody) GetCustomEnvironments() []CreateProjectCustomEnvironment {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *CreateProjectResponseBody) GetFramework() *CreateProjectFrameworkResponseBody {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *CreateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *CreateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *CreateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateProjectResponseBody) GetIPBuckets() []CreateProjectIPBucket {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *CreateProjectResponseBody) GetLatestDeployments() []CreateProjectLatestDeployment {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *CreateProjectResponseBody) GetLink() *CreateProjectLinkUnion {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectResponseBody) GetMicrofrontends() *CreateProjectMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *CreateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateProjectResponseBody) GetNodeVersion() CreateProjectNodeVersion {
	if o == nil {
		return CreateProjectNodeVersion("")
	}
	return o.NodeVersion
}

func (o *CreateProjectResponseBody) GetOptionsAllowlist() *CreateProjectOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *CreateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *CreateProjectResponseBody) GetPasswordProtection() *CreateProjectPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *CreateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *CreateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *CreateProjectResponseBody) GetResourceConfig() CreateProjectResourceConfigResponse {
	if o == nil {
		return CreateProjectResourceConfigResponse{}
	}
	return o.ResourceConfig
}

func (o *CreateProjectResponseBody) GetRollbackDescription() *CreateProjectRollbackDescription {
	if o == nil {
		return nil
	}
	return o.RollbackDescription
}

func (o *CreateProjectResponseBody) GetRollingRelease() *CreateProjectRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *CreateProjectResponseBody) GetDefaultResourceConfig() CreateProjectDefaultResourceConfig {
	if o == nil {
		return CreateProjectDefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *CreateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *CreateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *CreateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *CreateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *CreateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *CreateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *CreateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *CreateProjectResponseBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *CreateProjectResponseBody) GetSsoProtection() *CreateProjectSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *CreateProjectResponseBody) GetTargets() map[string]*CreateProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *CreateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *CreateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *CreateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *CreateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *CreateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *CreateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *CreateProjectResponseBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *CreateProjectResponseBody) GetPermissions() *CreateProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *CreateProjectResponseBody) GetLastRollbackTarget() *CreateProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *CreateProjectResponseBody) GetLastAliasRequest() *CreateProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *CreateProjectResponseBody) GetProtectionBypass() map[string]CreateProjectProtectionBypassUnion {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *CreateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *CreateProjectResponseBody) GetTrustedIps() *CreateProjectTrustedIpsUnion {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *CreateProjectResponseBody) GetGitComments() *CreateProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *CreateProjectResponseBody) GetGitProviderOptions() *CreateProjectGitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *CreateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *CreateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *CreateProjectResponseBody) GetWebAnalytics() *CreateProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *CreateProjectResponseBody) GetSecurity() *CreateProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *CreateProjectResponseBody) GetOidcTokenConfig() *CreateProjectOidcTokenConfigResponse {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *CreateProjectResponseBody) GetTier() *CreateProjectTier {
	if o == nil {
		return nil
	}
	return o.Tier
}

func (o *CreateProjectResponseBody) GetFeatures() *CreateProjectFeatures {
	if o == nil {
		return nil
	}
	return o.Features
}

type CreateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The project was successfuly created
	Object *CreateProjectResponseBody
}

func (o *CreateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateProjectResponse) GetObject() *CreateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
