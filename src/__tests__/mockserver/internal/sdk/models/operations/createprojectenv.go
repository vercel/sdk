// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// CreateProjectEnvTypeRequest4 - The type of environment variable
type CreateProjectEnvTypeRequest4 string

const (
	CreateProjectEnvTypeRequest4System    CreateProjectEnvTypeRequest4 = "system"
	CreateProjectEnvTypeRequest4Secret    CreateProjectEnvTypeRequest4 = "secret"
	CreateProjectEnvTypeRequest4Encrypted CreateProjectEnvTypeRequest4 = "encrypted"
	CreateProjectEnvTypeRequest4Plain     CreateProjectEnvTypeRequest4 = "plain"
	CreateProjectEnvTypeRequest4Sensitive CreateProjectEnvTypeRequest4 = "sensitive"
)

func (e CreateProjectEnvTypeRequest4) ToPointer() *CreateProjectEnvTypeRequest4 {
	return &e
}
func (e *CreateProjectEnvTypeRequest4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvTypeRequest4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTypeRequest4: %v", v)
	}
}

type CreateProjectEnvTargetRequest4 string

const (
	CreateProjectEnvTargetRequest4Production  CreateProjectEnvTargetRequest4 = "production"
	CreateProjectEnvTargetRequest4Preview     CreateProjectEnvTargetRequest4 = "preview"
	CreateProjectEnvTargetRequest4Development CreateProjectEnvTargetRequest4 = "development"
)

func (e CreateProjectEnvTargetRequest4) ToPointer() *CreateProjectEnvTargetRequest4 {
	return &e
}
func (e *CreateProjectEnvTargetRequest4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetRequest4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetRequest4: %v", v)
	}
}

type CreateProjectEnvRequestBody4 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type CreateProjectEnvTypeRequest4 `json:"type"`
	// The target environment of the environment variable
	Target []CreateProjectEnvTargetRequest4 `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds"`
}

func (o *CreateProjectEnvRequestBody4) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnvRequestBody4) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnvRequestBody4) GetType() CreateProjectEnvTypeRequest4 {
	if o == nil {
		return CreateProjectEnvTypeRequest4("")
	}
	return o.Type
}

func (o *CreateProjectEnvRequestBody4) GetTarget() []CreateProjectEnvTargetRequest4 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvRequestBody4) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvRequestBody4) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnvRequestBody4) GetCustomEnvironmentIds() []string {
	if o == nil {
		return []string{}
	}
	return o.CustomEnvironmentIds
}

// CreateProjectEnvTypeRequest3 - The type of environment variable
type CreateProjectEnvTypeRequest3 string

const (
	CreateProjectEnvTypeRequest3System    CreateProjectEnvTypeRequest3 = "system"
	CreateProjectEnvTypeRequest3Secret    CreateProjectEnvTypeRequest3 = "secret"
	CreateProjectEnvTypeRequest3Encrypted CreateProjectEnvTypeRequest3 = "encrypted"
	CreateProjectEnvTypeRequest3Plain     CreateProjectEnvTypeRequest3 = "plain"
	CreateProjectEnvTypeRequest3Sensitive CreateProjectEnvTypeRequest3 = "sensitive"
)

func (e CreateProjectEnvTypeRequest3) ToPointer() *CreateProjectEnvTypeRequest3 {
	return &e
}
func (e *CreateProjectEnvTypeRequest3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvTypeRequest3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTypeRequest3: %v", v)
	}
}

type CreateProjectEnvTargetRequest3 string

const (
	CreateProjectEnvTargetRequest3Production  CreateProjectEnvTargetRequest3 = "production"
	CreateProjectEnvTargetRequest3Preview     CreateProjectEnvTargetRequest3 = "preview"
	CreateProjectEnvTargetRequest3Development CreateProjectEnvTargetRequest3 = "development"
)

func (e CreateProjectEnvTargetRequest3) ToPointer() *CreateProjectEnvTargetRequest3 {
	return &e
}
func (e *CreateProjectEnvTargetRequest3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetRequest3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetRequest3: %v", v)
	}
}

type CreateProjectEnvRequestBody3 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type CreateProjectEnvTypeRequest3 `json:"type"`
	// The target environment of the environment variable
	Target []CreateProjectEnvTargetRequest3 `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
}

func (o *CreateProjectEnvRequestBody3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnvRequestBody3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnvRequestBody3) GetType() CreateProjectEnvTypeRequest3 {
	if o == nil {
		return CreateProjectEnvTypeRequest3("")
	}
	return o.Type
}

func (o *CreateProjectEnvRequestBody3) GetTarget() []CreateProjectEnvTargetRequest3 {
	if o == nil {
		return []CreateProjectEnvTargetRequest3{}
	}
	return o.Target
}

func (o *CreateProjectEnvRequestBody3) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvRequestBody3) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnvRequestBody3) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type RequestBodyUnion2Type string

const (
	RequestBodyUnion2TypeCreateProjectEnvRequestBody3 RequestBodyUnion2Type = "createProjectEnv_RequestBody_3"
	RequestBodyUnion2TypeCreateProjectEnvRequestBody4 RequestBodyUnion2Type = "createProjectEnv_RequestBody_4"
)

type RequestBodyUnion2 struct {
	CreateProjectEnvRequestBody3 *CreateProjectEnvRequestBody3 `queryParam:"inline"`
	CreateProjectEnvRequestBody4 *CreateProjectEnvRequestBody4 `queryParam:"inline"`

	Type RequestBodyUnion2Type
}

func CreateRequestBodyUnion2CreateProjectEnvRequestBody3(createProjectEnvRequestBody3 CreateProjectEnvRequestBody3) RequestBodyUnion2 {
	typ := RequestBodyUnion2TypeCreateProjectEnvRequestBody3

	return RequestBodyUnion2{
		CreateProjectEnvRequestBody3: &createProjectEnvRequestBody3,
		Type:                         typ,
	}
}

func CreateRequestBodyUnion2CreateProjectEnvRequestBody4(createProjectEnvRequestBody4 CreateProjectEnvRequestBody4) RequestBodyUnion2 {
	typ := RequestBodyUnion2TypeCreateProjectEnvRequestBody4

	return RequestBodyUnion2{
		CreateProjectEnvRequestBody4: &createProjectEnvRequestBody4,
		Type:                         typ,
	}
}

func (u *RequestBodyUnion2) UnmarshalJSON(data []byte) error {

	var createProjectEnvRequestBody3 CreateProjectEnvRequestBody3 = CreateProjectEnvRequestBody3{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvRequestBody3, "", true, true); err == nil {
		u.CreateProjectEnvRequestBody3 = &createProjectEnvRequestBody3
		u.Type = RequestBodyUnion2TypeCreateProjectEnvRequestBody3
		return nil
	}

	var createProjectEnvRequestBody4 CreateProjectEnvRequestBody4 = CreateProjectEnvRequestBody4{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvRequestBody4, "", true, true); err == nil {
		u.CreateProjectEnvRequestBody4 = &createProjectEnvRequestBody4
		u.Type = RequestBodyUnion2TypeCreateProjectEnvRequestBody4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequestBodyUnion2", string(data))
}

func (u RequestBodyUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvRequestBody3 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvRequestBody3, "", true)
	}

	if u.CreateProjectEnvRequestBody4 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvRequestBody4, "", true)
	}

	return nil, errors.New("could not marshal union type RequestBodyUnion2: all fields are null")
}

// CreateProjectEnvTypeRequest2 - The type of environment variable
type CreateProjectEnvTypeRequest2 string

const (
	CreateProjectEnvTypeRequest2System    CreateProjectEnvTypeRequest2 = "system"
	CreateProjectEnvTypeRequest2Secret    CreateProjectEnvTypeRequest2 = "secret"
	CreateProjectEnvTypeRequest2Encrypted CreateProjectEnvTypeRequest2 = "encrypted"
	CreateProjectEnvTypeRequest2Plain     CreateProjectEnvTypeRequest2 = "plain"
	CreateProjectEnvTypeRequest2Sensitive CreateProjectEnvTypeRequest2 = "sensitive"
)

func (e CreateProjectEnvTypeRequest2) ToPointer() *CreateProjectEnvTypeRequest2 {
	return &e
}
func (e *CreateProjectEnvTypeRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvTypeRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTypeRequest2: %v", v)
	}
}

type CreateProjectEnvTargetRequest2 string

const (
	CreateProjectEnvTargetRequest2Production  CreateProjectEnvTargetRequest2 = "production"
	CreateProjectEnvTargetRequest2Preview     CreateProjectEnvTargetRequest2 = "preview"
	CreateProjectEnvTargetRequest2Development CreateProjectEnvTargetRequest2 = "development"
)

func (e CreateProjectEnvTargetRequest2) ToPointer() *CreateProjectEnvTargetRequest2 {
	return &e
}
func (e *CreateProjectEnvTargetRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetRequest2: %v", v)
	}
}

type CreateProjectEnvRequestBody2 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type CreateProjectEnvTypeRequest2 `json:"type"`
	// The target environment of the environment variable
	Target []CreateProjectEnvTargetRequest2 `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds"`
}

func (o *CreateProjectEnvRequestBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnvRequestBody2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnvRequestBody2) GetType() CreateProjectEnvTypeRequest2 {
	if o == nil {
		return CreateProjectEnvTypeRequest2("")
	}
	return o.Type
}

func (o *CreateProjectEnvRequestBody2) GetTarget() []CreateProjectEnvTargetRequest2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvRequestBody2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvRequestBody2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnvRequestBody2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return []string{}
	}
	return o.CustomEnvironmentIds
}

// CreateProjectEnvTypeRequest1 - The type of environment variable
type CreateProjectEnvTypeRequest1 string

const (
	CreateProjectEnvTypeRequest1System    CreateProjectEnvTypeRequest1 = "system"
	CreateProjectEnvTypeRequest1Secret    CreateProjectEnvTypeRequest1 = "secret"
	CreateProjectEnvTypeRequest1Encrypted CreateProjectEnvTypeRequest1 = "encrypted"
	CreateProjectEnvTypeRequest1Plain     CreateProjectEnvTypeRequest1 = "plain"
	CreateProjectEnvTypeRequest1Sensitive CreateProjectEnvTypeRequest1 = "sensitive"
)

func (e CreateProjectEnvTypeRequest1) ToPointer() *CreateProjectEnvTypeRequest1 {
	return &e
}
func (e *CreateProjectEnvTypeRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = CreateProjectEnvTypeRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTypeRequest1: %v", v)
	}
}

type CreateProjectEnvTargetRequest1 string

const (
	CreateProjectEnvTargetRequest1Production  CreateProjectEnvTargetRequest1 = "production"
	CreateProjectEnvTargetRequest1Preview     CreateProjectEnvTargetRequest1 = "preview"
	CreateProjectEnvTargetRequest1Development CreateProjectEnvTargetRequest1 = "development"
)

func (e CreateProjectEnvTargetRequest1) ToPointer() *CreateProjectEnvTargetRequest1 {
	return &e
}
func (e *CreateProjectEnvTargetRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateProjectEnvTargetRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateProjectEnvTargetRequest1: %v", v)
	}
}

type CreateProjectEnvRequestBody1 struct {
	// The name of the environment variable
	Key string `json:"key"`
	// The value of the environment variable
	Value string `json:"value"`
	// The type of environment variable
	Type CreateProjectEnvTypeRequest1 `json:"type"`
	// The target environment of the environment variable
	Target []CreateProjectEnvTargetRequest1 `json:"target"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// A comment to add context on what this environment variable is for
	Comment *string `json:"comment,omitempty"`
	// The custom environment IDs associated with the environment variable
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
}

func (o *CreateProjectEnvRequestBody1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *CreateProjectEnvRequestBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateProjectEnvRequestBody1) GetType() CreateProjectEnvTypeRequest1 {
	if o == nil {
		return CreateProjectEnvTypeRequest1("")
	}
	return o.Type
}

func (o *CreateProjectEnvRequestBody1) GetTarget() []CreateProjectEnvTargetRequest1 {
	if o == nil {
		return []CreateProjectEnvTargetRequest1{}
	}
	return o.Target
}

func (o *CreateProjectEnvRequestBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvRequestBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateProjectEnvRequestBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type RequestBodyUnion1Type string

const (
	RequestBodyUnion1TypeCreateProjectEnvRequestBody1 RequestBodyUnion1Type = "createProjectEnv_RequestBody_1"
	RequestBodyUnion1TypeCreateProjectEnvRequestBody2 RequestBodyUnion1Type = "createProjectEnv_RequestBody_2"
)

type RequestBodyUnion1 struct {
	CreateProjectEnvRequestBody1 *CreateProjectEnvRequestBody1 `queryParam:"inline"`
	CreateProjectEnvRequestBody2 *CreateProjectEnvRequestBody2 `queryParam:"inline"`

	Type RequestBodyUnion1Type
}

func CreateRequestBodyUnion1CreateProjectEnvRequestBody1(createProjectEnvRequestBody1 CreateProjectEnvRequestBody1) RequestBodyUnion1 {
	typ := RequestBodyUnion1TypeCreateProjectEnvRequestBody1

	return RequestBodyUnion1{
		CreateProjectEnvRequestBody1: &createProjectEnvRequestBody1,
		Type:                         typ,
	}
}

func CreateRequestBodyUnion1CreateProjectEnvRequestBody2(createProjectEnvRequestBody2 CreateProjectEnvRequestBody2) RequestBodyUnion1 {
	typ := RequestBodyUnion1TypeCreateProjectEnvRequestBody2

	return RequestBodyUnion1{
		CreateProjectEnvRequestBody2: &createProjectEnvRequestBody2,
		Type:                         typ,
	}
}

func (u *RequestBodyUnion1) UnmarshalJSON(data []byte) error {

	var createProjectEnvRequestBody1 CreateProjectEnvRequestBody1 = CreateProjectEnvRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvRequestBody1, "", true, true); err == nil {
		u.CreateProjectEnvRequestBody1 = &createProjectEnvRequestBody1
		u.Type = RequestBodyUnion1TypeCreateProjectEnvRequestBody1
		return nil
	}

	var createProjectEnvRequestBody2 CreateProjectEnvRequestBody2 = CreateProjectEnvRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvRequestBody2, "", true, true); err == nil {
		u.CreateProjectEnvRequestBody2 = &createProjectEnvRequestBody2
		u.Type = RequestBodyUnion1TypeCreateProjectEnvRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequestBodyUnion1", string(data))
}

func (u RequestBodyUnion1) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvRequestBody1, "", true)
	}

	if u.CreateProjectEnvRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type RequestBodyUnion1: all fields are null")
}

type CreateProjectEnvRequestBodyType string

const (
	CreateProjectEnvRequestBodyTypeRequestBodyUnion1        CreateProjectEnvRequestBodyType = "RequestBody_union_1"
	CreateProjectEnvRequestBodyTypeArrayOfRequestBodyUnion2 CreateProjectEnvRequestBodyType = "arrayOfRequestBodyUnion2"
)

type CreateProjectEnvRequestBody struct {
	RequestBodyUnion1        *RequestBodyUnion1  `queryParam:"inline"`
	ArrayOfRequestBodyUnion2 []RequestBodyUnion2 `queryParam:"inline"`

	Type CreateProjectEnvRequestBodyType
}

func CreateCreateProjectEnvRequestBodyRequestBodyUnion1(requestBodyUnion1 RequestBodyUnion1) CreateProjectEnvRequestBody {
	typ := CreateProjectEnvRequestBodyTypeRequestBodyUnion1

	return CreateProjectEnvRequestBody{
		RequestBodyUnion1: &requestBodyUnion1,
		Type:              typ,
	}
}

func CreateCreateProjectEnvRequestBodyArrayOfRequestBodyUnion2(arrayOfRequestBodyUnion2 []RequestBodyUnion2) CreateProjectEnvRequestBody {
	typ := CreateProjectEnvRequestBodyTypeArrayOfRequestBodyUnion2

	return CreateProjectEnvRequestBody{
		ArrayOfRequestBodyUnion2: arrayOfRequestBodyUnion2,
		Type:                     typ,
	}
}

func (u *CreateProjectEnvRequestBody) UnmarshalJSON(data []byte) error {

	var requestBodyUnion1 RequestBodyUnion1 = RequestBodyUnion1{}
	if err := utils.UnmarshalJSON(data, &requestBodyUnion1, "", true, true); err == nil {
		u.RequestBodyUnion1 = &requestBodyUnion1
		u.Type = CreateProjectEnvRequestBodyTypeRequestBodyUnion1
		return nil
	}

	var arrayOfRequestBodyUnion2 []RequestBodyUnion2 = []RequestBodyUnion2{}
	if err := utils.UnmarshalJSON(data, &arrayOfRequestBodyUnion2, "", true, true); err == nil {
		u.ArrayOfRequestBodyUnion2 = arrayOfRequestBodyUnion2
		u.Type = CreateProjectEnvRequestBodyTypeArrayOfRequestBodyUnion2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvRequestBody", string(data))
}

func (u CreateProjectEnvRequestBody) MarshalJSON() ([]byte, error) {
	if u.RequestBodyUnion1 != nil {
		return utils.MarshalJSON(u.RequestBodyUnion1, "", true)
	}

	if u.ArrayOfRequestBodyUnion2 != nil {
		return utils.MarshalJSON(u.ArrayOfRequestBodyUnion2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvRequestBody: all fields are null")
}

type CreateProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Allow override of environment variable if it already exists
	Upsert *string `queryParam:"style=form,explode=true,name=upsert"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateProjectEnvRequestBody `request:"mediaType=application/json"`
}

func (o *CreateProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *CreateProjectEnvRequest) GetUpsert() *string {
	if o == nil {
		return nil
	}
	return o.Upsert
}

func (o *CreateProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateProjectEnvRequest) GetRequestBody() CreateProjectEnvRequestBody {
	if o == nil {
		return CreateProjectEnvRequestBody{}
	}
	return o.RequestBody
}

type CreatedTargetEnum3 string

const (
	CreatedTargetEnum3Production  CreatedTargetEnum3 = "production"
	CreatedTargetEnum3Preview     CreatedTargetEnum3 = "preview"
	CreatedTargetEnum3Development CreatedTargetEnum3 = "development"
)

func (e CreatedTargetEnum3) ToPointer() *CreatedTargetEnum3 {
	return &e
}
func (e *CreatedTargetEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreatedTargetEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTargetEnum3: %v", v)
	}
}

type CreatedTargetUnion2Type string

const (
	CreatedTargetUnion2TypeArrayOfStr         CreatedTargetUnion2Type = "arrayOfStr"
	CreatedTargetUnion2TypeCreatedTargetEnum3 CreatedTargetUnion2Type = "created_target_enum_3"
)

type CreatedTargetUnion2 struct {
	ArrayOfStr         []string            `queryParam:"inline"`
	CreatedTargetEnum3 *CreatedTargetEnum3 `queryParam:"inline"`

	Type CreatedTargetUnion2Type
}

func CreateCreatedTargetUnion2ArrayOfStr(arrayOfStr []string) CreatedTargetUnion2 {
	typ := CreatedTargetUnion2TypeArrayOfStr

	return CreatedTargetUnion2{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateCreatedTargetUnion2CreatedTargetEnum3(createdTargetEnum3 CreatedTargetEnum3) CreatedTargetUnion2 {
	typ := CreatedTargetUnion2TypeCreatedTargetEnum3

	return CreatedTargetUnion2{
		CreatedTargetEnum3: &createdTargetEnum3,
		Type:               typ,
	}
}

func (u *CreatedTargetUnion2) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = CreatedTargetUnion2TypeArrayOfStr
		return nil
	}

	var createdTargetEnum3 CreatedTargetEnum3 = CreatedTargetEnum3("")
	if err := utils.UnmarshalJSON(data, &createdTargetEnum3, "", true, true); err == nil {
		u.CreatedTargetEnum3 = &createdTargetEnum3
		u.Type = CreatedTargetUnion2TypeCreatedTargetEnum3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatedTargetUnion2", string(data))
}

func (u CreatedTargetUnion2) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.CreatedTargetEnum3 != nil {
		return utils.MarshalJSON(u.CreatedTargetEnum3, "", true)
	}

	return nil, errors.New("could not marshal union type CreatedTargetUnion2: all fields are null")
}

type CreatedType2 string

const (
	CreatedType2System    CreatedType2 = "system"
	CreatedType2Encrypted CreatedType2 = "encrypted"
	CreatedType2Plain     CreatedType2 = "plain"
	CreatedType2Sensitive CreatedType2 = "sensitive"
	CreatedType2Secret    CreatedType2 = "secret"
)

func (e CreatedType2) ToPointer() *CreatedType2 {
	return &e
}
func (e *CreatedType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = CreatedType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedType2: %v", v)
	}
}

type CreatedTypeFlagsConnectionString2 string

const (
	CreatedTypeFlagsConnectionString2FlagsConnectionString CreatedTypeFlagsConnectionString2 = "flags-connection-string"
)

func (e CreatedTypeFlagsConnectionString2) ToPointer() *CreatedTypeFlagsConnectionString2 {
	return &e
}
func (e *CreatedTypeFlagsConnectionString2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = CreatedTypeFlagsConnectionString2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeFlagsConnectionString2: %v", v)
	}
}

type CreateProjectEnvContentHintFlagsConnectionString2 struct {
	Type      CreatedTypeFlagsConnectionString2 `json:"type"`
	ProjectID string                            `json:"projectId"`
}

func (o *CreateProjectEnvContentHintFlagsConnectionString2) GetType() CreatedTypeFlagsConnectionString2 {
	if o == nil {
		return CreatedTypeFlagsConnectionString2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintFlagsConnectionString2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreatedTypeIntegrationStoreSecret2 string

const (
	CreatedTypeIntegrationStoreSecret2IntegrationStoreSecret CreatedTypeIntegrationStoreSecret2 = "integration-store-secret"
)

func (e CreatedTypeIntegrationStoreSecret2) ToPointer() *CreatedTypeIntegrationStoreSecret2 {
	return &e
}
func (e *CreatedTypeIntegrationStoreSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreatedTypeIntegrationStoreSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeIntegrationStoreSecret2: %v", v)
	}
}

type CreateProjectEnvContentHintIntegrationStoreSecret2 struct {
	Type                       CreatedTypeIntegrationStoreSecret2 `json:"type"`
	StoreID                    string                             `json:"storeId"`
	IntegrationID              string                             `json:"integrationId"`
	IntegrationProductID       string                             `json:"integrationProductId"`
	IntegrationConfigurationID string                             `json:"integrationConfigurationId"`
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret2) GetType() CreatedTypeIntegrationStoreSecret2 {
	if o == nil {
		return CreatedTypeIntegrationStoreSecret2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreatedTypePostgresURLNoSsl2 string

const (
	CreatedTypePostgresURLNoSsl2PostgresURLNoSsl CreatedTypePostgresURLNoSsl2 = "postgres-url-no-ssl"
)

func (e CreatedTypePostgresURLNoSsl2) ToPointer() *CreatedTypePostgresURLNoSsl2 {
	return &e
}
func (e *CreatedTypePostgresURLNoSsl2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreatedTypePostgresURLNoSsl2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresURLNoSsl2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresURLNoSsl2 struct {
	Type    CreatedTypePostgresURLNoSsl2 `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresURLNoSsl2) GetType() CreatedTypePostgresURLNoSsl2 {
	if o == nil {
		return CreatedTypePostgresURLNoSsl2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresURLNoSsl2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresDatabase2 string

const (
	CreatedTypePostgresDatabase2PostgresDatabase CreatedTypePostgresDatabase2 = "postgres-database"
)

func (e CreatedTypePostgresDatabase2) ToPointer() *CreatedTypePostgresDatabase2 {
	return &e
}
func (e *CreatedTypePostgresDatabase2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreatedTypePostgresDatabase2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresDatabase2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresDatabase2 struct {
	Type    CreatedTypePostgresDatabase2 `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresDatabase2) GetType() CreatedTypePostgresDatabase2 {
	if o == nil {
		return CreatedTypePostgresDatabase2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresDatabase2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresPassword2 string

const (
	CreatedTypePostgresPassword2PostgresPassword CreatedTypePostgresPassword2 = "postgres-password"
)

func (e CreatedTypePostgresPassword2) ToPointer() *CreatedTypePostgresPassword2 {
	return &e
}
func (e *CreatedTypePostgresPassword2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreatedTypePostgresPassword2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresPassword2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresPassword2 struct {
	Type    CreatedTypePostgresPassword2 `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresPassword2) GetType() CreatedTypePostgresPassword2 {
	if o == nil {
		return CreatedTypePostgresPassword2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresPassword2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresHost2 string

const (
	CreatedTypePostgresHost2PostgresHost CreatedTypePostgresHost2 = "postgres-host"
)

func (e CreatedTypePostgresHost2) ToPointer() *CreatedTypePostgresHost2 {
	return &e
}
func (e *CreatedTypePostgresHost2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreatedTypePostgresHost2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresHost2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresHost2 struct {
	Type    CreatedTypePostgresHost2 `json:"type"`
	StoreID string                   `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresHost2) GetType() CreatedTypePostgresHost2 {
	if o == nil {
		return CreatedTypePostgresHost2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresHost2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresUser2 string

const (
	CreatedTypePostgresUser2PostgresUser CreatedTypePostgresUser2 = "postgres-user"
)

func (e CreatedTypePostgresUser2) ToPointer() *CreatedTypePostgresUser2 {
	return &e
}
func (e *CreatedTypePostgresUser2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreatedTypePostgresUser2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresUser2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresUser2 struct {
	Type    CreatedTypePostgresUser2 `json:"type"`
	StoreID string                   `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresUser2) GetType() CreatedTypePostgresUser2 {
	if o == nil {
		return CreatedTypePostgresUser2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresUser2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresPrismaURL2 string

const (
	CreatedTypePostgresPrismaURL2PostgresPrismaURL CreatedTypePostgresPrismaURL2 = "postgres-prisma-url"
)

func (e CreatedTypePostgresPrismaURL2) ToPointer() *CreatedTypePostgresPrismaURL2 {
	return &e
}
func (e *CreatedTypePostgresPrismaURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreatedTypePostgresPrismaURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresPrismaURL2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresPrismaURL2 struct {
	Type    CreatedTypePostgresPrismaURL2 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresPrismaURL2) GetType() CreatedTypePostgresPrismaURL2 {
	if o == nil {
		return CreatedTypePostgresPrismaURL2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresPrismaURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresURLNonPooling2 string

const (
	CreatedTypePostgresURLNonPooling2PostgresURLNonPooling CreatedTypePostgresURLNonPooling2 = "postgres-url-non-pooling"
)

func (e CreatedTypePostgresURLNonPooling2) ToPointer() *CreatedTypePostgresURLNonPooling2 {
	return &e
}
func (e *CreatedTypePostgresURLNonPooling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreatedTypePostgresURLNonPooling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresURLNonPooling2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresURLNonPooling2 struct {
	Type    CreatedTypePostgresURLNonPooling2 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresURLNonPooling2) GetType() CreatedTypePostgresURLNonPooling2 {
	if o == nil {
		return CreatedTypePostgresURLNonPooling2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresURLNonPooling2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresURL2 string

const (
	CreatedTypePostgresURL2PostgresURL CreatedTypePostgresURL2 = "postgres-url"
)

func (e CreatedTypePostgresURL2) ToPointer() *CreatedTypePostgresURL2 {
	return &e
}
func (e *CreatedTypePostgresURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreatedTypePostgresURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresURL2: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresURL2 struct {
	Type    CreatedTypePostgresURL2 `json:"type"`
	StoreID string                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresURL2) GetType() CreatedTypePostgresURL2 {
	if o == nil {
		return CreatedTypePostgresURL2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeBlobReadWriteToken2 string

const (
	CreatedTypeBlobReadWriteToken2BlobReadWriteToken CreatedTypeBlobReadWriteToken2 = "blob-read-write-token"
)

func (e CreatedTypeBlobReadWriteToken2) ToPointer() *CreatedTypeBlobReadWriteToken2 {
	return &e
}
func (e *CreatedTypeBlobReadWriteToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreatedTypeBlobReadWriteToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeBlobReadWriteToken2: %v", v)
	}
}

type CreateProjectEnvContentHintBlobReadWriteToken2 struct {
	Type    CreatedTypeBlobReadWriteToken2 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *CreateProjectEnvContentHintBlobReadWriteToken2) GetType() CreatedTypeBlobReadWriteToken2 {
	if o == nil {
		return CreatedTypeBlobReadWriteToken2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintBlobReadWriteToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisRestAPIReadOnlyToken2 string

const (
	CreatedTypeRedisRestAPIReadOnlyToken2RedisRestAPIReadOnlyToken CreatedTypeRedisRestAPIReadOnlyToken2 = "redis-rest-api-read-only-token"
)

func (e CreatedTypeRedisRestAPIReadOnlyToken2) ToPointer() *CreatedTypeRedisRestAPIReadOnlyToken2 {
	return &e
}
func (e *CreatedTypeRedisRestAPIReadOnlyToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreatedTypeRedisRestAPIReadOnlyToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisRestAPIReadOnlyToken2: %v", v)
	}
}

type CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 struct {
	Type    CreatedTypeRedisRestAPIReadOnlyToken2 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetType() CreatedTypeRedisRestAPIReadOnlyToken2 {
	if o == nil {
		return CreatedTypeRedisRestAPIReadOnlyToken2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisRestAPIToken2 string

const (
	CreatedTypeRedisRestAPIToken2RedisRestAPIToken CreatedTypeRedisRestAPIToken2 = "redis-rest-api-token"
)

func (e CreatedTypeRedisRestAPIToken2) ToPointer() *CreatedTypeRedisRestAPIToken2 {
	return &e
}
func (e *CreatedTypeRedisRestAPIToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreatedTypeRedisRestAPIToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisRestAPIToken2: %v", v)
	}
}

type CreateProjectEnvContentHintRedisRestAPIToken2 struct {
	Type    CreatedTypeRedisRestAPIToken2 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisRestAPIToken2) GetType() CreatedTypeRedisRestAPIToken2 {
	if o == nil {
		return CreatedTypeRedisRestAPIToken2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisRestAPIToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisRestAPIURL2 string

const (
	CreatedTypeRedisRestAPIURL2RedisRestAPIURL CreatedTypeRedisRestAPIURL2 = "redis-rest-api-url"
)

func (e CreatedTypeRedisRestAPIURL2) ToPointer() *CreatedTypeRedisRestAPIURL2 {
	return &e
}
func (e *CreatedTypeRedisRestAPIURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreatedTypeRedisRestAPIURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisRestAPIURL2: %v", v)
	}
}

type CreateProjectEnvContentHintRedisRestAPIURL2 struct {
	Type    CreatedTypeRedisRestAPIURL2 `json:"type"`
	StoreID string                      `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisRestAPIURL2) GetType() CreatedTypeRedisRestAPIURL2 {
	if o == nil {
		return CreatedTypeRedisRestAPIURL2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisRestAPIURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisURL2 string

const (
	CreatedTypeRedisURL2RedisURL CreatedTypeRedisURL2 = "redis-url"
)

func (e CreatedTypeRedisURL2) ToPointer() *CreatedTypeRedisURL2 {
	return &e
}
func (e *CreatedTypeRedisURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreatedTypeRedisURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisURL2: %v", v)
	}
}

type CreateProjectEnvContentHintRedisURL2 struct {
	Type    CreatedTypeRedisURL2 `json:"type"`
	StoreID string               `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisURL2) GetType() CreatedTypeRedisURL2 {
	if o == nil {
		return CreatedTypeRedisURL2("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintUnion2Type string

const (
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisURL2                  CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_RedisURL_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIURL2           CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_RedisRestAPIURL_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIToken2         CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_RedisRestAPIToken_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_RedisRestAPIReadOnlyToken_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintBlobReadWriteToken2        CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_BlobReadWriteToken_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURL2               CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresURL_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURLNonPooling2     CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresURLNonPooling_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresPrismaURL2         CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresPrismaURL_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresUser2              CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresUser_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresHost2              CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresHost_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresPassword2          CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresPassword_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresDatabase2          CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresDatabase_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURLNoSsl2          CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_PostgresURLNoSsl_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintIntegrationStoreSecret2    CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_IntegrationStoreSecret_2"
	CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintFlagsConnectionString2     CreateProjectEnvContentHintUnion2Type = "createProjectEnv_contentHint_FlagsConnectionString_2"
)

type CreateProjectEnvContentHintUnion2 struct {
	CreateProjectEnvContentHintRedisURL2                  *CreateProjectEnvContentHintRedisURL2                  `queryParam:"inline"`
	CreateProjectEnvContentHintRedisRestAPIURL2           *CreateProjectEnvContentHintRedisRestAPIURL2           `queryParam:"inline"`
	CreateProjectEnvContentHintRedisRestAPIToken2         *CreateProjectEnvContentHintRedisRestAPIToken2         `queryParam:"inline"`
	CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 *CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 `queryParam:"inline"`
	CreateProjectEnvContentHintBlobReadWriteToken2        *CreateProjectEnvContentHintBlobReadWriteToken2        `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresURL2               *CreateProjectEnvContentHintPostgresURL2               `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresURLNonPooling2     *CreateProjectEnvContentHintPostgresURLNonPooling2     `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresPrismaURL2         *CreateProjectEnvContentHintPostgresPrismaURL2         `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresUser2              *CreateProjectEnvContentHintPostgresUser2              `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresHost2              *CreateProjectEnvContentHintPostgresHost2              `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresPassword2          *CreateProjectEnvContentHintPostgresPassword2          `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresDatabase2          *CreateProjectEnvContentHintPostgresDatabase2          `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresURLNoSsl2          *CreateProjectEnvContentHintPostgresURLNoSsl2          `queryParam:"inline"`
	CreateProjectEnvContentHintIntegrationStoreSecret2    *CreateProjectEnvContentHintIntegrationStoreSecret2    `queryParam:"inline"`
	CreateProjectEnvContentHintFlagsConnectionString2     *CreateProjectEnvContentHintFlagsConnectionString2     `queryParam:"inline"`

	Type CreateProjectEnvContentHintUnion2Type
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintRedisURL2(createProjectEnvContentHintRedisURL2 CreateProjectEnvContentHintRedisURL2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisURL2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintRedisURL2: &createProjectEnvContentHintRedisURL2,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintRedisRestAPIURL2(createProjectEnvContentHintRedisRestAPIURL2 CreateProjectEnvContentHintRedisRestAPIURL2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIURL2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintRedisRestAPIURL2: &createProjectEnvContentHintRedisRestAPIURL2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintRedisRestAPIToken2(createProjectEnvContentHintRedisRestAPIToken2 CreateProjectEnvContentHintRedisRestAPIToken2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIToken2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintRedisRestAPIToken2: &createProjectEnvContentHintRedisRestAPIToken2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2(createProjectEnvContentHintRedisRestAPIReadOnlyToken2 CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIReadOnlyToken2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2: &createProjectEnvContentHintRedisRestAPIReadOnlyToken2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintBlobReadWriteToken2(createProjectEnvContentHintBlobReadWriteToken2 CreateProjectEnvContentHintBlobReadWriteToken2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintBlobReadWriteToken2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintBlobReadWriteToken2: &createProjectEnvContentHintBlobReadWriteToken2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresURL2(createProjectEnvContentHintPostgresURL2 CreateProjectEnvContentHintPostgresURL2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURL2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresURL2: &createProjectEnvContentHintPostgresURL2,
		Type:                                    typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresURLNonPooling2(createProjectEnvContentHintPostgresURLNonPooling2 CreateProjectEnvContentHintPostgresURLNonPooling2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURLNonPooling2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresURLNonPooling2: &createProjectEnvContentHintPostgresURLNonPooling2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresPrismaURL2(createProjectEnvContentHintPostgresPrismaURL2 CreateProjectEnvContentHintPostgresPrismaURL2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresPrismaURL2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresPrismaURL2: &createProjectEnvContentHintPostgresPrismaURL2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresUser2(createProjectEnvContentHintPostgresUser2 CreateProjectEnvContentHintPostgresUser2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresUser2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresUser2: &createProjectEnvContentHintPostgresUser2,
		Type:                                     typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresHost2(createProjectEnvContentHintPostgresHost2 CreateProjectEnvContentHintPostgresHost2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresHost2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresHost2: &createProjectEnvContentHintPostgresHost2,
		Type:                                     typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresPassword2(createProjectEnvContentHintPostgresPassword2 CreateProjectEnvContentHintPostgresPassword2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresPassword2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresPassword2: &createProjectEnvContentHintPostgresPassword2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresDatabase2(createProjectEnvContentHintPostgresDatabase2 CreateProjectEnvContentHintPostgresDatabase2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresDatabase2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresDatabase2: &createProjectEnvContentHintPostgresDatabase2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintPostgresURLNoSsl2(createProjectEnvContentHintPostgresURLNoSsl2 CreateProjectEnvContentHintPostgresURLNoSsl2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURLNoSsl2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintPostgresURLNoSsl2: &createProjectEnvContentHintPostgresURLNoSsl2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintIntegrationStoreSecret2(createProjectEnvContentHintIntegrationStoreSecret2 CreateProjectEnvContentHintIntegrationStoreSecret2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintIntegrationStoreSecret2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintIntegrationStoreSecret2: &createProjectEnvContentHintIntegrationStoreSecret2,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion2CreateProjectEnvContentHintFlagsConnectionString2(createProjectEnvContentHintFlagsConnectionString2 CreateProjectEnvContentHintFlagsConnectionString2) CreateProjectEnvContentHintUnion2 {
	typ := CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintFlagsConnectionString2

	return CreateProjectEnvContentHintUnion2{
		CreateProjectEnvContentHintFlagsConnectionString2: &createProjectEnvContentHintFlagsConnectionString2,
		Type: typ,
	}
}

func (u *CreateProjectEnvContentHintUnion2) UnmarshalJSON(data []byte) error {

	var createProjectEnvContentHintPostgresURLNonPooling2 CreateProjectEnvContentHintPostgresURLNonPooling2 = CreateProjectEnvContentHintPostgresURLNonPooling2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresURLNonPooling2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresURLNonPooling2 = &createProjectEnvContentHintPostgresURLNonPooling2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURLNonPooling2
		return nil
	}

	var createProjectEnvContentHintPostgresPassword2 CreateProjectEnvContentHintPostgresPassword2 = CreateProjectEnvContentHintPostgresPassword2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresPassword2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresPassword2 = &createProjectEnvContentHintPostgresPassword2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresPassword2
		return nil
	}

	var createProjectEnvContentHintRedisRestAPIToken2 CreateProjectEnvContentHintRedisRestAPIToken2 = CreateProjectEnvContentHintRedisRestAPIToken2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisRestAPIToken2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisRestAPIToken2 = &createProjectEnvContentHintRedisRestAPIToken2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIToken2
		return nil
	}

	var createProjectEnvContentHintRedisRestAPIReadOnlyToken2 CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 = CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisRestAPIReadOnlyToken2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 = &createProjectEnvContentHintRedisRestAPIReadOnlyToken2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIReadOnlyToken2
		return nil
	}

	var createProjectEnvContentHintBlobReadWriteToken2 CreateProjectEnvContentHintBlobReadWriteToken2 = CreateProjectEnvContentHintBlobReadWriteToken2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintBlobReadWriteToken2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintBlobReadWriteToken2 = &createProjectEnvContentHintBlobReadWriteToken2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintBlobReadWriteToken2
		return nil
	}

	var createProjectEnvContentHintPostgresURL2 CreateProjectEnvContentHintPostgresURL2 = CreateProjectEnvContentHintPostgresURL2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresURL2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresURL2 = &createProjectEnvContentHintPostgresURL2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURL2
		return nil
	}

	var createProjectEnvContentHintRedisRestAPIURL2 CreateProjectEnvContentHintRedisRestAPIURL2 = CreateProjectEnvContentHintRedisRestAPIURL2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisRestAPIURL2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisRestAPIURL2 = &createProjectEnvContentHintRedisRestAPIURL2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisRestAPIURL2
		return nil
	}

	var createProjectEnvContentHintPostgresUser2 CreateProjectEnvContentHintPostgresUser2 = CreateProjectEnvContentHintPostgresUser2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresUser2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresUser2 = &createProjectEnvContentHintPostgresUser2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresUser2
		return nil
	}

	var createProjectEnvContentHintRedisURL2 CreateProjectEnvContentHintRedisURL2 = CreateProjectEnvContentHintRedisURL2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisURL2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisURL2 = &createProjectEnvContentHintRedisURL2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintRedisURL2
		return nil
	}

	var createProjectEnvContentHintPostgresHost2 CreateProjectEnvContentHintPostgresHost2 = CreateProjectEnvContentHintPostgresHost2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresHost2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresHost2 = &createProjectEnvContentHintPostgresHost2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresHost2
		return nil
	}

	var createProjectEnvContentHintPostgresPrismaURL2 CreateProjectEnvContentHintPostgresPrismaURL2 = CreateProjectEnvContentHintPostgresPrismaURL2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresPrismaURL2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresPrismaURL2 = &createProjectEnvContentHintPostgresPrismaURL2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresPrismaURL2
		return nil
	}

	var createProjectEnvContentHintPostgresDatabase2 CreateProjectEnvContentHintPostgresDatabase2 = CreateProjectEnvContentHintPostgresDatabase2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresDatabase2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresDatabase2 = &createProjectEnvContentHintPostgresDatabase2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresDatabase2
		return nil
	}

	var createProjectEnvContentHintPostgresURLNoSsl2 CreateProjectEnvContentHintPostgresURLNoSsl2 = CreateProjectEnvContentHintPostgresURLNoSsl2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresURLNoSsl2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresURLNoSsl2 = &createProjectEnvContentHintPostgresURLNoSsl2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintPostgresURLNoSsl2
		return nil
	}

	var createProjectEnvContentHintFlagsConnectionString2 CreateProjectEnvContentHintFlagsConnectionString2 = CreateProjectEnvContentHintFlagsConnectionString2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintFlagsConnectionString2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintFlagsConnectionString2 = &createProjectEnvContentHintFlagsConnectionString2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintFlagsConnectionString2
		return nil
	}

	var createProjectEnvContentHintIntegrationStoreSecret2 CreateProjectEnvContentHintIntegrationStoreSecret2 = CreateProjectEnvContentHintIntegrationStoreSecret2{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintIntegrationStoreSecret2, "", true, true); err == nil {
		u.CreateProjectEnvContentHintIntegrationStoreSecret2 = &createProjectEnvContentHintIntegrationStoreSecret2
		u.Type = CreateProjectEnvContentHintUnion2TypeCreateProjectEnvContentHintIntegrationStoreSecret2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvContentHintUnion2", string(data))
}

func (u CreateProjectEnvContentHintUnion2) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvContentHintRedisURL2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisURL2, "", true)
	}

	if u.CreateProjectEnvContentHintRedisRestAPIURL2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisRestAPIURL2, "", true)
	}

	if u.CreateProjectEnvContentHintRedisRestAPIToken2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisRestAPIToken2, "", true)
	}

	if u.CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisRestAPIReadOnlyToken2, "", true)
	}

	if u.CreateProjectEnvContentHintBlobReadWriteToken2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintBlobReadWriteToken2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresURL2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresURL2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresURLNonPooling2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresURLNonPooling2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresPrismaURL2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresPrismaURL2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresUser2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresUser2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresHost2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresHost2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresPassword2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresPassword2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresDatabase2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresDatabase2, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresURLNoSsl2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresURLNoSsl2, "", true)
	}

	if u.CreateProjectEnvContentHintIntegrationStoreSecret2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintIntegrationStoreSecret2, "", true)
	}

	if u.CreateProjectEnvContentHintFlagsConnectionString2 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintFlagsConnectionString2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvContentHintUnion2: all fields are null")
}

type CreatedTypeFlagsSecret2 string

const (
	CreatedTypeFlagsSecret2FlagsSecret CreatedTypeFlagsSecret2 = "flags-secret"
)

func (e CreatedTypeFlagsSecret2) ToPointer() *CreatedTypeFlagsSecret2 {
	return &e
}
func (e *CreatedTypeFlagsSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreatedTypeFlagsSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeFlagsSecret2: %v", v)
	}
}

// CreateProjectEnvInternalContentHint2 - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectEnvInternalContentHint2 struct {
	Type CreatedTypeFlagsSecret2 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreateProjectEnvInternalContentHint2) GetType() CreatedTypeFlagsSecret2 {
	if o == nil {
		return CreatedTypeFlagsSecret2("")
	}
	return o.Type
}

func (o *CreateProjectEnvInternalContentHint2) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type Created2 struct {
	Target *CreatedTargetUnion2 `json:"target,omitempty"`
	Type   *CreatedType2        `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                            `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                              `json:"decrypted,omitempty"`
	Value             *string                            `json:"value,omitempty"`
	VsmValue          *string                            `json:"vsmValue,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Key               *string                            `json:"key,omitempty"`
	ConfigurationID   *string                            `json:"configurationId,omitempty"`
	CreatedAt         *float64                           `json:"createdAt,omitempty"`
	UpdatedAt         *float64                           `json:"updatedAt,omitempty"`
	CreatedBy         *string                            `json:"createdBy,omitempty"`
	UpdatedBy         *string                            `json:"updatedBy,omitempty"`
	GitBranch         *string                            `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                            `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreateProjectEnvContentHintUnion2 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *CreateProjectEnvInternalContentHint2 `json:"internalContentHint,omitempty"`
	Comment              *string                               `json:"comment,omitempty"`
	CustomEnvironmentIds []string                              `json:"customEnvironmentIds,omitempty"`
	System               *bool                                 `json:"system,omitempty"`
}

func (o *Created2) GetTarget() *CreatedTargetUnion2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Created2) GetType() *CreatedType2 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Created2) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *Created2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Created2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Created2) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *Created2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Created2) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Created2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Created2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Created2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Created2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Created2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Created2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Created2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Created2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Created2) GetContentHint() *CreateProjectEnvContentHintUnion2 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Created2) GetInternalContentHint() *CreateProjectEnvInternalContentHint2 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Created2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Created2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *Created2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type CreatedTargetEnum2 string

const (
	CreatedTargetEnum2Production  CreatedTargetEnum2 = "production"
	CreatedTargetEnum2Preview     CreatedTargetEnum2 = "preview"
	CreatedTargetEnum2Development CreatedTargetEnum2 = "development"
)

func (e CreatedTargetEnum2) ToPointer() *CreatedTargetEnum2 {
	return &e
}
func (e *CreatedTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreatedTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTargetEnum2: %v", v)
	}
}

type CreatedTargetEnum1 string

const (
	CreatedTargetEnum1Production  CreatedTargetEnum1 = "production"
	CreatedTargetEnum1Preview     CreatedTargetEnum1 = "preview"
	CreatedTargetEnum1Development CreatedTargetEnum1 = "development"
)

func (e CreatedTargetEnum1) ToPointer() *CreatedTargetEnum1 {
	return &e
}
func (e *CreatedTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreatedTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTargetEnum1: %v", v)
	}
}

type CreatedTargetUnion1Type string

const (
	CreatedTargetUnion1TypeArrayOfCreatedTargetEnum1 CreatedTargetUnion1Type = "arrayOfCreatedTargetEnum1"
	CreatedTargetUnion1TypeCreatedTargetEnum2        CreatedTargetUnion1Type = "created_target_enum_2"
)

type CreatedTargetUnion1 struct {
	ArrayOfCreatedTargetEnum1 []CreatedTargetEnum1 `queryParam:"inline"`
	CreatedTargetEnum2        *CreatedTargetEnum2  `queryParam:"inline"`

	Type CreatedTargetUnion1Type
}

func CreateCreatedTargetUnion1ArrayOfCreatedTargetEnum1(arrayOfCreatedTargetEnum1 []CreatedTargetEnum1) CreatedTargetUnion1 {
	typ := CreatedTargetUnion1TypeArrayOfCreatedTargetEnum1

	return CreatedTargetUnion1{
		ArrayOfCreatedTargetEnum1: arrayOfCreatedTargetEnum1,
		Type:                      typ,
	}
}

func CreateCreatedTargetUnion1CreatedTargetEnum2(createdTargetEnum2 CreatedTargetEnum2) CreatedTargetUnion1 {
	typ := CreatedTargetUnion1TypeCreatedTargetEnum2

	return CreatedTargetUnion1{
		CreatedTargetEnum2: &createdTargetEnum2,
		Type:               typ,
	}
}

func (u *CreatedTargetUnion1) UnmarshalJSON(data []byte) error {

	var arrayOfCreatedTargetEnum1 []CreatedTargetEnum1 = []CreatedTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreatedTargetEnum1, "", true, true); err == nil {
		u.ArrayOfCreatedTargetEnum1 = arrayOfCreatedTargetEnum1
		u.Type = CreatedTargetUnion1TypeArrayOfCreatedTargetEnum1
		return nil
	}

	var createdTargetEnum2 CreatedTargetEnum2 = CreatedTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &createdTargetEnum2, "", true, true); err == nil {
		u.CreatedTargetEnum2 = &createdTargetEnum2
		u.Type = CreatedTargetUnion1TypeCreatedTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatedTargetUnion1", string(data))
}

func (u CreatedTargetUnion1) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreatedTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreatedTargetEnum1, "", true)
	}

	if u.CreatedTargetEnum2 != nil {
		return utils.MarshalJSON(u.CreatedTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type CreatedTargetUnion1: all fields are null")
}

type CreatedType1 string

const (
	CreatedType1System    CreatedType1 = "system"
	CreatedType1Encrypted CreatedType1 = "encrypted"
	CreatedType1Plain     CreatedType1 = "plain"
	CreatedType1Sensitive CreatedType1 = "sensitive"
	CreatedType1Secret    CreatedType1 = "secret"
)

func (e CreatedType1) ToPointer() *CreatedType1 {
	return &e
}
func (e *CreatedType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = CreatedType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedType1: %v", v)
	}
}

type CreatedTypeFlagsConnectionString1 string

const (
	CreatedTypeFlagsConnectionString1FlagsConnectionString CreatedTypeFlagsConnectionString1 = "flags-connection-string"
)

func (e CreatedTypeFlagsConnectionString1) ToPointer() *CreatedTypeFlagsConnectionString1 {
	return &e
}
func (e *CreatedTypeFlagsConnectionString1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = CreatedTypeFlagsConnectionString1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeFlagsConnectionString1: %v", v)
	}
}

type CreateProjectEnvContentHintFlagsConnectionString1 struct {
	Type      CreatedTypeFlagsConnectionString1 `json:"type"`
	ProjectID string                            `json:"projectId"`
}

func (o *CreateProjectEnvContentHintFlagsConnectionString1) GetType() CreatedTypeFlagsConnectionString1 {
	if o == nil {
		return CreatedTypeFlagsConnectionString1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintFlagsConnectionString1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type CreatedTypeIntegrationStoreSecret1 string

const (
	CreatedTypeIntegrationStoreSecret1IntegrationStoreSecret CreatedTypeIntegrationStoreSecret1 = "integration-store-secret"
)

func (e CreatedTypeIntegrationStoreSecret1) ToPointer() *CreatedTypeIntegrationStoreSecret1 {
	return &e
}
func (e *CreatedTypeIntegrationStoreSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = CreatedTypeIntegrationStoreSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeIntegrationStoreSecret1: %v", v)
	}
}

type CreateProjectEnvContentHintIntegrationStoreSecret1 struct {
	Type                       CreatedTypeIntegrationStoreSecret1 `json:"type"`
	StoreID                    string                             `json:"storeId"`
	IntegrationID              string                             `json:"integrationId"`
	IntegrationProductID       string                             `json:"integrationProductId"`
	IntegrationConfigurationID string                             `json:"integrationConfigurationId"`
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret1) GetType() CreatedTypeIntegrationStoreSecret1 {
	if o == nil {
		return CreatedTypeIntegrationStoreSecret1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *CreateProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type CreatedTypePostgresURLNoSsl1 string

const (
	CreatedTypePostgresURLNoSsl1PostgresURLNoSsl CreatedTypePostgresURLNoSsl1 = "postgres-url-no-ssl"
)

func (e CreatedTypePostgresURLNoSsl1) ToPointer() *CreatedTypePostgresURLNoSsl1 {
	return &e
}
func (e *CreatedTypePostgresURLNoSsl1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = CreatedTypePostgresURLNoSsl1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresURLNoSsl1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresURLNoSsl1 struct {
	Type    CreatedTypePostgresURLNoSsl1 `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresURLNoSsl1) GetType() CreatedTypePostgresURLNoSsl1 {
	if o == nil {
		return CreatedTypePostgresURLNoSsl1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresURLNoSsl1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresDatabase1 string

const (
	CreatedTypePostgresDatabase1PostgresDatabase CreatedTypePostgresDatabase1 = "postgres-database"
)

func (e CreatedTypePostgresDatabase1) ToPointer() *CreatedTypePostgresDatabase1 {
	return &e
}
func (e *CreatedTypePostgresDatabase1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = CreatedTypePostgresDatabase1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresDatabase1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresDatabase1 struct {
	Type    CreatedTypePostgresDatabase1 `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresDatabase1) GetType() CreatedTypePostgresDatabase1 {
	if o == nil {
		return CreatedTypePostgresDatabase1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresDatabase1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresPassword1 string

const (
	CreatedTypePostgresPassword1PostgresPassword CreatedTypePostgresPassword1 = "postgres-password"
)

func (e CreatedTypePostgresPassword1) ToPointer() *CreatedTypePostgresPassword1 {
	return &e
}
func (e *CreatedTypePostgresPassword1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = CreatedTypePostgresPassword1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresPassword1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresPassword1 struct {
	Type    CreatedTypePostgresPassword1 `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresPassword1) GetType() CreatedTypePostgresPassword1 {
	if o == nil {
		return CreatedTypePostgresPassword1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresPassword1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresHost1 string

const (
	CreatedTypePostgresHost1PostgresHost CreatedTypePostgresHost1 = "postgres-host"
)

func (e CreatedTypePostgresHost1) ToPointer() *CreatedTypePostgresHost1 {
	return &e
}
func (e *CreatedTypePostgresHost1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = CreatedTypePostgresHost1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresHost1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresHost1 struct {
	Type    CreatedTypePostgresHost1 `json:"type"`
	StoreID string                   `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresHost1) GetType() CreatedTypePostgresHost1 {
	if o == nil {
		return CreatedTypePostgresHost1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresHost1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresUser1 string

const (
	CreatedTypePostgresUser1PostgresUser CreatedTypePostgresUser1 = "postgres-user"
)

func (e CreatedTypePostgresUser1) ToPointer() *CreatedTypePostgresUser1 {
	return &e
}
func (e *CreatedTypePostgresUser1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = CreatedTypePostgresUser1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresUser1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresUser1 struct {
	Type    CreatedTypePostgresUser1 `json:"type"`
	StoreID string                   `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresUser1) GetType() CreatedTypePostgresUser1 {
	if o == nil {
		return CreatedTypePostgresUser1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresUser1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresPrismaURL1 string

const (
	CreatedTypePostgresPrismaURL1PostgresPrismaURL CreatedTypePostgresPrismaURL1 = "postgres-prisma-url"
)

func (e CreatedTypePostgresPrismaURL1) ToPointer() *CreatedTypePostgresPrismaURL1 {
	return &e
}
func (e *CreatedTypePostgresPrismaURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = CreatedTypePostgresPrismaURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresPrismaURL1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresPrismaURL1 struct {
	Type    CreatedTypePostgresPrismaURL1 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresPrismaURL1) GetType() CreatedTypePostgresPrismaURL1 {
	if o == nil {
		return CreatedTypePostgresPrismaURL1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresPrismaURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresURLNonPooling1 string

const (
	CreatedTypePostgresURLNonPooling1PostgresURLNonPooling CreatedTypePostgresURLNonPooling1 = "postgres-url-non-pooling"
)

func (e CreatedTypePostgresURLNonPooling1) ToPointer() *CreatedTypePostgresURLNonPooling1 {
	return &e
}
func (e *CreatedTypePostgresURLNonPooling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = CreatedTypePostgresURLNonPooling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresURLNonPooling1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresURLNonPooling1 struct {
	Type    CreatedTypePostgresURLNonPooling1 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresURLNonPooling1) GetType() CreatedTypePostgresURLNonPooling1 {
	if o == nil {
		return CreatedTypePostgresURLNonPooling1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresURLNonPooling1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypePostgresURL1 string

const (
	CreatedTypePostgresURL1PostgresURL CreatedTypePostgresURL1 = "postgres-url"
)

func (e CreatedTypePostgresURL1) ToPointer() *CreatedTypePostgresURL1 {
	return &e
}
func (e *CreatedTypePostgresURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = CreatedTypePostgresURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypePostgresURL1: %v", v)
	}
}

type CreateProjectEnvContentHintPostgresURL1 struct {
	Type    CreatedTypePostgresURL1 `json:"type"`
	StoreID string                  `json:"storeId"`
}

func (o *CreateProjectEnvContentHintPostgresURL1) GetType() CreatedTypePostgresURL1 {
	if o == nil {
		return CreatedTypePostgresURL1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintPostgresURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeBlobReadWriteToken1 string

const (
	CreatedTypeBlobReadWriteToken1BlobReadWriteToken CreatedTypeBlobReadWriteToken1 = "blob-read-write-token"
)

func (e CreatedTypeBlobReadWriteToken1) ToPointer() *CreatedTypeBlobReadWriteToken1 {
	return &e
}
func (e *CreatedTypeBlobReadWriteToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = CreatedTypeBlobReadWriteToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeBlobReadWriteToken1: %v", v)
	}
}

type CreateProjectEnvContentHintBlobReadWriteToken1 struct {
	Type    CreatedTypeBlobReadWriteToken1 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *CreateProjectEnvContentHintBlobReadWriteToken1) GetType() CreatedTypeBlobReadWriteToken1 {
	if o == nil {
		return CreatedTypeBlobReadWriteToken1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintBlobReadWriteToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisRestAPIReadOnlyToken1 string

const (
	CreatedTypeRedisRestAPIReadOnlyToken1RedisRestAPIReadOnlyToken CreatedTypeRedisRestAPIReadOnlyToken1 = "redis-rest-api-read-only-token"
)

func (e CreatedTypeRedisRestAPIReadOnlyToken1) ToPointer() *CreatedTypeRedisRestAPIReadOnlyToken1 {
	return &e
}
func (e *CreatedTypeRedisRestAPIReadOnlyToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = CreatedTypeRedisRestAPIReadOnlyToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisRestAPIReadOnlyToken1: %v", v)
	}
}

type CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 struct {
	Type    CreatedTypeRedisRestAPIReadOnlyToken1 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetType() CreatedTypeRedisRestAPIReadOnlyToken1 {
	if o == nil {
		return CreatedTypeRedisRestAPIReadOnlyToken1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisRestAPIToken1 string

const (
	CreatedTypeRedisRestAPIToken1RedisRestAPIToken CreatedTypeRedisRestAPIToken1 = "redis-rest-api-token"
)

func (e CreatedTypeRedisRestAPIToken1) ToPointer() *CreatedTypeRedisRestAPIToken1 {
	return &e
}
func (e *CreatedTypeRedisRestAPIToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = CreatedTypeRedisRestAPIToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisRestAPIToken1: %v", v)
	}
}

type CreateProjectEnvContentHintRedisRestAPIToken1 struct {
	Type    CreatedTypeRedisRestAPIToken1 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisRestAPIToken1) GetType() CreatedTypeRedisRestAPIToken1 {
	if o == nil {
		return CreatedTypeRedisRestAPIToken1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisRestAPIToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisRestAPIURL1 string

const (
	CreatedTypeRedisRestAPIURL1RedisRestAPIURL CreatedTypeRedisRestAPIURL1 = "redis-rest-api-url"
)

func (e CreatedTypeRedisRestAPIURL1) ToPointer() *CreatedTypeRedisRestAPIURL1 {
	return &e
}
func (e *CreatedTypeRedisRestAPIURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = CreatedTypeRedisRestAPIURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisRestAPIURL1: %v", v)
	}
}

type CreateProjectEnvContentHintRedisRestAPIURL1 struct {
	Type    CreatedTypeRedisRestAPIURL1 `json:"type"`
	StoreID string                      `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisRestAPIURL1) GetType() CreatedTypeRedisRestAPIURL1 {
	if o == nil {
		return CreatedTypeRedisRestAPIURL1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisRestAPIURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreatedTypeRedisURL1 string

const (
	CreatedTypeRedisURL1RedisURL CreatedTypeRedisURL1 = "redis-url"
)

func (e CreatedTypeRedisURL1) ToPointer() *CreatedTypeRedisURL1 {
	return &e
}
func (e *CreatedTypeRedisURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = CreatedTypeRedisURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeRedisURL1: %v", v)
	}
}

type CreateProjectEnvContentHintRedisURL1 struct {
	Type    CreatedTypeRedisURL1 `json:"type"`
	StoreID string               `json:"storeId"`
}

func (o *CreateProjectEnvContentHintRedisURL1) GetType() CreatedTypeRedisURL1 {
	if o == nil {
		return CreatedTypeRedisURL1("")
	}
	return o.Type
}

func (o *CreateProjectEnvContentHintRedisURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type CreateProjectEnvContentHintUnion1Type string

const (
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisURL1                  CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_RedisURL_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIURL1           CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_RedisRestAPIURL_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIToken1         CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_RedisRestAPIToken_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_RedisRestAPIReadOnlyToken_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintBlobReadWriteToken1        CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_BlobReadWriteToken_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURL1               CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresURL_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURLNonPooling1     CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresURLNonPooling_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresPrismaURL1         CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresPrismaURL_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresUser1              CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresUser_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresHost1              CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresHost_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresPassword1          CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresPassword_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresDatabase1          CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresDatabase_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURLNoSsl1          CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_PostgresURLNoSsl_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintIntegrationStoreSecret1    CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_IntegrationStoreSecret_1"
	CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintFlagsConnectionString1     CreateProjectEnvContentHintUnion1Type = "createProjectEnv_contentHint_FlagsConnectionString_1"
)

type CreateProjectEnvContentHintUnion1 struct {
	CreateProjectEnvContentHintRedisURL1                  *CreateProjectEnvContentHintRedisURL1                  `queryParam:"inline"`
	CreateProjectEnvContentHintRedisRestAPIURL1           *CreateProjectEnvContentHintRedisRestAPIURL1           `queryParam:"inline"`
	CreateProjectEnvContentHintRedisRestAPIToken1         *CreateProjectEnvContentHintRedisRestAPIToken1         `queryParam:"inline"`
	CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 *CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 `queryParam:"inline"`
	CreateProjectEnvContentHintBlobReadWriteToken1        *CreateProjectEnvContentHintBlobReadWriteToken1        `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresURL1               *CreateProjectEnvContentHintPostgresURL1               `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresURLNonPooling1     *CreateProjectEnvContentHintPostgresURLNonPooling1     `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresPrismaURL1         *CreateProjectEnvContentHintPostgresPrismaURL1         `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresUser1              *CreateProjectEnvContentHintPostgresUser1              `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresHost1              *CreateProjectEnvContentHintPostgresHost1              `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresPassword1          *CreateProjectEnvContentHintPostgresPassword1          `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresDatabase1          *CreateProjectEnvContentHintPostgresDatabase1          `queryParam:"inline"`
	CreateProjectEnvContentHintPostgresURLNoSsl1          *CreateProjectEnvContentHintPostgresURLNoSsl1          `queryParam:"inline"`
	CreateProjectEnvContentHintIntegrationStoreSecret1    *CreateProjectEnvContentHintIntegrationStoreSecret1    `queryParam:"inline"`
	CreateProjectEnvContentHintFlagsConnectionString1     *CreateProjectEnvContentHintFlagsConnectionString1     `queryParam:"inline"`

	Type CreateProjectEnvContentHintUnion1Type
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintRedisURL1(createProjectEnvContentHintRedisURL1 CreateProjectEnvContentHintRedisURL1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisURL1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintRedisURL1: &createProjectEnvContentHintRedisURL1,
		Type:                                 typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintRedisRestAPIURL1(createProjectEnvContentHintRedisRestAPIURL1 CreateProjectEnvContentHintRedisRestAPIURL1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIURL1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintRedisRestAPIURL1: &createProjectEnvContentHintRedisRestAPIURL1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintRedisRestAPIToken1(createProjectEnvContentHintRedisRestAPIToken1 CreateProjectEnvContentHintRedisRestAPIToken1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIToken1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintRedisRestAPIToken1: &createProjectEnvContentHintRedisRestAPIToken1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1(createProjectEnvContentHintRedisRestAPIReadOnlyToken1 CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIReadOnlyToken1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1: &createProjectEnvContentHintRedisRestAPIReadOnlyToken1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintBlobReadWriteToken1(createProjectEnvContentHintBlobReadWriteToken1 CreateProjectEnvContentHintBlobReadWriteToken1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintBlobReadWriteToken1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintBlobReadWriteToken1: &createProjectEnvContentHintBlobReadWriteToken1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresURL1(createProjectEnvContentHintPostgresURL1 CreateProjectEnvContentHintPostgresURL1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURL1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresURL1: &createProjectEnvContentHintPostgresURL1,
		Type:                                    typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresURLNonPooling1(createProjectEnvContentHintPostgresURLNonPooling1 CreateProjectEnvContentHintPostgresURLNonPooling1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURLNonPooling1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresURLNonPooling1: &createProjectEnvContentHintPostgresURLNonPooling1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresPrismaURL1(createProjectEnvContentHintPostgresPrismaURL1 CreateProjectEnvContentHintPostgresPrismaURL1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresPrismaURL1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresPrismaURL1: &createProjectEnvContentHintPostgresPrismaURL1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresUser1(createProjectEnvContentHintPostgresUser1 CreateProjectEnvContentHintPostgresUser1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresUser1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresUser1: &createProjectEnvContentHintPostgresUser1,
		Type:                                     typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresHost1(createProjectEnvContentHintPostgresHost1 CreateProjectEnvContentHintPostgresHost1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresHost1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresHost1: &createProjectEnvContentHintPostgresHost1,
		Type:                                     typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresPassword1(createProjectEnvContentHintPostgresPassword1 CreateProjectEnvContentHintPostgresPassword1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresPassword1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresPassword1: &createProjectEnvContentHintPostgresPassword1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresDatabase1(createProjectEnvContentHintPostgresDatabase1 CreateProjectEnvContentHintPostgresDatabase1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresDatabase1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresDatabase1: &createProjectEnvContentHintPostgresDatabase1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintPostgresURLNoSsl1(createProjectEnvContentHintPostgresURLNoSsl1 CreateProjectEnvContentHintPostgresURLNoSsl1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURLNoSsl1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintPostgresURLNoSsl1: &createProjectEnvContentHintPostgresURLNoSsl1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintIntegrationStoreSecret1(createProjectEnvContentHintIntegrationStoreSecret1 CreateProjectEnvContentHintIntegrationStoreSecret1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintIntegrationStoreSecret1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintIntegrationStoreSecret1: &createProjectEnvContentHintIntegrationStoreSecret1,
		Type: typ,
	}
}

func CreateCreateProjectEnvContentHintUnion1CreateProjectEnvContentHintFlagsConnectionString1(createProjectEnvContentHintFlagsConnectionString1 CreateProjectEnvContentHintFlagsConnectionString1) CreateProjectEnvContentHintUnion1 {
	typ := CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintFlagsConnectionString1

	return CreateProjectEnvContentHintUnion1{
		CreateProjectEnvContentHintFlagsConnectionString1: &createProjectEnvContentHintFlagsConnectionString1,
		Type: typ,
	}
}

func (u *CreateProjectEnvContentHintUnion1) UnmarshalJSON(data []byte) error {

	var createProjectEnvContentHintPostgresURLNonPooling1 CreateProjectEnvContentHintPostgresURLNonPooling1 = CreateProjectEnvContentHintPostgresURLNonPooling1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresURLNonPooling1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresURLNonPooling1 = &createProjectEnvContentHintPostgresURLNonPooling1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURLNonPooling1
		return nil
	}

	var createProjectEnvContentHintPostgresPassword1 CreateProjectEnvContentHintPostgresPassword1 = CreateProjectEnvContentHintPostgresPassword1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresPassword1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresPassword1 = &createProjectEnvContentHintPostgresPassword1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresPassword1
		return nil
	}

	var createProjectEnvContentHintRedisRestAPIToken1 CreateProjectEnvContentHintRedisRestAPIToken1 = CreateProjectEnvContentHintRedisRestAPIToken1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisRestAPIToken1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisRestAPIToken1 = &createProjectEnvContentHintRedisRestAPIToken1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIToken1
		return nil
	}

	var createProjectEnvContentHintRedisRestAPIReadOnlyToken1 CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 = CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisRestAPIReadOnlyToken1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 = &createProjectEnvContentHintRedisRestAPIReadOnlyToken1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIReadOnlyToken1
		return nil
	}

	var createProjectEnvContentHintBlobReadWriteToken1 CreateProjectEnvContentHintBlobReadWriteToken1 = CreateProjectEnvContentHintBlobReadWriteToken1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintBlobReadWriteToken1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintBlobReadWriteToken1 = &createProjectEnvContentHintBlobReadWriteToken1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintBlobReadWriteToken1
		return nil
	}

	var createProjectEnvContentHintPostgresURL1 CreateProjectEnvContentHintPostgresURL1 = CreateProjectEnvContentHintPostgresURL1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresURL1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresURL1 = &createProjectEnvContentHintPostgresURL1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURL1
		return nil
	}

	var createProjectEnvContentHintRedisRestAPIURL1 CreateProjectEnvContentHintRedisRestAPIURL1 = CreateProjectEnvContentHintRedisRestAPIURL1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisRestAPIURL1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisRestAPIURL1 = &createProjectEnvContentHintRedisRestAPIURL1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisRestAPIURL1
		return nil
	}

	var createProjectEnvContentHintPostgresUser1 CreateProjectEnvContentHintPostgresUser1 = CreateProjectEnvContentHintPostgresUser1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresUser1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresUser1 = &createProjectEnvContentHintPostgresUser1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresUser1
		return nil
	}

	var createProjectEnvContentHintRedisURL1 CreateProjectEnvContentHintRedisURL1 = CreateProjectEnvContentHintRedisURL1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintRedisURL1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintRedisURL1 = &createProjectEnvContentHintRedisURL1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintRedisURL1
		return nil
	}

	var createProjectEnvContentHintPostgresHost1 CreateProjectEnvContentHintPostgresHost1 = CreateProjectEnvContentHintPostgresHost1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresHost1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresHost1 = &createProjectEnvContentHintPostgresHost1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresHost1
		return nil
	}

	var createProjectEnvContentHintPostgresPrismaURL1 CreateProjectEnvContentHintPostgresPrismaURL1 = CreateProjectEnvContentHintPostgresPrismaURL1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresPrismaURL1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresPrismaURL1 = &createProjectEnvContentHintPostgresPrismaURL1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresPrismaURL1
		return nil
	}

	var createProjectEnvContentHintPostgresDatabase1 CreateProjectEnvContentHintPostgresDatabase1 = CreateProjectEnvContentHintPostgresDatabase1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresDatabase1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresDatabase1 = &createProjectEnvContentHintPostgresDatabase1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresDatabase1
		return nil
	}

	var createProjectEnvContentHintPostgresURLNoSsl1 CreateProjectEnvContentHintPostgresURLNoSsl1 = CreateProjectEnvContentHintPostgresURLNoSsl1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintPostgresURLNoSsl1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintPostgresURLNoSsl1 = &createProjectEnvContentHintPostgresURLNoSsl1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintPostgresURLNoSsl1
		return nil
	}

	var createProjectEnvContentHintFlagsConnectionString1 CreateProjectEnvContentHintFlagsConnectionString1 = CreateProjectEnvContentHintFlagsConnectionString1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintFlagsConnectionString1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintFlagsConnectionString1 = &createProjectEnvContentHintFlagsConnectionString1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintFlagsConnectionString1
		return nil
	}

	var createProjectEnvContentHintIntegrationStoreSecret1 CreateProjectEnvContentHintIntegrationStoreSecret1 = CreateProjectEnvContentHintIntegrationStoreSecret1{}
	if err := utils.UnmarshalJSON(data, &createProjectEnvContentHintIntegrationStoreSecret1, "", true, true); err == nil {
		u.CreateProjectEnvContentHintIntegrationStoreSecret1 = &createProjectEnvContentHintIntegrationStoreSecret1
		u.Type = CreateProjectEnvContentHintUnion1TypeCreateProjectEnvContentHintIntegrationStoreSecret1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvContentHintUnion1", string(data))
}

func (u CreateProjectEnvContentHintUnion1) MarshalJSON() ([]byte, error) {
	if u.CreateProjectEnvContentHintRedisURL1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisURL1, "", true)
	}

	if u.CreateProjectEnvContentHintRedisRestAPIURL1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisRestAPIURL1, "", true)
	}

	if u.CreateProjectEnvContentHintRedisRestAPIToken1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisRestAPIToken1, "", true)
	}

	if u.CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintRedisRestAPIReadOnlyToken1, "", true)
	}

	if u.CreateProjectEnvContentHintBlobReadWriteToken1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintBlobReadWriteToken1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresURL1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresURL1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresURLNonPooling1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresURLNonPooling1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresPrismaURL1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresPrismaURL1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresUser1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresUser1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresHost1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresHost1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresPassword1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresPassword1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresDatabase1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresDatabase1, "", true)
	}

	if u.CreateProjectEnvContentHintPostgresURLNoSsl1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintPostgresURLNoSsl1, "", true)
	}

	if u.CreateProjectEnvContentHintIntegrationStoreSecret1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintIntegrationStoreSecret1, "", true)
	}

	if u.CreateProjectEnvContentHintFlagsConnectionString1 != nil {
		return utils.MarshalJSON(u.CreateProjectEnvContentHintFlagsConnectionString1, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvContentHintUnion1: all fields are null")
}

type CreatedTypeFlagsSecret1 string

const (
	CreatedTypeFlagsSecret1FlagsSecret CreatedTypeFlagsSecret1 = "flags-secret"
)

func (e CreatedTypeFlagsSecret1) ToPointer() *CreatedTypeFlagsSecret1 {
	return &e
}
func (e *CreatedTypeFlagsSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = CreatedTypeFlagsSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreatedTypeFlagsSecret1: %v", v)
	}
}

// CreateProjectEnvInternalContentHint1 - Similar to `contentHints`, but should not be exposed to the user.
type CreateProjectEnvInternalContentHint1 struct {
	Type CreatedTypeFlagsSecret1 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *CreateProjectEnvInternalContentHint1) GetType() CreatedTypeFlagsSecret1 {
	if o == nil {
		return CreatedTypeFlagsSecret1("")
	}
	return o.Type
}

func (o *CreateProjectEnvInternalContentHint1) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type Created1 struct {
	Target *CreatedTargetUnion1 `json:"target,omitempty"`
	Type   *CreatedType1        `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                            `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                              `json:"decrypted,omitempty"`
	Value             *string                            `json:"value,omitempty"`
	VsmValue          *string                            `json:"vsmValue,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Key               *string                            `json:"key,omitempty"`
	ConfigurationID   *string                            `json:"configurationId,omitempty"`
	CreatedAt         *float64                           `json:"createdAt,omitempty"`
	UpdatedAt         *float64                           `json:"updatedAt,omitempty"`
	CreatedBy         *string                            `json:"createdBy,omitempty"`
	UpdatedBy         *string                            `json:"updatedBy,omitempty"`
	GitBranch         *string                            `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                            `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *CreateProjectEnvContentHintUnion1 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *CreateProjectEnvInternalContentHint1 `json:"internalContentHint,omitempty"`
	Comment              *string                               `json:"comment,omitempty"`
	CustomEnvironmentIds []string                              `json:"customEnvironmentIds,omitempty"`
	System               *bool                                 `json:"system,omitempty"`
}

func (o *Created1) GetTarget() *CreatedTargetUnion1 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Created1) GetType() *CreatedType1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Created1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *Created1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Created1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Created1) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *Created1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Created1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Created1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *Created1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Created1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Created1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Created1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Created1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *Created1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *Created1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *Created1) GetContentHint() *CreateProjectEnvContentHintUnion1 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *Created1) GetInternalContentHint() *CreateProjectEnvInternalContentHint1 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *Created1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Created1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *Created1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type CreatedUnionType string

const (
	CreatedUnionTypeCreated1        CreatedUnionType = "created_1"
	CreatedUnionTypeArrayOfCreated2 CreatedUnionType = "arrayOfCreated2"
)

type CreatedUnion struct {
	Created1        *Created1  `queryParam:"inline"`
	ArrayOfCreated2 []Created2 `queryParam:"inline"`

	Type CreatedUnionType
}

func CreateCreatedUnionCreated1(created1 Created1) CreatedUnion {
	typ := CreatedUnionTypeCreated1

	return CreatedUnion{
		Created1: &created1,
		Type:     typ,
	}
}

func CreateCreatedUnionArrayOfCreated2(arrayOfCreated2 []Created2) CreatedUnion {
	typ := CreatedUnionTypeArrayOfCreated2

	return CreatedUnion{
		ArrayOfCreated2: arrayOfCreated2,
		Type:            typ,
	}
}

func (u *CreatedUnion) UnmarshalJSON(data []byte) error {

	var created1 Created1 = Created1{}
	if err := utils.UnmarshalJSON(data, &created1, "", true, true); err == nil {
		u.Created1 = &created1
		u.Type = CreatedUnionTypeCreated1
		return nil
	}

	var arrayOfCreated2 []Created2 = []Created2{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreated2, "", true, true); err == nil {
		u.ArrayOfCreated2 = arrayOfCreated2
		u.Type = CreatedUnionTypeArrayOfCreated2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreatedUnion", string(data))
}

func (u CreatedUnion) MarshalJSON() ([]byte, error) {
	if u.Created1 != nil {
		return utils.MarshalJSON(u.Created1, "", true)
	}

	if u.ArrayOfCreated2 != nil {
		return utils.MarshalJSON(u.ArrayOfCreated2, "", true)
	}

	return nil, errors.New("could not marshal union type CreatedUnion: all fields are null")
}

type ValueEnum string

const (
	ValueEnumProduction  ValueEnum = "production"
	ValueEnumPreview     ValueEnum = "preview"
	ValueEnumDevelopment ValueEnum = "development"
)

func (e ValueEnum) ToPointer() *ValueEnum {
	return &e
}
func (e *ValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = ValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueEnum: %v", v)
	}
}

type CreateProjectEnvValueUnionType string

const (
	CreateProjectEnvValueUnionTypeStr              CreateProjectEnvValueUnionType = "str"
	CreateProjectEnvValueUnionTypeArrayOfValueEnum CreateProjectEnvValueUnionType = "arrayOfValueEnum"
)

type CreateProjectEnvValueUnion struct {
	Str              *string     `queryParam:"inline"`
	ArrayOfValueEnum []ValueEnum `queryParam:"inline"`

	Type CreateProjectEnvValueUnionType
}

func CreateCreateProjectEnvValueUnionStr(str string) CreateProjectEnvValueUnion {
	typ := CreateProjectEnvValueUnionTypeStr

	return CreateProjectEnvValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateProjectEnvValueUnionArrayOfValueEnum(arrayOfValueEnum []ValueEnum) CreateProjectEnvValueUnion {
	typ := CreateProjectEnvValueUnionTypeArrayOfValueEnum

	return CreateProjectEnvValueUnion{
		ArrayOfValueEnum: arrayOfValueEnum,
		Type:             typ,
	}
}

func (u *CreateProjectEnvValueUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = CreateProjectEnvValueUnionTypeStr
		return nil
	}

	var arrayOfValueEnum []ValueEnum = []ValueEnum{}
	if err := utils.UnmarshalJSON(data, &arrayOfValueEnum, "", true, true); err == nil {
		u.ArrayOfValueEnum = arrayOfValueEnum
		u.Type = CreateProjectEnvValueUnionTypeArrayOfValueEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateProjectEnvValueUnion", string(data))
}

func (u CreateProjectEnvValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfValueEnum != nil {
		return utils.MarshalJSON(u.ArrayOfValueEnum, "", true)
	}

	return nil, errors.New("could not marshal union type CreateProjectEnvValueUnion: all fields are null")
}

type TargetErrorEnum2 string

const (
	TargetErrorEnum2Production  TargetErrorEnum2 = "production"
	TargetErrorEnum2Preview     TargetErrorEnum2 = "preview"
	TargetErrorEnum2Development TargetErrorEnum2 = "development"
)

func (e TargetErrorEnum2) ToPointer() *TargetErrorEnum2 {
	return &e
}
func (e *TargetErrorEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = TargetErrorEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetErrorEnum2: %v", v)
	}
}

type TargetErrorEnum1 string

const (
	TargetErrorEnum1Production  TargetErrorEnum1 = "production"
	TargetErrorEnum1Preview     TargetErrorEnum1 = "preview"
	TargetErrorEnum1Development TargetErrorEnum1 = "development"
)

func (e TargetErrorEnum1) ToPointer() *TargetErrorEnum1 {
	return &e
}
func (e *TargetErrorEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = TargetErrorEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TargetErrorEnum1: %v", v)
	}
}

type ErrorTargetUnionType string

const (
	ErrorTargetUnionTypeArrayOfTargetErrorEnum1 ErrorTargetUnionType = "arrayOfTargetErrorEnum1"
	ErrorTargetUnionTypeTargetErrorEnum2        ErrorTargetUnionType = "target_error_enum_2"
)

type ErrorTargetUnion struct {
	ArrayOfTargetErrorEnum1 []TargetErrorEnum1 `queryParam:"inline"`
	TargetErrorEnum2        *TargetErrorEnum2  `queryParam:"inline"`

	Type ErrorTargetUnionType
}

func CreateErrorTargetUnionArrayOfTargetErrorEnum1(arrayOfTargetErrorEnum1 []TargetErrorEnum1) ErrorTargetUnion {
	typ := ErrorTargetUnionTypeArrayOfTargetErrorEnum1

	return ErrorTargetUnion{
		ArrayOfTargetErrorEnum1: arrayOfTargetErrorEnum1,
		Type:                    typ,
	}
}

func CreateErrorTargetUnionTargetErrorEnum2(targetErrorEnum2 TargetErrorEnum2) ErrorTargetUnion {
	typ := ErrorTargetUnionTypeTargetErrorEnum2

	return ErrorTargetUnion{
		TargetErrorEnum2: &targetErrorEnum2,
		Type:             typ,
	}
}

func (u *ErrorTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfTargetErrorEnum1 []TargetErrorEnum1 = []TargetErrorEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfTargetErrorEnum1, "", true, true); err == nil {
		u.ArrayOfTargetErrorEnum1 = arrayOfTargetErrorEnum1
		u.Type = ErrorTargetUnionTypeArrayOfTargetErrorEnum1
		return nil
	}

	var targetErrorEnum2 TargetErrorEnum2 = TargetErrorEnum2("")
	if err := utils.UnmarshalJSON(data, &targetErrorEnum2, "", true, true); err == nil {
		u.TargetErrorEnum2 = &targetErrorEnum2
		u.Type = ErrorTargetUnionTypeTargetErrorEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ErrorTargetUnion", string(data))
}

func (u ErrorTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfTargetErrorEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfTargetErrorEnum1, "", true)
	}

	if u.TargetErrorEnum2 != nil {
		return utils.MarshalJSON(u.TargetErrorEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type ErrorTargetUnion: all fields are null")
}

type CreateProjectEnvError struct {
	Code      string                      `json:"code"`
	Message   string                      `json:"message"`
	Key       *string                     `json:"key,omitempty"`
	EnvVarID  *string                     `json:"envVarId,omitempty"`
	EnvVarKey *string                     `json:"envVarKey,omitempty"`
	Action    *string                     `json:"action,omitempty"`
	Link      *string                     `json:"link,omitempty"`
	Value     *CreateProjectEnvValueUnion `json:"value,omitempty"`
	GitBranch *string                     `json:"gitBranch,omitempty"`
	Target    *ErrorTargetUnion           `json:"target,omitempty"`
	Project   *string                     `json:"project,omitempty"`
}

func (o *CreateProjectEnvError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateProjectEnvError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateProjectEnvError) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateProjectEnvError) GetEnvVarID() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarID
}

func (o *CreateProjectEnvError) GetEnvVarKey() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarKey
}

func (o *CreateProjectEnvError) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateProjectEnvError) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateProjectEnvError) GetValue() *CreateProjectEnvValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateProjectEnvError) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateProjectEnvError) GetTarget() *ErrorTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateProjectEnvError) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type Failed struct {
	Error CreateProjectEnvError `json:"error"`
}

func (o *Failed) GetError() CreateProjectEnvError {
	if o == nil {
		return CreateProjectEnvError{}
	}
	return o.Error
}

// CreateProjectEnvResponseBody - The environment variable was created successfully
type CreateProjectEnvResponseBody struct {
	Created CreatedUnion `json:"created"`
	Failed  []Failed     `json:"failed"`
}

func (o *CreateProjectEnvResponseBody) GetCreated() CreatedUnion {
	if o == nil {
		return CreatedUnion{}
	}
	return o.Created
}

func (o *CreateProjectEnvResponseBody) GetFailed() []Failed {
	if o == nil {
		return []Failed{}
	}
	return o.Failed
}

type CreateProjectEnvResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The environment variable was created successfully
	Object *CreateProjectEnvResponseBody
}

func (o *CreateProjectEnvResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateProjectEnvResponse) GetObject() *CreateProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
