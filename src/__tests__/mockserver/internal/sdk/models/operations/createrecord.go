// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// CreateRecordType10 - The type of record, it could be one of the valid DNS records.
type CreateRecordType10 string

const (
	CreateRecordType10A     CreateRecordType10 = "A"
	CreateRecordType10Aaaa  CreateRecordType10 = "AAAA"
	CreateRecordType10Alias CreateRecordType10 = "ALIAS"
	CreateRecordType10Caa   CreateRecordType10 = "CAA"
	CreateRecordType10Cname CreateRecordType10 = "CNAME"
	CreateRecordType10HTTPS CreateRecordType10 = "HTTPS"
	CreateRecordType10Mx    CreateRecordType10 = "MX"
	CreateRecordType10Srv   CreateRecordType10 = "SRV"
	CreateRecordType10Txt   CreateRecordType10 = "TXT"
	CreateRecordType10Ns    CreateRecordType10 = "NS"
)

func (e CreateRecordType10) ToPointer() *CreateRecordType10 {
	return &e
}
func (e *CreateRecordType10) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType10(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType10: %v", v)
	}
}

type CreateRecordHTTPS struct {
	Priority *float64 `json:"priority"`
	Target   string   `json:"target"`
	Params   *string  `json:"params,omitempty"`
}

func (o *CreateRecordHTTPS) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *CreateRecordHTTPS) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *CreateRecordHTTPS) GetParams() *string {
	if o == nil {
		return nil
	}
	return o.Params
}

type CreateRecordRequestBody10 struct {
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType10 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL   *float64          `json:"ttl,omitempty"`
	HTTPS CreateRecordHTTPS `json:"https"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody10) GetType() CreateRecordType10 {
	if o == nil {
		return CreateRecordType10("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody10) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody10) GetHTTPS() CreateRecordHTTPS {
	if o == nil {
		return CreateRecordHTTPS{}
	}
	return o.HTTPS
}

func (o *CreateRecordRequestBody10) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType9 - The type of record, it could be one of the valid DNS records.
type CreateRecordType9 string

const (
	CreateRecordType9A     CreateRecordType9 = "A"
	CreateRecordType9Aaaa  CreateRecordType9 = "AAAA"
	CreateRecordType9Alias CreateRecordType9 = "ALIAS"
	CreateRecordType9Caa   CreateRecordType9 = "CAA"
	CreateRecordType9Cname CreateRecordType9 = "CNAME"
	CreateRecordType9HTTPS CreateRecordType9 = "HTTPS"
	CreateRecordType9Mx    CreateRecordType9 = "MX"
	CreateRecordType9Srv   CreateRecordType9 = "SRV"
	CreateRecordType9Txt   CreateRecordType9 = "TXT"
	CreateRecordType9Ns    CreateRecordType9 = "NS"
)

func (e CreateRecordType9) ToPointer() *CreateRecordType9 {
	return &e
}
func (e *CreateRecordType9) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType9(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType9: %v", v)
	}
}

type CreateRecordRequestBody9 struct {
	// A subdomain name.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType9 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An NS domain value.
	Value *string `json:"value,omitempty"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody9) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody9) GetType() CreateRecordType9 {
	if o == nil {
		return CreateRecordType9("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody9) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody9) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateRecordRequestBody9) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType8 - The type of record, it could be one of the valid DNS records.
type CreateRecordType8 string

const (
	CreateRecordType8A     CreateRecordType8 = "A"
	CreateRecordType8Aaaa  CreateRecordType8 = "AAAA"
	CreateRecordType8Alias CreateRecordType8 = "ALIAS"
	CreateRecordType8Caa   CreateRecordType8 = "CAA"
	CreateRecordType8Cname CreateRecordType8 = "CNAME"
	CreateRecordType8HTTPS CreateRecordType8 = "HTTPS"
	CreateRecordType8Mx    CreateRecordType8 = "MX"
	CreateRecordType8Srv   CreateRecordType8 = "SRV"
	CreateRecordType8Txt   CreateRecordType8 = "TXT"
	CreateRecordType8Ns    CreateRecordType8 = "NS"
)

func (e CreateRecordType8) ToPointer() *CreateRecordType8 {
	return &e
}
func (e *CreateRecordType8) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType8(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType8: %v", v)
	}
}

type CreateRecordRequestBody8 struct {
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType8 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// A TXT record containing arbitrary text.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody8) GetType() CreateRecordType8 {
	if o == nil {
		return CreateRecordType8("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody8) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody8) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateRecordRequestBody8) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType7 - The type of record, it could be one of the valid DNS records.
type CreateRecordType7 string

const (
	CreateRecordType7A     CreateRecordType7 = "A"
	CreateRecordType7Aaaa  CreateRecordType7 = "AAAA"
	CreateRecordType7Alias CreateRecordType7 = "ALIAS"
	CreateRecordType7Caa   CreateRecordType7 = "CAA"
	CreateRecordType7Cname CreateRecordType7 = "CNAME"
	CreateRecordType7HTTPS CreateRecordType7 = "HTTPS"
	CreateRecordType7Mx    CreateRecordType7 = "MX"
	CreateRecordType7Srv   CreateRecordType7 = "SRV"
	CreateRecordType7Txt   CreateRecordType7 = "TXT"
	CreateRecordType7Ns    CreateRecordType7 = "NS"
)

func (e CreateRecordType7) ToPointer() *CreateRecordType7 {
	return &e
}
func (e *CreateRecordType7) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType7(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType7: %v", v)
	}
}

type CreateRecordSrv struct {
	Priority *float64 `json:"priority"`
	Weight   *float64 `json:"weight"`
	Port     *float64 `json:"port"`
	Target   string   `json:"target"`
}

func (o *CreateRecordSrv) GetPriority() *float64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *CreateRecordSrv) GetWeight() *float64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *CreateRecordSrv) GetPort() *float64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *CreateRecordSrv) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

type CreateRecordRequestBody7 struct {
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType7 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64        `json:"ttl,omitempty"`
	Srv CreateRecordSrv `json:"srv"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody7) GetType() CreateRecordType7 {
	if o == nil {
		return CreateRecordType7("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody7) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody7) GetSrv() CreateRecordSrv {
	if o == nil {
		return CreateRecordSrv{}
	}
	return o.Srv
}

func (o *CreateRecordRequestBody7) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType6 - The type of record, it could be one of the valid DNS records.
type CreateRecordType6 string

const (
	CreateRecordType6A     CreateRecordType6 = "A"
	CreateRecordType6Aaaa  CreateRecordType6 = "AAAA"
	CreateRecordType6Alias CreateRecordType6 = "ALIAS"
	CreateRecordType6Caa   CreateRecordType6 = "CAA"
	CreateRecordType6Cname CreateRecordType6 = "CNAME"
	CreateRecordType6HTTPS CreateRecordType6 = "HTTPS"
	CreateRecordType6Mx    CreateRecordType6 = "MX"
	CreateRecordType6Srv   CreateRecordType6 = "SRV"
	CreateRecordType6Txt   CreateRecordType6 = "TXT"
	CreateRecordType6Ns    CreateRecordType6 = "NS"
)

func (e CreateRecordType6) ToPointer() *CreateRecordType6 {
	return &e
}
func (e *CreateRecordType6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType6: %v", v)
	}
}

type CreateRecordRequestBody6 struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType6 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An MX record specifying the mail server responsible for accepting messages on behalf of the domain name.
	Value      string  `json:"value"`
	MxPriority float64 `json:"mxPriority"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody6) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody6) GetType() CreateRecordType6 {
	if o == nil {
		return CreateRecordType6("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody6) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody6) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateRecordRequestBody6) GetMxPriority() float64 {
	if o == nil {
		return 0.0
	}
	return o.MxPriority
}

func (o *CreateRecordRequestBody6) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType5 - The type of record, it could be one of the valid DNS records.
type CreateRecordType5 string

const (
	CreateRecordType5A     CreateRecordType5 = "A"
	CreateRecordType5Aaaa  CreateRecordType5 = "AAAA"
	CreateRecordType5Alias CreateRecordType5 = "ALIAS"
	CreateRecordType5Caa   CreateRecordType5 = "CAA"
	CreateRecordType5Cname CreateRecordType5 = "CNAME"
	CreateRecordType5HTTPS CreateRecordType5 = "HTTPS"
	CreateRecordType5Mx    CreateRecordType5 = "MX"
	CreateRecordType5Srv   CreateRecordType5 = "SRV"
	CreateRecordType5Txt   CreateRecordType5 = "TXT"
	CreateRecordType5Ns    CreateRecordType5 = "NS"
)

func (e CreateRecordType5) ToPointer() *CreateRecordType5 {
	return &e
}
func (e *CreateRecordType5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType5: %v", v)
	}
}

type CreateRecordRequestBody5 struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType5 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// A CNAME record mapping to another domain name.
	Value *string `json:"value,omitempty"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody5) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody5) GetType() CreateRecordType5 {
	if o == nil {
		return CreateRecordType5("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody5) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody5) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateRecordRequestBody5) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType4 - The type of record, it could be one of the valid DNS records.
type CreateRecordType4 string

const (
	CreateRecordType4A     CreateRecordType4 = "A"
	CreateRecordType4Aaaa  CreateRecordType4 = "AAAA"
	CreateRecordType4Alias CreateRecordType4 = "ALIAS"
	CreateRecordType4Caa   CreateRecordType4 = "CAA"
	CreateRecordType4Cname CreateRecordType4 = "CNAME"
	CreateRecordType4HTTPS CreateRecordType4 = "HTTPS"
	CreateRecordType4Mx    CreateRecordType4 = "MX"
	CreateRecordType4Srv   CreateRecordType4 = "SRV"
	CreateRecordType4Txt   CreateRecordType4 = "TXT"
	CreateRecordType4Ns    CreateRecordType4 = "NS"
)

func (e CreateRecordType4) ToPointer() *CreateRecordType4 {
	return &e
}
func (e *CreateRecordType4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType4: %v", v)
	}
}

type CreateRecordRequestBody4 struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType4 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// A CAA record to specify which Certificate Authorities (CAs) are allowed to issue certificates for the domain.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody4) GetType() CreateRecordType4 {
	if o == nil {
		return CreateRecordType4("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody4) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody4) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateRecordRequestBody4) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType3 - The type of record, it could be one of the valid DNS records.
type CreateRecordType3 string

const (
	CreateRecordType3A     CreateRecordType3 = "A"
	CreateRecordType3Aaaa  CreateRecordType3 = "AAAA"
	CreateRecordType3Alias CreateRecordType3 = "ALIAS"
	CreateRecordType3Caa   CreateRecordType3 = "CAA"
	CreateRecordType3Cname CreateRecordType3 = "CNAME"
	CreateRecordType3HTTPS CreateRecordType3 = "HTTPS"
	CreateRecordType3Mx    CreateRecordType3 = "MX"
	CreateRecordType3Srv   CreateRecordType3 = "SRV"
	CreateRecordType3Txt   CreateRecordType3 = "TXT"
	CreateRecordType3Ns    CreateRecordType3 = "NS"
)

func (e CreateRecordType3) ToPointer() *CreateRecordType3 {
	return &e
}
func (e *CreateRecordType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType3: %v", v)
	}
}

type CreateRecordRequestBody3 struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType3 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An ALIAS virtual record pointing to a hostname resolved to an A record on server side.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody3) GetType() CreateRecordType3 {
	if o == nil {
		return CreateRecordType3("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody3) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateRecordRequestBody3) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType2 - The type of record, it could be one of the valid DNS records.
type CreateRecordType2 string

const (
	CreateRecordType2A     CreateRecordType2 = "A"
	CreateRecordType2Aaaa  CreateRecordType2 = "AAAA"
	CreateRecordType2Alias CreateRecordType2 = "ALIAS"
	CreateRecordType2Caa   CreateRecordType2 = "CAA"
	CreateRecordType2Cname CreateRecordType2 = "CNAME"
	CreateRecordType2HTTPS CreateRecordType2 = "HTTPS"
	CreateRecordType2Mx    CreateRecordType2 = "MX"
	CreateRecordType2Srv   CreateRecordType2 = "SRV"
	CreateRecordType2Txt   CreateRecordType2 = "TXT"
	CreateRecordType2Ns    CreateRecordType2 = "NS"
)

func (e CreateRecordType2) ToPointer() *CreateRecordType2 {
	return &e
}
func (e *CreateRecordType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType2: %v", v)
	}
}

type CreateRecordRequestBody2 struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType2 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// An AAAA record pointing to an IPv6 address.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody2) GetType() CreateRecordType2 {
	if o == nil {
		return CreateRecordType2("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody2) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateRecordRequestBody2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateRecordType1 - The type of record, it could be one of the valid DNS records.
type CreateRecordType1 string

const (
	CreateRecordType1A     CreateRecordType1 = "A"
	CreateRecordType1Aaaa  CreateRecordType1 = "AAAA"
	CreateRecordType1Alias CreateRecordType1 = "ALIAS"
	CreateRecordType1Caa   CreateRecordType1 = "CAA"
	CreateRecordType1Cname CreateRecordType1 = "CNAME"
	CreateRecordType1HTTPS CreateRecordType1 = "HTTPS"
	CreateRecordType1Mx    CreateRecordType1 = "MX"
	CreateRecordType1Srv   CreateRecordType1 = "SRV"
	CreateRecordType1Txt   CreateRecordType1 = "TXT"
	CreateRecordType1Ns    CreateRecordType1 = "NS"
)

func (e CreateRecordType1) ToPointer() *CreateRecordType1 {
	return &e
}
func (e *CreateRecordType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = CreateRecordType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateRecordType1: %v", v)
	}
}

type CreateRecordRequestBody1 struct {
	// A subdomain name or an empty string for the root domain.
	Name string `json:"name"`
	// The type of record, it could be one of the valid DNS records.
	Type CreateRecordType1 `json:"type"`
	// The TTL value. Must be a number between 60 and 2147483647. Default value is 60.
	TTL *float64 `json:"ttl,omitempty"`
	// The record value must be a valid IPv4 address.
	Value string `json:"value"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *CreateRecordRequestBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateRecordRequestBody1) GetType() CreateRecordType1 {
	if o == nil {
		return CreateRecordType1("")
	}
	return o.Type
}

func (o *CreateRecordRequestBody1) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *CreateRecordRequestBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *CreateRecordRequestBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type CreateRecordRequestBodyType string

const (
	CreateRecordRequestBodyTypeCreateRecordRequestBody1  CreateRecordRequestBodyType = "createRecord_RequestBody_1"
	CreateRecordRequestBodyTypeCreateRecordRequestBody2  CreateRecordRequestBodyType = "createRecord_RequestBody_2"
	CreateRecordRequestBodyTypeCreateRecordRequestBody3  CreateRecordRequestBodyType = "createRecord_RequestBody_3"
	CreateRecordRequestBodyTypeCreateRecordRequestBody4  CreateRecordRequestBodyType = "createRecord_RequestBody_4"
	CreateRecordRequestBodyTypeCreateRecordRequestBody5  CreateRecordRequestBodyType = "createRecord_RequestBody_5"
	CreateRecordRequestBodyTypeCreateRecordRequestBody6  CreateRecordRequestBodyType = "createRecord_RequestBody_6"
	CreateRecordRequestBodyTypeCreateRecordRequestBody7  CreateRecordRequestBodyType = "createRecord_RequestBody_7"
	CreateRecordRequestBodyTypeCreateRecordRequestBody8  CreateRecordRequestBodyType = "createRecord_RequestBody_8"
	CreateRecordRequestBodyTypeCreateRecordRequestBody9  CreateRecordRequestBodyType = "createRecord_RequestBody_9"
	CreateRecordRequestBodyTypeCreateRecordRequestBody10 CreateRecordRequestBodyType = "createRecord_RequestBody_10"
)

type CreateRecordRequestBody struct {
	CreateRecordRequestBody1  *CreateRecordRequestBody1  `queryParam:"inline"`
	CreateRecordRequestBody2  *CreateRecordRequestBody2  `queryParam:"inline"`
	CreateRecordRequestBody3  *CreateRecordRequestBody3  `queryParam:"inline"`
	CreateRecordRequestBody4  *CreateRecordRequestBody4  `queryParam:"inline"`
	CreateRecordRequestBody5  *CreateRecordRequestBody5  `queryParam:"inline"`
	CreateRecordRequestBody6  *CreateRecordRequestBody6  `queryParam:"inline"`
	CreateRecordRequestBody7  *CreateRecordRequestBody7  `queryParam:"inline"`
	CreateRecordRequestBody8  *CreateRecordRequestBody8  `queryParam:"inline"`
	CreateRecordRequestBody9  *CreateRecordRequestBody9  `queryParam:"inline"`
	CreateRecordRequestBody10 *CreateRecordRequestBody10 `queryParam:"inline"`

	Type CreateRecordRequestBodyType
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody1(createRecordRequestBody1 CreateRecordRequestBody1) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody1

	return CreateRecordRequestBody{
		CreateRecordRequestBody1: &createRecordRequestBody1,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody2(createRecordRequestBody2 CreateRecordRequestBody2) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody2

	return CreateRecordRequestBody{
		CreateRecordRequestBody2: &createRecordRequestBody2,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody3(createRecordRequestBody3 CreateRecordRequestBody3) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody3

	return CreateRecordRequestBody{
		CreateRecordRequestBody3: &createRecordRequestBody3,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody4(createRecordRequestBody4 CreateRecordRequestBody4) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody4

	return CreateRecordRequestBody{
		CreateRecordRequestBody4: &createRecordRequestBody4,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody5(createRecordRequestBody5 CreateRecordRequestBody5) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody5

	return CreateRecordRequestBody{
		CreateRecordRequestBody5: &createRecordRequestBody5,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody6(createRecordRequestBody6 CreateRecordRequestBody6) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody6

	return CreateRecordRequestBody{
		CreateRecordRequestBody6: &createRecordRequestBody6,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody7(createRecordRequestBody7 CreateRecordRequestBody7) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody7

	return CreateRecordRequestBody{
		CreateRecordRequestBody7: &createRecordRequestBody7,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody8(createRecordRequestBody8 CreateRecordRequestBody8) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody8

	return CreateRecordRequestBody{
		CreateRecordRequestBody8: &createRecordRequestBody8,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody9(createRecordRequestBody9 CreateRecordRequestBody9) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody9

	return CreateRecordRequestBody{
		CreateRecordRequestBody9: &createRecordRequestBody9,
		Type:                     typ,
	}
}

func CreateCreateRecordRequestBodyCreateRecordRequestBody10(createRecordRequestBody10 CreateRecordRequestBody10) CreateRecordRequestBody {
	typ := CreateRecordRequestBodyTypeCreateRecordRequestBody10

	return CreateRecordRequestBody{
		CreateRecordRequestBody10: &createRecordRequestBody10,
		Type:                      typ,
	}
}

func (u *CreateRecordRequestBody) UnmarshalJSON(data []byte) error {

	var createRecordRequestBody7 CreateRecordRequestBody7 = CreateRecordRequestBody7{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody7, "", true, true); err == nil {
		u.CreateRecordRequestBody7 = &createRecordRequestBody7
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody7
		return nil
	}

	var createRecordRequestBody8 CreateRecordRequestBody8 = CreateRecordRequestBody8{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody8, "", true, true); err == nil {
		u.CreateRecordRequestBody8 = &createRecordRequestBody8
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody8
		return nil
	}

	var createRecordRequestBody10 CreateRecordRequestBody10 = CreateRecordRequestBody10{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody10, "", true, true); err == nil {
		u.CreateRecordRequestBody10 = &createRecordRequestBody10
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody10
		return nil
	}

	var createRecordRequestBody1 CreateRecordRequestBody1 = CreateRecordRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody1, "", true, true); err == nil {
		u.CreateRecordRequestBody1 = &createRecordRequestBody1
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody1
		return nil
	}

	var createRecordRequestBody2 CreateRecordRequestBody2 = CreateRecordRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody2, "", true, true); err == nil {
		u.CreateRecordRequestBody2 = &createRecordRequestBody2
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody2
		return nil
	}

	var createRecordRequestBody3 CreateRecordRequestBody3 = CreateRecordRequestBody3{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody3, "", true, true); err == nil {
		u.CreateRecordRequestBody3 = &createRecordRequestBody3
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody3
		return nil
	}

	var createRecordRequestBody4 CreateRecordRequestBody4 = CreateRecordRequestBody4{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody4, "", true, true); err == nil {
		u.CreateRecordRequestBody4 = &createRecordRequestBody4
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody4
		return nil
	}

	var createRecordRequestBody5 CreateRecordRequestBody5 = CreateRecordRequestBody5{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody5, "", true, true); err == nil {
		u.CreateRecordRequestBody5 = &createRecordRequestBody5
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody5
		return nil
	}

	var createRecordRequestBody9 CreateRecordRequestBody9 = CreateRecordRequestBody9{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody9, "", true, true); err == nil {
		u.CreateRecordRequestBody9 = &createRecordRequestBody9
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody9
		return nil
	}

	var createRecordRequestBody6 CreateRecordRequestBody6 = CreateRecordRequestBody6{}
	if err := utils.UnmarshalJSON(data, &createRecordRequestBody6, "", true, true); err == nil {
		u.CreateRecordRequestBody6 = &createRecordRequestBody6
		u.Type = CreateRecordRequestBodyTypeCreateRecordRequestBody6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRecordRequestBody", string(data))
}

func (u CreateRecordRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateRecordRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody1, "", true)
	}

	if u.CreateRecordRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody2, "", true)
	}

	if u.CreateRecordRequestBody3 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody3, "", true)
	}

	if u.CreateRecordRequestBody4 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody4, "", true)
	}

	if u.CreateRecordRequestBody5 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody5, "", true)
	}

	if u.CreateRecordRequestBody6 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody6, "", true)
	}

	if u.CreateRecordRequestBody7 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody7, "", true)
	}

	if u.CreateRecordRequestBody8 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody8, "", true)
	}

	if u.CreateRecordRequestBody9 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody9, "", true)
	}

	if u.CreateRecordRequestBody10 != nil {
		return utils.MarshalJSON(u.CreateRecordRequestBody10, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRecordRequestBody: all fields are null")
}

type CreateRecordRequest struct {
	// The domain used to create the DNS record.
	Domain string `pathParam:"style=simple,explode=false,name=domain"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                 `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateRecordRequestBody `request:"mediaType=application/json"`
}

func (o *CreateRecordRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *CreateRecordRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateRecordRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateRecordRequest) GetRequestBody() CreateRecordRequestBody {
	if o == nil {
		return CreateRecordRequestBody{}
	}
	return o.RequestBody
}

type CreateRecordResponseBody2 struct {
	// The id of the newly created DNS record
	UID string `json:"uid"`
}

func (o *CreateRecordResponseBody2) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

type CreateRecordResponseBody1 struct {
	UID     string  `json:"uid"`
	Updated float64 `json:"updated"`
}

func (o *CreateRecordResponseBody1) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *CreateRecordResponseBody1) GetUpdated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Updated
}

type CreateRecordResponseBodyType string

const (
	CreateRecordResponseBodyTypeCreateRecordResponseBody1 CreateRecordResponseBodyType = "createRecord_ResponseBody_1"
	CreateRecordResponseBodyTypeCreateRecordResponseBody2 CreateRecordResponseBodyType = "createRecord_ResponseBody_2"
)

// CreateRecordResponseBody - Successful response showing the uid of the newly created DNS record.
type CreateRecordResponseBody struct {
	CreateRecordResponseBody1 *CreateRecordResponseBody1 `queryParam:"inline"`
	CreateRecordResponseBody2 *CreateRecordResponseBody2 `queryParam:"inline"`

	Type CreateRecordResponseBodyType
}

func CreateCreateRecordResponseBodyCreateRecordResponseBody1(createRecordResponseBody1 CreateRecordResponseBody1) CreateRecordResponseBody {
	typ := CreateRecordResponseBodyTypeCreateRecordResponseBody1

	return CreateRecordResponseBody{
		CreateRecordResponseBody1: &createRecordResponseBody1,
		Type:                      typ,
	}
}

func CreateCreateRecordResponseBodyCreateRecordResponseBody2(createRecordResponseBody2 CreateRecordResponseBody2) CreateRecordResponseBody {
	typ := CreateRecordResponseBodyTypeCreateRecordResponseBody2

	return CreateRecordResponseBody{
		CreateRecordResponseBody2: &createRecordResponseBody2,
		Type:                      typ,
	}
}

func (u *CreateRecordResponseBody) UnmarshalJSON(data []byte) error {

	var createRecordResponseBody2 CreateRecordResponseBody2 = CreateRecordResponseBody2{}
	if err := utils.UnmarshalJSON(data, &createRecordResponseBody2, "", true, true); err == nil {
		u.CreateRecordResponseBody2 = &createRecordResponseBody2
		u.Type = CreateRecordResponseBodyTypeCreateRecordResponseBody2
		return nil
	}

	var createRecordResponseBody1 CreateRecordResponseBody1 = CreateRecordResponseBody1{}
	if err := utils.UnmarshalJSON(data, &createRecordResponseBody1, "", true, true); err == nil {
		u.CreateRecordResponseBody1 = &createRecordResponseBody1
		u.Type = CreateRecordResponseBodyTypeCreateRecordResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateRecordResponseBody", string(data))
}

func (u CreateRecordResponseBody) MarshalJSON() ([]byte, error) {
	if u.CreateRecordResponseBody1 != nil {
		return utils.MarshalJSON(u.CreateRecordResponseBody1, "", true)
	}

	if u.CreateRecordResponseBody2 != nil {
		return utils.MarshalJSON(u.CreateRecordResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateRecordResponseBody: all fields are null")
}

type CreateRecordResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response showing the uid of the newly created DNS record.
	OneOf *CreateRecordResponseBody
}

func (o *CreateRecordResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateRecordResponse) GetOneOf() *CreateRecordResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
