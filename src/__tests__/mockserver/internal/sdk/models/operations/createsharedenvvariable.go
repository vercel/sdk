// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type Ev2 struct {
	// The name of the Shared Environment Variable
	Key string `json:"key"`
	// The value of the Shared Environment Variable
	Value string `json:"value"`
	// A comment to add context on what this Shared Environment Variable is for
	Comment *string `json:"comment,omitempty"`
}

func (e Ev2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Ev2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"key", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *Ev2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Ev2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Ev2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateSharedEnvVariableTypeRequest2 - The type of environment variable
type CreateSharedEnvVariableTypeRequest2 string

const (
	CreateSharedEnvVariableTypeRequest2Encrypted CreateSharedEnvVariableTypeRequest2 = "encrypted"
	CreateSharedEnvVariableTypeRequest2Sensitive CreateSharedEnvVariableTypeRequest2 = "sensitive"
)

func (e CreateSharedEnvVariableTypeRequest2) ToPointer() *CreateSharedEnvVariableTypeRequest2 {
	return &e
}
func (e *CreateSharedEnvVariableTypeRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		*e = CreateSharedEnvVariableTypeRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableTypeRequest2: %v", v)
	}
}

type CreateSharedEnvVariableTargetRequest2 string

const (
	CreateSharedEnvVariableTargetRequest2Production  CreateSharedEnvVariableTargetRequest2 = "production"
	CreateSharedEnvVariableTargetRequest2Preview     CreateSharedEnvVariableTargetRequest2 = "preview"
	CreateSharedEnvVariableTargetRequest2Development CreateSharedEnvVariableTargetRequest2 = "development"
)

func (e CreateSharedEnvVariableTargetRequest2) ToPointer() *CreateSharedEnvVariableTargetRequest2 {
	return &e
}
func (e *CreateSharedEnvVariableTargetRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateSharedEnvVariableTargetRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableTargetRequest2: %v", v)
	}
}

type CreateSharedEnvVariableRequestBody2 struct {
	Evs []Ev2 `json:"evs"`
	// The type of environment variable
	Type *CreateSharedEnvVariableTypeRequest2 `json:"type,omitempty"`
	// The target environment of the Shared Environment Variable
	Target []CreateSharedEnvVariableTargetRequest2 `json:"target,omitempty"`
	// Associate a Shared Environment Variable to projects.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID []string `json:"projectId,omitempty"`
}

func (c CreateSharedEnvVariableRequestBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateSharedEnvVariableRequestBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"evs"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateSharedEnvVariableRequestBody2) GetEvs() []Ev2 {
	if o == nil {
		return []Ev2{}
	}
	return o.Evs
}

func (o *CreateSharedEnvVariableRequestBody2) GetType() *CreateSharedEnvVariableTypeRequest2 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateSharedEnvVariableRequestBody2) GetTarget() []CreateSharedEnvVariableTargetRequest2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateSharedEnvVariableRequestBody2) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

type Ev1 struct {
	// The name of the Shared Environment Variable
	Key string `json:"key"`
	// The value of the Shared Environment Variable
	Value string `json:"value"`
	// A comment to add context on what this Shared Environment Variable is for
	Comment *string `json:"comment,omitempty"`
}

func (e Ev1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Ev1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"key", "value"}); err != nil {
		return err
	}
	return nil
}

func (o *Ev1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *Ev1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *Ev1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

// CreateSharedEnvVariableTypeRequest1 - The type of environment variable
type CreateSharedEnvVariableTypeRequest1 string

const (
	CreateSharedEnvVariableTypeRequest1Encrypted CreateSharedEnvVariableTypeRequest1 = "encrypted"
	CreateSharedEnvVariableTypeRequest1Sensitive CreateSharedEnvVariableTypeRequest1 = "sensitive"
)

func (e CreateSharedEnvVariableTypeRequest1) ToPointer() *CreateSharedEnvVariableTypeRequest1 {
	return &e
}
func (e *CreateSharedEnvVariableTypeRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		*e = CreateSharedEnvVariableTypeRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableTypeRequest1: %v", v)
	}
}

type CreateSharedEnvVariableTargetRequest1 string

const (
	CreateSharedEnvVariableTargetRequest1Production  CreateSharedEnvVariableTargetRequest1 = "production"
	CreateSharedEnvVariableTargetRequest1Preview     CreateSharedEnvVariableTargetRequest1 = "preview"
	CreateSharedEnvVariableTargetRequest1Development CreateSharedEnvVariableTargetRequest1 = "development"
)

func (e CreateSharedEnvVariableTargetRequest1) ToPointer() *CreateSharedEnvVariableTargetRequest1 {
	return &e
}
func (e *CreateSharedEnvVariableTargetRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateSharedEnvVariableTargetRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableTargetRequest1: %v", v)
	}
}

type CreateSharedEnvVariableRequestBody1 struct {
	Evs []Ev1 `json:"evs"`
	// The type of environment variable
	Type *CreateSharedEnvVariableTypeRequest1 `json:"type,omitempty"`
	// The target environment of the Shared Environment Variable
	Target []CreateSharedEnvVariableTargetRequest1 `json:"target"`
	// Associate a Shared Environment Variable to projects.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	ProjectID []string `json:"projectId,omitempty"`
}

func (c CreateSharedEnvVariableRequestBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateSharedEnvVariableRequestBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"evs", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *CreateSharedEnvVariableRequestBody1) GetEvs() []Ev1 {
	if o == nil {
		return []Ev1{}
	}
	return o.Evs
}

func (o *CreateSharedEnvVariableRequestBody1) GetType() *CreateSharedEnvVariableTypeRequest1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateSharedEnvVariableRequestBody1) GetTarget() []CreateSharedEnvVariableTargetRequest1 {
	if o == nil {
		return []CreateSharedEnvVariableTargetRequest1{}
	}
	return o.Target
}

func (o *CreateSharedEnvVariableRequestBody1) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

type CreateSharedEnvVariableRequestBodyType string

const (
	CreateSharedEnvVariableRequestBodyTypeCreateSharedEnvVariableRequestBody1 CreateSharedEnvVariableRequestBodyType = "createSharedEnvVariable_RequestBody_1"
	CreateSharedEnvVariableRequestBodyTypeCreateSharedEnvVariableRequestBody2 CreateSharedEnvVariableRequestBodyType = "createSharedEnvVariable_RequestBody_2"
)

type CreateSharedEnvVariableRequestBody struct {
	CreateSharedEnvVariableRequestBody1 *CreateSharedEnvVariableRequestBody1 `queryParam:"inline"`
	CreateSharedEnvVariableRequestBody2 *CreateSharedEnvVariableRequestBody2 `queryParam:"inline"`

	Type CreateSharedEnvVariableRequestBodyType
}

func CreateCreateSharedEnvVariableRequestBodyCreateSharedEnvVariableRequestBody1(createSharedEnvVariableRequestBody1 CreateSharedEnvVariableRequestBody1) CreateSharedEnvVariableRequestBody {
	typ := CreateSharedEnvVariableRequestBodyTypeCreateSharedEnvVariableRequestBody1

	return CreateSharedEnvVariableRequestBody{
		CreateSharedEnvVariableRequestBody1: &createSharedEnvVariableRequestBody1,
		Type:                                typ,
	}
}

func CreateCreateSharedEnvVariableRequestBodyCreateSharedEnvVariableRequestBody2(createSharedEnvVariableRequestBody2 CreateSharedEnvVariableRequestBody2) CreateSharedEnvVariableRequestBody {
	typ := CreateSharedEnvVariableRequestBodyTypeCreateSharedEnvVariableRequestBody2

	return CreateSharedEnvVariableRequestBody{
		CreateSharedEnvVariableRequestBody2: &createSharedEnvVariableRequestBody2,
		Type:                                typ,
	}
}

func (u *CreateSharedEnvVariableRequestBody) UnmarshalJSON(data []byte) error {

	var createSharedEnvVariableRequestBody1 CreateSharedEnvVariableRequestBody1 = CreateSharedEnvVariableRequestBody1{}
	if err := utils.UnmarshalJSON(data, &createSharedEnvVariableRequestBody1, "", true, nil); err == nil {
		u.CreateSharedEnvVariableRequestBody1 = &createSharedEnvVariableRequestBody1
		u.Type = CreateSharedEnvVariableRequestBodyTypeCreateSharedEnvVariableRequestBody1
		return nil
	}

	var createSharedEnvVariableRequestBody2 CreateSharedEnvVariableRequestBody2 = CreateSharedEnvVariableRequestBody2{}
	if err := utils.UnmarshalJSON(data, &createSharedEnvVariableRequestBody2, "", true, nil); err == nil {
		u.CreateSharedEnvVariableRequestBody2 = &createSharedEnvVariableRequestBody2
		u.Type = CreateSharedEnvVariableRequestBodyTypeCreateSharedEnvVariableRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateSharedEnvVariableRequestBody", string(data))
}

func (u CreateSharedEnvVariableRequestBody) MarshalJSON() ([]byte, error) {
	if u.CreateSharedEnvVariableRequestBody1 != nil {
		return utils.MarshalJSON(u.CreateSharedEnvVariableRequestBody1, "", true)
	}

	if u.CreateSharedEnvVariableRequestBody2 != nil {
		return utils.MarshalJSON(u.CreateSharedEnvVariableRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateSharedEnvVariableRequestBody: all fields are null")
}

type CreateSharedEnvVariableRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *CreateSharedEnvVariableRequestBody `request:"mediaType=application/json"`
}

func (o *CreateSharedEnvVariableRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateSharedEnvVariableRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateSharedEnvVariableRequest) GetRequestBody() *CreateSharedEnvVariableRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// CreateSharedEnvVariableCreatedType - The type of this cosmos doc instance, if blank, assume secret.
type CreateSharedEnvVariableCreatedType string

const (
	CreateSharedEnvVariableCreatedTypeEncrypted CreateSharedEnvVariableCreatedType = "encrypted"
	CreateSharedEnvVariableCreatedTypeSensitive CreateSharedEnvVariableCreatedType = "sensitive"
	CreateSharedEnvVariableCreatedTypeSystem    CreateSharedEnvVariableCreatedType = "system"
	CreateSharedEnvVariableCreatedTypePlain     CreateSharedEnvVariableCreatedType = "plain"
)

func (e CreateSharedEnvVariableCreatedType) ToPointer() *CreateSharedEnvVariableCreatedType {
	return &e
}
func (e *CreateSharedEnvVariableCreatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		fallthrough
	case "system":
		fallthrough
	case "plain":
		*e = CreateSharedEnvVariableCreatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableCreatedType: %v", v)
	}
}

// CreateSharedEnvVariableCreatedTarget - environments this env variable targets
type CreateSharedEnvVariableCreatedTarget string

const (
	CreateSharedEnvVariableCreatedTargetProduction  CreateSharedEnvVariableCreatedTarget = "production"
	CreateSharedEnvVariableCreatedTargetPreview     CreateSharedEnvVariableCreatedTarget = "preview"
	CreateSharedEnvVariableCreatedTargetDevelopment CreateSharedEnvVariableCreatedTarget = "development"
)

func (e CreateSharedEnvVariableCreatedTarget) ToPointer() *CreateSharedEnvVariableCreatedTarget {
	return &e
}
func (e *CreateSharedEnvVariableCreatedTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateSharedEnvVariableCreatedTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableCreatedTarget: %v", v)
	}
}

type CreateSharedEnvVariableCreated struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *CreateSharedEnvVariableCreatedType `json:"type,omitempty"`
	// environments this env variable targets
	Target []CreateSharedEnvVariableCreatedTarget `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string `json:"lastEditedByDisplayName,omitempty"`
}

func (c CreateSharedEnvVariableCreated) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *CreateSharedEnvVariableCreated) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *CreateSharedEnvVariableCreated) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *CreateSharedEnvVariableCreated) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateSharedEnvVariableCreated) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *CreateSharedEnvVariableCreated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CreateSharedEnvVariableCreated) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *CreateSharedEnvVariableCreated) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *CreateSharedEnvVariableCreated) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *CreateSharedEnvVariableCreated) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *CreateSharedEnvVariableCreated) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *CreateSharedEnvVariableCreated) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *CreateSharedEnvVariableCreated) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateSharedEnvVariableCreated) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *CreateSharedEnvVariableCreated) GetType() *CreateSharedEnvVariableCreatedType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *CreateSharedEnvVariableCreated) GetTarget() []CreateSharedEnvVariableCreatedTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateSharedEnvVariableCreated) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *CreateSharedEnvVariableCreated) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *CreateSharedEnvVariableCreated) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *CreateSharedEnvVariableCreated) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

type CreateSharedEnvVariableValueEnum string

const (
	CreateSharedEnvVariableValueEnumProduction  CreateSharedEnvVariableValueEnum = "production"
	CreateSharedEnvVariableValueEnumPreview     CreateSharedEnvVariableValueEnum = "preview"
	CreateSharedEnvVariableValueEnumDevelopment CreateSharedEnvVariableValueEnum = "development"
)

func (e CreateSharedEnvVariableValueEnum) ToPointer() *CreateSharedEnvVariableValueEnum {
	return &e
}
func (e *CreateSharedEnvVariableValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateSharedEnvVariableValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableValueEnum: %v", v)
	}
}

type CreateSharedEnvVariableValueUnionType string

const (
	CreateSharedEnvVariableValueUnionTypeStr                                     CreateSharedEnvVariableValueUnionType = "str"
	CreateSharedEnvVariableValueUnionTypeArrayOfCreateSharedEnvVariableValueEnum CreateSharedEnvVariableValueUnionType = "arrayOfCreateSharedEnvVariableValueEnum"
)

type CreateSharedEnvVariableValueUnion struct {
	Str                                     *string                            `queryParam:"inline"`
	ArrayOfCreateSharedEnvVariableValueEnum []CreateSharedEnvVariableValueEnum `queryParam:"inline"`

	Type CreateSharedEnvVariableValueUnionType
}

func CreateCreateSharedEnvVariableValueUnionStr(str string) CreateSharedEnvVariableValueUnion {
	typ := CreateSharedEnvVariableValueUnionTypeStr

	return CreateSharedEnvVariableValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateCreateSharedEnvVariableValueUnionArrayOfCreateSharedEnvVariableValueEnum(arrayOfCreateSharedEnvVariableValueEnum []CreateSharedEnvVariableValueEnum) CreateSharedEnvVariableValueUnion {
	typ := CreateSharedEnvVariableValueUnionTypeArrayOfCreateSharedEnvVariableValueEnum

	return CreateSharedEnvVariableValueUnion{
		ArrayOfCreateSharedEnvVariableValueEnum: arrayOfCreateSharedEnvVariableValueEnum,
		Type:                                    typ,
	}
}

func (u *CreateSharedEnvVariableValueUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = CreateSharedEnvVariableValueUnionTypeStr
		return nil
	}

	var arrayOfCreateSharedEnvVariableValueEnum []CreateSharedEnvVariableValueEnum = []CreateSharedEnvVariableValueEnum{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateSharedEnvVariableValueEnum, "", true, nil); err == nil {
		u.ArrayOfCreateSharedEnvVariableValueEnum = arrayOfCreateSharedEnvVariableValueEnum
		u.Type = CreateSharedEnvVariableValueUnionTypeArrayOfCreateSharedEnvVariableValueEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateSharedEnvVariableValueUnion", string(data))
}

func (u CreateSharedEnvVariableValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfCreateSharedEnvVariableValueEnum != nil {
		return utils.MarshalJSON(u.ArrayOfCreateSharedEnvVariableValueEnum, "", true)
	}

	return nil, errors.New("could not marshal union type CreateSharedEnvVariableValueUnion: all fields are null")
}

type CreateSharedEnvVariableTargetErrorEnum2 string

const (
	CreateSharedEnvVariableTargetErrorEnum2Production  CreateSharedEnvVariableTargetErrorEnum2 = "production"
	CreateSharedEnvVariableTargetErrorEnum2Preview     CreateSharedEnvVariableTargetErrorEnum2 = "preview"
	CreateSharedEnvVariableTargetErrorEnum2Development CreateSharedEnvVariableTargetErrorEnum2 = "development"
)

func (e CreateSharedEnvVariableTargetErrorEnum2) ToPointer() *CreateSharedEnvVariableTargetErrorEnum2 {
	return &e
}
func (e *CreateSharedEnvVariableTargetErrorEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateSharedEnvVariableTargetErrorEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableTargetErrorEnum2: %v", v)
	}
}

type CreateSharedEnvVariableTargetErrorEnum1 string

const (
	CreateSharedEnvVariableTargetErrorEnum1Production  CreateSharedEnvVariableTargetErrorEnum1 = "production"
	CreateSharedEnvVariableTargetErrorEnum1Preview     CreateSharedEnvVariableTargetErrorEnum1 = "preview"
	CreateSharedEnvVariableTargetErrorEnum1Development CreateSharedEnvVariableTargetErrorEnum1 = "development"
)

func (e CreateSharedEnvVariableTargetErrorEnum1) ToPointer() *CreateSharedEnvVariableTargetErrorEnum1 {
	return &e
}
func (e *CreateSharedEnvVariableTargetErrorEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = CreateSharedEnvVariableTargetErrorEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateSharedEnvVariableTargetErrorEnum1: %v", v)
	}
}

type CreateSharedEnvVariableTargetUnionType string

const (
	CreateSharedEnvVariableTargetUnionTypeArrayOfCreateSharedEnvVariableTargetErrorEnum1 CreateSharedEnvVariableTargetUnionType = "arrayOfCreateSharedEnvVariableTargetErrorEnum1"
	CreateSharedEnvVariableTargetUnionTypeCreateSharedEnvVariableTargetErrorEnum2        CreateSharedEnvVariableTargetUnionType = "createSharedEnvVariable_target_error_enum_2"
)

type CreateSharedEnvVariableTargetUnion struct {
	ArrayOfCreateSharedEnvVariableTargetErrorEnum1 []CreateSharedEnvVariableTargetErrorEnum1 `queryParam:"inline"`
	CreateSharedEnvVariableTargetErrorEnum2        *CreateSharedEnvVariableTargetErrorEnum2  `queryParam:"inline"`

	Type CreateSharedEnvVariableTargetUnionType
}

func CreateCreateSharedEnvVariableTargetUnionArrayOfCreateSharedEnvVariableTargetErrorEnum1(arrayOfCreateSharedEnvVariableTargetErrorEnum1 []CreateSharedEnvVariableTargetErrorEnum1) CreateSharedEnvVariableTargetUnion {
	typ := CreateSharedEnvVariableTargetUnionTypeArrayOfCreateSharedEnvVariableTargetErrorEnum1

	return CreateSharedEnvVariableTargetUnion{
		ArrayOfCreateSharedEnvVariableTargetErrorEnum1: arrayOfCreateSharedEnvVariableTargetErrorEnum1,
		Type: typ,
	}
}

func CreateCreateSharedEnvVariableTargetUnionCreateSharedEnvVariableTargetErrorEnum2(createSharedEnvVariableTargetErrorEnum2 CreateSharedEnvVariableTargetErrorEnum2) CreateSharedEnvVariableTargetUnion {
	typ := CreateSharedEnvVariableTargetUnionTypeCreateSharedEnvVariableTargetErrorEnum2

	return CreateSharedEnvVariableTargetUnion{
		CreateSharedEnvVariableTargetErrorEnum2: &createSharedEnvVariableTargetErrorEnum2,
		Type:                                    typ,
	}
}

func (u *CreateSharedEnvVariableTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfCreateSharedEnvVariableTargetErrorEnum1 []CreateSharedEnvVariableTargetErrorEnum1 = []CreateSharedEnvVariableTargetErrorEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfCreateSharedEnvVariableTargetErrorEnum1, "", true, nil); err == nil {
		u.ArrayOfCreateSharedEnvVariableTargetErrorEnum1 = arrayOfCreateSharedEnvVariableTargetErrorEnum1
		u.Type = CreateSharedEnvVariableTargetUnionTypeArrayOfCreateSharedEnvVariableTargetErrorEnum1
		return nil
	}

	var createSharedEnvVariableTargetErrorEnum2 CreateSharedEnvVariableTargetErrorEnum2 = CreateSharedEnvVariableTargetErrorEnum2("")
	if err := utils.UnmarshalJSON(data, &createSharedEnvVariableTargetErrorEnum2, "", true, nil); err == nil {
		u.CreateSharedEnvVariableTargetErrorEnum2 = &createSharedEnvVariableTargetErrorEnum2
		u.Type = CreateSharedEnvVariableTargetUnionTypeCreateSharedEnvVariableTargetErrorEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for CreateSharedEnvVariableTargetUnion", string(data))
}

func (u CreateSharedEnvVariableTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfCreateSharedEnvVariableTargetErrorEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfCreateSharedEnvVariableTargetErrorEnum1, "", true)
	}

	if u.CreateSharedEnvVariableTargetErrorEnum2 != nil {
		return utils.MarshalJSON(u.CreateSharedEnvVariableTargetErrorEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type CreateSharedEnvVariableTargetUnion: all fields are null")
}

type CreateSharedEnvVariableError struct {
	Code      string                              `json:"code"`
	Message   string                              `json:"message"`
	Key       *string                             `json:"key,omitempty"`
	EnvVarID  *string                             `json:"envVarId,omitempty"`
	EnvVarKey *string                             `json:"envVarKey,omitempty"`
	Action    *string                             `json:"action,omitempty"`
	Link      *string                             `json:"link,omitempty"`
	Value     *CreateSharedEnvVariableValueUnion  `json:"value,omitempty"`
	GitBranch *string                             `json:"gitBranch,omitempty"`
	Target    *CreateSharedEnvVariableTargetUnion `json:"target,omitempty"`
	Project   *string                             `json:"project,omitempty"`
}

func (o *CreateSharedEnvVariableError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *CreateSharedEnvVariableError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *CreateSharedEnvVariableError) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *CreateSharedEnvVariableError) GetEnvVarID() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarID
}

func (o *CreateSharedEnvVariableError) GetEnvVarKey() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarKey
}

func (o *CreateSharedEnvVariableError) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *CreateSharedEnvVariableError) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *CreateSharedEnvVariableError) GetValue() *CreateSharedEnvVariableValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CreateSharedEnvVariableError) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *CreateSharedEnvVariableError) GetTarget() *CreateSharedEnvVariableTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *CreateSharedEnvVariableError) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type CreateSharedEnvVariableFailed struct {
	Error CreateSharedEnvVariableError `json:"error"`
}

func (o *CreateSharedEnvVariableFailed) GetError() CreateSharedEnvVariableError {
	if o == nil {
		return CreateSharedEnvVariableError{}
	}
	return o.Error
}

type CreateSharedEnvVariableResponseBody struct {
	Created []CreateSharedEnvVariableCreated `json:"created"`
	Failed  []CreateSharedEnvVariableFailed  `json:"failed"`
}

func (o *CreateSharedEnvVariableResponseBody) GetCreated() []CreateSharedEnvVariableCreated {
	if o == nil {
		return []CreateSharedEnvVariableCreated{}
	}
	return o.Created
}

func (o *CreateSharedEnvVariableResponseBody) GetFailed() []CreateSharedEnvVariableFailed {
	if o == nil {
		return []CreateSharedEnvVariableFailed{}
	}
	return o.Failed
}

type CreateSharedEnvVariableResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateSharedEnvVariableResponseBody
}

func (o *CreateSharedEnvVariableResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateSharedEnvVariableResponse) GetObject() *CreateSharedEnvVariableResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
