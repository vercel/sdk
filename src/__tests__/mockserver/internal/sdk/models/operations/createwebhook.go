// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type CreateWebhookEventRequest string

const (
	CreateWebhookEventRequestBudgetReached                                      CreateWebhookEventRequest = "budget.reached"
	CreateWebhookEventRequestBudgetReset                                        CreateWebhookEventRequest = "budget.reset"
	CreateWebhookEventRequestDomainCreated                                      CreateWebhookEventRequest = "domain.created"
	CreateWebhookEventRequestDomainDnsRecordsChanged                            CreateWebhookEventRequest = "domain.dns.records.changed"
	CreateWebhookEventRequestDomainTransferInStarted                            CreateWebhookEventRequest = "domain.transfer-in.started"
	CreateWebhookEventRequestDomainTransferInCompleted                          CreateWebhookEventRequest = "domain.transfer-in.completed"
	CreateWebhookEventRequestDomainTransferInFailed                             CreateWebhookEventRequest = "domain.transfer-in.failed"
	CreateWebhookEventRequestDomainCertificateAdd                               CreateWebhookEventRequest = "domain.certificate.add"
	CreateWebhookEventRequestDomainCertificateAddFailed                         CreateWebhookEventRequest = "domain.certificate.add.failed"
	CreateWebhookEventRequestDomainCertificateRenew                             CreateWebhookEventRequest = "domain.certificate.renew"
	CreateWebhookEventRequestDomainCertificateRenewFailed                       CreateWebhookEventRequest = "domain.certificate.renew.failed"
	CreateWebhookEventRequestDomainCertificateDeleted                           CreateWebhookEventRequest = "domain.certificate.deleted"
	CreateWebhookEventRequestDomainRenewal                                      CreateWebhookEventRequest = "domain.renewal"
	CreateWebhookEventRequestDomainRenewalFailed                                CreateWebhookEventRequest = "domain.renewal.failed"
	CreateWebhookEventRequestDomainAutoRenewChanged                             CreateWebhookEventRequest = "domain.auto-renew.changed"
	CreateWebhookEventRequestDeploymentCreated                                  CreateWebhookEventRequest = "deployment.created"
	CreateWebhookEventRequestDeploymentError                                    CreateWebhookEventRequest = "deployment.error"
	CreateWebhookEventRequestDeploymentCanceled                                 CreateWebhookEventRequest = "deployment.canceled"
	CreateWebhookEventRequestDeploymentSucceeded                                CreateWebhookEventRequest = "deployment.succeeded"
	CreateWebhookEventRequestDeploymentReady                                    CreateWebhookEventRequest = "deployment.ready"
	CreateWebhookEventRequestDeploymentCheckRerequested                         CreateWebhookEventRequest = "deployment.check-rerequested"
	CreateWebhookEventRequestDeploymentPromoted                                 CreateWebhookEventRequest = "deployment.promoted"
	CreateWebhookEventRequestDeploymentIntegrationActionStart                   CreateWebhookEventRequest = "deployment.integration.action.start"
	CreateWebhookEventRequestDeploymentIntegrationActionCancel                  CreateWebhookEventRequest = "deployment.integration.action.cancel"
	CreateWebhookEventRequestDeploymentIntegrationActionCleanup                 CreateWebhookEventRequest = "deployment.integration.action.cleanup"
	CreateWebhookEventRequestEdgeConfigCreated                                  CreateWebhookEventRequest = "edge-config.created"
	CreateWebhookEventRequestEdgeConfigDeleted                                  CreateWebhookEventRequest = "edge-config.deleted"
	CreateWebhookEventRequestEdgeConfigItemsUpdated                             CreateWebhookEventRequest = "edge-config.items.updated"
	CreateWebhookEventRequestFirewallAttack                                     CreateWebhookEventRequest = "firewall.attack"
	CreateWebhookEventRequestIntegrationConfigurationPermissionUpgraded         CreateWebhookEventRequest = "integration-configuration.permission-upgraded"
	CreateWebhookEventRequestIntegrationConfigurationRemoved                    CreateWebhookEventRequest = "integration-configuration.removed"
	CreateWebhookEventRequestIntegrationConfigurationScopeChangeConfirmed       CreateWebhookEventRequest = "integration-configuration.scope-change-confirmed"
	CreateWebhookEventRequestIntegrationResourceProjectConnected                CreateWebhookEventRequest = "integration-resource.project-connected"
	CreateWebhookEventRequestIntegrationResourceProjectDisconnected             CreateWebhookEventRequest = "integration-resource.project-disconnected"
	CreateWebhookEventRequestProjectCreated                                     CreateWebhookEventRequest = "project.created"
	CreateWebhookEventRequestProjectRemoved                                     CreateWebhookEventRequest = "project.removed"
	CreateWebhookEventRequestProjectDomainCreated                               CreateWebhookEventRequest = "project.domain.created"
	CreateWebhookEventRequestProjectDomainUpdated                               CreateWebhookEventRequest = "project.domain.updated"
	CreateWebhookEventRequestProjectDomainDeleted                               CreateWebhookEventRequest = "project.domain.deleted"
	CreateWebhookEventRequestProjectDomainVerified                              CreateWebhookEventRequest = "project.domain.verified"
	CreateWebhookEventRequestProjectDomainUnverified                            CreateWebhookEventRequest = "project.domain.unverified"
	CreateWebhookEventRequestProjectDomainMoved                                 CreateWebhookEventRequest = "project.domain.moved"
	CreateWebhookEventRequestProjectRollingReleaseStarted                       CreateWebhookEventRequest = "project.rolling-release.started"
	CreateWebhookEventRequestProjectRollingReleaseAborted                       CreateWebhookEventRequest = "project.rolling-release.aborted"
	CreateWebhookEventRequestProjectRollingReleaseCompleted                     CreateWebhookEventRequest = "project.rolling-release.completed"
	CreateWebhookEventRequestProjectRollingReleaseApproved                      CreateWebhookEventRequest = "project.rolling-release.approved"
	CreateWebhookEventRequestDeploymentChecksCompleted                          CreateWebhookEventRequest = "deployment-checks-completed"
	CreateWebhookEventRequestDeploymentReadyLegacy                              CreateWebhookEventRequest = "deployment-ready"
	CreateWebhookEventRequestDeploymentPrepared                                 CreateWebhookEventRequest = "deployment-prepared"
	CreateWebhookEventRequestDeploymentErrorLegacy                              CreateWebhookEventRequest = "deployment-error"
	CreateWebhookEventRequestDeploymentCheckRerequestedLegacy                   CreateWebhookEventRequest = "deployment-check-rerequested"
	CreateWebhookEventRequestDeploymentCanceledLegacy                           CreateWebhookEventRequest = "deployment-canceled"
	CreateWebhookEventRequestProjectCreatedLegacy                               CreateWebhookEventRequest = "project-created"
	CreateWebhookEventRequestProjectRemovedLegacy                               CreateWebhookEventRequest = "project-removed"
	CreateWebhookEventRequestDomainCreatedLegacy                                CreateWebhookEventRequest = "domain-created"
	CreateWebhookEventRequestDeployment                                         CreateWebhookEventRequest = "deployment"
	CreateWebhookEventRequestIntegrationConfigurationPermissionUpdated          CreateWebhookEventRequest = "integration-configuration-permission-updated"
	CreateWebhookEventRequestIntegrationConfigurationRemovedLegacy              CreateWebhookEventRequest = "integration-configuration-removed"
	CreateWebhookEventRequestIntegrationConfigurationScopeChangeConfirmedLegacy CreateWebhookEventRequest = "integration-configuration-scope-change-confirmed"
	CreateWebhookEventRequestMarketplaceInvoiceCreated                          CreateWebhookEventRequest = "marketplace.invoice.created"
	CreateWebhookEventRequestMarketplaceInvoicePaid                             CreateWebhookEventRequest = "marketplace.invoice.paid"
	CreateWebhookEventRequestMarketplaceInvoiceNotpaid                          CreateWebhookEventRequest = "marketplace.invoice.notpaid"
	CreateWebhookEventRequestMarketplaceInvoiceRefunded                         CreateWebhookEventRequest = "marketplace.invoice.refunded"
	CreateWebhookEventRequestObservabilityAnomaly                               CreateWebhookEventRequest = "observability.anomaly"
	CreateWebhookEventRequestTestWebhook                                        CreateWebhookEventRequest = "test-webhook"
)

func (e CreateWebhookEventRequest) ToPointer() *CreateWebhookEventRequest {
	return &e
}
func (e *CreateWebhookEventRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "domain.dns.records.changed":
		fallthrough
	case "domain.transfer-in.started":
		fallthrough
	case "domain.transfer-in.completed":
		fallthrough
	case "domain.transfer-in.failed":
		fallthrough
	case "domain.certificate.add":
		fallthrough
	case "domain.certificate.add.failed":
		fallthrough
	case "domain.certificate.renew":
		fallthrough
	case "domain.certificate.renew.failed":
		fallthrough
	case "domain.certificate.deleted":
		fallthrough
	case "domain.renewal":
		fallthrough
	case "domain.renewal.failed":
		fallthrough
	case "domain.auto-renew.changed":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "project.domain.created":
		fallthrough
	case "project.domain.updated":
		fallthrough
	case "project.domain.deleted":
		fallthrough
	case "project.domain.verified":
		fallthrough
	case "project.domain.unverified":
		fallthrough
	case "project.domain.moved":
		fallthrough
	case "project.rolling-release.started":
		fallthrough
	case "project.rolling-release.aborted":
		fallthrough
	case "project.rolling-release.completed":
		fallthrough
	case "project.rolling-release.approved":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = CreateWebhookEventRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebhookEventRequest: %v", v)
	}
}

type CreateWebhookRequestBody struct {
	URL        string                      `json:"url"`
	Events     []CreateWebhookEventRequest `json:"events"`
	ProjectIds []string                    `json:"projectIds,omitempty"`
}

func (o *CreateWebhookRequestBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateWebhookRequestBody) GetEvents() []CreateWebhookEventRequest {
	if o == nil {
		return []CreateWebhookEventRequest{}
	}
	return o.Events
}

func (o *CreateWebhookRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type CreateWebhookRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody CreateWebhookRequestBody `request:"mediaType=application/json"`
}

func (o *CreateWebhookRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *CreateWebhookRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *CreateWebhookRequest) GetRequestBody() CreateWebhookRequestBody {
	if o == nil {
		return CreateWebhookRequestBody{}
	}
	return o.RequestBody
}

// CreateWebhookEventResponse - The webhooks events
type CreateWebhookEventResponse string

const (
	CreateWebhookEventResponseBudgetReached                                      CreateWebhookEventResponse = "budget.reached"
	CreateWebhookEventResponseBudgetReset                                        CreateWebhookEventResponse = "budget.reset"
	CreateWebhookEventResponseDomainCreated                                      CreateWebhookEventResponse = "domain.created"
	CreateWebhookEventResponseDomainDnsRecordsChanged                            CreateWebhookEventResponse = "domain.dns.records.changed"
	CreateWebhookEventResponseDomainTransferInStarted                            CreateWebhookEventResponse = "domain.transfer-in.started"
	CreateWebhookEventResponseDomainTransferInCompleted                          CreateWebhookEventResponse = "domain.transfer-in.completed"
	CreateWebhookEventResponseDomainTransferInFailed                             CreateWebhookEventResponse = "domain.transfer-in.failed"
	CreateWebhookEventResponseDomainCertificateAdd                               CreateWebhookEventResponse = "domain.certificate.add"
	CreateWebhookEventResponseDomainCertificateAddFailed                         CreateWebhookEventResponse = "domain.certificate.add.failed"
	CreateWebhookEventResponseDomainCertificateRenew                             CreateWebhookEventResponse = "domain.certificate.renew"
	CreateWebhookEventResponseDomainCertificateRenewFailed                       CreateWebhookEventResponse = "domain.certificate.renew.failed"
	CreateWebhookEventResponseDomainCertificateDeleted                           CreateWebhookEventResponse = "domain.certificate.deleted"
	CreateWebhookEventResponseDomainRenewal                                      CreateWebhookEventResponse = "domain.renewal"
	CreateWebhookEventResponseDomainRenewalFailed                                CreateWebhookEventResponse = "domain.renewal.failed"
	CreateWebhookEventResponseDomainAutoRenewChanged                             CreateWebhookEventResponse = "domain.auto-renew.changed"
	CreateWebhookEventResponseDeploymentCreated                                  CreateWebhookEventResponse = "deployment.created"
	CreateWebhookEventResponseDeploymentError                                    CreateWebhookEventResponse = "deployment.error"
	CreateWebhookEventResponseDeploymentCanceled                                 CreateWebhookEventResponse = "deployment.canceled"
	CreateWebhookEventResponseDeploymentSucceeded                                CreateWebhookEventResponse = "deployment.succeeded"
	CreateWebhookEventResponseDeploymentReady                                    CreateWebhookEventResponse = "deployment.ready"
	CreateWebhookEventResponseDeploymentCheckRerequested                         CreateWebhookEventResponse = "deployment.check-rerequested"
	CreateWebhookEventResponseDeploymentPromoted                                 CreateWebhookEventResponse = "deployment.promoted"
	CreateWebhookEventResponseDeploymentIntegrationActionStart                   CreateWebhookEventResponse = "deployment.integration.action.start"
	CreateWebhookEventResponseDeploymentIntegrationActionCancel                  CreateWebhookEventResponse = "deployment.integration.action.cancel"
	CreateWebhookEventResponseDeploymentIntegrationActionCleanup                 CreateWebhookEventResponse = "deployment.integration.action.cleanup"
	CreateWebhookEventResponseEdgeConfigCreated                                  CreateWebhookEventResponse = "edge-config.created"
	CreateWebhookEventResponseEdgeConfigDeleted                                  CreateWebhookEventResponse = "edge-config.deleted"
	CreateWebhookEventResponseEdgeConfigItemsUpdated                             CreateWebhookEventResponse = "edge-config.items.updated"
	CreateWebhookEventResponseFirewallAttack                                     CreateWebhookEventResponse = "firewall.attack"
	CreateWebhookEventResponseIntegrationConfigurationPermissionUpgraded         CreateWebhookEventResponse = "integration-configuration.permission-upgraded"
	CreateWebhookEventResponseIntegrationConfigurationRemoved                    CreateWebhookEventResponse = "integration-configuration.removed"
	CreateWebhookEventResponseIntegrationConfigurationScopeChangeConfirmed       CreateWebhookEventResponse = "integration-configuration.scope-change-confirmed"
	CreateWebhookEventResponseIntegrationResourceProjectConnected                CreateWebhookEventResponse = "integration-resource.project-connected"
	CreateWebhookEventResponseIntegrationResourceProjectDisconnected             CreateWebhookEventResponse = "integration-resource.project-disconnected"
	CreateWebhookEventResponseProjectCreated                                     CreateWebhookEventResponse = "project.created"
	CreateWebhookEventResponseProjectRemoved                                     CreateWebhookEventResponse = "project.removed"
	CreateWebhookEventResponseProjectDomainCreated                               CreateWebhookEventResponse = "project.domain.created"
	CreateWebhookEventResponseProjectDomainUpdated                               CreateWebhookEventResponse = "project.domain.updated"
	CreateWebhookEventResponseProjectDomainDeleted                               CreateWebhookEventResponse = "project.domain.deleted"
	CreateWebhookEventResponseProjectDomainVerified                              CreateWebhookEventResponse = "project.domain.verified"
	CreateWebhookEventResponseProjectDomainUnverified                            CreateWebhookEventResponse = "project.domain.unverified"
	CreateWebhookEventResponseProjectDomainMoved                                 CreateWebhookEventResponse = "project.domain.moved"
	CreateWebhookEventResponseProjectRollingReleaseStarted                       CreateWebhookEventResponse = "project.rolling-release.started"
	CreateWebhookEventResponseProjectRollingReleaseAborted                       CreateWebhookEventResponse = "project.rolling-release.aborted"
	CreateWebhookEventResponseProjectRollingReleaseCompleted                     CreateWebhookEventResponse = "project.rolling-release.completed"
	CreateWebhookEventResponseProjectRollingReleaseApproved                      CreateWebhookEventResponse = "project.rolling-release.approved"
	CreateWebhookEventResponseDeploymentChecksCompleted                          CreateWebhookEventResponse = "deployment-checks-completed"
	CreateWebhookEventResponseDeploymentReadyLegacy                              CreateWebhookEventResponse = "deployment-ready"
	CreateWebhookEventResponseDeploymentPrepared                                 CreateWebhookEventResponse = "deployment-prepared"
	CreateWebhookEventResponseDeploymentErrorLegacy                              CreateWebhookEventResponse = "deployment-error"
	CreateWebhookEventResponseDeploymentCheckRerequestedLegacy                   CreateWebhookEventResponse = "deployment-check-rerequested"
	CreateWebhookEventResponseDeploymentCanceledLegacy                           CreateWebhookEventResponse = "deployment-canceled"
	CreateWebhookEventResponseProjectCreatedLegacy                               CreateWebhookEventResponse = "project-created"
	CreateWebhookEventResponseProjectRemovedLegacy                               CreateWebhookEventResponse = "project-removed"
	CreateWebhookEventResponseDomainCreatedLegacy                                CreateWebhookEventResponse = "domain-created"
	CreateWebhookEventResponseDeployment                                         CreateWebhookEventResponse = "deployment"
	CreateWebhookEventResponseIntegrationConfigurationPermissionUpdated          CreateWebhookEventResponse = "integration-configuration-permission-updated"
	CreateWebhookEventResponseIntegrationConfigurationRemovedLegacy              CreateWebhookEventResponse = "integration-configuration-removed"
	CreateWebhookEventResponseIntegrationConfigurationScopeChangeConfirmedLegacy CreateWebhookEventResponse = "integration-configuration-scope-change-confirmed"
	CreateWebhookEventResponseMarketplaceInvoiceCreated                          CreateWebhookEventResponse = "marketplace.invoice.created"
	CreateWebhookEventResponseMarketplaceInvoicePaid                             CreateWebhookEventResponse = "marketplace.invoice.paid"
	CreateWebhookEventResponseMarketplaceInvoiceNotpaid                          CreateWebhookEventResponse = "marketplace.invoice.notpaid"
	CreateWebhookEventResponseMarketplaceInvoiceRefunded                         CreateWebhookEventResponse = "marketplace.invoice.refunded"
	CreateWebhookEventResponseObservabilityAnomaly                               CreateWebhookEventResponse = "observability.anomaly"
	CreateWebhookEventResponseTestWebhook                                        CreateWebhookEventResponse = "test-webhook"
)

func (e CreateWebhookEventResponse) ToPointer() *CreateWebhookEventResponse {
	return &e
}
func (e *CreateWebhookEventResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "domain.dns.records.changed":
		fallthrough
	case "domain.transfer-in.started":
		fallthrough
	case "domain.transfer-in.completed":
		fallthrough
	case "domain.transfer-in.failed":
		fallthrough
	case "domain.certificate.add":
		fallthrough
	case "domain.certificate.add.failed":
		fallthrough
	case "domain.certificate.renew":
		fallthrough
	case "domain.certificate.renew.failed":
		fallthrough
	case "domain.certificate.deleted":
		fallthrough
	case "domain.renewal":
		fallthrough
	case "domain.renewal.failed":
		fallthrough
	case "domain.auto-renew.changed":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "project.domain.created":
		fallthrough
	case "project.domain.updated":
		fallthrough
	case "project.domain.deleted":
		fallthrough
	case "project.domain.verified":
		fallthrough
	case "project.domain.unverified":
		fallthrough
	case "project.domain.moved":
		fallthrough
	case "project.rolling-release.started":
		fallthrough
	case "project.rolling-release.aborted":
		fallthrough
	case "project.rolling-release.completed":
		fallthrough
	case "project.rolling-release.approved":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = CreateWebhookEventResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateWebhookEventResponse: %v", v)
	}
}

type CreateWebhookResponseBody struct {
	// The webhook secret used to sign the payload
	Secret string `json:"secret"`
	// The webhooks events
	Events []CreateWebhookEventResponse `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *CreateWebhookResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *CreateWebhookResponseBody) GetEvents() []CreateWebhookEventResponse {
	if o == nil {
		return []CreateWebhookEventResponse{}
	}
	return o.Events
}

func (o *CreateWebhookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *CreateWebhookResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *CreateWebhookResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *CreateWebhookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *CreateWebhookResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *CreateWebhookResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type CreateWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *CreateWebhookResponseBody
}

func (o *CreateWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *CreateWebhookResponse) GetObject() *CreateWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
