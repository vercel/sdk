// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type DeleteSharedEnvVariableRequestBody struct {
	// IDs of the Shared Environment Variables to delete
	Ids []string `json:"ids"`
}

func (o *DeleteSharedEnvVariableRequestBody) GetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.Ids
}

type DeleteSharedEnvVariableRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *DeleteSharedEnvVariableRequestBody `request:"mediaType=application/json"`
}

func (o *DeleteSharedEnvVariableRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *DeleteSharedEnvVariableRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *DeleteSharedEnvVariableRequest) GetRequestBody() *DeleteSharedEnvVariableRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type DeleteSharedEnvVariableValueEnum string

const (
	DeleteSharedEnvVariableValueEnumProduction  DeleteSharedEnvVariableValueEnum = "production"
	DeleteSharedEnvVariableValueEnumPreview     DeleteSharedEnvVariableValueEnum = "preview"
	DeleteSharedEnvVariableValueEnumDevelopment DeleteSharedEnvVariableValueEnum = "development"
)

func (e DeleteSharedEnvVariableValueEnum) ToPointer() *DeleteSharedEnvVariableValueEnum {
	return &e
}
func (e *DeleteSharedEnvVariableValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = DeleteSharedEnvVariableValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteSharedEnvVariableValueEnum: %v", v)
	}
}

type DeleteSharedEnvVariableValueUnionType string

const (
	DeleteSharedEnvVariableValueUnionTypeStr                                     DeleteSharedEnvVariableValueUnionType = "str"
	DeleteSharedEnvVariableValueUnionTypeArrayOfDeleteSharedEnvVariableValueEnum DeleteSharedEnvVariableValueUnionType = "arrayOfDeleteSharedEnvVariableValueEnum"
)

type DeleteSharedEnvVariableValueUnion struct {
	Str                                     *string                            `queryParam:"inline"`
	ArrayOfDeleteSharedEnvVariableValueEnum []DeleteSharedEnvVariableValueEnum `queryParam:"inline"`

	Type DeleteSharedEnvVariableValueUnionType
}

func CreateDeleteSharedEnvVariableValueUnionStr(str string) DeleteSharedEnvVariableValueUnion {
	typ := DeleteSharedEnvVariableValueUnionTypeStr

	return DeleteSharedEnvVariableValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateDeleteSharedEnvVariableValueUnionArrayOfDeleteSharedEnvVariableValueEnum(arrayOfDeleteSharedEnvVariableValueEnum []DeleteSharedEnvVariableValueEnum) DeleteSharedEnvVariableValueUnion {
	typ := DeleteSharedEnvVariableValueUnionTypeArrayOfDeleteSharedEnvVariableValueEnum

	return DeleteSharedEnvVariableValueUnion{
		ArrayOfDeleteSharedEnvVariableValueEnum: arrayOfDeleteSharedEnvVariableValueEnum,
		Type:                                    typ,
	}
}

func (u *DeleteSharedEnvVariableValueUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = DeleteSharedEnvVariableValueUnionTypeStr
		return nil
	}

	var arrayOfDeleteSharedEnvVariableValueEnum []DeleteSharedEnvVariableValueEnum = []DeleteSharedEnvVariableValueEnum{}
	if err := utils.UnmarshalJSON(data, &arrayOfDeleteSharedEnvVariableValueEnum, "", true, nil); err == nil {
		u.ArrayOfDeleteSharedEnvVariableValueEnum = arrayOfDeleteSharedEnvVariableValueEnum
		u.Type = DeleteSharedEnvVariableValueUnionTypeArrayOfDeleteSharedEnvVariableValueEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DeleteSharedEnvVariableValueUnion", string(data))
}

func (u DeleteSharedEnvVariableValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfDeleteSharedEnvVariableValueEnum != nil {
		return utils.MarshalJSON(u.ArrayOfDeleteSharedEnvVariableValueEnum, "", true)
	}

	return nil, errors.New("could not marshal union type DeleteSharedEnvVariableValueUnion: all fields are null")
}

type DeleteSharedEnvVariableTargetEnum2 string

const (
	DeleteSharedEnvVariableTargetEnum2Production  DeleteSharedEnvVariableTargetEnum2 = "production"
	DeleteSharedEnvVariableTargetEnum2Preview     DeleteSharedEnvVariableTargetEnum2 = "preview"
	DeleteSharedEnvVariableTargetEnum2Development DeleteSharedEnvVariableTargetEnum2 = "development"
)

func (e DeleteSharedEnvVariableTargetEnum2) ToPointer() *DeleteSharedEnvVariableTargetEnum2 {
	return &e
}
func (e *DeleteSharedEnvVariableTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = DeleteSharedEnvVariableTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteSharedEnvVariableTargetEnum2: %v", v)
	}
}

type DeleteSharedEnvVariableTargetEnum1 string

const (
	DeleteSharedEnvVariableTargetEnum1Production  DeleteSharedEnvVariableTargetEnum1 = "production"
	DeleteSharedEnvVariableTargetEnum1Preview     DeleteSharedEnvVariableTargetEnum1 = "preview"
	DeleteSharedEnvVariableTargetEnum1Development DeleteSharedEnvVariableTargetEnum1 = "development"
)

func (e DeleteSharedEnvVariableTargetEnum1) ToPointer() *DeleteSharedEnvVariableTargetEnum1 {
	return &e
}
func (e *DeleteSharedEnvVariableTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = DeleteSharedEnvVariableTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DeleteSharedEnvVariableTargetEnum1: %v", v)
	}
}

type DeleteSharedEnvVariableTargetUnionType string

const (
	DeleteSharedEnvVariableTargetUnionTypeArrayOfDeleteSharedEnvVariableTargetEnum1 DeleteSharedEnvVariableTargetUnionType = "arrayOfDeleteSharedEnvVariableTargetEnum1"
	DeleteSharedEnvVariableTargetUnionTypeDeleteSharedEnvVariableTargetEnum2        DeleteSharedEnvVariableTargetUnionType = "deleteSharedEnvVariable_target_enum_2"
)

type DeleteSharedEnvVariableTargetUnion struct {
	ArrayOfDeleteSharedEnvVariableTargetEnum1 []DeleteSharedEnvVariableTargetEnum1 `queryParam:"inline"`
	DeleteSharedEnvVariableTargetEnum2        *DeleteSharedEnvVariableTargetEnum2  `queryParam:"inline"`

	Type DeleteSharedEnvVariableTargetUnionType
}

func CreateDeleteSharedEnvVariableTargetUnionArrayOfDeleteSharedEnvVariableTargetEnum1(arrayOfDeleteSharedEnvVariableTargetEnum1 []DeleteSharedEnvVariableTargetEnum1) DeleteSharedEnvVariableTargetUnion {
	typ := DeleteSharedEnvVariableTargetUnionTypeArrayOfDeleteSharedEnvVariableTargetEnum1

	return DeleteSharedEnvVariableTargetUnion{
		ArrayOfDeleteSharedEnvVariableTargetEnum1: arrayOfDeleteSharedEnvVariableTargetEnum1,
		Type: typ,
	}
}

func CreateDeleteSharedEnvVariableTargetUnionDeleteSharedEnvVariableTargetEnum2(deleteSharedEnvVariableTargetEnum2 DeleteSharedEnvVariableTargetEnum2) DeleteSharedEnvVariableTargetUnion {
	typ := DeleteSharedEnvVariableTargetUnionTypeDeleteSharedEnvVariableTargetEnum2

	return DeleteSharedEnvVariableTargetUnion{
		DeleteSharedEnvVariableTargetEnum2: &deleteSharedEnvVariableTargetEnum2,
		Type:                               typ,
	}
}

func (u *DeleteSharedEnvVariableTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfDeleteSharedEnvVariableTargetEnum1 []DeleteSharedEnvVariableTargetEnum1 = []DeleteSharedEnvVariableTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfDeleteSharedEnvVariableTargetEnum1, "", true, nil); err == nil {
		u.ArrayOfDeleteSharedEnvVariableTargetEnum1 = arrayOfDeleteSharedEnvVariableTargetEnum1
		u.Type = DeleteSharedEnvVariableTargetUnionTypeArrayOfDeleteSharedEnvVariableTargetEnum1
		return nil
	}

	var deleteSharedEnvVariableTargetEnum2 DeleteSharedEnvVariableTargetEnum2 = DeleteSharedEnvVariableTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &deleteSharedEnvVariableTargetEnum2, "", true, nil); err == nil {
		u.DeleteSharedEnvVariableTargetEnum2 = &deleteSharedEnvVariableTargetEnum2
		u.Type = DeleteSharedEnvVariableTargetUnionTypeDeleteSharedEnvVariableTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DeleteSharedEnvVariableTargetUnion", string(data))
}

func (u DeleteSharedEnvVariableTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfDeleteSharedEnvVariableTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfDeleteSharedEnvVariableTargetEnum1, "", true)
	}

	if u.DeleteSharedEnvVariableTargetEnum2 != nil {
		return utils.MarshalJSON(u.DeleteSharedEnvVariableTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type DeleteSharedEnvVariableTargetUnion: all fields are null")
}

type DeleteSharedEnvVariableError struct {
	Code      string                              `json:"code"`
	Message   string                              `json:"message"`
	Key       *string                             `json:"key,omitempty"`
	EnvVarID  *string                             `json:"envVarId,omitempty"`
	EnvVarKey *string                             `json:"envVarKey,omitempty"`
	Action    *string                             `json:"action,omitempty"`
	Link      *string                             `json:"link,omitempty"`
	Value     *DeleteSharedEnvVariableValueUnion  `json:"value,omitempty"`
	GitBranch *string                             `json:"gitBranch,omitempty"`
	Target    *DeleteSharedEnvVariableTargetUnion `json:"target,omitempty"`
	Project   *string                             `json:"project,omitempty"`
}

func (o *DeleteSharedEnvVariableError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *DeleteSharedEnvVariableError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *DeleteSharedEnvVariableError) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *DeleteSharedEnvVariableError) GetEnvVarID() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarID
}

func (o *DeleteSharedEnvVariableError) GetEnvVarKey() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarKey
}

func (o *DeleteSharedEnvVariableError) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *DeleteSharedEnvVariableError) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *DeleteSharedEnvVariableError) GetValue() *DeleteSharedEnvVariableValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *DeleteSharedEnvVariableError) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *DeleteSharedEnvVariableError) GetTarget() *DeleteSharedEnvVariableTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *DeleteSharedEnvVariableError) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type DeleteSharedEnvVariableFailed struct {
	Error DeleteSharedEnvVariableError `json:"error"`
}

func (o *DeleteSharedEnvVariableFailed) GetError() DeleteSharedEnvVariableError {
	if o == nil {
		return DeleteSharedEnvVariableError{}
	}
	return o.Error
}

type DeleteSharedEnvVariableResponseBody struct {
	Deleted []string                        `json:"deleted"`
	Failed  []DeleteSharedEnvVariableFailed `json:"failed"`
}

func (o *DeleteSharedEnvVariableResponseBody) GetDeleted() []string {
	if o == nil {
		return []string{}
	}
	return o.Deleted
}

func (o *DeleteSharedEnvVariableResponseBody) GetFailed() []DeleteSharedEnvVariableFailed {
	if o == nil {
		return []DeleteSharedEnvVariableFailed{}
	}
	return o.Failed
}

type DeleteSharedEnvVariableResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *DeleteSharedEnvVariableResponseBody
}

func (o *DeleteSharedEnvVariableResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *DeleteSharedEnvVariableResponse) GetObject() *DeleteSharedEnvVariableResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
