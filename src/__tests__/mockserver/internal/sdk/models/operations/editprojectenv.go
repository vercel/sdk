// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type EditProjectEnvTargetRequest string

const (
	EditProjectEnvTargetRequestProduction  EditProjectEnvTargetRequest = "production"
	EditProjectEnvTargetRequestPreview     EditProjectEnvTargetRequest = "preview"
	EditProjectEnvTargetRequestDevelopment EditProjectEnvTargetRequest = "development"
)

func (e EditProjectEnvTargetRequest) ToPointer() *EditProjectEnvTargetRequest {
	return &e
}
func (e *EditProjectEnvTargetRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvTargetRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTargetRequest: %v", v)
	}
}

// EditProjectEnvTypeRequest - The type of environment variable
type EditProjectEnvTypeRequest string

const (
	EditProjectEnvTypeRequestSystem    EditProjectEnvTypeRequest = "system"
	EditProjectEnvTypeRequestSecret    EditProjectEnvTypeRequest = "secret"
	EditProjectEnvTypeRequestEncrypted EditProjectEnvTypeRequest = "encrypted"
	EditProjectEnvTypeRequestPlain     EditProjectEnvTypeRequest = "plain"
	EditProjectEnvTypeRequestSensitive EditProjectEnvTypeRequest = "sensitive"
)

func (e EditProjectEnvTypeRequest) ToPointer() *EditProjectEnvTypeRequest {
	return &e
}
func (e *EditProjectEnvTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "secret":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = EditProjectEnvTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeRequest: %v", v)
	}
}

type EditProjectEnvRequestBody struct {
	// The name of the environment variable
	Key *string `json:"key,omitempty"`
	// The target environment of the environment variable
	Target []EditProjectEnvTargetRequest `json:"target,omitempty"`
	// If defined, the git branch of the environment variable (must have target=preview)
	GitBranch *string `json:"gitBranch,omitempty"`
	// The type of environment variable
	Type *EditProjectEnvTypeRequest `json:"type,omitempty"`
	// The value of the environment variable
	Value *string `json:"value,omitempty"`
	// The custom environments that the environment variable should be synced to
	CustomEnvironmentIds []string `json:"customEnvironmentIds,omitempty"`
	// A comment to add context on what this env var is for
	Comment *string `json:"comment,omitempty"`
}

func (o *EditProjectEnvRequestBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *EditProjectEnvRequestBody) GetTarget() []EditProjectEnvTargetRequest {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvRequestBody) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvRequestBody) GetType() *EditProjectEnvTypeRequest {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *EditProjectEnvRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *EditProjectEnvRequestBody) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *EditProjectEnvRequestBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type EditProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody EditProjectEnvRequestBody `request:"mediaType=application/json"`
}

func (o *EditProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *EditProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EditProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *EditProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *EditProjectEnvRequest) GetRequestBody() EditProjectEnvRequestBody {
	if o == nil {
		return EditProjectEnvRequestBody{}
	}
	return o.RequestBody
}

type EditProjectEnvResponseBody2 struct {
}

type EditProjectEnvResponseBodyTargetEnum string

const (
	EditProjectEnvResponseBodyTargetEnumProduction  EditProjectEnvResponseBodyTargetEnum = "production"
	EditProjectEnvResponseBodyTargetEnumPreview     EditProjectEnvResponseBodyTargetEnum = "preview"
	EditProjectEnvResponseBodyTargetEnumDevelopment EditProjectEnvResponseBodyTargetEnum = "development"
)

func (e EditProjectEnvResponseBodyTargetEnum) ToPointer() *EditProjectEnvResponseBodyTargetEnum {
	return &e
}
func (e *EditProjectEnvResponseBodyTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = EditProjectEnvResponseBodyTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvResponseBodyTargetEnum: %v", v)
	}
}

type EditProjectEnvTargetUnionType string

const (
	EditProjectEnvTargetUnionTypeArrayOfStr                           EditProjectEnvTargetUnionType = "arrayOfStr"
	EditProjectEnvTargetUnionTypeEditProjectEnvResponseBodyTargetEnum EditProjectEnvTargetUnionType = "editProjectEnv_ResponseBody_target_enum"
)

type EditProjectEnvTargetUnion struct {
	ArrayOfStr                           []string                              `queryParam:"inline"`
	EditProjectEnvResponseBodyTargetEnum *EditProjectEnvResponseBodyTargetEnum `queryParam:"inline"`

	Type EditProjectEnvTargetUnionType
}

func CreateEditProjectEnvTargetUnionArrayOfStr(arrayOfStr []string) EditProjectEnvTargetUnion {
	typ := EditProjectEnvTargetUnionTypeArrayOfStr

	return EditProjectEnvTargetUnion{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateEditProjectEnvTargetUnionEditProjectEnvResponseBodyTargetEnum(editProjectEnvResponseBodyTargetEnum EditProjectEnvResponseBodyTargetEnum) EditProjectEnvTargetUnion {
	typ := EditProjectEnvTargetUnionTypeEditProjectEnvResponseBodyTargetEnum

	return EditProjectEnvTargetUnion{
		EditProjectEnvResponseBodyTargetEnum: &editProjectEnvResponseBodyTargetEnum,
		Type:                                 typ,
	}
}

func (u *EditProjectEnvTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = EditProjectEnvTargetUnionTypeArrayOfStr
		return nil
	}

	var editProjectEnvResponseBodyTargetEnum EditProjectEnvResponseBodyTargetEnum = EditProjectEnvResponseBodyTargetEnum("")
	if err := utils.UnmarshalJSON(data, &editProjectEnvResponseBodyTargetEnum, "", true, true); err == nil {
		u.EditProjectEnvResponseBodyTargetEnum = &editProjectEnvResponseBodyTargetEnum
		u.Type = EditProjectEnvTargetUnionTypeEditProjectEnvResponseBodyTargetEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvTargetUnion", string(data))
}

func (u EditProjectEnvTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.EditProjectEnvResponseBodyTargetEnum != nil {
		return utils.MarshalJSON(u.EditProjectEnvResponseBodyTargetEnum, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvTargetUnion: all fields are null")
}

type EditProjectEnvResponseBodyType string

const (
	EditProjectEnvResponseBodyTypeSystem    EditProjectEnvResponseBodyType = "system"
	EditProjectEnvResponseBodyTypeEncrypted EditProjectEnvResponseBodyType = "encrypted"
	EditProjectEnvResponseBodyTypePlain     EditProjectEnvResponseBodyType = "plain"
	EditProjectEnvResponseBodyTypeSensitive EditProjectEnvResponseBodyType = "sensitive"
	EditProjectEnvResponseBodyTypeSecret    EditProjectEnvResponseBodyType = "secret"
)

func (e EditProjectEnvResponseBodyType) ToPointer() *EditProjectEnvResponseBodyType {
	return &e
}
func (e *EditProjectEnvResponseBodyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = EditProjectEnvResponseBodyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvResponseBodyType: %v", v)
	}
}

type EditProjectEnvTypeFlagsConnectionString string

const (
	EditProjectEnvTypeFlagsConnectionStringFlagsConnectionString EditProjectEnvTypeFlagsConnectionString = "flags-connection-string"
)

func (e EditProjectEnvTypeFlagsConnectionString) ToPointer() *EditProjectEnvTypeFlagsConnectionString {
	return &e
}
func (e *EditProjectEnvTypeFlagsConnectionString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = EditProjectEnvTypeFlagsConnectionString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeFlagsConnectionString: %v", v)
	}
}

type EditProjectEnvContentHintFlagsConnectionString struct {
	Type      EditProjectEnvTypeFlagsConnectionString `json:"type"`
	ProjectID string                                  `json:"projectId"`
}

func (o *EditProjectEnvContentHintFlagsConnectionString) GetType() EditProjectEnvTypeFlagsConnectionString {
	if o == nil {
		return EditProjectEnvTypeFlagsConnectionString("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintFlagsConnectionString) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type EditProjectEnvTypeIntegrationStoreSecret string

const (
	EditProjectEnvTypeIntegrationStoreSecretIntegrationStoreSecret EditProjectEnvTypeIntegrationStoreSecret = "integration-store-secret"
)

func (e EditProjectEnvTypeIntegrationStoreSecret) ToPointer() *EditProjectEnvTypeIntegrationStoreSecret {
	return &e
}
func (e *EditProjectEnvTypeIntegrationStoreSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = EditProjectEnvTypeIntegrationStoreSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeIntegrationStoreSecret: %v", v)
	}
}

type EditProjectEnvContentHintIntegrationStoreSecret struct {
	Type                       EditProjectEnvTypeIntegrationStoreSecret `json:"type"`
	StoreID                    string                                   `json:"storeId"`
	IntegrationID              string                                   `json:"integrationId"`
	IntegrationProductID       string                                   `json:"integrationProductId"`
	IntegrationConfigurationID string                                   `json:"integrationConfigurationId"`
}

func (o *EditProjectEnvContentHintIntegrationStoreSecret) GetType() EditProjectEnvTypeIntegrationStoreSecret {
	if o == nil {
		return EditProjectEnvTypeIntegrationStoreSecret("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintIntegrationStoreSecret) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *EditProjectEnvContentHintIntegrationStoreSecret) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *EditProjectEnvContentHintIntegrationStoreSecret) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *EditProjectEnvContentHintIntegrationStoreSecret) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type EditProjectEnvTypePostgresURLNoSsl string

const (
	EditProjectEnvTypePostgresURLNoSslPostgresURLNoSsl EditProjectEnvTypePostgresURLNoSsl = "postgres-url-no-ssl"
)

func (e EditProjectEnvTypePostgresURLNoSsl) ToPointer() *EditProjectEnvTypePostgresURLNoSsl {
	return &e
}
func (e *EditProjectEnvTypePostgresURLNoSsl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = EditProjectEnvTypePostgresURLNoSsl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresURLNoSsl: %v", v)
	}
}

type EditProjectEnvContentHintPostgresURLNoSsl struct {
	Type    EditProjectEnvTypePostgresURLNoSsl `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresURLNoSsl) GetType() EditProjectEnvTypePostgresURLNoSsl {
	if o == nil {
		return EditProjectEnvTypePostgresURLNoSsl("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresURLNoSsl) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresDatabase string

const (
	EditProjectEnvTypePostgresDatabasePostgresDatabase EditProjectEnvTypePostgresDatabase = "postgres-database"
)

func (e EditProjectEnvTypePostgresDatabase) ToPointer() *EditProjectEnvTypePostgresDatabase {
	return &e
}
func (e *EditProjectEnvTypePostgresDatabase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = EditProjectEnvTypePostgresDatabase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresDatabase: %v", v)
	}
}

type EditProjectEnvContentHintPostgresDatabase struct {
	Type    EditProjectEnvTypePostgresDatabase `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresDatabase) GetType() EditProjectEnvTypePostgresDatabase {
	if o == nil {
		return EditProjectEnvTypePostgresDatabase("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresDatabase) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresPassword string

const (
	EditProjectEnvTypePostgresPasswordPostgresPassword EditProjectEnvTypePostgresPassword = "postgres-password"
)

func (e EditProjectEnvTypePostgresPassword) ToPointer() *EditProjectEnvTypePostgresPassword {
	return &e
}
func (e *EditProjectEnvTypePostgresPassword) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = EditProjectEnvTypePostgresPassword(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresPassword: %v", v)
	}
}

type EditProjectEnvContentHintPostgresPassword struct {
	Type    EditProjectEnvTypePostgresPassword `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresPassword) GetType() EditProjectEnvTypePostgresPassword {
	if o == nil {
		return EditProjectEnvTypePostgresPassword("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresPassword) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresHost string

const (
	EditProjectEnvTypePostgresHostPostgresHost EditProjectEnvTypePostgresHost = "postgres-host"
)

func (e EditProjectEnvTypePostgresHost) ToPointer() *EditProjectEnvTypePostgresHost {
	return &e
}
func (e *EditProjectEnvTypePostgresHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = EditProjectEnvTypePostgresHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresHost: %v", v)
	}
}

type EditProjectEnvContentHintPostgresHost struct {
	Type    EditProjectEnvTypePostgresHost `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresHost) GetType() EditProjectEnvTypePostgresHost {
	if o == nil {
		return EditProjectEnvTypePostgresHost("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresHost) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresUser string

const (
	EditProjectEnvTypePostgresUserPostgresUser EditProjectEnvTypePostgresUser = "postgres-user"
)

func (e EditProjectEnvTypePostgresUser) ToPointer() *EditProjectEnvTypePostgresUser {
	return &e
}
func (e *EditProjectEnvTypePostgresUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = EditProjectEnvTypePostgresUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresUser: %v", v)
	}
}

type EditProjectEnvContentHintPostgresUser struct {
	Type    EditProjectEnvTypePostgresUser `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresUser) GetType() EditProjectEnvTypePostgresUser {
	if o == nil {
		return EditProjectEnvTypePostgresUser("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresUser) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresPrismaURL string

const (
	EditProjectEnvTypePostgresPrismaURLPostgresPrismaURL EditProjectEnvTypePostgresPrismaURL = "postgres-prisma-url"
)

func (e EditProjectEnvTypePostgresPrismaURL) ToPointer() *EditProjectEnvTypePostgresPrismaURL {
	return &e
}
func (e *EditProjectEnvTypePostgresPrismaURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = EditProjectEnvTypePostgresPrismaURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresPrismaURL: %v", v)
	}
}

type EditProjectEnvContentHintPostgresPrismaURL struct {
	Type    EditProjectEnvTypePostgresPrismaURL `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresPrismaURL) GetType() EditProjectEnvTypePostgresPrismaURL {
	if o == nil {
		return EditProjectEnvTypePostgresPrismaURL("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresPrismaURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresURLNonPooling string

const (
	EditProjectEnvTypePostgresURLNonPoolingPostgresURLNonPooling EditProjectEnvTypePostgresURLNonPooling = "postgres-url-non-pooling"
)

func (e EditProjectEnvTypePostgresURLNonPooling) ToPointer() *EditProjectEnvTypePostgresURLNonPooling {
	return &e
}
func (e *EditProjectEnvTypePostgresURLNonPooling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = EditProjectEnvTypePostgresURLNonPooling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresURLNonPooling: %v", v)
	}
}

type EditProjectEnvContentHintPostgresURLNonPooling struct {
	Type    EditProjectEnvTypePostgresURLNonPooling `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresURLNonPooling) GetType() EditProjectEnvTypePostgresURLNonPooling {
	if o == nil {
		return EditProjectEnvTypePostgresURLNonPooling("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresURLNonPooling) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypePostgresURL string

const (
	EditProjectEnvTypePostgresURLPostgresURL EditProjectEnvTypePostgresURL = "postgres-url"
)

func (e EditProjectEnvTypePostgresURL) ToPointer() *EditProjectEnvTypePostgresURL {
	return &e
}
func (e *EditProjectEnvTypePostgresURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = EditProjectEnvTypePostgresURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypePostgresURL: %v", v)
	}
}

type EditProjectEnvContentHintPostgresURL struct {
	Type    EditProjectEnvTypePostgresURL `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *EditProjectEnvContentHintPostgresURL) GetType() EditProjectEnvTypePostgresURL {
	if o == nil {
		return EditProjectEnvTypePostgresURL("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintPostgresURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypeBlobReadWriteToken string

const (
	EditProjectEnvTypeBlobReadWriteTokenBlobReadWriteToken EditProjectEnvTypeBlobReadWriteToken = "blob-read-write-token"
)

func (e EditProjectEnvTypeBlobReadWriteToken) ToPointer() *EditProjectEnvTypeBlobReadWriteToken {
	return &e
}
func (e *EditProjectEnvTypeBlobReadWriteToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = EditProjectEnvTypeBlobReadWriteToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeBlobReadWriteToken: %v", v)
	}
}

type EditProjectEnvContentHintBlobReadWriteToken struct {
	Type    EditProjectEnvTypeBlobReadWriteToken `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *EditProjectEnvContentHintBlobReadWriteToken) GetType() EditProjectEnvTypeBlobReadWriteToken {
	if o == nil {
		return EditProjectEnvTypeBlobReadWriteToken("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintBlobReadWriteToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypeRedisRestAPIReadOnlyToken string

const (
	EditProjectEnvTypeRedisRestAPIReadOnlyTokenRedisRestAPIReadOnlyToken EditProjectEnvTypeRedisRestAPIReadOnlyToken = "redis-rest-api-read-only-token"
)

func (e EditProjectEnvTypeRedisRestAPIReadOnlyToken) ToPointer() *EditProjectEnvTypeRedisRestAPIReadOnlyToken {
	return &e
}
func (e *EditProjectEnvTypeRedisRestAPIReadOnlyToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = EditProjectEnvTypeRedisRestAPIReadOnlyToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeRedisRestAPIReadOnlyToken: %v", v)
	}
}

type EditProjectEnvContentHintRedisRestAPIReadOnlyToken struct {
	Type    EditProjectEnvTypeRedisRestAPIReadOnlyToken `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *EditProjectEnvContentHintRedisRestAPIReadOnlyToken) GetType() EditProjectEnvTypeRedisRestAPIReadOnlyToken {
	if o == nil {
		return EditProjectEnvTypeRedisRestAPIReadOnlyToken("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintRedisRestAPIReadOnlyToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypeRedisRestAPIToken string

const (
	EditProjectEnvTypeRedisRestAPITokenRedisRestAPIToken EditProjectEnvTypeRedisRestAPIToken = "redis-rest-api-token"
)

func (e EditProjectEnvTypeRedisRestAPIToken) ToPointer() *EditProjectEnvTypeRedisRestAPIToken {
	return &e
}
func (e *EditProjectEnvTypeRedisRestAPIToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = EditProjectEnvTypeRedisRestAPIToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeRedisRestAPIToken: %v", v)
	}
}

type EditProjectEnvContentHintRedisRestAPIToken struct {
	Type    EditProjectEnvTypeRedisRestAPIToken `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *EditProjectEnvContentHintRedisRestAPIToken) GetType() EditProjectEnvTypeRedisRestAPIToken {
	if o == nil {
		return EditProjectEnvTypeRedisRestAPIToken("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintRedisRestAPIToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypeRedisRestAPIURL string

const (
	EditProjectEnvTypeRedisRestAPIURLRedisRestAPIURL EditProjectEnvTypeRedisRestAPIURL = "redis-rest-api-url"
)

func (e EditProjectEnvTypeRedisRestAPIURL) ToPointer() *EditProjectEnvTypeRedisRestAPIURL {
	return &e
}
func (e *EditProjectEnvTypeRedisRestAPIURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = EditProjectEnvTypeRedisRestAPIURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeRedisRestAPIURL: %v", v)
	}
}

type EditProjectEnvContentHintRedisRestAPIURL struct {
	Type    EditProjectEnvTypeRedisRestAPIURL `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *EditProjectEnvContentHintRedisRestAPIURL) GetType() EditProjectEnvTypeRedisRestAPIURL {
	if o == nil {
		return EditProjectEnvTypeRedisRestAPIURL("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintRedisRestAPIURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvTypeRedisURL string

const (
	EditProjectEnvTypeRedisURLRedisURL EditProjectEnvTypeRedisURL = "redis-url"
)

func (e EditProjectEnvTypeRedisURL) ToPointer() *EditProjectEnvTypeRedisURL {
	return &e
}
func (e *EditProjectEnvTypeRedisURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = EditProjectEnvTypeRedisURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeRedisURL: %v", v)
	}
}

type EditProjectEnvContentHintRedisURL struct {
	Type    EditProjectEnvTypeRedisURL `json:"type"`
	StoreID string                     `json:"storeId"`
}

func (o *EditProjectEnvContentHintRedisURL) GetType() EditProjectEnvTypeRedisURL {
	if o == nil {
		return EditProjectEnvTypeRedisURL("")
	}
	return o.Type
}

func (o *EditProjectEnvContentHintRedisURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type EditProjectEnvContentHintUnionType string

const (
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisURL                  EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_RedisURL"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIURL           EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_RedisRestAPIURL"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIToken         EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_RedisRestAPIToken"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIReadOnlyToken EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_RedisRestAPIReadOnlyToken"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintBlobReadWriteToken        EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_BlobReadWriteToken"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURL               EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresURL"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURLNonPooling     EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresURLNonPooling"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresPrismaURL         EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresPrismaURL"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresUser              EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresUser"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresHost              EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresHost"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresPassword          EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresPassword"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresDatabase          EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresDatabase"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURLNoSsl          EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_PostgresURLNoSsl"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintIntegrationStoreSecret    EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_IntegrationStoreSecret"
	EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintFlagsConnectionString     EditProjectEnvContentHintUnionType = "editProjectEnv_contentHint_FlagsConnectionString"
)

type EditProjectEnvContentHintUnion struct {
	EditProjectEnvContentHintRedisURL                  *EditProjectEnvContentHintRedisURL                  `queryParam:"inline"`
	EditProjectEnvContentHintRedisRestAPIURL           *EditProjectEnvContentHintRedisRestAPIURL           `queryParam:"inline"`
	EditProjectEnvContentHintRedisRestAPIToken         *EditProjectEnvContentHintRedisRestAPIToken         `queryParam:"inline"`
	EditProjectEnvContentHintRedisRestAPIReadOnlyToken *EditProjectEnvContentHintRedisRestAPIReadOnlyToken `queryParam:"inline"`
	EditProjectEnvContentHintBlobReadWriteToken        *EditProjectEnvContentHintBlobReadWriteToken        `queryParam:"inline"`
	EditProjectEnvContentHintPostgresURL               *EditProjectEnvContentHintPostgresURL               `queryParam:"inline"`
	EditProjectEnvContentHintPostgresURLNonPooling     *EditProjectEnvContentHintPostgresURLNonPooling     `queryParam:"inline"`
	EditProjectEnvContentHintPostgresPrismaURL         *EditProjectEnvContentHintPostgresPrismaURL         `queryParam:"inline"`
	EditProjectEnvContentHintPostgresUser              *EditProjectEnvContentHintPostgresUser              `queryParam:"inline"`
	EditProjectEnvContentHintPostgresHost              *EditProjectEnvContentHintPostgresHost              `queryParam:"inline"`
	EditProjectEnvContentHintPostgresPassword          *EditProjectEnvContentHintPostgresPassword          `queryParam:"inline"`
	EditProjectEnvContentHintPostgresDatabase          *EditProjectEnvContentHintPostgresDatabase          `queryParam:"inline"`
	EditProjectEnvContentHintPostgresURLNoSsl          *EditProjectEnvContentHintPostgresURLNoSsl          `queryParam:"inline"`
	EditProjectEnvContentHintIntegrationStoreSecret    *EditProjectEnvContentHintIntegrationStoreSecret    `queryParam:"inline"`
	EditProjectEnvContentHintFlagsConnectionString     *EditProjectEnvContentHintFlagsConnectionString     `queryParam:"inline"`

	Type EditProjectEnvContentHintUnionType
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintRedisURL(editProjectEnvContentHintRedisURL EditProjectEnvContentHintRedisURL) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisURL

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintRedisURL: &editProjectEnvContentHintRedisURL,
		Type:                              typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintRedisRestAPIURL(editProjectEnvContentHintRedisRestAPIURL EditProjectEnvContentHintRedisRestAPIURL) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIURL

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintRedisRestAPIURL: &editProjectEnvContentHintRedisRestAPIURL,
		Type:                                     typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintRedisRestAPIToken(editProjectEnvContentHintRedisRestAPIToken EditProjectEnvContentHintRedisRestAPIToken) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIToken

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintRedisRestAPIToken: &editProjectEnvContentHintRedisRestAPIToken,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintRedisRestAPIReadOnlyToken(editProjectEnvContentHintRedisRestAPIReadOnlyToken EditProjectEnvContentHintRedisRestAPIReadOnlyToken) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIReadOnlyToken

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintRedisRestAPIReadOnlyToken: &editProjectEnvContentHintRedisRestAPIReadOnlyToken,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintBlobReadWriteToken(editProjectEnvContentHintBlobReadWriteToken EditProjectEnvContentHintBlobReadWriteToken) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintBlobReadWriteToken

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintBlobReadWriteToken: &editProjectEnvContentHintBlobReadWriteToken,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresURL(editProjectEnvContentHintPostgresURL EditProjectEnvContentHintPostgresURL) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURL

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresURL: &editProjectEnvContentHintPostgresURL,
		Type:                                 typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresURLNonPooling(editProjectEnvContentHintPostgresURLNonPooling EditProjectEnvContentHintPostgresURLNonPooling) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURLNonPooling

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresURLNonPooling: &editProjectEnvContentHintPostgresURLNonPooling,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresPrismaURL(editProjectEnvContentHintPostgresPrismaURL EditProjectEnvContentHintPostgresPrismaURL) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresPrismaURL

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresPrismaURL: &editProjectEnvContentHintPostgresPrismaURL,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresUser(editProjectEnvContentHintPostgresUser EditProjectEnvContentHintPostgresUser) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresUser

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresUser: &editProjectEnvContentHintPostgresUser,
		Type:                                  typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresHost(editProjectEnvContentHintPostgresHost EditProjectEnvContentHintPostgresHost) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresHost

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresHost: &editProjectEnvContentHintPostgresHost,
		Type:                                  typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresPassword(editProjectEnvContentHintPostgresPassword EditProjectEnvContentHintPostgresPassword) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresPassword

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresPassword: &editProjectEnvContentHintPostgresPassword,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresDatabase(editProjectEnvContentHintPostgresDatabase EditProjectEnvContentHintPostgresDatabase) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresDatabase

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresDatabase: &editProjectEnvContentHintPostgresDatabase,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintPostgresURLNoSsl(editProjectEnvContentHintPostgresURLNoSsl EditProjectEnvContentHintPostgresURLNoSsl) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURLNoSsl

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintPostgresURLNoSsl: &editProjectEnvContentHintPostgresURLNoSsl,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintIntegrationStoreSecret(editProjectEnvContentHintIntegrationStoreSecret EditProjectEnvContentHintIntegrationStoreSecret) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintIntegrationStoreSecret

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintIntegrationStoreSecret: &editProjectEnvContentHintIntegrationStoreSecret,
		Type: typ,
	}
}

func CreateEditProjectEnvContentHintUnionEditProjectEnvContentHintFlagsConnectionString(editProjectEnvContentHintFlagsConnectionString EditProjectEnvContentHintFlagsConnectionString) EditProjectEnvContentHintUnion {
	typ := EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintFlagsConnectionString

	return EditProjectEnvContentHintUnion{
		EditProjectEnvContentHintFlagsConnectionString: &editProjectEnvContentHintFlagsConnectionString,
		Type: typ,
	}
}

func (u *EditProjectEnvContentHintUnion) UnmarshalJSON(data []byte) error {

	var editProjectEnvContentHintPostgresURLNonPooling EditProjectEnvContentHintPostgresURLNonPooling = EditProjectEnvContentHintPostgresURLNonPooling{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresURLNonPooling, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresURLNonPooling = &editProjectEnvContentHintPostgresURLNonPooling
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURLNonPooling
		return nil
	}

	var editProjectEnvContentHintPostgresPassword EditProjectEnvContentHintPostgresPassword = EditProjectEnvContentHintPostgresPassword{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresPassword, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresPassword = &editProjectEnvContentHintPostgresPassword
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresPassword
		return nil
	}

	var editProjectEnvContentHintRedisRestAPIToken EditProjectEnvContentHintRedisRestAPIToken = EditProjectEnvContentHintRedisRestAPIToken{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintRedisRestAPIToken, "", true, true); err == nil {
		u.EditProjectEnvContentHintRedisRestAPIToken = &editProjectEnvContentHintRedisRestAPIToken
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIToken
		return nil
	}

	var editProjectEnvContentHintRedisRestAPIReadOnlyToken EditProjectEnvContentHintRedisRestAPIReadOnlyToken = EditProjectEnvContentHintRedisRestAPIReadOnlyToken{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintRedisRestAPIReadOnlyToken, "", true, true); err == nil {
		u.EditProjectEnvContentHintRedisRestAPIReadOnlyToken = &editProjectEnvContentHintRedisRestAPIReadOnlyToken
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIReadOnlyToken
		return nil
	}

	var editProjectEnvContentHintBlobReadWriteToken EditProjectEnvContentHintBlobReadWriteToken = EditProjectEnvContentHintBlobReadWriteToken{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintBlobReadWriteToken, "", true, true); err == nil {
		u.EditProjectEnvContentHintBlobReadWriteToken = &editProjectEnvContentHintBlobReadWriteToken
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintBlobReadWriteToken
		return nil
	}

	var editProjectEnvContentHintPostgresURL EditProjectEnvContentHintPostgresURL = EditProjectEnvContentHintPostgresURL{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresURL, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresURL = &editProjectEnvContentHintPostgresURL
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURL
		return nil
	}

	var editProjectEnvContentHintRedisRestAPIURL EditProjectEnvContentHintRedisRestAPIURL = EditProjectEnvContentHintRedisRestAPIURL{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintRedisRestAPIURL, "", true, true); err == nil {
		u.EditProjectEnvContentHintRedisRestAPIURL = &editProjectEnvContentHintRedisRestAPIURL
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisRestAPIURL
		return nil
	}

	var editProjectEnvContentHintPostgresUser EditProjectEnvContentHintPostgresUser = EditProjectEnvContentHintPostgresUser{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresUser, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresUser = &editProjectEnvContentHintPostgresUser
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresUser
		return nil
	}

	var editProjectEnvContentHintRedisURL EditProjectEnvContentHintRedisURL = EditProjectEnvContentHintRedisURL{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintRedisURL, "", true, true); err == nil {
		u.EditProjectEnvContentHintRedisURL = &editProjectEnvContentHintRedisURL
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintRedisURL
		return nil
	}

	var editProjectEnvContentHintPostgresHost EditProjectEnvContentHintPostgresHost = EditProjectEnvContentHintPostgresHost{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresHost, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresHost = &editProjectEnvContentHintPostgresHost
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresHost
		return nil
	}

	var editProjectEnvContentHintPostgresPrismaURL EditProjectEnvContentHintPostgresPrismaURL = EditProjectEnvContentHintPostgresPrismaURL{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresPrismaURL, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresPrismaURL = &editProjectEnvContentHintPostgresPrismaURL
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresPrismaURL
		return nil
	}

	var editProjectEnvContentHintPostgresDatabase EditProjectEnvContentHintPostgresDatabase = EditProjectEnvContentHintPostgresDatabase{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresDatabase, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresDatabase = &editProjectEnvContentHintPostgresDatabase
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresDatabase
		return nil
	}

	var editProjectEnvContentHintPostgresURLNoSsl EditProjectEnvContentHintPostgresURLNoSsl = EditProjectEnvContentHintPostgresURLNoSsl{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintPostgresURLNoSsl, "", true, true); err == nil {
		u.EditProjectEnvContentHintPostgresURLNoSsl = &editProjectEnvContentHintPostgresURLNoSsl
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintPostgresURLNoSsl
		return nil
	}

	var editProjectEnvContentHintFlagsConnectionString EditProjectEnvContentHintFlagsConnectionString = EditProjectEnvContentHintFlagsConnectionString{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintFlagsConnectionString, "", true, true); err == nil {
		u.EditProjectEnvContentHintFlagsConnectionString = &editProjectEnvContentHintFlagsConnectionString
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintFlagsConnectionString
		return nil
	}

	var editProjectEnvContentHintIntegrationStoreSecret EditProjectEnvContentHintIntegrationStoreSecret = EditProjectEnvContentHintIntegrationStoreSecret{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvContentHintIntegrationStoreSecret, "", true, true); err == nil {
		u.EditProjectEnvContentHintIntegrationStoreSecret = &editProjectEnvContentHintIntegrationStoreSecret
		u.Type = EditProjectEnvContentHintUnionTypeEditProjectEnvContentHintIntegrationStoreSecret
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvContentHintUnion", string(data))
}

func (u EditProjectEnvContentHintUnion) MarshalJSON() ([]byte, error) {
	if u.EditProjectEnvContentHintRedisURL != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintRedisURL, "", true)
	}

	if u.EditProjectEnvContentHintRedisRestAPIURL != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintRedisRestAPIURL, "", true)
	}

	if u.EditProjectEnvContentHintRedisRestAPIToken != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintRedisRestAPIToken, "", true)
	}

	if u.EditProjectEnvContentHintRedisRestAPIReadOnlyToken != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintRedisRestAPIReadOnlyToken, "", true)
	}

	if u.EditProjectEnvContentHintBlobReadWriteToken != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintBlobReadWriteToken, "", true)
	}

	if u.EditProjectEnvContentHintPostgresURL != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresURL, "", true)
	}

	if u.EditProjectEnvContentHintPostgresURLNonPooling != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresURLNonPooling, "", true)
	}

	if u.EditProjectEnvContentHintPostgresPrismaURL != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresPrismaURL, "", true)
	}

	if u.EditProjectEnvContentHintPostgresUser != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresUser, "", true)
	}

	if u.EditProjectEnvContentHintPostgresHost != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresHost, "", true)
	}

	if u.EditProjectEnvContentHintPostgresPassword != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresPassword, "", true)
	}

	if u.EditProjectEnvContentHintPostgresDatabase != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresDatabase, "", true)
	}

	if u.EditProjectEnvContentHintPostgresURLNoSsl != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintPostgresURLNoSsl, "", true)
	}

	if u.EditProjectEnvContentHintIntegrationStoreSecret != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintIntegrationStoreSecret, "", true)
	}

	if u.EditProjectEnvContentHintFlagsConnectionString != nil {
		return utils.MarshalJSON(u.EditProjectEnvContentHintFlagsConnectionString, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvContentHintUnion: all fields are null")
}

type EditProjectEnvTypeFlagsSecret string

const (
	EditProjectEnvTypeFlagsSecretFlagsSecret EditProjectEnvTypeFlagsSecret = "flags-secret"
)

func (e EditProjectEnvTypeFlagsSecret) ToPointer() *EditProjectEnvTypeFlagsSecret {
	return &e
}
func (e *EditProjectEnvTypeFlagsSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = EditProjectEnvTypeFlagsSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EditProjectEnvTypeFlagsSecret: %v", v)
	}
}

// EditProjectEnvInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type EditProjectEnvInternalContentHint struct {
	Type EditProjectEnvTypeFlagsSecret `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *EditProjectEnvInternalContentHint) GetType() EditProjectEnvTypeFlagsSecret {
	if o == nil {
		return EditProjectEnvTypeFlagsSecret("")
	}
	return o.Type
}

func (o *EditProjectEnvInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type EditProjectEnvResponseBody1 struct {
	Target *EditProjectEnvTargetUnion     `json:"target,omitempty"`
	Type   EditProjectEnvResponseBodyType `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                         `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                           `json:"decrypted,omitempty"`
	Value             string                          `json:"value"`
	ID                *string                         `json:"id,omitempty"`
	Key               string                          `json:"key"`
	ConfigurationID   *string                         `json:"configurationId,omitempty"`
	CreatedAt         *float64                        `json:"createdAt,omitempty"`
	UpdatedAt         *float64                        `json:"updatedAt,omitempty"`
	CreatedBy         *string                         `json:"createdBy,omitempty"`
	UpdatedBy         *string                         `json:"updatedBy,omitempty"`
	GitBranch         *string                         `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                         `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *EditProjectEnvContentHintUnion `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *EditProjectEnvInternalContentHint `json:"internalContentHint,omitempty"`
	Comment              *string                            `json:"comment,omitempty"`
	CustomEnvironmentIds []string                           `json:"customEnvironmentIds,omitempty"`
}

func (o *EditProjectEnvResponseBody1) GetTarget() *EditProjectEnvTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *EditProjectEnvResponseBody1) GetType() EditProjectEnvResponseBodyType {
	if o == nil {
		return EditProjectEnvResponseBodyType("")
	}
	return o.Type
}

func (o *EditProjectEnvResponseBody1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *EditProjectEnvResponseBody1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *EditProjectEnvResponseBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *EditProjectEnvResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *EditProjectEnvResponseBody1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *EditProjectEnvResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *EditProjectEnvResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EditProjectEnvResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *EditProjectEnvResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *EditProjectEnvResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *EditProjectEnvResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *EditProjectEnvResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *EditProjectEnvResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *EditProjectEnvResponseBody1) GetContentHint() *EditProjectEnvContentHintUnion {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *EditProjectEnvResponseBody1) GetInternalContentHint() *EditProjectEnvInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *EditProjectEnvResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *EditProjectEnvResponseBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type EditProjectEnvResponseBodyUnionType string

const (
	EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody1 EditProjectEnvResponseBodyUnionType = "editProjectEnv_ResponseBody_1"
	EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody2 EditProjectEnvResponseBodyUnionType = "editProjectEnv_ResponseBody_2"
)

// EditProjectEnvResponseBody - The environment variable was successfully edited
type EditProjectEnvResponseBody struct {
	EditProjectEnvResponseBody1 *EditProjectEnvResponseBody1 `queryParam:"inline"`
	EditProjectEnvResponseBody2 *EditProjectEnvResponseBody2 `queryParam:"inline"`

	Type EditProjectEnvResponseBodyUnionType
}

func CreateEditProjectEnvResponseBodyEditProjectEnvResponseBody1(editProjectEnvResponseBody1 EditProjectEnvResponseBody1) EditProjectEnvResponseBody {
	typ := EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody1

	return EditProjectEnvResponseBody{
		EditProjectEnvResponseBody1: &editProjectEnvResponseBody1,
		Type:                        typ,
	}
}

func CreateEditProjectEnvResponseBodyEditProjectEnvResponseBody2(editProjectEnvResponseBody2 EditProjectEnvResponseBody2) EditProjectEnvResponseBody {
	typ := EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody2

	return EditProjectEnvResponseBody{
		EditProjectEnvResponseBody2: &editProjectEnvResponseBody2,
		Type:                        typ,
	}
}

func (u *EditProjectEnvResponseBody) UnmarshalJSON(data []byte) error {

	var editProjectEnvResponseBody2 EditProjectEnvResponseBody2 = EditProjectEnvResponseBody2{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvResponseBody2, "", true, true); err == nil {
		u.EditProjectEnvResponseBody2 = &editProjectEnvResponseBody2
		u.Type = EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody2
		return nil
	}

	var editProjectEnvResponseBody1 EditProjectEnvResponseBody1 = EditProjectEnvResponseBody1{}
	if err := utils.UnmarshalJSON(data, &editProjectEnvResponseBody1, "", true, true); err == nil {
		u.EditProjectEnvResponseBody1 = &editProjectEnvResponseBody1
		u.Type = EditProjectEnvResponseBodyUnionTypeEditProjectEnvResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for EditProjectEnvResponseBody", string(data))
}

func (u EditProjectEnvResponseBody) MarshalJSON() ([]byte, error) {
	if u.EditProjectEnvResponseBody1 != nil {
		return utils.MarshalJSON(u.EditProjectEnvResponseBody1, "", true)
	}

	if u.EditProjectEnvResponseBody2 != nil {
		return utils.MarshalJSON(u.EditProjectEnvResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type EditProjectEnvResponseBody: all fields are null")
}

type EditProjectEnvResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The environment variable was successfully edited
	OneOf *EditProjectEnvResponseBody
}

func (o *EditProjectEnvResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *EditProjectEnvResponse) GetOneOf() *EditProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
