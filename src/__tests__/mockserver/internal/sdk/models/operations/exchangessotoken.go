// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type ExchangeSsoTokenRequestBody struct {
	// The sensitive code received from Vercel
	Code string `json:"code"`
	// The state received from the initialization request
	State *string `json:"state,omitempty"`
	// The integration client id
	ClientID string `json:"client_id"`
	// The integration client secret
	ClientSecret string `json:"client_secret"`
	// The integration redirect URI
	RedirectURI *string `json:"redirect_uri,omitempty"`
}

func (o *ExchangeSsoTokenRequestBody) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *ExchangeSsoTokenRequestBody) GetState() *string {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *ExchangeSsoTokenRequestBody) GetClientID() string {
	if o == nil {
		return ""
	}
	return o.ClientID
}

func (o *ExchangeSsoTokenRequestBody) GetClientSecret() string {
	if o == nil {
		return ""
	}
	return o.ClientSecret
}

func (o *ExchangeSsoTokenRequestBody) GetRedirectURI() *string {
	if o == nil {
		return nil
	}
	return o.RedirectURI
}

type ExchangeSsoTokenResponseBody struct {
	IDToken     string `json:"id_token"`
	AccessToken any    `json:"access_token"`
	TokenType   any    `json:"token_type"`
}

func (o *ExchangeSsoTokenResponseBody) GetIDToken() string {
	if o == nil {
		return ""
	}
	return o.IDToken
}

func (o *ExchangeSsoTokenResponseBody) GetAccessToken() any {
	if o == nil {
		return nil
	}
	return o.AccessToken
}

func (o *ExchangeSsoTokenResponseBody) GetTokenType() any {
	if o == nil {
		return nil
	}
	return o.TokenType
}

type ExchangeSsoTokenResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ExchangeSsoTokenResponseBody
}

func (o *ExchangeSsoTokenResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ExchangeSsoTokenResponse) GetObject() *ExchangeSsoTokenResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
