// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Decrypt - If true, the environment variable value will be decrypted
//
// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
type Decrypt string

const (
	DecryptTrue  Decrypt = "true"
	DecryptFalse Decrypt = "false"
)

func (e Decrypt) ToPointer() *Decrypt {
	return &e
}
func (e *Decrypt) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Decrypt(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Decrypt: %v", v)
	}
}

type FilterProjectEnvsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// If defined, the git branch of the environment variable to filter the results (must have target=preview)
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// If true, the environment variable value will be decrypted
	Decrypt *Decrypt `queryParam:"style=form,explode=true,name=decrypt"`
	// The source that is calling the endpoint.
	Source *string `queryParam:"style=form,explode=true,name=source"`
	// The unique custom environment identifier within the project
	CustomEnvironmentID *string `queryParam:"style=form,explode=true,name=customEnvironmentId"`
	// The custom environment slug (name) within the project
	CustomEnvironmentSlug *string `queryParam:"style=form,explode=true,name=customEnvironmentSlug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *FilterProjectEnvsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *FilterProjectEnvsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsRequest) GetDecrypt() *Decrypt {
	if o == nil {
		return nil
	}
	return o.Decrypt
}

func (o *FilterProjectEnvsRequest) GetSource() *string {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *FilterProjectEnvsRequest) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *FilterProjectEnvsRequest) GetCustomEnvironmentSlug() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentSlug
}

func (o *FilterProjectEnvsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *FilterProjectEnvsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type FilterProjectEnvsTargetEnvEnum4 string

const (
	FilterProjectEnvsTargetEnvEnum4Production  FilterProjectEnvsTargetEnvEnum4 = "production"
	FilterProjectEnvsTargetEnvEnum4Preview     FilterProjectEnvsTargetEnvEnum4 = "preview"
	FilterProjectEnvsTargetEnvEnum4Development FilterProjectEnvsTargetEnvEnum4 = "development"
)

func (e FilterProjectEnvsTargetEnvEnum4) ToPointer() *FilterProjectEnvsTargetEnvEnum4 {
	return &e
}
func (e *FilterProjectEnvsTargetEnvEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetEnvEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetEnvEnum4: %v", v)
	}
}

type FilterProjectEnvsTargetEnvEnum3 string

const (
	FilterProjectEnvsTargetEnvEnum3Production  FilterProjectEnvsTargetEnvEnum3 = "production"
	FilterProjectEnvsTargetEnvEnum3Preview     FilterProjectEnvsTargetEnvEnum3 = "preview"
	FilterProjectEnvsTargetEnvEnum3Development FilterProjectEnvsTargetEnvEnum3 = "development"
)

func (e FilterProjectEnvsTargetEnvEnum3) ToPointer() *FilterProjectEnvsTargetEnvEnum3 {
	return &e
}
func (e *FilterProjectEnvsTargetEnvEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetEnvEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetEnvEnum3: %v", v)
	}
}

type FilterProjectEnvsEnvTargetUnion2Type string

const (
	FilterProjectEnvsEnvTargetUnion2TypeArrayOfFilterProjectEnvsTargetEnvEnum3 FilterProjectEnvsEnvTargetUnion2Type = "arrayOfFilterProjectEnvsTargetEnvEnum3"
	FilterProjectEnvsEnvTargetUnion2TypeFilterProjectEnvsTargetEnvEnum4        FilterProjectEnvsEnvTargetUnion2Type = "filterProjectEnvs_target_env_enum_4"
)

type FilterProjectEnvsEnvTargetUnion2 struct {
	ArrayOfFilterProjectEnvsTargetEnvEnum3 []FilterProjectEnvsTargetEnvEnum3 `queryParam:"inline"`
	FilterProjectEnvsTargetEnvEnum4        *FilterProjectEnvsTargetEnvEnum4  `queryParam:"inline"`

	Type FilterProjectEnvsEnvTargetUnion2Type
}

func CreateFilterProjectEnvsEnvTargetUnion2ArrayOfFilterProjectEnvsTargetEnvEnum3(arrayOfFilterProjectEnvsTargetEnvEnum3 []FilterProjectEnvsTargetEnvEnum3) FilterProjectEnvsEnvTargetUnion2 {
	typ := FilterProjectEnvsEnvTargetUnion2TypeArrayOfFilterProjectEnvsTargetEnvEnum3

	return FilterProjectEnvsEnvTargetUnion2{
		ArrayOfFilterProjectEnvsTargetEnvEnum3: arrayOfFilterProjectEnvsTargetEnvEnum3,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsEnvTargetUnion2FilterProjectEnvsTargetEnvEnum4(filterProjectEnvsTargetEnvEnum4 FilterProjectEnvsTargetEnvEnum4) FilterProjectEnvsEnvTargetUnion2 {
	typ := FilterProjectEnvsEnvTargetUnion2TypeFilterProjectEnvsTargetEnvEnum4

	return FilterProjectEnvsEnvTargetUnion2{
		FilterProjectEnvsTargetEnvEnum4: &filterProjectEnvsTargetEnvEnum4,
		Type:                            typ,
	}
}

func (u *FilterProjectEnvsEnvTargetUnion2) UnmarshalJSON(data []byte) error {

	var arrayOfFilterProjectEnvsTargetEnvEnum3 []FilterProjectEnvsTargetEnvEnum3 = []FilterProjectEnvsTargetEnvEnum3{}
	if err := utils.UnmarshalJSON(data, &arrayOfFilterProjectEnvsTargetEnvEnum3, "", true, true); err == nil {
		u.ArrayOfFilterProjectEnvsTargetEnvEnum3 = arrayOfFilterProjectEnvsTargetEnvEnum3
		u.Type = FilterProjectEnvsEnvTargetUnion2TypeArrayOfFilterProjectEnvsTargetEnvEnum3
		return nil
	}

	var filterProjectEnvsTargetEnvEnum4 FilterProjectEnvsTargetEnvEnum4 = FilterProjectEnvsTargetEnvEnum4("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsTargetEnvEnum4, "", true, true); err == nil {
		u.FilterProjectEnvsTargetEnvEnum4 = &filterProjectEnvsTargetEnvEnum4
		u.Type = FilterProjectEnvsEnvTargetUnion2TypeFilterProjectEnvsTargetEnvEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsEnvTargetUnion2", string(data))
}

func (u FilterProjectEnvsEnvTargetUnion2) MarshalJSON() ([]byte, error) {
	if u.ArrayOfFilterProjectEnvsTargetEnvEnum3 != nil {
		return utils.MarshalJSON(u.ArrayOfFilterProjectEnvsTargetEnvEnum3, "", true)
	}

	if u.FilterProjectEnvsTargetEnvEnum4 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsTargetEnvEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsEnvTargetUnion2: all fields are null")
}

type FilterProjectEnvsEnvType2 string

const (
	FilterProjectEnvsEnvType2System    FilterProjectEnvsEnvType2 = "system"
	FilterProjectEnvsEnvType2Encrypted FilterProjectEnvsEnvType2 = "encrypted"
	FilterProjectEnvsEnvType2Plain     FilterProjectEnvsEnvType2 = "plain"
	FilterProjectEnvsEnvType2Sensitive FilterProjectEnvsEnvType2 = "sensitive"
	FilterProjectEnvsEnvType2Secret    FilterProjectEnvsEnvType2 = "secret"
)

func (e FilterProjectEnvsEnvType2) ToPointer() *FilterProjectEnvsEnvType2 {
	return &e
}
func (e *FilterProjectEnvsEnvType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = FilterProjectEnvsEnvType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvType2: %v", v)
	}
}

type FilterProjectEnvsEnvTypeFlagsConnectionString2 string

const (
	FilterProjectEnvsEnvTypeFlagsConnectionString2FlagsConnectionString FilterProjectEnvsEnvTypeFlagsConnectionString2 = "flags-connection-string"
)

func (e FilterProjectEnvsEnvTypeFlagsConnectionString2) ToPointer() *FilterProjectEnvsEnvTypeFlagsConnectionString2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeFlagsConnectionString2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = FilterProjectEnvsEnvTypeFlagsConnectionString2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeFlagsConnectionString2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvFlagsConnectionString2 struct {
	Type      FilterProjectEnvsEnvTypeFlagsConnectionString2 `json:"type"`
	ProjectID string                                         `json:"projectId"`
}

func (o *FilterProjectEnvsContentHintEnvFlagsConnectionString2) GetType() FilterProjectEnvsEnvTypeFlagsConnectionString2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeFlagsConnectionString2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvFlagsConnectionString2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type FilterProjectEnvsEnvTypeIntegrationStoreSecret2 string

const (
	FilterProjectEnvsEnvTypeIntegrationStoreSecret2IntegrationStoreSecret FilterProjectEnvsEnvTypeIntegrationStoreSecret2 = "integration-store-secret"
)

func (e FilterProjectEnvsEnvTypeIntegrationStoreSecret2) ToPointer() *FilterProjectEnvsEnvTypeIntegrationStoreSecret2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeIntegrationStoreSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = FilterProjectEnvsEnvTypeIntegrationStoreSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeIntegrationStoreSecret2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvIntegrationStoreSecret2 struct {
	Type                       FilterProjectEnvsEnvTypeIntegrationStoreSecret2 `json:"type"`
	StoreID                    string                                          `json:"storeId"`
	IntegrationID              string                                          `json:"integrationId"`
	IntegrationProductID       string                                          `json:"integrationProductId"`
	IntegrationConfigurationID string                                          `json:"integrationConfigurationId"`
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret2) GetType() FilterProjectEnvsEnvTypeIntegrationStoreSecret2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeIntegrationStoreSecret2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret2) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type FilterProjectEnvsEnvTypePostgresURLNoSsl2 string

const (
	FilterProjectEnvsEnvTypePostgresURLNoSsl2PostgresURLNoSsl FilterProjectEnvsEnvTypePostgresURLNoSsl2 = "postgres-url-no-ssl"
)

func (e FilterProjectEnvsEnvTypePostgresURLNoSsl2) ToPointer() *FilterProjectEnvsEnvTypePostgresURLNoSsl2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresURLNoSsl2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = FilterProjectEnvsEnvTypePostgresURLNoSsl2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresURLNoSsl2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresURLNoSsl2 struct {
	Type    FilterProjectEnvsEnvTypePostgresURLNoSsl2 `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNoSsl2) GetType() FilterProjectEnvsEnvTypePostgresURLNoSsl2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresURLNoSsl2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNoSsl2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresDatabase2 string

const (
	FilterProjectEnvsEnvTypePostgresDatabase2PostgresDatabase FilterProjectEnvsEnvTypePostgresDatabase2 = "postgres-database"
)

func (e FilterProjectEnvsEnvTypePostgresDatabase2) ToPointer() *FilterProjectEnvsEnvTypePostgresDatabase2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresDatabase2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsEnvTypePostgresDatabase2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresDatabase2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresDatabase2 struct {
	Type    FilterProjectEnvsEnvTypePostgresDatabase2 `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresDatabase2) GetType() FilterProjectEnvsEnvTypePostgresDatabase2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresDatabase2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresDatabase2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresPassword2 string

const (
	FilterProjectEnvsEnvTypePostgresPassword2PostgresPassword FilterProjectEnvsEnvTypePostgresPassword2 = "postgres-password"
)

func (e FilterProjectEnvsEnvTypePostgresPassword2) ToPointer() *FilterProjectEnvsEnvTypePostgresPassword2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresPassword2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsEnvTypePostgresPassword2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresPassword2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresPassword2 struct {
	Type    FilterProjectEnvsEnvTypePostgresPassword2 `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresPassword2) GetType() FilterProjectEnvsEnvTypePostgresPassword2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresPassword2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresPassword2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresHost2 string

const (
	FilterProjectEnvsEnvTypePostgresHost2PostgresHost FilterProjectEnvsEnvTypePostgresHost2 = "postgres-host"
)

func (e FilterProjectEnvsEnvTypePostgresHost2) ToPointer() *FilterProjectEnvsEnvTypePostgresHost2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresHost2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsEnvTypePostgresHost2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresHost2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresHost2 struct {
	Type    FilterProjectEnvsEnvTypePostgresHost2 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresHost2) GetType() FilterProjectEnvsEnvTypePostgresHost2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresHost2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresHost2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresUser2 string

const (
	FilterProjectEnvsEnvTypePostgresUser2PostgresUser FilterProjectEnvsEnvTypePostgresUser2 = "postgres-user"
)

func (e FilterProjectEnvsEnvTypePostgresUser2) ToPointer() *FilterProjectEnvsEnvTypePostgresUser2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresUser2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsEnvTypePostgresUser2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresUser2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresUser2 struct {
	Type    FilterProjectEnvsEnvTypePostgresUser2 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresUser2) GetType() FilterProjectEnvsEnvTypePostgresUser2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresUser2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresUser2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresPrismaURL2 string

const (
	FilterProjectEnvsEnvTypePostgresPrismaURL2PostgresPrismaURL FilterProjectEnvsEnvTypePostgresPrismaURL2 = "postgres-prisma-url"
)

func (e FilterProjectEnvsEnvTypePostgresPrismaURL2) ToPointer() *FilterProjectEnvsEnvTypePostgresPrismaURL2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresPrismaURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsEnvTypePostgresPrismaURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresPrismaURL2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresPrismaURL2 struct {
	Type    FilterProjectEnvsEnvTypePostgresPrismaURL2 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresPrismaURL2) GetType() FilterProjectEnvsEnvTypePostgresPrismaURL2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresPrismaURL2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresPrismaURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresURLNonPooling2 string

const (
	FilterProjectEnvsEnvTypePostgresURLNonPooling2PostgresURLNonPooling FilterProjectEnvsEnvTypePostgresURLNonPooling2 = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsEnvTypePostgresURLNonPooling2) ToPointer() *FilterProjectEnvsEnvTypePostgresURLNonPooling2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresURLNonPooling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsEnvTypePostgresURLNonPooling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresURLNonPooling2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresURLNonPooling2 struct {
	Type    FilterProjectEnvsEnvTypePostgresURLNonPooling2 `json:"type"`
	StoreID string                                         `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNonPooling2) GetType() FilterProjectEnvsEnvTypePostgresURLNonPooling2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresURLNonPooling2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNonPooling2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresURL2 string

const (
	FilterProjectEnvsEnvTypePostgresURL2PostgresURL FilterProjectEnvsEnvTypePostgresURL2 = "postgres-url"
)

func (e FilterProjectEnvsEnvTypePostgresURL2) ToPointer() *FilterProjectEnvsEnvTypePostgresURL2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsEnvTypePostgresURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresURL2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresURL2 struct {
	Type    FilterProjectEnvsEnvTypePostgresURL2 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresURL2) GetType() FilterProjectEnvsEnvTypePostgresURL2 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresURL2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeBlobReadWriteToken2 string

const (
	FilterProjectEnvsEnvTypeBlobReadWriteToken2BlobReadWriteToken FilterProjectEnvsEnvTypeBlobReadWriteToken2 = "blob-read-write-token"
)

func (e FilterProjectEnvsEnvTypeBlobReadWriteToken2) ToPointer() *FilterProjectEnvsEnvTypeBlobReadWriteToken2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeBlobReadWriteToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsEnvTypeBlobReadWriteToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeBlobReadWriteToken2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvBlobReadWriteToken2 struct {
	Type    FilterProjectEnvsEnvTypeBlobReadWriteToken2 `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvBlobReadWriteToken2) GetType() FilterProjectEnvsEnvTypeBlobReadWriteToken2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeBlobReadWriteToken2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvBlobReadWriteToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2 string

const (
	FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2RedisRestAPIReadOnlyToken FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2 = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2) ToPointer() *FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 struct {
	Type    FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2 `json:"type"`
	StoreID string                                             `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2) GetType() FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisRestAPIToken2 string

const (
	FilterProjectEnvsEnvTypeRedisRestAPIToken2RedisRestAPIToken FilterProjectEnvsEnvTypeRedisRestAPIToken2 = "redis-rest-api-token"
)

func (e FilterProjectEnvsEnvTypeRedisRestAPIToken2) ToPointer() *FilterProjectEnvsEnvTypeRedisRestAPIToken2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisRestAPIToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsEnvTypeRedisRestAPIToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisRestAPIToken2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisRestAPIToken2 struct {
	Type    FilterProjectEnvsEnvTypeRedisRestAPIToken2 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIToken2) GetType() FilterProjectEnvsEnvTypeRedisRestAPIToken2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisRestAPIToken2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisRestAPIURL2 string

const (
	FilterProjectEnvsEnvTypeRedisRestAPIURL2RedisRestAPIURL FilterProjectEnvsEnvTypeRedisRestAPIURL2 = "redis-rest-api-url"
)

func (e FilterProjectEnvsEnvTypeRedisRestAPIURL2) ToPointer() *FilterProjectEnvsEnvTypeRedisRestAPIURL2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisRestAPIURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsEnvTypeRedisRestAPIURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisRestAPIURL2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisRestAPIURL2 struct {
	Type    FilterProjectEnvsEnvTypeRedisRestAPIURL2 `json:"type"`
	StoreID string                                   `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIURL2) GetType() FilterProjectEnvsEnvTypeRedisRestAPIURL2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisRestAPIURL2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisURL2 string

const (
	FilterProjectEnvsEnvTypeRedisURL2RedisURL FilterProjectEnvsEnvTypeRedisURL2 = "redis-url"
)

func (e FilterProjectEnvsEnvTypeRedisURL2) ToPointer() *FilterProjectEnvsEnvTypeRedisURL2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsEnvTypeRedisURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisURL2: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisURL2 struct {
	Type    FilterProjectEnvsEnvTypeRedisURL2 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisURL2) GetType() FilterProjectEnvsEnvTypeRedisURL2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisURL2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvContentHintUnion2Type string

const (
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisURL2                  FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_RedisURL_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIURL2           FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_RedisRestAPIURL_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIToken2         FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_RedisRestAPIToken_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_RedisRestAPIReadOnlyToken_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvBlobReadWriteToken2        FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_BlobReadWriteToken_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURL2               FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresURL_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURLNonPooling2     FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresURLNonPooling_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresPrismaURL2         FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresPrismaURL_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresUser2              FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresUser_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresHost2              FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresHost_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresPassword2          FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresPassword_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresDatabase2          FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresDatabase_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURLNoSsl2          FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_PostgresURLNoSsl_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvIntegrationStoreSecret2    FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_IntegrationStoreSecret_2"
	FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvFlagsConnectionString2     FilterProjectEnvsEnvContentHintUnion2Type = "filterProjectEnvs_contentHint_env_FlagsConnectionString_2"
)

type FilterProjectEnvsEnvContentHintUnion2 struct {
	FilterProjectEnvsContentHintEnvRedisURL2                  *FilterProjectEnvsContentHintEnvRedisURL2                  `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvRedisRestAPIURL2           *FilterProjectEnvsContentHintEnvRedisRestAPIURL2           `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvRedisRestAPIToken2         *FilterProjectEnvsContentHintEnvRedisRestAPIToken2         `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 *FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvBlobReadWriteToken2        *FilterProjectEnvsContentHintEnvBlobReadWriteToken2        `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresURL2               *FilterProjectEnvsContentHintEnvPostgresURL2               `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresURLNonPooling2     *FilterProjectEnvsContentHintEnvPostgresURLNonPooling2     `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresPrismaURL2         *FilterProjectEnvsContentHintEnvPostgresPrismaURL2         `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresUser2              *FilterProjectEnvsContentHintEnvPostgresUser2              `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresHost2              *FilterProjectEnvsContentHintEnvPostgresHost2              `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresPassword2          *FilterProjectEnvsContentHintEnvPostgresPassword2          `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresDatabase2          *FilterProjectEnvsContentHintEnvPostgresDatabase2          `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresURLNoSsl2          *FilterProjectEnvsContentHintEnvPostgresURLNoSsl2          `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvIntegrationStoreSecret2    *FilterProjectEnvsContentHintEnvIntegrationStoreSecret2    `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvFlagsConnectionString2     *FilterProjectEnvsContentHintEnvFlagsConnectionString2     `queryParam:"inline"`

	Type FilterProjectEnvsEnvContentHintUnion2Type
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvRedisURL2(filterProjectEnvsContentHintEnvRedisURL2 FilterProjectEnvsContentHintEnvRedisURL2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisURL2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvRedisURL2: &filterProjectEnvsContentHintEnvRedisURL2,
		Type:                                     typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvRedisRestAPIURL2(filterProjectEnvsContentHintEnvRedisRestAPIURL2 FilterProjectEnvsContentHintEnvRedisRestAPIURL2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIURL2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvRedisRestAPIURL2: &filterProjectEnvsContentHintEnvRedisRestAPIURL2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvRedisRestAPIToken2(filterProjectEnvsContentHintEnvRedisRestAPIToken2 FilterProjectEnvsContentHintEnvRedisRestAPIToken2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIToken2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvRedisRestAPIToken2: &filterProjectEnvsContentHintEnvRedisRestAPIToken2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2(filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2: &filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvBlobReadWriteToken2(filterProjectEnvsContentHintEnvBlobReadWriteToken2 FilterProjectEnvsContentHintEnvBlobReadWriteToken2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvBlobReadWriteToken2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvBlobReadWriteToken2: &filterProjectEnvsContentHintEnvBlobReadWriteToken2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresURL2(filterProjectEnvsContentHintEnvPostgresURL2 FilterProjectEnvsContentHintEnvPostgresURL2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURL2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresURL2: &filterProjectEnvsContentHintEnvPostgresURL2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresURLNonPooling2(filterProjectEnvsContentHintEnvPostgresURLNonPooling2 FilterProjectEnvsContentHintEnvPostgresURLNonPooling2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURLNonPooling2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresURLNonPooling2: &filterProjectEnvsContentHintEnvPostgresURLNonPooling2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresPrismaURL2(filterProjectEnvsContentHintEnvPostgresPrismaURL2 FilterProjectEnvsContentHintEnvPostgresPrismaURL2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresPrismaURL2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresPrismaURL2: &filterProjectEnvsContentHintEnvPostgresPrismaURL2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresUser2(filterProjectEnvsContentHintEnvPostgresUser2 FilterProjectEnvsContentHintEnvPostgresUser2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresUser2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresUser2: &filterProjectEnvsContentHintEnvPostgresUser2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresHost2(filterProjectEnvsContentHintEnvPostgresHost2 FilterProjectEnvsContentHintEnvPostgresHost2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresHost2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresHost2: &filterProjectEnvsContentHintEnvPostgresHost2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresPassword2(filterProjectEnvsContentHintEnvPostgresPassword2 FilterProjectEnvsContentHintEnvPostgresPassword2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresPassword2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresPassword2: &filterProjectEnvsContentHintEnvPostgresPassword2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresDatabase2(filterProjectEnvsContentHintEnvPostgresDatabase2 FilterProjectEnvsContentHintEnvPostgresDatabase2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresDatabase2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresDatabase2: &filterProjectEnvsContentHintEnvPostgresDatabase2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvPostgresURLNoSsl2(filterProjectEnvsContentHintEnvPostgresURLNoSsl2 FilterProjectEnvsContentHintEnvPostgresURLNoSsl2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURLNoSsl2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvPostgresURLNoSsl2: &filterProjectEnvsContentHintEnvPostgresURLNoSsl2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvIntegrationStoreSecret2(filterProjectEnvsContentHintEnvIntegrationStoreSecret2 FilterProjectEnvsContentHintEnvIntegrationStoreSecret2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvIntegrationStoreSecret2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvIntegrationStoreSecret2: &filterProjectEnvsContentHintEnvIntegrationStoreSecret2,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion2FilterProjectEnvsContentHintEnvFlagsConnectionString2(filterProjectEnvsContentHintEnvFlagsConnectionString2 FilterProjectEnvsContentHintEnvFlagsConnectionString2) FilterProjectEnvsEnvContentHintUnion2 {
	typ := FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvFlagsConnectionString2

	return FilterProjectEnvsEnvContentHintUnion2{
		FilterProjectEnvsContentHintEnvFlagsConnectionString2: &filterProjectEnvsContentHintEnvFlagsConnectionString2,
		Type: typ,
	}
}

func (u *FilterProjectEnvsEnvContentHintUnion2) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsContentHintEnvPostgresURLNonPooling2 FilterProjectEnvsContentHintEnvPostgresURLNonPooling2 = FilterProjectEnvsContentHintEnvPostgresURLNonPooling2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresURLNonPooling2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresURLNonPooling2 = &filterProjectEnvsContentHintEnvPostgresURLNonPooling2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURLNonPooling2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresPassword2 FilterProjectEnvsContentHintEnvPostgresPassword2 = FilterProjectEnvsContentHintEnvPostgresPassword2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresPassword2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresPassword2 = &filterProjectEnvsContentHintEnvPostgresPassword2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresPassword2
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisRestAPIToken2 FilterProjectEnvsContentHintEnvRedisRestAPIToken2 = FilterProjectEnvsContentHintEnvRedisRestAPIToken2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisRestAPIToken2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisRestAPIToken2 = &filterProjectEnvsContentHintEnvRedisRestAPIToken2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIToken2
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 = FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 = &filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2
		return nil
	}

	var filterProjectEnvsContentHintEnvBlobReadWriteToken2 FilterProjectEnvsContentHintEnvBlobReadWriteToken2 = FilterProjectEnvsContentHintEnvBlobReadWriteToken2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvBlobReadWriteToken2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvBlobReadWriteToken2 = &filterProjectEnvsContentHintEnvBlobReadWriteToken2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvBlobReadWriteToken2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresURL2 FilterProjectEnvsContentHintEnvPostgresURL2 = FilterProjectEnvsContentHintEnvPostgresURL2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresURL2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresURL2 = &filterProjectEnvsContentHintEnvPostgresURL2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURL2
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisRestAPIURL2 FilterProjectEnvsContentHintEnvRedisRestAPIURL2 = FilterProjectEnvsContentHintEnvRedisRestAPIURL2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisRestAPIURL2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisRestAPIURL2 = &filterProjectEnvsContentHintEnvRedisRestAPIURL2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisRestAPIURL2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresUser2 FilterProjectEnvsContentHintEnvPostgresUser2 = FilterProjectEnvsContentHintEnvPostgresUser2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresUser2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresUser2 = &filterProjectEnvsContentHintEnvPostgresUser2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresUser2
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisURL2 FilterProjectEnvsContentHintEnvRedisURL2 = FilterProjectEnvsContentHintEnvRedisURL2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisURL2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisURL2 = &filterProjectEnvsContentHintEnvRedisURL2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvRedisURL2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresHost2 FilterProjectEnvsContentHintEnvPostgresHost2 = FilterProjectEnvsContentHintEnvPostgresHost2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresHost2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresHost2 = &filterProjectEnvsContentHintEnvPostgresHost2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresHost2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresPrismaURL2 FilterProjectEnvsContentHintEnvPostgresPrismaURL2 = FilterProjectEnvsContentHintEnvPostgresPrismaURL2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresPrismaURL2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresPrismaURL2 = &filterProjectEnvsContentHintEnvPostgresPrismaURL2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresPrismaURL2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresDatabase2 FilterProjectEnvsContentHintEnvPostgresDatabase2 = FilterProjectEnvsContentHintEnvPostgresDatabase2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresDatabase2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresDatabase2 = &filterProjectEnvsContentHintEnvPostgresDatabase2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresDatabase2
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresURLNoSsl2 FilterProjectEnvsContentHintEnvPostgresURLNoSsl2 = FilterProjectEnvsContentHintEnvPostgresURLNoSsl2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresURLNoSsl2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresURLNoSsl2 = &filterProjectEnvsContentHintEnvPostgresURLNoSsl2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvPostgresURLNoSsl2
		return nil
	}

	var filterProjectEnvsContentHintEnvFlagsConnectionString2 FilterProjectEnvsContentHintEnvFlagsConnectionString2 = FilterProjectEnvsContentHintEnvFlagsConnectionString2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvFlagsConnectionString2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvFlagsConnectionString2 = &filterProjectEnvsContentHintEnvFlagsConnectionString2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvFlagsConnectionString2
		return nil
	}

	var filterProjectEnvsContentHintEnvIntegrationStoreSecret2 FilterProjectEnvsContentHintEnvIntegrationStoreSecret2 = FilterProjectEnvsContentHintEnvIntegrationStoreSecret2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvIntegrationStoreSecret2, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvIntegrationStoreSecret2 = &filterProjectEnvsContentHintEnvIntegrationStoreSecret2
		u.Type = FilterProjectEnvsEnvContentHintUnion2TypeFilterProjectEnvsContentHintEnvIntegrationStoreSecret2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsEnvContentHintUnion2", string(data))
}

func (u FilterProjectEnvsEnvContentHintUnion2) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsContentHintEnvRedisURL2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisURL2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvRedisRestAPIURL2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisRestAPIURL2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvRedisRestAPIToken2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisRestAPIToken2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvBlobReadWriteToken2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvBlobReadWriteToken2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresURL2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresURL2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresURLNonPooling2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresURLNonPooling2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresPrismaURL2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresPrismaURL2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresUser2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresUser2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresHost2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresHost2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresPassword2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresPassword2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresDatabase2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresDatabase2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresURLNoSsl2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresURLNoSsl2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvIntegrationStoreSecret2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvIntegrationStoreSecret2, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvFlagsConnectionString2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvFlagsConnectionString2, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsEnvContentHintUnion2: all fields are null")
}

type FilterProjectEnvsEnvTypeFlagsSecret2 string

const (
	FilterProjectEnvsEnvTypeFlagsSecret2FlagsSecret FilterProjectEnvsEnvTypeFlagsSecret2 = "flags-secret"
)

func (e FilterProjectEnvsEnvTypeFlagsSecret2) ToPointer() *FilterProjectEnvsEnvTypeFlagsSecret2 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeFlagsSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = FilterProjectEnvsEnvTypeFlagsSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeFlagsSecret2: %v", v)
	}
}

// FilterProjectEnvsEnvInternalContentHint2 - Similar to `contentHints`, but should not be exposed to the user.
type FilterProjectEnvsEnvInternalContentHint2 struct {
	Type FilterProjectEnvsEnvTypeFlagsSecret2 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *FilterProjectEnvsEnvInternalContentHint2) GetType() FilterProjectEnvsEnvTypeFlagsSecret2 {
	if o == nil {
		return FilterProjectEnvsEnvTypeFlagsSecret2("")
	}
	return o.Type
}

func (o *FilterProjectEnvsEnvInternalContentHint2) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type FilterProjectEnvsEnv2 struct {
	Target *FilterProjectEnvsEnvTargetUnion2 `json:"target,omitempty"`
	Type   *FilterProjectEnvsEnvType2        `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                                `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                                  `json:"decrypted,omitempty"`
	Value             *string                                `json:"value,omitempty"`
	VsmValue          *string                                `json:"vsmValue,omitempty"`
	ID                *string                                `json:"id,omitempty"`
	Key               *string                                `json:"key,omitempty"`
	ConfigurationID   *string                                `json:"configurationId,omitempty"`
	CreatedAt         *float64                               `json:"createdAt,omitempty"`
	UpdatedAt         *float64                               `json:"updatedAt,omitempty"`
	CreatedBy         *string                                `json:"createdBy,omitempty"`
	UpdatedBy         *string                                `json:"updatedBy,omitempty"`
	GitBranch         *string                                `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *FilterProjectEnvsEnvContentHintUnion2 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *FilterProjectEnvsEnvInternalContentHint2 `json:"internalContentHint,omitempty"`
	Comment              *string                                   `json:"comment,omitempty"`
	CustomEnvironmentIds []string                                  `json:"customEnvironmentIds,omitempty"`
	System               *bool                                     `json:"system,omitempty"`
}

func (o *FilterProjectEnvsEnv2) GetTarget() *FilterProjectEnvsEnvTargetUnion2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvsEnv2) GetType() *FilterProjectEnvsEnvType2 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvsEnv2) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *FilterProjectEnvsEnv2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvsEnv2) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FilterProjectEnvsEnv2) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *FilterProjectEnvsEnv2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvsEnv2) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvsEnv2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvsEnv2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvsEnv2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvsEnv2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvsEnv2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvsEnv2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsEnv2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvsEnv2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvsEnv2) GetContentHint() *FilterProjectEnvsEnvContentHintUnion2 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvsEnv2) GetInternalContentHint() *FilterProjectEnvsEnvInternalContentHint2 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *FilterProjectEnvsEnv2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *FilterProjectEnvsEnv2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *FilterProjectEnvsEnv2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

// FilterProjectEnvsResponseBody3 - The list of environment variables for the given project
type FilterProjectEnvsResponseBody3 struct {
	Envs []FilterProjectEnvsEnv2 `json:"envs"`
}

func (o *FilterProjectEnvsResponseBody3) GetEnvs() []FilterProjectEnvsEnv2 {
	if o == nil {
		return []FilterProjectEnvsEnv2{}
	}
	return o.Envs
}

type FilterProjectEnvsTargetEnvEnum2 string

const (
	FilterProjectEnvsTargetEnvEnum2Production  FilterProjectEnvsTargetEnvEnum2 = "production"
	FilterProjectEnvsTargetEnvEnum2Preview     FilterProjectEnvsTargetEnvEnum2 = "preview"
	FilterProjectEnvsTargetEnvEnum2Development FilterProjectEnvsTargetEnvEnum2 = "development"
)

func (e FilterProjectEnvsTargetEnvEnum2) ToPointer() *FilterProjectEnvsTargetEnvEnum2 {
	return &e
}
func (e *FilterProjectEnvsTargetEnvEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetEnvEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetEnvEnum2: %v", v)
	}
}

type FilterProjectEnvsTargetEnvEnum1 string

const (
	FilterProjectEnvsTargetEnvEnum1Production  FilterProjectEnvsTargetEnvEnum1 = "production"
	FilterProjectEnvsTargetEnvEnum1Preview     FilterProjectEnvsTargetEnvEnum1 = "preview"
	FilterProjectEnvsTargetEnvEnum1Development FilterProjectEnvsTargetEnvEnum1 = "development"
)

func (e FilterProjectEnvsTargetEnvEnum1) ToPointer() *FilterProjectEnvsTargetEnvEnum1 {
	return &e
}
func (e *FilterProjectEnvsTargetEnvEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetEnvEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetEnvEnum1: %v", v)
	}
}

type FilterProjectEnvsEnvTargetUnion1Type string

const (
	FilterProjectEnvsEnvTargetUnion1TypeArrayOfFilterProjectEnvsTargetEnvEnum1 FilterProjectEnvsEnvTargetUnion1Type = "arrayOfFilterProjectEnvsTargetEnvEnum1"
	FilterProjectEnvsEnvTargetUnion1TypeFilterProjectEnvsTargetEnvEnum2        FilterProjectEnvsEnvTargetUnion1Type = "filterProjectEnvs_target_env_enum_2"
)

type FilterProjectEnvsEnvTargetUnion1 struct {
	ArrayOfFilterProjectEnvsTargetEnvEnum1 []FilterProjectEnvsTargetEnvEnum1 `queryParam:"inline"`
	FilterProjectEnvsTargetEnvEnum2        *FilterProjectEnvsTargetEnvEnum2  `queryParam:"inline"`

	Type FilterProjectEnvsEnvTargetUnion1Type
}

func CreateFilterProjectEnvsEnvTargetUnion1ArrayOfFilterProjectEnvsTargetEnvEnum1(arrayOfFilterProjectEnvsTargetEnvEnum1 []FilterProjectEnvsTargetEnvEnum1) FilterProjectEnvsEnvTargetUnion1 {
	typ := FilterProjectEnvsEnvTargetUnion1TypeArrayOfFilterProjectEnvsTargetEnvEnum1

	return FilterProjectEnvsEnvTargetUnion1{
		ArrayOfFilterProjectEnvsTargetEnvEnum1: arrayOfFilterProjectEnvsTargetEnvEnum1,
		Type:                                   typ,
	}
}

func CreateFilterProjectEnvsEnvTargetUnion1FilterProjectEnvsTargetEnvEnum2(filterProjectEnvsTargetEnvEnum2 FilterProjectEnvsTargetEnvEnum2) FilterProjectEnvsEnvTargetUnion1 {
	typ := FilterProjectEnvsEnvTargetUnion1TypeFilterProjectEnvsTargetEnvEnum2

	return FilterProjectEnvsEnvTargetUnion1{
		FilterProjectEnvsTargetEnvEnum2: &filterProjectEnvsTargetEnvEnum2,
		Type:                            typ,
	}
}

func (u *FilterProjectEnvsEnvTargetUnion1) UnmarshalJSON(data []byte) error {

	var arrayOfFilterProjectEnvsTargetEnvEnum1 []FilterProjectEnvsTargetEnvEnum1 = []FilterProjectEnvsTargetEnvEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfFilterProjectEnvsTargetEnvEnum1, "", true, true); err == nil {
		u.ArrayOfFilterProjectEnvsTargetEnvEnum1 = arrayOfFilterProjectEnvsTargetEnvEnum1
		u.Type = FilterProjectEnvsEnvTargetUnion1TypeArrayOfFilterProjectEnvsTargetEnvEnum1
		return nil
	}

	var filterProjectEnvsTargetEnvEnum2 FilterProjectEnvsTargetEnvEnum2 = FilterProjectEnvsTargetEnvEnum2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsTargetEnvEnum2, "", true, true); err == nil {
		u.FilterProjectEnvsTargetEnvEnum2 = &filterProjectEnvsTargetEnvEnum2
		u.Type = FilterProjectEnvsEnvTargetUnion1TypeFilterProjectEnvsTargetEnvEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsEnvTargetUnion1", string(data))
}

func (u FilterProjectEnvsEnvTargetUnion1) MarshalJSON() ([]byte, error) {
	if u.ArrayOfFilterProjectEnvsTargetEnvEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfFilterProjectEnvsTargetEnvEnum1, "", true)
	}

	if u.FilterProjectEnvsTargetEnvEnum2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsTargetEnvEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsEnvTargetUnion1: all fields are null")
}

type FilterProjectEnvsEnvType1 string

const (
	FilterProjectEnvsEnvType1System    FilterProjectEnvsEnvType1 = "system"
	FilterProjectEnvsEnvType1Encrypted FilterProjectEnvsEnvType1 = "encrypted"
	FilterProjectEnvsEnvType1Plain     FilterProjectEnvsEnvType1 = "plain"
	FilterProjectEnvsEnvType1Sensitive FilterProjectEnvsEnvType1 = "sensitive"
	FilterProjectEnvsEnvType1Secret    FilterProjectEnvsEnvType1 = "secret"
)

func (e FilterProjectEnvsEnvType1) ToPointer() *FilterProjectEnvsEnvType1 {
	return &e
}
func (e *FilterProjectEnvsEnvType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = FilterProjectEnvsEnvType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvType1: %v", v)
	}
}

type FilterProjectEnvsEnvTypeFlagsConnectionString1 string

const (
	FilterProjectEnvsEnvTypeFlagsConnectionString1FlagsConnectionString FilterProjectEnvsEnvTypeFlagsConnectionString1 = "flags-connection-string"
)

func (e FilterProjectEnvsEnvTypeFlagsConnectionString1) ToPointer() *FilterProjectEnvsEnvTypeFlagsConnectionString1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeFlagsConnectionString1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = FilterProjectEnvsEnvTypeFlagsConnectionString1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeFlagsConnectionString1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvFlagsConnectionString1 struct {
	Type      FilterProjectEnvsEnvTypeFlagsConnectionString1 `json:"type"`
	ProjectID string                                         `json:"projectId"`
}

func (o *FilterProjectEnvsContentHintEnvFlagsConnectionString1) GetType() FilterProjectEnvsEnvTypeFlagsConnectionString1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeFlagsConnectionString1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvFlagsConnectionString1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type FilterProjectEnvsEnvTypeIntegrationStoreSecret1 string

const (
	FilterProjectEnvsEnvTypeIntegrationStoreSecret1IntegrationStoreSecret FilterProjectEnvsEnvTypeIntegrationStoreSecret1 = "integration-store-secret"
)

func (e FilterProjectEnvsEnvTypeIntegrationStoreSecret1) ToPointer() *FilterProjectEnvsEnvTypeIntegrationStoreSecret1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeIntegrationStoreSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = FilterProjectEnvsEnvTypeIntegrationStoreSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeIntegrationStoreSecret1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvIntegrationStoreSecret1 struct {
	Type                       FilterProjectEnvsEnvTypeIntegrationStoreSecret1 `json:"type"`
	StoreID                    string                                          `json:"storeId"`
	IntegrationID              string                                          `json:"integrationId"`
	IntegrationProductID       string                                          `json:"integrationProductId"`
	IntegrationConfigurationID string                                          `json:"integrationConfigurationId"`
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret1) GetType() FilterProjectEnvsEnvTypeIntegrationStoreSecret1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeIntegrationStoreSecret1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret1) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *FilterProjectEnvsContentHintEnvIntegrationStoreSecret1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type FilterProjectEnvsEnvTypePostgresURLNoSsl1 string

const (
	FilterProjectEnvsEnvTypePostgresURLNoSsl1PostgresURLNoSsl FilterProjectEnvsEnvTypePostgresURLNoSsl1 = "postgres-url-no-ssl"
)

func (e FilterProjectEnvsEnvTypePostgresURLNoSsl1) ToPointer() *FilterProjectEnvsEnvTypePostgresURLNoSsl1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresURLNoSsl1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = FilterProjectEnvsEnvTypePostgresURLNoSsl1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresURLNoSsl1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresURLNoSsl1 struct {
	Type    FilterProjectEnvsEnvTypePostgresURLNoSsl1 `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNoSsl1) GetType() FilterProjectEnvsEnvTypePostgresURLNoSsl1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresURLNoSsl1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNoSsl1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresDatabase1 string

const (
	FilterProjectEnvsEnvTypePostgresDatabase1PostgresDatabase FilterProjectEnvsEnvTypePostgresDatabase1 = "postgres-database"
)

func (e FilterProjectEnvsEnvTypePostgresDatabase1) ToPointer() *FilterProjectEnvsEnvTypePostgresDatabase1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresDatabase1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsEnvTypePostgresDatabase1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresDatabase1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresDatabase1 struct {
	Type    FilterProjectEnvsEnvTypePostgresDatabase1 `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresDatabase1) GetType() FilterProjectEnvsEnvTypePostgresDatabase1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresDatabase1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresDatabase1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresPassword1 string

const (
	FilterProjectEnvsEnvTypePostgresPassword1PostgresPassword FilterProjectEnvsEnvTypePostgresPassword1 = "postgres-password"
)

func (e FilterProjectEnvsEnvTypePostgresPassword1) ToPointer() *FilterProjectEnvsEnvTypePostgresPassword1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresPassword1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsEnvTypePostgresPassword1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresPassword1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresPassword1 struct {
	Type    FilterProjectEnvsEnvTypePostgresPassword1 `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresPassword1) GetType() FilterProjectEnvsEnvTypePostgresPassword1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresPassword1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresPassword1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresHost1 string

const (
	FilterProjectEnvsEnvTypePostgresHost1PostgresHost FilterProjectEnvsEnvTypePostgresHost1 = "postgres-host"
)

func (e FilterProjectEnvsEnvTypePostgresHost1) ToPointer() *FilterProjectEnvsEnvTypePostgresHost1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresHost1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsEnvTypePostgresHost1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresHost1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresHost1 struct {
	Type    FilterProjectEnvsEnvTypePostgresHost1 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresHost1) GetType() FilterProjectEnvsEnvTypePostgresHost1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresHost1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresHost1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresUser1 string

const (
	FilterProjectEnvsEnvTypePostgresUser1PostgresUser FilterProjectEnvsEnvTypePostgresUser1 = "postgres-user"
)

func (e FilterProjectEnvsEnvTypePostgresUser1) ToPointer() *FilterProjectEnvsEnvTypePostgresUser1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresUser1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsEnvTypePostgresUser1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresUser1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresUser1 struct {
	Type    FilterProjectEnvsEnvTypePostgresUser1 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresUser1) GetType() FilterProjectEnvsEnvTypePostgresUser1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresUser1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresUser1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresPrismaURL1 string

const (
	FilterProjectEnvsEnvTypePostgresPrismaURL1PostgresPrismaURL FilterProjectEnvsEnvTypePostgresPrismaURL1 = "postgres-prisma-url"
)

func (e FilterProjectEnvsEnvTypePostgresPrismaURL1) ToPointer() *FilterProjectEnvsEnvTypePostgresPrismaURL1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresPrismaURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsEnvTypePostgresPrismaURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresPrismaURL1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresPrismaURL1 struct {
	Type    FilterProjectEnvsEnvTypePostgresPrismaURL1 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresPrismaURL1) GetType() FilterProjectEnvsEnvTypePostgresPrismaURL1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresPrismaURL1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresPrismaURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresURLNonPooling1 string

const (
	FilterProjectEnvsEnvTypePostgresURLNonPooling1PostgresURLNonPooling FilterProjectEnvsEnvTypePostgresURLNonPooling1 = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsEnvTypePostgresURLNonPooling1) ToPointer() *FilterProjectEnvsEnvTypePostgresURLNonPooling1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresURLNonPooling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsEnvTypePostgresURLNonPooling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresURLNonPooling1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresURLNonPooling1 struct {
	Type    FilterProjectEnvsEnvTypePostgresURLNonPooling1 `json:"type"`
	StoreID string                                         `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNonPooling1) GetType() FilterProjectEnvsEnvTypePostgresURLNonPooling1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresURLNonPooling1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresURLNonPooling1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypePostgresURL1 string

const (
	FilterProjectEnvsEnvTypePostgresURL1PostgresURL FilterProjectEnvsEnvTypePostgresURL1 = "postgres-url"
)

func (e FilterProjectEnvsEnvTypePostgresURL1) ToPointer() *FilterProjectEnvsEnvTypePostgresURL1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypePostgresURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsEnvTypePostgresURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypePostgresURL1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvPostgresURL1 struct {
	Type    FilterProjectEnvsEnvTypePostgresURL1 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvPostgresURL1) GetType() FilterProjectEnvsEnvTypePostgresURL1 {
	if o == nil {
		return FilterProjectEnvsEnvTypePostgresURL1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvPostgresURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeBlobReadWriteToken1 string

const (
	FilterProjectEnvsEnvTypeBlobReadWriteToken1BlobReadWriteToken FilterProjectEnvsEnvTypeBlobReadWriteToken1 = "blob-read-write-token"
)

func (e FilterProjectEnvsEnvTypeBlobReadWriteToken1) ToPointer() *FilterProjectEnvsEnvTypeBlobReadWriteToken1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeBlobReadWriteToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsEnvTypeBlobReadWriteToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeBlobReadWriteToken1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvBlobReadWriteToken1 struct {
	Type    FilterProjectEnvsEnvTypeBlobReadWriteToken1 `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvBlobReadWriteToken1) GetType() FilterProjectEnvsEnvTypeBlobReadWriteToken1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeBlobReadWriteToken1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvBlobReadWriteToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1 string

const (
	FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1RedisRestAPIReadOnlyToken FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1 = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1) ToPointer() *FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 struct {
	Type    FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1 `json:"type"`
	StoreID string                                             `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1) GetType() FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisRestAPIReadOnlyToken1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisRestAPIToken1 string

const (
	FilterProjectEnvsEnvTypeRedisRestAPIToken1RedisRestAPIToken FilterProjectEnvsEnvTypeRedisRestAPIToken1 = "redis-rest-api-token"
)

func (e FilterProjectEnvsEnvTypeRedisRestAPIToken1) ToPointer() *FilterProjectEnvsEnvTypeRedisRestAPIToken1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisRestAPIToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsEnvTypeRedisRestAPIToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisRestAPIToken1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisRestAPIToken1 struct {
	Type    FilterProjectEnvsEnvTypeRedisRestAPIToken1 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIToken1) GetType() FilterProjectEnvsEnvTypeRedisRestAPIToken1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisRestAPIToken1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisRestAPIURL1 string

const (
	FilterProjectEnvsEnvTypeRedisRestAPIURL1RedisRestAPIURL FilterProjectEnvsEnvTypeRedisRestAPIURL1 = "redis-rest-api-url"
)

func (e FilterProjectEnvsEnvTypeRedisRestAPIURL1) ToPointer() *FilterProjectEnvsEnvTypeRedisRestAPIURL1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisRestAPIURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsEnvTypeRedisRestAPIURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisRestAPIURL1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisRestAPIURL1 struct {
	Type    FilterProjectEnvsEnvTypeRedisRestAPIURL1 `json:"type"`
	StoreID string                                   `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIURL1) GetType() FilterProjectEnvsEnvTypeRedisRestAPIURL1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisRestAPIURL1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisRestAPIURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvTypeRedisURL1 string

const (
	FilterProjectEnvsEnvTypeRedisURL1RedisURL FilterProjectEnvsEnvTypeRedisURL1 = "redis-url"
)

func (e FilterProjectEnvsEnvTypeRedisURL1) ToPointer() *FilterProjectEnvsEnvTypeRedisURL1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeRedisURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsEnvTypeRedisURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeRedisURL1: %v", v)
	}
}

type FilterProjectEnvsContentHintEnvRedisURL1 struct {
	Type    FilterProjectEnvsEnvTypeRedisURL1 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintEnvRedisURL1) GetType() FilterProjectEnvsEnvTypeRedisURL1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeRedisURL1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintEnvRedisURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsEnvContentHintUnion1Type string

const (
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisURL1                  FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_RedisURL_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIURL1           FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_RedisRestAPIURL_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIToken1         FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_RedisRestAPIToken_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_RedisRestAPIReadOnlyToken_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvBlobReadWriteToken1        FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_BlobReadWriteToken_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURL1               FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresURL_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURLNonPooling1     FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresURLNonPooling_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresPrismaURL1         FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresPrismaURL_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresUser1              FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresUser_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresHost1              FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresHost_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresPassword1          FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresPassword_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresDatabase1          FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresDatabase_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURLNoSsl1          FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_PostgresURLNoSsl_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvIntegrationStoreSecret1    FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_IntegrationStoreSecret_1"
	FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvFlagsConnectionString1     FilterProjectEnvsEnvContentHintUnion1Type = "filterProjectEnvs_contentHint_env_FlagsConnectionString_1"
)

type FilterProjectEnvsEnvContentHintUnion1 struct {
	FilterProjectEnvsContentHintEnvRedisURL1                  *FilterProjectEnvsContentHintEnvRedisURL1                  `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvRedisRestAPIURL1           *FilterProjectEnvsContentHintEnvRedisRestAPIURL1           `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvRedisRestAPIToken1         *FilterProjectEnvsContentHintEnvRedisRestAPIToken1         `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 *FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvBlobReadWriteToken1        *FilterProjectEnvsContentHintEnvBlobReadWriteToken1        `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresURL1               *FilterProjectEnvsContentHintEnvPostgresURL1               `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresURLNonPooling1     *FilterProjectEnvsContentHintEnvPostgresURLNonPooling1     `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresPrismaURL1         *FilterProjectEnvsContentHintEnvPostgresPrismaURL1         `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresUser1              *FilterProjectEnvsContentHintEnvPostgresUser1              `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresHost1              *FilterProjectEnvsContentHintEnvPostgresHost1              `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresPassword1          *FilterProjectEnvsContentHintEnvPostgresPassword1          `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresDatabase1          *FilterProjectEnvsContentHintEnvPostgresDatabase1          `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvPostgresURLNoSsl1          *FilterProjectEnvsContentHintEnvPostgresURLNoSsl1          `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvIntegrationStoreSecret1    *FilterProjectEnvsContentHintEnvIntegrationStoreSecret1    `queryParam:"inline"`
	FilterProjectEnvsContentHintEnvFlagsConnectionString1     *FilterProjectEnvsContentHintEnvFlagsConnectionString1     `queryParam:"inline"`

	Type FilterProjectEnvsEnvContentHintUnion1Type
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvRedisURL1(filterProjectEnvsContentHintEnvRedisURL1 FilterProjectEnvsContentHintEnvRedisURL1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisURL1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvRedisURL1: &filterProjectEnvsContentHintEnvRedisURL1,
		Type:                                     typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvRedisRestAPIURL1(filterProjectEnvsContentHintEnvRedisRestAPIURL1 FilterProjectEnvsContentHintEnvRedisRestAPIURL1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIURL1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvRedisRestAPIURL1: &filterProjectEnvsContentHintEnvRedisRestAPIURL1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvRedisRestAPIToken1(filterProjectEnvsContentHintEnvRedisRestAPIToken1 FilterProjectEnvsContentHintEnvRedisRestAPIToken1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIToken1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvRedisRestAPIToken1: &filterProjectEnvsContentHintEnvRedisRestAPIToken1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1(filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1: &filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvBlobReadWriteToken1(filterProjectEnvsContentHintEnvBlobReadWriteToken1 FilterProjectEnvsContentHintEnvBlobReadWriteToken1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvBlobReadWriteToken1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvBlobReadWriteToken1: &filterProjectEnvsContentHintEnvBlobReadWriteToken1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresURL1(filterProjectEnvsContentHintEnvPostgresURL1 FilterProjectEnvsContentHintEnvPostgresURL1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURL1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresURL1: &filterProjectEnvsContentHintEnvPostgresURL1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresURLNonPooling1(filterProjectEnvsContentHintEnvPostgresURLNonPooling1 FilterProjectEnvsContentHintEnvPostgresURLNonPooling1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURLNonPooling1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresURLNonPooling1: &filterProjectEnvsContentHintEnvPostgresURLNonPooling1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresPrismaURL1(filterProjectEnvsContentHintEnvPostgresPrismaURL1 FilterProjectEnvsContentHintEnvPostgresPrismaURL1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresPrismaURL1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresPrismaURL1: &filterProjectEnvsContentHintEnvPostgresPrismaURL1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresUser1(filterProjectEnvsContentHintEnvPostgresUser1 FilterProjectEnvsContentHintEnvPostgresUser1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresUser1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresUser1: &filterProjectEnvsContentHintEnvPostgresUser1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresHost1(filterProjectEnvsContentHintEnvPostgresHost1 FilterProjectEnvsContentHintEnvPostgresHost1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresHost1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresHost1: &filterProjectEnvsContentHintEnvPostgresHost1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresPassword1(filterProjectEnvsContentHintEnvPostgresPassword1 FilterProjectEnvsContentHintEnvPostgresPassword1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresPassword1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresPassword1: &filterProjectEnvsContentHintEnvPostgresPassword1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresDatabase1(filterProjectEnvsContentHintEnvPostgresDatabase1 FilterProjectEnvsContentHintEnvPostgresDatabase1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresDatabase1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresDatabase1: &filterProjectEnvsContentHintEnvPostgresDatabase1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvPostgresURLNoSsl1(filterProjectEnvsContentHintEnvPostgresURLNoSsl1 FilterProjectEnvsContentHintEnvPostgresURLNoSsl1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURLNoSsl1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvPostgresURLNoSsl1: &filterProjectEnvsContentHintEnvPostgresURLNoSsl1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvIntegrationStoreSecret1(filterProjectEnvsContentHintEnvIntegrationStoreSecret1 FilterProjectEnvsContentHintEnvIntegrationStoreSecret1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvIntegrationStoreSecret1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvIntegrationStoreSecret1: &filterProjectEnvsContentHintEnvIntegrationStoreSecret1,
		Type: typ,
	}
}

func CreateFilterProjectEnvsEnvContentHintUnion1FilterProjectEnvsContentHintEnvFlagsConnectionString1(filterProjectEnvsContentHintEnvFlagsConnectionString1 FilterProjectEnvsContentHintEnvFlagsConnectionString1) FilterProjectEnvsEnvContentHintUnion1 {
	typ := FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvFlagsConnectionString1

	return FilterProjectEnvsEnvContentHintUnion1{
		FilterProjectEnvsContentHintEnvFlagsConnectionString1: &filterProjectEnvsContentHintEnvFlagsConnectionString1,
		Type: typ,
	}
}

func (u *FilterProjectEnvsEnvContentHintUnion1) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsContentHintEnvPostgresURLNonPooling1 FilterProjectEnvsContentHintEnvPostgresURLNonPooling1 = FilterProjectEnvsContentHintEnvPostgresURLNonPooling1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresURLNonPooling1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresURLNonPooling1 = &filterProjectEnvsContentHintEnvPostgresURLNonPooling1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURLNonPooling1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresPassword1 FilterProjectEnvsContentHintEnvPostgresPassword1 = FilterProjectEnvsContentHintEnvPostgresPassword1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresPassword1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresPassword1 = &filterProjectEnvsContentHintEnvPostgresPassword1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresPassword1
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisRestAPIToken1 FilterProjectEnvsContentHintEnvRedisRestAPIToken1 = FilterProjectEnvsContentHintEnvRedisRestAPIToken1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisRestAPIToken1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisRestAPIToken1 = &filterProjectEnvsContentHintEnvRedisRestAPIToken1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIToken1
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 = FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 = &filterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1
		return nil
	}

	var filterProjectEnvsContentHintEnvBlobReadWriteToken1 FilterProjectEnvsContentHintEnvBlobReadWriteToken1 = FilterProjectEnvsContentHintEnvBlobReadWriteToken1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvBlobReadWriteToken1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvBlobReadWriteToken1 = &filterProjectEnvsContentHintEnvBlobReadWriteToken1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvBlobReadWriteToken1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresURL1 FilterProjectEnvsContentHintEnvPostgresURL1 = FilterProjectEnvsContentHintEnvPostgresURL1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresURL1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresURL1 = &filterProjectEnvsContentHintEnvPostgresURL1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURL1
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisRestAPIURL1 FilterProjectEnvsContentHintEnvRedisRestAPIURL1 = FilterProjectEnvsContentHintEnvRedisRestAPIURL1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisRestAPIURL1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisRestAPIURL1 = &filterProjectEnvsContentHintEnvRedisRestAPIURL1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisRestAPIURL1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresUser1 FilterProjectEnvsContentHintEnvPostgresUser1 = FilterProjectEnvsContentHintEnvPostgresUser1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresUser1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresUser1 = &filterProjectEnvsContentHintEnvPostgresUser1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresUser1
		return nil
	}

	var filterProjectEnvsContentHintEnvRedisURL1 FilterProjectEnvsContentHintEnvRedisURL1 = FilterProjectEnvsContentHintEnvRedisURL1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvRedisURL1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvRedisURL1 = &filterProjectEnvsContentHintEnvRedisURL1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvRedisURL1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresHost1 FilterProjectEnvsContentHintEnvPostgresHost1 = FilterProjectEnvsContentHintEnvPostgresHost1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresHost1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresHost1 = &filterProjectEnvsContentHintEnvPostgresHost1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresHost1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresPrismaURL1 FilterProjectEnvsContentHintEnvPostgresPrismaURL1 = FilterProjectEnvsContentHintEnvPostgresPrismaURL1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresPrismaURL1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresPrismaURL1 = &filterProjectEnvsContentHintEnvPostgresPrismaURL1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresPrismaURL1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresDatabase1 FilterProjectEnvsContentHintEnvPostgresDatabase1 = FilterProjectEnvsContentHintEnvPostgresDatabase1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresDatabase1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresDatabase1 = &filterProjectEnvsContentHintEnvPostgresDatabase1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresDatabase1
		return nil
	}

	var filterProjectEnvsContentHintEnvPostgresURLNoSsl1 FilterProjectEnvsContentHintEnvPostgresURLNoSsl1 = FilterProjectEnvsContentHintEnvPostgresURLNoSsl1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvPostgresURLNoSsl1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvPostgresURLNoSsl1 = &filterProjectEnvsContentHintEnvPostgresURLNoSsl1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvPostgresURLNoSsl1
		return nil
	}

	var filterProjectEnvsContentHintEnvFlagsConnectionString1 FilterProjectEnvsContentHintEnvFlagsConnectionString1 = FilterProjectEnvsContentHintEnvFlagsConnectionString1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvFlagsConnectionString1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvFlagsConnectionString1 = &filterProjectEnvsContentHintEnvFlagsConnectionString1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvFlagsConnectionString1
		return nil
	}

	var filterProjectEnvsContentHintEnvIntegrationStoreSecret1 FilterProjectEnvsContentHintEnvIntegrationStoreSecret1 = FilterProjectEnvsContentHintEnvIntegrationStoreSecret1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintEnvIntegrationStoreSecret1, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintEnvIntegrationStoreSecret1 = &filterProjectEnvsContentHintEnvIntegrationStoreSecret1
		u.Type = FilterProjectEnvsEnvContentHintUnion1TypeFilterProjectEnvsContentHintEnvIntegrationStoreSecret1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsEnvContentHintUnion1", string(data))
}

func (u FilterProjectEnvsEnvContentHintUnion1) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsContentHintEnvRedisURL1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisURL1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvRedisRestAPIURL1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisRestAPIURL1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvRedisRestAPIToken1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisRestAPIToken1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvRedisRestAPIReadOnlyToken1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvBlobReadWriteToken1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvBlobReadWriteToken1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresURL1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresURL1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresURLNonPooling1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresURLNonPooling1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresPrismaURL1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresPrismaURL1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresUser1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresUser1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresHost1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresHost1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresPassword1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresPassword1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresDatabase1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresDatabase1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvPostgresURLNoSsl1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvPostgresURLNoSsl1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvIntegrationStoreSecret1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvIntegrationStoreSecret1, "", true)
	}

	if u.FilterProjectEnvsContentHintEnvFlagsConnectionString1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintEnvFlagsConnectionString1, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsEnvContentHintUnion1: all fields are null")
}

type FilterProjectEnvsEnvTypeFlagsSecret1 string

const (
	FilterProjectEnvsEnvTypeFlagsSecret1FlagsSecret FilterProjectEnvsEnvTypeFlagsSecret1 = "flags-secret"
)

func (e FilterProjectEnvsEnvTypeFlagsSecret1) ToPointer() *FilterProjectEnvsEnvTypeFlagsSecret1 {
	return &e
}
func (e *FilterProjectEnvsEnvTypeFlagsSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = FilterProjectEnvsEnvTypeFlagsSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsEnvTypeFlagsSecret1: %v", v)
	}
}

// FilterProjectEnvsEnvInternalContentHint1 - Similar to `contentHints`, but should not be exposed to the user.
type FilterProjectEnvsEnvInternalContentHint1 struct {
	Type FilterProjectEnvsEnvTypeFlagsSecret1 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *FilterProjectEnvsEnvInternalContentHint1) GetType() FilterProjectEnvsEnvTypeFlagsSecret1 {
	if o == nil {
		return FilterProjectEnvsEnvTypeFlagsSecret1("")
	}
	return o.Type
}

func (o *FilterProjectEnvsEnvInternalContentHint1) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type FilterProjectEnvsEnv1 struct {
	Target *FilterProjectEnvsEnvTargetUnion1 `json:"target,omitempty"`
	Type   *FilterProjectEnvsEnvType1        `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                                `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                                  `json:"decrypted,omitempty"`
	Value             *string                                `json:"value,omitempty"`
	VsmValue          *string                                `json:"vsmValue,omitempty"`
	ID                *string                                `json:"id,omitempty"`
	Key               *string                                `json:"key,omitempty"`
	ConfigurationID   *string                                `json:"configurationId,omitempty"`
	CreatedAt         *float64                               `json:"createdAt,omitempty"`
	UpdatedAt         *float64                               `json:"updatedAt,omitempty"`
	CreatedBy         *string                                `json:"createdBy,omitempty"`
	UpdatedBy         *string                                `json:"updatedBy,omitempty"`
	GitBranch         *string                                `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *FilterProjectEnvsEnvContentHintUnion1 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *FilterProjectEnvsEnvInternalContentHint1 `json:"internalContentHint,omitempty"`
	Comment              *string                                   `json:"comment,omitempty"`
	CustomEnvironmentIds []string                                  `json:"customEnvironmentIds,omitempty"`
	System               *bool                                     `json:"system,omitempty"`
}

func (o *FilterProjectEnvsEnv1) GetTarget() *FilterProjectEnvsEnvTargetUnion1 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvsEnv1) GetType() *FilterProjectEnvsEnvType1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvsEnv1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *FilterProjectEnvsEnv1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvsEnv1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FilterProjectEnvsEnv1) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *FilterProjectEnvsEnv1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvsEnv1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvsEnv1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvsEnv1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvsEnv1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvsEnv1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvsEnv1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvsEnv1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsEnv1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvsEnv1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvsEnv1) GetContentHint() *FilterProjectEnvsEnvContentHintUnion1 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvsEnv1) GetInternalContentHint() *FilterProjectEnvsEnvInternalContentHint1 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *FilterProjectEnvsEnv1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *FilterProjectEnvsEnv1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *FilterProjectEnvsEnv1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type FilterProjectEnvsResponseBody2 struct {
	Envs []FilterProjectEnvsEnv1 `json:"envs"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *FilterProjectEnvsResponseBody2) GetEnvs() []FilterProjectEnvsEnv1 {
	if o == nil {
		return []FilterProjectEnvsEnv1{}
	}
	return o.Envs
}

func (o *FilterProjectEnvsResponseBody2) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type FilterProjectEnvsTargetEnum2 string

const (
	FilterProjectEnvsTargetEnum2Production  FilterProjectEnvsTargetEnum2 = "production"
	FilterProjectEnvsTargetEnum2Preview     FilterProjectEnvsTargetEnum2 = "preview"
	FilterProjectEnvsTargetEnum2Development FilterProjectEnvsTargetEnum2 = "development"
)

func (e FilterProjectEnvsTargetEnum2) ToPointer() *FilterProjectEnvsTargetEnum2 {
	return &e
}
func (e *FilterProjectEnvsTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetEnum2: %v", v)
	}
}

type FilterProjectEnvsTargetEnum1 string

const (
	FilterProjectEnvsTargetEnum1Production  FilterProjectEnvsTargetEnum1 = "production"
	FilterProjectEnvsTargetEnum1Preview     FilterProjectEnvsTargetEnum1 = "preview"
	FilterProjectEnvsTargetEnum1Development FilterProjectEnvsTargetEnum1 = "development"
)

func (e FilterProjectEnvsTargetEnum1) ToPointer() *FilterProjectEnvsTargetEnum1 {
	return &e
}
func (e *FilterProjectEnvsTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = FilterProjectEnvsTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTargetEnum1: %v", v)
	}
}

type FilterProjectEnvsTargetUnionType string

const (
	FilterProjectEnvsTargetUnionTypeArrayOfFilterProjectEnvsTargetEnum1 FilterProjectEnvsTargetUnionType = "arrayOfFilterProjectEnvsTargetEnum1"
	FilterProjectEnvsTargetUnionTypeFilterProjectEnvsTargetEnum2        FilterProjectEnvsTargetUnionType = "filterProjectEnvs_target_enum_2"
)

type FilterProjectEnvsTargetUnion struct {
	ArrayOfFilterProjectEnvsTargetEnum1 []FilterProjectEnvsTargetEnum1 `queryParam:"inline"`
	FilterProjectEnvsTargetEnum2        *FilterProjectEnvsTargetEnum2  `queryParam:"inline"`

	Type FilterProjectEnvsTargetUnionType
}

func CreateFilterProjectEnvsTargetUnionArrayOfFilterProjectEnvsTargetEnum1(arrayOfFilterProjectEnvsTargetEnum1 []FilterProjectEnvsTargetEnum1) FilterProjectEnvsTargetUnion {
	typ := FilterProjectEnvsTargetUnionTypeArrayOfFilterProjectEnvsTargetEnum1

	return FilterProjectEnvsTargetUnion{
		ArrayOfFilterProjectEnvsTargetEnum1: arrayOfFilterProjectEnvsTargetEnum1,
		Type:                                typ,
	}
}

func CreateFilterProjectEnvsTargetUnionFilterProjectEnvsTargetEnum2(filterProjectEnvsTargetEnum2 FilterProjectEnvsTargetEnum2) FilterProjectEnvsTargetUnion {
	typ := FilterProjectEnvsTargetUnionTypeFilterProjectEnvsTargetEnum2

	return FilterProjectEnvsTargetUnion{
		FilterProjectEnvsTargetEnum2: &filterProjectEnvsTargetEnum2,
		Type:                         typ,
	}
}

func (u *FilterProjectEnvsTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfFilterProjectEnvsTargetEnum1 []FilterProjectEnvsTargetEnum1 = []FilterProjectEnvsTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfFilterProjectEnvsTargetEnum1, "", true, true); err == nil {
		u.ArrayOfFilterProjectEnvsTargetEnum1 = arrayOfFilterProjectEnvsTargetEnum1
		u.Type = FilterProjectEnvsTargetUnionTypeArrayOfFilterProjectEnvsTargetEnum1
		return nil
	}

	var filterProjectEnvsTargetEnum2 FilterProjectEnvsTargetEnum2 = FilterProjectEnvsTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsTargetEnum2, "", true, true); err == nil {
		u.FilterProjectEnvsTargetEnum2 = &filterProjectEnvsTargetEnum2
		u.Type = FilterProjectEnvsTargetUnionTypeFilterProjectEnvsTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsTargetUnion", string(data))
}

func (u FilterProjectEnvsTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfFilterProjectEnvsTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfFilterProjectEnvsTargetEnum1, "", true)
	}

	if u.FilterProjectEnvsTargetEnum2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsTargetUnion: all fields are null")
}

type FilterProjectEnvsType string

const (
	FilterProjectEnvsTypeSystem    FilterProjectEnvsType = "system"
	FilterProjectEnvsTypeEncrypted FilterProjectEnvsType = "encrypted"
	FilterProjectEnvsTypePlain     FilterProjectEnvsType = "plain"
	FilterProjectEnvsTypeSensitive FilterProjectEnvsType = "sensitive"
	FilterProjectEnvsTypeSecret    FilterProjectEnvsType = "secret"
)

func (e FilterProjectEnvsType) ToPointer() *FilterProjectEnvsType {
	return &e
}
func (e *FilterProjectEnvsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = FilterProjectEnvsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsType: %v", v)
	}
}

type FilterProjectEnvsTypeFlagsConnectionString string

const (
	FilterProjectEnvsTypeFlagsConnectionStringFlagsConnectionString FilterProjectEnvsTypeFlagsConnectionString = "flags-connection-string"
)

func (e FilterProjectEnvsTypeFlagsConnectionString) ToPointer() *FilterProjectEnvsTypeFlagsConnectionString {
	return &e
}
func (e *FilterProjectEnvsTypeFlagsConnectionString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = FilterProjectEnvsTypeFlagsConnectionString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeFlagsConnectionString: %v", v)
	}
}

type FilterProjectEnvsContentHintFlagsConnectionString struct {
	Type      FilterProjectEnvsTypeFlagsConnectionString `json:"type"`
	ProjectID string                                     `json:"projectId"`
}

func (o *FilterProjectEnvsContentHintFlagsConnectionString) GetType() FilterProjectEnvsTypeFlagsConnectionString {
	if o == nil {
		return FilterProjectEnvsTypeFlagsConnectionString("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintFlagsConnectionString) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type FilterProjectEnvsTypeIntegrationStoreSecret string

const (
	FilterProjectEnvsTypeIntegrationStoreSecretIntegrationStoreSecret FilterProjectEnvsTypeIntegrationStoreSecret = "integration-store-secret"
)

func (e FilterProjectEnvsTypeIntegrationStoreSecret) ToPointer() *FilterProjectEnvsTypeIntegrationStoreSecret {
	return &e
}
func (e *FilterProjectEnvsTypeIntegrationStoreSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = FilterProjectEnvsTypeIntegrationStoreSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeIntegrationStoreSecret: %v", v)
	}
}

type FilterProjectEnvsContentHintIntegrationStoreSecret struct {
	Type                       FilterProjectEnvsTypeIntegrationStoreSecret `json:"type"`
	StoreID                    string                                      `json:"storeId"`
	IntegrationID              string                                      `json:"integrationId"`
	IntegrationProductID       string                                      `json:"integrationProductId"`
	IntegrationConfigurationID string                                      `json:"integrationConfigurationId"`
}

func (o *FilterProjectEnvsContentHintIntegrationStoreSecret) GetType() FilterProjectEnvsTypeIntegrationStoreSecret {
	if o == nil {
		return FilterProjectEnvsTypeIntegrationStoreSecret("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintIntegrationStoreSecret) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *FilterProjectEnvsContentHintIntegrationStoreSecret) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *FilterProjectEnvsContentHintIntegrationStoreSecret) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *FilterProjectEnvsContentHintIntegrationStoreSecret) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type FilterProjectEnvsTypePostgresURLNoSsl string

const (
	FilterProjectEnvsTypePostgresURLNoSslPostgresURLNoSsl FilterProjectEnvsTypePostgresURLNoSsl = "postgres-url-no-ssl"
)

func (e FilterProjectEnvsTypePostgresURLNoSsl) ToPointer() *FilterProjectEnvsTypePostgresURLNoSsl {
	return &e
}
func (e *FilterProjectEnvsTypePostgresURLNoSsl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = FilterProjectEnvsTypePostgresURLNoSsl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresURLNoSsl: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresURLNoSsl struct {
	Type    FilterProjectEnvsTypePostgresURLNoSsl `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresURLNoSsl) GetType() FilterProjectEnvsTypePostgresURLNoSsl {
	if o == nil {
		return FilterProjectEnvsTypePostgresURLNoSsl("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresURLNoSsl) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresDatabase string

const (
	FilterProjectEnvsTypePostgresDatabasePostgresDatabase FilterProjectEnvsTypePostgresDatabase = "postgres-database"
)

func (e FilterProjectEnvsTypePostgresDatabase) ToPointer() *FilterProjectEnvsTypePostgresDatabase {
	return &e
}
func (e *FilterProjectEnvsTypePostgresDatabase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = FilterProjectEnvsTypePostgresDatabase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresDatabase: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresDatabase struct {
	Type    FilterProjectEnvsTypePostgresDatabase `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresDatabase) GetType() FilterProjectEnvsTypePostgresDatabase {
	if o == nil {
		return FilterProjectEnvsTypePostgresDatabase("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresDatabase) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresPassword string

const (
	FilterProjectEnvsTypePostgresPasswordPostgresPassword FilterProjectEnvsTypePostgresPassword = "postgres-password"
)

func (e FilterProjectEnvsTypePostgresPassword) ToPointer() *FilterProjectEnvsTypePostgresPassword {
	return &e
}
func (e *FilterProjectEnvsTypePostgresPassword) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = FilterProjectEnvsTypePostgresPassword(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresPassword: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresPassword struct {
	Type    FilterProjectEnvsTypePostgresPassword `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresPassword) GetType() FilterProjectEnvsTypePostgresPassword {
	if o == nil {
		return FilterProjectEnvsTypePostgresPassword("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresPassword) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresHost string

const (
	FilterProjectEnvsTypePostgresHostPostgresHost FilterProjectEnvsTypePostgresHost = "postgres-host"
)

func (e FilterProjectEnvsTypePostgresHost) ToPointer() *FilterProjectEnvsTypePostgresHost {
	return &e
}
func (e *FilterProjectEnvsTypePostgresHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = FilterProjectEnvsTypePostgresHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresHost: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresHost struct {
	Type    FilterProjectEnvsTypePostgresHost `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresHost) GetType() FilterProjectEnvsTypePostgresHost {
	if o == nil {
		return FilterProjectEnvsTypePostgresHost("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresHost) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresUser string

const (
	FilterProjectEnvsTypePostgresUserPostgresUser FilterProjectEnvsTypePostgresUser = "postgres-user"
)

func (e FilterProjectEnvsTypePostgresUser) ToPointer() *FilterProjectEnvsTypePostgresUser {
	return &e
}
func (e *FilterProjectEnvsTypePostgresUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = FilterProjectEnvsTypePostgresUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresUser: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresUser struct {
	Type    FilterProjectEnvsTypePostgresUser `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresUser) GetType() FilterProjectEnvsTypePostgresUser {
	if o == nil {
		return FilterProjectEnvsTypePostgresUser("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresUser) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresPrismaURL string

const (
	FilterProjectEnvsTypePostgresPrismaURLPostgresPrismaURL FilterProjectEnvsTypePostgresPrismaURL = "postgres-prisma-url"
)

func (e FilterProjectEnvsTypePostgresPrismaURL) ToPointer() *FilterProjectEnvsTypePostgresPrismaURL {
	return &e
}
func (e *FilterProjectEnvsTypePostgresPrismaURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = FilterProjectEnvsTypePostgresPrismaURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresPrismaURL: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresPrismaURL struct {
	Type    FilterProjectEnvsTypePostgresPrismaURL `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresPrismaURL) GetType() FilterProjectEnvsTypePostgresPrismaURL {
	if o == nil {
		return FilterProjectEnvsTypePostgresPrismaURL("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresPrismaURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresURLNonPooling string

const (
	FilterProjectEnvsTypePostgresURLNonPoolingPostgresURLNonPooling FilterProjectEnvsTypePostgresURLNonPooling = "postgres-url-non-pooling"
)

func (e FilterProjectEnvsTypePostgresURLNonPooling) ToPointer() *FilterProjectEnvsTypePostgresURLNonPooling {
	return &e
}
func (e *FilterProjectEnvsTypePostgresURLNonPooling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = FilterProjectEnvsTypePostgresURLNonPooling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresURLNonPooling: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresURLNonPooling struct {
	Type    FilterProjectEnvsTypePostgresURLNonPooling `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresURLNonPooling) GetType() FilterProjectEnvsTypePostgresURLNonPooling {
	if o == nil {
		return FilterProjectEnvsTypePostgresURLNonPooling("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresURLNonPooling) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypePostgresURL string

const (
	FilterProjectEnvsTypePostgresURLPostgresURL FilterProjectEnvsTypePostgresURL = "postgres-url"
)

func (e FilterProjectEnvsTypePostgresURL) ToPointer() *FilterProjectEnvsTypePostgresURL {
	return &e
}
func (e *FilterProjectEnvsTypePostgresURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = FilterProjectEnvsTypePostgresURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypePostgresURL: %v", v)
	}
}

type FilterProjectEnvsContentHintPostgresURL struct {
	Type    FilterProjectEnvsTypePostgresURL `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintPostgresURL) GetType() FilterProjectEnvsTypePostgresURL {
	if o == nil {
		return FilterProjectEnvsTypePostgresURL("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintPostgresURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypeBlobReadWriteToken string

const (
	FilterProjectEnvsTypeBlobReadWriteTokenBlobReadWriteToken FilterProjectEnvsTypeBlobReadWriteToken = "blob-read-write-token"
)

func (e FilterProjectEnvsTypeBlobReadWriteToken) ToPointer() *FilterProjectEnvsTypeBlobReadWriteToken {
	return &e
}
func (e *FilterProjectEnvsTypeBlobReadWriteToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = FilterProjectEnvsTypeBlobReadWriteToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeBlobReadWriteToken: %v", v)
	}
}

type FilterProjectEnvsContentHintBlobReadWriteToken struct {
	Type    FilterProjectEnvsTypeBlobReadWriteToken `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintBlobReadWriteToken) GetType() FilterProjectEnvsTypeBlobReadWriteToken {
	if o == nil {
		return FilterProjectEnvsTypeBlobReadWriteToken("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintBlobReadWriteToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypeRedisRestAPIReadOnlyToken string

const (
	FilterProjectEnvsTypeRedisRestAPIReadOnlyTokenRedisRestAPIReadOnlyToken FilterProjectEnvsTypeRedisRestAPIReadOnlyToken = "redis-rest-api-read-only-token"
)

func (e FilterProjectEnvsTypeRedisRestAPIReadOnlyToken) ToPointer() *FilterProjectEnvsTypeRedisRestAPIReadOnlyToken {
	return &e
}
func (e *FilterProjectEnvsTypeRedisRestAPIReadOnlyToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = FilterProjectEnvsTypeRedisRestAPIReadOnlyToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeRedisRestAPIReadOnlyToken: %v", v)
	}
}

type FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken struct {
	Type    FilterProjectEnvsTypeRedisRestAPIReadOnlyToken `json:"type"`
	StoreID string                                         `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken) GetType() FilterProjectEnvsTypeRedisRestAPIReadOnlyToken {
	if o == nil {
		return FilterProjectEnvsTypeRedisRestAPIReadOnlyToken("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypeRedisRestAPIToken string

const (
	FilterProjectEnvsTypeRedisRestAPITokenRedisRestAPIToken FilterProjectEnvsTypeRedisRestAPIToken = "redis-rest-api-token"
)

func (e FilterProjectEnvsTypeRedisRestAPIToken) ToPointer() *FilterProjectEnvsTypeRedisRestAPIToken {
	return &e
}
func (e *FilterProjectEnvsTypeRedisRestAPIToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = FilterProjectEnvsTypeRedisRestAPIToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeRedisRestAPIToken: %v", v)
	}
}

type FilterProjectEnvsContentHintRedisRestAPIToken struct {
	Type    FilterProjectEnvsTypeRedisRestAPIToken `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintRedisRestAPIToken) GetType() FilterProjectEnvsTypeRedisRestAPIToken {
	if o == nil {
		return FilterProjectEnvsTypeRedisRestAPIToken("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintRedisRestAPIToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypeRedisRestAPIURL string

const (
	FilterProjectEnvsTypeRedisRestAPIURLRedisRestAPIURL FilterProjectEnvsTypeRedisRestAPIURL = "redis-rest-api-url"
)

func (e FilterProjectEnvsTypeRedisRestAPIURL) ToPointer() *FilterProjectEnvsTypeRedisRestAPIURL {
	return &e
}
func (e *FilterProjectEnvsTypeRedisRestAPIURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = FilterProjectEnvsTypeRedisRestAPIURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeRedisRestAPIURL: %v", v)
	}
}

type FilterProjectEnvsContentHintRedisRestAPIURL struct {
	Type    FilterProjectEnvsTypeRedisRestAPIURL `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintRedisRestAPIURL) GetType() FilterProjectEnvsTypeRedisRestAPIURL {
	if o == nil {
		return FilterProjectEnvsTypeRedisRestAPIURL("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintRedisRestAPIURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsTypeRedisURL string

const (
	FilterProjectEnvsTypeRedisURLRedisURL FilterProjectEnvsTypeRedisURL = "redis-url"
)

func (e FilterProjectEnvsTypeRedisURL) ToPointer() *FilterProjectEnvsTypeRedisURL {
	return &e
}
func (e *FilterProjectEnvsTypeRedisURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = FilterProjectEnvsTypeRedisURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeRedisURL: %v", v)
	}
}

type FilterProjectEnvsContentHintRedisURL struct {
	Type    FilterProjectEnvsTypeRedisURL `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *FilterProjectEnvsContentHintRedisURL) GetType() FilterProjectEnvsTypeRedisURL {
	if o == nil {
		return FilterProjectEnvsTypeRedisURL("")
	}
	return o.Type
}

func (o *FilterProjectEnvsContentHintRedisURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type FilterProjectEnvsContentHintUnionType string

const (
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisURL                  FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_RedisURL"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIURL           FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_RedisRestAPIURL"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIToken         FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_RedisRestAPIToken"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIReadOnlyToken FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_RedisRestAPIReadOnlyToken"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintBlobReadWriteToken        FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_BlobReadWriteToken"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURL               FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresURL"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURLNonPooling     FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresURLNonPooling"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresPrismaURL         FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresPrismaURL"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresUser              FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresUser"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresHost              FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresHost"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresPassword          FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresPassword"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresDatabase          FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresDatabase"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURLNoSsl          FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_PostgresURLNoSsl"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintIntegrationStoreSecret    FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_IntegrationStoreSecret"
	FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintFlagsConnectionString     FilterProjectEnvsContentHintUnionType = "filterProjectEnvs_contentHint_FlagsConnectionString"
)

type FilterProjectEnvsContentHintUnion struct {
	FilterProjectEnvsContentHintRedisURL                  *FilterProjectEnvsContentHintRedisURL                  `queryParam:"inline"`
	FilterProjectEnvsContentHintRedisRestAPIURL           *FilterProjectEnvsContentHintRedisRestAPIURL           `queryParam:"inline"`
	FilterProjectEnvsContentHintRedisRestAPIToken         *FilterProjectEnvsContentHintRedisRestAPIToken         `queryParam:"inline"`
	FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken *FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken `queryParam:"inline"`
	FilterProjectEnvsContentHintBlobReadWriteToken        *FilterProjectEnvsContentHintBlobReadWriteToken        `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresURL               *FilterProjectEnvsContentHintPostgresURL               `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresURLNonPooling     *FilterProjectEnvsContentHintPostgresURLNonPooling     `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresPrismaURL         *FilterProjectEnvsContentHintPostgresPrismaURL         `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresUser              *FilterProjectEnvsContentHintPostgresUser              `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresHost              *FilterProjectEnvsContentHintPostgresHost              `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresPassword          *FilterProjectEnvsContentHintPostgresPassword          `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresDatabase          *FilterProjectEnvsContentHintPostgresDatabase          `queryParam:"inline"`
	FilterProjectEnvsContentHintPostgresURLNoSsl          *FilterProjectEnvsContentHintPostgresURLNoSsl          `queryParam:"inline"`
	FilterProjectEnvsContentHintIntegrationStoreSecret    *FilterProjectEnvsContentHintIntegrationStoreSecret    `queryParam:"inline"`
	FilterProjectEnvsContentHintFlagsConnectionString     *FilterProjectEnvsContentHintFlagsConnectionString     `queryParam:"inline"`

	Type FilterProjectEnvsContentHintUnionType
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintRedisURL(filterProjectEnvsContentHintRedisURL FilterProjectEnvsContentHintRedisURL) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisURL

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintRedisURL: &filterProjectEnvsContentHintRedisURL,
		Type:                                 typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintRedisRestAPIURL(filterProjectEnvsContentHintRedisRestAPIURL FilterProjectEnvsContentHintRedisRestAPIURL) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIURL

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintRedisRestAPIURL: &filterProjectEnvsContentHintRedisRestAPIURL,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintRedisRestAPIToken(filterProjectEnvsContentHintRedisRestAPIToken FilterProjectEnvsContentHintRedisRestAPIToken) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIToken

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintRedisRestAPIToken: &filterProjectEnvsContentHintRedisRestAPIToken,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintRedisRestAPIReadOnlyToken(filterProjectEnvsContentHintRedisRestAPIReadOnlyToken FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIReadOnlyToken

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken: &filterProjectEnvsContentHintRedisRestAPIReadOnlyToken,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintBlobReadWriteToken(filterProjectEnvsContentHintBlobReadWriteToken FilterProjectEnvsContentHintBlobReadWriteToken) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintBlobReadWriteToken

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintBlobReadWriteToken: &filterProjectEnvsContentHintBlobReadWriteToken,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresURL(filterProjectEnvsContentHintPostgresURL FilterProjectEnvsContentHintPostgresURL) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURL

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresURL: &filterProjectEnvsContentHintPostgresURL,
		Type:                                    typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresURLNonPooling(filterProjectEnvsContentHintPostgresURLNonPooling FilterProjectEnvsContentHintPostgresURLNonPooling) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURLNonPooling

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresURLNonPooling: &filterProjectEnvsContentHintPostgresURLNonPooling,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresPrismaURL(filterProjectEnvsContentHintPostgresPrismaURL FilterProjectEnvsContentHintPostgresPrismaURL) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresPrismaURL

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresPrismaURL: &filterProjectEnvsContentHintPostgresPrismaURL,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresUser(filterProjectEnvsContentHintPostgresUser FilterProjectEnvsContentHintPostgresUser) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresUser

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresUser: &filterProjectEnvsContentHintPostgresUser,
		Type:                                     typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresHost(filterProjectEnvsContentHintPostgresHost FilterProjectEnvsContentHintPostgresHost) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresHost

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresHost: &filterProjectEnvsContentHintPostgresHost,
		Type:                                     typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresPassword(filterProjectEnvsContentHintPostgresPassword FilterProjectEnvsContentHintPostgresPassword) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresPassword

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresPassword: &filterProjectEnvsContentHintPostgresPassword,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresDatabase(filterProjectEnvsContentHintPostgresDatabase FilterProjectEnvsContentHintPostgresDatabase) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresDatabase

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresDatabase: &filterProjectEnvsContentHintPostgresDatabase,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintPostgresURLNoSsl(filterProjectEnvsContentHintPostgresURLNoSsl FilterProjectEnvsContentHintPostgresURLNoSsl) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURLNoSsl

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintPostgresURLNoSsl: &filterProjectEnvsContentHintPostgresURLNoSsl,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintIntegrationStoreSecret(filterProjectEnvsContentHintIntegrationStoreSecret FilterProjectEnvsContentHintIntegrationStoreSecret) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintIntegrationStoreSecret

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintIntegrationStoreSecret: &filterProjectEnvsContentHintIntegrationStoreSecret,
		Type: typ,
	}
}

func CreateFilterProjectEnvsContentHintUnionFilterProjectEnvsContentHintFlagsConnectionString(filterProjectEnvsContentHintFlagsConnectionString FilterProjectEnvsContentHintFlagsConnectionString) FilterProjectEnvsContentHintUnion {
	typ := FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintFlagsConnectionString

	return FilterProjectEnvsContentHintUnion{
		FilterProjectEnvsContentHintFlagsConnectionString: &filterProjectEnvsContentHintFlagsConnectionString,
		Type: typ,
	}
}

func (u *FilterProjectEnvsContentHintUnion) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsContentHintPostgresURLNonPooling FilterProjectEnvsContentHintPostgresURLNonPooling = FilterProjectEnvsContentHintPostgresURLNonPooling{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresURLNonPooling, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresURLNonPooling = &filterProjectEnvsContentHintPostgresURLNonPooling
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURLNonPooling
		return nil
	}

	var filterProjectEnvsContentHintPostgresPassword FilterProjectEnvsContentHintPostgresPassword = FilterProjectEnvsContentHintPostgresPassword{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresPassword, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresPassword = &filterProjectEnvsContentHintPostgresPassword
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresPassword
		return nil
	}

	var filterProjectEnvsContentHintRedisRestAPIToken FilterProjectEnvsContentHintRedisRestAPIToken = FilterProjectEnvsContentHintRedisRestAPIToken{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintRedisRestAPIToken, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintRedisRestAPIToken = &filterProjectEnvsContentHintRedisRestAPIToken
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIToken
		return nil
	}

	var filterProjectEnvsContentHintRedisRestAPIReadOnlyToken FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken = FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintRedisRestAPIReadOnlyToken, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken = &filterProjectEnvsContentHintRedisRestAPIReadOnlyToken
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIReadOnlyToken
		return nil
	}

	var filterProjectEnvsContentHintBlobReadWriteToken FilterProjectEnvsContentHintBlobReadWriteToken = FilterProjectEnvsContentHintBlobReadWriteToken{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintBlobReadWriteToken, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintBlobReadWriteToken = &filterProjectEnvsContentHintBlobReadWriteToken
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintBlobReadWriteToken
		return nil
	}

	var filterProjectEnvsContentHintPostgresURL FilterProjectEnvsContentHintPostgresURL = FilterProjectEnvsContentHintPostgresURL{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresURL, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresURL = &filterProjectEnvsContentHintPostgresURL
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURL
		return nil
	}

	var filterProjectEnvsContentHintRedisRestAPIURL FilterProjectEnvsContentHintRedisRestAPIURL = FilterProjectEnvsContentHintRedisRestAPIURL{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintRedisRestAPIURL, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintRedisRestAPIURL = &filterProjectEnvsContentHintRedisRestAPIURL
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisRestAPIURL
		return nil
	}

	var filterProjectEnvsContentHintPostgresUser FilterProjectEnvsContentHintPostgresUser = FilterProjectEnvsContentHintPostgresUser{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresUser, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresUser = &filterProjectEnvsContentHintPostgresUser
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresUser
		return nil
	}

	var filterProjectEnvsContentHintRedisURL FilterProjectEnvsContentHintRedisURL = FilterProjectEnvsContentHintRedisURL{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintRedisURL, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintRedisURL = &filterProjectEnvsContentHintRedisURL
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintRedisURL
		return nil
	}

	var filterProjectEnvsContentHintPostgresHost FilterProjectEnvsContentHintPostgresHost = FilterProjectEnvsContentHintPostgresHost{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresHost, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresHost = &filterProjectEnvsContentHintPostgresHost
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresHost
		return nil
	}

	var filterProjectEnvsContentHintPostgresPrismaURL FilterProjectEnvsContentHintPostgresPrismaURL = FilterProjectEnvsContentHintPostgresPrismaURL{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresPrismaURL, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresPrismaURL = &filterProjectEnvsContentHintPostgresPrismaURL
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresPrismaURL
		return nil
	}

	var filterProjectEnvsContentHintPostgresDatabase FilterProjectEnvsContentHintPostgresDatabase = FilterProjectEnvsContentHintPostgresDatabase{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresDatabase, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresDatabase = &filterProjectEnvsContentHintPostgresDatabase
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresDatabase
		return nil
	}

	var filterProjectEnvsContentHintPostgresURLNoSsl FilterProjectEnvsContentHintPostgresURLNoSsl = FilterProjectEnvsContentHintPostgresURLNoSsl{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintPostgresURLNoSsl, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintPostgresURLNoSsl = &filterProjectEnvsContentHintPostgresURLNoSsl
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintPostgresURLNoSsl
		return nil
	}

	var filterProjectEnvsContentHintFlagsConnectionString FilterProjectEnvsContentHintFlagsConnectionString = FilterProjectEnvsContentHintFlagsConnectionString{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintFlagsConnectionString, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintFlagsConnectionString = &filterProjectEnvsContentHintFlagsConnectionString
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintFlagsConnectionString
		return nil
	}

	var filterProjectEnvsContentHintIntegrationStoreSecret FilterProjectEnvsContentHintIntegrationStoreSecret = FilterProjectEnvsContentHintIntegrationStoreSecret{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsContentHintIntegrationStoreSecret, "", true, true); err == nil {
		u.FilterProjectEnvsContentHintIntegrationStoreSecret = &filterProjectEnvsContentHintIntegrationStoreSecret
		u.Type = FilterProjectEnvsContentHintUnionTypeFilterProjectEnvsContentHintIntegrationStoreSecret
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsContentHintUnion", string(data))
}

func (u FilterProjectEnvsContentHintUnion) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsContentHintRedisURL != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintRedisURL, "", true)
	}

	if u.FilterProjectEnvsContentHintRedisRestAPIURL != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintRedisRestAPIURL, "", true)
	}

	if u.FilterProjectEnvsContentHintRedisRestAPIToken != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintRedisRestAPIToken, "", true)
	}

	if u.FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintRedisRestAPIReadOnlyToken, "", true)
	}

	if u.FilterProjectEnvsContentHintBlobReadWriteToken != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintBlobReadWriteToken, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresURL != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresURL, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresURLNonPooling != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresURLNonPooling, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresPrismaURL != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresPrismaURL, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresUser != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresUser, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresHost != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresHost, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresPassword != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresPassword, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresDatabase != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresDatabase, "", true)
	}

	if u.FilterProjectEnvsContentHintPostgresURLNoSsl != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintPostgresURLNoSsl, "", true)
	}

	if u.FilterProjectEnvsContentHintIntegrationStoreSecret != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintIntegrationStoreSecret, "", true)
	}

	if u.FilterProjectEnvsContentHintFlagsConnectionString != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsContentHintFlagsConnectionString, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsContentHintUnion: all fields are null")
}

type FilterProjectEnvsTypeFlagsSecret string

const (
	FilterProjectEnvsTypeFlagsSecretFlagsSecret FilterProjectEnvsTypeFlagsSecret = "flags-secret"
)

func (e FilterProjectEnvsTypeFlagsSecret) ToPointer() *FilterProjectEnvsTypeFlagsSecret {
	return &e
}
func (e *FilterProjectEnvsTypeFlagsSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = FilterProjectEnvsTypeFlagsSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for FilterProjectEnvsTypeFlagsSecret: %v", v)
	}
}

// FilterProjectEnvsInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type FilterProjectEnvsInternalContentHint struct {
	Type FilterProjectEnvsTypeFlagsSecret `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *FilterProjectEnvsInternalContentHint) GetType() FilterProjectEnvsTypeFlagsSecret {
	if o == nil {
		return FilterProjectEnvsTypeFlagsSecret("")
	}
	return o.Type
}

func (o *FilterProjectEnvsInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type FilterProjectEnvsResponseBody1 struct {
	Target *FilterProjectEnvsTargetUnion `json:"target,omitempty"`
	Type   *FilterProjectEnvsType        `json:"type,omitempty"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                            `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                              `json:"decrypted,omitempty"`
	Value             *string                            `json:"value,omitempty"`
	VsmValue          *string                            `json:"vsmValue,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Key               *string                            `json:"key,omitempty"`
	ConfigurationID   *string                            `json:"configurationId,omitempty"`
	CreatedAt         *float64                           `json:"createdAt,omitempty"`
	UpdatedAt         *float64                           `json:"updatedAt,omitempty"`
	CreatedBy         *string                            `json:"createdBy,omitempty"`
	UpdatedBy         *string                            `json:"updatedBy,omitempty"`
	GitBranch         *string                            `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                            `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *FilterProjectEnvsContentHintUnion `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *FilterProjectEnvsInternalContentHint `json:"internalContentHint,omitempty"`
	Comment              *string                               `json:"comment,omitempty"`
	CustomEnvironmentIds []string                              `json:"customEnvironmentIds,omitempty"`
	System               *bool                                 `json:"system,omitempty"`
}

func (o *FilterProjectEnvsResponseBody1) GetTarget() *FilterProjectEnvsTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *FilterProjectEnvsResponseBody1) GetType() *FilterProjectEnvsType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *FilterProjectEnvsResponseBody1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *FilterProjectEnvsResponseBody1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *FilterProjectEnvsResponseBody1) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FilterProjectEnvsResponseBody1) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *FilterProjectEnvsResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FilterProjectEnvsResponseBody1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *FilterProjectEnvsResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *FilterProjectEnvsResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *FilterProjectEnvsResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *FilterProjectEnvsResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *FilterProjectEnvsResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *FilterProjectEnvsResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *FilterProjectEnvsResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *FilterProjectEnvsResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *FilterProjectEnvsResponseBody1) GetContentHint() *FilterProjectEnvsContentHintUnion {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *FilterProjectEnvsResponseBody1) GetInternalContentHint() *FilterProjectEnvsInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *FilterProjectEnvsResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *FilterProjectEnvsResponseBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

func (o *FilterProjectEnvsResponseBody1) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

type FilterProjectEnvsResponseBodyType string

const (
	FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody1 FilterProjectEnvsResponseBodyType = "filterProjectEnvs_ResponseBody_1"
	FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody2 FilterProjectEnvsResponseBodyType = "filterProjectEnvs_ResponseBody_2"
	FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody3 FilterProjectEnvsResponseBodyType = "filterProjectEnvs_ResponseBody_3"
)

// FilterProjectEnvsResponseBody - The list of environment variables for the given project
type FilterProjectEnvsResponseBody struct {
	FilterProjectEnvsResponseBody1 *FilterProjectEnvsResponseBody1 `queryParam:"inline"`
	FilterProjectEnvsResponseBody2 *FilterProjectEnvsResponseBody2 `queryParam:"inline"`
	FilterProjectEnvsResponseBody3 *FilterProjectEnvsResponseBody3 `queryParam:"inline"`

	Type FilterProjectEnvsResponseBodyType
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvsResponseBody1(filterProjectEnvsResponseBody1 FilterProjectEnvsResponseBody1) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody1

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvsResponseBody1: &filterProjectEnvsResponseBody1,
		Type:                           typ,
	}
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvsResponseBody2(filterProjectEnvsResponseBody2 FilterProjectEnvsResponseBody2) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody2

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvsResponseBody2: &filterProjectEnvsResponseBody2,
		Type:                           typ,
	}
}

func CreateFilterProjectEnvsResponseBodyFilterProjectEnvsResponseBody3(filterProjectEnvsResponseBody3 FilterProjectEnvsResponseBody3) FilterProjectEnvsResponseBody {
	typ := FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody3

	return FilterProjectEnvsResponseBody{
		FilterProjectEnvsResponseBody3: &filterProjectEnvsResponseBody3,
		Type:                           typ,
	}
}

func (u *FilterProjectEnvsResponseBody) UnmarshalJSON(data []byte) error {

	var filterProjectEnvsResponseBody3 FilterProjectEnvsResponseBody3 = FilterProjectEnvsResponseBody3{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsResponseBody3, "", true, true); err == nil {
		u.FilterProjectEnvsResponseBody3 = &filterProjectEnvsResponseBody3
		u.Type = FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody3
		return nil
	}

	var filterProjectEnvsResponseBody2 FilterProjectEnvsResponseBody2 = FilterProjectEnvsResponseBody2{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsResponseBody2, "", true, true); err == nil {
		u.FilterProjectEnvsResponseBody2 = &filterProjectEnvsResponseBody2
		u.Type = FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody2
		return nil
	}

	var filterProjectEnvsResponseBody1 FilterProjectEnvsResponseBody1 = FilterProjectEnvsResponseBody1{}
	if err := utils.UnmarshalJSON(data, &filterProjectEnvsResponseBody1, "", true, true); err == nil {
		u.FilterProjectEnvsResponseBody1 = &filterProjectEnvsResponseBody1
		u.Type = FilterProjectEnvsResponseBodyTypeFilterProjectEnvsResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for FilterProjectEnvsResponseBody", string(data))
}

func (u FilterProjectEnvsResponseBody) MarshalJSON() ([]byte, error) {
	if u.FilterProjectEnvsResponseBody1 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsResponseBody1, "", true)
	}

	if u.FilterProjectEnvsResponseBody2 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsResponseBody2, "", true)
	}

	if u.FilterProjectEnvsResponseBody3 != nil {
		return utils.MarshalJSON(u.FilterProjectEnvsResponseBody3, "", true)
	}

	return nil, errors.New("could not marshal union type FilterProjectEnvsResponseBody: all fields are null")
}

type FilterProjectEnvsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of environment variables for the given project
	OneOf *FilterProjectEnvsResponseBody
}

func (o *FilterProjectEnvsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *FilterProjectEnvsResponse) GetOneOf() *FilterProjectEnvsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
