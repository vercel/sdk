// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetAliasRequest struct {
	// Get the alias only if it was created after the provided timestamp
	From *float64 `queryParam:"style=form,explode=true,name=from"`
	// The alias or alias ID to be retrieved
	IDOrAlias string `pathParam:"style=simple,explode=false,name=idOrAlias"`
	// Get the alias only if it is assigned to the provided project ID
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// Get the alias only if it was created after this JavaScript timestamp
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Get the alias only if it was created before this JavaScript timestamp
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetAliasRequest) GetFrom() *float64 {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetAliasRequest) GetIDOrAlias() string {
	if o == nil {
		return ""
	}
	return o.IDOrAlias
}

func (o *GetAliasRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetAliasRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetAliasRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetAliasRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetAliasRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetAliasCreator - Information of the user who created the alias
type GetAliasCreator struct {
	// ID of the user who created the alias
	UID string `json:"uid"`
	// Email of the user who created the alias
	Email string `json:"email"`
	// Username of the user who created the alias
	Username string `json:"username"`
}

func (o *GetAliasCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetAliasCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetAliasCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

// Deployment - A map with the deployment ID, URL and metadata
type Deployment struct {
	// The deployment unique identifier
	ID string `json:"id"`
	// The deployment unique URL
	URL string `json:"url"`
	// The deployment metadata
	Meta *string `json:"meta,omitempty"`
}

func (o *Deployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Deployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Deployment) GetMeta() *string {
	if o == nil {
		return nil
	}
	return o.Meta
}

type GetAliasProtectionBypassAliasesResponse200Scope string

const (
	GetAliasProtectionBypassAliasesResponse200ScopeEmailInvite GetAliasProtectionBypassAliasesResponse200Scope = "email_invite"
)

func (e GetAliasProtectionBypassAliasesResponse200Scope) ToPointer() *GetAliasProtectionBypassAliasesResponse200Scope {
	return &e
}
func (e *GetAliasProtectionBypassAliasesResponse200Scope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "email_invite":
		*e = GetAliasProtectionBypassAliasesResponse200Scope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAliasProtectionBypassAliasesResponse200Scope: %v", v)
	}
}

// ProtectionBypass4 - The protection bypass for the alias
type ProtectionBypass4 struct {
	CreatedAt     float64                                         `json:"createdAt"`
	LastUpdatedAt float64                                         `json:"lastUpdatedAt"`
	LastUpdatedBy string                                          `json:"lastUpdatedBy"`
	Scope         GetAliasProtectionBypassAliasesResponse200Scope `json:"scope"`
}

func (o *ProtectionBypass4) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ProtectionBypass4) GetLastUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.LastUpdatedAt
}

func (o *ProtectionBypass4) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *ProtectionBypass4) GetScope() GetAliasProtectionBypassAliasesResponse200Scope {
	if o == nil {
		return GetAliasProtectionBypassAliasesResponse200Scope("")
	}
	return o.Scope
}

type GetAliasProtectionBypassAliasesResponseScope string

const (
	GetAliasProtectionBypassAliasesResponseScopeAliasProtectionOverride GetAliasProtectionBypassAliasesResponseScope = "alias-protection-override"
)

func (e GetAliasProtectionBypassAliasesResponseScope) ToPointer() *GetAliasProtectionBypassAliasesResponseScope {
	return &e
}
func (e *GetAliasProtectionBypassAliasesResponseScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alias-protection-override":
		*e = GetAliasProtectionBypassAliasesResponseScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAliasProtectionBypassAliasesResponseScope: %v", v)
	}
}

// ProtectionBypass3 - The protection bypass for the alias
type ProtectionBypass3 struct {
	CreatedAt float64                                      `json:"createdAt"`
	CreatedBy string                                       `json:"createdBy"`
	Scope     GetAliasProtectionBypassAliasesResponseScope `json:"scope"`
}

func (o *ProtectionBypass3) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *ProtectionBypass3) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *ProtectionBypass3) GetScope() GetAliasProtectionBypassAliasesResponseScope {
	if o == nil {
		return GetAliasProtectionBypassAliasesResponseScope("")
	}
	return o.Scope
}

type ProtectionBypassAccess string

const (
	ProtectionBypassAccessRequested ProtectionBypassAccess = "requested"
	ProtectionBypassAccessGranted   ProtectionBypassAccess = "granted"
)

func (e ProtectionBypassAccess) ToPointer() *ProtectionBypassAccess {
	return &e
}
func (e *ProtectionBypassAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "requested":
		fallthrough
	case "granted":
		*e = ProtectionBypassAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionBypassAccess: %v", v)
	}
}

type GetAliasProtectionBypassAliasesScope string

const (
	GetAliasProtectionBypassAliasesScopeUser GetAliasProtectionBypassAliasesScope = "user"
)

func (e GetAliasProtectionBypassAliasesScope) ToPointer() *GetAliasProtectionBypassAliasesScope {
	return &e
}
func (e *GetAliasProtectionBypassAliasesScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = GetAliasProtectionBypassAliasesScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAliasProtectionBypassAliasesScope: %v", v)
	}
}

// GetAliasProtectionBypass2 - The protection bypass for the alias
type GetAliasProtectionBypass2 struct {
	CreatedAt     float64                              `json:"createdAt"`
	LastUpdatedAt float64                              `json:"lastUpdatedAt"`
	LastUpdatedBy string                               `json:"lastUpdatedBy"`
	Access        ProtectionBypassAccess               `json:"access"`
	Scope         GetAliasProtectionBypassAliasesScope `json:"scope"`
}

func (o *GetAliasProtectionBypass2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetAliasProtectionBypass2) GetLastUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.LastUpdatedAt
}

func (o *GetAliasProtectionBypass2) GetLastUpdatedBy() string {
	if o == nil {
		return ""
	}
	return o.LastUpdatedBy
}

func (o *GetAliasProtectionBypass2) GetAccess() ProtectionBypassAccess {
	if o == nil {
		return ProtectionBypassAccess("")
	}
	return o.Access
}

func (o *GetAliasProtectionBypass2) GetScope() GetAliasProtectionBypassAliasesScope {
	if o == nil {
		return GetAliasProtectionBypassAliasesScope("")
	}
	return o.Scope
}

type GetAliasProtectionBypassScope string

const (
	GetAliasProtectionBypassScopeShareableLink GetAliasProtectionBypassScope = "shareable-link"
)

func (e GetAliasProtectionBypassScope) ToPointer() *GetAliasProtectionBypassScope {
	return &e
}
func (e *GetAliasProtectionBypassScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "shareable-link":
		*e = GetAliasProtectionBypassScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetAliasProtectionBypassScope: %v", v)
	}
}

// GetAliasProtectionBypass1 - The protection bypass for the alias
type GetAliasProtectionBypass1 struct {
	CreatedAt float64                       `json:"createdAt"`
	CreatedBy string                        `json:"createdBy"`
	Scope     GetAliasProtectionBypassScope `json:"scope"`
}

func (o *GetAliasProtectionBypass1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetAliasProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetAliasProtectionBypass1) GetScope() GetAliasProtectionBypassScope {
	if o == nil {
		return GetAliasProtectionBypassScope("")
	}
	return o.Scope
}

type GetAliasProtectionBypassType string

const (
	GetAliasProtectionBypassTypeGetAliasProtectionBypass1 GetAliasProtectionBypassType = "getAlias_protectionBypass_1"
	GetAliasProtectionBypassTypeGetAliasProtectionBypass2 GetAliasProtectionBypassType = "getAlias_protectionBypass_2"
	GetAliasProtectionBypassTypeProtectionBypass3         GetAliasProtectionBypassType = "protectionBypass_3"
	GetAliasProtectionBypassTypeProtectionBypass4         GetAliasProtectionBypassType = "protectionBypass_4"
)

type GetAliasProtectionBypass struct {
	GetAliasProtectionBypass1 *GetAliasProtectionBypass1
	GetAliasProtectionBypass2 *GetAliasProtectionBypass2
	ProtectionBypass3         *ProtectionBypass3
	ProtectionBypass4         *ProtectionBypass4

	Type GetAliasProtectionBypassType
}

func CreateGetAliasProtectionBypassGetAliasProtectionBypass1(getAliasProtectionBypass1 GetAliasProtectionBypass1) GetAliasProtectionBypass {
	typ := GetAliasProtectionBypassTypeGetAliasProtectionBypass1

	return GetAliasProtectionBypass{
		GetAliasProtectionBypass1: &getAliasProtectionBypass1,
		Type:                      typ,
	}
}

func CreateGetAliasProtectionBypassGetAliasProtectionBypass2(getAliasProtectionBypass2 GetAliasProtectionBypass2) GetAliasProtectionBypass {
	typ := GetAliasProtectionBypassTypeGetAliasProtectionBypass2

	return GetAliasProtectionBypass{
		GetAliasProtectionBypass2: &getAliasProtectionBypass2,
		Type:                      typ,
	}
}

func CreateGetAliasProtectionBypassProtectionBypass3(protectionBypass3 ProtectionBypass3) GetAliasProtectionBypass {
	typ := GetAliasProtectionBypassTypeProtectionBypass3

	return GetAliasProtectionBypass{
		ProtectionBypass3: &protectionBypass3,
		Type:              typ,
	}
}

func CreateGetAliasProtectionBypassProtectionBypass4(protectionBypass4 ProtectionBypass4) GetAliasProtectionBypass {
	typ := GetAliasProtectionBypassTypeProtectionBypass4

	return GetAliasProtectionBypass{
		ProtectionBypass4: &protectionBypass4,
		Type:              typ,
	}
}

func (u *GetAliasProtectionBypass) UnmarshalJSON(data []byte) error {

	var getAliasProtectionBypass1 GetAliasProtectionBypass1 = GetAliasProtectionBypass1{}
	if err := utils.UnmarshalJSON(data, &getAliasProtectionBypass1, "", true, true); err == nil {
		u.GetAliasProtectionBypass1 = &getAliasProtectionBypass1
		u.Type = GetAliasProtectionBypassTypeGetAliasProtectionBypass1
		return nil
	}

	var protectionBypass3 ProtectionBypass3 = ProtectionBypass3{}
	if err := utils.UnmarshalJSON(data, &protectionBypass3, "", true, true); err == nil {
		u.ProtectionBypass3 = &protectionBypass3
		u.Type = GetAliasProtectionBypassTypeProtectionBypass3
		return nil
	}

	var protectionBypass4 ProtectionBypass4 = ProtectionBypass4{}
	if err := utils.UnmarshalJSON(data, &protectionBypass4, "", true, true); err == nil {
		u.ProtectionBypass4 = &protectionBypass4
		u.Type = GetAliasProtectionBypassTypeProtectionBypass4
		return nil
	}

	var getAliasProtectionBypass2 GetAliasProtectionBypass2 = GetAliasProtectionBypass2{}
	if err := utils.UnmarshalJSON(data, &getAliasProtectionBypass2, "", true, true); err == nil {
		u.GetAliasProtectionBypass2 = &getAliasProtectionBypass2
		u.Type = GetAliasProtectionBypassTypeGetAliasProtectionBypass2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetAliasProtectionBypass", string(data))
}

func (u GetAliasProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.GetAliasProtectionBypass1 != nil {
		return utils.MarshalJSON(u.GetAliasProtectionBypass1, "", true)
	}

	if u.GetAliasProtectionBypass2 != nil {
		return utils.MarshalJSON(u.GetAliasProtectionBypass2, "", true)
	}

	if u.ProtectionBypass3 != nil {
		return utils.MarshalJSON(u.ProtectionBypass3, "", true)
	}

	if u.ProtectionBypass4 != nil {
		return utils.MarshalJSON(u.ProtectionBypass4, "", true)
	}

	return nil, errors.New("could not marshal union type GetAliasProtectionBypass: all fields are null")
}

// GetAliasResponseBody - The alias information
type GetAliasResponseBody struct {
	// The alias name, it could be a `.vercel.app` subdomain or a custom domain
	Alias string `json:"alias"`
	// The date when the alias was created
	Created time.Time `json:"created"`
	// The date when the alias was created in milliseconds since the UNIX epoch
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Information of the user who created the alias
	Creator *GetAliasCreator `json:"creator,omitempty"`
	// The date when the alias was deleted in milliseconds since the UNIX epoch
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A map with the deployment ID, URL and metadata
	Deployment *Deployment `json:"deployment,omitempty"`
	// The deployment ID
	DeploymentID *string `json:"deploymentId"`
	// The unique identifier of the project
	ProjectID *string `json:"projectId"`
	// Target destination domain for redirect when the alias is a redirect
	Redirect *string `json:"redirect,omitempty"`
	// Status code to be used on redirect
	RedirectStatusCode *float64 `json:"redirectStatusCode,omitempty"`
	// The unique identifier of the alias
	UID string `json:"uid"`
	// The date when the alias was updated in milliseconds since the UNIX epoch
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The protection bypass for the alias
	ProtectionBypass map[string]GetAliasProtectionBypass `json:"protectionBypass,omitempty"`
}

func (g GetAliasResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetAliasResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetAliasResponseBody) GetAlias() string {
	if o == nil {
		return ""
	}
	return o.Alias
}

func (o *GetAliasResponseBody) GetCreated() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Created
}

func (o *GetAliasResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetAliasResponseBody) GetCreator() *GetAliasCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetAliasResponseBody) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetAliasResponseBody) GetDeployment() *Deployment {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *GetAliasResponseBody) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *GetAliasResponseBody) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetAliasResponseBody) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetAliasResponseBody) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetAliasResponseBody) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetAliasResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetAliasResponseBody) GetProtectionBypass() map[string]GetAliasProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

type GetAliasResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The alias information
	Object *GetAliasResponseBody
}

func (o *GetAliasResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetAliasResponse) GetObject() *GetAliasResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
