// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetBillingPlansRequest struct {
	IntegrationIDOrSlug string  `pathParam:"style=simple,explode=false,name=integrationIdOrSlug"`
	ProductIDOrSlug     string  `pathParam:"style=simple,explode=false,name=productIdOrSlug"`
	Metadata            *string `queryParam:"style=form,explode=true,name=metadata"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetBillingPlansRequest) GetIntegrationIDOrSlug() string {
	if o == nil {
		return ""
	}
	return o.IntegrationIDOrSlug
}

func (o *GetBillingPlansRequest) GetProductIDOrSlug() string {
	if o == nil {
		return ""
	}
	return o.ProductIDOrSlug
}

func (o *GetBillingPlansRequest) GetMetadata() *string {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *GetBillingPlansRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetBillingPlansRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetBillingPlansType string

const (
	GetBillingPlansTypePrepayment   GetBillingPlansType = "prepayment"
	GetBillingPlansTypeSubscription GetBillingPlansType = "subscription"
)

func (e GetBillingPlansType) ToPointer() *GetBillingPlansType {
	return &e
}
func (e *GetBillingPlansType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prepayment":
		fallthrough
	case "subscription":
		*e = GetBillingPlansType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBillingPlansType: %v", v)
	}
}

type GetBillingPlansScope string

const (
	GetBillingPlansScopeInstallation GetBillingPlansScope = "installation"
	GetBillingPlansScopeResource     GetBillingPlansScope = "resource"
)

func (e GetBillingPlansScope) ToPointer() *GetBillingPlansScope {
	return &e
}
func (e *GetBillingPlansScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "installation":
		fallthrough
	case "resource":
		*e = GetBillingPlansScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBillingPlansScope: %v", v)
	}
}

type GetBillingPlansDetail struct {
	Label string  `json:"label"`
	Value *string `json:"value,omitempty"`
}

func (o *GetBillingPlansDetail) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetBillingPlansDetail) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetBillingPlansHighlightedDetail struct {
	Label string  `json:"label"`
	Value *string `json:"value,omitempty"`
}

func (o *GetBillingPlansHighlightedDetail) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *GetBillingPlansHighlightedDetail) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetBillingPlansQuote struct {
	Line   string `json:"line"`
	Amount string `json:"amount"`
}

func (o *GetBillingPlansQuote) GetLine() string {
	if o == nil {
		return ""
	}
	return o.Line
}

func (o *GetBillingPlansQuote) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

type GetBillingPlansPlan struct {
	Type                               GetBillingPlansType                `json:"type"`
	Description                        string                             `json:"description"`
	ID                                 string                             `json:"id"`
	Name                               string                             `json:"name"`
	Scope                              GetBillingPlansScope               `json:"scope"`
	PaymentMethodRequired              bool                               `json:"paymentMethodRequired"`
	PreauthorizationAmount             *float64                           `json:"preauthorizationAmount,omitempty"`
	InitialCharge                      *string                            `json:"initialCharge,omitempty"`
	MinimumAmount                      *string                            `json:"minimumAmount,omitempty"`
	MaximumAmount                      *string                            `json:"maximumAmount,omitempty"`
	MaximumAmountAutoPurchasePerPeriod *string                            `json:"maximumAmountAutoPurchasePerPeriod,omitempty"`
	Cost                               *string                            `json:"cost,omitempty"`
	Details                            []GetBillingPlansDetail            `json:"details,omitempty"`
	HighlightedDetails                 []GetBillingPlansHighlightedDetail `json:"highlightedDetails,omitempty"`
	Quote                              []GetBillingPlansQuote             `json:"quote,omitempty"`
	EffectiveDate                      *string                            `json:"effectiveDate,omitempty"`
	Disabled                           *bool                              `json:"disabled,omitempty"`
}

func (o *GetBillingPlansPlan) GetType() GetBillingPlansType {
	if o == nil {
		return GetBillingPlansType("")
	}
	return o.Type
}

func (o *GetBillingPlansPlan) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetBillingPlansPlan) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetBillingPlansPlan) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetBillingPlansPlan) GetScope() GetBillingPlansScope {
	if o == nil {
		return GetBillingPlansScope("")
	}
	return o.Scope
}

func (o *GetBillingPlansPlan) GetPaymentMethodRequired() bool {
	if o == nil {
		return false
	}
	return o.PaymentMethodRequired
}

func (o *GetBillingPlansPlan) GetPreauthorizationAmount() *float64 {
	if o == nil {
		return nil
	}
	return o.PreauthorizationAmount
}

func (o *GetBillingPlansPlan) GetInitialCharge() *string {
	if o == nil {
		return nil
	}
	return o.InitialCharge
}

func (o *GetBillingPlansPlan) GetMinimumAmount() *string {
	if o == nil {
		return nil
	}
	return o.MinimumAmount
}

func (o *GetBillingPlansPlan) GetMaximumAmount() *string {
	if o == nil {
		return nil
	}
	return o.MaximumAmount
}

func (o *GetBillingPlansPlan) GetMaximumAmountAutoPurchasePerPeriod() *string {
	if o == nil {
		return nil
	}
	return o.MaximumAmountAutoPurchasePerPeriod
}

func (o *GetBillingPlansPlan) GetCost() *string {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *GetBillingPlansPlan) GetDetails() []GetBillingPlansDetail {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *GetBillingPlansPlan) GetHighlightedDetails() []GetBillingPlansHighlightedDetail {
	if o == nil {
		return nil
	}
	return o.HighlightedDetails
}

func (o *GetBillingPlansPlan) GetQuote() []GetBillingPlansQuote {
	if o == nil {
		return nil
	}
	return o.Quote
}

func (o *GetBillingPlansPlan) GetEffectiveDate() *string {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *GetBillingPlansPlan) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

type GetBillingPlansResponseBody struct {
	Plans []GetBillingPlansPlan `json:"plans"`
}

func (o *GetBillingPlansResponseBody) GetPlans() []GetBillingPlansPlan {
	if o == nil {
		return []GetBillingPlansPlan{}
	}
	return o.Plans
}

type GetBillingPlansResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetBillingPlansResponseBody
}

func (o *GetBillingPlansResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetBillingPlansResponse) GetObject() *GetBillingPlansResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
