// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetBypassIPRequest struct {
	ProjectID string   `queryParam:"style=form,explode=true,name=projectId"`
	Limit     *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Filter by source IP
	SourceIP *string `queryParam:"style=form,explode=true,name=sourceIp"`
	// Filter by domain
	Domain *string `queryParam:"style=form,explode=true,name=domain"`
	// Filter by project scoped rules
	ProjectScope *bool `queryParam:"style=form,explode=true,name=projectScope"`
	// Used for pagination. Retrieves results after the provided id
	Offset *string `queryParam:"style=form,explode=true,name=offset"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetBypassIPRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetBypassIPRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetBypassIPRequest) GetSourceIP() *string {
	if o == nil {
		return nil
	}
	return o.SourceIP
}

func (o *GetBypassIPRequest) GetDomain() *string {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetBypassIPRequest) GetProjectScope() *bool {
	if o == nil {
		return nil
	}
	return o.ProjectScope
}

func (o *GetBypassIPRequest) GetOffset() *string {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *GetBypassIPRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetBypassIPRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetBypassIPAction string

const (
	GetBypassIPActionBlock  GetBypassIPAction = "block"
	GetBypassIPActionBypass GetBypassIPAction = "bypass"
)

func (e GetBypassIPAction) ToPointer() *GetBypassIPAction {
	return &e
}
func (e *GetBypassIPAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "block":
		fallthrough
	case "bypass":
		*e = GetBypassIPAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetBypassIPAction: %v", v)
	}
}

type GetBypassIPResult struct {
	OwnerID       string             `json:"OwnerId"`
	ID            string             `json:"Id"`
	Domain        string             `json:"Domain"`
	IP            string             `json:"Ip"`
	Action        *GetBypassIPAction `json:"Action,omitempty"`
	ProjectID     *string            `json:"ProjectId,omitempty"`
	IsProjectRule *bool              `json:"IsProjectRule,omitempty"`
	Note          *string            `json:"Note,omitempty"`
	CreatedAt     string             `json:"CreatedAt"`
	ActorID       *string            `json:"ActorId,omitempty"`
	UpdatedAt     string             `json:"UpdatedAt"`
	UpdatedAtHour string             `json:"UpdatedAtHour"`
	DeletedAt     *string            `json:"DeletedAt,omitempty"`
	ExpiresAt     *float64           `json:"ExpiresAt,omitempty"`
}

func (o *GetBypassIPResult) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetBypassIPResult) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetBypassIPResult) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetBypassIPResult) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *GetBypassIPResult) GetAction() *GetBypassIPAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *GetBypassIPResult) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetBypassIPResult) GetIsProjectRule() *bool {
	if o == nil {
		return nil
	}
	return o.IsProjectRule
}

func (o *GetBypassIPResult) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

func (o *GetBypassIPResult) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *GetBypassIPResult) GetActorID() *string {
	if o == nil {
		return nil
	}
	return o.ActorID
}

func (o *GetBypassIPResult) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *GetBypassIPResult) GetUpdatedAtHour() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAtHour
}

func (o *GetBypassIPResult) GetDeletedAt() *string {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetBypassIPResult) GetExpiresAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpiresAt
}

type GetBypassIPPagination struct {
	OwnerID string `json:"OwnerId"`
	ID      string `json:"Id"`
}

func (o *GetBypassIPPagination) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetBypassIPPagination) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type GetBypassIPResponseBody struct {
	Result     []GetBypassIPResult    `json:"result"`
	Pagination *GetBypassIPPagination `json:"pagination,omitempty"`
}

func (o *GetBypassIPResponseBody) GetResult() []GetBypassIPResult {
	if o == nil {
		return []GetBypassIPResult{}
	}
	return o.Result
}

func (o *GetBypassIPResponseBody) GetPagination() *GetBypassIPPagination {
	if o == nil {
		return nil
	}
	return o.Pagination
}

type GetBypassIPResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetBypassIPResponseBody
}

func (o *GetBypassIPResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetBypassIPResponse) GetObject() *GetBypassIPResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
