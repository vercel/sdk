// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetConfigurableLogDrainRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetConfigurableLogDrainRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurableLogDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurableLogDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetConfigurableLogDrainDeliveryFormat string

const (
	GetConfigurableLogDrainDeliveryFormatJSON   GetConfigurableLogDrainDeliveryFormat = "json"
	GetConfigurableLogDrainDeliveryFormatNdjson GetConfigurableLogDrainDeliveryFormat = "ndjson"
	GetConfigurableLogDrainDeliveryFormatSyslog GetConfigurableLogDrainDeliveryFormat = "syslog"
)

func (e GetConfigurableLogDrainDeliveryFormat) ToPointer() *GetConfigurableLogDrainDeliveryFormat {
	return &e
}
func (e *GetConfigurableLogDrainDeliveryFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		fallthrough
	case "syslog":
		*e = GetConfigurableLogDrainDeliveryFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainDeliveryFormat: %v", v)
	}
}

type GetConfigurableLogDrainSources string

const (
	GetConfigurableLogDrainSourcesBuild    GetConfigurableLogDrainSources = "build"
	GetConfigurableLogDrainSourcesEdge     GetConfigurableLogDrainSources = "edge"
	GetConfigurableLogDrainSourcesLambda   GetConfigurableLogDrainSources = "lambda"
	GetConfigurableLogDrainSourcesStatic   GetConfigurableLogDrainSources = "static"
	GetConfigurableLogDrainSourcesExternal GetConfigurableLogDrainSources = "external"
	GetConfigurableLogDrainSourcesFirewall GetConfigurableLogDrainSources = "firewall"
)

func (e GetConfigurableLogDrainSources) ToPointer() *GetConfigurableLogDrainSources {
	return &e
}
func (e *GetConfigurableLogDrainSources) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "build":
		fallthrough
	case "edge":
		fallthrough
	case "lambda":
		fallthrough
	case "static":
		fallthrough
	case "external":
		fallthrough
	case "firewall":
		*e = GetConfigurableLogDrainSources(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainSources: %v", v)
	}
}

type GetConfigurableLogDrainEnvironments string

const (
	GetConfigurableLogDrainEnvironmentsProduction GetConfigurableLogDrainEnvironments = "production"
	GetConfigurableLogDrainEnvironmentsPreview    GetConfigurableLogDrainEnvironments = "preview"
)

func (e GetConfigurableLogDrainEnvironments) ToPointer() *GetConfigurableLogDrainEnvironments {
	return &e
}
func (e *GetConfigurableLogDrainEnvironments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetConfigurableLogDrainEnvironments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainEnvironments: %v", v)
	}
}

type GetConfigurableLogDrainStatus string

const (
	GetConfigurableLogDrainStatusEnabled  GetConfigurableLogDrainStatus = "enabled"
	GetConfigurableLogDrainStatusDisabled GetConfigurableLogDrainStatus = "disabled"
	GetConfigurableLogDrainStatusErrored  GetConfigurableLogDrainStatus = "errored"
)

func (e GetConfigurableLogDrainStatus) ToPointer() *GetConfigurableLogDrainStatus {
	return &e
}
func (e *GetConfigurableLogDrainStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetConfigurableLogDrainStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainStatus: %v", v)
	}
}

type DisabledReason string

const (
	DisabledReasonDisabledByOwner      DisabledReason = "disabled-by-owner"
	DisabledReasonFeatureNotAvailable  DisabledReason = "feature-not-available"
	DisabledReasonAccountPlanDowngrade DisabledReason = "account-plan-downgrade"
	DisabledReasonDisabledByAdmin      DisabledReason = "disabled-by-admin"
)

func (e DisabledReason) ToPointer() *DisabledReason {
	return &e
}
func (e *DisabledReason) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = DisabledReason(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledReason: %v", v)
	}
}

type GetConfigurableLogDrainCreatedFrom string

const (
	GetConfigurableLogDrainCreatedFromSelfServed GetConfigurableLogDrainCreatedFrom = "self-served"
)

func (e GetConfigurableLogDrainCreatedFrom) ToPointer() *GetConfigurableLogDrainCreatedFrom {
	return &e
}
func (e *GetConfigurableLogDrainCreatedFrom) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetConfigurableLogDrainCreatedFrom(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurableLogDrainCreatedFrom: %v", v)
	}
}

type GetConfigurableLogDrainResponseBody struct {
	ID                  string                                `json:"id"`
	DeliveryFormat      GetConfigurableLogDrainDeliveryFormat `json:"deliveryFormat"`
	URL                 string                                `json:"url"`
	Name                string                                `json:"name"`
	ClientID            *string                               `json:"clientId,omitempty"`
	ConfigurationID     *string                               `json:"configurationId,omitempty"`
	TeamID              *string                               `json:"teamId,omitempty"`
	OwnerID             string                                `json:"ownerId"`
	ProjectIds          []string                              `json:"projectIds,omitempty"`
	CreatedAt           float64                               `json:"createdAt"`
	DeletedAt           *float64                              `json:"deletedAt"`
	UpdatedAt           float64                               `json:"updatedAt"`
	Sources             []GetConfigurableLogDrainSources      `json:"sources,omitempty"`
	Headers             map[string]string                     `json:"headers,omitempty"`
	Environments        []GetConfigurableLogDrainEnvironments `json:"environments"`
	Status              *GetConfigurableLogDrainStatus        `json:"status,omitempty"`
	DisabledAt          *float64                              `json:"disabledAt,omitempty"`
	DisabledReason      *DisabledReason                       `json:"disabledReason,omitempty"`
	DisabledBy          *string                               `json:"disabledBy,omitempty"`
	FirstErrorTimestamp *float64                              `json:"firstErrorTimestamp,omitempty"`
	SamplingRate        *float64                              `json:"samplingRate,omitempty"`
	HideIPAddresses     *bool                                 `json:"hideIpAddresses,omitempty"`
	Secret              string                                `json:"secret"`
	CreatedFrom         *GetConfigurableLogDrainCreatedFrom   `json:"createdFrom,omitempty"`
}

func (o *GetConfigurableLogDrainResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurableLogDrainResponseBody) GetDeliveryFormat() GetConfigurableLogDrainDeliveryFormat {
	if o == nil {
		return GetConfigurableLogDrainDeliveryFormat("")
	}
	return o.DeliveryFormat
}

func (o *GetConfigurableLogDrainResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetConfigurableLogDrainResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetConfigurableLogDrainResponseBody) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *GetConfigurableLogDrainResponseBody) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetConfigurableLogDrainResponseBody) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurableLogDrainResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfigurableLogDrainResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *GetConfigurableLogDrainResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetConfigurableLogDrainResponseBody) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurableLogDrainResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetConfigurableLogDrainResponseBody) GetSources() []GetConfigurableLogDrainSources {
	if o == nil {
		return nil
	}
	return o.Sources
}

func (o *GetConfigurableLogDrainResponseBody) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetConfigurableLogDrainResponseBody) GetEnvironments() []GetConfigurableLogDrainEnvironments {
	if o == nil {
		return []GetConfigurableLogDrainEnvironments{}
	}
	return o.Environments
}

func (o *GetConfigurableLogDrainResponseBody) GetStatus() *GetConfigurableLogDrainStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetConfigurableLogDrainResponseBody) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurableLogDrainResponseBody) GetDisabledReason() *DisabledReason {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurableLogDrainResponseBody) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *GetConfigurableLogDrainResponseBody) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *GetConfigurableLogDrainResponseBody) GetSamplingRate() *float64 {
	if o == nil {
		return nil
	}
	return o.SamplingRate
}

func (o *GetConfigurableLogDrainResponseBody) GetHideIPAddresses() *bool {
	if o == nil {
		return nil
	}
	return o.HideIPAddresses
}

func (o *GetConfigurableLogDrainResponseBody) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *GetConfigurableLogDrainResponseBody) GetCreatedFrom() *GetConfigurableLogDrainCreatedFrom {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

type GetConfigurableLogDrainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetConfigurableLogDrainResponseBody
}

func (o *GetConfigurableLogDrainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConfigurableLogDrainResponse) GetObject() *GetConfigurableLogDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
