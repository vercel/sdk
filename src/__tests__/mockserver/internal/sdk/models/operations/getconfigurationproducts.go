// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetConfigurationProductsRequest struct {
	// ID of the integration configuration
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetConfigurationProductsRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurationProductsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationProductsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type StorageStatus string

const (
	StorageStatusDisabled StorageStatus = "disabled"
	StorageStatusEnabled  StorageStatus = "enabled"
)

func (e StorageStatus) ToPointer() *StorageStatus {
	return &e
}
func (e *StorageStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = StorageStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StorageStatus: %v", v)
	}
}

type Repl struct {
	Enabled              bool    `json:"enabled"`
	SupportsReadOnlyMode bool    `json:"supportsReadOnlyMode"`
	WelcomeMessage       *string `json:"welcomeMessage,omitempty"`
}

func (o *Repl) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *Repl) GetSupportsReadOnlyMode() bool {
	if o == nil {
		return false
	}
	return o.SupportsReadOnlyMode
}

func (o *Repl) GetWelcomeMessage() *string {
	if o == nil {
		return nil
	}
	return o.WelcomeMessage
}

type Storage struct {
	Status StorageStatus `json:"status"`
	Repl   *Repl         `json:"repl,omitempty"`
}

func (o *Storage) GetStatus() StorageStatus {
	if o == nil {
		return StorageStatus("")
	}
	return o.Status
}

func (o *Storage) GetRepl() *Repl {
	if o == nil {
		return nil
	}
	return o.Repl
}

type ExperimentationStatus string

const (
	ExperimentationStatusDisabled ExperimentationStatus = "disabled"
	ExperimentationStatusEnabled  ExperimentationStatus = "enabled"
)

func (e ExperimentationStatus) ToPointer() *ExperimentationStatus {
	return &e
}
func (e *ExperimentationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = ExperimentationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ExperimentationStatus: %v", v)
	}
}

type GetConfigurationProductsExperimentation struct {
	Status                   ExperimentationStatus `json:"status"`
	EdgeConfigSyncingSupport *bool                 `json:"edgeConfigSyncingSupport,omitempty"`
}

func (o *GetConfigurationProductsExperimentation) GetStatus() ExperimentationStatus {
	if o == nil {
		return ExperimentationStatus("")
	}
	return o.Status
}

func (o *GetConfigurationProductsExperimentation) GetEdgeConfigSyncingSupport() *bool {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSyncingSupport
}

type AiStatus string

const (
	AiStatusDisabled AiStatus = "disabled"
	AiStatusEnabled  AiStatus = "enabled"
)

func (e AiStatus) ToPointer() *AiStatus {
	return &e
}
func (e *AiStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = AiStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AiStatus: %v", v)
	}
}

type Ai struct {
	Status AiStatus `json:"status"`
}

func (o *Ai) GetStatus() AiStatus {
	if o == nil {
		return AiStatus("")
	}
	return o.Status
}

type AuthenticationStatus string

const (
	AuthenticationStatusDisabled AuthenticationStatus = "disabled"
	AuthenticationStatusEnabled  AuthenticationStatus = "enabled"
)

func (e AuthenticationStatus) ToPointer() *AuthenticationStatus {
	return &e
}
func (e *AuthenticationStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = AuthenticationStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for AuthenticationStatus: %v", v)
	}
}

type Authentication struct {
	Status AuthenticationStatus `json:"status"`
}

func (o *Authentication) GetStatus() AuthenticationStatus {
	if o == nil {
		return AuthenticationStatus("")
	}
	return o.Status
}

type ObservabilityStatus string

const (
	ObservabilityStatusDisabled ObservabilityStatus = "disabled"
	ObservabilityStatusEnabled  ObservabilityStatus = "enabled"
)

func (e ObservabilityStatus) ToPointer() *ObservabilityStatus {
	return &e
}
func (e *ObservabilityStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = ObservabilityStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ObservabilityStatus: %v", v)
	}
}

type Observability struct {
	Status ObservabilityStatus `json:"status"`
}

func (o *Observability) GetStatus() ObservabilityStatus {
	if o == nil {
		return ObservabilityStatus("")
	}
	return o.Status
}

type VideoStatus string

const (
	VideoStatusDisabled VideoStatus = "disabled"
	VideoStatusEnabled  VideoStatus = "enabled"
)

func (e VideoStatus) ToPointer() *VideoStatus {
	return &e
}
func (e *VideoStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = VideoStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VideoStatus: %v", v)
	}
}

type Video struct {
	Status VideoStatus `json:"status"`
}

func (o *Video) GetStatus() VideoStatus {
	if o == nil {
		return VideoStatus("")
	}
	return o.Status
}

type WorkflowStatus string

const (
	WorkflowStatusDisabled WorkflowStatus = "disabled"
	WorkflowStatusEnabled  WorkflowStatus = "enabled"
)

func (e WorkflowStatus) ToPointer() *WorkflowStatus {
	return &e
}
func (e *WorkflowStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = WorkflowStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WorkflowStatus: %v", v)
	}
}

type Workflow struct {
	Status WorkflowStatus `json:"status"`
}

func (o *Workflow) GetStatus() WorkflowStatus {
	if o == nil {
		return WorkflowStatus("")
	}
	return o.Status
}

type GetConfigurationProductsChecksStatus string

const (
	GetConfigurationProductsChecksStatusDisabled GetConfigurationProductsChecksStatus = "disabled"
	GetConfigurationProductsChecksStatusEnabled  GetConfigurationProductsChecksStatus = "enabled"
)

func (e GetConfigurationProductsChecksStatus) ToPointer() *GetConfigurationProductsChecksStatus {
	return &e
}
func (e *GetConfigurationProductsChecksStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = GetConfigurationProductsChecksStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationProductsChecksStatus: %v", v)
	}
}

type GetConfigurationProductsChecks struct {
	Status GetConfigurationProductsChecksStatus `json:"status"`
}

func (o *GetConfigurationProductsChecks) GetStatus() GetConfigurationProductsChecksStatus {
	if o == nil {
		return GetConfigurationProductsChecksStatus("")
	}
	return o.Status
}

type LogDrainStatus string

const (
	LogDrainStatusDisabled LogDrainStatus = "disabled"
	LogDrainStatusEnabled  LogDrainStatus = "enabled"
)

func (e LogDrainStatus) ToPointer() *LogDrainStatus {
	return &e
}
func (e *LogDrainStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = LogDrainStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LogDrainStatus: %v", v)
	}
}

type GetConfigurationProductsFormat string

const (
	GetConfigurationProductsFormatJSON   GetConfigurationProductsFormat = "json"
	GetConfigurationProductsFormatNdjson GetConfigurationProductsFormat = "ndjson"
)

func (e GetConfigurationProductsFormat) ToPointer() *GetConfigurationProductsFormat {
	return &e
}
func (e *GetConfigurationProductsFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = GetConfigurationProductsFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationProductsFormat: %v", v)
	}
}

type LogDrain struct {
	Status   LogDrainStatus                 `json:"status"`
	Format   GetConfigurationProductsFormat `json:"format"`
	Endpoint string                         `json:"endpoint"`
	Headers  map[string]string              `json:"headers,omitempty"`
}

func (o *LogDrain) GetStatus() LogDrainStatus {
	if o == nil {
		return LogDrainStatus("")
	}
	return o.Status
}

func (o *LogDrain) GetFormat() GetConfigurationProductsFormat {
	if o == nil {
		return GetConfigurationProductsFormat("")
	}
	return o.Format
}

func (o *LogDrain) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *LogDrain) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

type MessagingStatus string

const (
	MessagingStatusDisabled MessagingStatus = "disabled"
	MessagingStatusEnabled  MessagingStatus = "enabled"
)

func (e MessagingStatus) ToPointer() *MessagingStatus {
	return &e
}
func (e *MessagingStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = MessagingStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MessagingStatus: %v", v)
	}
}

type Messaging struct {
	Status MessagingStatus `json:"status"`
}

func (o *Messaging) GetStatus() MessagingStatus {
	if o == nil {
		return MessagingStatus("")
	}
	return o.Status
}

type OtherStatus string

const (
	OtherStatusDisabled OtherStatus = "disabled"
	OtherStatusEnabled  OtherStatus = "enabled"
)

func (e OtherStatus) ToPointer() *OtherStatus {
	return &e
}
func (e *OtherStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		*e = OtherStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OtherStatus: %v", v)
	}
}

type Other struct {
	Status OtherStatus `json:"status"`
}

func (o *Other) GetStatus() OtherStatus {
	if o == nil {
		return OtherStatus("")
	}
	return o.Status
}

type Protocols struct {
	Storage         *Storage                                 `json:"storage,omitempty"`
	Experimentation *GetConfigurationProductsExperimentation `json:"experimentation,omitempty"`
	Ai              *Ai                                      `json:"ai,omitempty"`
	Authentication  *Authentication                          `json:"authentication,omitempty"`
	Observability   *Observability                           `json:"observability,omitempty"`
	Video           *Video                                   `json:"video,omitempty"`
	Workflow        *Workflow                                `json:"workflow,omitempty"`
	Checks          *GetConfigurationProductsChecks          `json:"checks,omitempty"`
	LogDrain        *LogDrain                                `json:"logDrain,omitempty"`
	Messaging       *Messaging                               `json:"messaging,omitempty"`
	Other           *Other                                   `json:"other,omitempty"`
}

func (o *Protocols) GetStorage() *Storage {
	if o == nil {
		return nil
	}
	return o.Storage
}

func (o *Protocols) GetExperimentation() *GetConfigurationProductsExperimentation {
	if o == nil {
		return nil
	}
	return o.Experimentation
}

func (o *Protocols) GetAi() *Ai {
	if o == nil {
		return nil
	}
	return o.Ai
}

func (o *Protocols) GetAuthentication() *Authentication {
	if o == nil {
		return nil
	}
	return o.Authentication
}

func (o *Protocols) GetObservability() *Observability {
	if o == nil {
		return nil
	}
	return o.Observability
}

func (o *Protocols) GetVideo() *Video {
	if o == nil {
		return nil
	}
	return o.Video
}

func (o *Protocols) GetWorkflow() *Workflow {
	if o == nil {
		return nil
	}
	return o.Workflow
}

func (o *Protocols) GetChecks() *GetConfigurationProductsChecks {
	if o == nil {
		return nil
	}
	return o.Checks
}

func (o *Protocols) GetLogDrain() *LogDrain {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *Protocols) GetMessaging() *Messaging {
	if o == nil {
		return nil
	}
	return o.Messaging
}

func (o *Protocols) GetOther() *Other {
	if o == nil {
		return nil
	}
	return o.Other
}

type PrimaryProtocol string

const (
	PrimaryProtocolStorage         PrimaryProtocol = "storage"
	PrimaryProtocolExperimentation PrimaryProtocol = "experimentation"
	PrimaryProtocolAi              PrimaryProtocol = "ai"
	PrimaryProtocolObservability   PrimaryProtocol = "observability"
	PrimaryProtocolVideo           PrimaryProtocol = "video"
	PrimaryProtocolAuthentication  PrimaryProtocol = "authentication"
	PrimaryProtocolWorkflow        PrimaryProtocol = "workflow"
	PrimaryProtocolChecks          PrimaryProtocol = "checks"
	PrimaryProtocolLogDrain        PrimaryProtocol = "logDrain"
	PrimaryProtocolMessaging       PrimaryProtocol = "messaging"
	PrimaryProtocolOther           PrimaryProtocol = "other"
)

func (e PrimaryProtocol) ToPointer() *PrimaryProtocol {
	return &e
}
func (e *PrimaryProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "storage":
		fallthrough
	case "experimentation":
		fallthrough
	case "ai":
		fallthrough
	case "observability":
		fallthrough
	case "video":
		fallthrough
	case "authentication":
		fallthrough
	case "workflow":
		fallthrough
	case "checks":
		fallthrough
	case "logDrain":
		fallthrough
	case "messaging":
		fallthrough
	case "other":
		*e = PrimaryProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PrimaryProtocol: %v", v)
	}
}

type GetConfigurationProductsType string

const (
	GetConfigurationProductsTypeObject GetConfigurationProductsType = "object"
)

func (e GetConfigurationProductsType) ToPointer() *GetConfigurationProductsType {
	return &e
}
func (e *GetConfigurationProductsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "object":
		*e = GetConfigurationProductsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationProductsType: %v", v)
	}
}

type ValueAtBRANDAt447943 struct {
}

type GetConfigurationProductsValue struct {
	AtBRANDAt447943 ValueAtBRANDAt447943 `json:"__@BRAND@447943"`
}

func (o *GetConfigurationProductsValue) GetAtBRANDAt447943() ValueAtBRANDAt447943 {
	if o == nil {
		return ValueAtBRANDAt447943{}
	}
	return o.AtBRANDAt447943
}

type DisabledEnum string

const (
	DisabledEnumUpdate DisabledEnum = "update"
	DisabledEnumCreate DisabledEnum = "create"
)

func (e DisabledEnum) ToPointer() *DisabledEnum {
	return &e
}
func (e *DisabledEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = DisabledEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledEnum: %v", v)
	}
}

type Disabled struct {
	Expr string `json:"expr"`
}

func (o *Disabled) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type DisabledUnionType string

const (
	DisabledUnionTypeBoolean      DisabledUnionType = "boolean"
	DisabledUnionTypeDisabled     DisabledUnionType = "disabled"
	DisabledUnionTypeDisabledEnum DisabledUnionType = "disabled_enum"
)

type DisabledUnion struct {
	Boolean      *bool         `queryParam:"inline"`
	Disabled     *Disabled     `queryParam:"inline"`
	DisabledEnum *DisabledEnum `queryParam:"inline"`

	Type DisabledUnionType
}

func CreateDisabledUnionBoolean(boolean bool) DisabledUnion {
	typ := DisabledUnionTypeBoolean

	return DisabledUnion{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateDisabledUnionDisabled(disabled Disabled) DisabledUnion {
	typ := DisabledUnionTypeDisabled

	return DisabledUnion{
		Disabled: &disabled,
		Type:     typ,
	}
}

func CreateDisabledUnionDisabledEnum(disabledEnum DisabledEnum) DisabledUnion {
	typ := DisabledUnionTypeDisabledEnum

	return DisabledUnion{
		DisabledEnum: &disabledEnum,
		Type:         typ,
	}
}

func (u *DisabledUnion) UnmarshalJSON(data []byte) error {

	var disabled Disabled = Disabled{}
	if err := utils.UnmarshalJSON(data, &disabled, "", true, true); err == nil {
		u.Disabled = &disabled
		u.Type = DisabledUnionTypeDisabled
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = DisabledUnionTypeBoolean
		return nil
	}

	var disabledEnum DisabledEnum = DisabledEnum("")
	if err := utils.UnmarshalJSON(data, &disabledEnum, "", true, true); err == nil {
		u.DisabledEnum = &disabledEnum
		u.Type = DisabledUnionTypeDisabledEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for DisabledUnion", string(data))
}

func (u DisabledUnion) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Disabled != nil {
		return utils.MarshalJSON(u.Disabled, "", true)
	}

	if u.DisabledEnum != nil {
		return utils.MarshalJSON(u.DisabledEnum, "", true)
	}

	return nil, errors.New("could not marshal union type DisabledUnion: all fields are null")
}

type HiddenEnum string

const (
	HiddenEnumUpdate HiddenEnum = "update"
	HiddenEnumCreate HiddenEnum = "create"
)

func (e HiddenEnum) ToPointer() *HiddenEnum {
	return &e
}
func (e *HiddenEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = HiddenEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HiddenEnum: %v", v)
	}
}

type Hidden struct {
	Expr string `json:"expr"`
}

func (o *Hidden) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type HiddenUnionType string

const (
	HiddenUnionTypeBoolean    HiddenUnionType = "boolean"
	HiddenUnionTypeHidden     HiddenUnionType = "hidden"
	HiddenUnionTypeHiddenEnum HiddenUnionType = "hidden_enum"
)

type HiddenUnion struct {
	Boolean    *bool       `queryParam:"inline"`
	Hidden     *Hidden     `queryParam:"inline"`
	HiddenEnum *HiddenEnum `queryParam:"inline"`

	Type HiddenUnionType
}

func CreateHiddenUnionBoolean(boolean bool) HiddenUnion {
	typ := HiddenUnionTypeBoolean

	return HiddenUnion{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateHiddenUnionHidden(hidden Hidden) HiddenUnion {
	typ := HiddenUnionTypeHidden

	return HiddenUnion{
		Hidden: &hidden,
		Type:   typ,
	}
}

func CreateHiddenUnionHiddenEnum(hiddenEnum HiddenEnum) HiddenUnion {
	typ := HiddenUnionTypeHiddenEnum

	return HiddenUnion{
		HiddenEnum: &hiddenEnum,
		Type:       typ,
	}
}

func (u *HiddenUnion) UnmarshalJSON(data []byte) error {

	var hidden Hidden = Hidden{}
	if err := utils.UnmarshalJSON(data, &hidden, "", true, true); err == nil {
		u.Hidden = &hidden
		u.Type = HiddenUnionTypeHidden
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = HiddenUnionTypeBoolean
		return nil
	}

	var hiddenEnum HiddenEnum = HiddenEnum("")
	if err := utils.UnmarshalJSON(data, &hiddenEnum, "", true, true); err == nil {
		u.HiddenEnum = &hiddenEnum
		u.Type = HiddenUnionTypeHiddenEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for HiddenUnion", string(data))
}

func (u HiddenUnion) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.Hidden != nil {
		return utils.MarshalJSON(u.Hidden, "", true)
	}

	if u.HiddenEnum != nil {
		return utils.MarshalJSON(u.HiddenEnum, "", true)
	}

	return nil, errors.New("could not marshal union type HiddenUnion: all fields are null")
}

type Properties struct {
	Value    GetConfigurationProductsValue `json:"value"`
	Disabled *DisabledUnion                `json:"disabled,omitempty"`
	Hidden   *HiddenUnion                  `json:"hidden,omitempty"`
}

func (o *Properties) GetValue() GetConfigurationProductsValue {
	if o == nil {
		return GetConfigurationProductsValue{}
	}
	return o.Value
}

func (o *Properties) GetDisabled() *DisabledUnion {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *Properties) GetHidden() *HiddenUnion {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type TypeArray3 string

const (
	TypeArray3Array TypeArray3 = "array"
)

func (e TypeArray3) ToPointer() *TypeArray3 {
	return &e
}
func (e *TypeArray3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "array":
		*e = TypeArray3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeArray3: %v", v)
	}
}

type UIControlMultiVercelRegion string

const (
	UIControlMultiVercelRegionMultiVercelRegion UIControlMultiVercelRegion = "multi-vercel-region"
)

func (e UIControlMultiVercelRegion) ToPointer() *UIControlMultiVercelRegion {
	return &e
}
func (e *UIControlMultiVercelRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "multi-vercel-region":
		*e = UIControlMultiVercelRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlMultiVercelRegion: %v", v)
	}
}

type TypeString5 string

const (
	TypeString5String TypeString5 = "string"
)

func (e TypeString5) ToPointer() *TypeString5 {
	return &e
}
func (e *TypeString5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TypeString5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeString5: %v", v)
	}
}

type MinLengthAtBRANDAt447943String2 struct {
}

type MinLengthString2 struct {
	AtBRANDAt447943 MinLengthAtBRANDAt447943String2 `json:"__@BRAND@447943"`
}

func (o *MinLengthString2) GetAtBRANDAt447943() MinLengthAtBRANDAt447943String2 {
	if o == nil {
		return MinLengthAtBRANDAt447943String2{}
	}
	return o.AtBRANDAt447943
}

type MaxLengthAtBRANDAt447943String2 struct {
}

type MaxLengthString2 struct {
	AtBRANDAt447943 MaxLengthAtBRANDAt447943String2 `json:"__@BRAND@447943"`
}

func (o *MaxLengthString2) GetAtBRANDAt447943() MaxLengthAtBRANDAt447943String2 {
	if o == nil {
		return MaxLengthAtBRANDAt447943String2{}
	}
	return o.AtBRANDAt447943
}

type PatternAtBRANDAt447943String2 struct {
}

type PatternString2 struct {
	AtBRANDAt447943 PatternAtBRANDAt447943String2 `json:"__@BRAND@447943"`
}

func (o *PatternString2) GetAtBRANDAt447943() PatternAtBRANDAt447943String2 {
	if o == nil {
		return PatternAtBRANDAt447943String2{}
	}
	return o.AtBRANDAt447943
}

type ItemsString2 struct {
	Type        TypeString5       `json:"type"`
	Description *string           `json:"description,omitempty"`
	MinLength   *MinLengthString2 `json:"minLength,omitempty"`
	MaxLength   *MaxLengthString2 `json:"maxLength,omitempty"`
	Pattern     *PatternString2   `json:"pattern,omitempty"`
	Default     *string           `json:"default,omitempty"`
	Enum        []string          `json:"enum,omitempty"`
}

func (o *ItemsString2) GetType() TypeString5 {
	if o == nil {
		return TypeString5("")
	}
	return o.Type
}

func (o *ItemsString2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ItemsString2) GetMinLength() *MinLengthString2 {
	if o == nil {
		return nil
	}
	return o.MinLength
}

func (o *ItemsString2) GetMaxLength() *MaxLengthString2 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *ItemsString2) GetPattern() *PatternString2 {
	if o == nil {
		return nil
	}
	return o.Pattern
}

func (o *ItemsString2) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *ItemsString2) GetEnum() []string {
	if o == nil {
		return nil
	}
	return o.Enum
}

type UIOptionValueAtBRANDAt4479432 struct {
}

type UIOptionValue2 struct {
	AtBRANDAt447943 UIOptionValueAtBRANDAt4479432 `json:"__@BRAND@447943"`
}

func (o *UIOptionValue2) GetAtBRANDAt447943() UIOptionValueAtBRANDAt4479432 {
	if o == nil {
		return UIOptionValueAtBRANDAt4479432{}
	}
	return o.AtBRANDAt447943
}

type UIOptionDisabledEnum4 string

const (
	UIOptionDisabledEnum4Update UIOptionDisabledEnum4 = "update"
	UIOptionDisabledEnum4Create UIOptionDisabledEnum4 = "create"
)

func (e UIOptionDisabledEnum4) ToPointer() *UIOptionDisabledEnum4 {
	return &e
}
func (e *UIOptionDisabledEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionDisabledEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionDisabledEnum4: %v", v)
	}
}

type UIOptionDisabled4 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionDisabled4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionDisabledUnion6Type string

const (
	UIOptionDisabledUnion6TypeBoolean               UIOptionDisabledUnion6Type = "boolean"
	UIOptionDisabledUnion6TypeUIOptionDisabled4     UIOptionDisabledUnion6Type = "ui:option_disabled_4"
	UIOptionDisabledUnion6TypeUIOptionDisabledEnum4 UIOptionDisabledUnion6Type = "ui:option_disabled_enum_4"
)

type UIOptionDisabledUnion6 struct {
	Boolean               *bool                  `queryParam:"inline"`
	UIOptionDisabled4     *UIOptionDisabled4     `queryParam:"inline"`
	UIOptionDisabledEnum4 *UIOptionDisabledEnum4 `queryParam:"inline"`

	Type UIOptionDisabledUnion6Type
}

func CreateUIOptionDisabledUnion6Boolean(boolean bool) UIOptionDisabledUnion6 {
	typ := UIOptionDisabledUnion6TypeBoolean

	return UIOptionDisabledUnion6{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionDisabledUnion6UIOptionDisabled4(uiOptionDisabled4 UIOptionDisabled4) UIOptionDisabledUnion6 {
	typ := UIOptionDisabledUnion6TypeUIOptionDisabled4

	return UIOptionDisabledUnion6{
		UIOptionDisabled4: &uiOptionDisabled4,
		Type:              typ,
	}
}

func CreateUIOptionDisabledUnion6UIOptionDisabledEnum4(uiOptionDisabledEnum4 UIOptionDisabledEnum4) UIOptionDisabledUnion6 {
	typ := UIOptionDisabledUnion6TypeUIOptionDisabledEnum4

	return UIOptionDisabledUnion6{
		UIOptionDisabledEnum4: &uiOptionDisabledEnum4,
		Type:                  typ,
	}
}

func (u *UIOptionDisabledUnion6) UnmarshalJSON(data []byte) error {

	var uiOptionDisabled4 UIOptionDisabled4 = UIOptionDisabled4{}
	if err := utils.UnmarshalJSON(data, &uiOptionDisabled4, "", true, true); err == nil {
		u.UIOptionDisabled4 = &uiOptionDisabled4
		u.Type = UIOptionDisabledUnion6TypeUIOptionDisabled4
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionDisabledUnion6TypeBoolean
		return nil
	}

	var uiOptionDisabledEnum4 UIOptionDisabledEnum4 = UIOptionDisabledEnum4("")
	if err := utils.UnmarshalJSON(data, &uiOptionDisabledEnum4, "", true, true); err == nil {
		u.UIOptionDisabledEnum4 = &uiOptionDisabledEnum4
		u.Type = UIOptionDisabledUnion6TypeUIOptionDisabledEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionDisabledUnion6", string(data))
}

func (u UIOptionDisabledUnion6) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionDisabled4 != nil {
		return utils.MarshalJSON(u.UIOptionDisabled4, "", true)
	}

	if u.UIOptionDisabledEnum4 != nil {
		return utils.MarshalJSON(u.UIOptionDisabledEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionDisabledUnion6: all fields are null")
}

type UIOptionHiddenEnum4 string

const (
	UIOptionHiddenEnum4Update UIOptionHiddenEnum4 = "update"
	UIOptionHiddenEnum4Create UIOptionHiddenEnum4 = "create"
)

func (e UIOptionHiddenEnum4) ToPointer() *UIOptionHiddenEnum4 {
	return &e
}
func (e *UIOptionHiddenEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionHiddenEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionHiddenEnum4: %v", v)
	}
}

type UIOptionHidden4 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionHidden4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionHiddenUnion6Type string

const (
	UIOptionHiddenUnion6TypeBoolean             UIOptionHiddenUnion6Type = "boolean"
	UIOptionHiddenUnion6TypeUIOptionHidden4     UIOptionHiddenUnion6Type = "ui:option_hidden_4"
	UIOptionHiddenUnion6TypeUIOptionHiddenEnum4 UIOptionHiddenUnion6Type = "ui:option_hidden_enum_4"
)

type UIOptionHiddenUnion6 struct {
	Boolean             *bool                `queryParam:"inline"`
	UIOptionHidden4     *UIOptionHidden4     `queryParam:"inline"`
	UIOptionHiddenEnum4 *UIOptionHiddenEnum4 `queryParam:"inline"`

	Type UIOptionHiddenUnion6Type
}

func CreateUIOptionHiddenUnion6Boolean(boolean bool) UIOptionHiddenUnion6 {
	typ := UIOptionHiddenUnion6TypeBoolean

	return UIOptionHiddenUnion6{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionHiddenUnion6UIOptionHidden4(uiOptionHidden4 UIOptionHidden4) UIOptionHiddenUnion6 {
	typ := UIOptionHiddenUnion6TypeUIOptionHidden4

	return UIOptionHiddenUnion6{
		UIOptionHidden4: &uiOptionHidden4,
		Type:            typ,
	}
}

func CreateUIOptionHiddenUnion6UIOptionHiddenEnum4(uiOptionHiddenEnum4 UIOptionHiddenEnum4) UIOptionHiddenUnion6 {
	typ := UIOptionHiddenUnion6TypeUIOptionHiddenEnum4

	return UIOptionHiddenUnion6{
		UIOptionHiddenEnum4: &uiOptionHiddenEnum4,
		Type:                typ,
	}
}

func (u *UIOptionHiddenUnion6) UnmarshalJSON(data []byte) error {

	var uiOptionHidden4 UIOptionHidden4 = UIOptionHidden4{}
	if err := utils.UnmarshalJSON(data, &uiOptionHidden4, "", true, true); err == nil {
		u.UIOptionHidden4 = &uiOptionHidden4
		u.Type = UIOptionHiddenUnion6TypeUIOptionHidden4
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionHiddenUnion6TypeBoolean
		return nil
	}

	var uiOptionHiddenEnum4 UIOptionHiddenEnum4 = UIOptionHiddenEnum4("")
	if err := utils.UnmarshalJSON(data, &uiOptionHiddenEnum4, "", true, true); err == nil {
		u.UIOptionHiddenEnum4 = &uiOptionHiddenEnum4
		u.Type = UIOptionHiddenUnion6TypeUIOptionHiddenEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionHiddenUnion6", string(data))
}

func (u UIOptionHiddenUnion6) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionHidden4 != nil {
		return utils.MarshalJSON(u.UIOptionHidden4, "", true)
	}

	if u.UIOptionHiddenEnum4 != nil {
		return utils.MarshalJSON(u.UIOptionHiddenEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionHiddenUnion6: all fields are null")
}

type UIOption8 struct {
	Value    UIOptionValue2          `json:"value"`
	Disabled *UIOptionDisabledUnion6 `json:"disabled,omitempty"`
	Hidden   *UIOptionHiddenUnion6   `json:"hidden,omitempty"`
}

func (o *UIOption8) GetValue() UIOptionValue2 {
	if o == nil {
		return UIOptionValue2{}
	}
	return o.Value
}

func (o *UIOption8) GetDisabled() *UIOptionDisabledUnion6 {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIOption8) GetHidden() *UIOptionHiddenUnion6 {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type UIOptionAtBRANDAt4479432 struct {
}

type UIOption7 struct {
	AtBRANDAt447943 UIOptionAtBRANDAt4479432 `json:"__@BRAND@447943"`
}

func (o *UIOption7) GetAtBRANDAt447943() UIOptionAtBRANDAt4479432 {
	if o == nil {
		return UIOptionAtBRANDAt4479432{}
	}
	return o.AtBRANDAt447943
}

type UIOptionDisabledEnum3 string

const (
	UIOptionDisabledEnum3Update UIOptionDisabledEnum3 = "update"
	UIOptionDisabledEnum3Create UIOptionDisabledEnum3 = "create"
)

func (e UIOptionDisabledEnum3) ToPointer() *UIOptionDisabledEnum3 {
	return &e
}
func (e *UIOptionDisabledEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionDisabledEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionDisabledEnum3: %v", v)
	}
}

type UIOptionDisabled3 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionDisabled3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionDisabledUnion5Type string

const (
	UIOptionDisabledUnion5TypeBoolean               UIOptionDisabledUnion5Type = "boolean"
	UIOptionDisabledUnion5TypeUIOptionDisabled3     UIOptionDisabledUnion5Type = "ui:option_disabled_3"
	UIOptionDisabledUnion5TypeUIOptionDisabledEnum3 UIOptionDisabledUnion5Type = "ui:option_disabled_enum_3"
)

type UIOptionDisabledUnion5 struct {
	Boolean               *bool                  `queryParam:"inline"`
	UIOptionDisabled3     *UIOptionDisabled3     `queryParam:"inline"`
	UIOptionDisabledEnum3 *UIOptionDisabledEnum3 `queryParam:"inline"`

	Type UIOptionDisabledUnion5Type
}

func CreateUIOptionDisabledUnion5Boolean(boolean bool) UIOptionDisabledUnion5 {
	typ := UIOptionDisabledUnion5TypeBoolean

	return UIOptionDisabledUnion5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionDisabledUnion5UIOptionDisabled3(uiOptionDisabled3 UIOptionDisabled3) UIOptionDisabledUnion5 {
	typ := UIOptionDisabledUnion5TypeUIOptionDisabled3

	return UIOptionDisabledUnion5{
		UIOptionDisabled3: &uiOptionDisabled3,
		Type:              typ,
	}
}

func CreateUIOptionDisabledUnion5UIOptionDisabledEnum3(uiOptionDisabledEnum3 UIOptionDisabledEnum3) UIOptionDisabledUnion5 {
	typ := UIOptionDisabledUnion5TypeUIOptionDisabledEnum3

	return UIOptionDisabledUnion5{
		UIOptionDisabledEnum3: &uiOptionDisabledEnum3,
		Type:                  typ,
	}
}

func (u *UIOptionDisabledUnion5) UnmarshalJSON(data []byte) error {

	var uiOptionDisabled3 UIOptionDisabled3 = UIOptionDisabled3{}
	if err := utils.UnmarshalJSON(data, &uiOptionDisabled3, "", true, true); err == nil {
		u.UIOptionDisabled3 = &uiOptionDisabled3
		u.Type = UIOptionDisabledUnion5TypeUIOptionDisabled3
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionDisabledUnion5TypeBoolean
		return nil
	}

	var uiOptionDisabledEnum3 UIOptionDisabledEnum3 = UIOptionDisabledEnum3("")
	if err := utils.UnmarshalJSON(data, &uiOptionDisabledEnum3, "", true, true); err == nil {
		u.UIOptionDisabledEnum3 = &uiOptionDisabledEnum3
		u.Type = UIOptionDisabledUnion5TypeUIOptionDisabledEnum3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionDisabledUnion5", string(data))
}

func (u UIOptionDisabledUnion5) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionDisabled3 != nil {
		return utils.MarshalJSON(u.UIOptionDisabled3, "", true)
	}

	if u.UIOptionDisabledEnum3 != nil {
		return utils.MarshalJSON(u.UIOptionDisabledEnum3, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionDisabledUnion5: all fields are null")
}

type UIOptionHiddenEnum3 string

const (
	UIOptionHiddenEnum3Update UIOptionHiddenEnum3 = "update"
	UIOptionHiddenEnum3Create UIOptionHiddenEnum3 = "create"
)

func (e UIOptionHiddenEnum3) ToPointer() *UIOptionHiddenEnum3 {
	return &e
}
func (e *UIOptionHiddenEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionHiddenEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionHiddenEnum3: %v", v)
	}
}

type UIOptionHidden3 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionHidden3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionHiddenUnion5Type string

const (
	UIOptionHiddenUnion5TypeBoolean             UIOptionHiddenUnion5Type = "boolean"
	UIOptionHiddenUnion5TypeUIOptionHidden3     UIOptionHiddenUnion5Type = "ui:option_hidden_3"
	UIOptionHiddenUnion5TypeUIOptionHiddenEnum3 UIOptionHiddenUnion5Type = "ui:option_hidden_enum_3"
)

type UIOptionHiddenUnion5 struct {
	Boolean             *bool                `queryParam:"inline"`
	UIOptionHidden3     *UIOptionHidden3     `queryParam:"inline"`
	UIOptionHiddenEnum3 *UIOptionHiddenEnum3 `queryParam:"inline"`

	Type UIOptionHiddenUnion5Type
}

func CreateUIOptionHiddenUnion5Boolean(boolean bool) UIOptionHiddenUnion5 {
	typ := UIOptionHiddenUnion5TypeBoolean

	return UIOptionHiddenUnion5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionHiddenUnion5UIOptionHidden3(uiOptionHidden3 UIOptionHidden3) UIOptionHiddenUnion5 {
	typ := UIOptionHiddenUnion5TypeUIOptionHidden3

	return UIOptionHiddenUnion5{
		UIOptionHidden3: &uiOptionHidden3,
		Type:            typ,
	}
}

func CreateUIOptionHiddenUnion5UIOptionHiddenEnum3(uiOptionHiddenEnum3 UIOptionHiddenEnum3) UIOptionHiddenUnion5 {
	typ := UIOptionHiddenUnion5TypeUIOptionHiddenEnum3

	return UIOptionHiddenUnion5{
		UIOptionHiddenEnum3: &uiOptionHiddenEnum3,
		Type:                typ,
	}
}

func (u *UIOptionHiddenUnion5) UnmarshalJSON(data []byte) error {

	var uiOptionHidden3 UIOptionHidden3 = UIOptionHidden3{}
	if err := utils.UnmarshalJSON(data, &uiOptionHidden3, "", true, true); err == nil {
		u.UIOptionHidden3 = &uiOptionHidden3
		u.Type = UIOptionHiddenUnion5TypeUIOptionHidden3
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionHiddenUnion5TypeBoolean
		return nil
	}

	var uiOptionHiddenEnum3 UIOptionHiddenEnum3 = UIOptionHiddenEnum3("")
	if err := utils.UnmarshalJSON(data, &uiOptionHiddenEnum3, "", true, true); err == nil {
		u.UIOptionHiddenEnum3 = &uiOptionHiddenEnum3
		u.Type = UIOptionHiddenUnion5TypeUIOptionHiddenEnum3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionHiddenUnion5", string(data))
}

func (u UIOptionHiddenUnion5) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionHidden3 != nil {
		return utils.MarshalJSON(u.UIOptionHidden3, "", true)
	}

	if u.UIOptionHiddenEnum3 != nil {
		return utils.MarshalJSON(u.UIOptionHiddenEnum3, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionHiddenUnion5: all fields are null")
}

type UIOption6 struct {
	Value    string                  `json:"value"`
	Label    string                  `json:"label"`
	Disabled *UIOptionDisabledUnion5 `json:"disabled,omitempty"`
	Hidden   *UIOptionHiddenUnion5   `json:"hidden,omitempty"`
}

func (o *UIOption6) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UIOption6) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UIOption6) GetDisabled() *UIOptionDisabledUnion5 {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIOption6) GetHidden() *UIOptionHiddenUnion5 {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type UIOptionUnion2Type string

const (
	UIOptionUnion2TypeUIOption6 UIOptionUnion2Type = "ui:option_6"
	UIOptionUnion2TypeUIOption7 UIOptionUnion2Type = "ui:option_7"
	UIOptionUnion2TypeUIOption8 UIOptionUnion2Type = "ui:option_8"
)

type UIOptionUnion2 struct {
	UIOption6 *UIOption6 `queryParam:"inline"`
	UIOption7 *UIOption7 `queryParam:"inline"`
	UIOption8 *UIOption8 `queryParam:"inline"`

	Type UIOptionUnion2Type
}

func CreateUIOptionUnion2UIOption6(uiOption6 UIOption6) UIOptionUnion2 {
	typ := UIOptionUnion2TypeUIOption6

	return UIOptionUnion2{
		UIOption6: &uiOption6,
		Type:      typ,
	}
}

func CreateUIOptionUnion2UIOption7(uiOption7 UIOption7) UIOptionUnion2 {
	typ := UIOptionUnion2TypeUIOption7

	return UIOptionUnion2{
		UIOption7: &uiOption7,
		Type:      typ,
	}
}

func CreateUIOptionUnion2UIOption8(uiOption8 UIOption8) UIOptionUnion2 {
	typ := UIOptionUnion2TypeUIOption8

	return UIOptionUnion2{
		UIOption8: &uiOption8,
		Type:      typ,
	}
}

func (u *UIOptionUnion2) UnmarshalJSON(data []byte) error {

	var uiOption7 UIOption7 = UIOption7{}
	if err := utils.UnmarshalJSON(data, &uiOption7, "", true, true); err == nil {
		u.UIOption7 = &uiOption7
		u.Type = UIOptionUnion2TypeUIOption7
		return nil
	}

	var uiOption8 UIOption8 = UIOption8{}
	if err := utils.UnmarshalJSON(data, &uiOption8, "", true, true); err == nil {
		u.UIOption8 = &uiOption8
		u.Type = UIOptionUnion2TypeUIOption8
		return nil
	}

	var uiOption6 UIOption6 = UIOption6{}
	if err := utils.UnmarshalJSON(data, &uiOption6, "", true, true); err == nil {
		u.UIOption6 = &uiOption6
		u.Type = UIOptionUnion2TypeUIOption6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionUnion2", string(data))
}

func (u UIOptionUnion2) MarshalJSON() ([]byte, error) {
	if u.UIOption6 != nil {
		return utils.MarshalJSON(u.UIOption6, "", true)
	}

	if u.UIOption7 != nil {
		return utils.MarshalJSON(u.UIOption7, "", true)
	}

	if u.UIOption8 != nil {
		return utils.MarshalJSON(u.UIOption8, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionUnion2: all fields are null")
}

type UIReadOnlyEnum8 string

const (
	UIReadOnlyEnum8Update UIReadOnlyEnum8 = "update"
	UIReadOnlyEnum8Create UIReadOnlyEnum8 = "create"
)

func (e UIReadOnlyEnum8) ToPointer() *UIReadOnlyEnum8 {
	return &e
}
func (e *UIReadOnlyEnum8) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum8(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum8: %v", v)
	}
}

type UIReadOnly8 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly8) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion8Type string

const (
	UIReadOnlyUnion8TypeBoolean         UIReadOnlyUnion8Type = "boolean"
	UIReadOnlyUnion8TypeUIReadOnly8     UIReadOnlyUnion8Type = "ui:read-only_8"
	UIReadOnlyUnion8TypeUIReadOnlyEnum8 UIReadOnlyUnion8Type = "ui:read-only_enum_8"
)

type UIReadOnlyUnion8 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly8     *UIReadOnly8     `queryParam:"inline"`
	UIReadOnlyEnum8 *UIReadOnlyEnum8 `queryParam:"inline"`

	Type UIReadOnlyUnion8Type
}

func CreateUIReadOnlyUnion8Boolean(boolean bool) UIReadOnlyUnion8 {
	typ := UIReadOnlyUnion8TypeBoolean

	return UIReadOnlyUnion8{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion8UIReadOnly8(uiReadOnly8 UIReadOnly8) UIReadOnlyUnion8 {
	typ := UIReadOnlyUnion8TypeUIReadOnly8

	return UIReadOnlyUnion8{
		UIReadOnly8: &uiReadOnly8,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion8UIReadOnlyEnum8(uiReadOnlyEnum8 UIReadOnlyEnum8) UIReadOnlyUnion8 {
	typ := UIReadOnlyUnion8TypeUIReadOnlyEnum8

	return UIReadOnlyUnion8{
		UIReadOnlyEnum8: &uiReadOnlyEnum8,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion8) UnmarshalJSON(data []byte) error {

	var uiReadOnly8 UIReadOnly8 = UIReadOnly8{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly8, "", true, true); err == nil {
		u.UIReadOnly8 = &uiReadOnly8
		u.Type = UIReadOnlyUnion8TypeUIReadOnly8
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion8TypeBoolean
		return nil
	}

	var uiReadOnlyEnum8 UIReadOnlyEnum8 = UIReadOnlyEnum8("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum8, "", true, true); err == nil {
		u.UIReadOnlyEnum8 = &uiReadOnlyEnum8
		u.Type = UIReadOnlyUnion8TypeUIReadOnlyEnum8
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion8", string(data))
}

func (u UIReadOnlyUnion8) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly8 != nil {
		return utils.MarshalJSON(u.UIReadOnly8, "", true)
	}

	if u.UIReadOnlyEnum8 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum8, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion8: all fields are null")
}

type UIHiddenEnum8 string

const (
	UIHiddenEnum8Update UIHiddenEnum8 = "update"
	UIHiddenEnum8Create UIHiddenEnum8 = "create"
)

func (e UIHiddenEnum8) ToPointer() *UIHiddenEnum8 {
	return &e
}
func (e *UIHiddenEnum8) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum8(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum8: %v", v)
	}
}

type UIHidden8 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden8) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion8Type string

const (
	UIHiddenUnion8TypeBoolean       UIHiddenUnion8Type = "boolean"
	UIHiddenUnion8TypeUIHidden8     UIHiddenUnion8Type = "ui:hidden_8"
	UIHiddenUnion8TypeUIHiddenEnum8 UIHiddenUnion8Type = "ui:hidden_enum_8"
)

type UIHiddenUnion8 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden8     *UIHidden8     `queryParam:"inline"`
	UIHiddenEnum8 *UIHiddenEnum8 `queryParam:"inline"`

	Type UIHiddenUnion8Type
}

func CreateUIHiddenUnion8Boolean(boolean bool) UIHiddenUnion8 {
	typ := UIHiddenUnion8TypeBoolean

	return UIHiddenUnion8{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion8UIHidden8(uiHidden8 UIHidden8) UIHiddenUnion8 {
	typ := UIHiddenUnion8TypeUIHidden8

	return UIHiddenUnion8{
		UIHidden8: &uiHidden8,
		Type:      typ,
	}
}

func CreateUIHiddenUnion8UIHiddenEnum8(uiHiddenEnum8 UIHiddenEnum8) UIHiddenUnion8 {
	typ := UIHiddenUnion8TypeUIHiddenEnum8

	return UIHiddenUnion8{
		UIHiddenEnum8: &uiHiddenEnum8,
		Type:          typ,
	}
}

func (u *UIHiddenUnion8) UnmarshalJSON(data []byte) error {

	var uiHidden8 UIHidden8 = UIHidden8{}
	if err := utils.UnmarshalJSON(data, &uiHidden8, "", true, true); err == nil {
		u.UIHidden8 = &uiHidden8
		u.Type = UIHiddenUnion8TypeUIHidden8
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion8TypeBoolean
		return nil
	}

	var uiHiddenEnum8 UIHiddenEnum8 = UIHiddenEnum8("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum8, "", true, true); err == nil {
		u.UIHiddenEnum8 = &uiHiddenEnum8
		u.Type = UIHiddenUnion8TypeUIHiddenEnum8
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion8", string(data))
}

func (u UIHiddenUnion8) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden8 != nil {
		return utils.MarshalJSON(u.UIHidden8, "", true)
	}

	if u.UIHiddenEnum8 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum8, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion8: all fields are null")
}

type UIDisabledEnum8 string

const (
	UIDisabledEnum8Update UIDisabledEnum8 = "update"
	UIDisabledEnum8Create UIDisabledEnum8 = "create"
)

func (e UIDisabledEnum8) ToPointer() *UIDisabledEnum8 {
	return &e
}
func (e *UIDisabledEnum8) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum8(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum8: %v", v)
	}
}

type UIDisabled8 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled8) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion8Type string

const (
	UIDisabledUnion8TypeBoolean         UIDisabledUnion8Type = "boolean"
	UIDisabledUnion8TypeUIDisabled8     UIDisabledUnion8Type = "ui:disabled_8"
	UIDisabledUnion8TypeUIDisabledEnum8 UIDisabledUnion8Type = "ui:disabled_enum_8"
)

type UIDisabledUnion8 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled8     *UIDisabled8     `queryParam:"inline"`
	UIDisabledEnum8 *UIDisabledEnum8 `queryParam:"inline"`

	Type UIDisabledUnion8Type
}

func CreateUIDisabledUnion8Boolean(boolean bool) UIDisabledUnion8 {
	typ := UIDisabledUnion8TypeBoolean

	return UIDisabledUnion8{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion8UIDisabled8(uiDisabled8 UIDisabled8) UIDisabledUnion8 {
	typ := UIDisabledUnion8TypeUIDisabled8

	return UIDisabledUnion8{
		UIDisabled8: &uiDisabled8,
		Type:        typ,
	}
}

func CreateUIDisabledUnion8UIDisabledEnum8(uiDisabledEnum8 UIDisabledEnum8) UIDisabledUnion8 {
	typ := UIDisabledUnion8TypeUIDisabledEnum8

	return UIDisabledUnion8{
		UIDisabledEnum8: &uiDisabledEnum8,
		Type:            typ,
	}
}

func (u *UIDisabledUnion8) UnmarshalJSON(data []byte) error {

	var uiDisabled8 UIDisabled8 = UIDisabled8{}
	if err := utils.UnmarshalJSON(data, &uiDisabled8, "", true, true); err == nil {
		u.UIDisabled8 = &uiDisabled8
		u.Type = UIDisabledUnion8TypeUIDisabled8
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion8TypeBoolean
		return nil
	}

	var uiDisabledEnum8 UIDisabledEnum8 = UIDisabledEnum8("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum8, "", true, true); err == nil {
		u.UIDisabledEnum8 = &uiDisabledEnum8
		u.Type = UIDisabledUnion8TypeUIDisabledEnum8
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion8", string(data))
}

func (u UIDisabledUnion8) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled8 != nil {
		return utils.MarshalJSON(u.UIDisabled8, "", true)
	}

	if u.UIDisabledEnum8 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum8, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion8: all fields are null")
}

type UIDescription8 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription8) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion8Type string

const (
	UIDescriptionUnion8TypeStr            UIDescriptionUnion8Type = "str"
	UIDescriptionUnion8TypeUIDescription8 UIDescriptionUnion8Type = "ui:description_8"
)

type UIDescriptionUnion8 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription8 *UIDescription8 `queryParam:"inline"`

	Type UIDescriptionUnion8Type
}

func CreateUIDescriptionUnion8Str(str string) UIDescriptionUnion8 {
	typ := UIDescriptionUnion8TypeStr

	return UIDescriptionUnion8{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion8UIDescription8(uiDescription8 UIDescription8) UIDescriptionUnion8 {
	typ := UIDescriptionUnion8TypeUIDescription8

	return UIDescriptionUnion8{
		UIDescription8: &uiDescription8,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion8) UnmarshalJSON(data []byte) error {

	var uiDescription8 UIDescription8 = UIDescription8{}
	if err := utils.UnmarshalJSON(data, &uiDescription8, "", true, true); err == nil {
		u.UIDescription8 = &uiDescription8
		u.Type = UIDescriptionUnion8TypeUIDescription8
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion8TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion8", string(data))
}

func (u UIDescriptionUnion8) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription8 != nil {
		return utils.MarshalJSON(u.UIDescription8, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion8: all fields are null")
}

type UIFormattedValue8 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue8) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type DefaultAtBRANDAt447943 struct {
}

type Default struct {
	AtBRANDAt447943 DefaultAtBRANDAt447943 `json:"__@BRAND@447943"`
}

func (o *Default) GetAtBRANDAt447943() DefaultAtBRANDAt447943 {
	if o == nil {
		return DefaultAtBRANDAt447943{}
	}
	return o.AtBRANDAt447943
}

type ExampleAtBRANDAt447943 struct {
}

type Example struct {
	AtBRANDAt447943 ExampleAtBRANDAt447943 `json:"__@BRAND@447943"`
}

func (o *Example) GetAtBRANDAt447943() ExampleAtBRANDAt447943 {
	if o == nil {
		return ExampleAtBRANDAt447943{}
	}
	return o.AtBRANDAt447943
}

type PropertiesMultiVercelRegion struct {
	Type             TypeArray3                 `json:"type"`
	UIControl        UIControlMultiVercelRegion `json:"ui:control"`
	Items            ItemsString2               `json:"items"`
	UIOptions        []UIOptionUnion2           `json:"ui:options"`
	Description      *string                    `json:"description,omitempty"`
	MinItems         *float64                   `json:"minItems,omitempty"`
	MaxItems         *float64                   `json:"maxItems,omitempty"`
	UILabel          *string                    `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion8          `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion8            `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion8          `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion8       `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue8         `json:"ui:formatted-value,omitempty"`
	UIPlaceholder    *string                    `json:"ui:placeholder,omitempty"`
	Default          []Default                  `json:"default,omitempty"`
	Example          []Example                  `json:"example,omitempty"`
}

func (o *PropertiesMultiVercelRegion) GetType() TypeArray3 {
	if o == nil {
		return TypeArray3("")
	}
	return o.Type
}

func (o *PropertiesMultiVercelRegion) GetUIControl() UIControlMultiVercelRegion {
	if o == nil {
		return UIControlMultiVercelRegion("")
	}
	return o.UIControl
}

func (o *PropertiesMultiVercelRegion) GetItems() ItemsString2 {
	if o == nil {
		return ItemsString2{}
	}
	return o.Items
}

func (o *PropertiesMultiVercelRegion) GetUIOptions() []UIOptionUnion2 {
	if o == nil {
		return []UIOptionUnion2{}
	}
	return o.UIOptions
}

func (o *PropertiesMultiVercelRegion) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesMultiVercelRegion) GetMinItems() *float64 {
	if o == nil {
		return nil
	}
	return o.MinItems
}

func (o *PropertiesMultiVercelRegion) GetMaxItems() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxItems
}

func (o *PropertiesMultiVercelRegion) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesMultiVercelRegion) GetUIReadOnly() *UIReadOnlyUnion8 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesMultiVercelRegion) GetUIHidden() *UIHiddenUnion8 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesMultiVercelRegion) GetUIDisabled() *UIDisabledUnion8 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesMultiVercelRegion) GetUIDescription() *UIDescriptionUnion8 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesMultiVercelRegion) GetUIFormattedValue() *UIFormattedValue8 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesMultiVercelRegion) GetUIPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.UIPlaceholder
}

func (o *PropertiesMultiVercelRegion) GetDefault() []Default {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesMultiVercelRegion) GetExample() []Example {
	if o == nil {
		return nil
	}
	return o.Example
}

type TypeString4 string

const (
	TypeString4String TypeString4 = "string"
)

func (e TypeString4) ToPointer() *TypeString4 {
	return &e
}
func (e *TypeString4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TypeString4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeString4: %v", v)
	}
}

type UIControlVercelRegion string

const (
	UIControlVercelRegionVercelRegion UIControlVercelRegion = "vercel-region"
)

func (e UIControlVercelRegion) ToPointer() *UIControlVercelRegion {
	return &e
}
func (e *UIControlVercelRegion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-region":
		*e = UIControlVercelRegion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlVercelRegion: %v", v)
	}
}

type UIOptionValueAtBRANDAt4479431 struct {
}

type UIOptionValue1 struct {
	AtBRANDAt447943 UIOptionValueAtBRANDAt4479431 `json:"__@BRAND@447943"`
}

func (o *UIOptionValue1) GetAtBRANDAt447943() UIOptionValueAtBRANDAt4479431 {
	if o == nil {
		return UIOptionValueAtBRANDAt4479431{}
	}
	return o.AtBRANDAt447943
}

type UIOptionDisabledEnum2 string

const (
	UIOptionDisabledEnum2Update UIOptionDisabledEnum2 = "update"
	UIOptionDisabledEnum2Create UIOptionDisabledEnum2 = "create"
)

func (e UIOptionDisabledEnum2) ToPointer() *UIOptionDisabledEnum2 {
	return &e
}
func (e *UIOptionDisabledEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionDisabledEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionDisabledEnum2: %v", v)
	}
}

type UIOptionDisabled2 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionDisabled2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionDisabledUnion4Type string

const (
	UIOptionDisabledUnion4TypeBoolean               UIOptionDisabledUnion4Type = "boolean"
	UIOptionDisabledUnion4TypeUIOptionDisabled2     UIOptionDisabledUnion4Type = "ui:option_disabled_2"
	UIOptionDisabledUnion4TypeUIOptionDisabledEnum2 UIOptionDisabledUnion4Type = "ui:option_disabled_enum_2"
)

type UIOptionDisabledUnion4 struct {
	Boolean               *bool                  `queryParam:"inline"`
	UIOptionDisabled2     *UIOptionDisabled2     `queryParam:"inline"`
	UIOptionDisabledEnum2 *UIOptionDisabledEnum2 `queryParam:"inline"`

	Type UIOptionDisabledUnion4Type
}

func CreateUIOptionDisabledUnion4Boolean(boolean bool) UIOptionDisabledUnion4 {
	typ := UIOptionDisabledUnion4TypeBoolean

	return UIOptionDisabledUnion4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionDisabledUnion4UIOptionDisabled2(uiOptionDisabled2 UIOptionDisabled2) UIOptionDisabledUnion4 {
	typ := UIOptionDisabledUnion4TypeUIOptionDisabled2

	return UIOptionDisabledUnion4{
		UIOptionDisabled2: &uiOptionDisabled2,
		Type:              typ,
	}
}

func CreateUIOptionDisabledUnion4UIOptionDisabledEnum2(uiOptionDisabledEnum2 UIOptionDisabledEnum2) UIOptionDisabledUnion4 {
	typ := UIOptionDisabledUnion4TypeUIOptionDisabledEnum2

	return UIOptionDisabledUnion4{
		UIOptionDisabledEnum2: &uiOptionDisabledEnum2,
		Type:                  typ,
	}
}

func (u *UIOptionDisabledUnion4) UnmarshalJSON(data []byte) error {

	var uiOptionDisabled2 UIOptionDisabled2 = UIOptionDisabled2{}
	if err := utils.UnmarshalJSON(data, &uiOptionDisabled2, "", true, true); err == nil {
		u.UIOptionDisabled2 = &uiOptionDisabled2
		u.Type = UIOptionDisabledUnion4TypeUIOptionDisabled2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionDisabledUnion4TypeBoolean
		return nil
	}

	var uiOptionDisabledEnum2 UIOptionDisabledEnum2 = UIOptionDisabledEnum2("")
	if err := utils.UnmarshalJSON(data, &uiOptionDisabledEnum2, "", true, true); err == nil {
		u.UIOptionDisabledEnum2 = &uiOptionDisabledEnum2
		u.Type = UIOptionDisabledUnion4TypeUIOptionDisabledEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionDisabledUnion4", string(data))
}

func (u UIOptionDisabledUnion4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionDisabled2 != nil {
		return utils.MarshalJSON(u.UIOptionDisabled2, "", true)
	}

	if u.UIOptionDisabledEnum2 != nil {
		return utils.MarshalJSON(u.UIOptionDisabledEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionDisabledUnion4: all fields are null")
}

type UIOptionHiddenEnum2 string

const (
	UIOptionHiddenEnum2Update UIOptionHiddenEnum2 = "update"
	UIOptionHiddenEnum2Create UIOptionHiddenEnum2 = "create"
)

func (e UIOptionHiddenEnum2) ToPointer() *UIOptionHiddenEnum2 {
	return &e
}
func (e *UIOptionHiddenEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionHiddenEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionHiddenEnum2: %v", v)
	}
}

type UIOptionHidden2 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionHidden2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionHiddenUnion4Type string

const (
	UIOptionHiddenUnion4TypeBoolean             UIOptionHiddenUnion4Type = "boolean"
	UIOptionHiddenUnion4TypeUIOptionHidden2     UIOptionHiddenUnion4Type = "ui:option_hidden_2"
	UIOptionHiddenUnion4TypeUIOptionHiddenEnum2 UIOptionHiddenUnion4Type = "ui:option_hidden_enum_2"
)

type UIOptionHiddenUnion4 struct {
	Boolean             *bool                `queryParam:"inline"`
	UIOptionHidden2     *UIOptionHidden2     `queryParam:"inline"`
	UIOptionHiddenEnum2 *UIOptionHiddenEnum2 `queryParam:"inline"`

	Type UIOptionHiddenUnion4Type
}

func CreateUIOptionHiddenUnion4Boolean(boolean bool) UIOptionHiddenUnion4 {
	typ := UIOptionHiddenUnion4TypeBoolean

	return UIOptionHiddenUnion4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionHiddenUnion4UIOptionHidden2(uiOptionHidden2 UIOptionHidden2) UIOptionHiddenUnion4 {
	typ := UIOptionHiddenUnion4TypeUIOptionHidden2

	return UIOptionHiddenUnion4{
		UIOptionHidden2: &uiOptionHidden2,
		Type:            typ,
	}
}

func CreateUIOptionHiddenUnion4UIOptionHiddenEnum2(uiOptionHiddenEnum2 UIOptionHiddenEnum2) UIOptionHiddenUnion4 {
	typ := UIOptionHiddenUnion4TypeUIOptionHiddenEnum2

	return UIOptionHiddenUnion4{
		UIOptionHiddenEnum2: &uiOptionHiddenEnum2,
		Type:                typ,
	}
}

func (u *UIOptionHiddenUnion4) UnmarshalJSON(data []byte) error {

	var uiOptionHidden2 UIOptionHidden2 = UIOptionHidden2{}
	if err := utils.UnmarshalJSON(data, &uiOptionHidden2, "", true, true); err == nil {
		u.UIOptionHidden2 = &uiOptionHidden2
		u.Type = UIOptionHiddenUnion4TypeUIOptionHidden2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionHiddenUnion4TypeBoolean
		return nil
	}

	var uiOptionHiddenEnum2 UIOptionHiddenEnum2 = UIOptionHiddenEnum2("")
	if err := utils.UnmarshalJSON(data, &uiOptionHiddenEnum2, "", true, true); err == nil {
		u.UIOptionHiddenEnum2 = &uiOptionHiddenEnum2
		u.Type = UIOptionHiddenUnion4TypeUIOptionHiddenEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionHiddenUnion4", string(data))
}

func (u UIOptionHiddenUnion4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionHidden2 != nil {
		return utils.MarshalJSON(u.UIOptionHidden2, "", true)
	}

	if u.UIOptionHiddenEnum2 != nil {
		return utils.MarshalJSON(u.UIOptionHiddenEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionHiddenUnion4: all fields are null")
}

type UIOption5 struct {
	Value    UIOptionValue1          `json:"value"`
	Disabled *UIOptionDisabledUnion4 `json:"disabled,omitempty"`
	Hidden   *UIOptionHiddenUnion4   `json:"hidden,omitempty"`
}

func (o *UIOption5) GetValue() UIOptionValue1 {
	if o == nil {
		return UIOptionValue1{}
	}
	return o.Value
}

func (o *UIOption5) GetDisabled() *UIOptionDisabledUnion4 {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIOption5) GetHidden() *UIOptionHiddenUnion4 {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type UIOptionAtBRANDAt4479431 struct {
}

type UIOption4 struct {
	AtBRANDAt447943 UIOptionAtBRANDAt4479431 `json:"__@BRAND@447943"`
}

func (o *UIOption4) GetAtBRANDAt447943() UIOptionAtBRANDAt4479431 {
	if o == nil {
		return UIOptionAtBRANDAt4479431{}
	}
	return o.AtBRANDAt447943
}

type UIOptionDisabledEnum1 string

const (
	UIOptionDisabledEnum1Update UIOptionDisabledEnum1 = "update"
	UIOptionDisabledEnum1Create UIOptionDisabledEnum1 = "create"
)

func (e UIOptionDisabledEnum1) ToPointer() *UIOptionDisabledEnum1 {
	return &e
}
func (e *UIOptionDisabledEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionDisabledEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionDisabledEnum1: %v", v)
	}
}

type UIOptionDisabled1 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionDisabled1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionDisabledUnion3Type string

const (
	UIOptionDisabledUnion3TypeBoolean               UIOptionDisabledUnion3Type = "boolean"
	UIOptionDisabledUnion3TypeUIOptionDisabled1     UIOptionDisabledUnion3Type = "ui:option_disabled_1"
	UIOptionDisabledUnion3TypeUIOptionDisabledEnum1 UIOptionDisabledUnion3Type = "ui:option_disabled_enum_1"
)

type UIOptionDisabledUnion3 struct {
	Boolean               *bool                  `queryParam:"inline"`
	UIOptionDisabled1     *UIOptionDisabled1     `queryParam:"inline"`
	UIOptionDisabledEnum1 *UIOptionDisabledEnum1 `queryParam:"inline"`

	Type UIOptionDisabledUnion3Type
}

func CreateUIOptionDisabledUnion3Boolean(boolean bool) UIOptionDisabledUnion3 {
	typ := UIOptionDisabledUnion3TypeBoolean

	return UIOptionDisabledUnion3{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionDisabledUnion3UIOptionDisabled1(uiOptionDisabled1 UIOptionDisabled1) UIOptionDisabledUnion3 {
	typ := UIOptionDisabledUnion3TypeUIOptionDisabled1

	return UIOptionDisabledUnion3{
		UIOptionDisabled1: &uiOptionDisabled1,
		Type:              typ,
	}
}

func CreateUIOptionDisabledUnion3UIOptionDisabledEnum1(uiOptionDisabledEnum1 UIOptionDisabledEnum1) UIOptionDisabledUnion3 {
	typ := UIOptionDisabledUnion3TypeUIOptionDisabledEnum1

	return UIOptionDisabledUnion3{
		UIOptionDisabledEnum1: &uiOptionDisabledEnum1,
		Type:                  typ,
	}
}

func (u *UIOptionDisabledUnion3) UnmarshalJSON(data []byte) error {

	var uiOptionDisabled1 UIOptionDisabled1 = UIOptionDisabled1{}
	if err := utils.UnmarshalJSON(data, &uiOptionDisabled1, "", true, true); err == nil {
		u.UIOptionDisabled1 = &uiOptionDisabled1
		u.Type = UIOptionDisabledUnion3TypeUIOptionDisabled1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionDisabledUnion3TypeBoolean
		return nil
	}

	var uiOptionDisabledEnum1 UIOptionDisabledEnum1 = UIOptionDisabledEnum1("")
	if err := utils.UnmarshalJSON(data, &uiOptionDisabledEnum1, "", true, true); err == nil {
		u.UIOptionDisabledEnum1 = &uiOptionDisabledEnum1
		u.Type = UIOptionDisabledUnion3TypeUIOptionDisabledEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionDisabledUnion3", string(data))
}

func (u UIOptionDisabledUnion3) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionDisabled1 != nil {
		return utils.MarshalJSON(u.UIOptionDisabled1, "", true)
	}

	if u.UIOptionDisabledEnum1 != nil {
		return utils.MarshalJSON(u.UIOptionDisabledEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionDisabledUnion3: all fields are null")
}

type UIOptionHiddenEnum1 string

const (
	UIOptionHiddenEnum1Update UIOptionHiddenEnum1 = "update"
	UIOptionHiddenEnum1Create UIOptionHiddenEnum1 = "create"
)

func (e UIOptionHiddenEnum1) ToPointer() *UIOptionHiddenEnum1 {
	return &e
}
func (e *UIOptionHiddenEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIOptionHiddenEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIOptionHiddenEnum1: %v", v)
	}
}

type UIOptionHidden1 struct {
	Expr string `json:"expr"`
}

func (o *UIOptionHidden1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionHiddenUnion3Type string

const (
	UIOptionHiddenUnion3TypeBoolean             UIOptionHiddenUnion3Type = "boolean"
	UIOptionHiddenUnion3TypeUIOptionHidden1     UIOptionHiddenUnion3Type = "ui:option_hidden_1"
	UIOptionHiddenUnion3TypeUIOptionHiddenEnum1 UIOptionHiddenUnion3Type = "ui:option_hidden_enum_1"
)

type UIOptionHiddenUnion3 struct {
	Boolean             *bool                `queryParam:"inline"`
	UIOptionHidden1     *UIOptionHidden1     `queryParam:"inline"`
	UIOptionHiddenEnum1 *UIOptionHiddenEnum1 `queryParam:"inline"`

	Type UIOptionHiddenUnion3Type
}

func CreateUIOptionHiddenUnion3Boolean(boolean bool) UIOptionHiddenUnion3 {
	typ := UIOptionHiddenUnion3TypeBoolean

	return UIOptionHiddenUnion3{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionHiddenUnion3UIOptionHidden1(uiOptionHidden1 UIOptionHidden1) UIOptionHiddenUnion3 {
	typ := UIOptionHiddenUnion3TypeUIOptionHidden1

	return UIOptionHiddenUnion3{
		UIOptionHidden1: &uiOptionHidden1,
		Type:            typ,
	}
}

func CreateUIOptionHiddenUnion3UIOptionHiddenEnum1(uiOptionHiddenEnum1 UIOptionHiddenEnum1) UIOptionHiddenUnion3 {
	typ := UIOptionHiddenUnion3TypeUIOptionHiddenEnum1

	return UIOptionHiddenUnion3{
		UIOptionHiddenEnum1: &uiOptionHiddenEnum1,
		Type:                typ,
	}
}

func (u *UIOptionHiddenUnion3) UnmarshalJSON(data []byte) error {

	var uiOptionHidden1 UIOptionHidden1 = UIOptionHidden1{}
	if err := utils.UnmarshalJSON(data, &uiOptionHidden1, "", true, true); err == nil {
		u.UIOptionHidden1 = &uiOptionHidden1
		u.Type = UIOptionHiddenUnion3TypeUIOptionHidden1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionHiddenUnion3TypeBoolean
		return nil
	}

	var uiOptionHiddenEnum1 UIOptionHiddenEnum1 = UIOptionHiddenEnum1("")
	if err := utils.UnmarshalJSON(data, &uiOptionHiddenEnum1, "", true, true); err == nil {
		u.UIOptionHiddenEnum1 = &uiOptionHiddenEnum1
		u.Type = UIOptionHiddenUnion3TypeUIOptionHiddenEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionHiddenUnion3", string(data))
}

func (u UIOptionHiddenUnion3) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIOptionHidden1 != nil {
		return utils.MarshalJSON(u.UIOptionHidden1, "", true)
	}

	if u.UIOptionHiddenEnum1 != nil {
		return utils.MarshalJSON(u.UIOptionHiddenEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionHiddenUnion3: all fields are null")
}

type UIOption3 struct {
	Value    string                  `json:"value"`
	Label    string                  `json:"label"`
	Disabled *UIOptionDisabledUnion3 `json:"disabled,omitempty"`
	Hidden   *UIOptionHiddenUnion3   `json:"hidden,omitempty"`
}

func (o *UIOption3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UIOption3) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UIOption3) GetDisabled() *UIOptionDisabledUnion3 {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIOption3) GetHidden() *UIOptionHiddenUnion3 {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type UIOptionUnion1Type string

const (
	UIOptionUnion1TypeUIOption3 UIOptionUnion1Type = "ui:option_3"
	UIOptionUnion1TypeUIOption4 UIOptionUnion1Type = "ui:option_4"
	UIOptionUnion1TypeUIOption5 UIOptionUnion1Type = "ui:option_5"
)

type UIOptionUnion1 struct {
	UIOption3 *UIOption3 `queryParam:"inline"`
	UIOption4 *UIOption4 `queryParam:"inline"`
	UIOption5 *UIOption5 `queryParam:"inline"`

	Type UIOptionUnion1Type
}

func CreateUIOptionUnion1UIOption3(uiOption3 UIOption3) UIOptionUnion1 {
	typ := UIOptionUnion1TypeUIOption3

	return UIOptionUnion1{
		UIOption3: &uiOption3,
		Type:      typ,
	}
}

func CreateUIOptionUnion1UIOption4(uiOption4 UIOption4) UIOptionUnion1 {
	typ := UIOptionUnion1TypeUIOption4

	return UIOptionUnion1{
		UIOption4: &uiOption4,
		Type:      typ,
	}
}

func CreateUIOptionUnion1UIOption5(uiOption5 UIOption5) UIOptionUnion1 {
	typ := UIOptionUnion1TypeUIOption5

	return UIOptionUnion1{
		UIOption5: &uiOption5,
		Type:      typ,
	}
}

func (u *UIOptionUnion1) UnmarshalJSON(data []byte) error {

	var uiOption4 UIOption4 = UIOption4{}
	if err := utils.UnmarshalJSON(data, &uiOption4, "", true, true); err == nil {
		u.UIOption4 = &uiOption4
		u.Type = UIOptionUnion1TypeUIOption4
		return nil
	}

	var uiOption5 UIOption5 = UIOption5{}
	if err := utils.UnmarshalJSON(data, &uiOption5, "", true, true); err == nil {
		u.UIOption5 = &uiOption5
		u.Type = UIOptionUnion1TypeUIOption5
		return nil
	}

	var uiOption3 UIOption3 = UIOption3{}
	if err := utils.UnmarshalJSON(data, &uiOption3, "", true, true); err == nil {
		u.UIOption3 = &uiOption3
		u.Type = UIOptionUnion1TypeUIOption3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionUnion1", string(data))
}

func (u UIOptionUnion1) MarshalJSON() ([]byte, error) {
	if u.UIOption3 != nil {
		return utils.MarshalJSON(u.UIOption3, "", true)
	}

	if u.UIOption4 != nil {
		return utils.MarshalJSON(u.UIOption4, "", true)
	}

	if u.UIOption5 != nil {
		return utils.MarshalJSON(u.UIOption5, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionUnion1: all fields are null")
}

type MinLengthAtBRANDAt4479433 struct {
}

type MinLength3 struct {
	AtBRANDAt447943 MinLengthAtBRANDAt4479433 `json:"__@BRAND@447943"`
}

func (o *MinLength3) GetAtBRANDAt447943() MinLengthAtBRANDAt4479433 {
	if o == nil {
		return MinLengthAtBRANDAt4479433{}
	}
	return o.AtBRANDAt447943
}

type MaxLengthAtBRANDAt4479433 struct {
}

type MaxLength3 struct {
	AtBRANDAt447943 MaxLengthAtBRANDAt4479433 `json:"__@BRAND@447943"`
}

func (o *MaxLength3) GetAtBRANDAt447943() MaxLengthAtBRANDAt4479433 {
	if o == nil {
		return MaxLengthAtBRANDAt4479433{}
	}
	return o.AtBRANDAt447943
}

type PatternAtBRANDAt4479433 struct {
}

type Pattern3 struct {
	AtBRANDAt447943 PatternAtBRANDAt4479433 `json:"__@BRAND@447943"`
}

func (o *Pattern3) GetAtBRANDAt447943() PatternAtBRANDAt4479433 {
	if o == nil {
		return PatternAtBRANDAt4479433{}
	}
	return o.AtBRANDAt447943
}

type UIReadOnlyEnum7 string

const (
	UIReadOnlyEnum7Update UIReadOnlyEnum7 = "update"
	UIReadOnlyEnum7Create UIReadOnlyEnum7 = "create"
)

func (e UIReadOnlyEnum7) ToPointer() *UIReadOnlyEnum7 {
	return &e
}
func (e *UIReadOnlyEnum7) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum7(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum7: %v", v)
	}
}

type UIReadOnly7 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly7) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion7Type string

const (
	UIReadOnlyUnion7TypeBoolean         UIReadOnlyUnion7Type = "boolean"
	UIReadOnlyUnion7TypeUIReadOnly7     UIReadOnlyUnion7Type = "ui:read-only_7"
	UIReadOnlyUnion7TypeUIReadOnlyEnum7 UIReadOnlyUnion7Type = "ui:read-only_enum_7"
)

type UIReadOnlyUnion7 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly7     *UIReadOnly7     `queryParam:"inline"`
	UIReadOnlyEnum7 *UIReadOnlyEnum7 `queryParam:"inline"`

	Type UIReadOnlyUnion7Type
}

func CreateUIReadOnlyUnion7Boolean(boolean bool) UIReadOnlyUnion7 {
	typ := UIReadOnlyUnion7TypeBoolean

	return UIReadOnlyUnion7{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion7UIReadOnly7(uiReadOnly7 UIReadOnly7) UIReadOnlyUnion7 {
	typ := UIReadOnlyUnion7TypeUIReadOnly7

	return UIReadOnlyUnion7{
		UIReadOnly7: &uiReadOnly7,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion7UIReadOnlyEnum7(uiReadOnlyEnum7 UIReadOnlyEnum7) UIReadOnlyUnion7 {
	typ := UIReadOnlyUnion7TypeUIReadOnlyEnum7

	return UIReadOnlyUnion7{
		UIReadOnlyEnum7: &uiReadOnlyEnum7,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion7) UnmarshalJSON(data []byte) error {

	var uiReadOnly7 UIReadOnly7 = UIReadOnly7{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly7, "", true, true); err == nil {
		u.UIReadOnly7 = &uiReadOnly7
		u.Type = UIReadOnlyUnion7TypeUIReadOnly7
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion7TypeBoolean
		return nil
	}

	var uiReadOnlyEnum7 UIReadOnlyEnum7 = UIReadOnlyEnum7("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum7, "", true, true); err == nil {
		u.UIReadOnlyEnum7 = &uiReadOnlyEnum7
		u.Type = UIReadOnlyUnion7TypeUIReadOnlyEnum7
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion7", string(data))
}

func (u UIReadOnlyUnion7) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly7 != nil {
		return utils.MarshalJSON(u.UIReadOnly7, "", true)
	}

	if u.UIReadOnlyEnum7 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum7, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion7: all fields are null")
}

type UIHiddenEnum7 string

const (
	UIHiddenEnum7Update UIHiddenEnum7 = "update"
	UIHiddenEnum7Create UIHiddenEnum7 = "create"
)

func (e UIHiddenEnum7) ToPointer() *UIHiddenEnum7 {
	return &e
}
func (e *UIHiddenEnum7) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum7(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum7: %v", v)
	}
}

type UIHidden7 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden7) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion7Type string

const (
	UIHiddenUnion7TypeBoolean       UIHiddenUnion7Type = "boolean"
	UIHiddenUnion7TypeUIHidden7     UIHiddenUnion7Type = "ui:hidden_7"
	UIHiddenUnion7TypeUIHiddenEnum7 UIHiddenUnion7Type = "ui:hidden_enum_7"
)

type UIHiddenUnion7 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden7     *UIHidden7     `queryParam:"inline"`
	UIHiddenEnum7 *UIHiddenEnum7 `queryParam:"inline"`

	Type UIHiddenUnion7Type
}

func CreateUIHiddenUnion7Boolean(boolean bool) UIHiddenUnion7 {
	typ := UIHiddenUnion7TypeBoolean

	return UIHiddenUnion7{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion7UIHidden7(uiHidden7 UIHidden7) UIHiddenUnion7 {
	typ := UIHiddenUnion7TypeUIHidden7

	return UIHiddenUnion7{
		UIHidden7: &uiHidden7,
		Type:      typ,
	}
}

func CreateUIHiddenUnion7UIHiddenEnum7(uiHiddenEnum7 UIHiddenEnum7) UIHiddenUnion7 {
	typ := UIHiddenUnion7TypeUIHiddenEnum7

	return UIHiddenUnion7{
		UIHiddenEnum7: &uiHiddenEnum7,
		Type:          typ,
	}
}

func (u *UIHiddenUnion7) UnmarshalJSON(data []byte) error {

	var uiHidden7 UIHidden7 = UIHidden7{}
	if err := utils.UnmarshalJSON(data, &uiHidden7, "", true, true); err == nil {
		u.UIHidden7 = &uiHidden7
		u.Type = UIHiddenUnion7TypeUIHidden7
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion7TypeBoolean
		return nil
	}

	var uiHiddenEnum7 UIHiddenEnum7 = UIHiddenEnum7("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum7, "", true, true); err == nil {
		u.UIHiddenEnum7 = &uiHiddenEnum7
		u.Type = UIHiddenUnion7TypeUIHiddenEnum7
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion7", string(data))
}

func (u UIHiddenUnion7) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden7 != nil {
		return utils.MarshalJSON(u.UIHidden7, "", true)
	}

	if u.UIHiddenEnum7 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum7, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion7: all fields are null")
}

type UIDisabledEnum7 string

const (
	UIDisabledEnum7Update UIDisabledEnum7 = "update"
	UIDisabledEnum7Create UIDisabledEnum7 = "create"
)

func (e UIDisabledEnum7) ToPointer() *UIDisabledEnum7 {
	return &e
}
func (e *UIDisabledEnum7) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum7(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum7: %v", v)
	}
}

type UIDisabled7 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled7) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion7Type string

const (
	UIDisabledUnion7TypeBoolean         UIDisabledUnion7Type = "boolean"
	UIDisabledUnion7TypeUIDisabled7     UIDisabledUnion7Type = "ui:disabled_7"
	UIDisabledUnion7TypeUIDisabledEnum7 UIDisabledUnion7Type = "ui:disabled_enum_7"
)

type UIDisabledUnion7 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled7     *UIDisabled7     `queryParam:"inline"`
	UIDisabledEnum7 *UIDisabledEnum7 `queryParam:"inline"`

	Type UIDisabledUnion7Type
}

func CreateUIDisabledUnion7Boolean(boolean bool) UIDisabledUnion7 {
	typ := UIDisabledUnion7TypeBoolean

	return UIDisabledUnion7{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion7UIDisabled7(uiDisabled7 UIDisabled7) UIDisabledUnion7 {
	typ := UIDisabledUnion7TypeUIDisabled7

	return UIDisabledUnion7{
		UIDisabled7: &uiDisabled7,
		Type:        typ,
	}
}

func CreateUIDisabledUnion7UIDisabledEnum7(uiDisabledEnum7 UIDisabledEnum7) UIDisabledUnion7 {
	typ := UIDisabledUnion7TypeUIDisabledEnum7

	return UIDisabledUnion7{
		UIDisabledEnum7: &uiDisabledEnum7,
		Type:            typ,
	}
}

func (u *UIDisabledUnion7) UnmarshalJSON(data []byte) error {

	var uiDisabled7 UIDisabled7 = UIDisabled7{}
	if err := utils.UnmarshalJSON(data, &uiDisabled7, "", true, true); err == nil {
		u.UIDisabled7 = &uiDisabled7
		u.Type = UIDisabledUnion7TypeUIDisabled7
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion7TypeBoolean
		return nil
	}

	var uiDisabledEnum7 UIDisabledEnum7 = UIDisabledEnum7("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum7, "", true, true); err == nil {
		u.UIDisabledEnum7 = &uiDisabledEnum7
		u.Type = UIDisabledUnion7TypeUIDisabledEnum7
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion7", string(data))
}

func (u UIDisabledUnion7) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled7 != nil {
		return utils.MarshalJSON(u.UIDisabled7, "", true)
	}

	if u.UIDisabledEnum7 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum7, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion7: all fields are null")
}

type UIDescription7 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription7) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion7Type string

const (
	UIDescriptionUnion7TypeStr            UIDescriptionUnion7Type = "str"
	UIDescriptionUnion7TypeUIDescription7 UIDescriptionUnion7Type = "ui:description_7"
)

type UIDescriptionUnion7 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription7 *UIDescription7 `queryParam:"inline"`

	Type UIDescriptionUnion7Type
}

func CreateUIDescriptionUnion7Str(str string) UIDescriptionUnion7 {
	typ := UIDescriptionUnion7TypeStr

	return UIDescriptionUnion7{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion7UIDescription7(uiDescription7 UIDescription7) UIDescriptionUnion7 {
	typ := UIDescriptionUnion7TypeUIDescription7

	return UIDescriptionUnion7{
		UIDescription7: &uiDescription7,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion7) UnmarshalJSON(data []byte) error {

	var uiDescription7 UIDescription7 = UIDescription7{}
	if err := utils.UnmarshalJSON(data, &uiDescription7, "", true, true); err == nil {
		u.UIDescription7 = &uiDescription7
		u.Type = UIDescriptionUnion7TypeUIDescription7
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion7TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion7", string(data))
}

func (u UIDescriptionUnion7) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription7 != nil {
		return utils.MarshalJSON(u.UIDescription7, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion7: all fields are null")
}

type UIFormattedValue7 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue7) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesVercelRegion struct {
	Type             TypeString4           `json:"type"`
	UIControl        UIControlVercelRegion `json:"ui:control"`
	UIOptions        []UIOptionUnion1      `json:"ui:options"`
	Description      *string               `json:"description,omitempty"`
	MinLength        *MinLength3           `json:"minLength,omitempty"`
	MaxLength        *MaxLength3           `json:"maxLength,omitempty"`
	Pattern          *Pattern3             `json:"pattern,omitempty"`
	Default          *string               `json:"default,omitempty"`
	Enum             []string              `json:"enum,omitempty"`
	UILabel          *string               `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion7     `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion7       `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion7     `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion7  `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue7    `json:"ui:formatted-value,omitempty"`
	UIPlaceholder    *string               `json:"ui:placeholder,omitempty"`
}

func (o *PropertiesVercelRegion) GetType() TypeString4 {
	if o == nil {
		return TypeString4("")
	}
	return o.Type
}

func (o *PropertiesVercelRegion) GetUIControl() UIControlVercelRegion {
	if o == nil {
		return UIControlVercelRegion("")
	}
	return o.UIControl
}

func (o *PropertiesVercelRegion) GetUIOptions() []UIOptionUnion1 {
	if o == nil {
		return []UIOptionUnion1{}
	}
	return o.UIOptions
}

func (o *PropertiesVercelRegion) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesVercelRegion) GetMinLength() *MinLength3 {
	if o == nil {
		return nil
	}
	return o.MinLength
}

func (o *PropertiesVercelRegion) GetMaxLength() *MaxLength3 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *PropertiesVercelRegion) GetPattern() *Pattern3 {
	if o == nil {
		return nil
	}
	return o.Pattern
}

func (o *PropertiesVercelRegion) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesVercelRegion) GetEnum() []string {
	if o == nil {
		return nil
	}
	return o.Enum
}

func (o *PropertiesVercelRegion) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesVercelRegion) GetUIReadOnly() *UIReadOnlyUnion7 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesVercelRegion) GetUIHidden() *UIHiddenUnion7 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesVercelRegion) GetUIDisabled() *UIDisabledUnion7 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesVercelRegion) GetUIDescription() *UIDescriptionUnion7 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesVercelRegion) GetUIFormattedValue() *UIFormattedValue7 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesVercelRegion) GetUIPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.UIPlaceholder
}

type TypeArray2 string

const (
	TypeArray2Array TypeArray2 = "array"
)

func (e TypeArray2) ToPointer() *TypeArray2 {
	return &e
}
func (e *TypeArray2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "array":
		*e = TypeArray2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeArray2: %v", v)
	}
}

type UIControlMultiSelect string

const (
	UIControlMultiSelectMultiSelect UIControlMultiSelect = "multi-select"
)

func (e UIControlMultiSelect) ToPointer() *UIControlMultiSelect {
	return &e
}
func (e *UIControlMultiSelect) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "multi-select":
		*e = UIControlMultiSelect(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlMultiSelect: %v", v)
	}
}

type TypeString3 string

const (
	TypeString3String TypeString3 = "string"
)

func (e TypeString3) ToPointer() *TypeString3 {
	return &e
}
func (e *TypeString3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TypeString3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeString3: %v", v)
	}
}

type MinLengthAtBRANDAt447943String1 struct {
}

type MinLengthString1 struct {
	AtBRANDAt447943 MinLengthAtBRANDAt447943String1 `json:"__@BRAND@447943"`
}

func (o *MinLengthString1) GetAtBRANDAt447943() MinLengthAtBRANDAt447943String1 {
	if o == nil {
		return MinLengthAtBRANDAt447943String1{}
	}
	return o.AtBRANDAt447943
}

type MaxLengthAtBRANDAt447943String1 struct {
}

type MaxLengthString1 struct {
	AtBRANDAt447943 MaxLengthAtBRANDAt447943String1 `json:"__@BRAND@447943"`
}

func (o *MaxLengthString1) GetAtBRANDAt447943() MaxLengthAtBRANDAt447943String1 {
	if o == nil {
		return MaxLengthAtBRANDAt447943String1{}
	}
	return o.AtBRANDAt447943
}

type PatternAtBRANDAt447943String1 struct {
}

type PatternString1 struct {
	AtBRANDAt447943 PatternAtBRANDAt447943String1 `json:"__@BRAND@447943"`
}

func (o *PatternString1) GetAtBRANDAt447943() PatternAtBRANDAt447943String1 {
	if o == nil {
		return PatternAtBRANDAt447943String1{}
	}
	return o.AtBRANDAt447943
}

type ItemsString1 struct {
	Type        TypeString3       `json:"type"`
	Description *string           `json:"description,omitempty"`
	MinLength   *MinLengthString1 `json:"minLength,omitempty"`
	MaxLength   *MaxLengthString1 `json:"maxLength,omitempty"`
	Pattern     *PatternString1   `json:"pattern,omitempty"`
	Default     *string           `json:"default,omitempty"`
	Enum        []string          `json:"enum,omitempty"`
}

func (o *ItemsString1) GetType() TypeString3 {
	if o == nil {
		return TypeString3("")
	}
	return o.Type
}

func (o *ItemsString1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ItemsString1) GetMinLength() *MinLengthString1 {
	if o == nil {
		return nil
	}
	return o.MinLength
}

func (o *ItemsString1) GetMaxLength() *MaxLengthString1 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *ItemsString1) GetPattern() *PatternString1 {
	if o == nil {
		return nil
	}
	return o.Pattern
}

func (o *ItemsString1) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *ItemsString1) GetEnum() []string {
	if o == nil {
		return nil
	}
	return o.Enum
}

type DisabledUIOptionEnum2 string

const (
	DisabledUIOptionEnum2Update DisabledUIOptionEnum2 = "update"
	DisabledUIOptionEnum2Create DisabledUIOptionEnum2 = "create"
)

func (e DisabledUIOptionEnum2) ToPointer() *DisabledUIOptionEnum2 {
	return &e
}
func (e *DisabledUIOptionEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = DisabledUIOptionEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledUIOptionEnum2: %v", v)
	}
}

type DisabledUIOption2 struct {
	Expr string `json:"expr"`
}

func (o *DisabledUIOption2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionDisabledUnion2Type string

const (
	UIOptionDisabledUnion2TypeBoolean               UIOptionDisabledUnion2Type = "boolean"
	UIOptionDisabledUnion2TypeDisabledUIOption2     UIOptionDisabledUnion2Type = "disabled_ui:option_2"
	UIOptionDisabledUnion2TypeDisabledUIOptionEnum2 UIOptionDisabledUnion2Type = "disabled_ui:option_enum_2"
)

type UIOptionDisabledUnion2 struct {
	Boolean               *bool                  `queryParam:"inline"`
	DisabledUIOption2     *DisabledUIOption2     `queryParam:"inline"`
	DisabledUIOptionEnum2 *DisabledUIOptionEnum2 `queryParam:"inline"`

	Type UIOptionDisabledUnion2Type
}

func CreateUIOptionDisabledUnion2Boolean(boolean bool) UIOptionDisabledUnion2 {
	typ := UIOptionDisabledUnion2TypeBoolean

	return UIOptionDisabledUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionDisabledUnion2DisabledUIOption2(disabledUIOption2 DisabledUIOption2) UIOptionDisabledUnion2 {
	typ := UIOptionDisabledUnion2TypeDisabledUIOption2

	return UIOptionDisabledUnion2{
		DisabledUIOption2: &disabledUIOption2,
		Type:              typ,
	}
}

func CreateUIOptionDisabledUnion2DisabledUIOptionEnum2(disabledUIOptionEnum2 DisabledUIOptionEnum2) UIOptionDisabledUnion2 {
	typ := UIOptionDisabledUnion2TypeDisabledUIOptionEnum2

	return UIOptionDisabledUnion2{
		DisabledUIOptionEnum2: &disabledUIOptionEnum2,
		Type:                  typ,
	}
}

func (u *UIOptionDisabledUnion2) UnmarshalJSON(data []byte) error {

	var disabledUIOption2 DisabledUIOption2 = DisabledUIOption2{}
	if err := utils.UnmarshalJSON(data, &disabledUIOption2, "", true, true); err == nil {
		u.DisabledUIOption2 = &disabledUIOption2
		u.Type = UIOptionDisabledUnion2TypeDisabledUIOption2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionDisabledUnion2TypeBoolean
		return nil
	}

	var disabledUIOptionEnum2 DisabledUIOptionEnum2 = DisabledUIOptionEnum2("")
	if err := utils.UnmarshalJSON(data, &disabledUIOptionEnum2, "", true, true); err == nil {
		u.DisabledUIOptionEnum2 = &disabledUIOptionEnum2
		u.Type = UIOptionDisabledUnion2TypeDisabledUIOptionEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionDisabledUnion2", string(data))
}

func (u UIOptionDisabledUnion2) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.DisabledUIOption2 != nil {
		return utils.MarshalJSON(u.DisabledUIOption2, "", true)
	}

	if u.DisabledUIOptionEnum2 != nil {
		return utils.MarshalJSON(u.DisabledUIOptionEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionDisabledUnion2: all fields are null")
}

type HiddenUIOptionEnum2 string

const (
	HiddenUIOptionEnum2Update HiddenUIOptionEnum2 = "update"
	HiddenUIOptionEnum2Create HiddenUIOptionEnum2 = "create"
)

func (e HiddenUIOptionEnum2) ToPointer() *HiddenUIOptionEnum2 {
	return &e
}
func (e *HiddenUIOptionEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = HiddenUIOptionEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HiddenUIOptionEnum2: %v", v)
	}
}

type HiddenUIOption2 struct {
	Expr string `json:"expr"`
}

func (o *HiddenUIOption2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionHiddenUnion2Type string

const (
	UIOptionHiddenUnion2TypeBoolean             UIOptionHiddenUnion2Type = "boolean"
	UIOptionHiddenUnion2TypeHiddenUIOption2     UIOptionHiddenUnion2Type = "hidden_ui:option_2"
	UIOptionHiddenUnion2TypeHiddenUIOptionEnum2 UIOptionHiddenUnion2Type = "hidden_ui:option_enum_2"
)

type UIOptionHiddenUnion2 struct {
	Boolean             *bool                `queryParam:"inline"`
	HiddenUIOption2     *HiddenUIOption2     `queryParam:"inline"`
	HiddenUIOptionEnum2 *HiddenUIOptionEnum2 `queryParam:"inline"`

	Type UIOptionHiddenUnion2Type
}

func CreateUIOptionHiddenUnion2Boolean(boolean bool) UIOptionHiddenUnion2 {
	typ := UIOptionHiddenUnion2TypeBoolean

	return UIOptionHiddenUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionHiddenUnion2HiddenUIOption2(hiddenUIOption2 HiddenUIOption2) UIOptionHiddenUnion2 {
	typ := UIOptionHiddenUnion2TypeHiddenUIOption2

	return UIOptionHiddenUnion2{
		HiddenUIOption2: &hiddenUIOption2,
		Type:            typ,
	}
}

func CreateUIOptionHiddenUnion2HiddenUIOptionEnum2(hiddenUIOptionEnum2 HiddenUIOptionEnum2) UIOptionHiddenUnion2 {
	typ := UIOptionHiddenUnion2TypeHiddenUIOptionEnum2

	return UIOptionHiddenUnion2{
		HiddenUIOptionEnum2: &hiddenUIOptionEnum2,
		Type:                typ,
	}
}

func (u *UIOptionHiddenUnion2) UnmarshalJSON(data []byte) error {

	var hiddenUIOption2 HiddenUIOption2 = HiddenUIOption2{}
	if err := utils.UnmarshalJSON(data, &hiddenUIOption2, "", true, true); err == nil {
		u.HiddenUIOption2 = &hiddenUIOption2
		u.Type = UIOptionHiddenUnion2TypeHiddenUIOption2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionHiddenUnion2TypeBoolean
		return nil
	}

	var hiddenUIOptionEnum2 HiddenUIOptionEnum2 = HiddenUIOptionEnum2("")
	if err := utils.UnmarshalJSON(data, &hiddenUIOptionEnum2, "", true, true); err == nil {
		u.HiddenUIOptionEnum2 = &hiddenUIOptionEnum2
		u.Type = UIOptionHiddenUnion2TypeHiddenUIOptionEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionHiddenUnion2", string(data))
}

func (u UIOptionHiddenUnion2) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.HiddenUIOption2 != nil {
		return utils.MarshalJSON(u.HiddenUIOption2, "", true)
	}

	if u.HiddenUIOptionEnum2 != nil {
		return utils.MarshalJSON(u.HiddenUIOptionEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionHiddenUnion2: all fields are null")
}

type UIOption2 struct {
	Value    string                  `json:"value"`
	Label    string                  `json:"label"`
	Disabled *UIOptionDisabledUnion2 `json:"disabled,omitempty"`
	Hidden   *UIOptionHiddenUnion2   `json:"hidden,omitempty"`
}

func (o *UIOption2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UIOption2) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UIOption2) GetDisabled() *UIOptionDisabledUnion2 {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIOption2) GetHidden() *UIOptionHiddenUnion2 {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type UIReadOnlyEnum6 string

const (
	UIReadOnlyEnum6Update UIReadOnlyEnum6 = "update"
	UIReadOnlyEnum6Create UIReadOnlyEnum6 = "create"
)

func (e UIReadOnlyEnum6) ToPointer() *UIReadOnlyEnum6 {
	return &e
}
func (e *UIReadOnlyEnum6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum6: %v", v)
	}
}

type UIReadOnly6 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly6) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion6Type string

const (
	UIReadOnlyUnion6TypeBoolean         UIReadOnlyUnion6Type = "boolean"
	UIReadOnlyUnion6TypeUIReadOnly6     UIReadOnlyUnion6Type = "ui:read-only_6"
	UIReadOnlyUnion6TypeUIReadOnlyEnum6 UIReadOnlyUnion6Type = "ui:read-only_enum_6"
)

type UIReadOnlyUnion6 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly6     *UIReadOnly6     `queryParam:"inline"`
	UIReadOnlyEnum6 *UIReadOnlyEnum6 `queryParam:"inline"`

	Type UIReadOnlyUnion6Type
}

func CreateUIReadOnlyUnion6Boolean(boolean bool) UIReadOnlyUnion6 {
	typ := UIReadOnlyUnion6TypeBoolean

	return UIReadOnlyUnion6{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion6UIReadOnly6(uiReadOnly6 UIReadOnly6) UIReadOnlyUnion6 {
	typ := UIReadOnlyUnion6TypeUIReadOnly6

	return UIReadOnlyUnion6{
		UIReadOnly6: &uiReadOnly6,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion6UIReadOnlyEnum6(uiReadOnlyEnum6 UIReadOnlyEnum6) UIReadOnlyUnion6 {
	typ := UIReadOnlyUnion6TypeUIReadOnlyEnum6

	return UIReadOnlyUnion6{
		UIReadOnlyEnum6: &uiReadOnlyEnum6,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion6) UnmarshalJSON(data []byte) error {

	var uiReadOnly6 UIReadOnly6 = UIReadOnly6{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly6, "", true, true); err == nil {
		u.UIReadOnly6 = &uiReadOnly6
		u.Type = UIReadOnlyUnion6TypeUIReadOnly6
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion6TypeBoolean
		return nil
	}

	var uiReadOnlyEnum6 UIReadOnlyEnum6 = UIReadOnlyEnum6("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum6, "", true, true); err == nil {
		u.UIReadOnlyEnum6 = &uiReadOnlyEnum6
		u.Type = UIReadOnlyUnion6TypeUIReadOnlyEnum6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion6", string(data))
}

func (u UIReadOnlyUnion6) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly6 != nil {
		return utils.MarshalJSON(u.UIReadOnly6, "", true)
	}

	if u.UIReadOnlyEnum6 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum6, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion6: all fields are null")
}

type UIHiddenEnum6 string

const (
	UIHiddenEnum6Update UIHiddenEnum6 = "update"
	UIHiddenEnum6Create UIHiddenEnum6 = "create"
)

func (e UIHiddenEnum6) ToPointer() *UIHiddenEnum6 {
	return &e
}
func (e *UIHiddenEnum6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum6: %v", v)
	}
}

type UIHidden6 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden6) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion6Type string

const (
	UIHiddenUnion6TypeBoolean       UIHiddenUnion6Type = "boolean"
	UIHiddenUnion6TypeUIHidden6     UIHiddenUnion6Type = "ui:hidden_6"
	UIHiddenUnion6TypeUIHiddenEnum6 UIHiddenUnion6Type = "ui:hidden_enum_6"
)

type UIHiddenUnion6 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden6     *UIHidden6     `queryParam:"inline"`
	UIHiddenEnum6 *UIHiddenEnum6 `queryParam:"inline"`

	Type UIHiddenUnion6Type
}

func CreateUIHiddenUnion6Boolean(boolean bool) UIHiddenUnion6 {
	typ := UIHiddenUnion6TypeBoolean

	return UIHiddenUnion6{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion6UIHidden6(uiHidden6 UIHidden6) UIHiddenUnion6 {
	typ := UIHiddenUnion6TypeUIHidden6

	return UIHiddenUnion6{
		UIHidden6: &uiHidden6,
		Type:      typ,
	}
}

func CreateUIHiddenUnion6UIHiddenEnum6(uiHiddenEnum6 UIHiddenEnum6) UIHiddenUnion6 {
	typ := UIHiddenUnion6TypeUIHiddenEnum6

	return UIHiddenUnion6{
		UIHiddenEnum6: &uiHiddenEnum6,
		Type:          typ,
	}
}

func (u *UIHiddenUnion6) UnmarshalJSON(data []byte) error {

	var uiHidden6 UIHidden6 = UIHidden6{}
	if err := utils.UnmarshalJSON(data, &uiHidden6, "", true, true); err == nil {
		u.UIHidden6 = &uiHidden6
		u.Type = UIHiddenUnion6TypeUIHidden6
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion6TypeBoolean
		return nil
	}

	var uiHiddenEnum6 UIHiddenEnum6 = UIHiddenEnum6("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum6, "", true, true); err == nil {
		u.UIHiddenEnum6 = &uiHiddenEnum6
		u.Type = UIHiddenUnion6TypeUIHiddenEnum6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion6", string(data))
}

func (u UIHiddenUnion6) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden6 != nil {
		return utils.MarshalJSON(u.UIHidden6, "", true)
	}

	if u.UIHiddenEnum6 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum6, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion6: all fields are null")
}

type UIDisabledEnum6 string

const (
	UIDisabledEnum6Update UIDisabledEnum6 = "update"
	UIDisabledEnum6Create UIDisabledEnum6 = "create"
)

func (e UIDisabledEnum6) ToPointer() *UIDisabledEnum6 {
	return &e
}
func (e *UIDisabledEnum6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum6: %v", v)
	}
}

type UIDisabled6 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled6) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion6Type string

const (
	UIDisabledUnion6TypeBoolean         UIDisabledUnion6Type = "boolean"
	UIDisabledUnion6TypeUIDisabled6     UIDisabledUnion6Type = "ui:disabled_6"
	UIDisabledUnion6TypeUIDisabledEnum6 UIDisabledUnion6Type = "ui:disabled_enum_6"
)

type UIDisabledUnion6 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled6     *UIDisabled6     `queryParam:"inline"`
	UIDisabledEnum6 *UIDisabledEnum6 `queryParam:"inline"`

	Type UIDisabledUnion6Type
}

func CreateUIDisabledUnion6Boolean(boolean bool) UIDisabledUnion6 {
	typ := UIDisabledUnion6TypeBoolean

	return UIDisabledUnion6{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion6UIDisabled6(uiDisabled6 UIDisabled6) UIDisabledUnion6 {
	typ := UIDisabledUnion6TypeUIDisabled6

	return UIDisabledUnion6{
		UIDisabled6: &uiDisabled6,
		Type:        typ,
	}
}

func CreateUIDisabledUnion6UIDisabledEnum6(uiDisabledEnum6 UIDisabledEnum6) UIDisabledUnion6 {
	typ := UIDisabledUnion6TypeUIDisabledEnum6

	return UIDisabledUnion6{
		UIDisabledEnum6: &uiDisabledEnum6,
		Type:            typ,
	}
}

func (u *UIDisabledUnion6) UnmarshalJSON(data []byte) error {

	var uiDisabled6 UIDisabled6 = UIDisabled6{}
	if err := utils.UnmarshalJSON(data, &uiDisabled6, "", true, true); err == nil {
		u.UIDisabled6 = &uiDisabled6
		u.Type = UIDisabledUnion6TypeUIDisabled6
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion6TypeBoolean
		return nil
	}

	var uiDisabledEnum6 UIDisabledEnum6 = UIDisabledEnum6("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum6, "", true, true); err == nil {
		u.UIDisabledEnum6 = &uiDisabledEnum6
		u.Type = UIDisabledUnion6TypeUIDisabledEnum6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion6", string(data))
}

func (u UIDisabledUnion6) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled6 != nil {
		return utils.MarshalJSON(u.UIDisabled6, "", true)
	}

	if u.UIDisabledEnum6 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum6, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion6: all fields are null")
}

type UIDescription6 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription6) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion6Type string

const (
	UIDescriptionUnion6TypeStr            UIDescriptionUnion6Type = "str"
	UIDescriptionUnion6TypeUIDescription6 UIDescriptionUnion6Type = "ui:description_6"
)

type UIDescriptionUnion6 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription6 *UIDescription6 `queryParam:"inline"`

	Type UIDescriptionUnion6Type
}

func CreateUIDescriptionUnion6Str(str string) UIDescriptionUnion6 {
	typ := UIDescriptionUnion6TypeStr

	return UIDescriptionUnion6{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion6UIDescription6(uiDescription6 UIDescription6) UIDescriptionUnion6 {
	typ := UIDescriptionUnion6TypeUIDescription6

	return UIDescriptionUnion6{
		UIDescription6: &uiDescription6,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion6) UnmarshalJSON(data []byte) error {

	var uiDescription6 UIDescription6 = UIDescription6{}
	if err := utils.UnmarshalJSON(data, &uiDescription6, "", true, true); err == nil {
		u.UIDescription6 = &uiDescription6
		u.Type = UIDescriptionUnion6TypeUIDescription6
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion6TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion6", string(data))
}

func (u UIDescriptionUnion6) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription6 != nil {
		return utils.MarshalJSON(u.UIDescription6, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion6: all fields are null")
}

type UIFormattedValue6 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue6) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesMultiSelect struct {
	Type             TypeArray2           `json:"type"`
	UIControl        UIControlMultiSelect `json:"ui:control"`
	Items            ItemsString1         `json:"items"`
	UIOptions        []UIOption2          `json:"ui:options"`
	Description      *string              `json:"description,omitempty"`
	MinItems         *float64             `json:"minItems,omitempty"`
	MaxItems         *float64             `json:"maxItems,omitempty"`
	UILabel          *string              `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion6    `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion6      `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion6    `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion6 `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue6   `json:"ui:formatted-value,omitempty"`
	UIPlaceholder    *string              `json:"ui:placeholder,omitempty"`
	Default          []string             `json:"default,omitempty"`
	Example          []string             `json:"example,omitempty"`
}

func (o *PropertiesMultiSelect) GetType() TypeArray2 {
	if o == nil {
		return TypeArray2("")
	}
	return o.Type
}

func (o *PropertiesMultiSelect) GetUIControl() UIControlMultiSelect {
	if o == nil {
		return UIControlMultiSelect("")
	}
	return o.UIControl
}

func (o *PropertiesMultiSelect) GetItems() ItemsString1 {
	if o == nil {
		return ItemsString1{}
	}
	return o.Items
}

func (o *PropertiesMultiSelect) GetUIOptions() []UIOption2 {
	if o == nil {
		return []UIOption2{}
	}
	return o.UIOptions
}

func (o *PropertiesMultiSelect) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesMultiSelect) GetMinItems() *float64 {
	if o == nil {
		return nil
	}
	return o.MinItems
}

func (o *PropertiesMultiSelect) GetMaxItems() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxItems
}

func (o *PropertiesMultiSelect) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesMultiSelect) GetUIReadOnly() *UIReadOnlyUnion6 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesMultiSelect) GetUIHidden() *UIHiddenUnion6 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesMultiSelect) GetUIDisabled() *UIDisabledUnion6 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesMultiSelect) GetUIDescription() *UIDescriptionUnion6 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesMultiSelect) GetUIFormattedValue() *UIFormattedValue6 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesMultiSelect) GetUIPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.UIPlaceholder
}

func (o *PropertiesMultiSelect) GetDefault() []string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesMultiSelect) GetExample() []string {
	if o == nil {
		return nil
	}
	return o.Example
}

type TypeString2 string

const (
	TypeString2String TypeString2 = "string"
)

func (e TypeString2) ToPointer() *TypeString2 {
	return &e
}
func (e *TypeString2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TypeString2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeString2: %v", v)
	}
}

type UIControlSelect string

const (
	UIControlSelectSelect UIControlSelect = "select"
)

func (e UIControlSelect) ToPointer() *UIControlSelect {
	return &e
}
func (e *UIControlSelect) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "select":
		*e = UIControlSelect(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlSelect: %v", v)
	}
}

type DisabledUIOptionEnum1 string

const (
	DisabledUIOptionEnum1Update DisabledUIOptionEnum1 = "update"
	DisabledUIOptionEnum1Create DisabledUIOptionEnum1 = "create"
)

func (e DisabledUIOptionEnum1) ToPointer() *DisabledUIOptionEnum1 {
	return &e
}
func (e *DisabledUIOptionEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = DisabledUIOptionEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DisabledUIOptionEnum1: %v", v)
	}
}

type DisabledUIOption1 struct {
	Expr string `json:"expr"`
}

func (o *DisabledUIOption1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionDisabledUnion1Type string

const (
	UIOptionDisabledUnion1TypeBoolean               UIOptionDisabledUnion1Type = "boolean"
	UIOptionDisabledUnion1TypeDisabledUIOption1     UIOptionDisabledUnion1Type = "disabled_ui:option_1"
	UIOptionDisabledUnion1TypeDisabledUIOptionEnum1 UIOptionDisabledUnion1Type = "disabled_ui:option_enum_1"
)

type UIOptionDisabledUnion1 struct {
	Boolean               *bool                  `queryParam:"inline"`
	DisabledUIOption1     *DisabledUIOption1     `queryParam:"inline"`
	DisabledUIOptionEnum1 *DisabledUIOptionEnum1 `queryParam:"inline"`

	Type UIOptionDisabledUnion1Type
}

func CreateUIOptionDisabledUnion1Boolean(boolean bool) UIOptionDisabledUnion1 {
	typ := UIOptionDisabledUnion1TypeBoolean

	return UIOptionDisabledUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionDisabledUnion1DisabledUIOption1(disabledUIOption1 DisabledUIOption1) UIOptionDisabledUnion1 {
	typ := UIOptionDisabledUnion1TypeDisabledUIOption1

	return UIOptionDisabledUnion1{
		DisabledUIOption1: &disabledUIOption1,
		Type:              typ,
	}
}

func CreateUIOptionDisabledUnion1DisabledUIOptionEnum1(disabledUIOptionEnum1 DisabledUIOptionEnum1) UIOptionDisabledUnion1 {
	typ := UIOptionDisabledUnion1TypeDisabledUIOptionEnum1

	return UIOptionDisabledUnion1{
		DisabledUIOptionEnum1: &disabledUIOptionEnum1,
		Type:                  typ,
	}
}

func (u *UIOptionDisabledUnion1) UnmarshalJSON(data []byte) error {

	var disabledUIOption1 DisabledUIOption1 = DisabledUIOption1{}
	if err := utils.UnmarshalJSON(data, &disabledUIOption1, "", true, true); err == nil {
		u.DisabledUIOption1 = &disabledUIOption1
		u.Type = UIOptionDisabledUnion1TypeDisabledUIOption1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionDisabledUnion1TypeBoolean
		return nil
	}

	var disabledUIOptionEnum1 DisabledUIOptionEnum1 = DisabledUIOptionEnum1("")
	if err := utils.UnmarshalJSON(data, &disabledUIOptionEnum1, "", true, true); err == nil {
		u.DisabledUIOptionEnum1 = &disabledUIOptionEnum1
		u.Type = UIOptionDisabledUnion1TypeDisabledUIOptionEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionDisabledUnion1", string(data))
}

func (u UIOptionDisabledUnion1) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.DisabledUIOption1 != nil {
		return utils.MarshalJSON(u.DisabledUIOption1, "", true)
	}

	if u.DisabledUIOptionEnum1 != nil {
		return utils.MarshalJSON(u.DisabledUIOptionEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionDisabledUnion1: all fields are null")
}

type HiddenUIOptionEnum1 string

const (
	HiddenUIOptionEnum1Update HiddenUIOptionEnum1 = "update"
	HiddenUIOptionEnum1Create HiddenUIOptionEnum1 = "create"
)

func (e HiddenUIOptionEnum1) ToPointer() *HiddenUIOptionEnum1 {
	return &e
}
func (e *HiddenUIOptionEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = HiddenUIOptionEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for HiddenUIOptionEnum1: %v", v)
	}
}

type HiddenUIOption1 struct {
	Expr string `json:"expr"`
}

func (o *HiddenUIOption1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIOptionHiddenUnion1Type string

const (
	UIOptionHiddenUnion1TypeBoolean             UIOptionHiddenUnion1Type = "boolean"
	UIOptionHiddenUnion1TypeHiddenUIOption1     UIOptionHiddenUnion1Type = "hidden_ui:option_1"
	UIOptionHiddenUnion1TypeHiddenUIOptionEnum1 UIOptionHiddenUnion1Type = "hidden_ui:option_enum_1"
)

type UIOptionHiddenUnion1 struct {
	Boolean             *bool                `queryParam:"inline"`
	HiddenUIOption1     *HiddenUIOption1     `queryParam:"inline"`
	HiddenUIOptionEnum1 *HiddenUIOptionEnum1 `queryParam:"inline"`

	Type UIOptionHiddenUnion1Type
}

func CreateUIOptionHiddenUnion1Boolean(boolean bool) UIOptionHiddenUnion1 {
	typ := UIOptionHiddenUnion1TypeBoolean

	return UIOptionHiddenUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIOptionHiddenUnion1HiddenUIOption1(hiddenUIOption1 HiddenUIOption1) UIOptionHiddenUnion1 {
	typ := UIOptionHiddenUnion1TypeHiddenUIOption1

	return UIOptionHiddenUnion1{
		HiddenUIOption1: &hiddenUIOption1,
		Type:            typ,
	}
}

func CreateUIOptionHiddenUnion1HiddenUIOptionEnum1(hiddenUIOptionEnum1 HiddenUIOptionEnum1) UIOptionHiddenUnion1 {
	typ := UIOptionHiddenUnion1TypeHiddenUIOptionEnum1

	return UIOptionHiddenUnion1{
		HiddenUIOptionEnum1: &hiddenUIOptionEnum1,
		Type:                typ,
	}
}

func (u *UIOptionHiddenUnion1) UnmarshalJSON(data []byte) error {

	var hiddenUIOption1 HiddenUIOption1 = HiddenUIOption1{}
	if err := utils.UnmarshalJSON(data, &hiddenUIOption1, "", true, true); err == nil {
		u.HiddenUIOption1 = &hiddenUIOption1
		u.Type = UIOptionHiddenUnion1TypeHiddenUIOption1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIOptionHiddenUnion1TypeBoolean
		return nil
	}

	var hiddenUIOptionEnum1 HiddenUIOptionEnum1 = HiddenUIOptionEnum1("")
	if err := utils.UnmarshalJSON(data, &hiddenUIOptionEnum1, "", true, true); err == nil {
		u.HiddenUIOptionEnum1 = &hiddenUIOptionEnum1
		u.Type = UIOptionHiddenUnion1TypeHiddenUIOptionEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIOptionHiddenUnion1", string(data))
}

func (u UIOptionHiddenUnion1) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.HiddenUIOption1 != nil {
		return utils.MarshalJSON(u.HiddenUIOption1, "", true)
	}

	if u.HiddenUIOptionEnum1 != nil {
		return utils.MarshalJSON(u.HiddenUIOptionEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIOptionHiddenUnion1: all fields are null")
}

type UIOption1 struct {
	Value    string                  `json:"value"`
	Label    string                  `json:"label"`
	Disabled *UIOptionDisabledUnion1 `json:"disabled,omitempty"`
	Hidden   *UIOptionHiddenUnion1   `json:"hidden,omitempty"`
}

func (o *UIOption1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UIOption1) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UIOption1) GetDisabled() *UIOptionDisabledUnion1 {
	if o == nil {
		return nil
	}
	return o.Disabled
}

func (o *UIOption1) GetHidden() *UIOptionHiddenUnion1 {
	if o == nil {
		return nil
	}
	return o.Hidden
}

type MinLengthAtBRANDAt4479432 struct {
}

type MinLength2 struct {
	AtBRANDAt447943 MinLengthAtBRANDAt4479432 `json:"__@BRAND@447943"`
}

func (o *MinLength2) GetAtBRANDAt447943() MinLengthAtBRANDAt4479432 {
	if o == nil {
		return MinLengthAtBRANDAt4479432{}
	}
	return o.AtBRANDAt447943
}

type MaxLengthAtBRANDAt4479432 struct {
}

type MaxLength2 struct {
	AtBRANDAt447943 MaxLengthAtBRANDAt4479432 `json:"__@BRAND@447943"`
}

func (o *MaxLength2) GetAtBRANDAt447943() MaxLengthAtBRANDAt4479432 {
	if o == nil {
		return MaxLengthAtBRANDAt4479432{}
	}
	return o.AtBRANDAt447943
}

type PatternAtBRANDAt4479432 struct {
}

type Pattern2 struct {
	AtBRANDAt447943 PatternAtBRANDAt4479432 `json:"__@BRAND@447943"`
}

func (o *Pattern2) GetAtBRANDAt447943() PatternAtBRANDAt4479432 {
	if o == nil {
		return PatternAtBRANDAt4479432{}
	}
	return o.AtBRANDAt447943
}

type UIReadOnlyEnum5 string

const (
	UIReadOnlyEnum5Update UIReadOnlyEnum5 = "update"
	UIReadOnlyEnum5Create UIReadOnlyEnum5 = "create"
)

func (e UIReadOnlyEnum5) ToPointer() *UIReadOnlyEnum5 {
	return &e
}
func (e *UIReadOnlyEnum5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum5: %v", v)
	}
}

type UIReadOnly5 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly5) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion5Type string

const (
	UIReadOnlyUnion5TypeBoolean         UIReadOnlyUnion5Type = "boolean"
	UIReadOnlyUnion5TypeUIReadOnly5     UIReadOnlyUnion5Type = "ui:read-only_5"
	UIReadOnlyUnion5TypeUIReadOnlyEnum5 UIReadOnlyUnion5Type = "ui:read-only_enum_5"
)

type UIReadOnlyUnion5 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly5     *UIReadOnly5     `queryParam:"inline"`
	UIReadOnlyEnum5 *UIReadOnlyEnum5 `queryParam:"inline"`

	Type UIReadOnlyUnion5Type
}

func CreateUIReadOnlyUnion5Boolean(boolean bool) UIReadOnlyUnion5 {
	typ := UIReadOnlyUnion5TypeBoolean

	return UIReadOnlyUnion5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion5UIReadOnly5(uiReadOnly5 UIReadOnly5) UIReadOnlyUnion5 {
	typ := UIReadOnlyUnion5TypeUIReadOnly5

	return UIReadOnlyUnion5{
		UIReadOnly5: &uiReadOnly5,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion5UIReadOnlyEnum5(uiReadOnlyEnum5 UIReadOnlyEnum5) UIReadOnlyUnion5 {
	typ := UIReadOnlyUnion5TypeUIReadOnlyEnum5

	return UIReadOnlyUnion5{
		UIReadOnlyEnum5: &uiReadOnlyEnum5,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion5) UnmarshalJSON(data []byte) error {

	var uiReadOnly5 UIReadOnly5 = UIReadOnly5{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly5, "", true, true); err == nil {
		u.UIReadOnly5 = &uiReadOnly5
		u.Type = UIReadOnlyUnion5TypeUIReadOnly5
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion5TypeBoolean
		return nil
	}

	var uiReadOnlyEnum5 UIReadOnlyEnum5 = UIReadOnlyEnum5("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum5, "", true, true); err == nil {
		u.UIReadOnlyEnum5 = &uiReadOnlyEnum5
		u.Type = UIReadOnlyUnion5TypeUIReadOnlyEnum5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion5", string(data))
}

func (u UIReadOnlyUnion5) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly5 != nil {
		return utils.MarshalJSON(u.UIReadOnly5, "", true)
	}

	if u.UIReadOnlyEnum5 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum5, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion5: all fields are null")
}

type UIHiddenEnum5 string

const (
	UIHiddenEnum5Update UIHiddenEnum5 = "update"
	UIHiddenEnum5Create UIHiddenEnum5 = "create"
)

func (e UIHiddenEnum5) ToPointer() *UIHiddenEnum5 {
	return &e
}
func (e *UIHiddenEnum5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum5: %v", v)
	}
}

type UIHidden5 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden5) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion5Type string

const (
	UIHiddenUnion5TypeBoolean       UIHiddenUnion5Type = "boolean"
	UIHiddenUnion5TypeUIHidden5     UIHiddenUnion5Type = "ui:hidden_5"
	UIHiddenUnion5TypeUIHiddenEnum5 UIHiddenUnion5Type = "ui:hidden_enum_5"
)

type UIHiddenUnion5 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden5     *UIHidden5     `queryParam:"inline"`
	UIHiddenEnum5 *UIHiddenEnum5 `queryParam:"inline"`

	Type UIHiddenUnion5Type
}

func CreateUIHiddenUnion5Boolean(boolean bool) UIHiddenUnion5 {
	typ := UIHiddenUnion5TypeBoolean

	return UIHiddenUnion5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion5UIHidden5(uiHidden5 UIHidden5) UIHiddenUnion5 {
	typ := UIHiddenUnion5TypeUIHidden5

	return UIHiddenUnion5{
		UIHidden5: &uiHidden5,
		Type:      typ,
	}
}

func CreateUIHiddenUnion5UIHiddenEnum5(uiHiddenEnum5 UIHiddenEnum5) UIHiddenUnion5 {
	typ := UIHiddenUnion5TypeUIHiddenEnum5

	return UIHiddenUnion5{
		UIHiddenEnum5: &uiHiddenEnum5,
		Type:          typ,
	}
}

func (u *UIHiddenUnion5) UnmarshalJSON(data []byte) error {

	var uiHidden5 UIHidden5 = UIHidden5{}
	if err := utils.UnmarshalJSON(data, &uiHidden5, "", true, true); err == nil {
		u.UIHidden5 = &uiHidden5
		u.Type = UIHiddenUnion5TypeUIHidden5
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion5TypeBoolean
		return nil
	}

	var uiHiddenEnum5 UIHiddenEnum5 = UIHiddenEnum5("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum5, "", true, true); err == nil {
		u.UIHiddenEnum5 = &uiHiddenEnum5
		u.Type = UIHiddenUnion5TypeUIHiddenEnum5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion5", string(data))
}

func (u UIHiddenUnion5) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden5 != nil {
		return utils.MarshalJSON(u.UIHidden5, "", true)
	}

	if u.UIHiddenEnum5 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum5, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion5: all fields are null")
}

type UIDisabledEnum5 string

const (
	UIDisabledEnum5Update UIDisabledEnum5 = "update"
	UIDisabledEnum5Create UIDisabledEnum5 = "create"
)

func (e UIDisabledEnum5) ToPointer() *UIDisabledEnum5 {
	return &e
}
func (e *UIDisabledEnum5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum5: %v", v)
	}
}

type UIDisabled5 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled5) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion5Type string

const (
	UIDisabledUnion5TypeBoolean         UIDisabledUnion5Type = "boolean"
	UIDisabledUnion5TypeUIDisabled5     UIDisabledUnion5Type = "ui:disabled_5"
	UIDisabledUnion5TypeUIDisabledEnum5 UIDisabledUnion5Type = "ui:disabled_enum_5"
)

type UIDisabledUnion5 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled5     *UIDisabled5     `queryParam:"inline"`
	UIDisabledEnum5 *UIDisabledEnum5 `queryParam:"inline"`

	Type UIDisabledUnion5Type
}

func CreateUIDisabledUnion5Boolean(boolean bool) UIDisabledUnion5 {
	typ := UIDisabledUnion5TypeBoolean

	return UIDisabledUnion5{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion5UIDisabled5(uiDisabled5 UIDisabled5) UIDisabledUnion5 {
	typ := UIDisabledUnion5TypeUIDisabled5

	return UIDisabledUnion5{
		UIDisabled5: &uiDisabled5,
		Type:        typ,
	}
}

func CreateUIDisabledUnion5UIDisabledEnum5(uiDisabledEnum5 UIDisabledEnum5) UIDisabledUnion5 {
	typ := UIDisabledUnion5TypeUIDisabledEnum5

	return UIDisabledUnion5{
		UIDisabledEnum5: &uiDisabledEnum5,
		Type:            typ,
	}
}

func (u *UIDisabledUnion5) UnmarshalJSON(data []byte) error {

	var uiDisabled5 UIDisabled5 = UIDisabled5{}
	if err := utils.UnmarshalJSON(data, &uiDisabled5, "", true, true); err == nil {
		u.UIDisabled5 = &uiDisabled5
		u.Type = UIDisabledUnion5TypeUIDisabled5
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion5TypeBoolean
		return nil
	}

	var uiDisabledEnum5 UIDisabledEnum5 = UIDisabledEnum5("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum5, "", true, true); err == nil {
		u.UIDisabledEnum5 = &uiDisabledEnum5
		u.Type = UIDisabledUnion5TypeUIDisabledEnum5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion5", string(data))
}

func (u UIDisabledUnion5) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled5 != nil {
		return utils.MarshalJSON(u.UIDisabled5, "", true)
	}

	if u.UIDisabledEnum5 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum5, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion5: all fields are null")
}

type UIDescription5 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription5) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion5Type string

const (
	UIDescriptionUnion5TypeStr            UIDescriptionUnion5Type = "str"
	UIDescriptionUnion5TypeUIDescription5 UIDescriptionUnion5Type = "ui:description_5"
)

type UIDescriptionUnion5 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription5 *UIDescription5 `queryParam:"inline"`

	Type UIDescriptionUnion5Type
}

func CreateUIDescriptionUnion5Str(str string) UIDescriptionUnion5 {
	typ := UIDescriptionUnion5TypeStr

	return UIDescriptionUnion5{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion5UIDescription5(uiDescription5 UIDescription5) UIDescriptionUnion5 {
	typ := UIDescriptionUnion5TypeUIDescription5

	return UIDescriptionUnion5{
		UIDescription5: &uiDescription5,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion5) UnmarshalJSON(data []byte) error {

	var uiDescription5 UIDescription5 = UIDescription5{}
	if err := utils.UnmarshalJSON(data, &uiDescription5, "", true, true); err == nil {
		u.UIDescription5 = &uiDescription5
		u.Type = UIDescriptionUnion5TypeUIDescription5
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion5TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion5", string(data))
}

func (u UIDescriptionUnion5) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription5 != nil {
		return utils.MarshalJSON(u.UIDescription5, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion5: all fields are null")
}

type UIFormattedValue5 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue5) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesSelect struct {
	Type             TypeString2          `json:"type"`
	UIControl        UIControlSelect      `json:"ui:control"`
	UIOptions        []UIOption1          `json:"ui:options"`
	Description      *string              `json:"description,omitempty"`
	MinLength        *MinLength2          `json:"minLength,omitempty"`
	MaxLength        *MaxLength2          `json:"maxLength,omitempty"`
	Pattern          *Pattern2            `json:"pattern,omitempty"`
	Default          *string              `json:"default,omitempty"`
	Enum             []string             `json:"enum,omitempty"`
	UILabel          *string              `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion5    `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion5      `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion5    `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion5 `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue5   `json:"ui:formatted-value,omitempty"`
	UIPlaceholder    *string              `json:"ui:placeholder,omitempty"`
}

func (o *PropertiesSelect) GetType() TypeString2 {
	if o == nil {
		return TypeString2("")
	}
	return o.Type
}

func (o *PropertiesSelect) GetUIControl() UIControlSelect {
	if o == nil {
		return UIControlSelect("")
	}
	return o.UIControl
}

func (o *PropertiesSelect) GetUIOptions() []UIOption1 {
	if o == nil {
		return []UIOption1{}
	}
	return o.UIOptions
}

func (o *PropertiesSelect) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesSelect) GetMinLength() *MinLength2 {
	if o == nil {
		return nil
	}
	return o.MinLength
}

func (o *PropertiesSelect) GetMaxLength() *MaxLength2 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *PropertiesSelect) GetPattern() *Pattern2 {
	if o == nil {
		return nil
	}
	return o.Pattern
}

func (o *PropertiesSelect) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesSelect) GetEnum() []string {
	if o == nil {
		return nil
	}
	return o.Enum
}

func (o *PropertiesSelect) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesSelect) GetUIReadOnly() *UIReadOnlyUnion5 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesSelect) GetUIHidden() *UIHiddenUnion5 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesSelect) GetUIDisabled() *UIDisabledUnion5 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesSelect) GetUIDescription() *UIDescriptionUnion5 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesSelect) GetUIFormattedValue() *UIFormattedValue5 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesSelect) GetUIPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.UIPlaceholder
}

type TypeArray1 string

const (
	TypeArray1Array TypeArray1 = "array"
)

func (e TypeArray1) ToPointer() *TypeArray1 {
	return &e
}
func (e *TypeArray1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "array":
		*e = TypeArray1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeArray1: %v", v)
	}
}

type UIControlSlider string

const (
	UIControlSliderSlider UIControlSlider = "slider"
)

func (e UIControlSlider) ToPointer() *UIControlSlider {
	return &e
}
func (e *UIControlSlider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "slider":
		*e = UIControlSlider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlSlider: %v", v)
	}
}

type TypeNumber2 string

const (
	TypeNumber2Number TypeNumber2 = "number"
)

func (e TypeNumber2) ToPointer() *TypeNumber2 {
	return &e
}
func (e *TypeNumber2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TypeNumber2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeNumber2: %v", v)
	}
}

type ItemsNumber struct {
	Type             TypeNumber2 `json:"type"`
	Description      *string     `json:"description,omitempty"`
	Minimum          *float64    `json:"minimum,omitempty"`
	ExclusiveMinimum *float64    `json:"exclusiveMinimum,omitempty"`
	Maximum          *float64    `json:"maximum,omitempty"`
	ExclusiveMaximum *float64    `json:"exclusiveMaximum,omitempty"`
	Default          *float64    `json:"default,omitempty"`
}

func (o *ItemsNumber) GetType() TypeNumber2 {
	if o == nil {
		return TypeNumber2("")
	}
	return o.Type
}

func (o *ItemsNumber) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ItemsNumber) GetMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.Minimum
}

func (o *ItemsNumber) GetExclusiveMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.ExclusiveMinimum
}

func (o *ItemsNumber) GetMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.Maximum
}

func (o *ItemsNumber) GetExclusiveMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.ExclusiveMaximum
}

func (o *ItemsNumber) GetDefault() *float64 {
	if o == nil {
		return nil
	}
	return o.Default
}

type UIReadOnlyEnum4 string

const (
	UIReadOnlyEnum4Update UIReadOnlyEnum4 = "update"
	UIReadOnlyEnum4Create UIReadOnlyEnum4 = "create"
)

func (e UIReadOnlyEnum4) ToPointer() *UIReadOnlyEnum4 {
	return &e
}
func (e *UIReadOnlyEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum4: %v", v)
	}
}

type UIReadOnly4 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion4Type string

const (
	UIReadOnlyUnion4TypeBoolean         UIReadOnlyUnion4Type = "boolean"
	UIReadOnlyUnion4TypeUIReadOnly4     UIReadOnlyUnion4Type = "ui:read-only_4"
	UIReadOnlyUnion4TypeUIReadOnlyEnum4 UIReadOnlyUnion4Type = "ui:read-only_enum_4"
)

type UIReadOnlyUnion4 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly4     *UIReadOnly4     `queryParam:"inline"`
	UIReadOnlyEnum4 *UIReadOnlyEnum4 `queryParam:"inline"`

	Type UIReadOnlyUnion4Type
}

func CreateUIReadOnlyUnion4Boolean(boolean bool) UIReadOnlyUnion4 {
	typ := UIReadOnlyUnion4TypeBoolean

	return UIReadOnlyUnion4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion4UIReadOnly4(uiReadOnly4 UIReadOnly4) UIReadOnlyUnion4 {
	typ := UIReadOnlyUnion4TypeUIReadOnly4

	return UIReadOnlyUnion4{
		UIReadOnly4: &uiReadOnly4,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion4UIReadOnlyEnum4(uiReadOnlyEnum4 UIReadOnlyEnum4) UIReadOnlyUnion4 {
	typ := UIReadOnlyUnion4TypeUIReadOnlyEnum4

	return UIReadOnlyUnion4{
		UIReadOnlyEnum4: &uiReadOnlyEnum4,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion4) UnmarshalJSON(data []byte) error {

	var uiReadOnly4 UIReadOnly4 = UIReadOnly4{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly4, "", true, true); err == nil {
		u.UIReadOnly4 = &uiReadOnly4
		u.Type = UIReadOnlyUnion4TypeUIReadOnly4
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion4TypeBoolean
		return nil
	}

	var uiReadOnlyEnum4 UIReadOnlyEnum4 = UIReadOnlyEnum4("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum4, "", true, true); err == nil {
		u.UIReadOnlyEnum4 = &uiReadOnlyEnum4
		u.Type = UIReadOnlyUnion4TypeUIReadOnlyEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion4", string(data))
}

func (u UIReadOnlyUnion4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly4 != nil {
		return utils.MarshalJSON(u.UIReadOnly4, "", true)
	}

	if u.UIReadOnlyEnum4 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion4: all fields are null")
}

type UIHiddenEnum4 string

const (
	UIHiddenEnum4Update UIHiddenEnum4 = "update"
	UIHiddenEnum4Create UIHiddenEnum4 = "create"
)

func (e UIHiddenEnum4) ToPointer() *UIHiddenEnum4 {
	return &e
}
func (e *UIHiddenEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum4: %v", v)
	}
}

type UIHidden4 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion4Type string

const (
	UIHiddenUnion4TypeBoolean       UIHiddenUnion4Type = "boolean"
	UIHiddenUnion4TypeUIHidden4     UIHiddenUnion4Type = "ui:hidden_4"
	UIHiddenUnion4TypeUIHiddenEnum4 UIHiddenUnion4Type = "ui:hidden_enum_4"
)

type UIHiddenUnion4 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden4     *UIHidden4     `queryParam:"inline"`
	UIHiddenEnum4 *UIHiddenEnum4 `queryParam:"inline"`

	Type UIHiddenUnion4Type
}

func CreateUIHiddenUnion4Boolean(boolean bool) UIHiddenUnion4 {
	typ := UIHiddenUnion4TypeBoolean

	return UIHiddenUnion4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion4UIHidden4(uiHidden4 UIHidden4) UIHiddenUnion4 {
	typ := UIHiddenUnion4TypeUIHidden4

	return UIHiddenUnion4{
		UIHidden4: &uiHidden4,
		Type:      typ,
	}
}

func CreateUIHiddenUnion4UIHiddenEnum4(uiHiddenEnum4 UIHiddenEnum4) UIHiddenUnion4 {
	typ := UIHiddenUnion4TypeUIHiddenEnum4

	return UIHiddenUnion4{
		UIHiddenEnum4: &uiHiddenEnum4,
		Type:          typ,
	}
}

func (u *UIHiddenUnion4) UnmarshalJSON(data []byte) error {

	var uiHidden4 UIHidden4 = UIHidden4{}
	if err := utils.UnmarshalJSON(data, &uiHidden4, "", true, true); err == nil {
		u.UIHidden4 = &uiHidden4
		u.Type = UIHiddenUnion4TypeUIHidden4
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion4TypeBoolean
		return nil
	}

	var uiHiddenEnum4 UIHiddenEnum4 = UIHiddenEnum4("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum4, "", true, true); err == nil {
		u.UIHiddenEnum4 = &uiHiddenEnum4
		u.Type = UIHiddenUnion4TypeUIHiddenEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion4", string(data))
}

func (u UIHiddenUnion4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden4 != nil {
		return utils.MarshalJSON(u.UIHidden4, "", true)
	}

	if u.UIHiddenEnum4 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion4: all fields are null")
}

type UIDisabledEnum4 string

const (
	UIDisabledEnum4Update UIDisabledEnum4 = "update"
	UIDisabledEnum4Create UIDisabledEnum4 = "create"
)

func (e UIDisabledEnum4) ToPointer() *UIDisabledEnum4 {
	return &e
}
func (e *UIDisabledEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum4: %v", v)
	}
}

type UIDisabled4 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion4Type string

const (
	UIDisabledUnion4TypeBoolean         UIDisabledUnion4Type = "boolean"
	UIDisabledUnion4TypeUIDisabled4     UIDisabledUnion4Type = "ui:disabled_4"
	UIDisabledUnion4TypeUIDisabledEnum4 UIDisabledUnion4Type = "ui:disabled_enum_4"
)

type UIDisabledUnion4 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled4     *UIDisabled4     `queryParam:"inline"`
	UIDisabledEnum4 *UIDisabledEnum4 `queryParam:"inline"`

	Type UIDisabledUnion4Type
}

func CreateUIDisabledUnion4Boolean(boolean bool) UIDisabledUnion4 {
	typ := UIDisabledUnion4TypeBoolean

	return UIDisabledUnion4{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion4UIDisabled4(uiDisabled4 UIDisabled4) UIDisabledUnion4 {
	typ := UIDisabledUnion4TypeUIDisabled4

	return UIDisabledUnion4{
		UIDisabled4: &uiDisabled4,
		Type:        typ,
	}
}

func CreateUIDisabledUnion4UIDisabledEnum4(uiDisabledEnum4 UIDisabledEnum4) UIDisabledUnion4 {
	typ := UIDisabledUnion4TypeUIDisabledEnum4

	return UIDisabledUnion4{
		UIDisabledEnum4: &uiDisabledEnum4,
		Type:            typ,
	}
}

func (u *UIDisabledUnion4) UnmarshalJSON(data []byte) error {

	var uiDisabled4 UIDisabled4 = UIDisabled4{}
	if err := utils.UnmarshalJSON(data, &uiDisabled4, "", true, true); err == nil {
		u.UIDisabled4 = &uiDisabled4
		u.Type = UIDisabledUnion4TypeUIDisabled4
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion4TypeBoolean
		return nil
	}

	var uiDisabledEnum4 UIDisabledEnum4 = UIDisabledEnum4("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum4, "", true, true); err == nil {
		u.UIDisabledEnum4 = &uiDisabledEnum4
		u.Type = UIDisabledUnion4TypeUIDisabledEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion4", string(data))
}

func (u UIDisabledUnion4) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled4 != nil {
		return utils.MarshalJSON(u.UIDisabled4, "", true)
	}

	if u.UIDisabledEnum4 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion4: all fields are null")
}

type UIDescription4 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion4Type string

const (
	UIDescriptionUnion4TypeStr            UIDescriptionUnion4Type = "str"
	UIDescriptionUnion4TypeUIDescription4 UIDescriptionUnion4Type = "ui:description_4"
)

type UIDescriptionUnion4 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription4 *UIDescription4 `queryParam:"inline"`

	Type UIDescriptionUnion4Type
}

func CreateUIDescriptionUnion4Str(str string) UIDescriptionUnion4 {
	typ := UIDescriptionUnion4TypeStr

	return UIDescriptionUnion4{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion4UIDescription4(uiDescription4 UIDescription4) UIDescriptionUnion4 {
	typ := UIDescriptionUnion4TypeUIDescription4

	return UIDescriptionUnion4{
		UIDescription4: &uiDescription4,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion4) UnmarshalJSON(data []byte) error {

	var uiDescription4 UIDescription4 = UIDescription4{}
	if err := utils.UnmarshalJSON(data, &uiDescription4, "", true, true); err == nil {
		u.UIDescription4 = &uiDescription4
		u.Type = UIDescriptionUnion4TypeUIDescription4
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion4TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion4", string(data))
}

func (u UIDescriptionUnion4) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription4 != nil {
		return utils.MarshalJSON(u.UIDescription4, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion4: all fields are null")
}

type UIFormattedValue4 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue4) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesSlider struct {
	Type             TypeArray1           `json:"type"`
	UIControl        UIControlSlider      `json:"ui:control"`
	UISteps          []float64            `json:"ui:steps"`
	Items            ItemsNumber          `json:"items"`
	Description      *string              `json:"description,omitempty"`
	MinItems         *float64             `json:"minItems,omitempty"`
	MaxItems         *float64             `json:"maxItems,omitempty"`
	UILabel          *string              `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion4    `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion4      `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion4    `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion4 `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue4   `json:"ui:formatted-value,omitempty"`
	Default          []float64            `json:"default,omitempty"`
}

func (o *PropertiesSlider) GetType() TypeArray1 {
	if o == nil {
		return TypeArray1("")
	}
	return o.Type
}

func (o *PropertiesSlider) GetUIControl() UIControlSlider {
	if o == nil {
		return UIControlSlider("")
	}
	return o.UIControl
}

func (o *PropertiesSlider) GetUISteps() []float64 {
	if o == nil {
		return []float64{}
	}
	return o.UISteps
}

func (o *PropertiesSlider) GetItems() ItemsNumber {
	if o == nil {
		return ItemsNumber{}
	}
	return o.Items
}

func (o *PropertiesSlider) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesSlider) GetMinItems() *float64 {
	if o == nil {
		return nil
	}
	return o.MinItems
}

func (o *PropertiesSlider) GetMaxItems() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxItems
}

func (o *PropertiesSlider) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesSlider) GetUIReadOnly() *UIReadOnlyUnion4 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesSlider) GetUIHidden() *UIHiddenUnion4 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesSlider) GetUIDisabled() *UIDisabledUnion4 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesSlider) GetUIDescription() *UIDescriptionUnion4 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesSlider) GetUIFormattedValue() *UIFormattedValue4 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesSlider) GetDefault() []float64 {
	if o == nil {
		return nil
	}
	return o.Default
}

type TypeBoolean string

const (
	TypeBooleanBoolean TypeBoolean = "boolean"
)

func (e TypeBoolean) ToPointer() *TypeBoolean {
	return &e
}
func (e *TypeBoolean) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "boolean":
		*e = TypeBoolean(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeBoolean: %v", v)
	}
}

type UIControlToggle string

const (
	UIControlToggleToggle UIControlToggle = "toggle"
)

func (e UIControlToggle) ToPointer() *UIControlToggle {
	return &e
}
func (e *UIControlToggle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "toggle":
		*e = UIControlToggle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlToggle: %v", v)
	}
}

type UIReadOnlyEnum3 string

const (
	UIReadOnlyEnum3Update UIReadOnlyEnum3 = "update"
	UIReadOnlyEnum3Create UIReadOnlyEnum3 = "create"
)

func (e UIReadOnlyEnum3) ToPointer() *UIReadOnlyEnum3 {
	return &e
}
func (e *UIReadOnlyEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum3: %v", v)
	}
}

type UIReadOnly3 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion3Type string

const (
	UIReadOnlyUnion3TypeBoolean         UIReadOnlyUnion3Type = "boolean"
	UIReadOnlyUnion3TypeUIReadOnly3     UIReadOnlyUnion3Type = "ui:read-only_3"
	UIReadOnlyUnion3TypeUIReadOnlyEnum3 UIReadOnlyUnion3Type = "ui:read-only_enum_3"
)

type UIReadOnlyUnion3 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly3     *UIReadOnly3     `queryParam:"inline"`
	UIReadOnlyEnum3 *UIReadOnlyEnum3 `queryParam:"inline"`

	Type UIReadOnlyUnion3Type
}

func CreateUIReadOnlyUnion3Boolean(boolean bool) UIReadOnlyUnion3 {
	typ := UIReadOnlyUnion3TypeBoolean

	return UIReadOnlyUnion3{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion3UIReadOnly3(uiReadOnly3 UIReadOnly3) UIReadOnlyUnion3 {
	typ := UIReadOnlyUnion3TypeUIReadOnly3

	return UIReadOnlyUnion3{
		UIReadOnly3: &uiReadOnly3,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion3UIReadOnlyEnum3(uiReadOnlyEnum3 UIReadOnlyEnum3) UIReadOnlyUnion3 {
	typ := UIReadOnlyUnion3TypeUIReadOnlyEnum3

	return UIReadOnlyUnion3{
		UIReadOnlyEnum3: &uiReadOnlyEnum3,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion3) UnmarshalJSON(data []byte) error {

	var uiReadOnly3 UIReadOnly3 = UIReadOnly3{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly3, "", true, true); err == nil {
		u.UIReadOnly3 = &uiReadOnly3
		u.Type = UIReadOnlyUnion3TypeUIReadOnly3
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion3TypeBoolean
		return nil
	}

	var uiReadOnlyEnum3 UIReadOnlyEnum3 = UIReadOnlyEnum3("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum3, "", true, true); err == nil {
		u.UIReadOnlyEnum3 = &uiReadOnlyEnum3
		u.Type = UIReadOnlyUnion3TypeUIReadOnlyEnum3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion3", string(data))
}

func (u UIReadOnlyUnion3) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly3 != nil {
		return utils.MarshalJSON(u.UIReadOnly3, "", true)
	}

	if u.UIReadOnlyEnum3 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum3, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion3: all fields are null")
}

type UIHiddenEnum3 string

const (
	UIHiddenEnum3Update UIHiddenEnum3 = "update"
	UIHiddenEnum3Create UIHiddenEnum3 = "create"
)

func (e UIHiddenEnum3) ToPointer() *UIHiddenEnum3 {
	return &e
}
func (e *UIHiddenEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum3: %v", v)
	}
}

type UIHidden3 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion3Type string

const (
	UIHiddenUnion3TypeBoolean       UIHiddenUnion3Type = "boolean"
	UIHiddenUnion3TypeUIHidden3     UIHiddenUnion3Type = "ui:hidden_3"
	UIHiddenUnion3TypeUIHiddenEnum3 UIHiddenUnion3Type = "ui:hidden_enum_3"
)

type UIHiddenUnion3 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden3     *UIHidden3     `queryParam:"inline"`
	UIHiddenEnum3 *UIHiddenEnum3 `queryParam:"inline"`

	Type UIHiddenUnion3Type
}

func CreateUIHiddenUnion3Boolean(boolean bool) UIHiddenUnion3 {
	typ := UIHiddenUnion3TypeBoolean

	return UIHiddenUnion3{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion3UIHidden3(uiHidden3 UIHidden3) UIHiddenUnion3 {
	typ := UIHiddenUnion3TypeUIHidden3

	return UIHiddenUnion3{
		UIHidden3: &uiHidden3,
		Type:      typ,
	}
}

func CreateUIHiddenUnion3UIHiddenEnum3(uiHiddenEnum3 UIHiddenEnum3) UIHiddenUnion3 {
	typ := UIHiddenUnion3TypeUIHiddenEnum3

	return UIHiddenUnion3{
		UIHiddenEnum3: &uiHiddenEnum3,
		Type:          typ,
	}
}

func (u *UIHiddenUnion3) UnmarshalJSON(data []byte) error {

	var uiHidden3 UIHidden3 = UIHidden3{}
	if err := utils.UnmarshalJSON(data, &uiHidden3, "", true, true); err == nil {
		u.UIHidden3 = &uiHidden3
		u.Type = UIHiddenUnion3TypeUIHidden3
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion3TypeBoolean
		return nil
	}

	var uiHiddenEnum3 UIHiddenEnum3 = UIHiddenEnum3("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum3, "", true, true); err == nil {
		u.UIHiddenEnum3 = &uiHiddenEnum3
		u.Type = UIHiddenUnion3TypeUIHiddenEnum3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion3", string(data))
}

func (u UIHiddenUnion3) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden3 != nil {
		return utils.MarshalJSON(u.UIHidden3, "", true)
	}

	if u.UIHiddenEnum3 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum3, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion3: all fields are null")
}

type UIDisabledEnum3 string

const (
	UIDisabledEnum3Update UIDisabledEnum3 = "update"
	UIDisabledEnum3Create UIDisabledEnum3 = "create"
)

func (e UIDisabledEnum3) ToPointer() *UIDisabledEnum3 {
	return &e
}
func (e *UIDisabledEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum3: %v", v)
	}
}

type UIDisabled3 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion3Type string

const (
	UIDisabledUnion3TypeBoolean         UIDisabledUnion3Type = "boolean"
	UIDisabledUnion3TypeUIDisabled3     UIDisabledUnion3Type = "ui:disabled_3"
	UIDisabledUnion3TypeUIDisabledEnum3 UIDisabledUnion3Type = "ui:disabled_enum_3"
)

type UIDisabledUnion3 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled3     *UIDisabled3     `queryParam:"inline"`
	UIDisabledEnum3 *UIDisabledEnum3 `queryParam:"inline"`

	Type UIDisabledUnion3Type
}

func CreateUIDisabledUnion3Boolean(boolean bool) UIDisabledUnion3 {
	typ := UIDisabledUnion3TypeBoolean

	return UIDisabledUnion3{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion3UIDisabled3(uiDisabled3 UIDisabled3) UIDisabledUnion3 {
	typ := UIDisabledUnion3TypeUIDisabled3

	return UIDisabledUnion3{
		UIDisabled3: &uiDisabled3,
		Type:        typ,
	}
}

func CreateUIDisabledUnion3UIDisabledEnum3(uiDisabledEnum3 UIDisabledEnum3) UIDisabledUnion3 {
	typ := UIDisabledUnion3TypeUIDisabledEnum3

	return UIDisabledUnion3{
		UIDisabledEnum3: &uiDisabledEnum3,
		Type:            typ,
	}
}

func (u *UIDisabledUnion3) UnmarshalJSON(data []byte) error {

	var uiDisabled3 UIDisabled3 = UIDisabled3{}
	if err := utils.UnmarshalJSON(data, &uiDisabled3, "", true, true); err == nil {
		u.UIDisabled3 = &uiDisabled3
		u.Type = UIDisabledUnion3TypeUIDisabled3
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion3TypeBoolean
		return nil
	}

	var uiDisabledEnum3 UIDisabledEnum3 = UIDisabledEnum3("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum3, "", true, true); err == nil {
		u.UIDisabledEnum3 = &uiDisabledEnum3
		u.Type = UIDisabledUnion3TypeUIDisabledEnum3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion3", string(data))
}

func (u UIDisabledUnion3) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled3 != nil {
		return utils.MarshalJSON(u.UIDisabled3, "", true)
	}

	if u.UIDisabledEnum3 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum3, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion3: all fields are null")
}

type UIDescription3 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion3Type string

const (
	UIDescriptionUnion3TypeStr            UIDescriptionUnion3Type = "str"
	UIDescriptionUnion3TypeUIDescription3 UIDescriptionUnion3Type = "ui:description_3"
)

type UIDescriptionUnion3 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription3 *UIDescription3 `queryParam:"inline"`

	Type UIDescriptionUnion3Type
}

func CreateUIDescriptionUnion3Str(str string) UIDescriptionUnion3 {
	typ := UIDescriptionUnion3TypeStr

	return UIDescriptionUnion3{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion3UIDescription3(uiDescription3 UIDescription3) UIDescriptionUnion3 {
	typ := UIDescriptionUnion3TypeUIDescription3

	return UIDescriptionUnion3{
		UIDescription3: &uiDescription3,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion3) UnmarshalJSON(data []byte) error {

	var uiDescription3 UIDescription3 = UIDescription3{}
	if err := utils.UnmarshalJSON(data, &uiDescription3, "", true, true); err == nil {
		u.UIDescription3 = &uiDescription3
		u.Type = UIDescriptionUnion3TypeUIDescription3
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion3TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion3", string(data))
}

func (u UIDescriptionUnion3) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription3 != nil {
		return utils.MarshalJSON(u.UIDescription3, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion3: all fields are null")
}

type UIFormattedValue3 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue3) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesToggle struct {
	Type             TypeBoolean          `json:"type"`
	UIControl        UIControlToggle      `json:"ui:control"`
	Description      *string              `json:"description,omitempty"`
	Default          *bool                `json:"default,omitempty"`
	UILabel          *string              `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion3    `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion3      `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion3    `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion3 `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue3   `json:"ui:formatted-value,omitempty"`
}

func (o *PropertiesToggle) GetType() TypeBoolean {
	if o == nil {
		return TypeBoolean("")
	}
	return o.Type
}

func (o *PropertiesToggle) GetUIControl() UIControlToggle {
	if o == nil {
		return UIControlToggle("")
	}
	return o.UIControl
}

func (o *PropertiesToggle) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesToggle) GetDefault() *bool {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesToggle) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesToggle) GetUIReadOnly() *UIReadOnlyUnion3 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesToggle) GetUIHidden() *UIHiddenUnion3 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesToggle) GetUIDisabled() *UIDisabledUnion3 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesToggle) GetUIDescription() *UIDescriptionUnion3 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesToggle) GetUIFormattedValue() *UIFormattedValue3 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

type TypeNumber1 string

const (
	TypeNumber1Number TypeNumber1 = "number"
)

func (e TypeNumber1) ToPointer() *TypeNumber1 {
	return &e
}
func (e *TypeNumber1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "number":
		*e = TypeNumber1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeNumber1: %v", v)
	}
}

type UIControlInput2 string

const (
	UIControlInput2Input UIControlInput2 = "input"
)

func (e UIControlInput2) ToPointer() *UIControlInput2 {
	return &e
}
func (e *UIControlInput2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "input":
		*e = UIControlInput2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlInput2: %v", v)
	}
}

type UIReadOnlyEnum2 string

const (
	UIReadOnlyEnum2Update UIReadOnlyEnum2 = "update"
	UIReadOnlyEnum2Create UIReadOnlyEnum2 = "create"
)

func (e UIReadOnlyEnum2) ToPointer() *UIReadOnlyEnum2 {
	return &e
}
func (e *UIReadOnlyEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum2: %v", v)
	}
}

type UIReadOnly2 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion2Type string

const (
	UIReadOnlyUnion2TypeBoolean         UIReadOnlyUnion2Type = "boolean"
	UIReadOnlyUnion2TypeUIReadOnly2     UIReadOnlyUnion2Type = "ui:read-only_2"
	UIReadOnlyUnion2TypeUIReadOnlyEnum2 UIReadOnlyUnion2Type = "ui:read-only_enum_2"
)

type UIReadOnlyUnion2 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly2     *UIReadOnly2     `queryParam:"inline"`
	UIReadOnlyEnum2 *UIReadOnlyEnum2 `queryParam:"inline"`

	Type UIReadOnlyUnion2Type
}

func CreateUIReadOnlyUnion2Boolean(boolean bool) UIReadOnlyUnion2 {
	typ := UIReadOnlyUnion2TypeBoolean

	return UIReadOnlyUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion2UIReadOnly2(uiReadOnly2 UIReadOnly2) UIReadOnlyUnion2 {
	typ := UIReadOnlyUnion2TypeUIReadOnly2

	return UIReadOnlyUnion2{
		UIReadOnly2: &uiReadOnly2,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion2UIReadOnlyEnum2(uiReadOnlyEnum2 UIReadOnlyEnum2) UIReadOnlyUnion2 {
	typ := UIReadOnlyUnion2TypeUIReadOnlyEnum2

	return UIReadOnlyUnion2{
		UIReadOnlyEnum2: &uiReadOnlyEnum2,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion2) UnmarshalJSON(data []byte) error {

	var uiReadOnly2 UIReadOnly2 = UIReadOnly2{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly2, "", true, true); err == nil {
		u.UIReadOnly2 = &uiReadOnly2
		u.Type = UIReadOnlyUnion2TypeUIReadOnly2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion2TypeBoolean
		return nil
	}

	var uiReadOnlyEnum2 UIReadOnlyEnum2 = UIReadOnlyEnum2("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum2, "", true, true); err == nil {
		u.UIReadOnlyEnum2 = &uiReadOnlyEnum2
		u.Type = UIReadOnlyUnion2TypeUIReadOnlyEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion2", string(data))
}

func (u UIReadOnlyUnion2) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly2 != nil {
		return utils.MarshalJSON(u.UIReadOnly2, "", true)
	}

	if u.UIReadOnlyEnum2 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion2: all fields are null")
}

type UIHiddenEnum2 string

const (
	UIHiddenEnum2Update UIHiddenEnum2 = "update"
	UIHiddenEnum2Create UIHiddenEnum2 = "create"
)

func (e UIHiddenEnum2) ToPointer() *UIHiddenEnum2 {
	return &e
}
func (e *UIHiddenEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum2: %v", v)
	}
}

type UIHidden2 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion2Type string

const (
	UIHiddenUnion2TypeBoolean       UIHiddenUnion2Type = "boolean"
	UIHiddenUnion2TypeUIHidden2     UIHiddenUnion2Type = "ui:hidden_2"
	UIHiddenUnion2TypeUIHiddenEnum2 UIHiddenUnion2Type = "ui:hidden_enum_2"
)

type UIHiddenUnion2 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden2     *UIHidden2     `queryParam:"inline"`
	UIHiddenEnum2 *UIHiddenEnum2 `queryParam:"inline"`

	Type UIHiddenUnion2Type
}

func CreateUIHiddenUnion2Boolean(boolean bool) UIHiddenUnion2 {
	typ := UIHiddenUnion2TypeBoolean

	return UIHiddenUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion2UIHidden2(uiHidden2 UIHidden2) UIHiddenUnion2 {
	typ := UIHiddenUnion2TypeUIHidden2

	return UIHiddenUnion2{
		UIHidden2: &uiHidden2,
		Type:      typ,
	}
}

func CreateUIHiddenUnion2UIHiddenEnum2(uiHiddenEnum2 UIHiddenEnum2) UIHiddenUnion2 {
	typ := UIHiddenUnion2TypeUIHiddenEnum2

	return UIHiddenUnion2{
		UIHiddenEnum2: &uiHiddenEnum2,
		Type:          typ,
	}
}

func (u *UIHiddenUnion2) UnmarshalJSON(data []byte) error {

	var uiHidden2 UIHidden2 = UIHidden2{}
	if err := utils.UnmarshalJSON(data, &uiHidden2, "", true, true); err == nil {
		u.UIHidden2 = &uiHidden2
		u.Type = UIHiddenUnion2TypeUIHidden2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion2TypeBoolean
		return nil
	}

	var uiHiddenEnum2 UIHiddenEnum2 = UIHiddenEnum2("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum2, "", true, true); err == nil {
		u.UIHiddenEnum2 = &uiHiddenEnum2
		u.Type = UIHiddenUnion2TypeUIHiddenEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion2", string(data))
}

func (u UIHiddenUnion2) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden2 != nil {
		return utils.MarshalJSON(u.UIHidden2, "", true)
	}

	if u.UIHiddenEnum2 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion2: all fields are null")
}

type UIDisabledEnum2 string

const (
	UIDisabledEnum2Update UIDisabledEnum2 = "update"
	UIDisabledEnum2Create UIDisabledEnum2 = "create"
)

func (e UIDisabledEnum2) ToPointer() *UIDisabledEnum2 {
	return &e
}
func (e *UIDisabledEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum2: %v", v)
	}
}

type UIDisabled2 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion2Type string

const (
	UIDisabledUnion2TypeBoolean         UIDisabledUnion2Type = "boolean"
	UIDisabledUnion2TypeUIDisabled2     UIDisabledUnion2Type = "ui:disabled_2"
	UIDisabledUnion2TypeUIDisabledEnum2 UIDisabledUnion2Type = "ui:disabled_enum_2"
)

type UIDisabledUnion2 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled2     *UIDisabled2     `queryParam:"inline"`
	UIDisabledEnum2 *UIDisabledEnum2 `queryParam:"inline"`

	Type UIDisabledUnion2Type
}

func CreateUIDisabledUnion2Boolean(boolean bool) UIDisabledUnion2 {
	typ := UIDisabledUnion2TypeBoolean

	return UIDisabledUnion2{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion2UIDisabled2(uiDisabled2 UIDisabled2) UIDisabledUnion2 {
	typ := UIDisabledUnion2TypeUIDisabled2

	return UIDisabledUnion2{
		UIDisabled2: &uiDisabled2,
		Type:        typ,
	}
}

func CreateUIDisabledUnion2UIDisabledEnum2(uiDisabledEnum2 UIDisabledEnum2) UIDisabledUnion2 {
	typ := UIDisabledUnion2TypeUIDisabledEnum2

	return UIDisabledUnion2{
		UIDisabledEnum2: &uiDisabledEnum2,
		Type:            typ,
	}
}

func (u *UIDisabledUnion2) UnmarshalJSON(data []byte) error {

	var uiDisabled2 UIDisabled2 = UIDisabled2{}
	if err := utils.UnmarshalJSON(data, &uiDisabled2, "", true, true); err == nil {
		u.UIDisabled2 = &uiDisabled2
		u.Type = UIDisabledUnion2TypeUIDisabled2
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion2TypeBoolean
		return nil
	}

	var uiDisabledEnum2 UIDisabledEnum2 = UIDisabledEnum2("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum2, "", true, true); err == nil {
		u.UIDisabledEnum2 = &uiDisabledEnum2
		u.Type = UIDisabledUnion2TypeUIDisabledEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion2", string(data))
}

func (u UIDisabledUnion2) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled2 != nil {
		return utils.MarshalJSON(u.UIDisabled2, "", true)
	}

	if u.UIDisabledEnum2 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion2: all fields are null")
}

type UIDescription2 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion2Type string

const (
	UIDescriptionUnion2TypeStr            UIDescriptionUnion2Type = "str"
	UIDescriptionUnion2TypeUIDescription2 UIDescriptionUnion2Type = "ui:description_2"
)

type UIDescriptionUnion2 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription2 *UIDescription2 `queryParam:"inline"`

	Type UIDescriptionUnion2Type
}

func CreateUIDescriptionUnion2Str(str string) UIDescriptionUnion2 {
	typ := UIDescriptionUnion2TypeStr

	return UIDescriptionUnion2{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion2UIDescription2(uiDescription2 UIDescription2) UIDescriptionUnion2 {
	typ := UIDescriptionUnion2TypeUIDescription2

	return UIDescriptionUnion2{
		UIDescription2: &uiDescription2,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion2) UnmarshalJSON(data []byte) error {

	var uiDescription2 UIDescription2 = UIDescription2{}
	if err := utils.UnmarshalJSON(data, &uiDescription2, "", true, true); err == nil {
		u.UIDescription2 = &uiDescription2
		u.Type = UIDescriptionUnion2TypeUIDescription2
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion2TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion2", string(data))
}

func (u UIDescriptionUnion2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription2 != nil {
		return utils.MarshalJSON(u.UIDescription2, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion2: all fields are null")
}

type UIFormattedValue2 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue2) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesNumber struct {
	Type             TypeNumber1          `json:"type"`
	UIControl        UIControlInput2      `json:"ui:control"`
	Minimum          *float64             `json:"minimum,omitempty"`
	Maximum          *float64             `json:"maximum,omitempty"`
	Description      *string              `json:"description,omitempty"`
	Default          *float64             `json:"default,omitempty"`
	ExclusiveMinimum *float64             `json:"exclusiveMinimum,omitempty"`
	ExclusiveMaximum *float64             `json:"exclusiveMaximum,omitempty"`
	UILabel          *string              `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion2    `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion2      `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion2    `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion2 `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue2   `json:"ui:formatted-value,omitempty"`
	UIPlaceholder    *string              `json:"ui:placeholder,omitempty"`
}

func (o *PropertiesNumber) GetType() TypeNumber1 {
	if o == nil {
		return TypeNumber1("")
	}
	return o.Type
}

func (o *PropertiesNumber) GetUIControl() UIControlInput2 {
	if o == nil {
		return UIControlInput2("")
	}
	return o.UIControl
}

func (o *PropertiesNumber) GetMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.Minimum
}

func (o *PropertiesNumber) GetMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.Maximum
}

func (o *PropertiesNumber) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesNumber) GetDefault() *float64 {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesNumber) GetExclusiveMinimum() *float64 {
	if o == nil {
		return nil
	}
	return o.ExclusiveMinimum
}

func (o *PropertiesNumber) GetExclusiveMaximum() *float64 {
	if o == nil {
		return nil
	}
	return o.ExclusiveMaximum
}

func (o *PropertiesNumber) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesNumber) GetUIReadOnly() *UIReadOnlyUnion2 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesNumber) GetUIHidden() *UIHiddenUnion2 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesNumber) GetUIDisabled() *UIDisabledUnion2 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesNumber) GetUIDescription() *UIDescriptionUnion2 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesNumber) GetUIFormattedValue() *UIFormattedValue2 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesNumber) GetUIPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.UIPlaceholder
}

type TypeString1 string

const (
	TypeString1String TypeString1 = "string"
)

func (e TypeString1) ToPointer() *TypeString1 {
	return &e
}
func (e *TypeString1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "string":
		*e = TypeString1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TypeString1: %v", v)
	}
}

type UIControlInput1 string

const (
	UIControlInput1Input UIControlInput1 = "input"
)

func (e UIControlInput1) ToPointer() *UIControlInput1 {
	return &e
}
func (e *UIControlInput1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "input":
		*e = UIControlInput1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIControlInput1: %v", v)
	}
}

type MinLengthAtBRANDAt4479431 struct {
}

type MinLength1 struct {
	AtBRANDAt447943 MinLengthAtBRANDAt4479431 `json:"__@BRAND@447943"`
}

func (o *MinLength1) GetAtBRANDAt447943() MinLengthAtBRANDAt4479431 {
	if o == nil {
		return MinLengthAtBRANDAt4479431{}
	}
	return o.AtBRANDAt447943
}

type MaxLengthAtBRANDAt4479431 struct {
}

type MaxLength1 struct {
	AtBRANDAt447943 MaxLengthAtBRANDAt4479431 `json:"__@BRAND@447943"`
}

func (o *MaxLength1) GetAtBRANDAt447943() MaxLengthAtBRANDAt4479431 {
	if o == nil {
		return MaxLengthAtBRANDAt4479431{}
	}
	return o.AtBRANDAt447943
}

type PatternAtBRANDAt4479431 struct {
}

type Pattern1 struct {
	AtBRANDAt447943 PatternAtBRANDAt4479431 `json:"__@BRAND@447943"`
}

func (o *Pattern1) GetAtBRANDAt447943() PatternAtBRANDAt4479431 {
	if o == nil {
		return PatternAtBRANDAt4479431{}
	}
	return o.AtBRANDAt447943
}

type UIReadOnlyEnum1 string

const (
	UIReadOnlyEnum1Update UIReadOnlyEnum1 = "update"
	UIReadOnlyEnum1Create UIReadOnlyEnum1 = "create"
)

func (e UIReadOnlyEnum1) ToPointer() *UIReadOnlyEnum1 {
	return &e
}
func (e *UIReadOnlyEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIReadOnlyEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIReadOnlyEnum1: %v", v)
	}
}

type UIReadOnly1 struct {
	Expr string `json:"expr"`
}

func (o *UIReadOnly1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIReadOnlyUnion1Type string

const (
	UIReadOnlyUnion1TypeBoolean         UIReadOnlyUnion1Type = "boolean"
	UIReadOnlyUnion1TypeUIReadOnly1     UIReadOnlyUnion1Type = "ui:read-only_1"
	UIReadOnlyUnion1TypeUIReadOnlyEnum1 UIReadOnlyUnion1Type = "ui:read-only_enum_1"
)

type UIReadOnlyUnion1 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIReadOnly1     *UIReadOnly1     `queryParam:"inline"`
	UIReadOnlyEnum1 *UIReadOnlyEnum1 `queryParam:"inline"`

	Type UIReadOnlyUnion1Type
}

func CreateUIReadOnlyUnion1Boolean(boolean bool) UIReadOnlyUnion1 {
	typ := UIReadOnlyUnion1TypeBoolean

	return UIReadOnlyUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIReadOnlyUnion1UIReadOnly1(uiReadOnly1 UIReadOnly1) UIReadOnlyUnion1 {
	typ := UIReadOnlyUnion1TypeUIReadOnly1

	return UIReadOnlyUnion1{
		UIReadOnly1: &uiReadOnly1,
		Type:        typ,
	}
}

func CreateUIReadOnlyUnion1UIReadOnlyEnum1(uiReadOnlyEnum1 UIReadOnlyEnum1) UIReadOnlyUnion1 {
	typ := UIReadOnlyUnion1TypeUIReadOnlyEnum1

	return UIReadOnlyUnion1{
		UIReadOnlyEnum1: &uiReadOnlyEnum1,
		Type:            typ,
	}
}

func (u *UIReadOnlyUnion1) UnmarshalJSON(data []byte) error {

	var uiReadOnly1 UIReadOnly1 = UIReadOnly1{}
	if err := utils.UnmarshalJSON(data, &uiReadOnly1, "", true, true); err == nil {
		u.UIReadOnly1 = &uiReadOnly1
		u.Type = UIReadOnlyUnion1TypeUIReadOnly1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIReadOnlyUnion1TypeBoolean
		return nil
	}

	var uiReadOnlyEnum1 UIReadOnlyEnum1 = UIReadOnlyEnum1("")
	if err := utils.UnmarshalJSON(data, &uiReadOnlyEnum1, "", true, true); err == nil {
		u.UIReadOnlyEnum1 = &uiReadOnlyEnum1
		u.Type = UIReadOnlyUnion1TypeUIReadOnlyEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIReadOnlyUnion1", string(data))
}

func (u UIReadOnlyUnion1) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIReadOnly1 != nil {
		return utils.MarshalJSON(u.UIReadOnly1, "", true)
	}

	if u.UIReadOnlyEnum1 != nil {
		return utils.MarshalJSON(u.UIReadOnlyEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIReadOnlyUnion1: all fields are null")
}

type UIHiddenEnum1 string

const (
	UIHiddenEnum1Update UIHiddenEnum1 = "update"
	UIHiddenEnum1Create UIHiddenEnum1 = "create"
)

func (e UIHiddenEnum1) ToPointer() *UIHiddenEnum1 {
	return &e
}
func (e *UIHiddenEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIHiddenEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIHiddenEnum1: %v", v)
	}
}

type UIHidden1 struct {
	Expr string `json:"expr"`
}

func (o *UIHidden1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIHiddenUnion1Type string

const (
	UIHiddenUnion1TypeBoolean       UIHiddenUnion1Type = "boolean"
	UIHiddenUnion1TypeUIHidden1     UIHiddenUnion1Type = "ui:hidden_1"
	UIHiddenUnion1TypeUIHiddenEnum1 UIHiddenUnion1Type = "ui:hidden_enum_1"
)

type UIHiddenUnion1 struct {
	Boolean       *bool          `queryParam:"inline"`
	UIHidden1     *UIHidden1     `queryParam:"inline"`
	UIHiddenEnum1 *UIHiddenEnum1 `queryParam:"inline"`

	Type UIHiddenUnion1Type
}

func CreateUIHiddenUnion1Boolean(boolean bool) UIHiddenUnion1 {
	typ := UIHiddenUnion1TypeBoolean

	return UIHiddenUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIHiddenUnion1UIHidden1(uiHidden1 UIHidden1) UIHiddenUnion1 {
	typ := UIHiddenUnion1TypeUIHidden1

	return UIHiddenUnion1{
		UIHidden1: &uiHidden1,
		Type:      typ,
	}
}

func CreateUIHiddenUnion1UIHiddenEnum1(uiHiddenEnum1 UIHiddenEnum1) UIHiddenUnion1 {
	typ := UIHiddenUnion1TypeUIHiddenEnum1

	return UIHiddenUnion1{
		UIHiddenEnum1: &uiHiddenEnum1,
		Type:          typ,
	}
}

func (u *UIHiddenUnion1) UnmarshalJSON(data []byte) error {

	var uiHidden1 UIHidden1 = UIHidden1{}
	if err := utils.UnmarshalJSON(data, &uiHidden1, "", true, true); err == nil {
		u.UIHidden1 = &uiHidden1
		u.Type = UIHiddenUnion1TypeUIHidden1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIHiddenUnion1TypeBoolean
		return nil
	}

	var uiHiddenEnum1 UIHiddenEnum1 = UIHiddenEnum1("")
	if err := utils.UnmarshalJSON(data, &uiHiddenEnum1, "", true, true); err == nil {
		u.UIHiddenEnum1 = &uiHiddenEnum1
		u.Type = UIHiddenUnion1TypeUIHiddenEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIHiddenUnion1", string(data))
}

func (u UIHiddenUnion1) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIHidden1 != nil {
		return utils.MarshalJSON(u.UIHidden1, "", true)
	}

	if u.UIHiddenEnum1 != nil {
		return utils.MarshalJSON(u.UIHiddenEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIHiddenUnion1: all fields are null")
}

type UIDisabledEnum1 string

const (
	UIDisabledEnum1Update UIDisabledEnum1 = "update"
	UIDisabledEnum1Create UIDisabledEnum1 = "create"
)

func (e UIDisabledEnum1) ToPointer() *UIDisabledEnum1 {
	return &e
}
func (e *UIDisabledEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "update":
		fallthrough
	case "create":
		*e = UIDisabledEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UIDisabledEnum1: %v", v)
	}
}

type UIDisabled1 struct {
	Expr string `json:"expr"`
}

func (o *UIDisabled1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDisabledUnion1Type string

const (
	UIDisabledUnion1TypeBoolean         UIDisabledUnion1Type = "boolean"
	UIDisabledUnion1TypeUIDisabled1     UIDisabledUnion1Type = "ui:disabled_1"
	UIDisabledUnion1TypeUIDisabledEnum1 UIDisabledUnion1Type = "ui:disabled_enum_1"
)

type UIDisabledUnion1 struct {
	Boolean         *bool            `queryParam:"inline"`
	UIDisabled1     *UIDisabled1     `queryParam:"inline"`
	UIDisabledEnum1 *UIDisabledEnum1 `queryParam:"inline"`

	Type UIDisabledUnion1Type
}

func CreateUIDisabledUnion1Boolean(boolean bool) UIDisabledUnion1 {
	typ := UIDisabledUnion1TypeBoolean

	return UIDisabledUnion1{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateUIDisabledUnion1UIDisabled1(uiDisabled1 UIDisabled1) UIDisabledUnion1 {
	typ := UIDisabledUnion1TypeUIDisabled1

	return UIDisabledUnion1{
		UIDisabled1: &uiDisabled1,
		Type:        typ,
	}
}

func CreateUIDisabledUnion1UIDisabledEnum1(uiDisabledEnum1 UIDisabledEnum1) UIDisabledUnion1 {
	typ := UIDisabledUnion1TypeUIDisabledEnum1

	return UIDisabledUnion1{
		UIDisabledEnum1: &uiDisabledEnum1,
		Type:            typ,
	}
}

func (u *UIDisabledUnion1) UnmarshalJSON(data []byte) error {

	var uiDisabled1 UIDisabled1 = UIDisabled1{}
	if err := utils.UnmarshalJSON(data, &uiDisabled1, "", true, true); err == nil {
		u.UIDisabled1 = &uiDisabled1
		u.Type = UIDisabledUnion1TypeUIDisabled1
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UIDisabledUnion1TypeBoolean
		return nil
	}

	var uiDisabledEnum1 UIDisabledEnum1 = UIDisabledEnum1("")
	if err := utils.UnmarshalJSON(data, &uiDisabledEnum1, "", true, true); err == nil {
		u.UIDisabledEnum1 = &uiDisabledEnum1
		u.Type = UIDisabledUnion1TypeUIDisabledEnum1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDisabledUnion1", string(data))
}

func (u UIDisabledUnion1) MarshalJSON() ([]byte, error) {
	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.UIDisabled1 != nil {
		return utils.MarshalJSON(u.UIDisabled1, "", true)
	}

	if u.UIDisabledEnum1 != nil {
		return utils.MarshalJSON(u.UIDisabledEnum1, "", true)
	}

	return nil, errors.New("could not marshal union type UIDisabledUnion1: all fields are null")
}

type UIDescription1 struct {
	Expr string `json:"expr"`
}

func (o *UIDescription1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type UIDescriptionUnion1Type string

const (
	UIDescriptionUnion1TypeStr            UIDescriptionUnion1Type = "str"
	UIDescriptionUnion1TypeUIDescription1 UIDescriptionUnion1Type = "ui:description_1"
)

type UIDescriptionUnion1 struct {
	Str            *string         `queryParam:"inline"`
	UIDescription1 *UIDescription1 `queryParam:"inline"`

	Type UIDescriptionUnion1Type
}

func CreateUIDescriptionUnion1Str(str string) UIDescriptionUnion1 {
	typ := UIDescriptionUnion1TypeStr

	return UIDescriptionUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateUIDescriptionUnion1UIDescription1(uiDescription1 UIDescription1) UIDescriptionUnion1 {
	typ := UIDescriptionUnion1TypeUIDescription1

	return UIDescriptionUnion1{
		UIDescription1: &uiDescription1,
		Type:           typ,
	}
}

func (u *UIDescriptionUnion1) UnmarshalJSON(data []byte) error {

	var uiDescription1 UIDescription1 = UIDescription1{}
	if err := utils.UnmarshalJSON(data, &uiDescription1, "", true, true); err == nil {
		u.UIDescription1 = &uiDescription1
		u.Type = UIDescriptionUnion1TypeUIDescription1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UIDescriptionUnion1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UIDescriptionUnion1", string(data))
}

func (u UIDescriptionUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UIDescription1 != nil {
		return utils.MarshalJSON(u.UIDescription1, "", true)
	}

	return nil, errors.New("could not marshal union type UIDescriptionUnion1: all fields are null")
}

type UIFormattedValue1 struct {
	Expr string `json:"expr"`
}

func (o *UIFormattedValue1) GetExpr() string {
	if o == nil {
		return ""
	}
	return o.Expr
}

type PropertiesStringInput struct {
	Type             TypeString1          `json:"type"`
	UIControl        UIControlInput1      `json:"ui:control"`
	Description      *string              `json:"description,omitempty"`
	MinLength        *MinLength1          `json:"minLength,omitempty"`
	MaxLength        *MaxLength1          `json:"maxLength,omitempty"`
	Pattern          *Pattern1            `json:"pattern,omitempty"`
	Default          *string              `json:"default,omitempty"`
	Enum             []string             `json:"enum,omitempty"`
	UILabel          *string              `json:"ui:label,omitempty"`
	UIReadOnly       *UIReadOnlyUnion1    `json:"ui:read-only,omitempty"`
	UIHidden         *UIHiddenUnion1      `json:"ui:hidden,omitempty"`
	UIDisabled       *UIDisabledUnion1    `json:"ui:disabled,omitempty"`
	UIDescription    *UIDescriptionUnion1 `json:"ui:description,omitempty"`
	UIFormattedValue *UIFormattedValue1   `json:"ui:formatted-value,omitempty"`
	UIPlaceholder    *string              `json:"ui:placeholder,omitempty"`
}

func (o *PropertiesStringInput) GetType() TypeString1 {
	if o == nil {
		return TypeString1("")
	}
	return o.Type
}

func (o *PropertiesStringInput) GetUIControl() UIControlInput1 {
	if o == nil {
		return UIControlInput1("")
	}
	return o.UIControl
}

func (o *PropertiesStringInput) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PropertiesStringInput) GetMinLength() *MinLength1 {
	if o == nil {
		return nil
	}
	return o.MinLength
}

func (o *PropertiesStringInput) GetMaxLength() *MaxLength1 {
	if o == nil {
		return nil
	}
	return o.MaxLength
}

func (o *PropertiesStringInput) GetPattern() *Pattern1 {
	if o == nil {
		return nil
	}
	return o.Pattern
}

func (o *PropertiesStringInput) GetDefault() *string {
	if o == nil {
		return nil
	}
	return o.Default
}

func (o *PropertiesStringInput) GetEnum() []string {
	if o == nil {
		return nil
	}
	return o.Enum
}

func (o *PropertiesStringInput) GetUILabel() *string {
	if o == nil {
		return nil
	}
	return o.UILabel
}

func (o *PropertiesStringInput) GetUIReadOnly() *UIReadOnlyUnion1 {
	if o == nil {
		return nil
	}
	return o.UIReadOnly
}

func (o *PropertiesStringInput) GetUIHidden() *UIHiddenUnion1 {
	if o == nil {
		return nil
	}
	return o.UIHidden
}

func (o *PropertiesStringInput) GetUIDisabled() *UIDisabledUnion1 {
	if o == nil {
		return nil
	}
	return o.UIDisabled
}

func (o *PropertiesStringInput) GetUIDescription() *UIDescriptionUnion1 {
	if o == nil {
		return nil
	}
	return o.UIDescription
}

func (o *PropertiesStringInput) GetUIFormattedValue() *UIFormattedValue1 {
	if o == nil {
		return nil
	}
	return o.UIFormattedValue
}

func (o *PropertiesStringInput) GetUIPlaceholder() *string {
	if o == nil {
		return nil
	}
	return o.UIPlaceholder
}

type PropertiesUnionType string

const (
	PropertiesUnionTypePropertiesStringInput       PropertiesUnionType = "properties_String_Input"
	PropertiesUnionTypePropertiesNumber            PropertiesUnionType = "properties_Number"
	PropertiesUnionTypePropertiesToggle            PropertiesUnionType = "properties_Toggle"
	PropertiesUnionTypePropertiesSlider            PropertiesUnionType = "properties_Slider"
	PropertiesUnionTypePropertiesSelect            PropertiesUnionType = "properties_Select"
	PropertiesUnionTypePropertiesMultiSelect       PropertiesUnionType = "properties_MultiSelect"
	PropertiesUnionTypePropertiesVercelRegion      PropertiesUnionType = "properties_VercelRegion"
	PropertiesUnionTypePropertiesMultiVercelRegion PropertiesUnionType = "properties_MultiVercelRegion"
	PropertiesUnionTypeProperties                  PropertiesUnionType = "properties"
)

type PropertiesUnion struct {
	PropertiesStringInput       *PropertiesStringInput       `queryParam:"inline"`
	PropertiesNumber            *PropertiesNumber            `queryParam:"inline"`
	PropertiesToggle            *PropertiesToggle            `queryParam:"inline"`
	PropertiesSlider            *PropertiesSlider            `queryParam:"inline"`
	PropertiesSelect            *PropertiesSelect            `queryParam:"inline"`
	PropertiesMultiSelect       *PropertiesMultiSelect       `queryParam:"inline"`
	PropertiesVercelRegion      *PropertiesVercelRegion      `queryParam:"inline"`
	PropertiesMultiVercelRegion *PropertiesMultiVercelRegion `queryParam:"inline"`
	Properties                  *Properties                  `queryParam:"inline"`

	Type PropertiesUnionType
}

func CreatePropertiesUnionPropertiesStringInput(propertiesStringInput PropertiesStringInput) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesStringInput

	return PropertiesUnion{
		PropertiesStringInput: &propertiesStringInput,
		Type:                  typ,
	}
}

func CreatePropertiesUnionPropertiesNumber(propertiesNumber PropertiesNumber) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesNumber

	return PropertiesUnion{
		PropertiesNumber: &propertiesNumber,
		Type:             typ,
	}
}

func CreatePropertiesUnionPropertiesToggle(propertiesToggle PropertiesToggle) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesToggle

	return PropertiesUnion{
		PropertiesToggle: &propertiesToggle,
		Type:             typ,
	}
}

func CreatePropertiesUnionPropertiesSlider(propertiesSlider PropertiesSlider) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesSlider

	return PropertiesUnion{
		PropertiesSlider: &propertiesSlider,
		Type:             typ,
	}
}

func CreatePropertiesUnionPropertiesSelect(propertiesSelect PropertiesSelect) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesSelect

	return PropertiesUnion{
		PropertiesSelect: &propertiesSelect,
		Type:             typ,
	}
}

func CreatePropertiesUnionPropertiesMultiSelect(propertiesMultiSelect PropertiesMultiSelect) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesMultiSelect

	return PropertiesUnion{
		PropertiesMultiSelect: &propertiesMultiSelect,
		Type:                  typ,
	}
}

func CreatePropertiesUnionPropertiesVercelRegion(propertiesVercelRegion PropertiesVercelRegion) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesVercelRegion

	return PropertiesUnion{
		PropertiesVercelRegion: &propertiesVercelRegion,
		Type:                   typ,
	}
}

func CreatePropertiesUnionPropertiesMultiVercelRegion(propertiesMultiVercelRegion PropertiesMultiVercelRegion) PropertiesUnion {
	typ := PropertiesUnionTypePropertiesMultiVercelRegion

	return PropertiesUnion{
		PropertiesMultiVercelRegion: &propertiesMultiVercelRegion,
		Type:                        typ,
	}
}

func CreatePropertiesUnionProperties(properties Properties) PropertiesUnion {
	typ := PropertiesUnionTypeProperties

	return PropertiesUnion{
		Properties: &properties,
		Type:       typ,
	}
}

func (u *PropertiesUnion) UnmarshalJSON(data []byte) error {

	var properties Properties = Properties{}
	if err := utils.UnmarshalJSON(data, &properties, "", true, true); err == nil {
		u.Properties = &properties
		u.Type = PropertiesUnionTypeProperties
		return nil
	}

	var propertiesToggle PropertiesToggle = PropertiesToggle{}
	if err := utils.UnmarshalJSON(data, &propertiesToggle, "", true, true); err == nil {
		u.PropertiesToggle = &propertiesToggle
		u.Type = PropertiesUnionTypePropertiesToggle
		return nil
	}

	var propertiesSlider PropertiesSlider = PropertiesSlider{}
	if err := utils.UnmarshalJSON(data, &propertiesSlider, "", true, true); err == nil {
		u.PropertiesSlider = &propertiesSlider
		u.Type = PropertiesUnionTypePropertiesSlider
		return nil
	}

	var propertiesStringInput PropertiesStringInput = PropertiesStringInput{}
	if err := utils.UnmarshalJSON(data, &propertiesStringInput, "", true, true); err == nil {
		u.PropertiesStringInput = &propertiesStringInput
		u.Type = PropertiesUnionTypePropertiesStringInput
		return nil
	}

	var propertiesNumber PropertiesNumber = PropertiesNumber{}
	if err := utils.UnmarshalJSON(data, &propertiesNumber, "", true, true); err == nil {
		u.PropertiesNumber = &propertiesNumber
		u.Type = PropertiesUnionTypePropertiesNumber
		return nil
	}

	var propertiesSelect PropertiesSelect = PropertiesSelect{}
	if err := utils.UnmarshalJSON(data, &propertiesSelect, "", true, true); err == nil {
		u.PropertiesSelect = &propertiesSelect
		u.Type = PropertiesUnionTypePropertiesSelect
		return nil
	}

	var propertiesMultiSelect PropertiesMultiSelect = PropertiesMultiSelect{}
	if err := utils.UnmarshalJSON(data, &propertiesMultiSelect, "", true, true); err == nil {
		u.PropertiesMultiSelect = &propertiesMultiSelect
		u.Type = PropertiesUnionTypePropertiesMultiSelect
		return nil
	}

	var propertiesVercelRegion PropertiesVercelRegion = PropertiesVercelRegion{}
	if err := utils.UnmarshalJSON(data, &propertiesVercelRegion, "", true, true); err == nil {
		u.PropertiesVercelRegion = &propertiesVercelRegion
		u.Type = PropertiesUnionTypePropertiesVercelRegion
		return nil
	}

	var propertiesMultiVercelRegion PropertiesMultiVercelRegion = PropertiesMultiVercelRegion{}
	if err := utils.UnmarshalJSON(data, &propertiesMultiVercelRegion, "", true, true); err == nil {
		u.PropertiesMultiVercelRegion = &propertiesMultiVercelRegion
		u.Type = PropertiesUnionTypePropertiesMultiVercelRegion
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PropertiesUnion", string(data))
}

func (u PropertiesUnion) MarshalJSON() ([]byte, error) {
	if u.PropertiesStringInput != nil {
		return utils.MarshalJSON(u.PropertiesStringInput, "", true)
	}

	if u.PropertiesNumber != nil {
		return utils.MarshalJSON(u.PropertiesNumber, "", true)
	}

	if u.PropertiesToggle != nil {
		return utils.MarshalJSON(u.PropertiesToggle, "", true)
	}

	if u.PropertiesSlider != nil {
		return utils.MarshalJSON(u.PropertiesSlider, "", true)
	}

	if u.PropertiesSelect != nil {
		return utils.MarshalJSON(u.PropertiesSelect, "", true)
	}

	if u.PropertiesMultiSelect != nil {
		return utils.MarshalJSON(u.PropertiesMultiSelect, "", true)
	}

	if u.PropertiesVercelRegion != nil {
		return utils.MarshalJSON(u.PropertiesVercelRegion, "", true)
	}

	if u.PropertiesMultiVercelRegion != nil {
		return utils.MarshalJSON(u.PropertiesMultiVercelRegion, "", true)
	}

	if u.Properties != nil {
		return utils.MarshalJSON(u.Properties, "", true)
	}

	return nil, errors.New("could not marshal union type PropertiesUnion: all fields are null")
}

type MetadataSchema struct {
	Type       GetConfigurationProductsType `json:"type"`
	Properties map[string]PropertiesUnion   `json:"properties"`
	Required   []string                     `json:"required,omitempty"`
}

func (o *MetadataSchema) GetType() GetConfigurationProductsType {
	if o == nil {
		return GetConfigurationProductsType("")
	}
	return o.Type
}

func (o *MetadataSchema) GetProperties() map[string]PropertiesUnion {
	if o == nil {
		return map[string]PropertiesUnion{}
	}
	return o.Properties
}

func (o *MetadataSchema) GetRequired() []string {
	if o == nil {
		return nil
	}
	return o.Required
}

type Product struct {
	ID              string           `json:"id"`
	Slug            string           `json:"slug"`
	Name            string           `json:"name"`
	Protocols       Protocols        `json:"protocols"`
	PrimaryProtocol *PrimaryProtocol `json:"primaryProtocol,omitempty"`
	MetadataSchema  MetadataSchema   `json:"metadataSchema"`
}

func (o *Product) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Product) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *Product) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Product) GetProtocols() Protocols {
	if o == nil {
		return Protocols{}
	}
	return o.Protocols
}

func (o *Product) GetPrimaryProtocol() *PrimaryProtocol {
	if o == nil {
		return nil
	}
	return o.PrimaryProtocol
}

func (o *Product) GetMetadataSchema() MetadataSchema {
	if o == nil {
		return MetadataSchema{}
	}
	return o.MetadataSchema
}

type GetConfigurationProductsIntegration struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
	Name string `json:"name"`
}

func (o *GetConfigurationProductsIntegration) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurationProductsIntegration) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfigurationProductsIntegration) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type Configuration struct {
	ID string `json:"id"`
}

func (o *Configuration) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetConfigurationProductsResponseBody - List of products available for this integration configuration
type GetConfigurationProductsResponseBody struct {
	Products      []Product                           `json:"products"`
	Integration   GetConfigurationProductsIntegration `json:"integration"`
	Configuration Configuration                       `json:"configuration"`
}

func (o *GetConfigurationProductsResponseBody) GetProducts() []Product {
	if o == nil {
		return []Product{}
	}
	return o.Products
}

func (o *GetConfigurationProductsResponseBody) GetIntegration() GetConfigurationProductsIntegration {
	if o == nil {
		return GetConfigurationProductsIntegration{}
	}
	return o.Integration
}

func (o *GetConfigurationProductsResponseBody) GetConfiguration() Configuration {
	if o == nil {
		return Configuration{}
	}
	return o.Configuration
}

type GetConfigurationProductsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// List of products available for this integration configuration
	Object *GetConfigurationProductsResponseBody
}

func (o *GetConfigurationProductsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConfigurationProductsResponse) GetObject() *GetConfigurationProductsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
