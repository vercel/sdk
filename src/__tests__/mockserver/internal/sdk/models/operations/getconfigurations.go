// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type View string

const (
	ViewAccount View = "account"
	ViewProject View = "project"
)

func (e View) ToPointer() *View {
	return &e
}
func (e *View) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "account":
		fallthrough
	case "project":
		*e = View(v)
		return nil
	default:
		return fmt.Errorf("invalid value for View: %v", v)
	}
}

type QueryParamInstallationType string

const (
	QueryParamInstallationTypeMarketplace QueryParamInstallationType = "marketplace"
	QueryParamInstallationTypeExternal    QueryParamInstallationType = "external"
)

func (e QueryParamInstallationType) ToPointer() *QueryParamInstallationType {
	return &e
}
func (e *QueryParamInstallationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "external":
		*e = QueryParamInstallationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamInstallationType: %v", v)
	}
}

type GetConfigurationsRequest struct {
	View             View                        `queryParam:"style=form,explode=true,name=view"`
	InstallationType *QueryParamInstallationType `queryParam:"style=form,explode=true,name=installationType"`
	// ID of the integration
	IntegrationIDOrSlug *string `queryParam:"style=form,explode=true,name=integrationIdOrSlug"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetConfigurationsRequest) GetView() View {
	if o == nil {
		return View("")
	}
	return o.View
}

func (o *GetConfigurationsRequest) GetInstallationType() *QueryParamInstallationType {
	if o == nil {
		return nil
	}
	return o.InstallationType
}

func (o *GetConfigurationsRequest) GetIntegrationIDOrSlug() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIDOrSlug
}

func (o *GetConfigurationsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type TagID string

const (
	TagIDTagAi              TagID = "tag_ai"
	TagIDTagAnalytics       TagID = "tag_analytics"
	TagIDTagAuthentication  TagID = "tag_authentication"
	TagIDTagCms             TagID = "tag_cms"
	TagIDTagCodeRepository  TagID = "tag_code_repository"
	TagIDTagCommerce        TagID = "tag_commerce"
	TagIDTagDatabases       TagID = "tag_databases"
	TagIDTagDevTools        TagID = "tag_dev_tools"
	TagIDTagExperimentation TagID = "tag_experimentation"
	TagIDTagFlags           TagID = "tag_flags"
	TagIDTagLogging         TagID = "tag_logging"
	TagIDTagMessaging       TagID = "tag_messaging"
	TagIDTagMonitoring      TagID = "tag_monitoring"
	TagIDTagObservability   TagID = "tag_observability"
	TagIDTagPerformance     TagID = "tag_performance"
	TagIDTagProductivity    TagID = "tag_productivity"
	TagIDTagSearching       TagID = "tag_searching"
	TagIDTagSecurity        TagID = "tag_security"
	TagIDTagTesting         TagID = "tag_testing"
	TagIDTagVideo           TagID = "tag_video"
	TagIDTagWorkflow        TagID = "tag_workflow"
)

func (e TagID) ToPointer() *TagID {
	return &e
}
func (e *TagID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tag_ai":
		fallthrough
	case "tag_analytics":
		fallthrough
	case "tag_authentication":
		fallthrough
	case "tag_cms":
		fallthrough
	case "tag_code_repository":
		fallthrough
	case "tag_commerce":
		fallthrough
	case "tag_databases":
		fallthrough
	case "tag_dev_tools":
		fallthrough
	case "tag_experimentation":
		fallthrough
	case "tag_flags":
		fallthrough
	case "tag_logging":
		fallthrough
	case "tag_messaging":
		fallthrough
	case "tag_monitoring":
		fallthrough
	case "tag_observability":
		fallthrough
	case "tag_performance":
		fallthrough
	case "tag_productivity":
		fallthrough
	case "tag_searching":
		fallthrough
	case "tag_security":
		fallthrough
	case "tag_testing":
		fallthrough
	case "tag_video":
		fallthrough
	case "tag_workflow":
		*e = TagID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TagID: %v", v)
	}
}

type Integration struct {
	Name                string   `json:"name"`
	Icon                string   `json:"icon"`
	IsLegacy            bool     `json:"isLegacy"`
	Flags               []string `json:"flags,omitempty"`
	AssignedBetaLabelAt *float64 `json:"assignedBetaLabelAt,omitempty"`
	TagIds              []TagID  `json:"tagIds,omitempty"`
}

func (o *Integration) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Integration) GetIcon() string {
	if o == nil {
		return ""
	}
	return o.Icon
}

func (o *Integration) GetIsLegacy() bool {
	if o == nil {
		return false
	}
	return o.IsLegacy
}

func (o *Integration) GetFlags() []string {
	if o == nil {
		return nil
	}
	return o.Flags
}

func (o *Integration) GetAssignedBetaLabelAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AssignedBetaLabelAt
}

func (o *Integration) GetTagIds() []TagID {
	if o == nil {
		return nil
	}
	return o.TagIds
}

// GetConfigurationsSource2 - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationsSource2 string

const (
	GetConfigurationsSource2Marketplace  GetConfigurationsSource2 = "marketplace"
	GetConfigurationsSource2DeployButton GetConfigurationsSource2 = "deploy-button"
	GetConfigurationsSource2External     GetConfigurationsSource2 = "external"
	GetConfigurationsSource2V0           GetConfigurationsSource2 = "v0"
)

func (e GetConfigurationsSource2) ToPointer() *GetConfigurationsSource2 {
	return &e
}
func (e *GetConfigurationsSource2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		fallthrough
	case "v0":
		*e = GetConfigurationsSource2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsSource2: %v", v)
	}
}

type GetConfigurationsType2 string

const (
	GetConfigurationsType2IntegrationConfiguration GetConfigurationsType2 = "integration-configuration"
)

func (e GetConfigurationsType2) ToPointer() *GetConfigurationsType2 {
	return &e
}
func (e *GetConfigurationsType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationsType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsType2: %v", v)
	}
}

type GetConfigurationsDisabledReason2 string

const (
	GetConfigurationsDisabledReason2DisabledByOwner             GetConfigurationsDisabledReason2 = "disabled-by-owner"
	GetConfigurationsDisabledReason2FeatureNotAvailable         GetConfigurationsDisabledReason2 = "feature-not-available"
	GetConfigurationsDisabledReason2DisabledByAdmin             GetConfigurationsDisabledReason2 = "disabled-by-admin"
	GetConfigurationsDisabledReason2OriginalOwnerLeftTheTeam    GetConfigurationsDisabledReason2 = "original-owner-left-the-team"
	GetConfigurationsDisabledReason2AccountPlanDowngrade        GetConfigurationsDisabledReason2 = "account-plan-downgrade"
	GetConfigurationsDisabledReason2OriginalOwnerRoleDowngraded GetConfigurationsDisabledReason2 = "original-owner-role-downgraded"
)

func (e GetConfigurationsDisabledReason2) ToPointer() *GetConfigurationsDisabledReason2 {
	return &e
}
func (e *GetConfigurationsDisabledReason2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "original-owner-role-downgraded":
		*e = GetConfigurationsDisabledReason2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsDisabledReason2: %v", v)
	}
}

// GetConfigurationsInstallationTypeResponse2 - Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
type GetConfigurationsInstallationTypeResponse2 string

const (
	GetConfigurationsInstallationTypeResponse2Marketplace GetConfigurationsInstallationTypeResponse2 = "marketplace"
	GetConfigurationsInstallationTypeResponse2External    GetConfigurationsInstallationTypeResponse2 = "external"
)

func (e GetConfigurationsInstallationTypeResponse2) ToPointer() *GetConfigurationsInstallationTypeResponse2 {
	return &e
}
func (e *GetConfigurationsInstallationTypeResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "external":
		*e = GetConfigurationsInstallationTypeResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsInstallationTypeResponse2: %v", v)
	}
}

type GetConfigurationsIntegrationConfiguration2 struct {
	Integration Integration `json:"integration"`
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *float64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt float64 `json:"createdAt"`
	// The unique identifier of the configuration
	ID string `json:"id"`
	// The unique identifier of the app the configuration was created for
	IntegrationID string `json:"integrationId"`
	// The user or team ID that owns the configuration
	OwnerID string `json:"ownerId"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects []string `json:"projects,omitempty"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationsSource2 `json:"source,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug string `json:"slug"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                `json:"teamId,omitempty"`
	Type   GetConfigurationsType2 `json:"type"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the user that created the configuration.
	UserID string `json:"userId"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes []string `json:"scopes"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	// A timestamp that tells you when the configuration was deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
	DeleteRequestedAt *float64                          `json:"deleteRequestedAt,omitempty"`
	DisabledReason    *GetConfigurationsDisabledReason2 `json:"disabledReason,omitempty"`
	// Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
	InstallationType *GetConfigurationsInstallationTypeResponse2 `json:"installationType,omitempty"`
}

func (o *GetConfigurationsIntegrationConfiguration2) GetIntegration() Integration {
	if o == nil {
		return Integration{}
	}
	return o.Integration
}

func (o *GetConfigurationsIntegrationConfiguration2) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfigurationsIntegrationConfiguration2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetConfigurationsIntegrationConfiguration2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetConfigurationsIntegrationConfiguration2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetConfigurationsIntegrationConfiguration2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetConfigurationsIntegrationConfiguration2) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfigurationsIntegrationConfiguration2) GetSource() *GetConfigurationsSource2 {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfigurationsIntegrationConfiguration2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetConfigurationsIntegrationConfiguration2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsIntegrationConfiguration2) GetType() GetConfigurationsType2 {
	if o == nil {
		return GetConfigurationsType2("")
	}
	return o.Type
}

func (o *GetConfigurationsIntegrationConfiguration2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetConfigurationsIntegrationConfiguration2) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetConfigurationsIntegrationConfiguration2) GetScopes() []string {
	if o == nil {
		return []string{}
	}
	return o.Scopes
}

func (o *GetConfigurationsIntegrationConfiguration2) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurationsIntegrationConfiguration2) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurationsIntegrationConfiguration2) GetDeleteRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeleteRequestedAt
}

func (o *GetConfigurationsIntegrationConfiguration2) GetDisabledReason() *GetConfigurationsDisabledReason2 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurationsIntegrationConfiguration2) GetInstallationType() *GetConfigurationsInstallationTypeResponse2 {
	if o == nil {
		return nil
	}
	return o.InstallationType
}

// GetConfigurationsSource1 - Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
type GetConfigurationsSource1 string

const (
	GetConfigurationsSource1Marketplace  GetConfigurationsSource1 = "marketplace"
	GetConfigurationsSource1DeployButton GetConfigurationsSource1 = "deploy-button"
	GetConfigurationsSource1External     GetConfigurationsSource1 = "external"
	GetConfigurationsSource1V0           GetConfigurationsSource1 = "v0"
)

func (e GetConfigurationsSource1) ToPointer() *GetConfigurationsSource1 {
	return &e
}
func (e *GetConfigurationsSource1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "deploy-button":
		fallthrough
	case "external":
		fallthrough
	case "v0":
		*e = GetConfigurationsSource1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsSource1: %v", v)
	}
}

type GetConfigurationsType1 string

const (
	GetConfigurationsType1IntegrationConfiguration GetConfigurationsType1 = "integration-configuration"
)

func (e GetConfigurationsType1) ToPointer() *GetConfigurationsType1 {
	return &e
}
func (e *GetConfigurationsType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-configuration":
		*e = GetConfigurationsType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsType1: %v", v)
	}
}

type GetConfigurationsDisabledReason1 string

const (
	GetConfigurationsDisabledReason1DisabledByOwner             GetConfigurationsDisabledReason1 = "disabled-by-owner"
	GetConfigurationsDisabledReason1FeatureNotAvailable         GetConfigurationsDisabledReason1 = "feature-not-available"
	GetConfigurationsDisabledReason1DisabledByAdmin             GetConfigurationsDisabledReason1 = "disabled-by-admin"
	GetConfigurationsDisabledReason1OriginalOwnerLeftTheTeam    GetConfigurationsDisabledReason1 = "original-owner-left-the-team"
	GetConfigurationsDisabledReason1AccountPlanDowngrade        GetConfigurationsDisabledReason1 = "account-plan-downgrade"
	GetConfigurationsDisabledReason1OriginalOwnerRoleDowngraded GetConfigurationsDisabledReason1 = "original-owner-role-downgraded"
)

func (e GetConfigurationsDisabledReason1) ToPointer() *GetConfigurationsDisabledReason1 {
	return &e
}
func (e *GetConfigurationsDisabledReason1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "disabled-by-admin":
		fallthrough
	case "original-owner-left-the-team":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "original-owner-role-downgraded":
		*e = GetConfigurationsDisabledReason1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsDisabledReason1: %v", v)
	}
}

// GetConfigurationsInstallationTypeResponse1 - Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
type GetConfigurationsInstallationTypeResponse1 string

const (
	GetConfigurationsInstallationTypeResponse1Marketplace GetConfigurationsInstallationTypeResponse1 = "marketplace"
	GetConfigurationsInstallationTypeResponse1External    GetConfigurationsInstallationTypeResponse1 = "external"
)

func (e GetConfigurationsInstallationTypeResponse1) ToPointer() *GetConfigurationsInstallationTypeResponse1 {
	return &e
}
func (e *GetConfigurationsInstallationTypeResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "marketplace":
		fallthrough
	case "external":
		*e = GetConfigurationsInstallationTypeResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetConfigurationsInstallationTypeResponse1: %v", v)
	}
}

// GetConfigurationsIntegrationConfiguration1 - The list of configurations for the authenticated user
type GetConfigurationsIntegrationConfiguration1 struct {
	// A timestamp that tells you when the configuration was installed successfully
	CompletedAt *float64 `json:"completedAt,omitempty"`
	// A timestamp that tells you when the configuration was created
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// The unique identifier of the configuration
	ID *string `json:"id,omitempty"`
	// The unique identifier of the app the configuration was created for
	IntegrationID *string `json:"integrationId,omitempty"`
	// The user or team ID that owns the configuration
	OwnerID *string `json:"ownerId,omitempty"`
	// When a configuration is limited to access certain projects, this will contain each of the project ID it is allowed to access. If it is not defined, the configuration has full access.
	Projects []string `json:"projects,omitempty"`
	// Source defines where the configuration was installed from. It is used to analyze user engagement for integration installations in product metrics.
	Source *GetConfigurationsSource1 `json:"source,omitempty"`
	// The slug of the integration the configuration is created for.
	Slug *string `json:"slug,omitempty"`
	// When the configuration was created for a team, this will show the ID of the team.
	TeamID *string                 `json:"teamId,omitempty"`
	Type   *GetConfigurationsType1 `json:"type,omitempty"`
	// A timestamp that tells you when the configuration was updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The ID of the user that created the configuration.
	UserID *string `json:"userId,omitempty"`
	// The resources that are allowed to be accessed by the configuration.
	Scopes []string `json:"scopes,omitempty"`
	// A timestamp that tells you when the configuration was disabled. Note: Configurations can be disabled when the associated user loses access to a team. They do not function during this time until the configuration is 'transferred', meaning the associated user is changed to one with access to the team.
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	// A timestamp that tells you when the configuration was deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// A timestamp that tells you when the configuration deletion has been started for cases when the deletion needs to be settled/approved by partners, such as when marketplace invoices have been paid.
	DeleteRequestedAt *float64                          `json:"deleteRequestedAt,omitempty"`
	DisabledReason    *GetConfigurationsDisabledReason1 `json:"disabledReason,omitempty"`
	// Defines the installation type. - 'external' integrations are installed via the existing integrations flow - 'marketplace' integrations are natively installed: - when accepting the TOS of a partner during the store creation process - if undefined, assume 'external'
	InstallationType *GetConfigurationsInstallationTypeResponse1 `json:"installationType,omitempty"`
}

func (o *GetConfigurationsIntegrationConfiguration1) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetConfigurationsIntegrationConfiguration1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetConfigurationsIntegrationConfiguration1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetConfigurationsIntegrationConfiguration1) GetIntegrationID() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationID
}

func (o *GetConfigurationsIntegrationConfiguration1) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetConfigurationsIntegrationConfiguration1) GetProjects() []string {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *GetConfigurationsIntegrationConfiguration1) GetSource() *GetConfigurationsSource1 {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetConfigurationsIntegrationConfiguration1) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetConfigurationsIntegrationConfiguration1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetConfigurationsIntegrationConfiguration1) GetType() *GetConfigurationsType1 {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetConfigurationsIntegrationConfiguration1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetConfigurationsIntegrationConfiguration1) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetConfigurationsIntegrationConfiguration1) GetScopes() []string {
	if o == nil {
		return nil
	}
	return o.Scopes
}

func (o *GetConfigurationsIntegrationConfiguration1) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetConfigurationsIntegrationConfiguration1) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetConfigurationsIntegrationConfiguration1) GetDeleteRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeleteRequestedAt
}

func (o *GetConfigurationsIntegrationConfiguration1) GetDisabledReason() *GetConfigurationsDisabledReason1 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetConfigurationsIntegrationConfiguration1) GetInstallationType() *GetConfigurationsInstallationTypeResponse1 {
	if o == nil {
		return nil
	}
	return o.InstallationType
}

type GetConfigurationsResponseBodyType string

const (
	GetConfigurationsResponseBodyTypeArrayOfGetConfigurationsIntegrationConfiguration1 GetConfigurationsResponseBodyType = "arrayOfGetConfigurationsIntegrationConfiguration1"
	GetConfigurationsResponseBodyTypeArrayOfGetConfigurationsIntegrationConfiguration2 GetConfigurationsResponseBodyType = "arrayOfGetConfigurationsIntegrationConfiguration2"
)

// GetConfigurationsResponseBody - The list of configurations for the authenticated user
type GetConfigurationsResponseBody struct {
	ArrayOfGetConfigurationsIntegrationConfiguration1 []GetConfigurationsIntegrationConfiguration1 `queryParam:"inline"`
	ArrayOfGetConfigurationsIntegrationConfiguration2 []GetConfigurationsIntegrationConfiguration2 `queryParam:"inline"`

	Type GetConfigurationsResponseBodyType
}

func CreateGetConfigurationsResponseBodyArrayOfGetConfigurationsIntegrationConfiguration1(arrayOfGetConfigurationsIntegrationConfiguration1 []GetConfigurationsIntegrationConfiguration1) GetConfigurationsResponseBody {
	typ := GetConfigurationsResponseBodyTypeArrayOfGetConfigurationsIntegrationConfiguration1

	return GetConfigurationsResponseBody{
		ArrayOfGetConfigurationsIntegrationConfiguration1: arrayOfGetConfigurationsIntegrationConfiguration1,
		Type: typ,
	}
}

func CreateGetConfigurationsResponseBodyArrayOfGetConfigurationsIntegrationConfiguration2(arrayOfGetConfigurationsIntegrationConfiguration2 []GetConfigurationsIntegrationConfiguration2) GetConfigurationsResponseBody {
	typ := GetConfigurationsResponseBodyTypeArrayOfGetConfigurationsIntegrationConfiguration2

	return GetConfigurationsResponseBody{
		ArrayOfGetConfigurationsIntegrationConfiguration2: arrayOfGetConfigurationsIntegrationConfiguration2,
		Type: typ,
	}
}

func (u *GetConfigurationsResponseBody) UnmarshalJSON(data []byte) error {

	var arrayOfGetConfigurationsIntegrationConfiguration1 []GetConfigurationsIntegrationConfiguration1 = []GetConfigurationsIntegrationConfiguration1{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetConfigurationsIntegrationConfiguration1, "", true, true); err == nil {
		u.ArrayOfGetConfigurationsIntegrationConfiguration1 = arrayOfGetConfigurationsIntegrationConfiguration1
		u.Type = GetConfigurationsResponseBodyTypeArrayOfGetConfigurationsIntegrationConfiguration1
		return nil
	}

	var arrayOfGetConfigurationsIntegrationConfiguration2 []GetConfigurationsIntegrationConfiguration2 = []GetConfigurationsIntegrationConfiguration2{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetConfigurationsIntegrationConfiguration2, "", true, true); err == nil {
		u.ArrayOfGetConfigurationsIntegrationConfiguration2 = arrayOfGetConfigurationsIntegrationConfiguration2
		u.Type = GetConfigurationsResponseBodyTypeArrayOfGetConfigurationsIntegrationConfiguration2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetConfigurationsResponseBody", string(data))
}

func (u GetConfigurationsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetConfigurationsIntegrationConfiguration1 != nil {
		return utils.MarshalJSON(u.ArrayOfGetConfigurationsIntegrationConfiguration1, "", true)
	}

	if u.ArrayOfGetConfigurationsIntegrationConfiguration2 != nil {
		return utils.MarshalJSON(u.ArrayOfGetConfigurationsIntegrationConfiguration2, "", true)
	}

	return nil, errors.New("could not marshal union type GetConfigurationsResponseBody: all fields are null")
}

type GetConfigurationsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The list of configurations for the authenticated user
	OneOf *GetConfigurationsResponseBody
}

func (o *GetConfigurationsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetConfigurationsResponse) GetOneOf() *GetConfigurationsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
