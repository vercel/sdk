// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetDeploymentRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// Whether to add in gitRepo information.
	WithGitRepoInfo *string `queryParam:"style=form,explode=true,name=withGitRepoInfo"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetDeploymentRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentRequest) GetWithGitRepoInfo() *string {
	if o == nil {
		return nil
	}
	return o.WithGitRepoInfo
}

func (o *GetDeploymentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetDeploymentCreator2 struct {
	UID      string  `json:"uid"`
	Username *string `json:"username,omitempty"`
	Avatar   *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentCreator2) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetDeploymentCreator2) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *GetDeploymentCreator2) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentLambdaReadyState2 string

const (
	GetDeploymentLambdaReadyState2Building     GetDeploymentLambdaReadyState2 = "BUILDING"
	GetDeploymentLambdaReadyState2Error        GetDeploymentLambdaReadyState2 = "ERROR"
	GetDeploymentLambdaReadyState2Initializing GetDeploymentLambdaReadyState2 = "INITIALIZING"
	GetDeploymentLambdaReadyState2Ready        GetDeploymentLambdaReadyState2 = "READY"
)

func (e GetDeploymentLambdaReadyState2) ToPointer() *GetDeploymentLambdaReadyState2 {
	return &e
}
func (e *GetDeploymentLambdaReadyState2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentLambdaReadyState2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentLambdaReadyState2: %v", v)
	}
}

type GetDeploymentOutput2 struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *GetDeploymentOutput2) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentOutput2) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

// GetDeploymentLambda2 - A partial representation of a Build used by the deployment endpoint.
type GetDeploymentLambda2 struct {
	ID           *string                         `json:"id,omitempty"`
	CreatedAt    *float64                        `json:"createdAt,omitempty"`
	Entrypoint   *string                         `json:"entrypoint,omitempty"`
	ReadyState   *GetDeploymentLambdaReadyState2 `json:"readyState,omitempty"`
	ReadyStateAt *float64                        `json:"readyStateAt,omitempty"`
	Output       []GetDeploymentOutput2          `json:"output"`
}

func (o *GetDeploymentLambda2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetDeploymentLambda2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentLambda2) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentLambda2) GetReadyState() *GetDeploymentLambdaReadyState2 {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentLambda2) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *GetDeploymentLambda2) GetOutput() []GetDeploymentOutput2 {
	if o == nil {
		return []GetDeploymentOutput2{}
	}
	return o.Output
}

type GetDeploymentStatus2 string

const (
	GetDeploymentStatus2Queued       GetDeploymentStatus2 = "QUEUED"
	GetDeploymentStatus2Building     GetDeploymentStatus2 = "BUILDING"
	GetDeploymentStatus2Error        GetDeploymentStatus2 = "ERROR"
	GetDeploymentStatus2Initializing GetDeploymentStatus2 = "INITIALIZING"
	GetDeploymentStatus2Ready        GetDeploymentStatus2 = "READY"
	GetDeploymentStatus2Canceled     GetDeploymentStatus2 = "CANCELED"
)

func (e GetDeploymentStatus2) ToPointer() *GetDeploymentStatus2 {
	return &e
}
func (e *GetDeploymentStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentStatus2: %v", v)
	}
}

type GetDeploymentTeam2 struct {
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Slug   string  `json:"slug"`
	Avatar *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentTeam2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentTeam2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentTeam2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentTeam2) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentCustomEnvironment4 struct {
	ID string `json:"id"`
}

func (o *GetDeploymentCustomEnvironment4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetDeploymentCustomEnvironmentType2 - The type of environment (production, preview, or development)
type GetDeploymentCustomEnvironmentType2 string

const (
	GetDeploymentCustomEnvironmentType2Production  GetDeploymentCustomEnvironmentType2 = "production"
	GetDeploymentCustomEnvironmentType2Preview     GetDeploymentCustomEnvironmentType2 = "preview"
	GetDeploymentCustomEnvironmentType2Development GetDeploymentCustomEnvironmentType2 = "development"
)

func (e GetDeploymentCustomEnvironmentType2) ToPointer() *GetDeploymentCustomEnvironmentType2 {
	return &e
}
func (e *GetDeploymentCustomEnvironmentType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetDeploymentCustomEnvironmentType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentCustomEnvironmentType2: %v", v)
	}
}

// GetDeploymentBranchMatcherType2 - The type of matching to perform
type GetDeploymentBranchMatcherType2 string

const (
	GetDeploymentBranchMatcherType2StartsWith GetDeploymentBranchMatcherType2 = "startsWith"
	GetDeploymentBranchMatcherType2Equals     GetDeploymentBranchMatcherType2 = "equals"
	GetDeploymentBranchMatcherType2EndsWith   GetDeploymentBranchMatcherType2 = "endsWith"
)

func (e GetDeploymentBranchMatcherType2) ToPointer() *GetDeploymentBranchMatcherType2 {
	return &e
}
func (e *GetDeploymentBranchMatcherType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "startsWith":
		fallthrough
	case "equals":
		fallthrough
	case "endsWith":
		*e = GetDeploymentBranchMatcherType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentBranchMatcherType2: %v", v)
	}
}

// GetDeploymentBranchMatcher2 - Configuration for matching git branches to this environment
type GetDeploymentBranchMatcher2 struct {
	// The type of matching to perform
	Type GetDeploymentBranchMatcherType2 `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *GetDeploymentBranchMatcher2) GetType() GetDeploymentBranchMatcherType2 {
	if o == nil {
		return GetDeploymentBranchMatcherType2("")
	}
	return o.Type
}

func (o *GetDeploymentBranchMatcher2) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// GetDeploymentVerification2 - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetDeploymentVerification2 struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetDeploymentVerification2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetDeploymentVerification2) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetDeploymentVerification2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetDeploymentVerification2) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// GetDeploymentDomain2 - List of domains associated with this environment
type GetDeploymentDomain2 struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetDeploymentVerification2 `json:"verification,omitempty"`
}

func (o *GetDeploymentDomain2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentDomain2) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetDeploymentDomain2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentDomain2) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetDeploymentDomain2) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetDeploymentDomain2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetDeploymentDomain2) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetDeploymentDomain2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetDeploymentDomain2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentDomain2) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetDeploymentDomain2) GetVerification() []GetDeploymentVerification2 {
	if o == nil {
		return nil
	}
	return o.Verification
}

// GetDeploymentCustomEnvironment3 - Internal representation of a custom environment with all required properties
type GetDeploymentCustomEnvironment3 struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type GetDeploymentCustomEnvironmentType2 `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *GetDeploymentBranchMatcher2 `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []GetDeploymentDomain2 `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *GetDeploymentCustomEnvironment3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentCustomEnvironment3) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentCustomEnvironment3) GetType() GetDeploymentCustomEnvironmentType2 {
	if o == nil {
		return GetDeploymentCustomEnvironmentType2("")
	}
	return o.Type
}

func (o *GetDeploymentCustomEnvironment3) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetDeploymentCustomEnvironment3) GetBranchMatcher() *GetDeploymentBranchMatcher2 {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *GetDeploymentCustomEnvironment3) GetDomains() []GetDeploymentDomain2 {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *GetDeploymentCustomEnvironment3) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *GetDeploymentCustomEnvironment3) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeploymentCustomEnvironment3) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type GetDeploymentCustomEnvironmentUnion2Type string

const (
	GetDeploymentCustomEnvironmentUnion2TypeGetDeploymentCustomEnvironment3 GetDeploymentCustomEnvironmentUnion2Type = "getDeployment_customEnvironment_3"
	GetDeploymentCustomEnvironmentUnion2TypeGetDeploymentCustomEnvironment4 GetDeploymentCustomEnvironmentUnion2Type = "getDeployment_customEnvironment_4"
)

type GetDeploymentCustomEnvironmentUnion2 struct {
	GetDeploymentCustomEnvironment3 *GetDeploymentCustomEnvironment3 `queryParam:"inline"`
	GetDeploymentCustomEnvironment4 *GetDeploymentCustomEnvironment4 `queryParam:"inline"`

	Type GetDeploymentCustomEnvironmentUnion2Type
}

func CreateGetDeploymentCustomEnvironmentUnion2GetDeploymentCustomEnvironment3(getDeploymentCustomEnvironment3 GetDeploymentCustomEnvironment3) GetDeploymentCustomEnvironmentUnion2 {
	typ := GetDeploymentCustomEnvironmentUnion2TypeGetDeploymentCustomEnvironment3

	return GetDeploymentCustomEnvironmentUnion2{
		GetDeploymentCustomEnvironment3: &getDeploymentCustomEnvironment3,
		Type:                            typ,
	}
}

func CreateGetDeploymentCustomEnvironmentUnion2GetDeploymentCustomEnvironment4(getDeploymentCustomEnvironment4 GetDeploymentCustomEnvironment4) GetDeploymentCustomEnvironmentUnion2 {
	typ := GetDeploymentCustomEnvironmentUnion2TypeGetDeploymentCustomEnvironment4

	return GetDeploymentCustomEnvironmentUnion2{
		GetDeploymentCustomEnvironment4: &getDeploymentCustomEnvironment4,
		Type:                            typ,
	}
}

func (u *GetDeploymentCustomEnvironmentUnion2) UnmarshalJSON(data []byte) error {

	var getDeploymentCustomEnvironment4 GetDeploymentCustomEnvironment4 = GetDeploymentCustomEnvironment4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironment4, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironment4 = &getDeploymentCustomEnvironment4
		u.Type = GetDeploymentCustomEnvironmentUnion2TypeGetDeploymentCustomEnvironment4
		return nil
	}

	var getDeploymentCustomEnvironment3 GetDeploymentCustomEnvironment3 = GetDeploymentCustomEnvironment3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironment3, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironment3 = &getDeploymentCustomEnvironment3
		u.Type = GetDeploymentCustomEnvironmentUnion2TypeGetDeploymentCustomEnvironment3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentCustomEnvironmentUnion2", string(data))
}

func (u GetDeploymentCustomEnvironmentUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentCustomEnvironment3 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironment3, "", true)
	}

	if u.GetDeploymentCustomEnvironment4 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironment4, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentCustomEnvironmentUnion2: all fields are null")
}

type GetDeploymentAliasWarning2 struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *GetDeploymentAliasWarning2) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentAliasWarning2) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *GetDeploymentAliasWarning2) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetDeploymentAliasWarning2) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetDeploymentTypeLambdas2 string

const (
	GetDeploymentTypeLambdas2Lambdas GetDeploymentTypeLambdas2 = "LAMBDAS"
)

func (e GetDeploymentTypeLambdas2) ToPointer() *GetDeploymentTypeLambdas2 {
	return &e
}
func (e *GetDeploymentTypeLambdas2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentTypeLambdas2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeLambdas2: %v", v)
	}
}

type GetDeploymentReadyState2 string

const (
	GetDeploymentReadyState2Queued       GetDeploymentReadyState2 = "QUEUED"
	GetDeploymentReadyState2Building     GetDeploymentReadyState2 = "BUILDING"
	GetDeploymentReadyState2Error        GetDeploymentReadyState2 = "ERROR"
	GetDeploymentReadyState2Initializing GetDeploymentReadyState2 = "INITIALIZING"
	GetDeploymentReadyState2Ready        GetDeploymentReadyState2 = "READY"
	GetDeploymentReadyState2Canceled     GetDeploymentReadyState2 = "CANCELED"
)

func (e GetDeploymentReadyState2) ToPointer() *GetDeploymentReadyState2 {
	return &e
}
func (e *GetDeploymentReadyState2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentReadyState2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentReadyState2: %v", v)
	}
}

type GetDeploymentAliasError2 struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetDeploymentAliasError2) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentAliasError2) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentChecksState2 string

const (
	GetDeploymentChecksState2Registered GetDeploymentChecksState2 = "registered"
	GetDeploymentChecksState2Running    GetDeploymentChecksState2 = "running"
	GetDeploymentChecksState2Completed  GetDeploymentChecksState2 = "completed"
)

func (e GetDeploymentChecksState2) ToPointer() *GetDeploymentChecksState2 {
	return &e
}
func (e *GetDeploymentChecksState2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeploymentChecksState2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentChecksState2: %v", v)
	}
}

type GetDeploymentChecksConclusion2 string

const (
	GetDeploymentChecksConclusion2Succeeded GetDeploymentChecksConclusion2 = "succeeded"
	GetDeploymentChecksConclusion2Failed    GetDeploymentChecksConclusion2 = "failed"
	GetDeploymentChecksConclusion2Skipped   GetDeploymentChecksConclusion2 = "skipped"
	GetDeploymentChecksConclusion2Canceled  GetDeploymentChecksConclusion2 = "canceled"
)

func (e GetDeploymentChecksConclusion2) ToPointer() *GetDeploymentChecksConclusion2 {
	return &e
}
func (e *GetDeploymentChecksConclusion2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeploymentChecksConclusion2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentChecksConclusion2: %v", v)
	}
}

type GetDeploymentGitSourceTypeBitbucket6 string

const (
	GetDeploymentGitSourceTypeBitbucket6Bitbucket GetDeploymentGitSourceTypeBitbucket6 = "bitbucket"
)

func (e GetDeploymentGitSourceTypeBitbucket6) ToPointer() *GetDeploymentGitSourceTypeBitbucket6 {
	return &e
}
func (e *GetDeploymentGitSourceTypeBitbucket6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceTypeBitbucket6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeBitbucket6: %v", v)
	}
}

type GetDeploymentGitSourceBitbucket6 struct {
	Type          GetDeploymentGitSourceTypeBitbucket6 `json:"type"`
	Ref           string                               `json:"ref"`
	Sha           string                               `json:"sha"`
	Owner         *string                              `json:"owner,omitempty"`
	Slug          *string                              `json:"slug,omitempty"`
	WorkspaceUUID string                               `json:"workspaceUuid"`
	RepoUUID      string                               `json:"repoUuid"`
}

func (o *GetDeploymentGitSourceBitbucket6) GetType() GetDeploymentGitSourceTypeBitbucket6 {
	if o == nil {
		return GetDeploymentGitSourceTypeBitbucket6("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceBitbucket6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceBitbucket6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceBitbucket6) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceBitbucket6) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceBitbucket6) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceBitbucket6) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type GetDeploymentGitSourceTypeGitlab4 string

const (
	GetDeploymentGitSourceTypeGitlab4Gitlab GetDeploymentGitSourceTypeGitlab4 = "gitlab"
)

func (e GetDeploymentGitSourceTypeGitlab4) ToPointer() *GetDeploymentGitSourceTypeGitlab4 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGitlab4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceTypeGitlab4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGitlab4: %v", v)
	}
}

type GetDeploymentGitSourceGitlab4 struct {
	Type      GetDeploymentGitSourceTypeGitlab4 `json:"type"`
	Ref       string                            `json:"ref"`
	Sha       string                            `json:"sha"`
	ProjectID float64                           `json:"projectId"`
}

func (o *GetDeploymentGitSourceGitlab4) GetType() GetDeploymentGitSourceTypeGitlab4 {
	if o == nil {
		return GetDeploymentGitSourceTypeGitlab4("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGitlab4) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGitlab4) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGitlab4) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type GetDeploymentTypeGithubCustomHost6 string

const (
	GetDeploymentTypeGithubCustomHost6GithubCustomHost GetDeploymentTypeGithubCustomHost6 = "github-custom-host"
)

func (e GetDeploymentTypeGithubCustomHost6) ToPointer() *GetDeploymentTypeGithubCustomHost6 {
	return &e
}
func (e *GetDeploymentTypeGithubCustomHost6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetDeploymentTypeGithubCustomHost6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeGithubCustomHost6: %v", v)
	}
}

type GetDeploymentGitSourceGithubCustomHost6 struct {
	Type   GetDeploymentTypeGithubCustomHost6 `json:"type"`
	Host   string                             `json:"host"`
	Ref    string                             `json:"ref"`
	Sha    string                             `json:"sha"`
	RepoID float64                            `json:"repoId"`
	Org    *string                            `json:"org,omitempty"`
	Repo   *string                            `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetType() GetDeploymentTypeGithubCustomHost6 {
	if o == nil {
		return GetDeploymentTypeGithubCustomHost6("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithubCustomHost6) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentGitSourceTypeGithub6 string

const (
	GetDeploymentGitSourceTypeGithub6Github GetDeploymentGitSourceTypeGithub6 = "github"
)

func (e GetDeploymentGitSourceTypeGithub6) ToPointer() *GetDeploymentGitSourceTypeGithub6 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGithub6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceTypeGithub6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGithub6: %v", v)
	}
}

type GetDeploymentGitSourceGithub6 struct {
	Type   GetDeploymentGitSourceTypeGithub6 `json:"type"`
	Ref    string                            `json:"ref"`
	Sha    string                            `json:"sha"`
	RepoID float64                           `json:"repoId"`
	Org    *string                           `json:"org,omitempty"`
	Repo   *string                           `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSourceGithub6) GetType() GetDeploymentGitSourceTypeGithub6 {
	if o == nil {
		return GetDeploymentGitSourceTypeGithub6("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithub6) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithub6) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithub6) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithub6) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithub6) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentTypeCustom2 string

const (
	GetDeploymentTypeCustom2Custom GetDeploymentTypeCustom2 = "custom"
)

func (e GetDeploymentTypeCustom2) ToPointer() *GetDeploymentTypeCustom2 {
	return &e
}
func (e *GetDeploymentTypeCustom2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentTypeCustom2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeCustom2: %v", v)
	}
}

// GetDeploymentGitSourceCustom2 - Allows custom git sources (local folder mounted to the container) in test mode
type GetDeploymentGitSourceCustom2 struct {
	Type   GetDeploymentTypeCustom2 `json:"type"`
	Ref    string                   `json:"ref"`
	Sha    string                   `json:"sha"`
	GitURL string                   `json:"gitUrl"`
}

func (o *GetDeploymentGitSourceCustom2) GetType() GetDeploymentTypeCustom2 {
	if o == nil {
		return GetDeploymentTypeCustom2("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceCustom2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceCustom2) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceCustom2) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type GetDeploymentGitSourceTypeBitbucket5 string

const (
	GetDeploymentGitSourceTypeBitbucket5Bitbucket GetDeploymentGitSourceTypeBitbucket5 = "bitbucket"
)

func (e GetDeploymentGitSourceTypeBitbucket5) ToPointer() *GetDeploymentGitSourceTypeBitbucket5 {
	return &e
}
func (e *GetDeploymentGitSourceTypeBitbucket5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceTypeBitbucket5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeBitbucket5: %v", v)
	}
}

type GetDeploymentGitSourceBitbucket5 struct {
	Type  GetDeploymentGitSourceTypeBitbucket5 `json:"type"`
	Owner string                               `json:"owner"`
	Slug  string                               `json:"slug"`
	Ref   *string                              `json:"ref,omitempty"`
	Sha   *string                              `json:"sha,omitempty"`
	PrID  *float64                             `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceBitbucket5) GetType() GetDeploymentGitSourceTypeBitbucket5 {
	if o == nil {
		return GetDeploymentGitSourceTypeBitbucket5("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceBitbucket5) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceBitbucket5) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceBitbucket5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceBitbucket5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceBitbucket5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeBitbucket4 string

const (
	GetDeploymentGitSourceTypeBitbucket4Bitbucket GetDeploymentGitSourceTypeBitbucket4 = "bitbucket"
)

func (e GetDeploymentGitSourceTypeBitbucket4) ToPointer() *GetDeploymentGitSourceTypeBitbucket4 {
	return &e
}
func (e *GetDeploymentGitSourceTypeBitbucket4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceTypeBitbucket4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeBitbucket4: %v", v)
	}
}

type GetDeploymentGitSourceBitbucket4 struct {
	Type          GetDeploymentGitSourceTypeBitbucket4 `json:"type"`
	WorkspaceUUID *string                              `json:"workspaceUuid,omitempty"`
	RepoUUID      string                               `json:"repoUuid"`
	Ref           *string                              `json:"ref,omitempty"`
	Sha           *string                              `json:"sha,omitempty"`
	PrID          *float64                             `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceBitbucket4) GetType() GetDeploymentGitSourceTypeBitbucket4 {
	if o == nil {
		return GetDeploymentGitSourceTypeBitbucket4("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceBitbucket4) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceBitbucket4) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitSourceBitbucket4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceBitbucket4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceBitbucket4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeGitlab3 string

const (
	GetDeploymentGitSourceTypeGitlab3Gitlab GetDeploymentGitSourceTypeGitlab3 = "gitlab"
)

func (e GetDeploymentGitSourceTypeGitlab3) ToPointer() *GetDeploymentGitSourceTypeGitlab3 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGitlab3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceTypeGitlab3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGitlab3: %v", v)
	}
}

type GetDeploymentProjectID2Type string

const (
	GetDeploymentProjectID2TypeStr    GetDeploymentProjectID2Type = "str"
	GetDeploymentProjectID2TypeNumber GetDeploymentProjectID2Type = "number"
)

type GetDeploymentProjectID2 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetDeploymentProjectID2Type
}

func CreateGetDeploymentProjectID2Str(str string) GetDeploymentProjectID2 {
	typ := GetDeploymentProjectID2TypeStr

	return GetDeploymentProjectID2{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentProjectID2Number(number float64) GetDeploymentProjectID2 {
	typ := GetDeploymentProjectID2TypeNumber

	return GetDeploymentProjectID2{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentProjectID2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentProjectID2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentProjectID2TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentProjectID2", string(data))
}

func (u GetDeploymentProjectID2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentProjectID2: all fields are null")
}

type GetDeploymentGitSourceGitlab3 struct {
	Type      GetDeploymentGitSourceTypeGitlab3 `json:"type"`
	ProjectID GetDeploymentProjectID2           `json:"projectId"`
	Ref       *string                           `json:"ref,omitempty"`
	Sha       *string                           `json:"sha,omitempty"`
	PrID      *float64                          `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGitlab3) GetType() GetDeploymentGitSourceTypeGitlab3 {
	if o == nil {
		return GetDeploymentGitSourceTypeGitlab3("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGitlab3) GetProjectID() GetDeploymentProjectID2 {
	if o == nil {
		return GetDeploymentProjectID2{}
	}
	return o.ProjectID
}

func (o *GetDeploymentGitSourceGitlab3) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGitlab3) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGitlab3) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentTypeGithubCustomHost5 string

const (
	GetDeploymentTypeGithubCustomHost5GithubCustomHost GetDeploymentTypeGithubCustomHost5 = "github-custom-host"
)

func (e GetDeploymentTypeGithubCustomHost5) ToPointer() *GetDeploymentTypeGithubCustomHost5 {
	return &e
}
func (e *GetDeploymentTypeGithubCustomHost5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetDeploymentTypeGithubCustomHost5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeGithubCustomHost5: %v", v)
	}
}

type GetDeploymentGitSourceGithubCustomHost5 struct {
	Type GetDeploymentTypeGithubCustomHost5 `json:"type"`
	Host string                             `json:"host"`
	Org  string                             `json:"org"`
	Repo string                             `json:"repo"`
	Ref  *string                            `json:"ref,omitempty"`
	Sha  *string                            `json:"sha,omitempty"`
	PrID *float64                           `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetType() GetDeploymentTypeGithubCustomHost5 {
	if o == nil {
		return GetDeploymentTypeGithubCustomHost5("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithubCustomHost5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentTypeGithubCustomHost4 string

const (
	GetDeploymentTypeGithubCustomHost4GithubCustomHost GetDeploymentTypeGithubCustomHost4 = "github-custom-host"
)

func (e GetDeploymentTypeGithubCustomHost4) ToPointer() *GetDeploymentTypeGithubCustomHost4 {
	return &e
}
func (e *GetDeploymentTypeGithubCustomHost4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetDeploymentTypeGithubCustomHost4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeGithubCustomHost4: %v", v)
	}
}

type GetDeploymentRepoID4Type string

const (
	GetDeploymentRepoID4TypeStr    GetDeploymentRepoID4Type = "str"
	GetDeploymentRepoID4TypeNumber GetDeploymentRepoID4Type = "number"
)

type GetDeploymentRepoID4 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetDeploymentRepoID4Type
}

func CreateGetDeploymentRepoID4Str(str string) GetDeploymentRepoID4 {
	typ := GetDeploymentRepoID4TypeStr

	return GetDeploymentRepoID4{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentRepoID4Number(number float64) GetDeploymentRepoID4 {
	typ := GetDeploymentRepoID4TypeNumber

	return GetDeploymentRepoID4{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentRepoID4) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentRepoID4TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentRepoID4TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRepoID4", string(data))
}

func (u GetDeploymentRepoID4) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRepoID4: all fields are null")
}

type GetDeploymentGitSourceGithubCustomHost4 struct {
	Type   GetDeploymentTypeGithubCustomHost4 `json:"type"`
	Host   string                             `json:"host"`
	RepoID GetDeploymentRepoID4               `json:"repoId"`
	Ref    *string                            `json:"ref,omitempty"`
	Sha    *string                            `json:"sha,omitempty"`
	PrID   *float64                           `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithubCustomHost4) GetType() GetDeploymentTypeGithubCustomHost4 {
	if o == nil {
		return GetDeploymentTypeGithubCustomHost4("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithubCustomHost4) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentGitSourceGithubCustomHost4) GetRepoID() GetDeploymentRepoID4 {
	if o == nil {
		return GetDeploymentRepoID4{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithubCustomHost4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithubCustomHost4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithubCustomHost4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeGithub5 string

const (
	GetDeploymentGitSourceTypeGithub5Github GetDeploymentGitSourceTypeGithub5 = "github"
)

func (e GetDeploymentGitSourceTypeGithub5) ToPointer() *GetDeploymentGitSourceTypeGithub5 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGithub5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceTypeGithub5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGithub5: %v", v)
	}
}

type GetDeploymentGitSourceGithub5 struct {
	Type GetDeploymentGitSourceTypeGithub5 `json:"type"`
	Org  string                            `json:"org"`
	Repo string                            `json:"repo"`
	Ref  *string                           `json:"ref,omitempty"`
	Sha  *string                           `json:"sha,omitempty"`
	PrID *float64                          `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithub5) GetType() GetDeploymentGitSourceTypeGithub5 {
	if o == nil {
		return GetDeploymentGitSourceTypeGithub5("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithub5) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithub5) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSourceGithub5) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithub5) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithub5) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeGithub4 string

const (
	GetDeploymentGitSourceTypeGithub4Github GetDeploymentGitSourceTypeGithub4 = "github"
)

func (e GetDeploymentGitSourceTypeGithub4) ToPointer() *GetDeploymentGitSourceTypeGithub4 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGithub4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceTypeGithub4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGithub4: %v", v)
	}
}

type GetDeploymentRepoID3Type string

const (
	GetDeploymentRepoID3TypeStr    GetDeploymentRepoID3Type = "str"
	GetDeploymentRepoID3TypeNumber GetDeploymentRepoID3Type = "number"
)

type GetDeploymentRepoID3 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetDeploymentRepoID3Type
}

func CreateGetDeploymentRepoID3Str(str string) GetDeploymentRepoID3 {
	typ := GetDeploymentRepoID3TypeStr

	return GetDeploymentRepoID3{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentRepoID3Number(number float64) GetDeploymentRepoID3 {
	typ := GetDeploymentRepoID3TypeNumber

	return GetDeploymentRepoID3{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentRepoID3) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentRepoID3TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentRepoID3TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRepoID3", string(data))
}

func (u GetDeploymentRepoID3) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRepoID3: all fields are null")
}

type GetDeploymentGitSourceGithub4 struct {
	Type   GetDeploymentGitSourceTypeGithub4 `json:"type"`
	RepoID GetDeploymentRepoID3              `json:"repoId"`
	Ref    *string                           `json:"ref,omitempty"`
	Sha    *string                           `json:"sha,omitempty"`
	PrID   *float64                          `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithub4) GetType() GetDeploymentGitSourceTypeGithub4 {
	if o == nil {
		return GetDeploymentGitSourceTypeGithub4("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithub4) GetRepoID() GetDeploymentRepoID3 {
	if o == nil {
		return GetDeploymentRepoID3{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithub4) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithub4) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithub4) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceUnion2Type string

const (
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub4           GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Github_4"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub5           GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Github_5"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost4 GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_GithubCustomHost_4"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost5 GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_GithubCustomHost_5"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGitlab3           GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Gitlab_3"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket4        GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Bitbucket_4"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket5        GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Bitbucket_5"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceCustom2           GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Custom_2"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub6           GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Github_6"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost6 GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_GithubCustomHost_6"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGitlab4           GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Gitlab_4"
	GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket6        GetDeploymentGitSourceUnion2Type = "getDeployment_gitSource_Bitbucket_6"
)

type GetDeploymentGitSourceUnion2 struct {
	GetDeploymentGitSourceGithub4           *GetDeploymentGitSourceGithub4           `queryParam:"inline"`
	GetDeploymentGitSourceGithub5           *GetDeploymentGitSourceGithub5           `queryParam:"inline"`
	GetDeploymentGitSourceGithubCustomHost4 *GetDeploymentGitSourceGithubCustomHost4 `queryParam:"inline"`
	GetDeploymentGitSourceGithubCustomHost5 *GetDeploymentGitSourceGithubCustomHost5 `queryParam:"inline"`
	GetDeploymentGitSourceGitlab3           *GetDeploymentGitSourceGitlab3           `queryParam:"inline"`
	GetDeploymentGitSourceBitbucket4        *GetDeploymentGitSourceBitbucket4        `queryParam:"inline"`
	GetDeploymentGitSourceBitbucket5        *GetDeploymentGitSourceBitbucket5        `queryParam:"inline"`
	GetDeploymentGitSourceCustom2           *GetDeploymentGitSourceCustom2           `queryParam:"inline"`
	GetDeploymentGitSourceGithub6           *GetDeploymentGitSourceGithub6           `queryParam:"inline"`
	GetDeploymentGitSourceGithubCustomHost6 *GetDeploymentGitSourceGithubCustomHost6 `queryParam:"inline"`
	GetDeploymentGitSourceGitlab4           *GetDeploymentGitSourceGitlab4           `queryParam:"inline"`
	GetDeploymentGitSourceBitbucket6        *GetDeploymentGitSourceBitbucket6        `queryParam:"inline"`

	Type GetDeploymentGitSourceUnion2Type
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGithub4(getDeploymentGitSourceGithub4 GetDeploymentGitSourceGithub4) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub4

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGithub4: &getDeploymentGitSourceGithub4,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGithub5(getDeploymentGitSourceGithub5 GetDeploymentGitSourceGithub5) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub5

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGithub5: &getDeploymentGitSourceGithub5,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGithubCustomHost4(getDeploymentGitSourceGithubCustomHost4 GetDeploymentGitSourceGithubCustomHost4) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost4

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGithubCustomHost4: &getDeploymentGitSourceGithubCustomHost4,
		Type:                                    typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGithubCustomHost5(getDeploymentGitSourceGithubCustomHost5 GetDeploymentGitSourceGithubCustomHost5) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost5

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGithubCustomHost5: &getDeploymentGitSourceGithubCustomHost5,
		Type:                                    typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGitlab3(getDeploymentGitSourceGitlab3 GetDeploymentGitSourceGitlab3) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGitlab3

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGitlab3: &getDeploymentGitSourceGitlab3,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceBitbucket4(getDeploymentGitSourceBitbucket4 GetDeploymentGitSourceBitbucket4) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket4

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceBitbucket4: &getDeploymentGitSourceBitbucket4,
		Type:                             typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceBitbucket5(getDeploymentGitSourceBitbucket5 GetDeploymentGitSourceBitbucket5) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket5

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceBitbucket5: &getDeploymentGitSourceBitbucket5,
		Type:                             typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceCustom2(getDeploymentGitSourceCustom2 GetDeploymentGitSourceCustom2) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceCustom2

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceCustom2: &getDeploymentGitSourceCustom2,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGithub6(getDeploymentGitSourceGithub6 GetDeploymentGitSourceGithub6) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub6

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGithub6: &getDeploymentGitSourceGithub6,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGithubCustomHost6(getDeploymentGitSourceGithubCustomHost6 GetDeploymentGitSourceGithubCustomHost6) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost6

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGithubCustomHost6: &getDeploymentGitSourceGithubCustomHost6,
		Type:                                    typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceGitlab4(getDeploymentGitSourceGitlab4 GetDeploymentGitSourceGitlab4) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGitlab4

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceGitlab4: &getDeploymentGitSourceGitlab4,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion2GetDeploymentGitSourceBitbucket6(getDeploymentGitSourceBitbucket6 GetDeploymentGitSourceBitbucket6) GetDeploymentGitSourceUnion2 {
	typ := GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket6

	return GetDeploymentGitSourceUnion2{
		GetDeploymentGitSourceBitbucket6: &getDeploymentGitSourceBitbucket6,
		Type:                             typ,
	}
}

func (u *GetDeploymentGitSourceUnion2) UnmarshalJSON(data []byte) error {

	var getDeploymentGitSourceCustom2 GetDeploymentGitSourceCustom2 = GetDeploymentGitSourceCustom2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceCustom2, "", true, true); err == nil {
		u.GetDeploymentGitSourceCustom2 = &getDeploymentGitSourceCustom2
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceCustom2
		return nil
	}

	var getDeploymentGitSourceGitlab4 GetDeploymentGitSourceGitlab4 = GetDeploymentGitSourceGitlab4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGitlab4, "", true, true); err == nil {
		u.GetDeploymentGitSourceGitlab4 = &getDeploymentGitSourceGitlab4
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGitlab4
		return nil
	}

	var getDeploymentGitSourceGithub4 GetDeploymentGitSourceGithub4 = GetDeploymentGitSourceGithub4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithub4, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithub4 = &getDeploymentGitSourceGithub4
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub4
		return nil
	}

	var getDeploymentGitSourceGitlab3 GetDeploymentGitSourceGitlab3 = GetDeploymentGitSourceGitlab3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGitlab3, "", true, true); err == nil {
		u.GetDeploymentGitSourceGitlab3 = &getDeploymentGitSourceGitlab3
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGitlab3
		return nil
	}

	var getDeploymentGitSourceGithub5 GetDeploymentGitSourceGithub5 = GetDeploymentGitSourceGithub5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithub5, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithub5 = &getDeploymentGitSourceGithub5
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub5
		return nil
	}

	var getDeploymentGitSourceGithubCustomHost4 GetDeploymentGitSourceGithubCustomHost4 = GetDeploymentGitSourceGithubCustomHost4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithubCustomHost4, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithubCustomHost4 = &getDeploymentGitSourceGithubCustomHost4
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost4
		return nil
	}

	var getDeploymentGitSourceBitbucket4 GetDeploymentGitSourceBitbucket4 = GetDeploymentGitSourceBitbucket4{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceBitbucket4, "", true, true); err == nil {
		u.GetDeploymentGitSourceBitbucket4 = &getDeploymentGitSourceBitbucket4
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket4
		return nil
	}

	var getDeploymentGitSourceBitbucket5 GetDeploymentGitSourceBitbucket5 = GetDeploymentGitSourceBitbucket5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceBitbucket5, "", true, true); err == nil {
		u.GetDeploymentGitSourceBitbucket5 = &getDeploymentGitSourceBitbucket5
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket5
		return nil
	}

	var getDeploymentGitSourceGithub6 GetDeploymentGitSourceGithub6 = GetDeploymentGitSourceGithub6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithub6, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithub6 = &getDeploymentGitSourceGithub6
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithub6
		return nil
	}

	var getDeploymentGitSourceGithubCustomHost5 GetDeploymentGitSourceGithubCustomHost5 = GetDeploymentGitSourceGithubCustomHost5{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithubCustomHost5, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithubCustomHost5 = &getDeploymentGitSourceGithubCustomHost5
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost5
		return nil
	}

	var getDeploymentGitSourceGithubCustomHost6 GetDeploymentGitSourceGithubCustomHost6 = GetDeploymentGitSourceGithubCustomHost6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithubCustomHost6, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithubCustomHost6 = &getDeploymentGitSourceGithubCustomHost6
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceGithubCustomHost6
		return nil
	}

	var getDeploymentGitSourceBitbucket6 GetDeploymentGitSourceBitbucket6 = GetDeploymentGitSourceBitbucket6{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceBitbucket6, "", true, true); err == nil {
		u.GetDeploymentGitSourceBitbucket6 = &getDeploymentGitSourceBitbucket6
		u.Type = GetDeploymentGitSourceUnion2TypeGetDeploymentGitSourceBitbucket6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceUnion2", string(data))
}

func (u GetDeploymentGitSourceUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitSourceGithub4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithub4, "", true)
	}

	if u.GetDeploymentGitSourceGithub5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithub5, "", true)
	}

	if u.GetDeploymentGitSourceGithubCustomHost4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithubCustomHost4, "", true)
	}

	if u.GetDeploymentGitSourceGithubCustomHost5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithubCustomHost5, "", true)
	}

	if u.GetDeploymentGitSourceGitlab3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGitlab3, "", true)
	}

	if u.GetDeploymentGitSourceBitbucket4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceBitbucket4, "", true)
	}

	if u.GetDeploymentGitSourceBitbucket5 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceBitbucket5, "", true)
	}

	if u.GetDeploymentGitSourceCustom2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceCustom2, "", true)
	}

	if u.GetDeploymentGitSourceGithub6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithub6, "", true)
	}

	if u.GetDeploymentGitSourceGithubCustomHost6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithubCustomHost6, "", true)
	}

	if u.GetDeploymentGitSourceGitlab4 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGitlab4, "", true)
	}

	if u.GetDeploymentGitSourceBitbucket6 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceBitbucket6, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceUnion2: all fields are null")
}

type GetDeploymentProject2 struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *GetDeploymentProject2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentProject2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentProject2) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// GetDeploymentReadySubstate2 - Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
type GetDeploymentReadySubstate2 string

const (
	GetDeploymentReadySubstate2Staged   GetDeploymentReadySubstate2 = "STAGED"
	GetDeploymentReadySubstate2Rolling  GetDeploymentReadySubstate2 = "ROLLING"
	GetDeploymentReadySubstate2Promoted GetDeploymentReadySubstate2 = "PROMOTED"
)

func (e GetDeploymentReadySubstate2) ToPointer() *GetDeploymentReadySubstate2 {
	return &e
}
func (e *GetDeploymentReadySubstate2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = GetDeploymentReadySubstate2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentReadySubstate2: %v", v)
	}
}

type GetDeploymentSource2 string

const (
	GetDeploymentSource2APITriggerGitDeploy GetDeploymentSource2 = "api-trigger-git-deploy"
	GetDeploymentSource2Cli                 GetDeploymentSource2 = "cli"
	GetDeploymentSource2CloneRepo           GetDeploymentSource2 = "clone/repo"
	GetDeploymentSource2Git                 GetDeploymentSource2 = "git"
	GetDeploymentSource2Import              GetDeploymentSource2 = "import"
	GetDeploymentSource2ImportRepo          GetDeploymentSource2 = "import/repo"
	GetDeploymentSource2Redeploy            GetDeploymentSource2 = "redeploy"
	GetDeploymentSource2V0Web               GetDeploymentSource2 = "v0-web"
)

func (e GetDeploymentSource2) ToPointer() *GetDeploymentSource2 {
	return &e
}
func (e *GetDeploymentSource2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = GetDeploymentSource2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentSource2: %v", v)
	}
}

type GetDeploymentTarget2 string

const (
	GetDeploymentTarget2Staging    GetDeploymentTarget2 = "staging"
	GetDeploymentTarget2Production GetDeploymentTarget2 = "production"
)

func (e GetDeploymentTarget2) ToPointer() *GetDeploymentTarget2 {
	return &e
}
func (e *GetDeploymentTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeploymentTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTarget2: %v", v)
	}
}

type GetDeploymentOidcTokenClaims2 struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *GetDeploymentOidcTokenClaims2) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *GetDeploymentOidcTokenClaims2) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *GetDeploymentOidcTokenClaims2) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *GetDeploymentOidcTokenClaims2) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *GetDeploymentOidcTokenClaims2) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentOidcTokenClaims2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDeploymentOidcTokenClaims2) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *GetDeploymentOidcTokenClaims2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentOidcTokenClaims2) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

// Lambdas2 - The deployment including only public information
type Lambdas2 struct {
	Alias         []string `json:"alias,omitempty"`
	AliasAssigned bool     `json:"aliasAssigned"`
	BootedAt      float64  `json:"bootedAt"`
	BuildingAt    float64  `json:"buildingAt"`
	// Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
	BuildContainerFinishedAt *float64                              `json:"buildContainerFinishedAt,omitempty"`
	BuildSkipped             bool                                  `json:"buildSkipped"`
	Creator                  GetDeploymentCreator2                 `json:"creator"`
	InitReadyAt              *float64                              `json:"initReadyAt,omitempty"`
	IsFirstBranchDeployment  *bool                                 `json:"isFirstBranchDeployment,omitempty"`
	Lambdas                  []GetDeploymentLambda2                `json:"lambdas,omitempty"`
	Public                   bool                                  `json:"public"`
	Ready                    *float64                              `json:"ready,omitempty"`
	Status                   GetDeploymentStatus2                  `json:"status"`
	Team                     *GetDeploymentTeam2                   `json:"team,omitempty"`
	UserAliases              []string                              `json:"userAliases,omitempty"`
	PreviewCommentsEnabled   *bool                                 `json:"previewCommentsEnabled,omitempty"`
	TtyBuildLogs             *bool                                 `json:"ttyBuildLogs,omitempty"`
	CustomEnvironment        *GetDeploymentCustomEnvironmentUnion2 `json:"customEnvironment,omitempty"`
	AliasWarning             *GetDeploymentAliasWarning2           `json:"aliasWarning,omitempty"`
	ID                       string                                `json:"id"`
	Name                     string                                `json:"name"`
	Type                     GetDeploymentTypeLambdas2             `json:"type"`
	CreatedAt                float64                               `json:"createdAt"`
	ReadyState               GetDeploymentReadyState2              `json:"readyState"`
	AliasError               *GetDeploymentAliasError2             `json:"aliasError,omitempty"`
	AliasFinal               *string                               `json:"aliasFinal,omitempty"`
	// applies to custom domains only, defaults to `true`
	AutoAssignCustomDomains *bool                           `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                        `json:"automaticAliases,omitempty"`
	BuildErrorAt            *float64                        `json:"buildErrorAt,omitempty"`
	ChecksState             *GetDeploymentChecksState2      `json:"checksState,omitempty"`
	ChecksConclusion        *GetDeploymentChecksConclusion2 `json:"checksConclusion,omitempty"`
	DeletedAt               *float64                        `json:"deletedAt,omitempty"`
	// Computed field that is only available for deployments with a microfrontend configuration.
	DefaultRoute *string  `json:"defaultRoute,omitempty"`
	CanceledAt   *float64 `json:"canceledAt,omitempty"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
	PassiveRegions    []string                      `json:"passiveRegions,omitempty"`
	GitSource         *GetDeploymentGitSourceUnion2 `json:"gitSource,omitempty"`
	Meta              map[string]string             `json:"meta"`
	OriginCacheRegion *string                       `json:"originCacheRegion,omitempty"`
	Project           *GetDeploymentProject2        `json:"project,omitempty"`
	// Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
	ReadySubstate          *GetDeploymentReadySubstate2   `json:"readySubstate,omitempty"`
	Regions                []string                       `json:"regions"`
	SoftDeletedByRetention *bool                          `json:"softDeletedByRetention,omitempty"`
	Source                 *GetDeploymentSource2          `json:"source,omitempty"`
	Target                 *GetDeploymentTarget2          `json:"target,omitempty"`
	UndeletedAt            *float64                       `json:"undeletedAt,omitempty"`
	URL                    string                         `json:"url"`
	Version                float64                        `json:"version"`
	OidcTokenClaims        *GetDeploymentOidcTokenClaims2 `json:"oidcTokenClaims,omitempty"`
}

func (o *Lambdas2) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Lambdas2) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *Lambdas2) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *Lambdas2) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *Lambdas2) GetBuildContainerFinishedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildContainerFinishedAt
}

func (o *Lambdas2) GetBuildSkipped() bool {
	if o == nil {
		return false
	}
	return o.BuildSkipped
}

func (o *Lambdas2) GetCreator() GetDeploymentCreator2 {
	if o == nil {
		return GetDeploymentCreator2{}
	}
	return o.Creator
}

func (o *Lambdas2) GetInitReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.InitReadyAt
}

func (o *Lambdas2) GetIsFirstBranchDeployment() *bool {
	if o == nil {
		return nil
	}
	return o.IsFirstBranchDeployment
}

func (o *Lambdas2) GetLambdas() []GetDeploymentLambda2 {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *Lambdas2) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *Lambdas2) GetReady() *float64 {
	if o == nil {
		return nil
	}
	return o.Ready
}

func (o *Lambdas2) GetStatus() GetDeploymentStatus2 {
	if o == nil {
		return GetDeploymentStatus2("")
	}
	return o.Status
}

func (o *Lambdas2) GetTeam() *GetDeploymentTeam2 {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *Lambdas2) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *Lambdas2) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *Lambdas2) GetTtyBuildLogs() *bool {
	if o == nil {
		return nil
	}
	return o.TtyBuildLogs
}

func (o *Lambdas2) GetCustomEnvironment() *GetDeploymentCustomEnvironmentUnion2 {
	if o == nil {
		return nil
	}
	return o.CustomEnvironment
}

func (o *Lambdas2) GetAliasWarning() *GetDeploymentAliasWarning2 {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *Lambdas2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Lambdas2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Lambdas2) GetType() GetDeploymentTypeLambdas2 {
	if o == nil {
		return GetDeploymentTypeLambdas2("")
	}
	return o.Type
}

func (o *Lambdas2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *Lambdas2) GetReadyState() GetDeploymentReadyState2 {
	if o == nil {
		return GetDeploymentReadyState2("")
	}
	return o.ReadyState
}

func (o *Lambdas2) GetAliasError() *GetDeploymentAliasError2 {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *Lambdas2) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *Lambdas2) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *Lambdas2) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *Lambdas2) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *Lambdas2) GetChecksState() *GetDeploymentChecksState2 {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *Lambdas2) GetChecksConclusion() *GetDeploymentChecksConclusion2 {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *Lambdas2) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Lambdas2) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *Lambdas2) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *Lambdas2) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *Lambdas2) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *Lambdas2) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *Lambdas2) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *Lambdas2) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *Lambdas2) GetGitSource() *GetDeploymentGitSourceUnion2 {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *Lambdas2) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *Lambdas2) GetOriginCacheRegion() *string {
	if o == nil {
		return nil
	}
	return o.OriginCacheRegion
}

func (o *Lambdas2) GetProject() *GetDeploymentProject2 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *Lambdas2) GetReadySubstate() *GetDeploymentReadySubstate2 {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *Lambdas2) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *Lambdas2) GetSoftDeletedByRetention() *bool {
	if o == nil {
		return nil
	}
	return o.SoftDeletedByRetention
}

func (o *Lambdas2) GetSource() *GetDeploymentSource2 {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *Lambdas2) GetTarget() *GetDeploymentTarget2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Lambdas2) GetUndeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UndeletedAt
}

func (o *Lambdas2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Lambdas2) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *Lambdas2) GetOidcTokenClaims() *GetDeploymentOidcTokenClaims2 {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

type GetDeploymentAliasAssignedAtType string

const (
	GetDeploymentAliasAssignedAtTypeNumber  GetDeploymentAliasAssignedAtType = "number"
	GetDeploymentAliasAssignedAtTypeBoolean GetDeploymentAliasAssignedAtType = "boolean"
)

type GetDeploymentAliasAssignedAt struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type GetDeploymentAliasAssignedAtType
}

func CreateGetDeploymentAliasAssignedAtNumber(number float64) GetDeploymentAliasAssignedAt {
	typ := GetDeploymentAliasAssignedAtTypeNumber

	return GetDeploymentAliasAssignedAt{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetDeploymentAliasAssignedAtBoolean(boolean bool) GetDeploymentAliasAssignedAt {
	typ := GetDeploymentAliasAssignedAtTypeBoolean

	return GetDeploymentAliasAssignedAt{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetDeploymentAliasAssignedAt) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentAliasAssignedAtTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetDeploymentAliasAssignedAtTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentAliasAssignedAt", string(data))
}

func (u GetDeploymentAliasAssignedAt) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentAliasAssignedAt: all fields are null")
}

type GetDeploymentBuild1 struct {
	Env []string `json:"env"`
}

func (o *GetDeploymentBuild1) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

type GetDeploymentBuild2 struct {
	Use    string         `json:"use"`
	Src    *string        `json:"src,omitempty"`
	Config map[string]any `json:"config,omitempty"`
}

func (o *GetDeploymentBuild2) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *GetDeploymentBuild2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetDeploymentBuild2) GetConfig() map[string]any {
	if o == nil {
		return nil
	}
	return o.Config
}

type GetDeploymentFramework string

const (
	GetDeploymentFrameworkBlitzjs        GetDeploymentFramework = "blitzjs"
	GetDeploymentFrameworkNextjs         GetDeploymentFramework = "nextjs"
	GetDeploymentFrameworkGatsby         GetDeploymentFramework = "gatsby"
	GetDeploymentFrameworkRemix          GetDeploymentFramework = "remix"
	GetDeploymentFrameworkReactRouter    GetDeploymentFramework = "react-router"
	GetDeploymentFrameworkAstro          GetDeploymentFramework = "astro"
	GetDeploymentFrameworkHexo           GetDeploymentFramework = "hexo"
	GetDeploymentFrameworkEleventy       GetDeploymentFramework = "eleventy"
	GetDeploymentFrameworkDocusaurus2    GetDeploymentFramework = "docusaurus-2"
	GetDeploymentFrameworkDocusaurus     GetDeploymentFramework = "docusaurus"
	GetDeploymentFrameworkPreact         GetDeploymentFramework = "preact"
	GetDeploymentFrameworkSolidstart1    GetDeploymentFramework = "solidstart-1"
	GetDeploymentFrameworkSolidstart     GetDeploymentFramework = "solidstart"
	GetDeploymentFrameworkDojo           GetDeploymentFramework = "dojo"
	GetDeploymentFrameworkEmber          GetDeploymentFramework = "ember"
	GetDeploymentFrameworkVue            GetDeploymentFramework = "vue"
	GetDeploymentFrameworkScully         GetDeploymentFramework = "scully"
	GetDeploymentFrameworkIonicAngular   GetDeploymentFramework = "ionic-angular"
	GetDeploymentFrameworkAngular        GetDeploymentFramework = "angular"
	GetDeploymentFrameworkPolymer        GetDeploymentFramework = "polymer"
	GetDeploymentFrameworkSvelte         GetDeploymentFramework = "svelte"
	GetDeploymentFrameworkSveltekit      GetDeploymentFramework = "sveltekit"
	GetDeploymentFrameworkSveltekit1     GetDeploymentFramework = "sveltekit-1"
	GetDeploymentFrameworkIonicReact     GetDeploymentFramework = "ionic-react"
	GetDeploymentFrameworkCreateReactApp GetDeploymentFramework = "create-react-app"
	GetDeploymentFrameworkGridsome       GetDeploymentFramework = "gridsome"
	GetDeploymentFrameworkUmijs          GetDeploymentFramework = "umijs"
	GetDeploymentFrameworkSapper         GetDeploymentFramework = "sapper"
	GetDeploymentFrameworkSaber          GetDeploymentFramework = "saber"
	GetDeploymentFrameworkStencil        GetDeploymentFramework = "stencil"
	GetDeploymentFrameworkNuxtjs         GetDeploymentFramework = "nuxtjs"
	GetDeploymentFrameworkRedwoodjs      GetDeploymentFramework = "redwoodjs"
	GetDeploymentFrameworkHugo           GetDeploymentFramework = "hugo"
	GetDeploymentFrameworkJekyll         GetDeploymentFramework = "jekyll"
	GetDeploymentFrameworkBrunch         GetDeploymentFramework = "brunch"
	GetDeploymentFrameworkMiddleman      GetDeploymentFramework = "middleman"
	GetDeploymentFrameworkZola           GetDeploymentFramework = "zola"
	GetDeploymentFrameworkHydrogen       GetDeploymentFramework = "hydrogen"
	GetDeploymentFrameworkVite           GetDeploymentFramework = "vite"
	GetDeploymentFrameworkVitepress      GetDeploymentFramework = "vitepress"
	GetDeploymentFrameworkVuepress       GetDeploymentFramework = "vuepress"
	GetDeploymentFrameworkParcel         GetDeploymentFramework = "parcel"
	GetDeploymentFrameworkFasthtml       GetDeploymentFramework = "fasthtml"
	GetDeploymentFrameworkSanityV3       GetDeploymentFramework = "sanity-v3"
	GetDeploymentFrameworkSanity         GetDeploymentFramework = "sanity"
	GetDeploymentFrameworkStorybook      GetDeploymentFramework = "storybook"
)

func (e GetDeploymentFramework) ToPointer() *GetDeploymentFramework {
	return &e
}
func (e *GetDeploymentFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetDeploymentFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentFramework: %v", v)
	}
}

type GetDeploymentSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *GetDeploymentSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *GetDeploymentSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetDeploymentSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeploymentSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *GetDeploymentSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type GetDeploymentWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *GetDeploymentWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetDeploymentWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetDeploymentWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *GetDeploymentWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type GetDeploymentProjectSettings struct {
	BuildCommand                *string                     `json:"buildCommand,omitempty"`
	DevCommand                  *string                     `json:"devCommand,omitempty"`
	Framework                   *GetDeploymentFramework     `json:"framework,omitempty"`
	CommandForIgnoringBuildStep *string                     `json:"commandForIgnoringBuildStep,omitempty"`
	InstallCommand              *string                     `json:"installCommand,omitempty"`
	OutputDirectory             *string                     `json:"outputDirectory,omitempty"`
	SpeedInsights               *GetDeploymentSpeedInsights `json:"speedInsights,omitempty"`
	WebAnalytics                *GetDeploymentWebAnalytics  `json:"webAnalytics,omitempty"`
}

func (o *GetDeploymentProjectSettings) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *GetDeploymentProjectSettings) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *GetDeploymentProjectSettings) GetFramework() *GetDeploymentFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetDeploymentProjectSettings) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *GetDeploymentProjectSettings) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *GetDeploymentProjectSettings) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *GetDeploymentProjectSettings) GetSpeedInsights() *GetDeploymentSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *GetDeploymentProjectSettings) GetWebAnalytics() *GetDeploymentWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type GetDeploymentIntegrationsStatus string

const (
	GetDeploymentIntegrationsStatusError   GetDeploymentIntegrationsStatus = "error"
	GetDeploymentIntegrationsStatusSkipped GetDeploymentIntegrationsStatus = "skipped"
	GetDeploymentIntegrationsStatusPending GetDeploymentIntegrationsStatus = "pending"
	GetDeploymentIntegrationsStatusReady   GetDeploymentIntegrationsStatus = "ready"
	GetDeploymentIntegrationsStatusTimeout GetDeploymentIntegrationsStatus = "timeout"
)

func (e GetDeploymentIntegrationsStatus) ToPointer() *GetDeploymentIntegrationsStatus {
	return &e
}
func (e *GetDeploymentIntegrationsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "ready":
		fallthrough
	case "timeout":
		*e = GetDeploymentIntegrationsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentIntegrationsStatus: %v", v)
	}
}

type GetDeploymentIntegrations struct {
	Status      GetDeploymentIntegrationsStatus `json:"status"`
	StartedAt   float64                         `json:"startedAt"`
	CompletedAt *float64                        `json:"completedAt,omitempty"`
	SkippedAt   *float64                        `json:"skippedAt,omitempty"`
	SkippedBy   *string                         `json:"skippedBy,omitempty"`
}

func (o *GetDeploymentIntegrations) GetStatus() GetDeploymentIntegrationsStatus {
	if o == nil {
		return GetDeploymentIntegrationsStatus("")
	}
	return o.Status
}

func (o *GetDeploymentIntegrations) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *GetDeploymentIntegrations) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *GetDeploymentIntegrations) GetSkippedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkippedAt
}

func (o *GetDeploymentIntegrations) GetSkippedBy() *string {
	if o == nil {
		return nil
	}
	return o.SkippedBy
}

// GetDeploymentProtocol - Must be `http` or `https`.
type GetDeploymentProtocol string

const (
	GetDeploymentProtocolHTTP  GetDeploymentProtocol = "http"
	GetDeploymentProtocolHTTPS GetDeploymentProtocol = "https"
)

func (e GetDeploymentProtocol) ToPointer() *GetDeploymentProtocol {
	return &e
}
func (e *GetDeploymentProtocol) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		fallthrough
	case "https":
		*e = GetDeploymentProtocol(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentProtocol: %v", v)
	}
}

type GetDeploymentRemotePattern struct {
	// Must be `http` or `https`.
	Protocol *GetDeploymentProtocol `json:"protocol,omitempty"`
	// Can be literal or wildcard. Single `*` matches a single subdomain. Double `**` matches any number of subdomains.
	Hostname string `json:"hostname"`
	// Can be literal port such as `8080` or empty string meaning no port.
	Port *string `json:"port,omitempty"`
	// Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
	Pathname *string `json:"pathname,omitempty"`
	// Can be literal query string such as `?v=1` or empty string meaning no query string.
	Search *string `json:"search,omitempty"`
}

func (o *GetDeploymentRemotePattern) GetProtocol() *GetDeploymentProtocol {
	if o == nil {
		return nil
	}
	return o.Protocol
}

func (o *GetDeploymentRemotePattern) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *GetDeploymentRemotePattern) GetPort() *string {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *GetDeploymentRemotePattern) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *GetDeploymentRemotePattern) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type GetDeploymentLocalPattern struct {
	// Can be literal or wildcard. Single `*` matches a single path segment. Double `**` matches any number of path segments.
	Pathname *string `json:"pathname,omitempty"`
	// Can be literal query string such as `?v=1` or empty string meaning no query string.
	Search *string `json:"search,omitempty"`
}

func (o *GetDeploymentLocalPattern) GetPathname() *string {
	if o == nil {
		return nil
	}
	return o.Pathname
}

func (o *GetDeploymentLocalPattern) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

type GetDeploymentFormat string

const (
	GetDeploymentFormatImageAvif GetDeploymentFormat = "image/avif"
	GetDeploymentFormatImageWebp GetDeploymentFormat = "image/webp"
)

func (e GetDeploymentFormat) ToPointer() *GetDeploymentFormat {
	return &e
}
func (e *GetDeploymentFormat) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "image/avif":
		fallthrough
	case "image/webp":
		*e = GetDeploymentFormat(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentFormat: %v", v)
	}
}

type GetDeploymentContentDispositionType string

const (
	GetDeploymentContentDispositionTypeInline     GetDeploymentContentDispositionType = "inline"
	GetDeploymentContentDispositionTypeAttachment GetDeploymentContentDispositionType = "attachment"
)

func (e GetDeploymentContentDispositionType) ToPointer() *GetDeploymentContentDispositionType {
	return &e
}
func (e *GetDeploymentContentDispositionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "inline":
		fallthrough
	case "attachment":
		*e = GetDeploymentContentDispositionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentContentDispositionType: %v", v)
	}
}

type GetDeploymentImages struct {
	Sizes                  []float64                            `json:"sizes,omitempty"`
	Qualities              []float64                            `json:"qualities,omitempty"`
	Domains                []string                             `json:"domains,omitempty"`
	RemotePatterns         []GetDeploymentRemotePattern         `json:"remotePatterns,omitempty"`
	LocalPatterns          []GetDeploymentLocalPattern          `json:"localPatterns,omitempty"`
	MinimumCacheTTL        *float64                             `json:"minimumCacheTTL,omitempty"`
	Formats                []GetDeploymentFormat                `json:"formats,omitempty"`
	DangerouslyAllowSVG    *bool                                `json:"dangerouslyAllowSVG,omitempty"`
	ContentSecurityPolicy  *string                              `json:"contentSecurityPolicy,omitempty"`
	ContentDispositionType *GetDeploymentContentDispositionType `json:"contentDispositionType,omitempty"`
}

func (o *GetDeploymentImages) GetSizes() []float64 {
	if o == nil {
		return nil
	}
	return o.Sizes
}

func (o *GetDeploymentImages) GetQualities() []float64 {
	if o == nil {
		return nil
	}
	return o.Qualities
}

func (o *GetDeploymentImages) GetDomains() []string {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *GetDeploymentImages) GetRemotePatterns() []GetDeploymentRemotePattern {
	if o == nil {
		return nil
	}
	return o.RemotePatterns
}

func (o *GetDeploymentImages) GetLocalPatterns() []GetDeploymentLocalPattern {
	if o == nil {
		return nil
	}
	return o.LocalPatterns
}

func (o *GetDeploymentImages) GetMinimumCacheTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.MinimumCacheTTL
}

func (o *GetDeploymentImages) GetFormats() []GetDeploymentFormat {
	if o == nil {
		return nil
	}
	return o.Formats
}

func (o *GetDeploymentImages) GetDangerouslyAllowSVG() *bool {
	if o == nil {
		return nil
	}
	return o.DangerouslyAllowSVG
}

func (o *GetDeploymentImages) GetContentSecurityPolicy() *string {
	if o == nil {
		return nil
	}
	return o.ContentSecurityPolicy
}

func (o *GetDeploymentImages) GetContentDispositionType() *GetDeploymentContentDispositionType {
	if o == nil {
		return nil
	}
	return o.ContentDispositionType
}

type GetDeploymentCreator1 struct {
	UID      string  `json:"uid"`
	Username *string `json:"username,omitempty"`
	Avatar   *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentCreator1) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetDeploymentCreator1) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

func (o *GetDeploymentCreator1) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentLambdaReadyState1 string

const (
	GetDeploymentLambdaReadyState1Building     GetDeploymentLambdaReadyState1 = "BUILDING"
	GetDeploymentLambdaReadyState1Error        GetDeploymentLambdaReadyState1 = "ERROR"
	GetDeploymentLambdaReadyState1Initializing GetDeploymentLambdaReadyState1 = "INITIALIZING"
	GetDeploymentLambdaReadyState1Ready        GetDeploymentLambdaReadyState1 = "READY"
)

func (e GetDeploymentLambdaReadyState1) ToPointer() *GetDeploymentLambdaReadyState1 {
	return &e
}
func (e *GetDeploymentLambdaReadyState1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		*e = GetDeploymentLambdaReadyState1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentLambdaReadyState1: %v", v)
	}
}

type GetDeploymentOutput1 struct {
	Path         string `json:"path"`
	FunctionName string `json:"functionName"`
}

func (o *GetDeploymentOutput1) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentOutput1) GetFunctionName() string {
	if o == nil {
		return ""
	}
	return o.FunctionName
}

// GetDeploymentLambda1 - A partial representation of a Build used by the deployment endpoint.
type GetDeploymentLambda1 struct {
	ID           *string                         `json:"id,omitempty"`
	CreatedAt    *float64                        `json:"createdAt,omitempty"`
	Entrypoint   *string                         `json:"entrypoint,omitempty"`
	ReadyState   *GetDeploymentLambdaReadyState1 `json:"readyState,omitempty"`
	ReadyStateAt *float64                        `json:"readyStateAt,omitempty"`
	Output       []GetDeploymentOutput1          `json:"output"`
}

func (o *GetDeploymentLambda1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetDeploymentLambda1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentLambda1) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *GetDeploymentLambda1) GetReadyState() *GetDeploymentLambdaReadyState1 {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

func (o *GetDeploymentLambda1) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

func (o *GetDeploymentLambda1) GetOutput() []GetDeploymentOutput1 {
	if o == nil {
		return []GetDeploymentOutput1{}
	}
	return o.Output
}

type GetDeploymentStatus1 string

const (
	GetDeploymentStatus1Queued       GetDeploymentStatus1 = "QUEUED"
	GetDeploymentStatus1Building     GetDeploymentStatus1 = "BUILDING"
	GetDeploymentStatus1Error        GetDeploymentStatus1 = "ERROR"
	GetDeploymentStatus1Initializing GetDeploymentStatus1 = "INITIALIZING"
	GetDeploymentStatus1Ready        GetDeploymentStatus1 = "READY"
	GetDeploymentStatus1Canceled     GetDeploymentStatus1 = "CANCELED"
)

func (e GetDeploymentStatus1) ToPointer() *GetDeploymentStatus1 {
	return &e
}
func (e *GetDeploymentStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentStatus1: %v", v)
	}
}

type GetDeploymentTeam1 struct {
	ID     string  `json:"id"`
	Name   string  `json:"name"`
	Slug   string  `json:"slug"`
	Avatar *string `json:"avatar,omitempty"`
}

func (o *GetDeploymentTeam1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentTeam1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentTeam1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentTeam1) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

type GetDeploymentCustomEnvironment2 struct {
	ID string `json:"id"`
}

func (o *GetDeploymentCustomEnvironment2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetDeploymentCustomEnvironmentType1 - The type of environment (production, preview, or development)
type GetDeploymentCustomEnvironmentType1 string

const (
	GetDeploymentCustomEnvironmentType1Production  GetDeploymentCustomEnvironmentType1 = "production"
	GetDeploymentCustomEnvironmentType1Preview     GetDeploymentCustomEnvironmentType1 = "preview"
	GetDeploymentCustomEnvironmentType1Development GetDeploymentCustomEnvironmentType1 = "development"
)

func (e GetDeploymentCustomEnvironmentType1) ToPointer() *GetDeploymentCustomEnvironmentType1 {
	return &e
}
func (e *GetDeploymentCustomEnvironmentType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetDeploymentCustomEnvironmentType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentCustomEnvironmentType1: %v", v)
	}
}

// GetDeploymentBranchMatcherType1 - The type of matching to perform
type GetDeploymentBranchMatcherType1 string

const (
	GetDeploymentBranchMatcherType1StartsWith GetDeploymentBranchMatcherType1 = "startsWith"
	GetDeploymentBranchMatcherType1Equals     GetDeploymentBranchMatcherType1 = "equals"
	GetDeploymentBranchMatcherType1EndsWith   GetDeploymentBranchMatcherType1 = "endsWith"
)

func (e GetDeploymentBranchMatcherType1) ToPointer() *GetDeploymentBranchMatcherType1 {
	return &e
}
func (e *GetDeploymentBranchMatcherType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "startsWith":
		fallthrough
	case "equals":
		fallthrough
	case "endsWith":
		*e = GetDeploymentBranchMatcherType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentBranchMatcherType1: %v", v)
	}
}

// GetDeploymentBranchMatcher1 - Configuration for matching git branches to this environment
type GetDeploymentBranchMatcher1 struct {
	// The type of matching to perform
	Type GetDeploymentBranchMatcherType1 `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *GetDeploymentBranchMatcher1) GetType() GetDeploymentBranchMatcherType1 {
	if o == nil {
		return GetDeploymentBranchMatcherType1("")
	}
	return o.Type
}

func (o *GetDeploymentBranchMatcher1) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// GetDeploymentVerification1 - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetDeploymentVerification1 struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetDeploymentVerification1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetDeploymentVerification1) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetDeploymentVerification1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetDeploymentVerification1) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// GetDeploymentDomain1 - List of domains associated with this environment
type GetDeploymentDomain1 struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetDeploymentVerification1 `json:"verification,omitempty"`
}

func (o *GetDeploymentDomain1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentDomain1) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetDeploymentDomain1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentDomain1) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetDeploymentDomain1) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetDeploymentDomain1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetDeploymentDomain1) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetDeploymentDomain1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetDeploymentDomain1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetDeploymentDomain1) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetDeploymentDomain1) GetVerification() []GetDeploymentVerification1 {
	if o == nil {
		return nil
	}
	return o.Verification
}

// GetDeploymentCustomEnvironment1 - Internal representation of a custom environment with all required properties
type GetDeploymentCustomEnvironment1 struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type GetDeploymentCustomEnvironmentType1 `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *GetDeploymentBranchMatcher1 `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []GetDeploymentDomain1 `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *GetDeploymentCustomEnvironment1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentCustomEnvironment1) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentCustomEnvironment1) GetType() GetDeploymentCustomEnvironmentType1 {
	if o == nil {
		return GetDeploymentCustomEnvironmentType1("")
	}
	return o.Type
}

func (o *GetDeploymentCustomEnvironment1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetDeploymentCustomEnvironment1) GetBranchMatcher() *GetDeploymentBranchMatcher1 {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *GetDeploymentCustomEnvironment1) GetDomains() []GetDeploymentDomain1 {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *GetDeploymentCustomEnvironment1) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *GetDeploymentCustomEnvironment1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDeploymentCustomEnvironment1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type GetDeploymentCustomEnvironmentUnion1Type string

const (
	GetDeploymentCustomEnvironmentUnion1TypeGetDeploymentCustomEnvironment1 GetDeploymentCustomEnvironmentUnion1Type = "getDeployment_customEnvironment_1"
	GetDeploymentCustomEnvironmentUnion1TypeGetDeploymentCustomEnvironment2 GetDeploymentCustomEnvironmentUnion1Type = "getDeployment_customEnvironment_2"
)

type GetDeploymentCustomEnvironmentUnion1 struct {
	GetDeploymentCustomEnvironment1 *GetDeploymentCustomEnvironment1 `queryParam:"inline"`
	GetDeploymentCustomEnvironment2 *GetDeploymentCustomEnvironment2 `queryParam:"inline"`

	Type GetDeploymentCustomEnvironmentUnion1Type
}

func CreateGetDeploymentCustomEnvironmentUnion1GetDeploymentCustomEnvironment1(getDeploymentCustomEnvironment1 GetDeploymentCustomEnvironment1) GetDeploymentCustomEnvironmentUnion1 {
	typ := GetDeploymentCustomEnvironmentUnion1TypeGetDeploymentCustomEnvironment1

	return GetDeploymentCustomEnvironmentUnion1{
		GetDeploymentCustomEnvironment1: &getDeploymentCustomEnvironment1,
		Type:                            typ,
	}
}

func CreateGetDeploymentCustomEnvironmentUnion1GetDeploymentCustomEnvironment2(getDeploymentCustomEnvironment2 GetDeploymentCustomEnvironment2) GetDeploymentCustomEnvironmentUnion1 {
	typ := GetDeploymentCustomEnvironmentUnion1TypeGetDeploymentCustomEnvironment2

	return GetDeploymentCustomEnvironmentUnion1{
		GetDeploymentCustomEnvironment2: &getDeploymentCustomEnvironment2,
		Type:                            typ,
	}
}

func (u *GetDeploymentCustomEnvironmentUnion1) UnmarshalJSON(data []byte) error {

	var getDeploymentCustomEnvironment2 GetDeploymentCustomEnvironment2 = GetDeploymentCustomEnvironment2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironment2, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironment2 = &getDeploymentCustomEnvironment2
		u.Type = GetDeploymentCustomEnvironmentUnion1TypeGetDeploymentCustomEnvironment2
		return nil
	}

	var getDeploymentCustomEnvironment1 GetDeploymentCustomEnvironment1 = GetDeploymentCustomEnvironment1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentCustomEnvironment1, "", true, true); err == nil {
		u.GetDeploymentCustomEnvironment1 = &getDeploymentCustomEnvironment1
		u.Type = GetDeploymentCustomEnvironmentUnion1TypeGetDeploymentCustomEnvironment1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentCustomEnvironmentUnion1", string(data))
}

func (u GetDeploymentCustomEnvironmentUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentCustomEnvironment1 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironment1, "", true)
	}

	if u.GetDeploymentCustomEnvironment2 != nil {
		return utils.MarshalJSON(u.GetDeploymentCustomEnvironment2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentCustomEnvironmentUnion1: all fields are null")
}

type GetDeploymentAliasWarning1 struct {
	Code    string  `json:"code"`
	Message string  `json:"message"`
	Link    *string `json:"link,omitempty"`
	Action  *string `json:"action,omitempty"`
}

func (o *GetDeploymentAliasWarning1) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentAliasWarning1) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *GetDeploymentAliasWarning1) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetDeploymentAliasWarning1) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetDeploymentTypeLambdas1 string

const (
	GetDeploymentTypeLambdas1Lambdas GetDeploymentTypeLambdas1 = "LAMBDAS"
)

func (e GetDeploymentTypeLambdas1) ToPointer() *GetDeploymentTypeLambdas1 {
	return &e
}
func (e *GetDeploymentTypeLambdas1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetDeploymentTypeLambdas1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeLambdas1: %v", v)
	}
}

type GetDeploymentReadyState1 string

const (
	GetDeploymentReadyState1Queued       GetDeploymentReadyState1 = "QUEUED"
	GetDeploymentReadyState1Building     GetDeploymentReadyState1 = "BUILDING"
	GetDeploymentReadyState1Error        GetDeploymentReadyState1 = "ERROR"
	GetDeploymentReadyState1Initializing GetDeploymentReadyState1 = "INITIALIZING"
	GetDeploymentReadyState1Ready        GetDeploymentReadyState1 = "READY"
	GetDeploymentReadyState1Canceled     GetDeploymentReadyState1 = "CANCELED"
)

func (e GetDeploymentReadyState1) ToPointer() *GetDeploymentReadyState1 {
	return &e
}
func (e *GetDeploymentReadyState1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "QUEUED":
		fallthrough
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetDeploymentReadyState1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentReadyState1: %v", v)
	}
}

type GetDeploymentAliasError1 struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetDeploymentAliasError1) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetDeploymentAliasError1) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

type GetDeploymentChecksState1 string

const (
	GetDeploymentChecksState1Registered GetDeploymentChecksState1 = "registered"
	GetDeploymentChecksState1Running    GetDeploymentChecksState1 = "running"
	GetDeploymentChecksState1Completed  GetDeploymentChecksState1 = "completed"
)

func (e GetDeploymentChecksState1) ToPointer() *GetDeploymentChecksState1 {
	return &e
}
func (e *GetDeploymentChecksState1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetDeploymentChecksState1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentChecksState1: %v", v)
	}
}

type GetDeploymentChecksConclusion1 string

const (
	GetDeploymentChecksConclusion1Succeeded GetDeploymentChecksConclusion1 = "succeeded"
	GetDeploymentChecksConclusion1Failed    GetDeploymentChecksConclusion1 = "failed"
	GetDeploymentChecksConclusion1Skipped   GetDeploymentChecksConclusion1 = "skipped"
	GetDeploymentChecksConclusion1Canceled  GetDeploymentChecksConclusion1 = "canceled"
)

func (e GetDeploymentChecksConclusion1) ToPointer() *GetDeploymentChecksConclusion1 {
	return &e
}
func (e *GetDeploymentChecksConclusion1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetDeploymentChecksConclusion1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentChecksConclusion1: %v", v)
	}
}

type GetDeploymentGitSourceTypeBitbucket3 string

const (
	GetDeploymentGitSourceTypeBitbucket3Bitbucket GetDeploymentGitSourceTypeBitbucket3 = "bitbucket"
)

func (e GetDeploymentGitSourceTypeBitbucket3) ToPointer() *GetDeploymentGitSourceTypeBitbucket3 {
	return &e
}
func (e *GetDeploymentGitSourceTypeBitbucket3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceTypeBitbucket3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeBitbucket3: %v", v)
	}
}

type GetDeploymentGitSourceBitbucket3 struct {
	Type          GetDeploymentGitSourceTypeBitbucket3 `json:"type"`
	Ref           string                               `json:"ref"`
	Sha           string                               `json:"sha"`
	Owner         *string                              `json:"owner,omitempty"`
	Slug          *string                              `json:"slug,omitempty"`
	WorkspaceUUID string                               `json:"workspaceUuid"`
	RepoUUID      string                               `json:"repoUuid"`
}

func (o *GetDeploymentGitSourceBitbucket3) GetType() GetDeploymentGitSourceTypeBitbucket3 {
	if o == nil {
		return GetDeploymentGitSourceTypeBitbucket3("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceBitbucket3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceBitbucket3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceBitbucket3) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceBitbucket3) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceBitbucket3) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceBitbucket3) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

type GetDeploymentGitSourceTypeGitlab2 string

const (
	GetDeploymentGitSourceTypeGitlab2Gitlab GetDeploymentGitSourceTypeGitlab2 = "gitlab"
)

func (e GetDeploymentGitSourceTypeGitlab2) ToPointer() *GetDeploymentGitSourceTypeGitlab2 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGitlab2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceTypeGitlab2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGitlab2: %v", v)
	}
}

type GetDeploymentGitSourceGitlab2 struct {
	Type      GetDeploymentGitSourceTypeGitlab2 `json:"type"`
	Ref       string                            `json:"ref"`
	Sha       string                            `json:"sha"`
	ProjectID float64                           `json:"projectId"`
}

func (o *GetDeploymentGitSourceGitlab2) GetType() GetDeploymentGitSourceTypeGitlab2 {
	if o == nil {
		return GetDeploymentGitSourceTypeGitlab2("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGitlab2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGitlab2) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGitlab2) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

type GetDeploymentTypeGithubCustomHost3 string

const (
	GetDeploymentTypeGithubCustomHost3GithubCustomHost GetDeploymentTypeGithubCustomHost3 = "github-custom-host"
)

func (e GetDeploymentTypeGithubCustomHost3) ToPointer() *GetDeploymentTypeGithubCustomHost3 {
	return &e
}
func (e *GetDeploymentTypeGithubCustomHost3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetDeploymentTypeGithubCustomHost3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeGithubCustomHost3: %v", v)
	}
}

type GetDeploymentGitSourceGithubCustomHost3 struct {
	Type   GetDeploymentTypeGithubCustomHost3 `json:"type"`
	Host   string                             `json:"host"`
	Ref    string                             `json:"ref"`
	Sha    string                             `json:"sha"`
	RepoID float64                            `json:"repoId"`
	Org    *string                            `json:"org,omitempty"`
	Repo   *string                            `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetType() GetDeploymentTypeGithubCustomHost3 {
	if o == nil {
		return GetDeploymentTypeGithubCustomHost3("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithubCustomHost3) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentGitSourceTypeGithub3 string

const (
	GetDeploymentGitSourceTypeGithub3Github GetDeploymentGitSourceTypeGithub3 = "github"
)

func (e GetDeploymentGitSourceTypeGithub3) ToPointer() *GetDeploymentGitSourceTypeGithub3 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGithub3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceTypeGithub3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGithub3: %v", v)
	}
}

type GetDeploymentGitSourceGithub3 struct {
	Type   GetDeploymentGitSourceTypeGithub3 `json:"type"`
	Ref    string                            `json:"ref"`
	Sha    string                            `json:"sha"`
	RepoID float64                           `json:"repoId"`
	Org    *string                           `json:"org,omitempty"`
	Repo   *string                           `json:"repo,omitempty"`
}

func (o *GetDeploymentGitSourceGithub3) GetType() GetDeploymentGitSourceTypeGithub3 {
	if o == nil {
		return GetDeploymentGitSourceTypeGithub3("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithub3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithub3) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithub3) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithub3) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithub3) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

type GetDeploymentTypeCustom1 string

const (
	GetDeploymentTypeCustom1Custom GetDeploymentTypeCustom1 = "custom"
)

func (e GetDeploymentTypeCustom1) ToPointer() *GetDeploymentTypeCustom1 {
	return &e
}
func (e *GetDeploymentTypeCustom1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "custom":
		*e = GetDeploymentTypeCustom1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeCustom1: %v", v)
	}
}

// GetDeploymentGitSourceCustom1 - Allows custom git sources (local folder mounted to the container) in test mode
type GetDeploymentGitSourceCustom1 struct {
	Type   GetDeploymentTypeCustom1 `json:"type"`
	Ref    string                   `json:"ref"`
	Sha    string                   `json:"sha"`
	GitURL string                   `json:"gitUrl"`
}

func (o *GetDeploymentGitSourceCustom1) GetType() GetDeploymentTypeCustom1 {
	if o == nil {
		return GetDeploymentTypeCustom1("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceCustom1) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceCustom1) GetSha() string {
	if o == nil {
		return ""
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceCustom1) GetGitURL() string {
	if o == nil {
		return ""
	}
	return o.GitURL
}

type GetDeploymentGitSourceTypeBitbucket2 string

const (
	GetDeploymentGitSourceTypeBitbucket2Bitbucket GetDeploymentGitSourceTypeBitbucket2 = "bitbucket"
)

func (e GetDeploymentGitSourceTypeBitbucket2) ToPointer() *GetDeploymentGitSourceTypeBitbucket2 {
	return &e
}
func (e *GetDeploymentGitSourceTypeBitbucket2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceTypeBitbucket2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeBitbucket2: %v", v)
	}
}

type GetDeploymentGitSourceBitbucket2 struct {
	Type  GetDeploymentGitSourceTypeBitbucket2 `json:"type"`
	Owner string                               `json:"owner"`
	Slug  string                               `json:"slug"`
	Ref   *string                              `json:"ref,omitempty"`
	Sha   *string                              `json:"sha,omitempty"`
	PrID  *float64                             `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceBitbucket2) GetType() GetDeploymentGitSourceTypeBitbucket2 {
	if o == nil {
		return GetDeploymentGitSourceTypeBitbucket2("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceBitbucket2) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitSourceBitbucket2) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitSourceBitbucket2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceBitbucket2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceBitbucket2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeBitbucket1 string

const (
	GetDeploymentGitSourceTypeBitbucket1Bitbucket GetDeploymentGitSourceTypeBitbucket1 = "bitbucket"
)

func (e GetDeploymentGitSourceTypeBitbucket1) ToPointer() *GetDeploymentGitSourceTypeBitbucket1 {
	return &e
}
func (e *GetDeploymentGitSourceTypeBitbucket1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitSourceTypeBitbucket1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeBitbucket1: %v", v)
	}
}

type GetDeploymentGitSourceBitbucket1 struct {
	Type          GetDeploymentGitSourceTypeBitbucket1 `json:"type"`
	WorkspaceUUID *string                              `json:"workspaceUuid,omitempty"`
	RepoUUID      string                               `json:"repoUuid"`
	Ref           *string                              `json:"ref,omitempty"`
	Sha           *string                              `json:"sha,omitempty"`
	PrID          *float64                             `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceBitbucket1) GetType() GetDeploymentGitSourceTypeBitbucket1 {
	if o == nil {
		return GetDeploymentGitSourceTypeBitbucket1("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceBitbucket1) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitSourceBitbucket1) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitSourceBitbucket1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceBitbucket1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceBitbucket1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeGitlab1 string

const (
	GetDeploymentGitSourceTypeGitlab1Gitlab GetDeploymentGitSourceTypeGitlab1 = "gitlab"
)

func (e GetDeploymentGitSourceTypeGitlab1) ToPointer() *GetDeploymentGitSourceTypeGitlab1 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGitlab1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitSourceTypeGitlab1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGitlab1: %v", v)
	}
}

type GetDeploymentProjectID1Type string

const (
	GetDeploymentProjectID1TypeStr    GetDeploymentProjectID1Type = "str"
	GetDeploymentProjectID1TypeNumber GetDeploymentProjectID1Type = "number"
)

type GetDeploymentProjectID1 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetDeploymentProjectID1Type
}

func CreateGetDeploymentProjectID1Str(str string) GetDeploymentProjectID1 {
	typ := GetDeploymentProjectID1TypeStr

	return GetDeploymentProjectID1{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentProjectID1Number(number float64) GetDeploymentProjectID1 {
	typ := GetDeploymentProjectID1TypeNumber

	return GetDeploymentProjectID1{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentProjectID1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentProjectID1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentProjectID1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentProjectID1", string(data))
}

func (u GetDeploymentProjectID1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentProjectID1: all fields are null")
}

type GetDeploymentGitSourceGitlab1 struct {
	Type      GetDeploymentGitSourceTypeGitlab1 `json:"type"`
	ProjectID GetDeploymentProjectID1           `json:"projectId"`
	Ref       *string                           `json:"ref,omitempty"`
	Sha       *string                           `json:"sha,omitempty"`
	PrID      *float64                          `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGitlab1) GetType() GetDeploymentGitSourceTypeGitlab1 {
	if o == nil {
		return GetDeploymentGitSourceTypeGitlab1("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGitlab1) GetProjectID() GetDeploymentProjectID1 {
	if o == nil {
		return GetDeploymentProjectID1{}
	}
	return o.ProjectID
}

func (o *GetDeploymentGitSourceGitlab1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGitlab1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGitlab1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentTypeGithubCustomHost2 string

const (
	GetDeploymentTypeGithubCustomHost2GithubCustomHost GetDeploymentTypeGithubCustomHost2 = "github-custom-host"
)

func (e GetDeploymentTypeGithubCustomHost2) ToPointer() *GetDeploymentTypeGithubCustomHost2 {
	return &e
}
func (e *GetDeploymentTypeGithubCustomHost2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetDeploymentTypeGithubCustomHost2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeGithubCustomHost2: %v", v)
	}
}

type GetDeploymentGitSourceGithubCustomHost2 struct {
	Type GetDeploymentTypeGithubCustomHost2 `json:"type"`
	Host string                             `json:"host"`
	Org  string                             `json:"org"`
	Repo string                             `json:"repo"`
	Ref  *string                            `json:"ref,omitempty"`
	Sha  *string                            `json:"sha,omitempty"`
	PrID *float64                           `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetType() GetDeploymentTypeGithubCustomHost2 {
	if o == nil {
		return GetDeploymentTypeGithubCustomHost2("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithubCustomHost2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentTypeGithubCustomHost1 string

const (
	GetDeploymentTypeGithubCustomHost1GithubCustomHost GetDeploymentTypeGithubCustomHost1 = "github-custom-host"
)

func (e GetDeploymentTypeGithubCustomHost1) ToPointer() *GetDeploymentTypeGithubCustomHost1 {
	return &e
}
func (e *GetDeploymentTypeGithubCustomHost1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetDeploymentTypeGithubCustomHost1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTypeGithubCustomHost1: %v", v)
	}
}

type GetDeploymentRepoID2Type string

const (
	GetDeploymentRepoID2TypeStr    GetDeploymentRepoID2Type = "str"
	GetDeploymentRepoID2TypeNumber GetDeploymentRepoID2Type = "number"
)

type GetDeploymentRepoID2 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetDeploymentRepoID2Type
}

func CreateGetDeploymentRepoID2Str(str string) GetDeploymentRepoID2 {
	typ := GetDeploymentRepoID2TypeStr

	return GetDeploymentRepoID2{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentRepoID2Number(number float64) GetDeploymentRepoID2 {
	typ := GetDeploymentRepoID2TypeNumber

	return GetDeploymentRepoID2{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentRepoID2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentRepoID2TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentRepoID2TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRepoID2", string(data))
}

func (u GetDeploymentRepoID2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRepoID2: all fields are null")
}

type GetDeploymentGitSourceGithubCustomHost1 struct {
	Type   GetDeploymentTypeGithubCustomHost1 `json:"type"`
	Host   string                             `json:"host"`
	RepoID GetDeploymentRepoID2               `json:"repoId"`
	Ref    *string                            `json:"ref,omitempty"`
	Sha    *string                            `json:"sha,omitempty"`
	PrID   *float64                           `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithubCustomHost1) GetType() GetDeploymentTypeGithubCustomHost1 {
	if o == nil {
		return GetDeploymentTypeGithubCustomHost1("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithubCustomHost1) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetDeploymentGitSourceGithubCustomHost1) GetRepoID() GetDeploymentRepoID2 {
	if o == nil {
		return GetDeploymentRepoID2{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithubCustomHost1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithubCustomHost1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithubCustomHost1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeGithub2 string

const (
	GetDeploymentGitSourceTypeGithub2Github GetDeploymentGitSourceTypeGithub2 = "github"
)

func (e GetDeploymentGitSourceTypeGithub2) ToPointer() *GetDeploymentGitSourceTypeGithub2 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGithub2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceTypeGithub2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGithub2: %v", v)
	}
}

type GetDeploymentGitSourceGithub2 struct {
	Type GetDeploymentGitSourceTypeGithub2 `json:"type"`
	Org  string                            `json:"org"`
	Repo string                            `json:"repo"`
	Ref  *string                           `json:"ref,omitempty"`
	Sha  *string                           `json:"sha,omitempty"`
	PrID *float64                          `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithub2) GetType() GetDeploymentGitSourceTypeGithub2 {
	if o == nil {
		return GetDeploymentGitSourceTypeGithub2("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithub2) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitSourceGithub2) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitSourceGithub2) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithub2) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithub2) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceTypeGithub1 string

const (
	GetDeploymentGitSourceTypeGithub1Github GetDeploymentGitSourceTypeGithub1 = "github"
)

func (e GetDeploymentGitSourceTypeGithub1) ToPointer() *GetDeploymentGitSourceTypeGithub1 {
	return &e
}
func (e *GetDeploymentGitSourceTypeGithub1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitSourceTypeGithub1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitSourceTypeGithub1: %v", v)
	}
}

type GetDeploymentRepoID1Type string

const (
	GetDeploymentRepoID1TypeStr    GetDeploymentRepoID1Type = "str"
	GetDeploymentRepoID1TypeNumber GetDeploymentRepoID1Type = "number"
)

type GetDeploymentRepoID1 struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetDeploymentRepoID1Type
}

func CreateGetDeploymentRepoID1Str(str string) GetDeploymentRepoID1 {
	typ := GetDeploymentRepoID1TypeStr

	return GetDeploymentRepoID1{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetDeploymentRepoID1Number(number float64) GetDeploymentRepoID1 {
	typ := GetDeploymentRepoID1TypeNumber

	return GetDeploymentRepoID1{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetDeploymentRepoID1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetDeploymentRepoID1TypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetDeploymentRepoID1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRepoID1", string(data))
}

func (u GetDeploymentRepoID1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRepoID1: all fields are null")
}

type GetDeploymentGitSourceGithub1 struct {
	Type   GetDeploymentGitSourceTypeGithub1 `json:"type"`
	RepoID GetDeploymentRepoID1              `json:"repoId"`
	Ref    *string                           `json:"ref,omitempty"`
	Sha    *string                           `json:"sha,omitempty"`
	PrID   *float64                          `json:"prId,omitempty"`
}

func (o *GetDeploymentGitSourceGithub1) GetType() GetDeploymentGitSourceTypeGithub1 {
	if o == nil {
		return GetDeploymentGitSourceTypeGithub1("")
	}
	return o.Type
}

func (o *GetDeploymentGitSourceGithub1) GetRepoID() GetDeploymentRepoID1 {
	if o == nil {
		return GetDeploymentRepoID1{}
	}
	return o.RepoID
}

func (o *GetDeploymentGitSourceGithub1) GetRef() *string {
	if o == nil {
		return nil
	}
	return o.Ref
}

func (o *GetDeploymentGitSourceGithub1) GetSha() *string {
	if o == nil {
		return nil
	}
	return o.Sha
}

func (o *GetDeploymentGitSourceGithub1) GetPrID() *float64 {
	if o == nil {
		return nil
	}
	return o.PrID
}

type GetDeploymentGitSourceUnion1Type string

const (
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub1           GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Github_1"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub2           GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Github_2"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost1 GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_GithubCustomHost_1"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost2 GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_GithubCustomHost_2"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGitlab1           GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Gitlab_1"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket1        GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Bitbucket_1"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket2        GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Bitbucket_2"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceCustom1           GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Custom_1"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub3           GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Github_3"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost3 GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_GithubCustomHost_3"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGitlab2           GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Gitlab_2"
	GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket3        GetDeploymentGitSourceUnion1Type = "getDeployment_gitSource_Bitbucket_3"
)

type GetDeploymentGitSourceUnion1 struct {
	GetDeploymentGitSourceGithub1           *GetDeploymentGitSourceGithub1           `queryParam:"inline"`
	GetDeploymentGitSourceGithub2           *GetDeploymentGitSourceGithub2           `queryParam:"inline"`
	GetDeploymentGitSourceGithubCustomHost1 *GetDeploymentGitSourceGithubCustomHost1 `queryParam:"inline"`
	GetDeploymentGitSourceGithubCustomHost2 *GetDeploymentGitSourceGithubCustomHost2 `queryParam:"inline"`
	GetDeploymentGitSourceGitlab1           *GetDeploymentGitSourceGitlab1           `queryParam:"inline"`
	GetDeploymentGitSourceBitbucket1        *GetDeploymentGitSourceBitbucket1        `queryParam:"inline"`
	GetDeploymentGitSourceBitbucket2        *GetDeploymentGitSourceBitbucket2        `queryParam:"inline"`
	GetDeploymentGitSourceCustom1           *GetDeploymentGitSourceCustom1           `queryParam:"inline"`
	GetDeploymentGitSourceGithub3           *GetDeploymentGitSourceGithub3           `queryParam:"inline"`
	GetDeploymentGitSourceGithubCustomHost3 *GetDeploymentGitSourceGithubCustomHost3 `queryParam:"inline"`
	GetDeploymentGitSourceGitlab2           *GetDeploymentGitSourceGitlab2           `queryParam:"inline"`
	GetDeploymentGitSourceBitbucket3        *GetDeploymentGitSourceBitbucket3        `queryParam:"inline"`

	Type GetDeploymentGitSourceUnion1Type
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGithub1(getDeploymentGitSourceGithub1 GetDeploymentGitSourceGithub1) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub1

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGithub1: &getDeploymentGitSourceGithub1,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGithub2(getDeploymentGitSourceGithub2 GetDeploymentGitSourceGithub2) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub2

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGithub2: &getDeploymentGitSourceGithub2,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGithubCustomHost1(getDeploymentGitSourceGithubCustomHost1 GetDeploymentGitSourceGithubCustomHost1) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost1

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGithubCustomHost1: &getDeploymentGitSourceGithubCustomHost1,
		Type:                                    typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGithubCustomHost2(getDeploymentGitSourceGithubCustomHost2 GetDeploymentGitSourceGithubCustomHost2) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost2

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGithubCustomHost2: &getDeploymentGitSourceGithubCustomHost2,
		Type:                                    typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGitlab1(getDeploymentGitSourceGitlab1 GetDeploymentGitSourceGitlab1) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGitlab1

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGitlab1: &getDeploymentGitSourceGitlab1,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceBitbucket1(getDeploymentGitSourceBitbucket1 GetDeploymentGitSourceBitbucket1) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket1

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceBitbucket1: &getDeploymentGitSourceBitbucket1,
		Type:                             typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceBitbucket2(getDeploymentGitSourceBitbucket2 GetDeploymentGitSourceBitbucket2) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket2

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceBitbucket2: &getDeploymentGitSourceBitbucket2,
		Type:                             typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceCustom1(getDeploymentGitSourceCustom1 GetDeploymentGitSourceCustom1) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceCustom1

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceCustom1: &getDeploymentGitSourceCustom1,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGithub3(getDeploymentGitSourceGithub3 GetDeploymentGitSourceGithub3) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub3

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGithub3: &getDeploymentGitSourceGithub3,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGithubCustomHost3(getDeploymentGitSourceGithubCustomHost3 GetDeploymentGitSourceGithubCustomHost3) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost3

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGithubCustomHost3: &getDeploymentGitSourceGithubCustomHost3,
		Type:                                    typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceGitlab2(getDeploymentGitSourceGitlab2 GetDeploymentGitSourceGitlab2) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGitlab2

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceGitlab2: &getDeploymentGitSourceGitlab2,
		Type:                          typ,
	}
}

func CreateGetDeploymentGitSourceUnion1GetDeploymentGitSourceBitbucket3(getDeploymentGitSourceBitbucket3 GetDeploymentGitSourceBitbucket3) GetDeploymentGitSourceUnion1 {
	typ := GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket3

	return GetDeploymentGitSourceUnion1{
		GetDeploymentGitSourceBitbucket3: &getDeploymentGitSourceBitbucket3,
		Type:                             typ,
	}
}

func (u *GetDeploymentGitSourceUnion1) UnmarshalJSON(data []byte) error {

	var getDeploymentGitSourceCustom1 GetDeploymentGitSourceCustom1 = GetDeploymentGitSourceCustom1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceCustom1, "", true, true); err == nil {
		u.GetDeploymentGitSourceCustom1 = &getDeploymentGitSourceCustom1
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceCustom1
		return nil
	}

	var getDeploymentGitSourceGitlab2 GetDeploymentGitSourceGitlab2 = GetDeploymentGitSourceGitlab2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGitlab2, "", true, true); err == nil {
		u.GetDeploymentGitSourceGitlab2 = &getDeploymentGitSourceGitlab2
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGitlab2
		return nil
	}

	var getDeploymentGitSourceGithub1 GetDeploymentGitSourceGithub1 = GetDeploymentGitSourceGithub1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithub1, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithub1 = &getDeploymentGitSourceGithub1
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub1
		return nil
	}

	var getDeploymentGitSourceGitlab1 GetDeploymentGitSourceGitlab1 = GetDeploymentGitSourceGitlab1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGitlab1, "", true, true); err == nil {
		u.GetDeploymentGitSourceGitlab1 = &getDeploymentGitSourceGitlab1
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGitlab1
		return nil
	}

	var getDeploymentGitSourceGithub2 GetDeploymentGitSourceGithub2 = GetDeploymentGitSourceGithub2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithub2, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithub2 = &getDeploymentGitSourceGithub2
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub2
		return nil
	}

	var getDeploymentGitSourceGithubCustomHost1 GetDeploymentGitSourceGithubCustomHost1 = GetDeploymentGitSourceGithubCustomHost1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithubCustomHost1, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithubCustomHost1 = &getDeploymentGitSourceGithubCustomHost1
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost1
		return nil
	}

	var getDeploymentGitSourceBitbucket1 GetDeploymentGitSourceBitbucket1 = GetDeploymentGitSourceBitbucket1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceBitbucket1, "", true, true); err == nil {
		u.GetDeploymentGitSourceBitbucket1 = &getDeploymentGitSourceBitbucket1
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket1
		return nil
	}

	var getDeploymentGitSourceBitbucket2 GetDeploymentGitSourceBitbucket2 = GetDeploymentGitSourceBitbucket2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceBitbucket2, "", true, true); err == nil {
		u.GetDeploymentGitSourceBitbucket2 = &getDeploymentGitSourceBitbucket2
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket2
		return nil
	}

	var getDeploymentGitSourceGithub3 GetDeploymentGitSourceGithub3 = GetDeploymentGitSourceGithub3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithub3, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithub3 = &getDeploymentGitSourceGithub3
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithub3
		return nil
	}

	var getDeploymentGitSourceGithubCustomHost2 GetDeploymentGitSourceGithubCustomHost2 = GetDeploymentGitSourceGithubCustomHost2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithubCustomHost2, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithubCustomHost2 = &getDeploymentGitSourceGithubCustomHost2
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost2
		return nil
	}

	var getDeploymentGitSourceGithubCustomHost3 GetDeploymentGitSourceGithubCustomHost3 = GetDeploymentGitSourceGithubCustomHost3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceGithubCustomHost3, "", true, true); err == nil {
		u.GetDeploymentGitSourceGithubCustomHost3 = &getDeploymentGitSourceGithubCustomHost3
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceGithubCustomHost3
		return nil
	}

	var getDeploymentGitSourceBitbucket3 GetDeploymentGitSourceBitbucket3 = GetDeploymentGitSourceBitbucket3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitSourceBitbucket3, "", true, true); err == nil {
		u.GetDeploymentGitSourceBitbucket3 = &getDeploymentGitSourceBitbucket3
		u.Type = GetDeploymentGitSourceUnion1TypeGetDeploymentGitSourceBitbucket3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitSourceUnion1", string(data))
}

func (u GetDeploymentGitSourceUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitSourceGithub1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithub1, "", true)
	}

	if u.GetDeploymentGitSourceGithub2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithub2, "", true)
	}

	if u.GetDeploymentGitSourceGithubCustomHost1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithubCustomHost1, "", true)
	}

	if u.GetDeploymentGitSourceGithubCustomHost2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithubCustomHost2, "", true)
	}

	if u.GetDeploymentGitSourceGitlab1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGitlab1, "", true)
	}

	if u.GetDeploymentGitSourceBitbucket1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceBitbucket1, "", true)
	}

	if u.GetDeploymentGitSourceBitbucket2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceBitbucket2, "", true)
	}

	if u.GetDeploymentGitSourceCustom1 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceCustom1, "", true)
	}

	if u.GetDeploymentGitSourceGithub3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithub3, "", true)
	}

	if u.GetDeploymentGitSourceGithubCustomHost3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGithubCustomHost3, "", true)
	}

	if u.GetDeploymentGitSourceGitlab2 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceGitlab2, "", true)
	}

	if u.GetDeploymentGitSourceBitbucket3 != nil {
		return utils.MarshalJSON(u.GetDeploymentGitSourceBitbucket3, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitSourceUnion1: all fields are null")
}

type GetDeploymentProject1 struct {
	ID        string  `json:"id"`
	Name      string  `json:"name"`
	Framework *string `json:"framework,omitempty"`
}

func (o *GetDeploymentProject1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentProject1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentProject1) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

// GetDeploymentReadySubstate1 - Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
type GetDeploymentReadySubstate1 string

const (
	GetDeploymentReadySubstate1Staged   GetDeploymentReadySubstate1 = "STAGED"
	GetDeploymentReadySubstate1Rolling  GetDeploymentReadySubstate1 = "ROLLING"
	GetDeploymentReadySubstate1Promoted GetDeploymentReadySubstate1 = "PROMOTED"
)

func (e GetDeploymentReadySubstate1) ToPointer() *GetDeploymentReadySubstate1 {
	return &e
}
func (e *GetDeploymentReadySubstate1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = GetDeploymentReadySubstate1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentReadySubstate1: %v", v)
	}
}

type GetDeploymentSource1 string

const (
	GetDeploymentSource1APITriggerGitDeploy GetDeploymentSource1 = "api-trigger-git-deploy"
	GetDeploymentSource1Cli                 GetDeploymentSource1 = "cli"
	GetDeploymentSource1CloneRepo           GetDeploymentSource1 = "clone/repo"
	GetDeploymentSource1Git                 GetDeploymentSource1 = "git"
	GetDeploymentSource1Import              GetDeploymentSource1 = "import"
	GetDeploymentSource1ImportRepo          GetDeploymentSource1 = "import/repo"
	GetDeploymentSource1Redeploy            GetDeploymentSource1 = "redeploy"
	GetDeploymentSource1V0Web               GetDeploymentSource1 = "v0-web"
)

func (e GetDeploymentSource1) ToPointer() *GetDeploymentSource1 {
	return &e
}
func (e *GetDeploymentSource1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = GetDeploymentSource1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentSource1: %v", v)
	}
}

type GetDeploymentTarget1 string

const (
	GetDeploymentTarget1Staging    GetDeploymentTarget1 = "staging"
	GetDeploymentTarget1Production GetDeploymentTarget1 = "production"
)

func (e GetDeploymentTarget1) ToPointer() *GetDeploymentTarget1 {
	return &e
}
func (e *GetDeploymentTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetDeploymentTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentTarget1: %v", v)
	}
}

type GetDeploymentOidcTokenClaims1 struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *GetDeploymentOidcTokenClaims1) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *GetDeploymentOidcTokenClaims1) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *GetDeploymentOidcTokenClaims1) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *GetDeploymentOidcTokenClaims1) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *GetDeploymentOidcTokenClaims1) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentOidcTokenClaims1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDeploymentOidcTokenClaims1) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *GetDeploymentOidcTokenClaims1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetDeploymentOidcTokenClaims1) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type GetDeploymentPlan string

const (
	GetDeploymentPlanPro        GetDeploymentPlan = "pro"
	GetDeploymentPlanEnterprise GetDeploymentPlan = "enterprise"
	GetDeploymentPlanHobby      GetDeploymentPlan = "hobby"
)

func (e GetDeploymentPlan) ToPointer() *GetDeploymentPlan {
	return &e
}
func (e *GetDeploymentPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = GetDeploymentPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentPlan: %v", v)
	}
}

type GetDeploymentCron struct {
	Schedule string `json:"schedule"`
	Path     string `json:"path"`
}

func (o *GetDeploymentCron) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

func (o *GetDeploymentCron) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

type GetDeploymentArchitecture string

const (
	GetDeploymentArchitectureX8664 GetDeploymentArchitecture = "x86_64"
	GetDeploymentArchitectureArm64 GetDeploymentArchitecture = "arm64"
)

func (e GetDeploymentArchitecture) ToPointer() *GetDeploymentArchitecture {
	return &e
}
func (e *GetDeploymentArchitecture) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "x86_64":
		fallthrough
	case "arm64":
		*e = GetDeploymentArchitecture(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentArchitecture: %v", v)
	}
}

type GetDeploymentFunctions struct {
	Architecture *GetDeploymentArchitecture `json:"architecture,omitempty"`
	Memory       *float64                   `json:"memory,omitempty"`
	MaxDuration  *float64                   `json:"maxDuration,omitempty"`
	Runtime      *string                    `json:"runtime,omitempty"`
	IncludeFiles *string                    `json:"includeFiles,omitempty"`
	ExcludeFiles *string                    `json:"excludeFiles,omitempty"`
}

func (o *GetDeploymentFunctions) GetArchitecture() *GetDeploymentArchitecture {
	if o == nil {
		return nil
	}
	return o.Architecture
}

func (o *GetDeploymentFunctions) GetMemory() *float64 {
	if o == nil {
		return nil
	}
	return o.Memory
}

func (o *GetDeploymentFunctions) GetMaxDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.MaxDuration
}

func (o *GetDeploymentFunctions) GetRuntime() *string {
	if o == nil {
		return nil
	}
	return o.Runtime
}

func (o *GetDeploymentFunctions) GetIncludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.IncludeFiles
}

func (o *GetDeploymentFunctions) GetExcludeFiles() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeFiles
}

type GetDeploymentRoute3 struct {
	Src        string  `json:"src"`
	Continue   bool    `json:"continue"`
	Middleware float64 `json:"middleware"`
}

func (o *GetDeploymentRoute3) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentRoute3) GetContinue() bool {
	if o == nil {
		return false
	}
	return o.Continue
}

func (o *GetDeploymentRoute3) GetMiddleware() float64 {
	if o == nil {
		return 0.0
	}
	return o.Middleware
}

type GetDeploymentHandle string

const (
	GetDeploymentHandleError      GetDeploymentHandle = "error"
	GetDeploymentHandleFilesystem GetDeploymentHandle = "filesystem"
	GetDeploymentHandleHit        GetDeploymentHandle = "hit"
	GetDeploymentHandleMiss       GetDeploymentHandle = "miss"
	GetDeploymentHandleRewrite    GetDeploymentHandle = "rewrite"
	GetDeploymentHandleResource   GetDeploymentHandle = "resource"
)

func (e GetDeploymentHandle) ToPointer() *GetDeploymentHandle {
	return &e
}
func (e *GetDeploymentHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "filesystem":
		fallthrough
	case "hit":
		fallthrough
	case "miss":
		fallthrough
	case "rewrite":
		fallthrough
	case "resource":
		*e = GetDeploymentHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHandle: %v", v)
	}
}

type GetDeploymentRoute2 struct {
	Handle GetDeploymentHandle `json:"handle"`
	Src    *string             `json:"src,omitempty"`
	Dest   *string             `json:"dest,omitempty"`
	Status *float64            `json:"status,omitempty"`
}

func (o *GetDeploymentRoute2) GetHandle() GetDeploymentHandle {
	if o == nil {
		return GetDeploymentHandle("")
	}
	return o.Handle
}

func (o *GetDeploymentRoute2) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetDeploymentRoute2) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentRoute2) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

type GetDeploymentHasType string

const (
	GetDeploymentHasTypeHeader GetDeploymentHasType = "header"
	GetDeploymentHasTypeCookie GetDeploymentHasType = "cookie"
	GetDeploymentHasTypeQuery  GetDeploymentHasType = "query"
)

func (e GetDeploymentHasType) ToPointer() *GetDeploymentHasType {
	return &e
}
func (e *GetDeploymentHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHasType: %v", v)
	}
}

type GetDeploymentHas struct {
	Type  GetDeploymentHasType `json:"type"`
	Key   string               `json:"key"`
	Value *string              `json:"value,omitempty"`
}

func (o *GetDeploymentHas) GetType() GetDeploymentHasType {
	if o == nil {
		return GetDeploymentHasType("")
	}
	return o.Type
}

func (o *GetDeploymentHas) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentHas) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentHasTypeHost string

const (
	GetDeploymentHasTypeHostHost GetDeploymentHasTypeHost = "host"
)

func (e GetDeploymentHasTypeHost) ToPointer() *GetDeploymentHasTypeHost {
	return &e
}
func (e *GetDeploymentHasTypeHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentHasTypeHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentHasTypeHost: %v", v)
	}
}

type GetDeploymentHasHost struct {
	Type  GetDeploymentHasTypeHost `json:"type"`
	Value string                   `json:"value"`
}

func (o *GetDeploymentHasHost) GetType() GetDeploymentHasTypeHost {
	if o == nil {
		return GetDeploymentHasTypeHost("")
	}
	return o.Type
}

func (o *GetDeploymentHasHost) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentHasUnionType string

const (
	GetDeploymentHasUnionTypeGetDeploymentHasHost GetDeploymentHasUnionType = "getDeployment_has_Host"
	GetDeploymentHasUnionTypeGetDeploymentHas     GetDeploymentHasUnionType = "getDeployment_has"
)

type GetDeploymentHasUnion struct {
	GetDeploymentHasHost *GetDeploymentHasHost `queryParam:"inline"`
	GetDeploymentHas     *GetDeploymentHas     `queryParam:"inline"`

	Type GetDeploymentHasUnionType
}

func CreateGetDeploymentHasUnionGetDeploymentHasHost(getDeploymentHasHost GetDeploymentHasHost) GetDeploymentHasUnion {
	typ := GetDeploymentHasUnionTypeGetDeploymentHasHost

	return GetDeploymentHasUnion{
		GetDeploymentHasHost: &getDeploymentHasHost,
		Type:                 typ,
	}
}

func CreateGetDeploymentHasUnionGetDeploymentHas(getDeploymentHas GetDeploymentHas) GetDeploymentHasUnion {
	typ := GetDeploymentHasUnionTypeGetDeploymentHas

	return GetDeploymentHasUnion{
		GetDeploymentHas: &getDeploymentHas,
		Type:             typ,
	}
}

func (u *GetDeploymentHasUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentHasHost GetDeploymentHasHost = GetDeploymentHasHost{}
	if err := utils.UnmarshalJSON(data, &getDeploymentHasHost, "", true, true); err == nil {
		u.GetDeploymentHasHost = &getDeploymentHasHost
		u.Type = GetDeploymentHasUnionTypeGetDeploymentHasHost
		return nil
	}

	var getDeploymentHas GetDeploymentHas = GetDeploymentHas{}
	if err := utils.UnmarshalJSON(data, &getDeploymentHas, "", true, true); err == nil {
		u.GetDeploymentHas = &getDeploymentHas
		u.Type = GetDeploymentHasUnionTypeGetDeploymentHas
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentHasUnion", string(data))
}

func (u GetDeploymentHasUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentHasHost != nil {
		return utils.MarshalJSON(u.GetDeploymentHasHost, "", true)
	}

	if u.GetDeploymentHas != nil {
		return utils.MarshalJSON(u.GetDeploymentHas, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentHasUnion: all fields are null")
}

type GetDeploymentMissingType string

const (
	GetDeploymentMissingTypeHeader GetDeploymentMissingType = "header"
	GetDeploymentMissingTypeCookie GetDeploymentMissingType = "cookie"
	GetDeploymentMissingTypeQuery  GetDeploymentMissingType = "query"
)

func (e GetDeploymentMissingType) ToPointer() *GetDeploymentMissingType {
	return &e
}
func (e *GetDeploymentMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		*e = GetDeploymentMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentMissingType: %v", v)
	}
}

type GetDeploymentMissing struct {
	Type  GetDeploymentMissingType `json:"type"`
	Key   string                   `json:"key"`
	Value *string                  `json:"value,omitempty"`
}

func (o *GetDeploymentMissing) GetType() GetDeploymentMissingType {
	if o == nil {
		return GetDeploymentMissingType("")
	}
	return o.Type
}

func (o *GetDeploymentMissing) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetDeploymentMissing) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetDeploymentMissingTypeHost string

const (
	GetDeploymentMissingTypeHostHost GetDeploymentMissingTypeHost = "host"
)

func (e GetDeploymentMissingTypeHost) ToPointer() *GetDeploymentMissingTypeHost {
	return &e
}
func (e *GetDeploymentMissingTypeHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		*e = GetDeploymentMissingTypeHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentMissingTypeHost: %v", v)
	}
}

type GetDeploymentMissingHost struct {
	Type  GetDeploymentMissingTypeHost `json:"type"`
	Value string                       `json:"value"`
}

func (o *GetDeploymentMissingHost) GetType() GetDeploymentMissingTypeHost {
	if o == nil {
		return GetDeploymentMissingTypeHost("")
	}
	return o.Type
}

func (o *GetDeploymentMissingHost) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetDeploymentMissingUnionType string

const (
	GetDeploymentMissingUnionTypeGetDeploymentMissingHost GetDeploymentMissingUnionType = "getDeployment_missing_Host"
	GetDeploymentMissingUnionTypeGetDeploymentMissing     GetDeploymentMissingUnionType = "getDeployment_missing"
)

type GetDeploymentMissingUnion struct {
	GetDeploymentMissingHost *GetDeploymentMissingHost `queryParam:"inline"`
	GetDeploymentMissing     *GetDeploymentMissing     `queryParam:"inline"`

	Type GetDeploymentMissingUnionType
}

func CreateGetDeploymentMissingUnionGetDeploymentMissingHost(getDeploymentMissingHost GetDeploymentMissingHost) GetDeploymentMissingUnion {
	typ := GetDeploymentMissingUnionTypeGetDeploymentMissingHost

	return GetDeploymentMissingUnion{
		GetDeploymentMissingHost: &getDeploymentMissingHost,
		Type:                     typ,
	}
}

func CreateGetDeploymentMissingUnionGetDeploymentMissing(getDeploymentMissing GetDeploymentMissing) GetDeploymentMissingUnion {
	typ := GetDeploymentMissingUnionTypeGetDeploymentMissing

	return GetDeploymentMissingUnion{
		GetDeploymentMissing: &getDeploymentMissing,
		Type:                 typ,
	}
}

func (u *GetDeploymentMissingUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentMissingHost GetDeploymentMissingHost = GetDeploymentMissingHost{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMissingHost, "", true, true); err == nil {
		u.GetDeploymentMissingHost = &getDeploymentMissingHost
		u.Type = GetDeploymentMissingUnionTypeGetDeploymentMissingHost
		return nil
	}

	var getDeploymentMissing GetDeploymentMissing = GetDeploymentMissing{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMissing, "", true, true); err == nil {
		u.GetDeploymentMissing = &getDeploymentMissing
		u.Type = GetDeploymentMissingUnionTypeGetDeploymentMissing
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentMissingUnion", string(data))
}

func (u GetDeploymentMissingUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentMissingHost != nil {
		return utils.MarshalJSON(u.GetDeploymentMissingHost, "", true)
	}

	if u.GetDeploymentMissing != nil {
		return utils.MarshalJSON(u.GetDeploymentMissing, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentMissingUnion: all fields are null")
}

type GetDeploymentLocale struct {
	Redirect map[string]string `json:"redirect,omitempty"`
	Cookie   *string           `json:"cookie,omitempty"`
}

func (o *GetDeploymentLocale) GetRedirect() map[string]string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetDeploymentLocale) GetCookie() *string {
	if o == nil {
		return nil
	}
	return o.Cookie
}

type GetDeploymentRoute1 struct {
	Src           string                      `json:"src"`
	Dest          *string                     `json:"dest,omitempty"`
	Headers       map[string]string           `json:"headers,omitempty"`
	Methods       []string                    `json:"methods,omitempty"`
	Continue      *bool                       `json:"continue,omitempty"`
	Override      *bool                       `json:"override,omitempty"`
	CaseSensitive *bool                       `json:"caseSensitive,omitempty"`
	Check         *bool                       `json:"check,omitempty"`
	Important     *bool                       `json:"important,omitempty"`
	Status        *float64                    `json:"status,omitempty"`
	Has           []GetDeploymentHasUnion     `json:"has,omitempty"`
	Missing       []GetDeploymentMissingUnion `json:"missing,omitempty"`
	Locale        *GetDeploymentLocale        `json:"locale,omitempty"`
	// A middleware key within the `output` key under the build result. Overrides a `middleware` definition.
	MiddlewarePath *string `json:"middlewarePath,omitempty"`
	// The original middleware matchers.
	MiddlewareRawSrc []string `json:"middlewareRawSrc,omitempty"`
	// A middleware index in the `middleware` key under the build result
	Middleware *float64 `json:"middleware,omitempty"`
}

func (o *GetDeploymentRoute1) GetSrc() string {
	if o == nil {
		return ""
	}
	return o.Src
}

func (o *GetDeploymentRoute1) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetDeploymentRoute1) GetHeaders() map[string]string {
	if o == nil {
		return nil
	}
	return o.Headers
}

func (o *GetDeploymentRoute1) GetMethods() []string {
	if o == nil {
		return nil
	}
	return o.Methods
}

func (o *GetDeploymentRoute1) GetContinue() *bool {
	if o == nil {
		return nil
	}
	return o.Continue
}

func (o *GetDeploymentRoute1) GetOverride() *bool {
	if o == nil {
		return nil
	}
	return o.Override
}

func (o *GetDeploymentRoute1) GetCaseSensitive() *bool {
	if o == nil {
		return nil
	}
	return o.CaseSensitive
}

func (o *GetDeploymentRoute1) GetCheck() *bool {
	if o == nil {
		return nil
	}
	return o.Check
}

func (o *GetDeploymentRoute1) GetImportant() *bool {
	if o == nil {
		return nil
	}
	return o.Important
}

func (o *GetDeploymentRoute1) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetDeploymentRoute1) GetHas() []GetDeploymentHasUnion {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *GetDeploymentRoute1) GetMissing() []GetDeploymentMissingUnion {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *GetDeploymentRoute1) GetLocale() *GetDeploymentLocale {
	if o == nil {
		return nil
	}
	return o.Locale
}

func (o *GetDeploymentRoute1) GetMiddlewarePath() *string {
	if o == nil {
		return nil
	}
	return o.MiddlewarePath
}

func (o *GetDeploymentRoute1) GetMiddlewareRawSrc() []string {
	if o == nil {
		return nil
	}
	return o.MiddlewareRawSrc
}

func (o *GetDeploymentRoute1) GetMiddleware() *float64 {
	if o == nil {
		return nil
	}
	return o.Middleware
}

type GetDeploymentRouteUnionType string

const (
	GetDeploymentRouteUnionTypeGetDeploymentRoute1 GetDeploymentRouteUnionType = "getDeployment_route_1"
	GetDeploymentRouteUnionTypeGetDeploymentRoute2 GetDeploymentRouteUnionType = "getDeployment_route_2"
	GetDeploymentRouteUnionTypeGetDeploymentRoute3 GetDeploymentRouteUnionType = "getDeployment_route_3"
)

type GetDeploymentRouteUnion struct {
	GetDeploymentRoute1 *GetDeploymentRoute1 `queryParam:"inline"`
	GetDeploymentRoute2 *GetDeploymentRoute2 `queryParam:"inline"`
	GetDeploymentRoute3 *GetDeploymentRoute3 `queryParam:"inline"`

	Type GetDeploymentRouteUnionType
}

func CreateGetDeploymentRouteUnionGetDeploymentRoute1(getDeploymentRoute1 GetDeploymentRoute1) GetDeploymentRouteUnion {
	typ := GetDeploymentRouteUnionTypeGetDeploymentRoute1

	return GetDeploymentRouteUnion{
		GetDeploymentRoute1: &getDeploymentRoute1,
		Type:                typ,
	}
}

func CreateGetDeploymentRouteUnionGetDeploymentRoute2(getDeploymentRoute2 GetDeploymentRoute2) GetDeploymentRouteUnion {
	typ := GetDeploymentRouteUnionTypeGetDeploymentRoute2

	return GetDeploymentRouteUnion{
		GetDeploymentRoute2: &getDeploymentRoute2,
		Type:                typ,
	}
}

func CreateGetDeploymentRouteUnionGetDeploymentRoute3(getDeploymentRoute3 GetDeploymentRoute3) GetDeploymentRouteUnion {
	typ := GetDeploymentRouteUnionTypeGetDeploymentRoute3

	return GetDeploymentRouteUnion{
		GetDeploymentRoute3: &getDeploymentRoute3,
		Type:                typ,
	}
}

func (u *GetDeploymentRouteUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentRoute3 GetDeploymentRoute3 = GetDeploymentRoute3{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoute3, "", true, true); err == nil {
		u.GetDeploymentRoute3 = &getDeploymentRoute3
		u.Type = GetDeploymentRouteUnionTypeGetDeploymentRoute3
		return nil
	}

	var getDeploymentRoute2 GetDeploymentRoute2 = GetDeploymentRoute2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoute2, "", true, true); err == nil {
		u.GetDeploymentRoute2 = &getDeploymentRoute2
		u.Type = GetDeploymentRouteUnionTypeGetDeploymentRoute2
		return nil
	}

	var getDeploymentRoute1 GetDeploymentRoute1 = GetDeploymentRoute1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentRoute1, "", true, true); err == nil {
		u.GetDeploymentRoute1 = &getDeploymentRoute1
		u.Type = GetDeploymentRouteUnionTypeGetDeploymentRoute1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentRouteUnion", string(data))
}

func (u GetDeploymentRouteUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentRoute1 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoute1, "", true)
	}

	if u.GetDeploymentRoute2 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoute2, "", true)
	}

	if u.GetDeploymentRoute3 != nil {
		return utils.MarshalJSON(u.GetDeploymentRoute3, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentRouteUnion: all fields are null")
}

type GetDeploymentGitRepoTypeBitbucket string

const (
	GetDeploymentGitRepoTypeBitbucketBitbucket GetDeploymentGitRepoTypeBitbucket = "bitbucket"
)

func (e GetDeploymentGitRepoTypeBitbucket) ToPointer() *GetDeploymentGitRepoTypeBitbucket {
	return &e
}
func (e *GetDeploymentGitRepoTypeBitbucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetDeploymentGitRepoTypeBitbucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoTypeBitbucket: %v", v)
	}
}

type GetDeploymentOwnerType3 string

const (
	GetDeploymentOwnerType3Team GetDeploymentOwnerType3 = "team"
	GetDeploymentOwnerType3User GetDeploymentOwnerType3 = "user"
)

func (e GetDeploymentOwnerType3) ToPointer() *GetDeploymentOwnerType3 {
	return &e
}
func (e *GetDeploymentOwnerType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentOwnerType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentOwnerType3: %v", v)
	}
}

type GetDeploymentGitRepoBitbucket struct {
	Owner         string                            `json:"owner"`
	RepoUUID      string                            `json:"repoUuid"`
	Slug          string                            `json:"slug"`
	Type          GetDeploymentGitRepoTypeBitbucket `json:"type"`
	WorkspaceUUID string                            `json:"workspaceUuid"`
	Path          string                            `json:"path"`
	DefaultBranch string                            `json:"defaultBranch"`
	Name          string                            `json:"name"`
	Private       bool                              `json:"private"`
	OwnerType     GetDeploymentOwnerType3           `json:"ownerType"`
}

func (o *GetDeploymentGitRepoBitbucket) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetDeploymentGitRepoBitbucket) GetRepoUUID() string {
	if o == nil {
		return ""
	}
	return o.RepoUUID
}

func (o *GetDeploymentGitRepoBitbucket) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetDeploymentGitRepoBitbucket) GetType() GetDeploymentGitRepoTypeBitbucket {
	if o == nil {
		return GetDeploymentGitRepoTypeBitbucket("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepoBitbucket) GetWorkspaceUUID() string {
	if o == nil {
		return ""
	}
	return o.WorkspaceUUID
}

func (o *GetDeploymentGitRepoBitbucket) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepoBitbucket) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepoBitbucket) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepoBitbucket) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepoBitbucket) GetOwnerType() GetDeploymentOwnerType3 {
	if o == nil {
		return GetDeploymentOwnerType3("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoTypeGithub string

const (
	GetDeploymentGitRepoTypeGithubGithub GetDeploymentGitRepoTypeGithub = "github"
)

func (e GetDeploymentGitRepoTypeGithub) ToPointer() *GetDeploymentGitRepoTypeGithub {
	return &e
}
func (e *GetDeploymentGitRepoTypeGithub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetDeploymentGitRepoTypeGithub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoTypeGithub: %v", v)
	}
}

type GetDeploymentOwnerType2 string

const (
	GetDeploymentOwnerType2Team GetDeploymentOwnerType2 = "team"
	GetDeploymentOwnerType2User GetDeploymentOwnerType2 = "user"
)

func (e GetDeploymentOwnerType2) ToPointer() *GetDeploymentOwnerType2 {
	return &e
}
func (e *GetDeploymentOwnerType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentOwnerType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentOwnerType2: %v", v)
	}
}

type GetDeploymentGitRepoGithub struct {
	Org           string                         `json:"org"`
	Repo          string                         `json:"repo"`
	RepoID        float64                        `json:"repoId"`
	Type          GetDeploymentGitRepoTypeGithub `json:"type"`
	RepoOwnerID   float64                        `json:"repoOwnerId"`
	Path          string                         `json:"path"`
	DefaultBranch string                         `json:"defaultBranch"`
	Name          string                         `json:"name"`
	Private       bool                           `json:"private"`
	OwnerType     GetDeploymentOwnerType2        `json:"ownerType"`
}

func (o *GetDeploymentGitRepoGithub) GetOrg() string {
	if o == nil {
		return ""
	}
	return o.Org
}

func (o *GetDeploymentGitRepoGithub) GetRepo() string {
	if o == nil {
		return ""
	}
	return o.Repo
}

func (o *GetDeploymentGitRepoGithub) GetRepoID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoID
}

func (o *GetDeploymentGitRepoGithub) GetType() GetDeploymentGitRepoTypeGithub {
	if o == nil {
		return GetDeploymentGitRepoTypeGithub("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepoGithub) GetRepoOwnerID() float64 {
	if o == nil {
		return 0.0
	}
	return o.RepoOwnerID
}

func (o *GetDeploymentGitRepoGithub) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepoGithub) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepoGithub) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepoGithub) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepoGithub) GetOwnerType() GetDeploymentOwnerType2 {
	if o == nil {
		return GetDeploymentOwnerType2("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoTypeGitlab string

const (
	GetDeploymentGitRepoTypeGitlabGitlab GetDeploymentGitRepoTypeGitlab = "gitlab"
)

func (e GetDeploymentGitRepoTypeGitlab) ToPointer() *GetDeploymentGitRepoTypeGitlab {
	return &e
}
func (e *GetDeploymentGitRepoTypeGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetDeploymentGitRepoTypeGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentGitRepoTypeGitlab: %v", v)
	}
}

type GetDeploymentOwnerType1 string

const (
	GetDeploymentOwnerType1Team GetDeploymentOwnerType1 = "team"
	GetDeploymentOwnerType1User GetDeploymentOwnerType1 = "user"
)

func (e GetDeploymentOwnerType1) ToPointer() *GetDeploymentOwnerType1 {
	return &e
}
func (e *GetDeploymentOwnerType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "user":
		*e = GetDeploymentOwnerType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentOwnerType1: %v", v)
	}
}

type GetDeploymentGitRepoGitlab struct {
	Namespace     string                         `json:"namespace"`
	ProjectID     float64                        `json:"projectId"`
	Type          GetDeploymentGitRepoTypeGitlab `json:"type"`
	URL           string                         `json:"url"`
	Path          string                         `json:"path"`
	DefaultBranch string                         `json:"defaultBranch"`
	Name          string                         `json:"name"`
	Private       bool                           `json:"private"`
	OwnerType     GetDeploymentOwnerType1        `json:"ownerType"`
}

func (o *GetDeploymentGitRepoGitlab) GetNamespace() string {
	if o == nil {
		return ""
	}
	return o.Namespace
}

func (o *GetDeploymentGitRepoGitlab) GetProjectID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ProjectID
}

func (o *GetDeploymentGitRepoGitlab) GetType() GetDeploymentGitRepoTypeGitlab {
	if o == nil {
		return GetDeploymentGitRepoTypeGitlab("")
	}
	return o.Type
}

func (o *GetDeploymentGitRepoGitlab) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetDeploymentGitRepoGitlab) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetDeploymentGitRepoGitlab) GetDefaultBranch() string {
	if o == nil {
		return ""
	}
	return o.DefaultBranch
}

func (o *GetDeploymentGitRepoGitlab) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDeploymentGitRepoGitlab) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetDeploymentGitRepoGitlab) GetOwnerType() GetDeploymentOwnerType1 {
	if o == nil {
		return GetDeploymentOwnerType1("")
	}
	return o.OwnerType
}

type GetDeploymentGitRepoUnionType string

const (
	GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoGitlab    GetDeploymentGitRepoUnionType = "getDeployment_gitRepo_Gitlab"
	GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoGithub    GetDeploymentGitRepoUnionType = "getDeployment_gitRepo_Github"
	GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoBitbucket GetDeploymentGitRepoUnionType = "getDeployment_gitRepo_Bitbucket"
)

type GetDeploymentGitRepoUnion struct {
	GetDeploymentGitRepoGitlab    *GetDeploymentGitRepoGitlab    `queryParam:"inline"`
	GetDeploymentGitRepoGithub    *GetDeploymentGitRepoGithub    `queryParam:"inline"`
	GetDeploymentGitRepoBitbucket *GetDeploymentGitRepoBitbucket `queryParam:"inline"`

	Type GetDeploymentGitRepoUnionType
}

func CreateGetDeploymentGitRepoUnionGetDeploymentGitRepoGitlab(getDeploymentGitRepoGitlab GetDeploymentGitRepoGitlab) GetDeploymentGitRepoUnion {
	typ := GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoGitlab

	return GetDeploymentGitRepoUnion{
		GetDeploymentGitRepoGitlab: &getDeploymentGitRepoGitlab,
		Type:                       typ,
	}
}

func CreateGetDeploymentGitRepoUnionGetDeploymentGitRepoGithub(getDeploymentGitRepoGithub GetDeploymentGitRepoGithub) GetDeploymentGitRepoUnion {
	typ := GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoGithub

	return GetDeploymentGitRepoUnion{
		GetDeploymentGitRepoGithub: &getDeploymentGitRepoGithub,
		Type:                       typ,
	}
}

func CreateGetDeploymentGitRepoUnionGetDeploymentGitRepoBitbucket(getDeploymentGitRepoBitbucket GetDeploymentGitRepoBitbucket) GetDeploymentGitRepoUnion {
	typ := GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoBitbucket

	return GetDeploymentGitRepoUnion{
		GetDeploymentGitRepoBitbucket: &getDeploymentGitRepoBitbucket,
		Type:                          typ,
	}
}

func (u *GetDeploymentGitRepoUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentGitRepoGitlab GetDeploymentGitRepoGitlab = GetDeploymentGitRepoGitlab{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepoGitlab, "", true, true); err == nil {
		u.GetDeploymentGitRepoGitlab = &getDeploymentGitRepoGitlab
		u.Type = GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoGitlab
		return nil
	}

	var getDeploymentGitRepoGithub GetDeploymentGitRepoGithub = GetDeploymentGitRepoGithub{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepoGithub, "", true, true); err == nil {
		u.GetDeploymentGitRepoGithub = &getDeploymentGitRepoGithub
		u.Type = GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoGithub
		return nil
	}

	var getDeploymentGitRepoBitbucket GetDeploymentGitRepoBitbucket = GetDeploymentGitRepoBitbucket{}
	if err := utils.UnmarshalJSON(data, &getDeploymentGitRepoBitbucket, "", true, true); err == nil {
		u.GetDeploymentGitRepoBitbucket = &getDeploymentGitRepoBitbucket
		u.Type = GetDeploymentGitRepoUnionTypeGetDeploymentGitRepoBitbucket
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentGitRepoUnion", string(data))
}

func (u GetDeploymentGitRepoUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentGitRepoGitlab != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepoGitlab, "", true)
	}

	if u.GetDeploymentGitRepoGithub != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepoGithub, "", true)
	}

	if u.GetDeploymentGitRepoBitbucket != nil {
		return utils.MarshalJSON(u.GetDeploymentGitRepoBitbucket, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentGitRepoUnion: all fields are null")
}

// GetDeploymentFlags2 - Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
type GetDeploymentFlags2 struct {
}

type GetDeploymentOption struct {
	Value *components.FlagJSONValue `json:"value"`
	Label *string                   `json:"label,omitempty"`
}

func (o *GetDeploymentOption) GetValue() *components.FlagJSONValue {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetDeploymentOption) GetLabel() *string {
	if o == nil {
		return nil
	}
	return o.Label
}

type GetDeploymentDefinitions struct {
	Options     []GetDeploymentOption `json:"options,omitempty"`
	URL         *string               `json:"url,omitempty"`
	Description *string               `json:"description,omitempty"`
}

func (o *GetDeploymentDefinitions) GetOptions() []GetDeploymentOption {
	if o == nil {
		return nil
	}
	return o.Options
}

func (o *GetDeploymentDefinitions) GetURL() *string {
	if o == nil {
		return nil
	}
	return o.URL
}

func (o *GetDeploymentDefinitions) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

// GetDeploymentFlags1 - Flags defined in the Build Output API, used by this deployment. Primarily used by the Toolbar to know about the used flags.
type GetDeploymentFlags1 struct {
	Definitions map[string]GetDeploymentDefinitions `json:"definitions"`
}

func (o *GetDeploymentFlags1) GetDefinitions() map[string]GetDeploymentDefinitions {
	if o == nil {
		return map[string]GetDeploymentDefinitions{}
	}
	return o.Definitions
}

type GetDeploymentFlagsUnionType string

const (
	GetDeploymentFlagsUnionTypeGetDeploymentFlags1        GetDeploymentFlagsUnionType = "getDeployment_flags_1"
	GetDeploymentFlagsUnionTypeArrayOfGetDeploymentFlags2 GetDeploymentFlagsUnionType = "arrayOfGetDeploymentFlags2"
)

type GetDeploymentFlagsUnion struct {
	GetDeploymentFlags1        *GetDeploymentFlags1  `queryParam:"inline"`
	ArrayOfGetDeploymentFlags2 []GetDeploymentFlags2 `queryParam:"inline"`

	Type GetDeploymentFlagsUnionType
}

func CreateGetDeploymentFlagsUnionGetDeploymentFlags1(getDeploymentFlags1 GetDeploymentFlags1) GetDeploymentFlagsUnion {
	typ := GetDeploymentFlagsUnionTypeGetDeploymentFlags1

	return GetDeploymentFlagsUnion{
		GetDeploymentFlags1: &getDeploymentFlags1,
		Type:                typ,
	}
}

func CreateGetDeploymentFlagsUnionArrayOfGetDeploymentFlags2(arrayOfGetDeploymentFlags2 []GetDeploymentFlags2) GetDeploymentFlagsUnion {
	typ := GetDeploymentFlagsUnionTypeArrayOfGetDeploymentFlags2

	return GetDeploymentFlagsUnion{
		ArrayOfGetDeploymentFlags2: arrayOfGetDeploymentFlags2,
		Type:                       typ,
	}
}

func (u *GetDeploymentFlagsUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentFlags1 GetDeploymentFlags1 = GetDeploymentFlags1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentFlags1, "", true, true); err == nil {
		u.GetDeploymentFlags1 = &getDeploymentFlags1
		u.Type = GetDeploymentFlagsUnionTypeGetDeploymentFlags1
		return nil
	}

	var arrayOfGetDeploymentFlags2 []GetDeploymentFlags2 = []GetDeploymentFlags2{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetDeploymentFlags2, "", true, true); err == nil {
		u.ArrayOfGetDeploymentFlags2 = arrayOfGetDeploymentFlags2
		u.Type = GetDeploymentFlagsUnionTypeArrayOfGetDeploymentFlags2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentFlagsUnion", string(data))
}

func (u GetDeploymentFlagsUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentFlags1 != nil {
		return utils.MarshalJSON(u.GetDeploymentFlags1, "", true)
	}

	if u.ArrayOfGetDeploymentFlags2 != nil {
		return utils.MarshalJSON(u.ArrayOfGetDeploymentFlags2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentFlagsUnion: all fields are null")
}

// GetDeploymentApplications - A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
type GetDeploymentApplications struct {
	// This is the production alias, it will always show the most up to date of each application.
	ProductionHost string `json:"productionHost"`
	// Use the fixed deploymentAlias and deploymentHost so that the microfrontend preview stays in sync with the deployment. These are only present for mono-repos when a single commit creates multiple deployments. If they are not present, productionHost will be used.
	DeploymentAlias *string `json:"deploymentAlias,omitempty"`
	DeploymentHost  *string `json:"deploymentHost,omitempty"`
}

func (o *GetDeploymentApplications) GetProductionHost() string {
	if o == nil {
		return ""
	}
	return o.ProductionHost
}

func (o *GetDeploymentApplications) GetDeploymentAlias() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentAlias
}

func (o *GetDeploymentApplications) GetDeploymentHost() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentHost
}

type GetDeploymentMicrofrontends2 struct {
	// A map of the other applications that are part of this group. Only defined on the default application. The field is set after deployments have been created, so can be undefined, but should be there for a successful deployment.
	Applications map[string]GetDeploymentApplications `json:"applications,omitempty"`
	IsDefaultApp bool                                 `json:"isDefaultApp"`
	// The project name of the default app of this deployment's microfrontends group.
	DefaultAppProjectName string `json:"defaultAppProjectName"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
}

func (o *GetDeploymentMicrofrontends2) GetApplications() map[string]GetDeploymentApplications {
	if o == nil {
		return nil
	}
	return o.Applications
}

func (o *GetDeploymentMicrofrontends2) GetIsDefaultApp() bool {
	if o == nil {
		return false
	}
	return o.IsDefaultApp
}

func (o *GetDeploymentMicrofrontends2) GetDefaultAppProjectName() string {
	if o == nil {
		return ""
	}
	return o.DefaultAppProjectName
}

func (o *GetDeploymentMicrofrontends2) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetDeploymentMicrofrontends2) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

type GetDeploymentMicrofrontends1 struct {
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// The project name of the default app of this deployment's microfrontends group.
	DefaultAppProjectName string `json:"defaultAppProjectName"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI.
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// The group of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
}

func (o *GetDeploymentMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *GetDeploymentMicrofrontends1) GetDefaultAppProjectName() string {
	if o == nil {
		return ""
	}
	return o.DefaultAppProjectName
}

func (o *GetDeploymentMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetDeploymentMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

type GetDeploymentMicrofrontendsUnionType string

const (
	GetDeploymentMicrofrontendsUnionTypeGetDeploymentMicrofrontends1 GetDeploymentMicrofrontendsUnionType = "getDeployment_microfrontends_1"
	GetDeploymentMicrofrontendsUnionTypeGetDeploymentMicrofrontends2 GetDeploymentMicrofrontendsUnionType = "getDeployment_microfrontends_2"
)

type GetDeploymentMicrofrontendsUnion struct {
	GetDeploymentMicrofrontends1 *GetDeploymentMicrofrontends1 `queryParam:"inline"`
	GetDeploymentMicrofrontends2 *GetDeploymentMicrofrontends2 `queryParam:"inline"`

	Type GetDeploymentMicrofrontendsUnionType
}

func CreateGetDeploymentMicrofrontendsUnionGetDeploymentMicrofrontends1(getDeploymentMicrofrontends1 GetDeploymentMicrofrontends1) GetDeploymentMicrofrontendsUnion {
	typ := GetDeploymentMicrofrontendsUnionTypeGetDeploymentMicrofrontends1

	return GetDeploymentMicrofrontendsUnion{
		GetDeploymentMicrofrontends1: &getDeploymentMicrofrontends1,
		Type:                         typ,
	}
}

func CreateGetDeploymentMicrofrontendsUnionGetDeploymentMicrofrontends2(getDeploymentMicrofrontends2 GetDeploymentMicrofrontends2) GetDeploymentMicrofrontendsUnion {
	typ := GetDeploymentMicrofrontendsUnionTypeGetDeploymentMicrofrontends2

	return GetDeploymentMicrofrontendsUnion{
		GetDeploymentMicrofrontends2: &getDeploymentMicrofrontends2,
		Type:                         typ,
	}
}

func (u *GetDeploymentMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentMicrofrontends1 GetDeploymentMicrofrontends1 = GetDeploymentMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMicrofrontends1, "", true, true); err == nil {
		u.GetDeploymentMicrofrontends1 = &getDeploymentMicrofrontends1
		u.Type = GetDeploymentMicrofrontendsUnionTypeGetDeploymentMicrofrontends1
		return nil
	}

	var getDeploymentMicrofrontends2 GetDeploymentMicrofrontends2 = GetDeploymentMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentMicrofrontends2, "", true, true); err == nil {
		u.GetDeploymentMicrofrontends2 = &getDeploymentMicrofrontends2
		u.Type = GetDeploymentMicrofrontendsUnionTypeGetDeploymentMicrofrontends2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentMicrofrontendsUnion", string(data))
}

func (u GetDeploymentMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentMicrofrontends1 != nil {
		return utils.MarshalJSON(u.GetDeploymentMicrofrontends1, "", true)
	}

	if u.GetDeploymentMicrofrontends2 != nil {
		return utils.MarshalJSON(u.GetDeploymentMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentMicrofrontendsUnion: all fields are null")
}

type GetDeploymentFunctionType string

const (
	GetDeploymentFunctionTypeFluid    GetDeploymentFunctionType = "fluid"
	GetDeploymentFunctionTypeStandard GetDeploymentFunctionType = "standard"
)

func (e GetDeploymentFunctionType) ToPointer() *GetDeploymentFunctionType {
	return &e
}
func (e *GetDeploymentFunctionType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fluid":
		fallthrough
	case "standard":
		*e = GetDeploymentFunctionType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentFunctionType: %v", v)
	}
}

type GetDeploymentFunctionMemoryType string

const (
	GetDeploymentFunctionMemoryTypeStandard       GetDeploymentFunctionMemoryType = "standard"
	GetDeploymentFunctionMemoryTypeStandardLegacy GetDeploymentFunctionMemoryType = "standard_legacy"
	GetDeploymentFunctionMemoryTypePerformance    GetDeploymentFunctionMemoryType = "performance"
)

func (e GetDeploymentFunctionMemoryType) ToPointer() *GetDeploymentFunctionMemoryType {
	return &e
}
func (e *GetDeploymentFunctionMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "standard_legacy":
		fallthrough
	case "performance":
		*e = GetDeploymentFunctionMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentFunctionMemoryType: %v", v)
	}
}

// GetDeploymentConfig - Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
type GetDeploymentConfig struct {
	Version                     *float64                        `json:"version,omitempty"`
	FunctionType                GetDeploymentFunctionType       `json:"functionType"`
	FunctionMemoryType          GetDeploymentFunctionMemoryType `json:"functionMemoryType"`
	FunctionTimeout             *float64                        `json:"functionTimeout"`
	SecureComputePrimaryRegion  *string                         `json:"secureComputePrimaryRegion"`
	SecureComputeFallbackRegion *string                         `json:"secureComputeFallbackRegion"`
}

func (o *GetDeploymentConfig) GetVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.Version
}

func (o *GetDeploymentConfig) GetFunctionType() GetDeploymentFunctionType {
	if o == nil {
		return GetDeploymentFunctionType("")
	}
	return o.FunctionType
}

func (o *GetDeploymentConfig) GetFunctionMemoryType() GetDeploymentFunctionMemoryType {
	if o == nil {
		return GetDeploymentFunctionMemoryType("")
	}
	return o.FunctionMemoryType
}

func (o *GetDeploymentConfig) GetFunctionTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionTimeout
}

func (o *GetDeploymentConfig) GetSecureComputePrimaryRegion() *string {
	if o == nil {
		return nil
	}
	return o.SecureComputePrimaryRegion
}

func (o *GetDeploymentConfig) GetSecureComputeFallbackRegion() *string {
	if o == nil {
		return nil
	}
	return o.SecureComputeFallbackRegion
}

type GetDeploymentState string

const (
	GetDeploymentStateSucceeded GetDeploymentState = "succeeded"
	GetDeploymentStateFailed    GetDeploymentState = "failed"
	GetDeploymentStatePending   GetDeploymentState = "pending"
)

func (e GetDeploymentState) ToPointer() *GetDeploymentState {
	return &e
}
func (e *GetDeploymentState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "pending":
		*e = GetDeploymentState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentState: %v", v)
	}
}

// GetDeploymentDeploymentAlias - Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
type GetDeploymentDeploymentAlias struct {
	State       GetDeploymentState `json:"state"`
	StartedAt   float64            `json:"startedAt"`
	CompletedAt *float64           `json:"completedAt,omitempty"`
}

func (o *GetDeploymentDeploymentAlias) GetState() GetDeploymentState {
	if o == nil {
		return GetDeploymentState("")
	}
	return o.State
}

func (o *GetDeploymentDeploymentAlias) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *GetDeploymentDeploymentAlias) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

type GetDeploymentChecks struct {
	// Condensed check data. Retrieve individual check and check run data using api-checks v2 routes.
	DeploymentAlias GetDeploymentDeploymentAlias `json:"deployment-alias"`
}

func (o *GetDeploymentChecks) GetDeploymentAlias() GetDeploymentDeploymentAlias {
	if o == nil {
		return GetDeploymentDeploymentAlias{}
	}
	return o.DeploymentAlias
}

// Lambdas1 - The deployment including both public and private information
type Lambdas1 struct {
	AliasAssignedAt           *GetDeploymentAliasAssignedAt `json:"aliasAssignedAt,omitempty"`
	AlwaysRefuseToBuild       *bool                         `json:"alwaysRefuseToBuild,omitempty"`
	Build                     GetDeploymentBuild1           `json:"build"`
	BuildArtifactUrls         []string                      `json:"buildArtifactUrls,omitempty"`
	Builds                    []GetDeploymentBuild2         `json:"builds,omitempty"`
	Env                       []string                      `json:"env"`
	InspectorURL              *string                       `json:"inspectorUrl"`
	IsInConcurrentBuildsQueue bool                          `json:"isInConcurrentBuildsQueue"`
	IsInSystemBuildsQueue     bool                          `json:"isInSystemBuildsQueue"`
	ProjectSettings           GetDeploymentProjectSettings  `json:"projectSettings"`
	ReadyStateReason          *string                       `json:"readyStateReason,omitempty"`
	Integrations              *GetDeploymentIntegrations    `json:"integrations,omitempty"`
	Images                    *GetDeploymentImages          `json:"images,omitempty"`
	Alias                     []string                      `json:"alias,omitempty"`
	AliasAssigned             bool                          `json:"aliasAssigned"`
	BootedAt                  float64                       `json:"bootedAt"`
	BuildingAt                float64                       `json:"buildingAt"`
	// Since April 2025 it necessary for On-Demand Concurrency Minutes calculation
	BuildContainerFinishedAt *float64                              `json:"buildContainerFinishedAt,omitempty"`
	BuildSkipped             bool                                  `json:"buildSkipped"`
	Creator                  GetDeploymentCreator1                 `json:"creator"`
	InitReadyAt              *float64                              `json:"initReadyAt,omitempty"`
	IsFirstBranchDeployment  *bool                                 `json:"isFirstBranchDeployment,omitempty"`
	Lambdas                  []GetDeploymentLambda1                `json:"lambdas,omitempty"`
	Public                   bool                                  `json:"public"`
	Ready                    *float64                              `json:"ready,omitempty"`
	Status                   GetDeploymentStatus1                  `json:"status"`
	Team                     *GetDeploymentTeam1                   `json:"team,omitempty"`
	UserAliases              []string                              `json:"userAliases,omitempty"`
	PreviewCommentsEnabled   *bool                                 `json:"previewCommentsEnabled,omitempty"`
	TtyBuildLogs             *bool                                 `json:"ttyBuildLogs,omitempty"`
	CustomEnvironment        *GetDeploymentCustomEnvironmentUnion1 `json:"customEnvironment,omitempty"`
	AliasWarning             *GetDeploymentAliasWarning1           `json:"aliasWarning,omitempty"`
	ID                       string                                `json:"id"`
	Name                     string                                `json:"name"`
	Type                     GetDeploymentTypeLambdas1             `json:"type"`
	CreatedAt                float64                               `json:"createdAt"`
	ReadyState               GetDeploymentReadyState1              `json:"readyState"`
	AliasError               *GetDeploymentAliasError1             `json:"aliasError,omitempty"`
	AliasFinal               *string                               `json:"aliasFinal,omitempty"`
	// applies to custom domains only, defaults to `true`
	AutoAssignCustomDomains *bool                           `json:"autoAssignCustomDomains,omitempty"`
	AutomaticAliases        []string                        `json:"automaticAliases,omitempty"`
	BuildErrorAt            *float64                        `json:"buildErrorAt,omitempty"`
	ChecksState             *GetDeploymentChecksState1      `json:"checksState,omitempty"`
	ChecksConclusion        *GetDeploymentChecksConclusion1 `json:"checksConclusion,omitempty"`
	DeletedAt               *float64                        `json:"deletedAt,omitempty"`
	// Computed field that is only available for deployments with a microfrontend configuration.
	DefaultRoute *string  `json:"defaultRoute,omitempty"`
	CanceledAt   *float64 `json:"canceledAt,omitempty"`
	ErrorCode    *string  `json:"errorCode,omitempty"`
	ErrorLink    *string  `json:"errorLink,omitempty"`
	ErrorMessage *string  `json:"errorMessage,omitempty"`
	ErrorStep    *string  `json:"errorStep,omitempty"`
	// Since November 2023 this field defines a set of regions that we will deploy the lambda to passively Lambdas will be deployed to these regions but only invoked if all of the primary `regions` are marked as out of service
	PassiveRegions    []string                      `json:"passiveRegions,omitempty"`
	GitSource         *GetDeploymentGitSourceUnion1 `json:"gitSource,omitempty"`
	Meta              map[string]string             `json:"meta"`
	OriginCacheRegion *string                       `json:"originCacheRegion,omitempty"`
	Project           *GetDeploymentProject1        `json:"project,omitempty"`
	// Substate of deployment when readyState is 'READY' Tracks whether or not deployment has seen production traffic: - STAGED: never seen production traffic - ROLLING: in the process of having production traffic gradually transitioned. - PROMOTED: has seen production traffic
	ReadySubstate          *GetDeploymentReadySubstate1      `json:"readySubstate,omitempty"`
	Regions                []string                          `json:"regions"`
	SoftDeletedByRetention *bool                             `json:"softDeletedByRetention,omitempty"`
	Source                 *GetDeploymentSource1             `json:"source,omitempty"`
	Target                 *GetDeploymentTarget1             `json:"target,omitempty"`
	UndeletedAt            *float64                          `json:"undeletedAt,omitempty"`
	URL                    string                            `json:"url"`
	Version                float64                           `json:"version"`
	OidcTokenClaims        *GetDeploymentOidcTokenClaims1    `json:"oidcTokenClaims,omitempty"`
	ProjectID              string                            `json:"projectId"`
	Plan                   GetDeploymentPlan                 `json:"plan"`
	ConnectBuildsEnabled   *bool                             `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                           `json:"connectConfigurationId,omitempty"`
	CreatedIn              string                            `json:"createdIn"`
	Crons                  []GetDeploymentCron               `json:"crons,omitempty"`
	Functions              map[string]GetDeploymentFunctions `json:"functions,omitempty"`
	MonorepoManager        *string                           `json:"monorepoManager,omitempty"`
	OwnerID                string                            `json:"ownerId"`
	// Since November 2023 this field defines a Secure Compute network that will only be used to deploy passive lambdas to (as in passiveRegions)
	PassiveConnectConfigurationID *string                           `json:"passiveConnectConfigurationId,omitempty"`
	Routes                        []GetDeploymentRouteUnion         `json:"routes"`
	GitRepo                       *GetDeploymentGitRepoUnion        `json:"gitRepo,omitempty"`
	Flags                         *GetDeploymentFlagsUnion          `json:"flags,omitempty"`
	Microfrontends                *GetDeploymentMicrofrontendsUnion `json:"microfrontends,omitempty"`
	// Since February 2025 the configuration must include snapshot data at the time of deployment creation to capture properties for the /deployments/:id/config endpoint utilized for displaying Deployment Configuration on the frontend This is optional because older deployments may not have this data captured
	Config *GetDeploymentConfig `json:"config,omitempty"`
	Checks *GetDeploymentChecks `json:"checks,omitempty"`
}

func (o *Lambdas1) GetAliasAssignedAt() *GetDeploymentAliasAssignedAt {
	if o == nil {
		return nil
	}
	return o.AliasAssignedAt
}

func (o *Lambdas1) GetAlwaysRefuseToBuild() *bool {
	if o == nil {
		return nil
	}
	return o.AlwaysRefuseToBuild
}

func (o *Lambdas1) GetBuild() GetDeploymentBuild1 {
	if o == nil {
		return GetDeploymentBuild1{}
	}
	return o.Build
}

func (o *Lambdas1) GetBuildArtifactUrls() []string {
	if o == nil {
		return nil
	}
	return o.BuildArtifactUrls
}

func (o *Lambdas1) GetBuilds() []GetDeploymentBuild2 {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *Lambdas1) GetEnv() []string {
	if o == nil {
		return []string{}
	}
	return o.Env
}

func (o *Lambdas1) GetInspectorURL() *string {
	if o == nil {
		return nil
	}
	return o.InspectorURL
}

func (o *Lambdas1) GetIsInConcurrentBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInConcurrentBuildsQueue
}

func (o *Lambdas1) GetIsInSystemBuildsQueue() bool {
	if o == nil {
		return false
	}
	return o.IsInSystemBuildsQueue
}

func (o *Lambdas1) GetProjectSettings() GetDeploymentProjectSettings {
	if o == nil {
		return GetDeploymentProjectSettings{}
	}
	return o.ProjectSettings
}

func (o *Lambdas1) GetReadyStateReason() *string {
	if o == nil {
		return nil
	}
	return o.ReadyStateReason
}

func (o *Lambdas1) GetIntegrations() *GetDeploymentIntegrations {
	if o == nil {
		return nil
	}
	return o.Integrations
}

func (o *Lambdas1) GetImages() *GetDeploymentImages {
	if o == nil {
		return nil
	}
	return o.Images
}

func (o *Lambdas1) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *Lambdas1) GetAliasAssigned() bool {
	if o == nil {
		return false
	}
	return o.AliasAssigned
}

func (o *Lambdas1) GetBootedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BootedAt
}

func (o *Lambdas1) GetBuildingAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.BuildingAt
}

func (o *Lambdas1) GetBuildContainerFinishedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildContainerFinishedAt
}

func (o *Lambdas1) GetBuildSkipped() bool {
	if o == nil {
		return false
	}
	return o.BuildSkipped
}

func (o *Lambdas1) GetCreator() GetDeploymentCreator1 {
	if o == nil {
		return GetDeploymentCreator1{}
	}
	return o.Creator
}

func (o *Lambdas1) GetInitReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.InitReadyAt
}

func (o *Lambdas1) GetIsFirstBranchDeployment() *bool {
	if o == nil {
		return nil
	}
	return o.IsFirstBranchDeployment
}

func (o *Lambdas1) GetLambdas() []GetDeploymentLambda1 {
	if o == nil {
		return nil
	}
	return o.Lambdas
}

func (o *Lambdas1) GetPublic() bool {
	if o == nil {
		return false
	}
	return o.Public
}

func (o *Lambdas1) GetReady() *float64 {
	if o == nil {
		return nil
	}
	return o.Ready
}

func (o *Lambdas1) GetStatus() GetDeploymentStatus1 {
	if o == nil {
		return GetDeploymentStatus1("")
	}
	return o.Status
}

func (o *Lambdas1) GetTeam() *GetDeploymentTeam1 {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *Lambdas1) GetUserAliases() []string {
	if o == nil {
		return nil
	}
	return o.UserAliases
}

func (o *Lambdas1) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *Lambdas1) GetTtyBuildLogs() *bool {
	if o == nil {
		return nil
	}
	return o.TtyBuildLogs
}

func (o *Lambdas1) GetCustomEnvironment() *GetDeploymentCustomEnvironmentUnion1 {
	if o == nil {
		return nil
	}
	return o.CustomEnvironment
}

func (o *Lambdas1) GetAliasWarning() *GetDeploymentAliasWarning1 {
	if o == nil {
		return nil
	}
	return o.AliasWarning
}

func (o *Lambdas1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Lambdas1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Lambdas1) GetType() GetDeploymentTypeLambdas1 {
	if o == nil {
		return GetDeploymentTypeLambdas1("")
	}
	return o.Type
}

func (o *Lambdas1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *Lambdas1) GetReadyState() GetDeploymentReadyState1 {
	if o == nil {
		return GetDeploymentReadyState1("")
	}
	return o.ReadyState
}

func (o *Lambdas1) GetAliasError() *GetDeploymentAliasError1 {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *Lambdas1) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *Lambdas1) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *Lambdas1) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *Lambdas1) GetBuildErrorAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildErrorAt
}

func (o *Lambdas1) GetChecksState() *GetDeploymentChecksState1 {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *Lambdas1) GetChecksConclusion() *GetDeploymentChecksConclusion1 {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *Lambdas1) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Lambdas1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *Lambdas1) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *Lambdas1) GetErrorCode() *string {
	if o == nil {
		return nil
	}
	return o.ErrorCode
}

func (o *Lambdas1) GetErrorLink() *string {
	if o == nil {
		return nil
	}
	return o.ErrorLink
}

func (o *Lambdas1) GetErrorMessage() *string {
	if o == nil {
		return nil
	}
	return o.ErrorMessage
}

func (o *Lambdas1) GetErrorStep() *string {
	if o == nil {
		return nil
	}
	return o.ErrorStep
}

func (o *Lambdas1) GetPassiveRegions() []string {
	if o == nil {
		return nil
	}
	return o.PassiveRegions
}

func (o *Lambdas1) GetGitSource() *GetDeploymentGitSourceUnion1 {
	if o == nil {
		return nil
	}
	return o.GitSource
}

func (o *Lambdas1) GetMeta() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Meta
}

func (o *Lambdas1) GetOriginCacheRegion() *string {
	if o == nil {
		return nil
	}
	return o.OriginCacheRegion
}

func (o *Lambdas1) GetProject() *GetDeploymentProject1 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *Lambdas1) GetReadySubstate() *GetDeploymentReadySubstate1 {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *Lambdas1) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

func (o *Lambdas1) GetSoftDeletedByRetention() *bool {
	if o == nil {
		return nil
	}
	return o.SoftDeletedByRetention
}

func (o *Lambdas1) GetSource() *GetDeploymentSource1 {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *Lambdas1) GetTarget() *GetDeploymentTarget1 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Lambdas1) GetUndeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UndeletedAt
}

func (o *Lambdas1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *Lambdas1) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *Lambdas1) GetOidcTokenClaims() *GetDeploymentOidcTokenClaims1 {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *Lambdas1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *Lambdas1) GetPlan() GetDeploymentPlan {
	if o == nil {
		return GetDeploymentPlan("")
	}
	return o.Plan
}

func (o *Lambdas1) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *Lambdas1) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *Lambdas1) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *Lambdas1) GetCrons() []GetDeploymentCron {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *Lambdas1) GetFunctions() map[string]GetDeploymentFunctions {
	if o == nil {
		return nil
	}
	return o.Functions
}

func (o *Lambdas1) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *Lambdas1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Lambdas1) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *Lambdas1) GetRoutes() []GetDeploymentRouteUnion {
	if o == nil {
		return nil
	}
	return o.Routes
}

func (o *Lambdas1) GetGitRepo() *GetDeploymentGitRepoUnion {
	if o == nil {
		return nil
	}
	return o.GitRepo
}

func (o *Lambdas1) GetFlags() *GetDeploymentFlagsUnion {
	if o == nil {
		return nil
	}
	return o.Flags
}

func (o *Lambdas1) GetMicrofrontends() *GetDeploymentMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *Lambdas1) GetConfig() *GetDeploymentConfig {
	if o == nil {
		return nil
	}
	return o.Config
}

func (o *Lambdas1) GetChecks() *GetDeploymentChecks {
	if o == nil {
		return nil
	}
	return o.Checks
}

type GetDeploymentResponseBodyType string

const (
	GetDeploymentResponseBodyTypeLambdas1 GetDeploymentResponseBodyType = "Lambdas_1"
	GetDeploymentResponseBodyTypeLambdas2 GetDeploymentResponseBodyType = "Lambdas_2"
)

// GetDeploymentResponseBody - The deployment including only public information
// The deployment including both public and private information
type GetDeploymentResponseBody struct {
	Lambdas1 *Lambdas1 `queryParam:"inline"`
	Lambdas2 *Lambdas2 `queryParam:"inline"`

	Type GetDeploymentResponseBodyType
}

func CreateGetDeploymentResponseBodyLambdas1(lambdas1 Lambdas1) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyTypeLambdas1

	return GetDeploymentResponseBody{
		Lambdas1: &lambdas1,
		Type:     typ,
	}
}

func CreateGetDeploymentResponseBodyLambdas2(lambdas2 Lambdas2) GetDeploymentResponseBody {
	typ := GetDeploymentResponseBodyTypeLambdas2

	return GetDeploymentResponseBody{
		Lambdas2: &lambdas2,
		Type:     typ,
	}
}

func (u *GetDeploymentResponseBody) UnmarshalJSON(data []byte) error {

	var lambdas2 Lambdas2 = Lambdas2{}
	if err := utils.UnmarshalJSON(data, &lambdas2, "", true, true); err == nil {
		u.Lambdas2 = &lambdas2
		u.Type = GetDeploymentResponseBodyTypeLambdas2
		return nil
	}

	var lambdas1 Lambdas1 = Lambdas1{}
	if err := utils.UnmarshalJSON(data, &lambdas1, "", true, true); err == nil {
		u.Lambdas1 = &lambdas1
		u.Type = GetDeploymentResponseBodyTypeLambdas1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentResponseBody", string(data))
}

func (u GetDeploymentResponseBody) MarshalJSON() ([]byte, error) {
	if u.Lambdas1 != nil {
		return utils.MarshalJSON(u.Lambdas1, "", true)
	}

	if u.Lambdas2 != nil {
		return utils.MarshalJSON(u.Lambdas2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentResponseBody: all fields are null")
}

type GetDeploymentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The deployment including only public information
	// The deployment including both public and private information
	OneOf *GetDeploymentResponseBody
}

func (o *GetDeploymentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetDeploymentResponse) GetOneOf() *GetDeploymentResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
