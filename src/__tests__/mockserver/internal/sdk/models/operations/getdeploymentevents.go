// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Direction - Order of the returned events based on the timestamp.
type Direction string

const (
	DirectionBackward Direction = "backward"
	DirectionForward  Direction = "forward"
)

func (e Direction) ToPointer() *Direction {
	return &e
}
func (e *Direction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "backward":
		fallthrough
	case "forward":
		*e = Direction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Direction: %v", v)
	}
}

type StatusCodeType string

const (
	StatusCodeTypeNumber StatusCodeType = "number"
	StatusCodeTypeStr    StatusCodeType = "str"
)

// StatusCode - HTTP status code range to filter events by.
type StatusCode struct {
	Number *float64 `queryParam:"inline"`
	Str    *string  `queryParam:"inline"`

	Type StatusCodeType
}

func CreateStatusCodeNumber(number float64) StatusCode {
	typ := StatusCodeTypeNumber

	return StatusCode{
		Number: &number,
		Type:   typ,
	}
}

func CreateStatusCodeStr(str string) StatusCode {
	typ := StatusCodeTypeStr

	return StatusCode{
		Str:  &str,
		Type: typ,
	}
}

func (u *StatusCode) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = StatusCodeTypeNumber
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = StatusCodeTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for StatusCode", string(data))
}

func (u StatusCode) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type StatusCode: all fields are null")
}

type GetDeploymentEventsRequest struct {
	// The unique identifier or hostname of the deployment.
	IDOrURL string `pathParam:"style=simple,explode=false,name=idOrUrl"`
	// Order of the returned events based on the timestamp.
	Direction *Direction `default:"forward" queryParam:"style=form,explode=true,name=direction"`
	// When enabled, this endpoint will return live events as they happen.
	Follow *float64 `queryParam:"style=form,explode=true,name=follow"`
	// Maximum number of events to return. Provide `-1` to return all available logs.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Deployment build ID.
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// Timestamp for when build logs should be pulled from.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp for when the build logs should be pulled up until.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// HTTP status code range to filter events by.
	StatusCode *StatusCode `queryParam:"style=form,explode=true,name=statusCode"`
	Delimiter  *float64    `queryParam:"style=form,explode=true,name=delimiter"`
	Builds     *float64    `queryParam:"style=form,explode=true,name=builds"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (g GetDeploymentEventsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDeploymentEventsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetDeploymentEventsRequest) GetIDOrURL() string {
	if o == nil {
		return ""
	}
	return o.IDOrURL
}

func (o *GetDeploymentEventsRequest) GetDirection() *Direction {
	if o == nil {
		return nil
	}
	return o.Direction
}

func (o *GetDeploymentEventsRequest) GetFollow() *float64 {
	if o == nil {
		return nil
	}
	return o.Follow
}

func (o *GetDeploymentEventsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetDeploymentEventsRequest) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetDeploymentEventsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetDeploymentEventsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetDeploymentEventsRequest) GetStatusCode() *StatusCode {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *GetDeploymentEventsRequest) GetDelimiter() *float64 {
	if o == nil {
		return nil
	}
	return o.Delimiter
}

func (o *GetDeploymentEventsRequest) GetBuilds() *float64 {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetDeploymentEventsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDeploymentEventsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type StreamJSONInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *StreamJSONInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *StreamJSONInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *StreamJSONInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *StreamJSONInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *StreamJSONInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *StreamJSONInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type StreamJSONType2 string

const (
	StreamJSONType2Delimiter              StreamJSONType2 = "delimiter"
	StreamJSONType2Command                StreamJSONType2 = "command"
	StreamJSONType2Stdout                 StreamJSONType2 = "stdout"
	StreamJSONType2Stderr                 StreamJSONType2 = "stderr"
	StreamJSONType2Exit                   StreamJSONType2 = "exit"
	StreamJSONType2DeploymentState        StreamJSONType2 = "deployment-state"
	StreamJSONType2Middleware             StreamJSONType2 = "middleware"
	StreamJSONType2MiddlewareInvocation   StreamJSONType2 = "middleware-invocation"
	StreamJSONType2EdgeFunctionInvocation StreamJSONType2 = "edge-function-invocation"
	StreamJSONType2Metric                 StreamJSONType2 = "metric"
	StreamJSONType2Report                 StreamJSONType2 = "report"
	StreamJSONType2Fatal                  StreamJSONType2 = "fatal"
)

func (e StreamJSONType2) ToPointer() *StreamJSONType2 {
	return &e
}
func (e *StreamJSONType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delimiter":
		fallthrough
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "metric":
		fallthrough
	case "report":
		fallthrough
	case "fatal":
		*e = StreamJSONType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StreamJSONType2: %v", v)
	}
}

type GetDeploymentEventsStreamJSONLevel string

const (
	GetDeploymentEventsStreamJSONLevelError   GetDeploymentEventsStreamJSONLevel = "error"
	GetDeploymentEventsStreamJSONLevelWarning GetDeploymentEventsStreamJSONLevel = "warning"
)

func (e GetDeploymentEventsStreamJSONLevel) ToPointer() *GetDeploymentEventsStreamJSONLevel {
	return &e
}
func (e *GetDeploymentEventsStreamJSONLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warning":
		*e = GetDeploymentEventsStreamJSONLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsStreamJSONLevel: %v", v)
	}
}

type ResponseBodyStreamJSON2 struct {
	Created      float64                             `json:"created"`
	Date         float64                             `json:"date"`
	DeploymentID string                              `json:"deploymentId"`
	ID           string                              `json:"id"`
	Info         StreamJSONInfo                      `json:"info"`
	Serial       string                              `json:"serial"`
	Text         *string                             `json:"text,omitempty"`
	Type         StreamJSONType2                     `json:"type"`
	Level        *GetDeploymentEventsStreamJSONLevel `json:"level,omitempty"`
}

func (o *ResponseBodyStreamJSON2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *ResponseBodyStreamJSON2) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *ResponseBodyStreamJSON2) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *ResponseBodyStreamJSON2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ResponseBodyStreamJSON2) GetInfo() StreamJSONInfo {
	if o == nil {
		return StreamJSONInfo{}
	}
	return o.Info
}

func (o *ResponseBodyStreamJSON2) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *ResponseBodyStreamJSON2) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *ResponseBodyStreamJSON2) GetType() StreamJSONType2 {
	if o == nil {
		return StreamJSONType2("")
	}
	return o.Type
}

func (o *ResponseBodyStreamJSON2) GetLevel() *GetDeploymentEventsStreamJSONLevel {
	if o == nil {
		return nil
	}
	return o.Level
}

type StreamJSONType1 string

const (
	StreamJSONType1Delimiter              StreamJSONType1 = "delimiter"
	StreamJSONType1Command                StreamJSONType1 = "command"
	StreamJSONType1Stdout                 StreamJSONType1 = "stdout"
	StreamJSONType1Stderr                 StreamJSONType1 = "stderr"
	StreamJSONType1Exit                   StreamJSONType1 = "exit"
	StreamJSONType1DeploymentState        StreamJSONType1 = "deployment-state"
	StreamJSONType1Middleware             StreamJSONType1 = "middleware"
	StreamJSONType1MiddlewareInvocation   StreamJSONType1 = "middleware-invocation"
	StreamJSONType1EdgeFunctionInvocation StreamJSONType1 = "edge-function-invocation"
	StreamJSONType1Metric                 StreamJSONType1 = "metric"
	StreamJSONType1Report                 StreamJSONType1 = "report"
	StreamJSONType1Fatal                  StreamJSONType1 = "fatal"
)

func (e StreamJSONType1) ToPointer() *StreamJSONType1 {
	return &e
}
func (e *StreamJSONType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delimiter":
		fallthrough
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "metric":
		fallthrough
	case "report":
		fallthrough
	case "fatal":
		*e = StreamJSONType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StreamJSONType1: %v", v)
	}
}

type StreamJSONPayloadInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *StreamJSONPayloadInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *StreamJSONPayloadInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *StreamJSONPayloadInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *StreamJSONPayloadInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *StreamJSONPayloadInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *StreamJSONPayloadInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type StreamJSONVercelCache string

const (
	StreamJSONVercelCacheMiss        StreamJSONVercelCache = "MISS"
	StreamJSONVercelCacheHit         StreamJSONVercelCache = "HIT"
	StreamJSONVercelCacheStale       StreamJSONVercelCache = "STALE"
	StreamJSONVercelCacheBypass      StreamJSONVercelCache = "BYPASS"
	StreamJSONVercelCachePrerender   StreamJSONVercelCache = "PRERENDER"
	StreamJSONVercelCacheRevalidated StreamJSONVercelCache = "REVALIDATED"
)

func (e StreamJSONVercelCache) ToPointer() *StreamJSONVercelCache {
	return &e
}
func (e *StreamJSONVercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = StreamJSONVercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StreamJSONVercelCache: %v", v)
	}
}

type StreamJSONWafAction string

const (
	StreamJSONWafActionLog       StreamJSONWafAction = "log"
	StreamJSONWafActionChallenge StreamJSONWafAction = "challenge"
	StreamJSONWafActionDeny      StreamJSONWafAction = "deny"
	StreamJSONWafActionBypass    StreamJSONWafAction = "bypass"
	StreamJSONWafActionRateLimit StreamJSONWafAction = "rate_limit"
)

func (e StreamJSONWafAction) ToPointer() *StreamJSONWafAction {
	return &e
}
func (e *StreamJSONWafAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = StreamJSONWafAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for StreamJSONWafAction: %v", v)
	}
}

type StreamJSONProxy struct {
	Timestamp        float64                `json:"timestamp"`
	Method           string                 `json:"method"`
	Host             string                 `json:"host"`
	Path             string                 `json:"path"`
	StatusCode       *float64               `json:"statusCode,omitempty"`
	UserAgent        []string               `json:"userAgent"`
	Referer          string                 `json:"referer"`
	ClientIP         *string                `json:"clientIp,omitempty"`
	Region           string                 `json:"region"`
	Scheme           *string                `json:"scheme,omitempty"`
	ResponseByteSize *float64               `json:"responseByteSize,omitempty"`
	CacheID          *string                `json:"cacheId,omitempty"`
	PathType         *string                `json:"pathType,omitempty"`
	PathTypeVariant  *string                `json:"pathTypeVariant,omitempty"`
	VercelID         *string                `json:"vercelId,omitempty"`
	VercelCache      *StreamJSONVercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string                `json:"lambdaRegion,omitempty"`
	WafAction        *StreamJSONWafAction   `json:"wafAction,omitempty"`
	WafRuleID        *string                `json:"wafRuleId,omitempty"`
}

func (o *StreamJSONProxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *StreamJSONProxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *StreamJSONProxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *StreamJSONProxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *StreamJSONProxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *StreamJSONProxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *StreamJSONProxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *StreamJSONProxy) GetClientIP() *string {
	if o == nil {
		return nil
	}
	return o.ClientIP
}

func (o *StreamJSONProxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *StreamJSONProxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *StreamJSONProxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *StreamJSONProxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *StreamJSONProxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *StreamJSONProxy) GetPathTypeVariant() *string {
	if o == nil {
		return nil
	}
	return o.PathTypeVariant
}

func (o *StreamJSONProxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *StreamJSONProxy) GetVercelCache() *StreamJSONVercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *StreamJSONProxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *StreamJSONProxy) GetWafAction() *StreamJSONWafAction {
	if o == nil {
		return nil
	}
	return o.WafAction
}

func (o *StreamJSONProxy) GetWafRuleID() *string {
	if o == nil {
		return nil
	}
	return o.WafRuleID
}

type StreamJSONPayload struct {
	DeploymentID string                 `json:"deploymentId"`
	Info         *StreamJSONPayloadInfo `json:"info,omitempty"`
	Text         *string                `json:"text,omitempty"`
	ID           string                 `json:"id"`
	Date         float64                `json:"date"`
	Serial       string                 `json:"serial"`
	Created      *float64               `json:"created,omitempty"`
	StatusCode   *float64               `json:"statusCode,omitempty"`
	RequestID    *string                `json:"requestId,omitempty"`
	Proxy        *StreamJSONProxy       `json:"proxy,omitempty"`
}

func (o *StreamJSONPayload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *StreamJSONPayload) GetInfo() *StreamJSONPayloadInfo {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *StreamJSONPayload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *StreamJSONPayload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *StreamJSONPayload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *StreamJSONPayload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *StreamJSONPayload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *StreamJSONPayload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *StreamJSONPayload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *StreamJSONPayload) GetProxy() *StreamJSONProxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

type ResponseBodyStreamJSON1 struct {
	Type    StreamJSONType1   `json:"type"`
	Created float64           `json:"created"`
	Payload StreamJSONPayload `json:"payload"`
}

func (o *ResponseBodyStreamJSON1) GetType() StreamJSONType1 {
	if o == nil {
		return StreamJSONType1("")
	}
	return o.Type
}

func (o *ResponseBodyStreamJSON1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *ResponseBodyStreamJSON1) GetPayload() StreamJSONPayload {
	if o == nil {
		return StreamJSONPayload{}
	}
	return o.Payload
}

type GetDeploymentEventsResponseBodyType string

const (
	GetDeploymentEventsResponseBodyTypeResponseBodyStreamJSON1 GetDeploymentEventsResponseBodyType = "ResponseBody_StreamJSON_1"
	GetDeploymentEventsResponseBodyTypeResponseBodyStreamJSON2 GetDeploymentEventsResponseBodyType = "ResponseBody_StreamJSON_2"
)

type GetDeploymentEventsResponseBody struct {
	ResponseBodyStreamJSON1 *ResponseBodyStreamJSON1 `queryParam:"inline"`
	ResponseBodyStreamJSON2 *ResponseBodyStreamJSON2 `queryParam:"inline"`

	Type GetDeploymentEventsResponseBodyType
}

func CreateGetDeploymentEventsResponseBodyResponseBodyStreamJSON1(responseBodyStreamJSON1 ResponseBodyStreamJSON1) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyTypeResponseBodyStreamJSON1

	return GetDeploymentEventsResponseBody{
		ResponseBodyStreamJSON1: &responseBodyStreamJSON1,
		Type:                    typ,
	}
}

func CreateGetDeploymentEventsResponseBodyResponseBodyStreamJSON2(responseBodyStreamJSON2 ResponseBodyStreamJSON2) GetDeploymentEventsResponseBody {
	typ := GetDeploymentEventsResponseBodyTypeResponseBodyStreamJSON2

	return GetDeploymentEventsResponseBody{
		ResponseBodyStreamJSON2: &responseBodyStreamJSON2,
		Type:                    typ,
	}
}

func (u *GetDeploymentEventsResponseBody) UnmarshalJSON(data []byte) error {

	var responseBodyStreamJSON1 ResponseBodyStreamJSON1 = ResponseBodyStreamJSON1{}
	if err := utils.UnmarshalJSON(data, &responseBodyStreamJSON1, "", true, true); err == nil {
		u.ResponseBodyStreamJSON1 = &responseBodyStreamJSON1
		u.Type = GetDeploymentEventsResponseBodyTypeResponseBodyStreamJSON1
		return nil
	}

	var responseBodyStreamJSON2 ResponseBodyStreamJSON2 = ResponseBodyStreamJSON2{}
	if err := utils.UnmarshalJSON(data, &responseBodyStreamJSON2, "", true, true); err == nil {
		u.ResponseBodyStreamJSON2 = &responseBodyStreamJSON2
		u.Type = GetDeploymentEventsResponseBodyTypeResponseBodyStreamJSON2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEventsResponseBody", string(data))
}

func (u GetDeploymentEventsResponseBody) MarshalJSON() ([]byte, error) {
	if u.ResponseBodyStreamJSON1 != nil {
		return utils.MarshalJSON(u.ResponseBodyStreamJSON1, "", true)
	}

	if u.ResponseBodyStreamJSON2 != nil {
		return utils.MarshalJSON(u.ResponseBodyStreamJSON2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEventsResponseBody: all fields are null")
}

type Info struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *Info) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Info) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Info) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *Info) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *Info) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *Info) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type GetDeploymentEventsType2 string

const (
	GetDeploymentEventsType2Delimiter              GetDeploymentEventsType2 = "delimiter"
	GetDeploymentEventsType2Command                GetDeploymentEventsType2 = "command"
	GetDeploymentEventsType2Stdout                 GetDeploymentEventsType2 = "stdout"
	GetDeploymentEventsType2Stderr                 GetDeploymentEventsType2 = "stderr"
	GetDeploymentEventsType2Exit                   GetDeploymentEventsType2 = "exit"
	GetDeploymentEventsType2DeploymentState        GetDeploymentEventsType2 = "deployment-state"
	GetDeploymentEventsType2Middleware             GetDeploymentEventsType2 = "middleware"
	GetDeploymentEventsType2MiddlewareInvocation   GetDeploymentEventsType2 = "middleware-invocation"
	GetDeploymentEventsType2EdgeFunctionInvocation GetDeploymentEventsType2 = "edge-function-invocation"
	GetDeploymentEventsType2Metric                 GetDeploymentEventsType2 = "metric"
	GetDeploymentEventsType2Report                 GetDeploymentEventsType2 = "report"
	GetDeploymentEventsType2Fatal                  GetDeploymentEventsType2 = "fatal"
)

func (e GetDeploymentEventsType2) ToPointer() *GetDeploymentEventsType2 {
	return &e
}
func (e *GetDeploymentEventsType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delimiter":
		fallthrough
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "metric":
		fallthrough
	case "report":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsType2: %v", v)
	}
}

type GetDeploymentEventsLevel string

const (
	GetDeploymentEventsLevelError   GetDeploymentEventsLevel = "error"
	GetDeploymentEventsLevelWarning GetDeploymentEventsLevel = "warning"
)

func (e GetDeploymentEventsLevel) ToPointer() *GetDeploymentEventsLevel {
	return &e
}
func (e *GetDeploymentEventsLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "warning":
		*e = GetDeploymentEventsLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsLevel: %v", v)
	}
}

type GetDeploymentEventsResponseBody2 struct {
	Created      float64                   `json:"created"`
	Date         float64                   `json:"date"`
	DeploymentID string                    `json:"deploymentId"`
	ID           string                    `json:"id"`
	Info         Info                      `json:"info"`
	Serial       string                    `json:"serial"`
	Text         *string                   `json:"text,omitempty"`
	Type         GetDeploymentEventsType2  `json:"type"`
	Level        *GetDeploymentEventsLevel `json:"level,omitempty"`
}

func (o *GetDeploymentEventsResponseBody2) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsResponseBody2) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *GetDeploymentEventsResponseBody2) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *GetDeploymentEventsResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDeploymentEventsResponseBody2) GetInfo() Info {
	if o == nil {
		return Info{}
	}
	return o.Info
}

func (o *GetDeploymentEventsResponseBody2) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *GetDeploymentEventsResponseBody2) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *GetDeploymentEventsResponseBody2) GetType() GetDeploymentEventsType2 {
	if o == nil {
		return GetDeploymentEventsType2("")
	}
	return o.Type
}

func (o *GetDeploymentEventsResponseBody2) GetLevel() *GetDeploymentEventsLevel {
	if o == nil {
		return nil
	}
	return o.Level
}

type GetDeploymentEventsType1 string

const (
	GetDeploymentEventsType1Delimiter              GetDeploymentEventsType1 = "delimiter"
	GetDeploymentEventsType1Command                GetDeploymentEventsType1 = "command"
	GetDeploymentEventsType1Stdout                 GetDeploymentEventsType1 = "stdout"
	GetDeploymentEventsType1Stderr                 GetDeploymentEventsType1 = "stderr"
	GetDeploymentEventsType1Exit                   GetDeploymentEventsType1 = "exit"
	GetDeploymentEventsType1DeploymentState        GetDeploymentEventsType1 = "deployment-state"
	GetDeploymentEventsType1Middleware             GetDeploymentEventsType1 = "middleware"
	GetDeploymentEventsType1MiddlewareInvocation   GetDeploymentEventsType1 = "middleware-invocation"
	GetDeploymentEventsType1EdgeFunctionInvocation GetDeploymentEventsType1 = "edge-function-invocation"
	GetDeploymentEventsType1Metric                 GetDeploymentEventsType1 = "metric"
	GetDeploymentEventsType1Report                 GetDeploymentEventsType1 = "report"
	GetDeploymentEventsType1Fatal                  GetDeploymentEventsType1 = "fatal"
)

func (e GetDeploymentEventsType1) ToPointer() *GetDeploymentEventsType1 {
	return &e
}
func (e *GetDeploymentEventsType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "delimiter":
		fallthrough
	case "command":
		fallthrough
	case "stdout":
		fallthrough
	case "stderr":
		fallthrough
	case "exit":
		fallthrough
	case "deployment-state":
		fallthrough
	case "middleware":
		fallthrough
	case "middleware-invocation":
		fallthrough
	case "edge-function-invocation":
		fallthrough
	case "metric":
		fallthrough
	case "report":
		fallthrough
	case "fatal":
		*e = GetDeploymentEventsType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDeploymentEventsType1: %v", v)
	}
}

type PayloadInfo struct {
	Type       string  `json:"type"`
	Name       string  `json:"name"`
	Entrypoint *string `json:"entrypoint,omitempty"`
	Path       *string `json:"path,omitempty"`
	Step       *string `json:"step,omitempty"`
	ReadyState *string `json:"readyState,omitempty"`
}

func (o *PayloadInfo) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *PayloadInfo) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PayloadInfo) GetEntrypoint() *string {
	if o == nil {
		return nil
	}
	return o.Entrypoint
}

func (o *PayloadInfo) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *PayloadInfo) GetStep() *string {
	if o == nil {
		return nil
	}
	return o.Step
}

func (o *PayloadInfo) GetReadyState() *string {
	if o == nil {
		return nil
	}
	return o.ReadyState
}

type VercelCache string

const (
	VercelCacheMiss        VercelCache = "MISS"
	VercelCacheHit         VercelCache = "HIT"
	VercelCacheStale       VercelCache = "STALE"
	VercelCacheBypass      VercelCache = "BYPASS"
	VercelCachePrerender   VercelCache = "PRERENDER"
	VercelCacheRevalidated VercelCache = "REVALIDATED"
)

func (e VercelCache) ToPointer() *VercelCache {
	return &e
}
func (e *VercelCache) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "MISS":
		fallthrough
	case "HIT":
		fallthrough
	case "STALE":
		fallthrough
	case "BYPASS":
		fallthrough
	case "PRERENDER":
		fallthrough
	case "REVALIDATED":
		*e = VercelCache(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VercelCache: %v", v)
	}
}

type WafAction string

const (
	WafActionLog       WafAction = "log"
	WafActionChallenge WafAction = "challenge"
	WafActionDeny      WafAction = "deny"
	WafActionBypass    WafAction = "bypass"
	WafActionRateLimit WafAction = "rate_limit"
)

func (e WafAction) ToPointer() *WafAction {
	return &e
}
func (e *WafAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		*e = WafAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for WafAction: %v", v)
	}
}

type Proxy struct {
	Timestamp        float64      `json:"timestamp"`
	Method           string       `json:"method"`
	Host             string       `json:"host"`
	Path             string       `json:"path"`
	StatusCode       *float64     `json:"statusCode,omitempty"`
	UserAgent        []string     `json:"userAgent"`
	Referer          string       `json:"referer"`
	ClientIP         *string      `json:"clientIp,omitempty"`
	Region           string       `json:"region"`
	Scheme           *string      `json:"scheme,omitempty"`
	ResponseByteSize *float64     `json:"responseByteSize,omitempty"`
	CacheID          *string      `json:"cacheId,omitempty"`
	PathType         *string      `json:"pathType,omitempty"`
	PathTypeVariant  *string      `json:"pathTypeVariant,omitempty"`
	VercelID         *string      `json:"vercelId,omitempty"`
	VercelCache      *VercelCache `json:"vercelCache,omitempty"`
	LambdaRegion     *string      `json:"lambdaRegion,omitempty"`
	WafAction        *WafAction   `json:"wafAction,omitempty"`
	WafRuleID        *string      `json:"wafRuleId,omitempty"`
}

func (o *Proxy) GetTimestamp() float64 {
	if o == nil {
		return 0.0
	}
	return o.Timestamp
}

func (o *Proxy) GetMethod() string {
	if o == nil {
		return ""
	}
	return o.Method
}

func (o *Proxy) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *Proxy) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *Proxy) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Proxy) GetUserAgent() []string {
	if o == nil {
		return []string{}
	}
	return o.UserAgent
}

func (o *Proxy) GetReferer() string {
	if o == nil {
		return ""
	}
	return o.Referer
}

func (o *Proxy) GetClientIP() *string {
	if o == nil {
		return nil
	}
	return o.ClientIP
}

func (o *Proxy) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *Proxy) GetScheme() *string {
	if o == nil {
		return nil
	}
	return o.Scheme
}

func (o *Proxy) GetResponseByteSize() *float64 {
	if o == nil {
		return nil
	}
	return o.ResponseByteSize
}

func (o *Proxy) GetCacheID() *string {
	if o == nil {
		return nil
	}
	return o.CacheID
}

func (o *Proxy) GetPathType() *string {
	if o == nil {
		return nil
	}
	return o.PathType
}

func (o *Proxy) GetPathTypeVariant() *string {
	if o == nil {
		return nil
	}
	return o.PathTypeVariant
}

func (o *Proxy) GetVercelID() *string {
	if o == nil {
		return nil
	}
	return o.VercelID
}

func (o *Proxy) GetVercelCache() *VercelCache {
	if o == nil {
		return nil
	}
	return o.VercelCache
}

func (o *Proxy) GetLambdaRegion() *string {
	if o == nil {
		return nil
	}
	return o.LambdaRegion
}

func (o *Proxy) GetWafAction() *WafAction {
	if o == nil {
		return nil
	}
	return o.WafAction
}

func (o *Proxy) GetWafRuleID() *string {
	if o == nil {
		return nil
	}
	return o.WafRuleID
}

type Payload struct {
	DeploymentID string       `json:"deploymentId"`
	Info         *PayloadInfo `json:"info,omitempty"`
	Text         *string      `json:"text,omitempty"`
	ID           string       `json:"id"`
	Date         float64      `json:"date"`
	Serial       string       `json:"serial"`
	Created      *float64     `json:"created,omitempty"`
	StatusCode   *float64     `json:"statusCode,omitempty"`
	RequestID    *string      `json:"requestId,omitempty"`
	Proxy        *Proxy       `json:"proxy,omitempty"`
}

func (o *Payload) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *Payload) GetInfo() *PayloadInfo {
	if o == nil {
		return nil
	}
	return o.Info
}

func (o *Payload) GetText() *string {
	if o == nil {
		return nil
	}
	return o.Text
}

func (o *Payload) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Payload) GetDate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Date
}

func (o *Payload) GetSerial() string {
	if o == nil {
		return ""
	}
	return o.Serial
}

func (o *Payload) GetCreated() *float64 {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Payload) GetStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.StatusCode
}

func (o *Payload) GetRequestID() *string {
	if o == nil {
		return nil
	}
	return o.RequestID
}

func (o *Payload) GetProxy() *Proxy {
	if o == nil {
		return nil
	}
	return o.Proxy
}

type GetDeploymentEventsResponseBody1 struct {
	Type    GetDeploymentEventsType1 `json:"type"`
	Created float64                  `json:"created"`
	Payload Payload                  `json:"payload"`
}

func (o *GetDeploymentEventsResponseBody1) GetType() GetDeploymentEventsType1 {
	if o == nil {
		return GetDeploymentEventsType1("")
	}
	return o.Type
}

func (o *GetDeploymentEventsResponseBody1) GetCreated() float64 {
	if o == nil {
		return 0.0
	}
	return o.Created
}

func (o *GetDeploymentEventsResponseBody1) GetPayload() Payload {
	if o == nil {
		return Payload{}
	}
	return o.Payload
}

type GetDeploymentEventsResponseBodyUnionType string

const (
	GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody1 GetDeploymentEventsResponseBodyUnionType = "getDeploymentEvents_ResponseBody_1"
	GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody2 GetDeploymentEventsResponseBodyUnionType = "getDeploymentEvents_ResponseBody_2"
)

type GetDeploymentEventsResponseBodyUnion struct {
	GetDeploymentEventsResponseBody1 *GetDeploymentEventsResponseBody1 `queryParam:"inline"`
	GetDeploymentEventsResponseBody2 *GetDeploymentEventsResponseBody2 `queryParam:"inline"`

	Type GetDeploymentEventsResponseBodyUnionType
}

func CreateGetDeploymentEventsResponseBodyUnionGetDeploymentEventsResponseBody1(getDeploymentEventsResponseBody1 GetDeploymentEventsResponseBody1) GetDeploymentEventsResponseBodyUnion {
	typ := GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody1

	return GetDeploymentEventsResponseBodyUnion{
		GetDeploymentEventsResponseBody1: &getDeploymentEventsResponseBody1,
		Type:                             typ,
	}
}

func CreateGetDeploymentEventsResponseBodyUnionGetDeploymentEventsResponseBody2(getDeploymentEventsResponseBody2 GetDeploymentEventsResponseBody2) GetDeploymentEventsResponseBodyUnion {
	typ := GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody2

	return GetDeploymentEventsResponseBodyUnion{
		GetDeploymentEventsResponseBody2: &getDeploymentEventsResponseBody2,
		Type:                             typ,
	}
}

func (u *GetDeploymentEventsResponseBodyUnion) UnmarshalJSON(data []byte) error {

	var getDeploymentEventsResponseBody1 GetDeploymentEventsResponseBody1 = GetDeploymentEventsResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsResponseBody1, "", true, true); err == nil {
		u.GetDeploymentEventsResponseBody1 = &getDeploymentEventsResponseBody1
		u.Type = GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody1
		return nil
	}

	var getDeploymentEventsResponseBody2 GetDeploymentEventsResponseBody2 = GetDeploymentEventsResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getDeploymentEventsResponseBody2, "", true, true); err == nil {
		u.GetDeploymentEventsResponseBody2 = &getDeploymentEventsResponseBody2
		u.Type = GetDeploymentEventsResponseBodyUnionTypeGetDeploymentEventsResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDeploymentEventsResponseBodyUnion", string(data))
}

func (u GetDeploymentEventsResponseBodyUnion) MarshalJSON() ([]byte, error) {
	if u.GetDeploymentEventsResponseBody1 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsResponseBody1, "", true)
	}

	if u.GetDeploymentEventsResponseBody2 != nil {
		return utils.MarshalJSON(u.GetDeploymentEventsResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDeploymentEventsResponseBodyUnion: all fields are null")
}

type GetDeploymentEventsResponse struct {
	HTTPMeta       components.HTTPMetadata `json:"-"`
	ResponseBodies []*GetDeploymentEventsResponseBodyUnion
	OneOf          *GetDeploymentEventsResponseBody
}

func (o *GetDeploymentEventsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetDeploymentEventsResponse) GetResponseBodies() []*GetDeploymentEventsResponseBodyUnion {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}

func (o *GetDeploymentEventsResponse) GetOneOf() *GetDeploymentEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
