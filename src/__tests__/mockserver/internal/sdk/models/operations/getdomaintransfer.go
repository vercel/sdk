// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetDomainTransferRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug   *string `queryParam:"style=form,explode=true,name=slug"`
	Domain string  `pathParam:"style=simple,explode=false,name=domain"`
}

func (o *GetDomainTransferRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDomainTransferRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetDomainTransferRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

// TransferPolicy - The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.
type TransferPolicy string

const (
	TransferPolicyChargeAndRenewValue TransferPolicy = "charge-and-renew"
	TransferPolicyNoChargeNoChange    TransferPolicy = "no-charge-no-change"
	TransferPolicyNoChange            TransferPolicy = "no-change"
	TransferPolicyNewTerm             TransferPolicy = "new-term"
	TransferPolicyNotSupported        TransferPolicy = "not-supported"
)

func (e TransferPolicy) ToPointer() *TransferPolicy {
	return &e
}
func (e *TransferPolicy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "charge-and-renew":
		fallthrough
	case "no-charge-no-change":
		fallthrough
	case "no-change":
		fallthrough
	case "new-term":
		fallthrough
	case "not-supported":
		*e = TransferPolicy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferPolicy: %v", v)
	}
}

// GetDomainTransferStatus - The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.
type GetDomainTransferStatus string

const (
	GetDomainTransferStatusCompleted       GetDomainTransferStatus = "completed"
	GetDomainTransferStatusUndef           GetDomainTransferStatus = "undef"
	GetDomainTransferStatusPendingOwner    GetDomainTransferStatus = "pending_owner"
	GetDomainTransferStatusPendingAdmin    GetDomainTransferStatus = "pending_admin"
	GetDomainTransferStatusPendingRegistry GetDomainTransferStatus = "pending_registry"
	GetDomainTransferStatusCancelled       GetDomainTransferStatus = "cancelled"
	GetDomainTransferStatusUnknown         GetDomainTransferStatus = "unknown"
)

func (e GetDomainTransferStatus) ToPointer() *GetDomainTransferStatus {
	return &e
}
func (e *GetDomainTransferStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "completed":
		fallthrough
	case "undef":
		fallthrough
	case "pending_owner":
		fallthrough
	case "pending_admin":
		fallthrough
	case "pending_registry":
		fallthrough
	case "cancelled":
		fallthrough
	case "unknown":
		*e = GetDomainTransferStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDomainTransferStatus: %v", v)
	}
}

type GetDomainTransferResponseBody struct {
	// Whether or not the domain is transferable
	Transferable bool `json:"transferable"`
	// The domain's transfer policy (depends on TLD requirements). `charge-and-renew`: transfer will charge for renewal and will renew the existing domain's registration. `no-charge-no-change`: transfer will have no change to registration period and does not require charge. `no-change`: transfer charge is required, but no change in registration period. `new-term`: transfer charge is required and a new registry term is set based on the transfer date. `not-supported`: transfers are not supported for this domain or TLD. `null`: This TLD is not supported by Vercel's Registrar.
	TransferPolicy *TransferPolicy `json:"transferPolicy"`
	// Description associated with transferable state.
	Reason string `json:"reason"`
	// The current state of an ongoing transfer. `pending_owner`: Awaiting approval by domain's admin contact (every transfer begins with this status). If approval is not given within five days, the transfer is cancelled. `pending_admin`: Waiting for approval by Vercel Registrar admin. `pending_registry`: Awaiting registry approval (the transfer completes after 7 days unless it is declined by the current registrar). `completed`: The transfer completed successfully. `cancelled`: The transfer was cancelled. `undef`: No transfer exists for this domain. `unknown`: This TLD is not supported by Vercel's Registrar.
	Status GetDomainTransferStatus `json:"status"`
}

func (g GetDomainTransferResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDomainTransferResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"transferable", "transferPolicy", "reason", "status"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDomainTransferResponseBody) GetTransferable() bool {
	if o == nil {
		return false
	}
	return o.Transferable
}

func (o *GetDomainTransferResponseBody) GetTransferPolicy() *TransferPolicy {
	if o == nil {
		return nil
	}
	return o.TransferPolicy
}

func (o *GetDomainTransferResponseBody) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *GetDomainTransferResponseBody) GetStatus() GetDomainTransferStatus {
	if o == nil {
		return GetDomainTransferStatus("")
	}
	return o.Status
}

type TransferPolicyChargeAndRenew string

const (
	TransferPolicyChargeAndRenewChargeAndRenew TransferPolicyChargeAndRenew = "charge-and-renew"
)

func (e TransferPolicyChargeAndRenew) ToPointer() *TransferPolicyChargeAndRenew {
	return &e
}
func (e *TransferPolicyChargeAndRenew) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "charge-and-renew":
		*e = TransferPolicyChargeAndRenew(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferPolicyChargeAndRenew: %v", v)
	}
}

type ChargeAndRenew struct {
	Reason         string                       `json:"reason"`
	Status         string                       `json:"status"`
	Transferable   bool                         `json:"transferable"`
	TransferPolicy TransferPolicyChargeAndRenew `json:"transferPolicy"`
}

func (c ChargeAndRenew) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(c, "", false)
}

func (c *ChargeAndRenew) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &c, "", false, []string{"reason", "status", "transferable", "transferPolicy"}); err != nil {
		return err
	}
	return nil
}

func (o *ChargeAndRenew) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *ChargeAndRenew) GetStatus() string {
	if o == nil {
		return ""
	}
	return o.Status
}

func (o *ChargeAndRenew) GetTransferable() bool {
	if o == nil {
		return false
	}
	return o.Transferable
}

func (o *ChargeAndRenew) GetTransferPolicy() TransferPolicyChargeAndRenew {
	if o == nil {
		return TransferPolicyChargeAndRenew("")
	}
	return o.TransferPolicy
}

type GetDomainTransferResponseBodyUnionType string

const (
	GetDomainTransferResponseBodyUnionTypeChargeAndRenew                GetDomainTransferResponseBodyUnionType = "ChargeAndRenew"
	GetDomainTransferResponseBodyUnionTypeGetDomainTransferResponseBody GetDomainTransferResponseBodyUnionType = "getDomainTransfer_ResponseBody"
)

type GetDomainTransferResponseBodyUnion struct {
	ChargeAndRenew                *ChargeAndRenew                `queryParam:"inline"`
	GetDomainTransferResponseBody *GetDomainTransferResponseBody `queryParam:"inline"`

	Type GetDomainTransferResponseBodyUnionType
}

func CreateGetDomainTransferResponseBodyUnionChargeAndRenew(chargeAndRenew ChargeAndRenew) GetDomainTransferResponseBodyUnion {
	typ := GetDomainTransferResponseBodyUnionTypeChargeAndRenew

	return GetDomainTransferResponseBodyUnion{
		ChargeAndRenew: &chargeAndRenew,
		Type:           typ,
	}
}

func CreateGetDomainTransferResponseBodyUnionGetDomainTransferResponseBody(getDomainTransferResponseBody GetDomainTransferResponseBody) GetDomainTransferResponseBodyUnion {
	typ := GetDomainTransferResponseBodyUnionTypeGetDomainTransferResponseBody

	return GetDomainTransferResponseBodyUnion{
		GetDomainTransferResponseBody: &getDomainTransferResponseBody,
		Type:                          typ,
	}
}

func (u *GetDomainTransferResponseBodyUnion) UnmarshalJSON(data []byte) error {

	var chargeAndRenew ChargeAndRenew = ChargeAndRenew{}
	if err := utils.UnmarshalJSON(data, &chargeAndRenew, "", true, nil); err == nil {
		u.ChargeAndRenew = &chargeAndRenew
		u.Type = GetDomainTransferResponseBodyUnionTypeChargeAndRenew
		return nil
	}

	var getDomainTransferResponseBody GetDomainTransferResponseBody = GetDomainTransferResponseBody{}
	if err := utils.UnmarshalJSON(data, &getDomainTransferResponseBody, "", true, nil); err == nil {
		u.GetDomainTransferResponseBody = &getDomainTransferResponseBody
		u.Type = GetDomainTransferResponseBodyUnionTypeGetDomainTransferResponseBody
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDomainTransferResponseBodyUnion", string(data))
}

func (u GetDomainTransferResponseBodyUnion) MarshalJSON() ([]byte, error) {
	if u.ChargeAndRenew != nil {
		return utils.MarshalJSON(u.ChargeAndRenew, "", true)
	}

	if u.GetDomainTransferResponseBody != nil {
		return utils.MarshalJSON(u.GetDomainTransferResponseBody, "", true)
	}

	return nil, errors.New("could not marshal union type GetDomainTransferResponseBodyUnion: all fields are null")
}

type GetDomainTransferResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *GetDomainTransferResponseBodyUnion
}

func (o *GetDomainTransferResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetDomainTransferResponse) GetOneOf() *GetDomainTransferResponseBodyUnion {
	if o == nil {
		return nil
	}
	return o.OneOf
}
