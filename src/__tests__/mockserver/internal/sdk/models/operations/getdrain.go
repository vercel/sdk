// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetDrainRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetDrainRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetDrainCreatedFrom2 string

const (
	GetDrainCreatedFrom2SelfServed  GetDrainCreatedFrom2 = "self-served"
	GetDrainCreatedFrom2Integration GetDrainCreatedFrom2 = "integration"
)

func (e GetDrainCreatedFrom2) ToPointer() *GetDrainCreatedFrom2 {
	return &e
}
func (e *GetDrainCreatedFrom2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = GetDrainCreatedFrom2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainCreatedFrom2: %v", v)
	}
}

type GetDrainSchemasLog2 struct {
}

func (g GetDrainSchemasLog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSchemasLog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainTrace2 struct {
}

func (g GetDrainTrace2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainTrace2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainAnalytics2 struct {
}

func (g GetDrainAnalytics2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainAnalytics2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainSpeedInsights2 struct {
}

func (g GetDrainSpeedInsights2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSpeedInsights2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainSchemas2 struct {
	Log           *GetDrainSchemasLog2    `json:"log,omitempty"`
	Trace         *GetDrainTrace2         `json:"trace,omitempty"`
	Analytics     *GetDrainAnalytics2     `json:"analytics,omitempty"`
	SpeedInsights *GetDrainSpeedInsights2 `json:"speed_insights,omitempty"`
}

func (g GetDrainSchemas2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSchemas2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSchemas2) GetLog() *GetDrainSchemasLog2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainSchemas2) GetTrace() *GetDrainTrace2 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *GetDrainSchemas2) GetAnalytics() *GetDrainAnalytics2 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetDrainSchemas2) GetSpeedInsights() *GetDrainSpeedInsights2 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type GetDrainTypeInternal2 string

const (
	GetDrainTypeInternal2Internal GetDrainTypeInternal2 = "internal"
)

func (e GetDrainTypeInternal2) ToPointer() *GetDrainTypeInternal2 {
	return &e
}
func (e *GetDrainTypeInternal2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = GetDrainTypeInternal2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeInternal2: %v", v)
	}
}

type GetDrainTarget2 string

const (
	GetDrainTarget2VercelOtelTracesDb GetDrainTarget2 = "vercel-otel-traces-db"
)

func (e GetDrainTarget2) ToPointer() *GetDrainTarget2 {
	return &e
}
func (e *GetDrainTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = GetDrainTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTarget2: %v", v)
	}
}

type GetDrainDeliveryVercelOtelTracesDb2 struct {
	Type   GetDrainTypeInternal2 `json:"type"`
	Target GetDrainTarget2       `json:"target"`
}

func (g GetDrainDeliveryVercelOtelTracesDb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryVercelOtelTracesDb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryVercelOtelTracesDb2) GetType() GetDrainTypeInternal2 {
	if o == nil {
		return GetDrainTypeInternal2("")
	}
	return o.Type
}

func (o *GetDrainDeliveryVercelOtelTracesDb2) GetTarget() GetDrainTarget2 {
	if o == nil {
		return GetDrainTarget2("")
	}
	return o.Target
}

type GetDrainTypeClickhouse2 string

const (
	GetDrainTypeClickhouse2Clickhouse GetDrainTypeClickhouse2 = "clickhouse"
)

func (e GetDrainTypeClickhouse2) ToPointer() *GetDrainTypeClickhouse2 {
	return &e
}
func (e *GetDrainTypeClickhouse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = GetDrainTypeClickhouse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeClickhouse2: %v", v)
	}
}

type GetDrainDeliveryClickhouse2 struct {
	Type     GetDrainTypeClickhouse2 `json:"type"`
	Endpoint string                  `json:"endpoint"`
	Table    string                  `json:"table"`
}

func (g GetDrainDeliveryClickhouse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryClickhouse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryClickhouse2) GetType() GetDrainTypeClickhouse2 {
	if o == nil {
		return GetDrainTypeClickhouse2("")
	}
	return o.Type
}

func (o *GetDrainDeliveryClickhouse2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainDeliveryClickhouse2) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type GetDrainTypeSyslog2 string

const (
	GetDrainTypeSyslog2Syslog GetDrainTypeSyslog2 = "syslog"
)

func (e GetDrainTypeSyslog2) ToPointer() *GetDrainTypeSyslog2 {
	return &e
}
func (e *GetDrainTypeSyslog2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = GetDrainTypeSyslog2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeSyslog2: %v", v)
	}
}

type GetDrainDeliverySyslog2 struct {
	Type     GetDrainTypeSyslog2 `json:"type"`
	Endpoint string              `json:"endpoint"`
	Secret   string              `json:"secret"`
}

func (g GetDrainDeliverySyslog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliverySyslog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliverySyslog2) GetType() GetDrainTypeSyslog2 {
	if o == nil {
		return GetDrainTypeSyslog2("")
	}
	return o.Type
}

func (o *GetDrainDeliverySyslog2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainDeliverySyslog2) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type GetDrainTypeOtlphttp2 string

const (
	GetDrainTypeOtlphttp2Otlphttp GetDrainTypeOtlphttp2 = "otlphttp"
)

func (e GetDrainTypeOtlphttp2) ToPointer() *GetDrainTypeOtlphttp2 {
	return &e
}
func (e *GetDrainTypeOtlphttp2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = GetDrainTypeOtlphttp2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeOtlphttp2: %v", v)
	}
}

type GetDrainEndpoint2 struct {
	Traces string `json:"traces"`
}

func (g GetDrainEndpoint2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainEndpoint2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainEndpoint2) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type GetDrainEncoding4 string

const (
	GetDrainEncoding4JSON  GetDrainEncoding4 = "json"
	GetDrainEncoding4Proto GetDrainEncoding4 = "proto"
)

func (e GetDrainEncoding4) ToPointer() *GetDrainEncoding4 {
	return &e
}
func (e *GetDrainEncoding4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = GetDrainEncoding4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainEncoding4: %v", v)
	}
}

type GetDrainDeliveryOtlphttp2 struct {
	Type     GetDrainTypeOtlphttp2 `json:"type"`
	Endpoint GetDrainEndpoint2     `json:"endpoint"`
	Encoding GetDrainEncoding4     `json:"encoding"`
	Headers  map[string]string     `json:"headers"`
	Secret   *string               `json:"secret,omitempty"`
}

func (g GetDrainDeliveryOtlphttp2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryOtlphttp2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryOtlphttp2) GetType() GetDrainTypeOtlphttp2 {
	if o == nil {
		return GetDrainTypeOtlphttp2("")
	}
	return o.Type
}

func (o *GetDrainDeliveryOtlphttp2) GetEndpoint() GetDrainEndpoint2 {
	if o == nil {
		return GetDrainEndpoint2{}
	}
	return o.Endpoint
}

func (o *GetDrainDeliveryOtlphttp2) GetEncoding() GetDrainEncoding4 {
	if o == nil {
		return GetDrainEncoding4("")
	}
	return o.Encoding
}

func (o *GetDrainDeliveryOtlphttp2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainDeliveryOtlphttp2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainTypeHTTP2 string

const (
	GetDrainTypeHTTP2HTTP GetDrainTypeHTTP2 = "http"
)

func (e GetDrainTypeHTTP2) ToPointer() *GetDrainTypeHTTP2 {
	return &e
}
func (e *GetDrainTypeHTTP2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = GetDrainTypeHTTP2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeHTTP2: %v", v)
	}
}

type GetDrainEncoding3 string

const (
	GetDrainEncoding3JSON   GetDrainEncoding3 = "json"
	GetDrainEncoding3Ndjson GetDrainEncoding3 = "ndjson"
)

func (e GetDrainEncoding3) ToPointer() *GetDrainEncoding3 {
	return &e
}
func (e *GetDrainEncoding3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = GetDrainEncoding3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainEncoding3: %v", v)
	}
}

type GetDrainCompression2 string

const (
	GetDrainCompression2Gzip GetDrainCompression2 = "gzip"
	GetDrainCompression2None GetDrainCompression2 = "none"
)

func (e GetDrainCompression2) ToPointer() *GetDrainCompression2 {
	return &e
}
func (e *GetDrainCompression2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = GetDrainCompression2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainCompression2: %v", v)
	}
}

type GetDrainDeliveryHTTP2 struct {
	Type        GetDrainTypeHTTP2     `json:"type"`
	Endpoint    string                `json:"endpoint"`
	Encoding    GetDrainEncoding3     `json:"encoding"`
	Compression *GetDrainCompression2 `json:"compression,omitempty"`
	Headers     map[string]string     `json:"headers"`
	Secret      *string               `json:"secret,omitempty"`
}

func (g GetDrainDeliveryHTTP2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryHTTP2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryHTTP2) GetType() GetDrainTypeHTTP2 {
	if o == nil {
		return GetDrainTypeHTTP2("")
	}
	return o.Type
}

func (o *GetDrainDeliveryHTTP2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainDeliveryHTTP2) GetEncoding() GetDrainEncoding3 {
	if o == nil {
		return GetDrainEncoding3("")
	}
	return o.Encoding
}

func (o *GetDrainDeliveryHTTP2) GetCompression() *GetDrainCompression2 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *GetDrainDeliveryHTTP2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainDeliveryHTTP2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainDeliveryUnion2Type string

const (
	GetDrainDeliveryUnion2TypeGetDrainDeliveryHTTP2               GetDrainDeliveryUnion2Type = "getDrain_delivery_HTTP_2"
	GetDrainDeliveryUnion2TypeGetDrainDeliveryOtlphttp2           GetDrainDeliveryUnion2Type = "getDrain_delivery_Otlphttp_2"
	GetDrainDeliveryUnion2TypeGetDrainDeliverySyslog2             GetDrainDeliveryUnion2Type = "getDrain_delivery_Syslog_2"
	GetDrainDeliveryUnion2TypeGetDrainDeliveryClickhouse2         GetDrainDeliveryUnion2Type = "getDrain_delivery_Clickhouse_2"
	GetDrainDeliveryUnion2TypeGetDrainDeliveryVercelOtelTracesDb2 GetDrainDeliveryUnion2Type = "getDrain_delivery_VercelOtelTracesDb_2"
)

type GetDrainDeliveryUnion2 struct {
	GetDrainDeliveryHTTP2               *GetDrainDeliveryHTTP2               `queryParam:"inline"`
	GetDrainDeliveryOtlphttp2           *GetDrainDeliveryOtlphttp2           `queryParam:"inline"`
	GetDrainDeliverySyslog2             *GetDrainDeliverySyslog2             `queryParam:"inline"`
	GetDrainDeliveryClickhouse2         *GetDrainDeliveryClickhouse2         `queryParam:"inline"`
	GetDrainDeliveryVercelOtelTracesDb2 *GetDrainDeliveryVercelOtelTracesDb2 `queryParam:"inline"`

	Type GetDrainDeliveryUnion2Type
}

func CreateGetDrainDeliveryUnion2GetDrainDeliveryHTTP2(getDrainDeliveryHTTP2 GetDrainDeliveryHTTP2) GetDrainDeliveryUnion2 {
	typ := GetDrainDeliveryUnion2TypeGetDrainDeliveryHTTP2

	return GetDrainDeliveryUnion2{
		GetDrainDeliveryHTTP2: &getDrainDeliveryHTTP2,
		Type:                  typ,
	}
}

func CreateGetDrainDeliveryUnion2GetDrainDeliveryOtlphttp2(getDrainDeliveryOtlphttp2 GetDrainDeliveryOtlphttp2) GetDrainDeliveryUnion2 {
	typ := GetDrainDeliveryUnion2TypeGetDrainDeliveryOtlphttp2

	return GetDrainDeliveryUnion2{
		GetDrainDeliveryOtlphttp2: &getDrainDeliveryOtlphttp2,
		Type:                      typ,
	}
}

func CreateGetDrainDeliveryUnion2GetDrainDeliverySyslog2(getDrainDeliverySyslog2 GetDrainDeliverySyslog2) GetDrainDeliveryUnion2 {
	typ := GetDrainDeliveryUnion2TypeGetDrainDeliverySyslog2

	return GetDrainDeliveryUnion2{
		GetDrainDeliverySyslog2: &getDrainDeliverySyslog2,
		Type:                    typ,
	}
}

func CreateGetDrainDeliveryUnion2GetDrainDeliveryClickhouse2(getDrainDeliveryClickhouse2 GetDrainDeliveryClickhouse2) GetDrainDeliveryUnion2 {
	typ := GetDrainDeliveryUnion2TypeGetDrainDeliveryClickhouse2

	return GetDrainDeliveryUnion2{
		GetDrainDeliveryClickhouse2: &getDrainDeliveryClickhouse2,
		Type:                        typ,
	}
}

func CreateGetDrainDeliveryUnion2GetDrainDeliveryVercelOtelTracesDb2(getDrainDeliveryVercelOtelTracesDb2 GetDrainDeliveryVercelOtelTracesDb2) GetDrainDeliveryUnion2 {
	typ := GetDrainDeliveryUnion2TypeGetDrainDeliveryVercelOtelTracesDb2

	return GetDrainDeliveryUnion2{
		GetDrainDeliveryVercelOtelTracesDb2: &getDrainDeliveryVercelOtelTracesDb2,
		Type:                                typ,
	}
}

func (u *GetDrainDeliveryUnion2) UnmarshalJSON(data []byte) error {

	var getDrainDeliveryHTTP2 GetDrainDeliveryHTTP2 = GetDrainDeliveryHTTP2{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryHTTP2, "", true, nil); err == nil {
		u.GetDrainDeliveryHTTP2 = &getDrainDeliveryHTTP2
		u.Type = GetDrainDeliveryUnion2TypeGetDrainDeliveryHTTP2
		return nil
	}

	var getDrainDeliveryOtlphttp2 GetDrainDeliveryOtlphttp2 = GetDrainDeliveryOtlphttp2{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryOtlphttp2, "", true, nil); err == nil {
		u.GetDrainDeliveryOtlphttp2 = &getDrainDeliveryOtlphttp2
		u.Type = GetDrainDeliveryUnion2TypeGetDrainDeliveryOtlphttp2
		return nil
	}

	var getDrainDeliverySyslog2 GetDrainDeliverySyslog2 = GetDrainDeliverySyslog2{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliverySyslog2, "", true, nil); err == nil {
		u.GetDrainDeliverySyslog2 = &getDrainDeliverySyslog2
		u.Type = GetDrainDeliveryUnion2TypeGetDrainDeliverySyslog2
		return nil
	}

	var getDrainDeliveryClickhouse2 GetDrainDeliveryClickhouse2 = GetDrainDeliveryClickhouse2{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryClickhouse2, "", true, nil); err == nil {
		u.GetDrainDeliveryClickhouse2 = &getDrainDeliveryClickhouse2
		u.Type = GetDrainDeliveryUnion2TypeGetDrainDeliveryClickhouse2
		return nil
	}

	var getDrainDeliveryVercelOtelTracesDb2 GetDrainDeliveryVercelOtelTracesDb2 = GetDrainDeliveryVercelOtelTracesDb2{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryVercelOtelTracesDb2, "", true, nil); err == nil {
		u.GetDrainDeliveryVercelOtelTracesDb2 = &getDrainDeliveryVercelOtelTracesDb2
		u.Type = GetDrainDeliveryUnion2TypeGetDrainDeliveryVercelOtelTracesDb2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainDeliveryUnion2", string(data))
}

func (u GetDrainDeliveryUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDrainDeliveryHTTP2 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryHTTP2, "", true)
	}

	if u.GetDrainDeliveryOtlphttp2 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryOtlphttp2, "", true)
	}

	if u.GetDrainDeliverySyslog2 != nil {
		return utils.MarshalJSON(u.GetDrainDeliverySyslog2, "", true)
	}

	if u.GetDrainDeliveryClickhouse2 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryClickhouse2, "", true)
	}

	if u.GetDrainDeliveryVercelOtelTracesDb2 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryVercelOtelTracesDb2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainDeliveryUnion2: all fields are null")
}

type GetDrainTypeHeadSampling2 string

const (
	GetDrainTypeHeadSampling2HeadSampling GetDrainTypeHeadSampling2 = "head_sampling"
)

func (e GetDrainTypeHeadSampling2) ToPointer() *GetDrainTypeHeadSampling2 {
	return &e
}
func (e *GetDrainTypeHeadSampling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = GetDrainTypeHeadSampling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeHeadSampling2: %v", v)
	}
}

type GetDrainEnv2 string

const (
	GetDrainEnv2Production GetDrainEnv2 = "production"
	GetDrainEnv2Preview    GetDrainEnv2 = "preview"
)

func (e GetDrainEnv2) ToPointer() *GetDrainEnv2 {
	return &e
}
func (e *GetDrainEnv2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetDrainEnv2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainEnv2: %v", v)
	}
}

type GetDrainSampling2 struct {
	Type        GetDrainTypeHeadSampling2 `json:"type"`
	Rate        float64                   `json:"rate"`
	Env         *GetDrainEnv2             `json:"env,omitempty"`
	RequestPath *string                   `json:"requestPath,omitempty"`
}

func (g GetDrainSampling2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSampling2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSampling2) GetType() GetDrainTypeHeadSampling2 {
	if o == nil {
		return GetDrainTypeHeadSampling2("")
	}
	return o.Type
}

func (o *GetDrainSampling2) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *GetDrainSampling2) GetEnv() *GetDrainEnv2 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetDrainSampling2) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type GetDrainStatus2 string

const (
	GetDrainStatus2Enabled  GetDrainStatus2 = "enabled"
	GetDrainStatus2Disabled GetDrainStatus2 = "disabled"
	GetDrainStatus2Errored  GetDrainStatus2 = "errored"
)

func (e GetDrainStatus2) ToPointer() *GetDrainStatus2 {
	return &e
}
func (e *GetDrainStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetDrainStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainStatus2: %v", v)
	}
}

type GetDrainDisabledReason2 string

const (
	GetDrainDisabledReason2DisabledByOwner      GetDrainDisabledReason2 = "disabled-by-owner"
	GetDrainDisabledReason2FeatureNotAvailable  GetDrainDisabledReason2 = "feature-not-available"
	GetDrainDisabledReason2AccountPlanDowngrade GetDrainDisabledReason2 = "account-plan-downgrade"
	GetDrainDisabledReason2DisabledByAdmin      GetDrainDisabledReason2 = "disabled-by-admin"
)

func (e GetDrainDisabledReason2) ToPointer() *GetDrainDisabledReason2 {
	return &e
}
func (e *GetDrainDisabledReason2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = GetDrainDisabledReason2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainDisabledReason2: %v", v)
	}
}

type GetDrainKindIntegration2 string

const (
	GetDrainKindIntegration2Integration GetDrainKindIntegration2 = "integration"
)

func (e GetDrainKindIntegration2) ToPointer() *GetDrainKindIntegration2 {
	return &e
}
func (e *GetDrainKindIntegration2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = GetDrainKindIntegration2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainKindIntegration2: %v", v)
	}
}

type GetDrainSourceIntegration2 struct {
	Kind                       GetDrainKindIntegration2 `json:"kind"`
	ResourceID                 *string                  `json:"resourceId,omitempty"`
	ExternalResourceID         *string                  `json:"externalResourceId,omitempty"`
	IntegrationID              string                   `json:"integrationId"`
	IntegrationConfigurationID string                   `json:"integrationConfigurationId"`
}

func (g GetDrainSourceIntegration2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSourceIntegration2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSourceIntegration2) GetKind() GetDrainKindIntegration2 {
	if o == nil {
		return GetDrainKindIntegration2("")
	}
	return o.Kind
}

func (o *GetDrainSourceIntegration2) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *GetDrainSourceIntegration2) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *GetDrainSourceIntegration2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetDrainSourceIntegration2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetDrainKindSelfServed2 string

const (
	GetDrainKindSelfServed2SelfServed GetDrainKindSelfServed2 = "self-served"
)

func (e GetDrainKindSelfServed2) ToPointer() *GetDrainKindSelfServed2 {
	return &e
}
func (e *GetDrainKindSelfServed2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetDrainKindSelfServed2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainKindSelfServed2: %v", v)
	}
}

type GetDrainSourceSelfServed2 struct {
	Kind GetDrainKindSelfServed2 `json:"kind"`
}

func (g GetDrainSourceSelfServed2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSourceSelfServed2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSourceSelfServed2) GetKind() GetDrainKindSelfServed2 {
	if o == nil {
		return GetDrainKindSelfServed2("")
	}
	return o.Kind
}

type GetDrainSourceUnion2Type string

const (
	GetDrainSourceUnion2TypeGetDrainSourceSelfServed2  GetDrainSourceUnion2Type = "getDrain_source_SelfServed_2"
	GetDrainSourceUnion2TypeGetDrainSourceIntegration2 GetDrainSourceUnion2Type = "getDrain_source_Integration_2"
)

type GetDrainSourceUnion2 struct {
	GetDrainSourceSelfServed2  *GetDrainSourceSelfServed2  `queryParam:"inline"`
	GetDrainSourceIntegration2 *GetDrainSourceIntegration2 `queryParam:"inline"`

	Type GetDrainSourceUnion2Type
}

func CreateGetDrainSourceUnion2GetDrainSourceSelfServed2(getDrainSourceSelfServed2 GetDrainSourceSelfServed2) GetDrainSourceUnion2 {
	typ := GetDrainSourceUnion2TypeGetDrainSourceSelfServed2

	return GetDrainSourceUnion2{
		GetDrainSourceSelfServed2: &getDrainSourceSelfServed2,
		Type:                      typ,
	}
}

func CreateGetDrainSourceUnion2GetDrainSourceIntegration2(getDrainSourceIntegration2 GetDrainSourceIntegration2) GetDrainSourceUnion2 {
	typ := GetDrainSourceUnion2TypeGetDrainSourceIntegration2

	return GetDrainSourceUnion2{
		GetDrainSourceIntegration2: &getDrainSourceIntegration2,
		Type:                       typ,
	}
}

func (u *GetDrainSourceUnion2) UnmarshalJSON(data []byte) error {

	var getDrainSourceIntegration2 GetDrainSourceIntegration2 = GetDrainSourceIntegration2{}
	if err := utils.UnmarshalJSON(data, &getDrainSourceIntegration2, "", true, nil); err == nil {
		u.GetDrainSourceIntegration2 = &getDrainSourceIntegration2
		u.Type = GetDrainSourceUnion2TypeGetDrainSourceIntegration2
		return nil
	}

	var getDrainSourceSelfServed2 GetDrainSourceSelfServed2 = GetDrainSourceSelfServed2{}
	if err := utils.UnmarshalJSON(data, &getDrainSourceSelfServed2, "", true, nil); err == nil {
		u.GetDrainSourceSelfServed2 = &getDrainSourceSelfServed2
		u.Type = GetDrainSourceUnion2TypeGetDrainSourceSelfServed2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainSourceUnion2", string(data))
}

func (u GetDrainSourceUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDrainSourceSelfServed2 != nil {
		return utils.MarshalJSON(u.GetDrainSourceSelfServed2, "", true)
	}

	if u.GetDrainSourceIntegration2 != nil {
		return utils.MarshalJSON(u.GetDrainSourceIntegration2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainSourceUnion2: all fields are null")
}

type GetDrainVersionV22 string

const (
	GetDrainVersionV22V2 GetDrainVersionV22 = "v2"
)

func (e GetDrainVersionV22) ToPointer() *GetDrainVersionV22 {
	return &e
}
func (e *GetDrainVersionV22) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = GetDrainVersionV22(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainVersionV22: %v", v)
	}
}

type GetDrainTypeOdata2 string

const (
	GetDrainTypeOdata2Odata GetDrainTypeOdata2 = "odata"
)

func (e GetDrainTypeOdata2) ToPointer() *GetDrainTypeOdata2 {
	return &e
}
func (e *GetDrainTypeOdata2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = GetDrainTypeOdata2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeOdata2: %v", v)
	}
}

type GetDrainFilterOdata2 struct {
	Type GetDrainTypeOdata2 `json:"type"`
	Text string             `json:"text"`
}

func (g GetDrainFilterOdata2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterOdata2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterOdata2) GetType() GetDrainTypeOdata2 {
	if o == nil {
		return GetDrainTypeOdata2("")
	}
	return o.Type
}

func (o *GetDrainFilterOdata2) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type GetDrainTypeBasic2 string

const (
	GetDrainTypeBasic2Basic GetDrainTypeBasic2 = "basic"
)

func (e GetDrainTypeBasic2) ToPointer() *GetDrainTypeBasic2 {
	return &e
}
func (e *GetDrainTypeBasic2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = GetDrainTypeBasic2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeBasic2: %v", v)
	}
}

type GetDrainProject2 struct {
	Ids []string `json:"ids,omitempty"`
}

func (g GetDrainProject2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainProject2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainProject2) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type GetDrainFilterV2Log2 struct {
	Sources []string `json:"sources,omitempty"`
}

func (g GetDrainFilterV2Log2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterV2Log2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterV2Log2) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type GetDrainDeployment2 struct {
	Environments []string `json:"environments,omitempty"`
}

func (g GetDrainDeployment2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeployment2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeployment2) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type GetDrainFilterBasic2 struct {
	Type       GetDrainTypeBasic2    `json:"type"`
	Project    *GetDrainProject2     `json:"project,omitempty"`
	Log        *GetDrainFilterV2Log2 `json:"log,omitempty"`
	Deployment *GetDrainDeployment2  `json:"deployment,omitempty"`
}

func (g GetDrainFilterBasic2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterBasic2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterBasic2) GetType() GetDrainTypeBasic2 {
	if o == nil {
		return GetDrainTypeBasic2("")
	}
	return o.Type
}

func (o *GetDrainFilterBasic2) GetProject() *GetDrainProject2 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDrainFilterBasic2) GetLog() *GetDrainFilterV2Log2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainFilterBasic2) GetDeployment() *GetDrainDeployment2 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type GetDrainFilterUnion2Type string

const (
	GetDrainFilterUnion2TypeGetDrainFilterBasic2 GetDrainFilterUnion2Type = "getDrain_filter_Basic_2"
	GetDrainFilterUnion2TypeGetDrainFilterOdata2 GetDrainFilterUnion2Type = "getDrain_filter_Odata_2"
)

type GetDrainFilterUnion2 struct {
	GetDrainFilterBasic2 *GetDrainFilterBasic2 `queryParam:"inline"`
	GetDrainFilterOdata2 *GetDrainFilterOdata2 `queryParam:"inline"`

	Type GetDrainFilterUnion2Type
}

func CreateGetDrainFilterUnion2GetDrainFilterBasic2(getDrainFilterBasic2 GetDrainFilterBasic2) GetDrainFilterUnion2 {
	typ := GetDrainFilterUnion2TypeGetDrainFilterBasic2

	return GetDrainFilterUnion2{
		GetDrainFilterBasic2: &getDrainFilterBasic2,
		Type:                 typ,
	}
}

func CreateGetDrainFilterUnion2GetDrainFilterOdata2(getDrainFilterOdata2 GetDrainFilterOdata2) GetDrainFilterUnion2 {
	typ := GetDrainFilterUnion2TypeGetDrainFilterOdata2

	return GetDrainFilterUnion2{
		GetDrainFilterOdata2: &getDrainFilterOdata2,
		Type:                 typ,
	}
}

func (u *GetDrainFilterUnion2) UnmarshalJSON(data []byte) error {

	var getDrainFilterOdata2 GetDrainFilterOdata2 = GetDrainFilterOdata2{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterOdata2, "", true, nil); err == nil {
		u.GetDrainFilterOdata2 = &getDrainFilterOdata2
		u.Type = GetDrainFilterUnion2TypeGetDrainFilterOdata2
		return nil
	}

	var getDrainFilterBasic2 GetDrainFilterBasic2 = GetDrainFilterBasic2{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterBasic2, "", true, nil); err == nil {
		u.GetDrainFilterBasic2 = &getDrainFilterBasic2
		u.Type = GetDrainFilterUnion2TypeGetDrainFilterBasic2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainFilterUnion2", string(data))
}

func (u GetDrainFilterUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDrainFilterBasic2 != nil {
		return utils.MarshalJSON(u.GetDrainFilterBasic2, "", true)
	}

	if u.GetDrainFilterOdata2 != nil {
		return utils.MarshalJSON(u.GetDrainFilterOdata2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainFilterUnion2: all fields are null")
}

type GetDrainFilterV2V22 struct {
	Version GetDrainVersionV22   `json:"version"`
	Filter  GetDrainFilterUnion2 `json:"filter"`
}

func (g GetDrainFilterV2V22) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterV2V22) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterV2V22) GetVersion() GetDrainVersionV22 {
	if o == nil {
		return GetDrainVersionV22("")
	}
	return o.Version
}

func (o *GetDrainFilterV2V22) GetFilter() GetDrainFilterUnion2 {
	if o == nil {
		return GetDrainFilterUnion2{}
	}
	return o.Filter
}

type GetDrainVersionV12 string

const (
	GetDrainVersionV12V1 GetDrainVersionV12 = "v1"
)

func (e GetDrainVersionV12) ToPointer() *GetDrainVersionV12 {
	return &e
}
func (e *GetDrainVersionV12) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = GetDrainVersionV12(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainVersionV12: %v", v)
	}
}

type GetDrainFilterV2V12 struct {
	Version GetDrainVersionV12 `json:"version"`
}

func (g GetDrainFilterV2V12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterV2V12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterV2V12) GetVersion() GetDrainVersionV12 {
	if o == nil {
		return GetDrainVersionV12("")
	}
	return o.Version
}

type GetDrainFilterV2Union2Type string

const (
	GetDrainFilterV2Union2TypeGetDrainFilterV2V12 GetDrainFilterV2Union2Type = "getDrain_filterV2_V1_2"
	GetDrainFilterV2Union2TypeGetDrainFilterV2V22 GetDrainFilterV2Union2Type = "getDrain_filterV2_V2_2"
)

type GetDrainFilterV2Union2 struct {
	GetDrainFilterV2V12 *GetDrainFilterV2V12 `queryParam:"inline"`
	GetDrainFilterV2V22 *GetDrainFilterV2V22 `queryParam:"inline"`

	Type GetDrainFilterV2Union2Type
}

func CreateGetDrainFilterV2Union2GetDrainFilterV2V12(getDrainFilterV2V12 GetDrainFilterV2V12) GetDrainFilterV2Union2 {
	typ := GetDrainFilterV2Union2TypeGetDrainFilterV2V12

	return GetDrainFilterV2Union2{
		GetDrainFilterV2V12: &getDrainFilterV2V12,
		Type:                typ,
	}
}

func CreateGetDrainFilterV2Union2GetDrainFilterV2V22(getDrainFilterV2V22 GetDrainFilterV2V22) GetDrainFilterV2Union2 {
	typ := GetDrainFilterV2Union2TypeGetDrainFilterV2V22

	return GetDrainFilterV2Union2{
		GetDrainFilterV2V22: &getDrainFilterV2V22,
		Type:                typ,
	}
}

func (u *GetDrainFilterV2Union2) UnmarshalJSON(data []byte) error {

	var getDrainFilterV2V22 GetDrainFilterV2V22 = GetDrainFilterV2V22{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterV2V22, "", true, nil); err == nil {
		u.GetDrainFilterV2V22 = &getDrainFilterV2V22
		u.Type = GetDrainFilterV2Union2TypeGetDrainFilterV2V22
		return nil
	}

	var getDrainFilterV2V12 GetDrainFilterV2V12 = GetDrainFilterV2V12{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterV2V12, "", true, nil); err == nil {
		u.GetDrainFilterV2V12 = &getDrainFilterV2V12
		u.Type = GetDrainFilterV2Union2TypeGetDrainFilterV2V12
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainFilterV2Union2", string(data))
}

func (u GetDrainFilterV2Union2) MarshalJSON() ([]byte, error) {
	if u.GetDrainFilterV2V12 != nil {
		return utils.MarshalJSON(u.GetDrainFilterV2V12, "", true)
	}

	if u.GetDrainFilterV2V22 != nil {
		return utils.MarshalJSON(u.GetDrainFilterV2V22, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainFilterV2Union2: all fields are null")
}

type GetDrainFramework string

const (
	GetDrainFrameworkBlitzjs        GetDrainFramework = "blitzjs"
	GetDrainFrameworkNextjs         GetDrainFramework = "nextjs"
	GetDrainFrameworkGatsby         GetDrainFramework = "gatsby"
	GetDrainFrameworkRemix          GetDrainFramework = "remix"
	GetDrainFrameworkReactRouter    GetDrainFramework = "react-router"
	GetDrainFrameworkAstro          GetDrainFramework = "astro"
	GetDrainFrameworkHexo           GetDrainFramework = "hexo"
	GetDrainFrameworkEleventy       GetDrainFramework = "eleventy"
	GetDrainFrameworkDocusaurus2    GetDrainFramework = "docusaurus-2"
	GetDrainFrameworkDocusaurus     GetDrainFramework = "docusaurus"
	GetDrainFrameworkPreact         GetDrainFramework = "preact"
	GetDrainFrameworkSolidstart1    GetDrainFramework = "solidstart-1"
	GetDrainFrameworkSolidstart     GetDrainFramework = "solidstart"
	GetDrainFrameworkDojo           GetDrainFramework = "dojo"
	GetDrainFrameworkEmber          GetDrainFramework = "ember"
	GetDrainFrameworkVue            GetDrainFramework = "vue"
	GetDrainFrameworkScully         GetDrainFramework = "scully"
	GetDrainFrameworkIonicAngular   GetDrainFramework = "ionic-angular"
	GetDrainFrameworkAngular        GetDrainFramework = "angular"
	GetDrainFrameworkPolymer        GetDrainFramework = "polymer"
	GetDrainFrameworkSvelte         GetDrainFramework = "svelte"
	GetDrainFrameworkSveltekit      GetDrainFramework = "sveltekit"
	GetDrainFrameworkSveltekit1     GetDrainFramework = "sveltekit-1"
	GetDrainFrameworkIonicReact     GetDrainFramework = "ionic-react"
	GetDrainFrameworkCreateReactApp GetDrainFramework = "create-react-app"
	GetDrainFrameworkGridsome       GetDrainFramework = "gridsome"
	GetDrainFrameworkUmijs          GetDrainFramework = "umijs"
	GetDrainFrameworkSapper         GetDrainFramework = "sapper"
	GetDrainFrameworkSaber          GetDrainFramework = "saber"
	GetDrainFrameworkStencil        GetDrainFramework = "stencil"
	GetDrainFrameworkNuxtjs         GetDrainFramework = "nuxtjs"
	GetDrainFrameworkRedwoodjs      GetDrainFramework = "redwoodjs"
	GetDrainFrameworkHugo           GetDrainFramework = "hugo"
	GetDrainFrameworkJekyll         GetDrainFramework = "jekyll"
	GetDrainFrameworkBrunch         GetDrainFramework = "brunch"
	GetDrainFrameworkMiddleman      GetDrainFramework = "middleman"
	GetDrainFrameworkZola           GetDrainFramework = "zola"
	GetDrainFrameworkHydrogen       GetDrainFramework = "hydrogen"
	GetDrainFrameworkVite           GetDrainFramework = "vite"
	GetDrainFrameworkVitepress      GetDrainFramework = "vitepress"
	GetDrainFrameworkVuepress       GetDrainFramework = "vuepress"
	GetDrainFrameworkParcel         GetDrainFramework = "parcel"
	GetDrainFrameworkFastapi        GetDrainFramework = "fastapi"
	GetDrainFrameworkFlask          GetDrainFramework = "flask"
	GetDrainFrameworkFasthtml       GetDrainFramework = "fasthtml"
	GetDrainFrameworkSanityV3       GetDrainFramework = "sanity-v3"
	GetDrainFrameworkSanity         GetDrainFramework = "sanity"
	GetDrainFrameworkStorybook      GetDrainFramework = "storybook"
	GetDrainFrameworkNitro          GetDrainFramework = "nitro"
	GetDrainFrameworkHono           GetDrainFramework = "hono"
	GetDrainFrameworkExpress        GetDrainFramework = "express"
	GetDrainFrameworkH3             GetDrainFramework = "h3"
	GetDrainFrameworkNestjs         GetDrainFramework = "nestjs"
	GetDrainFrameworkXmcp           GetDrainFramework = "xmcp"
)

func (e GetDrainFramework) ToPointer() *GetDrainFramework {
	return &e
}
func (e *GetDrainFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fastapi":
		fallthrough
	case "flask":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		fallthrough
	case "nitro":
		fallthrough
	case "hono":
		fallthrough
	case "express":
		fallthrough
	case "h3":
		fallthrough
	case "nestjs":
		fallthrough
	case "xmcp":
		*e = GetDrainFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainFramework: %v", v)
	}
}

type GetDrainProjectsMetadatum struct {
	ID               string             `json:"id"`
	Name             string             `json:"name"`
	Framework        *GetDrainFramework `json:"framework,omitempty"`
	LatestDeployment *string            `json:"latestDeployment,omitempty"`
}

func (g GetDrainProjectsMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainProjectsMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id", "name"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainProjectsMetadatum) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDrainProjectsMetadatum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDrainProjectsMetadatum) GetFramework() *GetDrainFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetDrainProjectsMetadatum) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

type GetDrainResponseBody2 struct {
	ID                          string                      `json:"id"`
	OwnerID                     string                      `json:"ownerId"`
	Name                        string                      `json:"name"`
	CreatedAt                   float64                     `json:"createdAt"`
	CreatedFrom                 *GetDrainCreatedFrom2       `json:"createdFrom,omitempty"`
	UpdatedAt                   float64                     `json:"updatedAt"`
	ProjectIds                  []string                    `json:"projectIds,omitempty"`
	Schemas                     *GetDrainSchemas2           `json:"schemas,omitempty"`
	Delivery                    *GetDrainDeliveryUnion2     `json:"delivery,omitempty"`
	Sampling                    []GetDrainSampling2         `json:"sampling,omitempty"`
	TeamID                      *string                     `json:"teamId,omitempty"`
	Status                      *GetDrainStatus2            `json:"status,omitempty"`
	DisabledAt                  *float64                    `json:"disabledAt,omitempty"`
	DisabledReason              *GetDrainDisabledReason2    `json:"disabledReason,omitempty"`
	DisabledBy                  *string                     `json:"disabledBy,omitempty"`
	FirstErrorTimestamp         *float64                    `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID             *string                     `json:"configurationId,omitempty"`
	ClientID                    *string                     `json:"clientId,omitempty"`
	Source                      GetDrainSourceUnion2        `json:"source"`
	Filter                      *string                     `json:"filter,omitempty"`
	FilterV2                    *GetDrainFilterV2Union2     `json:"filterV2,omitempty"`
	IntegrationIcon             *string                     `json:"integrationIcon,omitempty"`
	IntegrationConfigurationURI *string                     `json:"integrationConfigurationUri,omitempty"`
	IntegrationWebsite          *string                     `json:"integrationWebsite,omitempty"`
	ProjectsMetadata            []GetDrainProjectsMetadatum `json:"projectsMetadata,omitempty"`
}

func (g GetDrainResponseBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainResponseBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDrainResponseBody2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDrainResponseBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDrainResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDrainResponseBody2) GetCreatedFrom() *GetDrainCreatedFrom2 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *GetDrainResponseBody2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetDrainResponseBody2) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *GetDrainResponseBody2) GetSchemas() *GetDrainSchemas2 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetDrainResponseBody2) GetDelivery() *GetDrainDeliveryUnion2 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *GetDrainResponseBody2) GetSampling() []GetDrainSampling2 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *GetDrainResponseBody2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDrainResponseBody2) GetStatus() *GetDrainStatus2 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetDrainResponseBody2) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetDrainResponseBody2) GetDisabledReason() *GetDrainDisabledReason2 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetDrainResponseBody2) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *GetDrainResponseBody2) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *GetDrainResponseBody2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetDrainResponseBody2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *GetDrainResponseBody2) GetSource() GetDrainSourceUnion2 {
	if o == nil {
		return GetDrainSourceUnion2{}
	}
	return o.Source
}

func (o *GetDrainResponseBody2) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetDrainResponseBody2) GetFilterV2() *GetDrainFilterV2Union2 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

func (o *GetDrainResponseBody2) GetIntegrationIcon() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIcon
}

func (o *GetDrainResponseBody2) GetIntegrationConfigurationURI() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationURI
}

func (o *GetDrainResponseBody2) GetIntegrationWebsite() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationWebsite
}

func (o *GetDrainResponseBody2) GetProjectsMetadata() []GetDrainProjectsMetadatum {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

type GetDrainCreatedFrom1 string

const (
	GetDrainCreatedFrom1SelfServed  GetDrainCreatedFrom1 = "self-served"
	GetDrainCreatedFrom1Integration GetDrainCreatedFrom1 = "integration"
)

func (e GetDrainCreatedFrom1) ToPointer() *GetDrainCreatedFrom1 {
	return &e
}
func (e *GetDrainCreatedFrom1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = GetDrainCreatedFrom1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainCreatedFrom1: %v", v)
	}
}

type GetDrainSchemasLog1 struct {
}

func (g GetDrainSchemasLog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSchemasLog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainTrace1 struct {
}

func (g GetDrainTrace1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainTrace1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainAnalytics1 struct {
}

func (g GetDrainAnalytics1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainAnalytics1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainSpeedInsights1 struct {
}

func (g GetDrainSpeedInsights1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSpeedInsights1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainSchemas1 struct {
	Log           *GetDrainSchemasLog1    `json:"log,omitempty"`
	Trace         *GetDrainTrace1         `json:"trace,omitempty"`
	Analytics     *GetDrainAnalytics1     `json:"analytics,omitempty"`
	SpeedInsights *GetDrainSpeedInsights1 `json:"speed_insights,omitempty"`
}

func (g GetDrainSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSchemas1) GetLog() *GetDrainSchemasLog1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainSchemas1) GetTrace() *GetDrainTrace1 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *GetDrainSchemas1) GetAnalytics() *GetDrainAnalytics1 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetDrainSchemas1) GetSpeedInsights() *GetDrainSpeedInsights1 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type GetDrainTypeInternal1 string

const (
	GetDrainTypeInternal1Internal GetDrainTypeInternal1 = "internal"
)

func (e GetDrainTypeInternal1) ToPointer() *GetDrainTypeInternal1 {
	return &e
}
func (e *GetDrainTypeInternal1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = GetDrainTypeInternal1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeInternal1: %v", v)
	}
}

type GetDrainTarget1 string

const (
	GetDrainTarget1VercelOtelTracesDb GetDrainTarget1 = "vercel-otel-traces-db"
)

func (e GetDrainTarget1) ToPointer() *GetDrainTarget1 {
	return &e
}
func (e *GetDrainTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = GetDrainTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTarget1: %v", v)
	}
}

type GetDrainDeliveryVercelOtelTracesDb1 struct {
	Type   GetDrainTypeInternal1 `json:"type"`
	Target GetDrainTarget1       `json:"target"`
}

func (g GetDrainDeliveryVercelOtelTracesDb1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryVercelOtelTracesDb1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryVercelOtelTracesDb1) GetType() GetDrainTypeInternal1 {
	if o == nil {
		return GetDrainTypeInternal1("")
	}
	return o.Type
}

func (o *GetDrainDeliveryVercelOtelTracesDb1) GetTarget() GetDrainTarget1 {
	if o == nil {
		return GetDrainTarget1("")
	}
	return o.Target
}

type GetDrainTypeClickhouse1 string

const (
	GetDrainTypeClickhouse1Clickhouse GetDrainTypeClickhouse1 = "clickhouse"
)

func (e GetDrainTypeClickhouse1) ToPointer() *GetDrainTypeClickhouse1 {
	return &e
}
func (e *GetDrainTypeClickhouse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = GetDrainTypeClickhouse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeClickhouse1: %v", v)
	}
}

type GetDrainDeliveryClickhouse1 struct {
	Type     GetDrainTypeClickhouse1 `json:"type"`
	Endpoint string                  `json:"endpoint"`
	Table    string                  `json:"table"`
}

func (g GetDrainDeliveryClickhouse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryClickhouse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryClickhouse1) GetType() GetDrainTypeClickhouse1 {
	if o == nil {
		return GetDrainTypeClickhouse1("")
	}
	return o.Type
}

func (o *GetDrainDeliveryClickhouse1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainDeliveryClickhouse1) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type GetDrainTypeSyslog1 string

const (
	GetDrainTypeSyslog1Syslog GetDrainTypeSyslog1 = "syslog"
)

func (e GetDrainTypeSyslog1) ToPointer() *GetDrainTypeSyslog1 {
	return &e
}
func (e *GetDrainTypeSyslog1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = GetDrainTypeSyslog1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeSyslog1: %v", v)
	}
}

type GetDrainDeliverySyslog1 struct {
	Type     GetDrainTypeSyslog1 `json:"type"`
	Endpoint string              `json:"endpoint"`
	Secret   string              `json:"secret"`
}

func (g GetDrainDeliverySyslog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliverySyslog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliverySyslog1) GetType() GetDrainTypeSyslog1 {
	if o == nil {
		return GetDrainTypeSyslog1("")
	}
	return o.Type
}

func (o *GetDrainDeliverySyslog1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainDeliverySyslog1) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type GetDrainTypeOtlphttp1 string

const (
	GetDrainTypeOtlphttp1Otlphttp GetDrainTypeOtlphttp1 = "otlphttp"
)

func (e GetDrainTypeOtlphttp1) ToPointer() *GetDrainTypeOtlphttp1 {
	return &e
}
func (e *GetDrainTypeOtlphttp1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = GetDrainTypeOtlphttp1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeOtlphttp1: %v", v)
	}
}

type GetDrainEndpoint1 struct {
	Traces string `json:"traces"`
}

func (g GetDrainEndpoint1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainEndpoint1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainEndpoint1) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type GetDrainEncoding2 string

const (
	GetDrainEncoding2JSON  GetDrainEncoding2 = "json"
	GetDrainEncoding2Proto GetDrainEncoding2 = "proto"
)

func (e GetDrainEncoding2) ToPointer() *GetDrainEncoding2 {
	return &e
}
func (e *GetDrainEncoding2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = GetDrainEncoding2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainEncoding2: %v", v)
	}
}

type GetDrainDeliveryOtlphttp1 struct {
	Type     GetDrainTypeOtlphttp1 `json:"type"`
	Endpoint GetDrainEndpoint1     `json:"endpoint"`
	Encoding GetDrainEncoding2     `json:"encoding"`
	Headers  map[string]string     `json:"headers"`
	Secret   *string               `json:"secret,omitempty"`
}

func (g GetDrainDeliveryOtlphttp1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryOtlphttp1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryOtlphttp1) GetType() GetDrainTypeOtlphttp1 {
	if o == nil {
		return GetDrainTypeOtlphttp1("")
	}
	return o.Type
}

func (o *GetDrainDeliveryOtlphttp1) GetEndpoint() GetDrainEndpoint1 {
	if o == nil {
		return GetDrainEndpoint1{}
	}
	return o.Endpoint
}

func (o *GetDrainDeliveryOtlphttp1) GetEncoding() GetDrainEncoding2 {
	if o == nil {
		return GetDrainEncoding2("")
	}
	return o.Encoding
}

func (o *GetDrainDeliveryOtlphttp1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainDeliveryOtlphttp1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainTypeHTTP1 string

const (
	GetDrainTypeHTTP1HTTP GetDrainTypeHTTP1 = "http"
)

func (e GetDrainTypeHTTP1) ToPointer() *GetDrainTypeHTTP1 {
	return &e
}
func (e *GetDrainTypeHTTP1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = GetDrainTypeHTTP1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeHTTP1: %v", v)
	}
}

type GetDrainEncoding1 string

const (
	GetDrainEncoding1JSON   GetDrainEncoding1 = "json"
	GetDrainEncoding1Ndjson GetDrainEncoding1 = "ndjson"
)

func (e GetDrainEncoding1) ToPointer() *GetDrainEncoding1 {
	return &e
}
func (e *GetDrainEncoding1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = GetDrainEncoding1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainEncoding1: %v", v)
	}
}

type GetDrainCompression1 string

const (
	GetDrainCompression1Gzip GetDrainCompression1 = "gzip"
	GetDrainCompression1None GetDrainCompression1 = "none"
)

func (e GetDrainCompression1) ToPointer() *GetDrainCompression1 {
	return &e
}
func (e *GetDrainCompression1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = GetDrainCompression1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainCompression1: %v", v)
	}
}

type GetDrainDeliveryHTTP1 struct {
	Type        GetDrainTypeHTTP1     `json:"type"`
	Endpoint    string                `json:"endpoint"`
	Encoding    GetDrainEncoding1     `json:"encoding"`
	Compression *GetDrainCompression1 `json:"compression,omitempty"`
	Headers     map[string]string     `json:"headers"`
	Secret      *string               `json:"secret,omitempty"`
}

func (g GetDrainDeliveryHTTP1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeliveryHTTP1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeliveryHTTP1) GetType() GetDrainTypeHTTP1 {
	if o == nil {
		return GetDrainTypeHTTP1("")
	}
	return o.Type
}

func (o *GetDrainDeliveryHTTP1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainDeliveryHTTP1) GetEncoding() GetDrainEncoding1 {
	if o == nil {
		return GetDrainEncoding1("")
	}
	return o.Encoding
}

func (o *GetDrainDeliveryHTTP1) GetCompression() *GetDrainCompression1 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *GetDrainDeliveryHTTP1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainDeliveryHTTP1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainDeliveryUnion1Type string

const (
	GetDrainDeliveryUnion1TypeGetDrainDeliveryHTTP1               GetDrainDeliveryUnion1Type = "getDrain_delivery_HTTP_1"
	GetDrainDeliveryUnion1TypeGetDrainDeliveryOtlphttp1           GetDrainDeliveryUnion1Type = "getDrain_delivery_Otlphttp_1"
	GetDrainDeliveryUnion1TypeGetDrainDeliverySyslog1             GetDrainDeliveryUnion1Type = "getDrain_delivery_Syslog_1"
	GetDrainDeliveryUnion1TypeGetDrainDeliveryClickhouse1         GetDrainDeliveryUnion1Type = "getDrain_delivery_Clickhouse_1"
	GetDrainDeliveryUnion1TypeGetDrainDeliveryVercelOtelTracesDb1 GetDrainDeliveryUnion1Type = "getDrain_delivery_VercelOtelTracesDb_1"
)

type GetDrainDeliveryUnion1 struct {
	GetDrainDeliveryHTTP1               *GetDrainDeliveryHTTP1               `queryParam:"inline"`
	GetDrainDeliveryOtlphttp1           *GetDrainDeliveryOtlphttp1           `queryParam:"inline"`
	GetDrainDeliverySyslog1             *GetDrainDeliverySyslog1             `queryParam:"inline"`
	GetDrainDeliveryClickhouse1         *GetDrainDeliveryClickhouse1         `queryParam:"inline"`
	GetDrainDeliveryVercelOtelTracesDb1 *GetDrainDeliveryVercelOtelTracesDb1 `queryParam:"inline"`

	Type GetDrainDeliveryUnion1Type
}

func CreateGetDrainDeliveryUnion1GetDrainDeliveryHTTP1(getDrainDeliveryHTTP1 GetDrainDeliveryHTTP1) GetDrainDeliveryUnion1 {
	typ := GetDrainDeliveryUnion1TypeGetDrainDeliveryHTTP1

	return GetDrainDeliveryUnion1{
		GetDrainDeliveryHTTP1: &getDrainDeliveryHTTP1,
		Type:                  typ,
	}
}

func CreateGetDrainDeliveryUnion1GetDrainDeliveryOtlphttp1(getDrainDeliveryOtlphttp1 GetDrainDeliveryOtlphttp1) GetDrainDeliveryUnion1 {
	typ := GetDrainDeliveryUnion1TypeGetDrainDeliveryOtlphttp1

	return GetDrainDeliveryUnion1{
		GetDrainDeliveryOtlphttp1: &getDrainDeliveryOtlphttp1,
		Type:                      typ,
	}
}

func CreateGetDrainDeliveryUnion1GetDrainDeliverySyslog1(getDrainDeliverySyslog1 GetDrainDeliverySyslog1) GetDrainDeliveryUnion1 {
	typ := GetDrainDeliveryUnion1TypeGetDrainDeliverySyslog1

	return GetDrainDeliveryUnion1{
		GetDrainDeliverySyslog1: &getDrainDeliverySyslog1,
		Type:                    typ,
	}
}

func CreateGetDrainDeliveryUnion1GetDrainDeliveryClickhouse1(getDrainDeliveryClickhouse1 GetDrainDeliveryClickhouse1) GetDrainDeliveryUnion1 {
	typ := GetDrainDeliveryUnion1TypeGetDrainDeliveryClickhouse1

	return GetDrainDeliveryUnion1{
		GetDrainDeliveryClickhouse1: &getDrainDeliveryClickhouse1,
		Type:                        typ,
	}
}

func CreateGetDrainDeliveryUnion1GetDrainDeliveryVercelOtelTracesDb1(getDrainDeliveryVercelOtelTracesDb1 GetDrainDeliveryVercelOtelTracesDb1) GetDrainDeliveryUnion1 {
	typ := GetDrainDeliveryUnion1TypeGetDrainDeliveryVercelOtelTracesDb1

	return GetDrainDeliveryUnion1{
		GetDrainDeliveryVercelOtelTracesDb1: &getDrainDeliveryVercelOtelTracesDb1,
		Type:                                typ,
	}
}

func (u *GetDrainDeliveryUnion1) UnmarshalJSON(data []byte) error {

	var getDrainDeliveryHTTP1 GetDrainDeliveryHTTP1 = GetDrainDeliveryHTTP1{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryHTTP1, "", true, nil); err == nil {
		u.GetDrainDeliveryHTTP1 = &getDrainDeliveryHTTP1
		u.Type = GetDrainDeliveryUnion1TypeGetDrainDeliveryHTTP1
		return nil
	}

	var getDrainDeliveryOtlphttp1 GetDrainDeliveryOtlphttp1 = GetDrainDeliveryOtlphttp1{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryOtlphttp1, "", true, nil); err == nil {
		u.GetDrainDeliveryOtlphttp1 = &getDrainDeliveryOtlphttp1
		u.Type = GetDrainDeliveryUnion1TypeGetDrainDeliveryOtlphttp1
		return nil
	}

	var getDrainDeliverySyslog1 GetDrainDeliverySyslog1 = GetDrainDeliverySyslog1{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliverySyslog1, "", true, nil); err == nil {
		u.GetDrainDeliverySyslog1 = &getDrainDeliverySyslog1
		u.Type = GetDrainDeliveryUnion1TypeGetDrainDeliverySyslog1
		return nil
	}

	var getDrainDeliveryClickhouse1 GetDrainDeliveryClickhouse1 = GetDrainDeliveryClickhouse1{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryClickhouse1, "", true, nil); err == nil {
		u.GetDrainDeliveryClickhouse1 = &getDrainDeliveryClickhouse1
		u.Type = GetDrainDeliveryUnion1TypeGetDrainDeliveryClickhouse1
		return nil
	}

	var getDrainDeliveryVercelOtelTracesDb1 GetDrainDeliveryVercelOtelTracesDb1 = GetDrainDeliveryVercelOtelTracesDb1{}
	if err := utils.UnmarshalJSON(data, &getDrainDeliveryVercelOtelTracesDb1, "", true, nil); err == nil {
		u.GetDrainDeliveryVercelOtelTracesDb1 = &getDrainDeliveryVercelOtelTracesDb1
		u.Type = GetDrainDeliveryUnion1TypeGetDrainDeliveryVercelOtelTracesDb1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainDeliveryUnion1", string(data))
}

func (u GetDrainDeliveryUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDrainDeliveryHTTP1 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryHTTP1, "", true)
	}

	if u.GetDrainDeliveryOtlphttp1 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryOtlphttp1, "", true)
	}

	if u.GetDrainDeliverySyslog1 != nil {
		return utils.MarshalJSON(u.GetDrainDeliverySyslog1, "", true)
	}

	if u.GetDrainDeliveryClickhouse1 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryClickhouse1, "", true)
	}

	if u.GetDrainDeliveryVercelOtelTracesDb1 != nil {
		return utils.MarshalJSON(u.GetDrainDeliveryVercelOtelTracesDb1, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainDeliveryUnion1: all fields are null")
}

type GetDrainTypeHeadSampling1 string

const (
	GetDrainTypeHeadSampling1HeadSampling GetDrainTypeHeadSampling1 = "head_sampling"
)

func (e GetDrainTypeHeadSampling1) ToPointer() *GetDrainTypeHeadSampling1 {
	return &e
}
func (e *GetDrainTypeHeadSampling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = GetDrainTypeHeadSampling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeHeadSampling1: %v", v)
	}
}

type GetDrainEnv1 string

const (
	GetDrainEnv1Production GetDrainEnv1 = "production"
	GetDrainEnv1Preview    GetDrainEnv1 = "preview"
)

func (e GetDrainEnv1) ToPointer() *GetDrainEnv1 {
	return &e
}
func (e *GetDrainEnv1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetDrainEnv1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainEnv1: %v", v)
	}
}

type GetDrainSampling1 struct {
	Type        GetDrainTypeHeadSampling1 `json:"type"`
	Rate        float64                   `json:"rate"`
	Env         *GetDrainEnv1             `json:"env,omitempty"`
	RequestPath *string                   `json:"requestPath,omitempty"`
}

func (g GetDrainSampling1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSampling1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSampling1) GetType() GetDrainTypeHeadSampling1 {
	if o == nil {
		return GetDrainTypeHeadSampling1("")
	}
	return o.Type
}

func (o *GetDrainSampling1) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *GetDrainSampling1) GetEnv() *GetDrainEnv1 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetDrainSampling1) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type GetDrainStatus1 string

const (
	GetDrainStatus1Enabled  GetDrainStatus1 = "enabled"
	GetDrainStatus1Disabled GetDrainStatus1 = "disabled"
	GetDrainStatus1Errored  GetDrainStatus1 = "errored"
)

func (e GetDrainStatus1) ToPointer() *GetDrainStatus1 {
	return &e
}
func (e *GetDrainStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetDrainStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainStatus1: %v", v)
	}
}

type GetDrainDisabledReason1 string

const (
	GetDrainDisabledReason1DisabledByOwner      GetDrainDisabledReason1 = "disabled-by-owner"
	GetDrainDisabledReason1FeatureNotAvailable  GetDrainDisabledReason1 = "feature-not-available"
	GetDrainDisabledReason1AccountPlanDowngrade GetDrainDisabledReason1 = "account-plan-downgrade"
	GetDrainDisabledReason1DisabledByAdmin      GetDrainDisabledReason1 = "disabled-by-admin"
)

func (e GetDrainDisabledReason1) ToPointer() *GetDrainDisabledReason1 {
	return &e
}
func (e *GetDrainDisabledReason1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = GetDrainDisabledReason1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainDisabledReason1: %v", v)
	}
}

type GetDrainKindIntegration1 string

const (
	GetDrainKindIntegration1Integration GetDrainKindIntegration1 = "integration"
)

func (e GetDrainKindIntegration1) ToPointer() *GetDrainKindIntegration1 {
	return &e
}
func (e *GetDrainKindIntegration1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = GetDrainKindIntegration1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainKindIntegration1: %v", v)
	}
}

type GetDrainSourceIntegration1 struct {
	Kind                       GetDrainKindIntegration1 `json:"kind"`
	ResourceID                 *string                  `json:"resourceId,omitempty"`
	ExternalResourceID         *string                  `json:"externalResourceId,omitempty"`
	IntegrationID              string                   `json:"integrationId"`
	IntegrationConfigurationID string                   `json:"integrationConfigurationId"`
}

func (g GetDrainSourceIntegration1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSourceIntegration1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSourceIntegration1) GetKind() GetDrainKindIntegration1 {
	if o == nil {
		return GetDrainKindIntegration1("")
	}
	return o.Kind
}

func (o *GetDrainSourceIntegration1) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *GetDrainSourceIntegration1) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *GetDrainSourceIntegration1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetDrainSourceIntegration1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetDrainKindSelfServed1 string

const (
	GetDrainKindSelfServed1SelfServed GetDrainKindSelfServed1 = "self-served"
)

func (e GetDrainKindSelfServed1) ToPointer() *GetDrainKindSelfServed1 {
	return &e
}
func (e *GetDrainKindSelfServed1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetDrainKindSelfServed1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainKindSelfServed1: %v", v)
	}
}

type GetDrainSourceSelfServed1 struct {
	Kind GetDrainKindSelfServed1 `json:"kind"`
}

func (g GetDrainSourceSelfServed1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainSourceSelfServed1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainSourceSelfServed1) GetKind() GetDrainKindSelfServed1 {
	if o == nil {
		return GetDrainKindSelfServed1("")
	}
	return o.Kind
}

type GetDrainSourceUnion1Type string

const (
	GetDrainSourceUnion1TypeGetDrainSourceSelfServed1  GetDrainSourceUnion1Type = "getDrain_source_SelfServed_1"
	GetDrainSourceUnion1TypeGetDrainSourceIntegration1 GetDrainSourceUnion1Type = "getDrain_source_Integration_1"
)

type GetDrainSourceUnion1 struct {
	GetDrainSourceSelfServed1  *GetDrainSourceSelfServed1  `queryParam:"inline"`
	GetDrainSourceIntegration1 *GetDrainSourceIntegration1 `queryParam:"inline"`

	Type GetDrainSourceUnion1Type
}

func CreateGetDrainSourceUnion1GetDrainSourceSelfServed1(getDrainSourceSelfServed1 GetDrainSourceSelfServed1) GetDrainSourceUnion1 {
	typ := GetDrainSourceUnion1TypeGetDrainSourceSelfServed1

	return GetDrainSourceUnion1{
		GetDrainSourceSelfServed1: &getDrainSourceSelfServed1,
		Type:                      typ,
	}
}

func CreateGetDrainSourceUnion1GetDrainSourceIntegration1(getDrainSourceIntegration1 GetDrainSourceIntegration1) GetDrainSourceUnion1 {
	typ := GetDrainSourceUnion1TypeGetDrainSourceIntegration1

	return GetDrainSourceUnion1{
		GetDrainSourceIntegration1: &getDrainSourceIntegration1,
		Type:                       typ,
	}
}

func (u *GetDrainSourceUnion1) UnmarshalJSON(data []byte) error {

	var getDrainSourceIntegration1 GetDrainSourceIntegration1 = GetDrainSourceIntegration1{}
	if err := utils.UnmarshalJSON(data, &getDrainSourceIntegration1, "", true, nil); err == nil {
		u.GetDrainSourceIntegration1 = &getDrainSourceIntegration1
		u.Type = GetDrainSourceUnion1TypeGetDrainSourceIntegration1
		return nil
	}

	var getDrainSourceSelfServed1 GetDrainSourceSelfServed1 = GetDrainSourceSelfServed1{}
	if err := utils.UnmarshalJSON(data, &getDrainSourceSelfServed1, "", true, nil); err == nil {
		u.GetDrainSourceSelfServed1 = &getDrainSourceSelfServed1
		u.Type = GetDrainSourceUnion1TypeGetDrainSourceSelfServed1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainSourceUnion1", string(data))
}

func (u GetDrainSourceUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDrainSourceSelfServed1 != nil {
		return utils.MarshalJSON(u.GetDrainSourceSelfServed1, "", true)
	}

	if u.GetDrainSourceIntegration1 != nil {
		return utils.MarshalJSON(u.GetDrainSourceIntegration1, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainSourceUnion1: all fields are null")
}

type GetDrainVersionV21 string

const (
	GetDrainVersionV21V2 GetDrainVersionV21 = "v2"
)

func (e GetDrainVersionV21) ToPointer() *GetDrainVersionV21 {
	return &e
}
func (e *GetDrainVersionV21) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = GetDrainVersionV21(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainVersionV21: %v", v)
	}
}

type GetDrainTypeOdata1 string

const (
	GetDrainTypeOdata1Odata GetDrainTypeOdata1 = "odata"
)

func (e GetDrainTypeOdata1) ToPointer() *GetDrainTypeOdata1 {
	return &e
}
func (e *GetDrainTypeOdata1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = GetDrainTypeOdata1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeOdata1: %v", v)
	}
}

type GetDrainFilterOdata1 struct {
	Type GetDrainTypeOdata1 `json:"type"`
	Text string             `json:"text"`
}

func (g GetDrainFilterOdata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterOdata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterOdata1) GetType() GetDrainTypeOdata1 {
	if o == nil {
		return GetDrainTypeOdata1("")
	}
	return o.Type
}

func (o *GetDrainFilterOdata1) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type GetDrainTypeBasic1 string

const (
	GetDrainTypeBasic1Basic GetDrainTypeBasic1 = "basic"
)

func (e GetDrainTypeBasic1) ToPointer() *GetDrainTypeBasic1 {
	return &e
}
func (e *GetDrainTypeBasic1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = GetDrainTypeBasic1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainTypeBasic1: %v", v)
	}
}

type GetDrainProject1 struct {
	Ids []string `json:"ids,omitempty"`
}

func (g GetDrainProject1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainProject1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainProject1) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type GetDrainFilterV2Log1 struct {
	Sources []string `json:"sources,omitempty"`
}

func (g GetDrainFilterV2Log1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterV2Log1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterV2Log1) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type GetDrainDeployment1 struct {
	Environments []string `json:"environments,omitempty"`
}

func (g GetDrainDeployment1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainDeployment1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainDeployment1) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type GetDrainFilterBasic1 struct {
	Type       GetDrainTypeBasic1    `json:"type"`
	Project    *GetDrainProject1     `json:"project,omitempty"`
	Log        *GetDrainFilterV2Log1 `json:"log,omitempty"`
	Deployment *GetDrainDeployment1  `json:"deployment,omitempty"`
}

func (g GetDrainFilterBasic1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterBasic1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterBasic1) GetType() GetDrainTypeBasic1 {
	if o == nil {
		return GetDrainTypeBasic1("")
	}
	return o.Type
}

func (o *GetDrainFilterBasic1) GetProject() *GetDrainProject1 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDrainFilterBasic1) GetLog() *GetDrainFilterV2Log1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainFilterBasic1) GetDeployment() *GetDrainDeployment1 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type GetDrainFilterUnion1Type string

const (
	GetDrainFilterUnion1TypeGetDrainFilterBasic1 GetDrainFilterUnion1Type = "getDrain_filter_Basic_1"
	GetDrainFilterUnion1TypeGetDrainFilterOdata1 GetDrainFilterUnion1Type = "getDrain_filter_Odata_1"
)

type GetDrainFilterUnion1 struct {
	GetDrainFilterBasic1 *GetDrainFilterBasic1 `queryParam:"inline"`
	GetDrainFilterOdata1 *GetDrainFilterOdata1 `queryParam:"inline"`

	Type GetDrainFilterUnion1Type
}

func CreateGetDrainFilterUnion1GetDrainFilterBasic1(getDrainFilterBasic1 GetDrainFilterBasic1) GetDrainFilterUnion1 {
	typ := GetDrainFilterUnion1TypeGetDrainFilterBasic1

	return GetDrainFilterUnion1{
		GetDrainFilterBasic1: &getDrainFilterBasic1,
		Type:                 typ,
	}
}

func CreateGetDrainFilterUnion1GetDrainFilterOdata1(getDrainFilterOdata1 GetDrainFilterOdata1) GetDrainFilterUnion1 {
	typ := GetDrainFilterUnion1TypeGetDrainFilterOdata1

	return GetDrainFilterUnion1{
		GetDrainFilterOdata1: &getDrainFilterOdata1,
		Type:                 typ,
	}
}

func (u *GetDrainFilterUnion1) UnmarshalJSON(data []byte) error {

	var getDrainFilterOdata1 GetDrainFilterOdata1 = GetDrainFilterOdata1{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterOdata1, "", true, nil); err == nil {
		u.GetDrainFilterOdata1 = &getDrainFilterOdata1
		u.Type = GetDrainFilterUnion1TypeGetDrainFilterOdata1
		return nil
	}

	var getDrainFilterBasic1 GetDrainFilterBasic1 = GetDrainFilterBasic1{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterBasic1, "", true, nil); err == nil {
		u.GetDrainFilterBasic1 = &getDrainFilterBasic1
		u.Type = GetDrainFilterUnion1TypeGetDrainFilterBasic1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainFilterUnion1", string(data))
}

func (u GetDrainFilterUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDrainFilterBasic1 != nil {
		return utils.MarshalJSON(u.GetDrainFilterBasic1, "", true)
	}

	if u.GetDrainFilterOdata1 != nil {
		return utils.MarshalJSON(u.GetDrainFilterOdata1, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainFilterUnion1: all fields are null")
}

type GetDrainFilterV2V21 struct {
	Version GetDrainVersionV21   `json:"version"`
	Filter  GetDrainFilterUnion1 `json:"filter"`
}

func (g GetDrainFilterV2V21) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterV2V21) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterV2V21) GetVersion() GetDrainVersionV21 {
	if o == nil {
		return GetDrainVersionV21("")
	}
	return o.Version
}

func (o *GetDrainFilterV2V21) GetFilter() GetDrainFilterUnion1 {
	if o == nil {
		return GetDrainFilterUnion1{}
	}
	return o.Filter
}

type GetDrainVersionV11 string

const (
	GetDrainVersionV11V1 GetDrainVersionV11 = "v1"
)

func (e GetDrainVersionV11) ToPointer() *GetDrainVersionV11 {
	return &e
}
func (e *GetDrainVersionV11) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = GetDrainVersionV11(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainVersionV11: %v", v)
	}
}

type GetDrainFilterV2V11 struct {
	Version GetDrainVersionV11 `json:"version"`
}

func (g GetDrainFilterV2V11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainFilterV2V11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainFilterV2V11) GetVersion() GetDrainVersionV11 {
	if o == nil {
		return GetDrainVersionV11("")
	}
	return o.Version
}

type GetDrainFilterV2Union1Type string

const (
	GetDrainFilterV2Union1TypeGetDrainFilterV2V11 GetDrainFilterV2Union1Type = "getDrain_filterV2_V1_1"
	GetDrainFilterV2Union1TypeGetDrainFilterV2V21 GetDrainFilterV2Union1Type = "getDrain_filterV2_V2_1"
)

type GetDrainFilterV2Union1 struct {
	GetDrainFilterV2V11 *GetDrainFilterV2V11 `queryParam:"inline"`
	GetDrainFilterV2V21 *GetDrainFilterV2V21 `queryParam:"inline"`

	Type GetDrainFilterV2Union1Type
}

func CreateGetDrainFilterV2Union1GetDrainFilterV2V11(getDrainFilterV2V11 GetDrainFilterV2V11) GetDrainFilterV2Union1 {
	typ := GetDrainFilterV2Union1TypeGetDrainFilterV2V11

	return GetDrainFilterV2Union1{
		GetDrainFilterV2V11: &getDrainFilterV2V11,
		Type:                typ,
	}
}

func CreateGetDrainFilterV2Union1GetDrainFilterV2V21(getDrainFilterV2V21 GetDrainFilterV2V21) GetDrainFilterV2Union1 {
	typ := GetDrainFilterV2Union1TypeGetDrainFilterV2V21

	return GetDrainFilterV2Union1{
		GetDrainFilterV2V21: &getDrainFilterV2V21,
		Type:                typ,
	}
}

func (u *GetDrainFilterV2Union1) UnmarshalJSON(data []byte) error {

	var getDrainFilterV2V21 GetDrainFilterV2V21 = GetDrainFilterV2V21{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterV2V21, "", true, nil); err == nil {
		u.GetDrainFilterV2V21 = &getDrainFilterV2V21
		u.Type = GetDrainFilterV2Union1TypeGetDrainFilterV2V21
		return nil
	}

	var getDrainFilterV2V11 GetDrainFilterV2V11 = GetDrainFilterV2V11{}
	if err := utils.UnmarshalJSON(data, &getDrainFilterV2V11, "", true, nil); err == nil {
		u.GetDrainFilterV2V11 = &getDrainFilterV2V11
		u.Type = GetDrainFilterV2Union1TypeGetDrainFilterV2V11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainFilterV2Union1", string(data))
}

func (u GetDrainFilterV2Union1) MarshalJSON() ([]byte, error) {
	if u.GetDrainFilterV2V11 != nil {
		return utils.MarshalJSON(u.GetDrainFilterV2V11, "", true)
	}

	if u.GetDrainFilterV2V21 != nil {
		return utils.MarshalJSON(u.GetDrainFilterV2V21, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainFilterV2Union1: all fields are null")
}

type GetDrainResponseBody1 struct {
	ID                  string                   `json:"id"`
	OwnerID             string                   `json:"ownerId"`
	Name                string                   `json:"name"`
	CreatedAt           float64                  `json:"createdAt"`
	CreatedFrom         *GetDrainCreatedFrom1    `json:"createdFrom,omitempty"`
	UpdatedAt           float64                  `json:"updatedAt"`
	ProjectIds          []string                 `json:"projectIds,omitempty"`
	Schemas             *GetDrainSchemas1        `json:"schemas,omitempty"`
	Delivery            *GetDrainDeliveryUnion1  `json:"delivery,omitempty"`
	Sampling            []GetDrainSampling1      `json:"sampling,omitempty"`
	TeamID              *string                  `json:"teamId,omitempty"`
	Status              *GetDrainStatus1         `json:"status,omitempty"`
	DisabledAt          *float64                 `json:"disabledAt,omitempty"`
	DisabledReason      *GetDrainDisabledReason1 `json:"disabledReason,omitempty"`
	DisabledBy          *string                  `json:"disabledBy,omitempty"`
	FirstErrorTimestamp *float64                 `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID     *string                  `json:"configurationId,omitempty"`
	ClientID            *string                  `json:"clientId,omitempty"`
	Source              GetDrainSourceUnion1     `json:"source"`
	Filter              *string                  `json:"filter,omitempty"`
	FilterV2            *GetDrainFilterV2Union1  `json:"filterV2,omitempty"`
}

func (g GetDrainResponseBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainResponseBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDrainResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetDrainResponseBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDrainResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetDrainResponseBody1) GetCreatedFrom() *GetDrainCreatedFrom1 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *GetDrainResponseBody1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetDrainResponseBody1) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *GetDrainResponseBody1) GetSchemas() *GetDrainSchemas1 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *GetDrainResponseBody1) GetDelivery() *GetDrainDeliveryUnion1 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *GetDrainResponseBody1) GetSampling() []GetDrainSampling1 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *GetDrainResponseBody1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDrainResponseBody1) GetStatus() *GetDrainStatus1 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetDrainResponseBody1) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetDrainResponseBody1) GetDisabledReason() *GetDrainDisabledReason1 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *GetDrainResponseBody1) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *GetDrainResponseBody1) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *GetDrainResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetDrainResponseBody1) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *GetDrainResponseBody1) GetSource() GetDrainSourceUnion1 {
	if o == nil {
		return GetDrainSourceUnion1{}
	}
	return o.Source
}

func (o *GetDrainResponseBody1) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *GetDrainResponseBody1) GetFilterV2() *GetDrainFilterV2Union1 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

type GetDrainResponseBodyType string

const (
	GetDrainResponseBodyTypeGetDrainResponseBody1 GetDrainResponseBodyType = "getDrain_ResponseBody_1"
	GetDrainResponseBodyTypeGetDrainResponseBody2 GetDrainResponseBodyType = "getDrain_ResponseBody_2"
)

type GetDrainResponseBody struct {
	GetDrainResponseBody1 *GetDrainResponseBody1 `queryParam:"inline"`
	GetDrainResponseBody2 *GetDrainResponseBody2 `queryParam:"inline"`

	Type GetDrainResponseBodyType
}

func CreateGetDrainResponseBodyGetDrainResponseBody1(getDrainResponseBody1 GetDrainResponseBody1) GetDrainResponseBody {
	typ := GetDrainResponseBodyTypeGetDrainResponseBody1

	return GetDrainResponseBody{
		GetDrainResponseBody1: &getDrainResponseBody1,
		Type:                  typ,
	}
}

func CreateGetDrainResponseBodyGetDrainResponseBody2(getDrainResponseBody2 GetDrainResponseBody2) GetDrainResponseBody {
	typ := GetDrainResponseBodyTypeGetDrainResponseBody2

	return GetDrainResponseBody{
		GetDrainResponseBody2: &getDrainResponseBody2,
		Type:                  typ,
	}
}

func (u *GetDrainResponseBody) UnmarshalJSON(data []byte) error {

	var getDrainResponseBody1 GetDrainResponseBody1 = GetDrainResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getDrainResponseBody1, "", true, nil); err == nil {
		u.GetDrainResponseBody1 = &getDrainResponseBody1
		u.Type = GetDrainResponseBodyTypeGetDrainResponseBody1
		return nil
	}

	var getDrainResponseBody2 GetDrainResponseBody2 = GetDrainResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getDrainResponseBody2, "", true, nil); err == nil {
		u.GetDrainResponseBody2 = &getDrainResponseBody2
		u.Type = GetDrainResponseBodyTypeGetDrainResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainResponseBody", string(data))
}

func (u GetDrainResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetDrainResponseBody1 != nil {
		return utils.MarshalJSON(u.GetDrainResponseBody1, "", true)
	}

	if u.GetDrainResponseBody2 != nil {
		return utils.MarshalJSON(u.GetDrainResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainResponseBody: all fields are null")
}

type GetDrainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *GetDrainResponseBody
}

func (o *GetDrainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetDrainResponse) GetOneOf() *GetDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
