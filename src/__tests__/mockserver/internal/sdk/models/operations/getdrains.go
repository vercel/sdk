// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetDrainsRequest struct {
	ProjectID       *string `queryParam:"style=form,explode=true,name=projectId"`
	IncludeMetadata *bool   `default:"false" queryParam:"style=form,explode=true,name=includeMetadata"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (g GetDrainsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetDrainsRequest) GetIncludeMetadata() *bool {
	if o == nil {
		return nil
	}
	return o.IncludeMetadata
}

func (o *GetDrainsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetDrainsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetDrainsCreatedFrom2 string

const (
	GetDrainsCreatedFrom2SelfServed  GetDrainsCreatedFrom2 = "self-served"
	GetDrainsCreatedFrom2Integration GetDrainsCreatedFrom2 = "integration"
)

func (e GetDrainsCreatedFrom2) ToPointer() *GetDrainsCreatedFrom2 {
	return &e
}
func (e *GetDrainsCreatedFrom2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = GetDrainsCreatedFrom2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsCreatedFrom2: %v", v)
	}
}

type GetDrainsSchemasLog2 struct {
}

func (g GetDrainsSchemasLog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSchemasLog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsTrace2 struct {
}

func (g GetDrainsTrace2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsTrace2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsAnalytics2 struct {
}

func (g GetDrainsAnalytics2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsAnalytics2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsSpeedInsights2 struct {
}

func (g GetDrainsSpeedInsights2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSpeedInsights2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsSchemas2 struct {
	Log           *GetDrainsSchemasLog2    `json:"log,omitempty"`
	Trace         *GetDrainsTrace2         `json:"trace,omitempty"`
	Analytics     *GetDrainsAnalytics2     `json:"analytics,omitempty"`
	SpeedInsights *GetDrainsSpeedInsights2 `json:"speed_insights,omitempty"`
}

func (g GetDrainsSchemas2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSchemas2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSchemas2) GetLog() *GetDrainsSchemasLog2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainsSchemas2) GetTrace() *GetDrainsTrace2 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *GetDrainsSchemas2) GetAnalytics() *GetDrainsAnalytics2 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetDrainsSchemas2) GetSpeedInsights() *GetDrainsSpeedInsights2 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type GetDrainsTypeInternal2 string

const (
	GetDrainsTypeInternal2Internal GetDrainsTypeInternal2 = "internal"
)

func (e GetDrainsTypeInternal2) ToPointer() *GetDrainsTypeInternal2 {
	return &e
}
func (e *GetDrainsTypeInternal2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = GetDrainsTypeInternal2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeInternal2: %v", v)
	}
}

type GetDrainsTarget2 string

const (
	GetDrainsTarget2VercelOtelTracesDb GetDrainsTarget2 = "vercel-otel-traces-db"
)

func (e GetDrainsTarget2) ToPointer() *GetDrainsTarget2 {
	return &e
}
func (e *GetDrainsTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = GetDrainsTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTarget2: %v", v)
	}
}

type GetDrainsDeliveryVercelOtelTracesDb2 struct {
	Type   GetDrainsTypeInternal2 `json:"type"`
	Target GetDrainsTarget2       `json:"target"`
}

func (g GetDrainsDeliveryVercelOtelTracesDb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryVercelOtelTracesDb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryVercelOtelTracesDb2) GetType() GetDrainsTypeInternal2 {
	if o == nil {
		return GetDrainsTypeInternal2("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryVercelOtelTracesDb2) GetTarget() GetDrainsTarget2 {
	if o == nil {
		return GetDrainsTarget2("")
	}
	return o.Target
}

type GetDrainsTypeClickhouse2 string

const (
	GetDrainsTypeClickhouse2Clickhouse GetDrainsTypeClickhouse2 = "clickhouse"
)

func (e GetDrainsTypeClickhouse2) ToPointer() *GetDrainsTypeClickhouse2 {
	return &e
}
func (e *GetDrainsTypeClickhouse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = GetDrainsTypeClickhouse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeClickhouse2: %v", v)
	}
}

type GetDrainsDeliveryClickhouse2 struct {
	Type     GetDrainsTypeClickhouse2 `json:"type"`
	Endpoint string                   `json:"endpoint"`
	Table    string                   `json:"table"`
}

func (g GetDrainsDeliveryClickhouse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryClickhouse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryClickhouse2) GetType() GetDrainsTypeClickhouse2 {
	if o == nil {
		return GetDrainsTypeClickhouse2("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryClickhouse2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainsDeliveryClickhouse2) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type GetDrainsTypeSyslog2 string

const (
	GetDrainsTypeSyslog2Syslog GetDrainsTypeSyslog2 = "syslog"
)

func (e GetDrainsTypeSyslog2) ToPointer() *GetDrainsTypeSyslog2 {
	return &e
}
func (e *GetDrainsTypeSyslog2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = GetDrainsTypeSyslog2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeSyslog2: %v", v)
	}
}

type GetDrainsDeliverySyslog2 struct {
	Type     GetDrainsTypeSyslog2 `json:"type"`
	Endpoint string               `json:"endpoint"`
	Secret   string               `json:"secret"`
}

func (g GetDrainsDeliverySyslog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliverySyslog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliverySyslog2) GetType() GetDrainsTypeSyslog2 {
	if o == nil {
		return GetDrainsTypeSyslog2("")
	}
	return o.Type
}

func (o *GetDrainsDeliverySyslog2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainsDeliverySyslog2) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type GetDrainsTypeOtlphttp2 string

const (
	GetDrainsTypeOtlphttp2Otlphttp GetDrainsTypeOtlphttp2 = "otlphttp"
)

func (e GetDrainsTypeOtlphttp2) ToPointer() *GetDrainsTypeOtlphttp2 {
	return &e
}
func (e *GetDrainsTypeOtlphttp2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = GetDrainsTypeOtlphttp2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeOtlphttp2: %v", v)
	}
}

type GetDrainsEndpoint2 struct {
	Traces string `json:"traces"`
}

func (g GetDrainsEndpoint2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsEndpoint2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsEndpoint2) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type GetDrainsEncoding4 string

const (
	GetDrainsEncoding4JSON  GetDrainsEncoding4 = "json"
	GetDrainsEncoding4Proto GetDrainsEncoding4 = "proto"
)

func (e GetDrainsEncoding4) ToPointer() *GetDrainsEncoding4 {
	return &e
}
func (e *GetDrainsEncoding4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = GetDrainsEncoding4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsEncoding4: %v", v)
	}
}

type GetDrainsDeliveryOtlphttp2 struct {
	Type     GetDrainsTypeOtlphttp2 `json:"type"`
	Endpoint GetDrainsEndpoint2     `json:"endpoint"`
	Encoding GetDrainsEncoding4     `json:"encoding"`
	Headers  map[string]string      `json:"headers"`
	Secret   *string                `json:"secret,omitempty"`
}

func (g GetDrainsDeliveryOtlphttp2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryOtlphttp2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryOtlphttp2) GetType() GetDrainsTypeOtlphttp2 {
	if o == nil {
		return GetDrainsTypeOtlphttp2("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryOtlphttp2) GetEndpoint() GetDrainsEndpoint2 {
	if o == nil {
		return GetDrainsEndpoint2{}
	}
	return o.Endpoint
}

func (o *GetDrainsDeliveryOtlphttp2) GetEncoding() GetDrainsEncoding4 {
	if o == nil {
		return GetDrainsEncoding4("")
	}
	return o.Encoding
}

func (o *GetDrainsDeliveryOtlphttp2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainsDeliveryOtlphttp2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainsTypeHTTP2 string

const (
	GetDrainsTypeHTTP2HTTP GetDrainsTypeHTTP2 = "http"
)

func (e GetDrainsTypeHTTP2) ToPointer() *GetDrainsTypeHTTP2 {
	return &e
}
func (e *GetDrainsTypeHTTP2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = GetDrainsTypeHTTP2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeHTTP2: %v", v)
	}
}

type GetDrainsEncoding3 string

const (
	GetDrainsEncoding3JSON   GetDrainsEncoding3 = "json"
	GetDrainsEncoding3Ndjson GetDrainsEncoding3 = "ndjson"
)

func (e GetDrainsEncoding3) ToPointer() *GetDrainsEncoding3 {
	return &e
}
func (e *GetDrainsEncoding3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = GetDrainsEncoding3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsEncoding3: %v", v)
	}
}

type GetDrainsCompression2 string

const (
	GetDrainsCompression2Gzip GetDrainsCompression2 = "gzip"
	GetDrainsCompression2None GetDrainsCompression2 = "none"
)

func (e GetDrainsCompression2) ToPointer() *GetDrainsCompression2 {
	return &e
}
func (e *GetDrainsCompression2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = GetDrainsCompression2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsCompression2: %v", v)
	}
}

type GetDrainsDeliveryHTTP2 struct {
	Type        GetDrainsTypeHTTP2     `json:"type"`
	Endpoint    string                 `json:"endpoint"`
	Encoding    GetDrainsEncoding3     `json:"encoding"`
	Compression *GetDrainsCompression2 `json:"compression,omitempty"`
	Headers     map[string]string      `json:"headers"`
	Secret      *string                `json:"secret,omitempty"`
}

func (g GetDrainsDeliveryHTTP2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryHTTP2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryHTTP2) GetType() GetDrainsTypeHTTP2 {
	if o == nil {
		return GetDrainsTypeHTTP2("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryHTTP2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainsDeliveryHTTP2) GetEncoding() GetDrainsEncoding3 {
	if o == nil {
		return GetDrainsEncoding3("")
	}
	return o.Encoding
}

func (o *GetDrainsDeliveryHTTP2) GetCompression() *GetDrainsCompression2 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *GetDrainsDeliveryHTTP2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainsDeliveryHTTP2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainsDeliveryUnion2Type string

const (
	GetDrainsDeliveryUnion2TypeGetDrainsDeliveryHTTP2               GetDrainsDeliveryUnion2Type = "getDrains_delivery_HTTP_2"
	GetDrainsDeliveryUnion2TypeGetDrainsDeliveryOtlphttp2           GetDrainsDeliveryUnion2Type = "getDrains_delivery_Otlphttp_2"
	GetDrainsDeliveryUnion2TypeGetDrainsDeliverySyslog2             GetDrainsDeliveryUnion2Type = "getDrains_delivery_Syslog_2"
	GetDrainsDeliveryUnion2TypeGetDrainsDeliveryClickhouse2         GetDrainsDeliveryUnion2Type = "getDrains_delivery_Clickhouse_2"
	GetDrainsDeliveryUnion2TypeGetDrainsDeliveryVercelOtelTracesDb2 GetDrainsDeliveryUnion2Type = "getDrains_delivery_VercelOtelTracesDb_2"
)

type GetDrainsDeliveryUnion2 struct {
	GetDrainsDeliveryHTTP2               *GetDrainsDeliveryHTTP2               `queryParam:"inline"`
	GetDrainsDeliveryOtlphttp2           *GetDrainsDeliveryOtlphttp2           `queryParam:"inline"`
	GetDrainsDeliverySyslog2             *GetDrainsDeliverySyslog2             `queryParam:"inline"`
	GetDrainsDeliveryClickhouse2         *GetDrainsDeliveryClickhouse2         `queryParam:"inline"`
	GetDrainsDeliveryVercelOtelTracesDb2 *GetDrainsDeliveryVercelOtelTracesDb2 `queryParam:"inline"`

	Type GetDrainsDeliveryUnion2Type
}

func CreateGetDrainsDeliveryUnion2GetDrainsDeliveryHTTP2(getDrainsDeliveryHTTP2 GetDrainsDeliveryHTTP2) GetDrainsDeliveryUnion2 {
	typ := GetDrainsDeliveryUnion2TypeGetDrainsDeliveryHTTP2

	return GetDrainsDeliveryUnion2{
		GetDrainsDeliveryHTTP2: &getDrainsDeliveryHTTP2,
		Type:                   typ,
	}
}

func CreateGetDrainsDeliveryUnion2GetDrainsDeliveryOtlphttp2(getDrainsDeliveryOtlphttp2 GetDrainsDeliveryOtlphttp2) GetDrainsDeliveryUnion2 {
	typ := GetDrainsDeliveryUnion2TypeGetDrainsDeliveryOtlphttp2

	return GetDrainsDeliveryUnion2{
		GetDrainsDeliveryOtlphttp2: &getDrainsDeliveryOtlphttp2,
		Type:                       typ,
	}
}

func CreateGetDrainsDeliveryUnion2GetDrainsDeliverySyslog2(getDrainsDeliverySyslog2 GetDrainsDeliverySyslog2) GetDrainsDeliveryUnion2 {
	typ := GetDrainsDeliveryUnion2TypeGetDrainsDeliverySyslog2

	return GetDrainsDeliveryUnion2{
		GetDrainsDeliverySyslog2: &getDrainsDeliverySyslog2,
		Type:                     typ,
	}
}

func CreateGetDrainsDeliveryUnion2GetDrainsDeliveryClickhouse2(getDrainsDeliveryClickhouse2 GetDrainsDeliveryClickhouse2) GetDrainsDeliveryUnion2 {
	typ := GetDrainsDeliveryUnion2TypeGetDrainsDeliveryClickhouse2

	return GetDrainsDeliveryUnion2{
		GetDrainsDeliveryClickhouse2: &getDrainsDeliveryClickhouse2,
		Type:                         typ,
	}
}

func CreateGetDrainsDeliveryUnion2GetDrainsDeliveryVercelOtelTracesDb2(getDrainsDeliveryVercelOtelTracesDb2 GetDrainsDeliveryVercelOtelTracesDb2) GetDrainsDeliveryUnion2 {
	typ := GetDrainsDeliveryUnion2TypeGetDrainsDeliveryVercelOtelTracesDb2

	return GetDrainsDeliveryUnion2{
		GetDrainsDeliveryVercelOtelTracesDb2: &getDrainsDeliveryVercelOtelTracesDb2,
		Type:                                 typ,
	}
}

func (u *GetDrainsDeliveryUnion2) UnmarshalJSON(data []byte) error {

	var getDrainsDeliveryHTTP2 GetDrainsDeliveryHTTP2 = GetDrainsDeliveryHTTP2{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryHTTP2, "", true, nil); err == nil {
		u.GetDrainsDeliveryHTTP2 = &getDrainsDeliveryHTTP2
		u.Type = GetDrainsDeliveryUnion2TypeGetDrainsDeliveryHTTP2
		return nil
	}

	var getDrainsDeliveryOtlphttp2 GetDrainsDeliveryOtlphttp2 = GetDrainsDeliveryOtlphttp2{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryOtlphttp2, "", true, nil); err == nil {
		u.GetDrainsDeliveryOtlphttp2 = &getDrainsDeliveryOtlphttp2
		u.Type = GetDrainsDeliveryUnion2TypeGetDrainsDeliveryOtlphttp2
		return nil
	}

	var getDrainsDeliverySyslog2 GetDrainsDeliverySyslog2 = GetDrainsDeliverySyslog2{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliverySyslog2, "", true, nil); err == nil {
		u.GetDrainsDeliverySyslog2 = &getDrainsDeliverySyslog2
		u.Type = GetDrainsDeliveryUnion2TypeGetDrainsDeliverySyslog2
		return nil
	}

	var getDrainsDeliveryClickhouse2 GetDrainsDeliveryClickhouse2 = GetDrainsDeliveryClickhouse2{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryClickhouse2, "", true, nil); err == nil {
		u.GetDrainsDeliveryClickhouse2 = &getDrainsDeliveryClickhouse2
		u.Type = GetDrainsDeliveryUnion2TypeGetDrainsDeliveryClickhouse2
		return nil
	}

	var getDrainsDeliveryVercelOtelTracesDb2 GetDrainsDeliveryVercelOtelTracesDb2 = GetDrainsDeliveryVercelOtelTracesDb2{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryVercelOtelTracesDb2, "", true, nil); err == nil {
		u.GetDrainsDeliveryVercelOtelTracesDb2 = &getDrainsDeliveryVercelOtelTracesDb2
		u.Type = GetDrainsDeliveryUnion2TypeGetDrainsDeliveryVercelOtelTracesDb2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsDeliveryUnion2", string(data))
}

func (u GetDrainsDeliveryUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDrainsDeliveryHTTP2 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryHTTP2, "", true)
	}

	if u.GetDrainsDeliveryOtlphttp2 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryOtlphttp2, "", true)
	}

	if u.GetDrainsDeliverySyslog2 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliverySyslog2, "", true)
	}

	if u.GetDrainsDeliveryClickhouse2 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryClickhouse2, "", true)
	}

	if u.GetDrainsDeliveryVercelOtelTracesDb2 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryVercelOtelTracesDb2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsDeliveryUnion2: all fields are null")
}

type GetDrainsTypeHeadSampling2 string

const (
	GetDrainsTypeHeadSampling2HeadSampling GetDrainsTypeHeadSampling2 = "head_sampling"
)

func (e GetDrainsTypeHeadSampling2) ToPointer() *GetDrainsTypeHeadSampling2 {
	return &e
}
func (e *GetDrainsTypeHeadSampling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = GetDrainsTypeHeadSampling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeHeadSampling2: %v", v)
	}
}

type GetDrainsEnv2 string

const (
	GetDrainsEnv2Production GetDrainsEnv2 = "production"
	GetDrainsEnv2Preview    GetDrainsEnv2 = "preview"
)

func (e GetDrainsEnv2) ToPointer() *GetDrainsEnv2 {
	return &e
}
func (e *GetDrainsEnv2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetDrainsEnv2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsEnv2: %v", v)
	}
}

type GetDrainsSampling2 struct {
	Type        GetDrainsTypeHeadSampling2 `json:"type"`
	Rate        float64                    `json:"rate"`
	Env         *GetDrainsEnv2             `json:"env,omitempty"`
	RequestPath *string                    `json:"requestPath,omitempty"`
}

func (g GetDrainsSampling2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSampling2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSampling2) GetType() GetDrainsTypeHeadSampling2 {
	if o == nil {
		return GetDrainsTypeHeadSampling2("")
	}
	return o.Type
}

func (o *GetDrainsSampling2) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *GetDrainsSampling2) GetEnv() *GetDrainsEnv2 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetDrainsSampling2) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type GetDrainsStatus2 string

const (
	GetDrainsStatus2Enabled  GetDrainsStatus2 = "enabled"
	GetDrainsStatus2Disabled GetDrainsStatus2 = "disabled"
	GetDrainsStatus2Errored  GetDrainsStatus2 = "errored"
)

func (e GetDrainsStatus2) ToPointer() *GetDrainsStatus2 {
	return &e
}
func (e *GetDrainsStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetDrainsStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsStatus2: %v", v)
	}
}

type GetDrainsDisabledReason2 string

const (
	GetDrainsDisabledReason2DisabledByOwner      GetDrainsDisabledReason2 = "disabled-by-owner"
	GetDrainsDisabledReason2FeatureNotAvailable  GetDrainsDisabledReason2 = "feature-not-available"
	GetDrainsDisabledReason2AccountPlanDowngrade GetDrainsDisabledReason2 = "account-plan-downgrade"
	GetDrainsDisabledReason2DisabledByAdmin      GetDrainsDisabledReason2 = "disabled-by-admin"
)

func (e GetDrainsDisabledReason2) ToPointer() *GetDrainsDisabledReason2 {
	return &e
}
func (e *GetDrainsDisabledReason2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = GetDrainsDisabledReason2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsDisabledReason2: %v", v)
	}
}

type GetDrainsKindIntegration2 string

const (
	GetDrainsKindIntegration2Integration GetDrainsKindIntegration2 = "integration"
)

func (e GetDrainsKindIntegration2) ToPointer() *GetDrainsKindIntegration2 {
	return &e
}
func (e *GetDrainsKindIntegration2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = GetDrainsKindIntegration2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsKindIntegration2: %v", v)
	}
}

type GetDrainsSourceIntegration2 struct {
	Kind                       GetDrainsKindIntegration2 `json:"kind"`
	ResourceID                 *string                   `json:"resourceId,omitempty"`
	ExternalResourceID         *string                   `json:"externalResourceId,omitempty"`
	IntegrationID              string                    `json:"integrationId"`
	IntegrationConfigurationID string                    `json:"integrationConfigurationId"`
}

func (g GetDrainsSourceIntegration2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSourceIntegration2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSourceIntegration2) GetKind() GetDrainsKindIntegration2 {
	if o == nil {
		return GetDrainsKindIntegration2("")
	}
	return o.Kind
}

func (o *GetDrainsSourceIntegration2) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *GetDrainsSourceIntegration2) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *GetDrainsSourceIntegration2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetDrainsSourceIntegration2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetDrainsKindSelfServed2 string

const (
	GetDrainsKindSelfServed2SelfServed GetDrainsKindSelfServed2 = "self-served"
)

func (e GetDrainsKindSelfServed2) ToPointer() *GetDrainsKindSelfServed2 {
	return &e
}
func (e *GetDrainsKindSelfServed2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetDrainsKindSelfServed2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsKindSelfServed2: %v", v)
	}
}

type GetDrainsSourceSelfServed2 struct {
	Kind GetDrainsKindSelfServed2 `json:"kind"`
}

func (g GetDrainsSourceSelfServed2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSourceSelfServed2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSourceSelfServed2) GetKind() GetDrainsKindSelfServed2 {
	if o == nil {
		return GetDrainsKindSelfServed2("")
	}
	return o.Kind
}

type GetDrainsSourceUnion2Type string

const (
	GetDrainsSourceUnion2TypeGetDrainsSourceSelfServed2  GetDrainsSourceUnion2Type = "getDrains_source_SelfServed_2"
	GetDrainsSourceUnion2TypeGetDrainsSourceIntegration2 GetDrainsSourceUnion2Type = "getDrains_source_Integration_2"
)

type GetDrainsSourceUnion2 struct {
	GetDrainsSourceSelfServed2  *GetDrainsSourceSelfServed2  `queryParam:"inline"`
	GetDrainsSourceIntegration2 *GetDrainsSourceIntegration2 `queryParam:"inline"`

	Type GetDrainsSourceUnion2Type
}

func CreateGetDrainsSourceUnion2GetDrainsSourceSelfServed2(getDrainsSourceSelfServed2 GetDrainsSourceSelfServed2) GetDrainsSourceUnion2 {
	typ := GetDrainsSourceUnion2TypeGetDrainsSourceSelfServed2

	return GetDrainsSourceUnion2{
		GetDrainsSourceSelfServed2: &getDrainsSourceSelfServed2,
		Type:                       typ,
	}
}

func CreateGetDrainsSourceUnion2GetDrainsSourceIntegration2(getDrainsSourceIntegration2 GetDrainsSourceIntegration2) GetDrainsSourceUnion2 {
	typ := GetDrainsSourceUnion2TypeGetDrainsSourceIntegration2

	return GetDrainsSourceUnion2{
		GetDrainsSourceIntegration2: &getDrainsSourceIntegration2,
		Type:                        typ,
	}
}

func (u *GetDrainsSourceUnion2) UnmarshalJSON(data []byte) error {

	var getDrainsSourceIntegration2 GetDrainsSourceIntegration2 = GetDrainsSourceIntegration2{}
	if err := utils.UnmarshalJSON(data, &getDrainsSourceIntegration2, "", true, nil); err == nil {
		u.GetDrainsSourceIntegration2 = &getDrainsSourceIntegration2
		u.Type = GetDrainsSourceUnion2TypeGetDrainsSourceIntegration2
		return nil
	}

	var getDrainsSourceSelfServed2 GetDrainsSourceSelfServed2 = GetDrainsSourceSelfServed2{}
	if err := utils.UnmarshalJSON(data, &getDrainsSourceSelfServed2, "", true, nil); err == nil {
		u.GetDrainsSourceSelfServed2 = &getDrainsSourceSelfServed2
		u.Type = GetDrainsSourceUnion2TypeGetDrainsSourceSelfServed2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsSourceUnion2", string(data))
}

func (u GetDrainsSourceUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDrainsSourceSelfServed2 != nil {
		return utils.MarshalJSON(u.GetDrainsSourceSelfServed2, "", true)
	}

	if u.GetDrainsSourceIntegration2 != nil {
		return utils.MarshalJSON(u.GetDrainsSourceIntegration2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsSourceUnion2: all fields are null")
}

type GetDrainsVersionV22 string

const (
	GetDrainsVersionV22V2 GetDrainsVersionV22 = "v2"
)

func (e GetDrainsVersionV22) ToPointer() *GetDrainsVersionV22 {
	return &e
}
func (e *GetDrainsVersionV22) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = GetDrainsVersionV22(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsVersionV22: %v", v)
	}
}

type GetDrainsTypeOdata2 string

const (
	GetDrainsTypeOdata2Odata GetDrainsTypeOdata2 = "odata"
)

func (e GetDrainsTypeOdata2) ToPointer() *GetDrainsTypeOdata2 {
	return &e
}
func (e *GetDrainsTypeOdata2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = GetDrainsTypeOdata2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeOdata2: %v", v)
	}
}

type GetDrainsFilterOdata2 struct {
	Type GetDrainsTypeOdata2 `json:"type"`
	Text string              `json:"text"`
}

func (g GetDrainsFilterOdata2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterOdata2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterOdata2) GetType() GetDrainsTypeOdata2 {
	if o == nil {
		return GetDrainsTypeOdata2("")
	}
	return o.Type
}

func (o *GetDrainsFilterOdata2) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type GetDrainsTypeBasic2 string

const (
	GetDrainsTypeBasic2Basic GetDrainsTypeBasic2 = "basic"
)

func (e GetDrainsTypeBasic2) ToPointer() *GetDrainsTypeBasic2 {
	return &e
}
func (e *GetDrainsTypeBasic2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = GetDrainsTypeBasic2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeBasic2: %v", v)
	}
}

type GetDrainsProject2 struct {
	Ids []string `json:"ids,omitempty"`
}

func (g GetDrainsProject2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsProject2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsProject2) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type GetDrainsFilterV2Log2 struct {
	Sources []string `json:"sources,omitempty"`
}

func (g GetDrainsFilterV2Log2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterV2Log2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterV2Log2) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type GetDrainsDeployment2 struct {
	Environments []string `json:"environments,omitempty"`
}

func (g GetDrainsDeployment2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeployment2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeployment2) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type GetDrainsFilterBasic2 struct {
	Type       GetDrainsTypeBasic2    `json:"type"`
	Project    *GetDrainsProject2     `json:"project,omitempty"`
	Log        *GetDrainsFilterV2Log2 `json:"log,omitempty"`
	Deployment *GetDrainsDeployment2  `json:"deployment,omitempty"`
}

func (g GetDrainsFilterBasic2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterBasic2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterBasic2) GetType() GetDrainsTypeBasic2 {
	if o == nil {
		return GetDrainsTypeBasic2("")
	}
	return o.Type
}

func (o *GetDrainsFilterBasic2) GetProject() *GetDrainsProject2 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDrainsFilterBasic2) GetLog() *GetDrainsFilterV2Log2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainsFilterBasic2) GetDeployment() *GetDrainsDeployment2 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type GetDrainsFilterUnion2Type string

const (
	GetDrainsFilterUnion2TypeGetDrainsFilterBasic2 GetDrainsFilterUnion2Type = "getDrains_filter_Basic_2"
	GetDrainsFilterUnion2TypeGetDrainsFilterOdata2 GetDrainsFilterUnion2Type = "getDrains_filter_Odata_2"
)

type GetDrainsFilterUnion2 struct {
	GetDrainsFilterBasic2 *GetDrainsFilterBasic2 `queryParam:"inline"`
	GetDrainsFilterOdata2 *GetDrainsFilterOdata2 `queryParam:"inline"`

	Type GetDrainsFilterUnion2Type
}

func CreateGetDrainsFilterUnion2GetDrainsFilterBasic2(getDrainsFilterBasic2 GetDrainsFilterBasic2) GetDrainsFilterUnion2 {
	typ := GetDrainsFilterUnion2TypeGetDrainsFilterBasic2

	return GetDrainsFilterUnion2{
		GetDrainsFilterBasic2: &getDrainsFilterBasic2,
		Type:                  typ,
	}
}

func CreateGetDrainsFilterUnion2GetDrainsFilterOdata2(getDrainsFilterOdata2 GetDrainsFilterOdata2) GetDrainsFilterUnion2 {
	typ := GetDrainsFilterUnion2TypeGetDrainsFilterOdata2

	return GetDrainsFilterUnion2{
		GetDrainsFilterOdata2: &getDrainsFilterOdata2,
		Type:                  typ,
	}
}

func (u *GetDrainsFilterUnion2) UnmarshalJSON(data []byte) error {

	var getDrainsFilterOdata2 GetDrainsFilterOdata2 = GetDrainsFilterOdata2{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterOdata2, "", true, nil); err == nil {
		u.GetDrainsFilterOdata2 = &getDrainsFilterOdata2
		u.Type = GetDrainsFilterUnion2TypeGetDrainsFilterOdata2
		return nil
	}

	var getDrainsFilterBasic2 GetDrainsFilterBasic2 = GetDrainsFilterBasic2{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterBasic2, "", true, nil); err == nil {
		u.GetDrainsFilterBasic2 = &getDrainsFilterBasic2
		u.Type = GetDrainsFilterUnion2TypeGetDrainsFilterBasic2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsFilterUnion2", string(data))
}

func (u GetDrainsFilterUnion2) MarshalJSON() ([]byte, error) {
	if u.GetDrainsFilterBasic2 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterBasic2, "", true)
	}

	if u.GetDrainsFilterOdata2 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterOdata2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsFilterUnion2: all fields are null")
}

type GetDrainsFilterV2V22 struct {
	Version GetDrainsVersionV22   `json:"version"`
	Filter  GetDrainsFilterUnion2 `json:"filter"`
}

func (g GetDrainsFilterV2V22) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterV2V22) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterV2V22) GetVersion() GetDrainsVersionV22 {
	if o == nil {
		return GetDrainsVersionV22("")
	}
	return o.Version
}

func (o *GetDrainsFilterV2V22) GetFilter() GetDrainsFilterUnion2 {
	if o == nil {
		return GetDrainsFilterUnion2{}
	}
	return o.Filter
}

type GetDrainsVersionV12 string

const (
	GetDrainsVersionV12V1 GetDrainsVersionV12 = "v1"
)

func (e GetDrainsVersionV12) ToPointer() *GetDrainsVersionV12 {
	return &e
}
func (e *GetDrainsVersionV12) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = GetDrainsVersionV12(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsVersionV12: %v", v)
	}
}

type GetDrainsFilterV2V12 struct {
	Version GetDrainsVersionV12 `json:"version"`
}

func (g GetDrainsFilterV2V12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterV2V12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterV2V12) GetVersion() GetDrainsVersionV12 {
	if o == nil {
		return GetDrainsVersionV12("")
	}
	return o.Version
}

type GetDrainsFilterV2Union2Type string

const (
	GetDrainsFilterV2Union2TypeGetDrainsFilterV2V12 GetDrainsFilterV2Union2Type = "getDrains_filterV2_V1_2"
	GetDrainsFilterV2Union2TypeGetDrainsFilterV2V22 GetDrainsFilterV2Union2Type = "getDrains_filterV2_V2_2"
)

type GetDrainsFilterV2Union2 struct {
	GetDrainsFilterV2V12 *GetDrainsFilterV2V12 `queryParam:"inline"`
	GetDrainsFilterV2V22 *GetDrainsFilterV2V22 `queryParam:"inline"`

	Type GetDrainsFilterV2Union2Type
}

func CreateGetDrainsFilterV2Union2GetDrainsFilterV2V12(getDrainsFilterV2V12 GetDrainsFilterV2V12) GetDrainsFilterV2Union2 {
	typ := GetDrainsFilterV2Union2TypeGetDrainsFilterV2V12

	return GetDrainsFilterV2Union2{
		GetDrainsFilterV2V12: &getDrainsFilterV2V12,
		Type:                 typ,
	}
}

func CreateGetDrainsFilterV2Union2GetDrainsFilterV2V22(getDrainsFilterV2V22 GetDrainsFilterV2V22) GetDrainsFilterV2Union2 {
	typ := GetDrainsFilterV2Union2TypeGetDrainsFilterV2V22

	return GetDrainsFilterV2Union2{
		GetDrainsFilterV2V22: &getDrainsFilterV2V22,
		Type:                 typ,
	}
}

func (u *GetDrainsFilterV2Union2) UnmarshalJSON(data []byte) error {

	var getDrainsFilterV2V22 GetDrainsFilterV2V22 = GetDrainsFilterV2V22{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterV2V22, "", true, nil); err == nil {
		u.GetDrainsFilterV2V22 = &getDrainsFilterV2V22
		u.Type = GetDrainsFilterV2Union2TypeGetDrainsFilterV2V22
		return nil
	}

	var getDrainsFilterV2V12 GetDrainsFilterV2V12 = GetDrainsFilterV2V12{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterV2V12, "", true, nil); err == nil {
		u.GetDrainsFilterV2V12 = &getDrainsFilterV2V12
		u.Type = GetDrainsFilterV2Union2TypeGetDrainsFilterV2V12
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsFilterV2Union2", string(data))
}

func (u GetDrainsFilterV2Union2) MarshalJSON() ([]byte, error) {
	if u.GetDrainsFilterV2V12 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterV2V12, "", true)
	}

	if u.GetDrainsFilterV2V22 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterV2V22, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsFilterV2Union2: all fields are null")
}

type GetDrainsFramework string

const (
	GetDrainsFrameworkBlitzjs        GetDrainsFramework = "blitzjs"
	GetDrainsFrameworkNextjs         GetDrainsFramework = "nextjs"
	GetDrainsFrameworkGatsby         GetDrainsFramework = "gatsby"
	GetDrainsFrameworkRemix          GetDrainsFramework = "remix"
	GetDrainsFrameworkReactRouter    GetDrainsFramework = "react-router"
	GetDrainsFrameworkAstro          GetDrainsFramework = "astro"
	GetDrainsFrameworkHexo           GetDrainsFramework = "hexo"
	GetDrainsFrameworkEleventy       GetDrainsFramework = "eleventy"
	GetDrainsFrameworkDocusaurus2    GetDrainsFramework = "docusaurus-2"
	GetDrainsFrameworkDocusaurus     GetDrainsFramework = "docusaurus"
	GetDrainsFrameworkPreact         GetDrainsFramework = "preact"
	GetDrainsFrameworkSolidstart1    GetDrainsFramework = "solidstart-1"
	GetDrainsFrameworkSolidstart     GetDrainsFramework = "solidstart"
	GetDrainsFrameworkDojo           GetDrainsFramework = "dojo"
	GetDrainsFrameworkEmber          GetDrainsFramework = "ember"
	GetDrainsFrameworkVue            GetDrainsFramework = "vue"
	GetDrainsFrameworkScully         GetDrainsFramework = "scully"
	GetDrainsFrameworkIonicAngular   GetDrainsFramework = "ionic-angular"
	GetDrainsFrameworkAngular        GetDrainsFramework = "angular"
	GetDrainsFrameworkPolymer        GetDrainsFramework = "polymer"
	GetDrainsFrameworkSvelte         GetDrainsFramework = "svelte"
	GetDrainsFrameworkSveltekit      GetDrainsFramework = "sveltekit"
	GetDrainsFrameworkSveltekit1     GetDrainsFramework = "sveltekit-1"
	GetDrainsFrameworkIonicReact     GetDrainsFramework = "ionic-react"
	GetDrainsFrameworkCreateReactApp GetDrainsFramework = "create-react-app"
	GetDrainsFrameworkGridsome       GetDrainsFramework = "gridsome"
	GetDrainsFrameworkUmijs          GetDrainsFramework = "umijs"
	GetDrainsFrameworkSapper         GetDrainsFramework = "sapper"
	GetDrainsFrameworkSaber          GetDrainsFramework = "saber"
	GetDrainsFrameworkStencil        GetDrainsFramework = "stencil"
	GetDrainsFrameworkNuxtjs         GetDrainsFramework = "nuxtjs"
	GetDrainsFrameworkRedwoodjs      GetDrainsFramework = "redwoodjs"
	GetDrainsFrameworkHugo           GetDrainsFramework = "hugo"
	GetDrainsFrameworkJekyll         GetDrainsFramework = "jekyll"
	GetDrainsFrameworkBrunch         GetDrainsFramework = "brunch"
	GetDrainsFrameworkMiddleman      GetDrainsFramework = "middleman"
	GetDrainsFrameworkZola           GetDrainsFramework = "zola"
	GetDrainsFrameworkHydrogen       GetDrainsFramework = "hydrogen"
	GetDrainsFrameworkVite           GetDrainsFramework = "vite"
	GetDrainsFrameworkVitepress      GetDrainsFramework = "vitepress"
	GetDrainsFrameworkVuepress       GetDrainsFramework = "vuepress"
	GetDrainsFrameworkParcel         GetDrainsFramework = "parcel"
	GetDrainsFrameworkFastapi        GetDrainsFramework = "fastapi"
	GetDrainsFrameworkFlask          GetDrainsFramework = "flask"
	GetDrainsFrameworkFasthtml       GetDrainsFramework = "fasthtml"
	GetDrainsFrameworkSanityV3       GetDrainsFramework = "sanity-v3"
	GetDrainsFrameworkSanity         GetDrainsFramework = "sanity"
	GetDrainsFrameworkStorybook      GetDrainsFramework = "storybook"
	GetDrainsFrameworkNitro          GetDrainsFramework = "nitro"
	GetDrainsFrameworkHono           GetDrainsFramework = "hono"
	GetDrainsFrameworkExpress        GetDrainsFramework = "express"
	GetDrainsFrameworkH3             GetDrainsFramework = "h3"
	GetDrainsFrameworkNestjs         GetDrainsFramework = "nestjs"
	GetDrainsFrameworkFastify        GetDrainsFramework = "fastify"
	GetDrainsFrameworkXmcp           GetDrainsFramework = "xmcp"
)

func (e GetDrainsFramework) ToPointer() *GetDrainsFramework {
	return &e
}
func (e *GetDrainsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fastapi":
		fallthrough
	case "flask":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		fallthrough
	case "nitro":
		fallthrough
	case "hono":
		fallthrough
	case "express":
		fallthrough
	case "h3":
		fallthrough
	case "nestjs":
		fallthrough
	case "fastify":
		fallthrough
	case "xmcp":
		*e = GetDrainsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsFramework: %v", v)
	}
}

type GetDrainsProjectsMetadatum struct {
	ID               string              `json:"id"`
	Name             string              `json:"name"`
	Framework        *GetDrainsFramework `json:"framework,omitempty"`
	LatestDeployment *string             `json:"latestDeployment,omitempty"`
}

func (g GetDrainsProjectsMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsProjectsMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"id", "name"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsProjectsMetadatum) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetDrainsProjectsMetadatum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetDrainsProjectsMetadatum) GetFramework() *GetDrainsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetDrainsProjectsMetadatum) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

type DrainsGetDrains2 struct {
	ID                          string                       `json:"id"`
	OwnerID                     string                       `json:"ownerId"`
	Name                        string                       `json:"name"`
	CreatedAt                   float64                      `json:"createdAt"`
	CreatedFrom                 *GetDrainsCreatedFrom2       `json:"createdFrom,omitempty"`
	UpdatedAt                   float64                      `json:"updatedAt"`
	ProjectIds                  []string                     `json:"projectIds,omitempty"`
	Schemas                     *GetDrainsSchemas2           `json:"schemas,omitempty"`
	Delivery                    *GetDrainsDeliveryUnion2     `json:"delivery,omitempty"`
	Sampling                    []GetDrainsSampling2         `json:"sampling,omitempty"`
	TeamID                      *string                      `json:"teamId,omitempty"`
	Status                      *GetDrainsStatus2            `json:"status,omitempty"`
	DisabledAt                  *float64                     `json:"disabledAt,omitempty"`
	DisabledReason              *GetDrainsDisabledReason2    `json:"disabledReason,omitempty"`
	DisabledBy                  *string                      `json:"disabledBy,omitempty"`
	FirstErrorTimestamp         *float64                     `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID             *string                      `json:"configurationId,omitempty"`
	ClientID                    *string                      `json:"clientId,omitempty"`
	Source                      GetDrainsSourceUnion2        `json:"source"`
	Filter                      *string                      `json:"filter,omitempty"`
	FilterV2                    *GetDrainsFilterV2Union2     `json:"filterV2,omitempty"`
	IntegrationIcon             *string                      `json:"integrationIcon,omitempty"`
	IntegrationConfigurationURI *string                      `json:"integrationConfigurationUri,omitempty"`
	IntegrationWebsite          *string                      `json:"integrationWebsite,omitempty"`
	ProjectsMetadata            []GetDrainsProjectsMetadatum `json:"projectsMetadata,omitempty"`
}

func (d DrainsGetDrains2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DrainsGetDrains2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *DrainsGetDrains2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DrainsGetDrains2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *DrainsGetDrains2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DrainsGetDrains2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *DrainsGetDrains2) GetCreatedFrom() *GetDrainsCreatedFrom2 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *DrainsGetDrains2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *DrainsGetDrains2) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *DrainsGetDrains2) GetSchemas() *GetDrainsSchemas2 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *DrainsGetDrains2) GetDelivery() *GetDrainsDeliveryUnion2 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *DrainsGetDrains2) GetSampling() []GetDrainsSampling2 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *DrainsGetDrains2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *DrainsGetDrains2) GetStatus() *GetDrainsStatus2 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DrainsGetDrains2) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *DrainsGetDrains2) GetDisabledReason() *GetDrainsDisabledReason2 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *DrainsGetDrains2) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *DrainsGetDrains2) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *DrainsGetDrains2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *DrainsGetDrains2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *DrainsGetDrains2) GetSource() GetDrainsSourceUnion2 {
	if o == nil {
		return GetDrainsSourceUnion2{}
	}
	return o.Source
}

func (o *DrainsGetDrains2) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *DrainsGetDrains2) GetFilterV2() *GetDrainsFilterV2Union2 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

func (o *DrainsGetDrains2) GetIntegrationIcon() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIcon
}

func (o *DrainsGetDrains2) GetIntegrationConfigurationURI() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationURI
}

func (o *DrainsGetDrains2) GetIntegrationWebsite() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationWebsite
}

func (o *DrainsGetDrains2) GetProjectsMetadata() []GetDrainsProjectsMetadatum {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

type GetDrainsCreatedFrom1 string

const (
	GetDrainsCreatedFrom1SelfServed  GetDrainsCreatedFrom1 = "self-served"
	GetDrainsCreatedFrom1Integration GetDrainsCreatedFrom1 = "integration"
)

func (e GetDrainsCreatedFrom1) ToPointer() *GetDrainsCreatedFrom1 {
	return &e
}
func (e *GetDrainsCreatedFrom1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = GetDrainsCreatedFrom1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsCreatedFrom1: %v", v)
	}
}

type GetDrainsSchemasLog1 struct {
}

func (g GetDrainsSchemasLog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSchemasLog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsTrace1 struct {
}

func (g GetDrainsTrace1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsTrace1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsAnalytics1 struct {
}

func (g GetDrainsAnalytics1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsAnalytics1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsSpeedInsights1 struct {
}

func (g GetDrainsSpeedInsights1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSpeedInsights1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

type GetDrainsSchemas1 struct {
	Log           *GetDrainsSchemasLog1    `json:"log,omitempty"`
	Trace         *GetDrainsTrace1         `json:"trace,omitempty"`
	Analytics     *GetDrainsAnalytics1     `json:"analytics,omitempty"`
	SpeedInsights *GetDrainsSpeedInsights1 `json:"speed_insights,omitempty"`
}

func (g GetDrainsSchemas1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSchemas1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSchemas1) GetLog() *GetDrainsSchemasLog1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainsSchemas1) GetTrace() *GetDrainsTrace1 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *GetDrainsSchemas1) GetAnalytics() *GetDrainsAnalytics1 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetDrainsSchemas1) GetSpeedInsights() *GetDrainsSpeedInsights1 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type GetDrainsTypeInternal1 string

const (
	GetDrainsTypeInternal1Internal GetDrainsTypeInternal1 = "internal"
)

func (e GetDrainsTypeInternal1) ToPointer() *GetDrainsTypeInternal1 {
	return &e
}
func (e *GetDrainsTypeInternal1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = GetDrainsTypeInternal1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeInternal1: %v", v)
	}
}

type GetDrainsTarget1 string

const (
	GetDrainsTarget1VercelOtelTracesDb GetDrainsTarget1 = "vercel-otel-traces-db"
)

func (e GetDrainsTarget1) ToPointer() *GetDrainsTarget1 {
	return &e
}
func (e *GetDrainsTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = GetDrainsTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTarget1: %v", v)
	}
}

type GetDrainsDeliveryVercelOtelTracesDb1 struct {
	Type   GetDrainsTypeInternal1 `json:"type"`
	Target GetDrainsTarget1       `json:"target"`
}

func (g GetDrainsDeliveryVercelOtelTracesDb1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryVercelOtelTracesDb1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryVercelOtelTracesDb1) GetType() GetDrainsTypeInternal1 {
	if o == nil {
		return GetDrainsTypeInternal1("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryVercelOtelTracesDb1) GetTarget() GetDrainsTarget1 {
	if o == nil {
		return GetDrainsTarget1("")
	}
	return o.Target
}

type GetDrainsTypeClickhouse1 string

const (
	GetDrainsTypeClickhouse1Clickhouse GetDrainsTypeClickhouse1 = "clickhouse"
)

func (e GetDrainsTypeClickhouse1) ToPointer() *GetDrainsTypeClickhouse1 {
	return &e
}
func (e *GetDrainsTypeClickhouse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = GetDrainsTypeClickhouse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeClickhouse1: %v", v)
	}
}

type GetDrainsDeliveryClickhouse1 struct {
	Type     GetDrainsTypeClickhouse1 `json:"type"`
	Endpoint string                   `json:"endpoint"`
	Table    string                   `json:"table"`
}

func (g GetDrainsDeliveryClickhouse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryClickhouse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryClickhouse1) GetType() GetDrainsTypeClickhouse1 {
	if o == nil {
		return GetDrainsTypeClickhouse1("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryClickhouse1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainsDeliveryClickhouse1) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type GetDrainsTypeSyslog1 string

const (
	GetDrainsTypeSyslog1Syslog GetDrainsTypeSyslog1 = "syslog"
)

func (e GetDrainsTypeSyslog1) ToPointer() *GetDrainsTypeSyslog1 {
	return &e
}
func (e *GetDrainsTypeSyslog1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = GetDrainsTypeSyslog1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeSyslog1: %v", v)
	}
}

type GetDrainsDeliverySyslog1 struct {
	Type     GetDrainsTypeSyslog1 `json:"type"`
	Endpoint string               `json:"endpoint"`
	Secret   string               `json:"secret"`
}

func (g GetDrainsDeliverySyslog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliverySyslog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliverySyslog1) GetType() GetDrainsTypeSyslog1 {
	if o == nil {
		return GetDrainsTypeSyslog1("")
	}
	return o.Type
}

func (o *GetDrainsDeliverySyslog1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainsDeliverySyslog1) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type GetDrainsTypeOtlphttp1 string

const (
	GetDrainsTypeOtlphttp1Otlphttp GetDrainsTypeOtlphttp1 = "otlphttp"
)

func (e GetDrainsTypeOtlphttp1) ToPointer() *GetDrainsTypeOtlphttp1 {
	return &e
}
func (e *GetDrainsTypeOtlphttp1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = GetDrainsTypeOtlphttp1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeOtlphttp1: %v", v)
	}
}

type GetDrainsEndpoint1 struct {
	Traces string `json:"traces"`
}

func (g GetDrainsEndpoint1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsEndpoint1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsEndpoint1) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type GetDrainsEncoding2 string

const (
	GetDrainsEncoding2JSON  GetDrainsEncoding2 = "json"
	GetDrainsEncoding2Proto GetDrainsEncoding2 = "proto"
)

func (e GetDrainsEncoding2) ToPointer() *GetDrainsEncoding2 {
	return &e
}
func (e *GetDrainsEncoding2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = GetDrainsEncoding2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsEncoding2: %v", v)
	}
}

type GetDrainsDeliveryOtlphttp1 struct {
	Type     GetDrainsTypeOtlphttp1 `json:"type"`
	Endpoint GetDrainsEndpoint1     `json:"endpoint"`
	Encoding GetDrainsEncoding2     `json:"encoding"`
	Headers  map[string]string      `json:"headers"`
	Secret   *string                `json:"secret,omitempty"`
}

func (g GetDrainsDeliveryOtlphttp1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryOtlphttp1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryOtlphttp1) GetType() GetDrainsTypeOtlphttp1 {
	if o == nil {
		return GetDrainsTypeOtlphttp1("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryOtlphttp1) GetEndpoint() GetDrainsEndpoint1 {
	if o == nil {
		return GetDrainsEndpoint1{}
	}
	return o.Endpoint
}

func (o *GetDrainsDeliveryOtlphttp1) GetEncoding() GetDrainsEncoding2 {
	if o == nil {
		return GetDrainsEncoding2("")
	}
	return o.Encoding
}

func (o *GetDrainsDeliveryOtlphttp1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainsDeliveryOtlphttp1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainsTypeHTTP1 string

const (
	GetDrainsTypeHTTP1HTTP GetDrainsTypeHTTP1 = "http"
)

func (e GetDrainsTypeHTTP1) ToPointer() *GetDrainsTypeHTTP1 {
	return &e
}
func (e *GetDrainsTypeHTTP1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = GetDrainsTypeHTTP1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeHTTP1: %v", v)
	}
}

type GetDrainsEncoding1 string

const (
	GetDrainsEncoding1JSON   GetDrainsEncoding1 = "json"
	GetDrainsEncoding1Ndjson GetDrainsEncoding1 = "ndjson"
)

func (e GetDrainsEncoding1) ToPointer() *GetDrainsEncoding1 {
	return &e
}
func (e *GetDrainsEncoding1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = GetDrainsEncoding1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsEncoding1: %v", v)
	}
}

type GetDrainsCompression1 string

const (
	GetDrainsCompression1Gzip GetDrainsCompression1 = "gzip"
	GetDrainsCompression1None GetDrainsCompression1 = "none"
)

func (e GetDrainsCompression1) ToPointer() *GetDrainsCompression1 {
	return &e
}
func (e *GetDrainsCompression1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = GetDrainsCompression1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsCompression1: %v", v)
	}
}

type GetDrainsDeliveryHTTP1 struct {
	Type        GetDrainsTypeHTTP1     `json:"type"`
	Endpoint    string                 `json:"endpoint"`
	Encoding    GetDrainsEncoding1     `json:"encoding"`
	Compression *GetDrainsCompression1 `json:"compression,omitempty"`
	Headers     map[string]string      `json:"headers"`
	Secret      *string                `json:"secret,omitempty"`
}

func (g GetDrainsDeliveryHTTP1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeliveryHTTP1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeliveryHTTP1) GetType() GetDrainsTypeHTTP1 {
	if o == nil {
		return GetDrainsTypeHTTP1("")
	}
	return o.Type
}

func (o *GetDrainsDeliveryHTTP1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *GetDrainsDeliveryHTTP1) GetEncoding() GetDrainsEncoding1 {
	if o == nil {
		return GetDrainsEncoding1("")
	}
	return o.Encoding
}

func (o *GetDrainsDeliveryHTTP1) GetCompression() *GetDrainsCompression1 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *GetDrainsDeliveryHTTP1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *GetDrainsDeliveryHTTP1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type GetDrainsDeliveryUnion1Type string

const (
	GetDrainsDeliveryUnion1TypeGetDrainsDeliveryHTTP1               GetDrainsDeliveryUnion1Type = "getDrains_delivery_HTTP_1"
	GetDrainsDeliveryUnion1TypeGetDrainsDeliveryOtlphttp1           GetDrainsDeliveryUnion1Type = "getDrains_delivery_Otlphttp_1"
	GetDrainsDeliveryUnion1TypeGetDrainsDeliverySyslog1             GetDrainsDeliveryUnion1Type = "getDrains_delivery_Syslog_1"
	GetDrainsDeliveryUnion1TypeGetDrainsDeliveryClickhouse1         GetDrainsDeliveryUnion1Type = "getDrains_delivery_Clickhouse_1"
	GetDrainsDeliveryUnion1TypeGetDrainsDeliveryVercelOtelTracesDb1 GetDrainsDeliveryUnion1Type = "getDrains_delivery_VercelOtelTracesDb_1"
)

type GetDrainsDeliveryUnion1 struct {
	GetDrainsDeliveryHTTP1               *GetDrainsDeliveryHTTP1               `queryParam:"inline"`
	GetDrainsDeliveryOtlphttp1           *GetDrainsDeliveryOtlphttp1           `queryParam:"inline"`
	GetDrainsDeliverySyslog1             *GetDrainsDeliverySyslog1             `queryParam:"inline"`
	GetDrainsDeliveryClickhouse1         *GetDrainsDeliveryClickhouse1         `queryParam:"inline"`
	GetDrainsDeliveryVercelOtelTracesDb1 *GetDrainsDeliveryVercelOtelTracesDb1 `queryParam:"inline"`

	Type GetDrainsDeliveryUnion1Type
}

func CreateGetDrainsDeliveryUnion1GetDrainsDeliveryHTTP1(getDrainsDeliveryHTTP1 GetDrainsDeliveryHTTP1) GetDrainsDeliveryUnion1 {
	typ := GetDrainsDeliveryUnion1TypeGetDrainsDeliveryHTTP1

	return GetDrainsDeliveryUnion1{
		GetDrainsDeliveryHTTP1: &getDrainsDeliveryHTTP1,
		Type:                   typ,
	}
}

func CreateGetDrainsDeliveryUnion1GetDrainsDeliveryOtlphttp1(getDrainsDeliveryOtlphttp1 GetDrainsDeliveryOtlphttp1) GetDrainsDeliveryUnion1 {
	typ := GetDrainsDeliveryUnion1TypeGetDrainsDeliveryOtlphttp1

	return GetDrainsDeliveryUnion1{
		GetDrainsDeliveryOtlphttp1: &getDrainsDeliveryOtlphttp1,
		Type:                       typ,
	}
}

func CreateGetDrainsDeliveryUnion1GetDrainsDeliverySyslog1(getDrainsDeliverySyslog1 GetDrainsDeliverySyslog1) GetDrainsDeliveryUnion1 {
	typ := GetDrainsDeliveryUnion1TypeGetDrainsDeliverySyslog1

	return GetDrainsDeliveryUnion1{
		GetDrainsDeliverySyslog1: &getDrainsDeliverySyslog1,
		Type:                     typ,
	}
}

func CreateGetDrainsDeliveryUnion1GetDrainsDeliveryClickhouse1(getDrainsDeliveryClickhouse1 GetDrainsDeliveryClickhouse1) GetDrainsDeliveryUnion1 {
	typ := GetDrainsDeliveryUnion1TypeGetDrainsDeliveryClickhouse1

	return GetDrainsDeliveryUnion1{
		GetDrainsDeliveryClickhouse1: &getDrainsDeliveryClickhouse1,
		Type:                         typ,
	}
}

func CreateGetDrainsDeliveryUnion1GetDrainsDeliveryVercelOtelTracesDb1(getDrainsDeliveryVercelOtelTracesDb1 GetDrainsDeliveryVercelOtelTracesDb1) GetDrainsDeliveryUnion1 {
	typ := GetDrainsDeliveryUnion1TypeGetDrainsDeliveryVercelOtelTracesDb1

	return GetDrainsDeliveryUnion1{
		GetDrainsDeliveryVercelOtelTracesDb1: &getDrainsDeliveryVercelOtelTracesDb1,
		Type:                                 typ,
	}
}

func (u *GetDrainsDeliveryUnion1) UnmarshalJSON(data []byte) error {

	var getDrainsDeliveryHTTP1 GetDrainsDeliveryHTTP1 = GetDrainsDeliveryHTTP1{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryHTTP1, "", true, nil); err == nil {
		u.GetDrainsDeliveryHTTP1 = &getDrainsDeliveryHTTP1
		u.Type = GetDrainsDeliveryUnion1TypeGetDrainsDeliveryHTTP1
		return nil
	}

	var getDrainsDeliveryOtlphttp1 GetDrainsDeliveryOtlphttp1 = GetDrainsDeliveryOtlphttp1{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryOtlphttp1, "", true, nil); err == nil {
		u.GetDrainsDeliveryOtlphttp1 = &getDrainsDeliveryOtlphttp1
		u.Type = GetDrainsDeliveryUnion1TypeGetDrainsDeliveryOtlphttp1
		return nil
	}

	var getDrainsDeliverySyslog1 GetDrainsDeliverySyslog1 = GetDrainsDeliverySyslog1{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliverySyslog1, "", true, nil); err == nil {
		u.GetDrainsDeliverySyslog1 = &getDrainsDeliverySyslog1
		u.Type = GetDrainsDeliveryUnion1TypeGetDrainsDeliverySyslog1
		return nil
	}

	var getDrainsDeliveryClickhouse1 GetDrainsDeliveryClickhouse1 = GetDrainsDeliveryClickhouse1{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryClickhouse1, "", true, nil); err == nil {
		u.GetDrainsDeliveryClickhouse1 = &getDrainsDeliveryClickhouse1
		u.Type = GetDrainsDeliveryUnion1TypeGetDrainsDeliveryClickhouse1
		return nil
	}

	var getDrainsDeliveryVercelOtelTracesDb1 GetDrainsDeliveryVercelOtelTracesDb1 = GetDrainsDeliveryVercelOtelTracesDb1{}
	if err := utils.UnmarshalJSON(data, &getDrainsDeliveryVercelOtelTracesDb1, "", true, nil); err == nil {
		u.GetDrainsDeliveryVercelOtelTracesDb1 = &getDrainsDeliveryVercelOtelTracesDb1
		u.Type = GetDrainsDeliveryUnion1TypeGetDrainsDeliveryVercelOtelTracesDb1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsDeliveryUnion1", string(data))
}

func (u GetDrainsDeliveryUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDrainsDeliveryHTTP1 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryHTTP1, "", true)
	}

	if u.GetDrainsDeliveryOtlphttp1 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryOtlphttp1, "", true)
	}

	if u.GetDrainsDeliverySyslog1 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliverySyslog1, "", true)
	}

	if u.GetDrainsDeliveryClickhouse1 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryClickhouse1, "", true)
	}

	if u.GetDrainsDeliveryVercelOtelTracesDb1 != nil {
		return utils.MarshalJSON(u.GetDrainsDeliveryVercelOtelTracesDb1, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsDeliveryUnion1: all fields are null")
}

type GetDrainsTypeHeadSampling1 string

const (
	GetDrainsTypeHeadSampling1HeadSampling GetDrainsTypeHeadSampling1 = "head_sampling"
)

func (e GetDrainsTypeHeadSampling1) ToPointer() *GetDrainsTypeHeadSampling1 {
	return &e
}
func (e *GetDrainsTypeHeadSampling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = GetDrainsTypeHeadSampling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeHeadSampling1: %v", v)
	}
}

type GetDrainsEnv1 string

const (
	GetDrainsEnv1Production GetDrainsEnv1 = "production"
	GetDrainsEnv1Preview    GetDrainsEnv1 = "preview"
)

func (e GetDrainsEnv1) ToPointer() *GetDrainsEnv1 {
	return &e
}
func (e *GetDrainsEnv1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetDrainsEnv1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsEnv1: %v", v)
	}
}

type GetDrainsSampling1 struct {
	Type        GetDrainsTypeHeadSampling1 `json:"type"`
	Rate        float64                    `json:"rate"`
	Env         *GetDrainsEnv1             `json:"env,omitempty"`
	RequestPath *string                    `json:"requestPath,omitempty"`
}

func (g GetDrainsSampling1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSampling1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSampling1) GetType() GetDrainsTypeHeadSampling1 {
	if o == nil {
		return GetDrainsTypeHeadSampling1("")
	}
	return o.Type
}

func (o *GetDrainsSampling1) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *GetDrainsSampling1) GetEnv() *GetDrainsEnv1 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetDrainsSampling1) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type GetDrainsStatus1 string

const (
	GetDrainsStatus1Enabled  GetDrainsStatus1 = "enabled"
	GetDrainsStatus1Disabled GetDrainsStatus1 = "disabled"
	GetDrainsStatus1Errored  GetDrainsStatus1 = "errored"
)

func (e GetDrainsStatus1) ToPointer() *GetDrainsStatus1 {
	return &e
}
func (e *GetDrainsStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = GetDrainsStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsStatus1: %v", v)
	}
}

type GetDrainsDisabledReason1 string

const (
	GetDrainsDisabledReason1DisabledByOwner      GetDrainsDisabledReason1 = "disabled-by-owner"
	GetDrainsDisabledReason1FeatureNotAvailable  GetDrainsDisabledReason1 = "feature-not-available"
	GetDrainsDisabledReason1AccountPlanDowngrade GetDrainsDisabledReason1 = "account-plan-downgrade"
	GetDrainsDisabledReason1DisabledByAdmin      GetDrainsDisabledReason1 = "disabled-by-admin"
)

func (e GetDrainsDisabledReason1) ToPointer() *GetDrainsDisabledReason1 {
	return &e
}
func (e *GetDrainsDisabledReason1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = GetDrainsDisabledReason1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsDisabledReason1: %v", v)
	}
}

type GetDrainsKindIntegration1 string

const (
	GetDrainsKindIntegration1Integration GetDrainsKindIntegration1 = "integration"
)

func (e GetDrainsKindIntegration1) ToPointer() *GetDrainsKindIntegration1 {
	return &e
}
func (e *GetDrainsKindIntegration1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = GetDrainsKindIntegration1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsKindIntegration1: %v", v)
	}
}

type GetDrainsSourceIntegration1 struct {
	Kind                       GetDrainsKindIntegration1 `json:"kind"`
	ResourceID                 *string                   `json:"resourceId,omitempty"`
	ExternalResourceID         *string                   `json:"externalResourceId,omitempty"`
	IntegrationID              string                    `json:"integrationId"`
	IntegrationConfigurationID string                    `json:"integrationConfigurationId"`
}

func (g GetDrainsSourceIntegration1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSourceIntegration1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSourceIntegration1) GetKind() GetDrainsKindIntegration1 {
	if o == nil {
		return GetDrainsKindIntegration1("")
	}
	return o.Kind
}

func (o *GetDrainsSourceIntegration1) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *GetDrainsSourceIntegration1) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *GetDrainsSourceIntegration1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetDrainsSourceIntegration1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetDrainsKindSelfServed1 string

const (
	GetDrainsKindSelfServed1SelfServed GetDrainsKindSelfServed1 = "self-served"
)

func (e GetDrainsKindSelfServed1) ToPointer() *GetDrainsKindSelfServed1 {
	return &e
}
func (e *GetDrainsKindSelfServed1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = GetDrainsKindSelfServed1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsKindSelfServed1: %v", v)
	}
}

type GetDrainsSourceSelfServed1 struct {
	Kind GetDrainsKindSelfServed1 `json:"kind"`
}

func (g GetDrainsSourceSelfServed1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsSourceSelfServed1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsSourceSelfServed1) GetKind() GetDrainsKindSelfServed1 {
	if o == nil {
		return GetDrainsKindSelfServed1("")
	}
	return o.Kind
}

type GetDrainsSourceUnion1Type string

const (
	GetDrainsSourceUnion1TypeGetDrainsSourceSelfServed1  GetDrainsSourceUnion1Type = "getDrains_source_SelfServed_1"
	GetDrainsSourceUnion1TypeGetDrainsSourceIntegration1 GetDrainsSourceUnion1Type = "getDrains_source_Integration_1"
)

type GetDrainsSourceUnion1 struct {
	GetDrainsSourceSelfServed1  *GetDrainsSourceSelfServed1  `queryParam:"inline"`
	GetDrainsSourceIntegration1 *GetDrainsSourceIntegration1 `queryParam:"inline"`

	Type GetDrainsSourceUnion1Type
}

func CreateGetDrainsSourceUnion1GetDrainsSourceSelfServed1(getDrainsSourceSelfServed1 GetDrainsSourceSelfServed1) GetDrainsSourceUnion1 {
	typ := GetDrainsSourceUnion1TypeGetDrainsSourceSelfServed1

	return GetDrainsSourceUnion1{
		GetDrainsSourceSelfServed1: &getDrainsSourceSelfServed1,
		Type:                       typ,
	}
}

func CreateGetDrainsSourceUnion1GetDrainsSourceIntegration1(getDrainsSourceIntegration1 GetDrainsSourceIntegration1) GetDrainsSourceUnion1 {
	typ := GetDrainsSourceUnion1TypeGetDrainsSourceIntegration1

	return GetDrainsSourceUnion1{
		GetDrainsSourceIntegration1: &getDrainsSourceIntegration1,
		Type:                        typ,
	}
}

func (u *GetDrainsSourceUnion1) UnmarshalJSON(data []byte) error {

	var getDrainsSourceIntegration1 GetDrainsSourceIntegration1 = GetDrainsSourceIntegration1{}
	if err := utils.UnmarshalJSON(data, &getDrainsSourceIntegration1, "", true, nil); err == nil {
		u.GetDrainsSourceIntegration1 = &getDrainsSourceIntegration1
		u.Type = GetDrainsSourceUnion1TypeGetDrainsSourceIntegration1
		return nil
	}

	var getDrainsSourceSelfServed1 GetDrainsSourceSelfServed1 = GetDrainsSourceSelfServed1{}
	if err := utils.UnmarshalJSON(data, &getDrainsSourceSelfServed1, "", true, nil); err == nil {
		u.GetDrainsSourceSelfServed1 = &getDrainsSourceSelfServed1
		u.Type = GetDrainsSourceUnion1TypeGetDrainsSourceSelfServed1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsSourceUnion1", string(data))
}

func (u GetDrainsSourceUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDrainsSourceSelfServed1 != nil {
		return utils.MarshalJSON(u.GetDrainsSourceSelfServed1, "", true)
	}

	if u.GetDrainsSourceIntegration1 != nil {
		return utils.MarshalJSON(u.GetDrainsSourceIntegration1, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsSourceUnion1: all fields are null")
}

type GetDrainsVersionV21 string

const (
	GetDrainsVersionV21V2 GetDrainsVersionV21 = "v2"
)

func (e GetDrainsVersionV21) ToPointer() *GetDrainsVersionV21 {
	return &e
}
func (e *GetDrainsVersionV21) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = GetDrainsVersionV21(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsVersionV21: %v", v)
	}
}

type GetDrainsTypeOdata1 string

const (
	GetDrainsTypeOdata1Odata GetDrainsTypeOdata1 = "odata"
)

func (e GetDrainsTypeOdata1) ToPointer() *GetDrainsTypeOdata1 {
	return &e
}
func (e *GetDrainsTypeOdata1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = GetDrainsTypeOdata1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeOdata1: %v", v)
	}
}

type GetDrainsFilterOdata1 struct {
	Type GetDrainsTypeOdata1 `json:"type"`
	Text string              `json:"text"`
}

func (g GetDrainsFilterOdata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterOdata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterOdata1) GetType() GetDrainsTypeOdata1 {
	if o == nil {
		return GetDrainsTypeOdata1("")
	}
	return o.Type
}

func (o *GetDrainsFilterOdata1) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type GetDrainsTypeBasic1 string

const (
	GetDrainsTypeBasic1Basic GetDrainsTypeBasic1 = "basic"
)

func (e GetDrainsTypeBasic1) ToPointer() *GetDrainsTypeBasic1 {
	return &e
}
func (e *GetDrainsTypeBasic1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = GetDrainsTypeBasic1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsTypeBasic1: %v", v)
	}
}

type GetDrainsProject1 struct {
	Ids []string `json:"ids,omitempty"`
}

func (g GetDrainsProject1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsProject1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsProject1) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type GetDrainsFilterV2Log1 struct {
	Sources []string `json:"sources,omitempty"`
}

func (g GetDrainsFilterV2Log1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterV2Log1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterV2Log1) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type GetDrainsDeployment1 struct {
	Environments []string `json:"environments,omitempty"`
}

func (g GetDrainsDeployment1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsDeployment1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsDeployment1) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type GetDrainsFilterBasic1 struct {
	Type       GetDrainsTypeBasic1    `json:"type"`
	Project    *GetDrainsProject1     `json:"project,omitempty"`
	Log        *GetDrainsFilterV2Log1 `json:"log,omitempty"`
	Deployment *GetDrainsDeployment1  `json:"deployment,omitempty"`
}

func (g GetDrainsFilterBasic1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterBasic1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterBasic1) GetType() GetDrainsTypeBasic1 {
	if o == nil {
		return GetDrainsTypeBasic1("")
	}
	return o.Type
}

func (o *GetDrainsFilterBasic1) GetProject() *GetDrainsProject1 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetDrainsFilterBasic1) GetLog() *GetDrainsFilterV2Log1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *GetDrainsFilterBasic1) GetDeployment() *GetDrainsDeployment1 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type GetDrainsFilterUnion1Type string

const (
	GetDrainsFilterUnion1TypeGetDrainsFilterBasic1 GetDrainsFilterUnion1Type = "getDrains_filter_Basic_1"
	GetDrainsFilterUnion1TypeGetDrainsFilterOdata1 GetDrainsFilterUnion1Type = "getDrains_filter_Odata_1"
)

type GetDrainsFilterUnion1 struct {
	GetDrainsFilterBasic1 *GetDrainsFilterBasic1 `queryParam:"inline"`
	GetDrainsFilterOdata1 *GetDrainsFilterOdata1 `queryParam:"inline"`

	Type GetDrainsFilterUnion1Type
}

func CreateGetDrainsFilterUnion1GetDrainsFilterBasic1(getDrainsFilterBasic1 GetDrainsFilterBasic1) GetDrainsFilterUnion1 {
	typ := GetDrainsFilterUnion1TypeGetDrainsFilterBasic1

	return GetDrainsFilterUnion1{
		GetDrainsFilterBasic1: &getDrainsFilterBasic1,
		Type:                  typ,
	}
}

func CreateGetDrainsFilterUnion1GetDrainsFilterOdata1(getDrainsFilterOdata1 GetDrainsFilterOdata1) GetDrainsFilterUnion1 {
	typ := GetDrainsFilterUnion1TypeGetDrainsFilterOdata1

	return GetDrainsFilterUnion1{
		GetDrainsFilterOdata1: &getDrainsFilterOdata1,
		Type:                  typ,
	}
}

func (u *GetDrainsFilterUnion1) UnmarshalJSON(data []byte) error {

	var getDrainsFilterOdata1 GetDrainsFilterOdata1 = GetDrainsFilterOdata1{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterOdata1, "", true, nil); err == nil {
		u.GetDrainsFilterOdata1 = &getDrainsFilterOdata1
		u.Type = GetDrainsFilterUnion1TypeGetDrainsFilterOdata1
		return nil
	}

	var getDrainsFilterBasic1 GetDrainsFilterBasic1 = GetDrainsFilterBasic1{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterBasic1, "", true, nil); err == nil {
		u.GetDrainsFilterBasic1 = &getDrainsFilterBasic1
		u.Type = GetDrainsFilterUnion1TypeGetDrainsFilterBasic1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsFilterUnion1", string(data))
}

func (u GetDrainsFilterUnion1) MarshalJSON() ([]byte, error) {
	if u.GetDrainsFilterBasic1 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterBasic1, "", true)
	}

	if u.GetDrainsFilterOdata1 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterOdata1, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsFilterUnion1: all fields are null")
}

type GetDrainsFilterV2V21 struct {
	Version GetDrainsVersionV21   `json:"version"`
	Filter  GetDrainsFilterUnion1 `json:"filter"`
}

func (g GetDrainsFilterV2V21) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterV2V21) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterV2V21) GetVersion() GetDrainsVersionV21 {
	if o == nil {
		return GetDrainsVersionV21("")
	}
	return o.Version
}

func (o *GetDrainsFilterV2V21) GetFilter() GetDrainsFilterUnion1 {
	if o == nil {
		return GetDrainsFilterUnion1{}
	}
	return o.Filter
}

type GetDrainsVersionV11 string

const (
	GetDrainsVersionV11V1 GetDrainsVersionV11 = "v1"
)

func (e GetDrainsVersionV11) ToPointer() *GetDrainsVersionV11 {
	return &e
}
func (e *GetDrainsVersionV11) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = GetDrainsVersionV11(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetDrainsVersionV11: %v", v)
	}
}

type GetDrainsFilterV2V11 struct {
	Version GetDrainsVersionV11 `json:"version"`
}

func (g GetDrainsFilterV2V11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetDrainsFilterV2V11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *GetDrainsFilterV2V11) GetVersion() GetDrainsVersionV11 {
	if o == nil {
		return GetDrainsVersionV11("")
	}
	return o.Version
}

type GetDrainsFilterV2Union1Type string

const (
	GetDrainsFilterV2Union1TypeGetDrainsFilterV2V11 GetDrainsFilterV2Union1Type = "getDrains_filterV2_V1_1"
	GetDrainsFilterV2Union1TypeGetDrainsFilterV2V21 GetDrainsFilterV2Union1Type = "getDrains_filterV2_V2_1"
)

type GetDrainsFilterV2Union1 struct {
	GetDrainsFilterV2V11 *GetDrainsFilterV2V11 `queryParam:"inline"`
	GetDrainsFilterV2V21 *GetDrainsFilterV2V21 `queryParam:"inline"`

	Type GetDrainsFilterV2Union1Type
}

func CreateGetDrainsFilterV2Union1GetDrainsFilterV2V11(getDrainsFilterV2V11 GetDrainsFilterV2V11) GetDrainsFilterV2Union1 {
	typ := GetDrainsFilterV2Union1TypeGetDrainsFilterV2V11

	return GetDrainsFilterV2Union1{
		GetDrainsFilterV2V11: &getDrainsFilterV2V11,
		Type:                 typ,
	}
}

func CreateGetDrainsFilterV2Union1GetDrainsFilterV2V21(getDrainsFilterV2V21 GetDrainsFilterV2V21) GetDrainsFilterV2Union1 {
	typ := GetDrainsFilterV2Union1TypeGetDrainsFilterV2V21

	return GetDrainsFilterV2Union1{
		GetDrainsFilterV2V21: &getDrainsFilterV2V21,
		Type:                 typ,
	}
}

func (u *GetDrainsFilterV2Union1) UnmarshalJSON(data []byte) error {

	var getDrainsFilterV2V21 GetDrainsFilterV2V21 = GetDrainsFilterV2V21{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterV2V21, "", true, nil); err == nil {
		u.GetDrainsFilterV2V21 = &getDrainsFilterV2V21
		u.Type = GetDrainsFilterV2Union1TypeGetDrainsFilterV2V21
		return nil
	}

	var getDrainsFilterV2V11 GetDrainsFilterV2V11 = GetDrainsFilterV2V11{}
	if err := utils.UnmarshalJSON(data, &getDrainsFilterV2V11, "", true, nil); err == nil {
		u.GetDrainsFilterV2V11 = &getDrainsFilterV2V11
		u.Type = GetDrainsFilterV2Union1TypeGetDrainsFilterV2V11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsFilterV2Union1", string(data))
}

func (u GetDrainsFilterV2Union1) MarshalJSON() ([]byte, error) {
	if u.GetDrainsFilterV2V11 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterV2V11, "", true)
	}

	if u.GetDrainsFilterV2V21 != nil {
		return utils.MarshalJSON(u.GetDrainsFilterV2V21, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsFilterV2Union1: all fields are null")
}

type DrainsGetDrains1 struct {
	ID                  string                    `json:"id"`
	OwnerID             string                    `json:"ownerId"`
	Name                string                    `json:"name"`
	CreatedAt           float64                   `json:"createdAt"`
	CreatedFrom         *GetDrainsCreatedFrom1    `json:"createdFrom,omitempty"`
	UpdatedAt           float64                   `json:"updatedAt"`
	ProjectIds          []string                  `json:"projectIds,omitempty"`
	Schemas             *GetDrainsSchemas1        `json:"schemas,omitempty"`
	Delivery            *GetDrainsDeliveryUnion1  `json:"delivery,omitempty"`
	Sampling            []GetDrainsSampling1      `json:"sampling,omitempty"`
	TeamID              *string                   `json:"teamId,omitempty"`
	Status              *GetDrainsStatus1         `json:"status,omitempty"`
	DisabledAt          *float64                  `json:"disabledAt,omitempty"`
	DisabledReason      *GetDrainsDisabledReason1 `json:"disabledReason,omitempty"`
	DisabledBy          *string                   `json:"disabledBy,omitempty"`
	FirstErrorTimestamp *float64                  `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID     *string                   `json:"configurationId,omitempty"`
	ClientID            *string                   `json:"clientId,omitempty"`
	Source              GetDrainsSourceUnion1     `json:"source"`
	Filter              *string                   `json:"filter,omitempty"`
	FilterV2            *GetDrainsFilterV2Union1  `json:"filterV2,omitempty"`
}

func (d DrainsGetDrains1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DrainsGetDrains1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *DrainsGetDrains1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *DrainsGetDrains1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *DrainsGetDrains1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *DrainsGetDrains1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *DrainsGetDrains1) GetCreatedFrom() *GetDrainsCreatedFrom1 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *DrainsGetDrains1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *DrainsGetDrains1) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *DrainsGetDrains1) GetSchemas() *GetDrainsSchemas1 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *DrainsGetDrains1) GetDelivery() *GetDrainsDeliveryUnion1 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *DrainsGetDrains1) GetSampling() []GetDrainsSampling1 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *DrainsGetDrains1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *DrainsGetDrains1) GetStatus() *GetDrainsStatus1 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *DrainsGetDrains1) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *DrainsGetDrains1) GetDisabledReason() *GetDrainsDisabledReason1 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *DrainsGetDrains1) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *DrainsGetDrains1) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *DrainsGetDrains1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *DrainsGetDrains1) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *DrainsGetDrains1) GetSource() GetDrainsSourceUnion1 {
	if o == nil {
		return GetDrainsSourceUnion1{}
	}
	return o.Source
}

func (o *DrainsGetDrains1) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *DrainsGetDrains1) GetFilterV2() *GetDrainsFilterV2Union1 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

type GetDrainsDrainsUnionType string

const (
	GetDrainsDrainsUnionTypeArrayOfDrainsGetDrains1 GetDrainsDrainsUnionType = "arrayOfDrainsGetDrains1"
	GetDrainsDrainsUnionTypeArrayOfDrainsGetDrains2 GetDrainsDrainsUnionType = "arrayOfDrainsGetDrains2"
)

type GetDrainsDrainsUnion struct {
	ArrayOfDrainsGetDrains1 []DrainsGetDrains1 `queryParam:"inline"`
	ArrayOfDrainsGetDrains2 []DrainsGetDrains2 `queryParam:"inline"`

	Type GetDrainsDrainsUnionType
}

func CreateGetDrainsDrainsUnionArrayOfDrainsGetDrains1(arrayOfDrainsGetDrains1 []DrainsGetDrains1) GetDrainsDrainsUnion {
	typ := GetDrainsDrainsUnionTypeArrayOfDrainsGetDrains1

	return GetDrainsDrainsUnion{
		ArrayOfDrainsGetDrains1: arrayOfDrainsGetDrains1,
		Type:                    typ,
	}
}

func CreateGetDrainsDrainsUnionArrayOfDrainsGetDrains2(arrayOfDrainsGetDrains2 []DrainsGetDrains2) GetDrainsDrainsUnion {
	typ := GetDrainsDrainsUnionTypeArrayOfDrainsGetDrains2

	return GetDrainsDrainsUnion{
		ArrayOfDrainsGetDrains2: arrayOfDrainsGetDrains2,
		Type:                    typ,
	}
}

func (u *GetDrainsDrainsUnion) UnmarshalJSON(data []byte) error {

	var arrayOfDrainsGetDrains1 []DrainsGetDrains1 = []DrainsGetDrains1{}
	if err := utils.UnmarshalJSON(data, &arrayOfDrainsGetDrains1, "", true, nil); err == nil {
		u.ArrayOfDrainsGetDrains1 = arrayOfDrainsGetDrains1
		u.Type = GetDrainsDrainsUnionTypeArrayOfDrainsGetDrains1
		return nil
	}

	var arrayOfDrainsGetDrains2 []DrainsGetDrains2 = []DrainsGetDrains2{}
	if err := utils.UnmarshalJSON(data, &arrayOfDrainsGetDrains2, "", true, nil); err == nil {
		u.ArrayOfDrainsGetDrains2 = arrayOfDrainsGetDrains2
		u.Type = GetDrainsDrainsUnionTypeArrayOfDrainsGetDrains2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDrainsDrainsUnion", string(data))
}

func (u GetDrainsDrainsUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfDrainsGetDrains1 != nil {
		return utils.MarshalJSON(u.ArrayOfDrainsGetDrains1, "", true)
	}

	if u.ArrayOfDrainsGetDrains2 != nil {
		return utils.MarshalJSON(u.ArrayOfDrainsGetDrains2, "", true)
	}

	return nil, errors.New("could not marshal union type GetDrainsDrainsUnion: all fields are null")
}

type GetDrainsResponseBody struct {
	Drains GetDrainsDrainsUnion `json:"drains"`
}

func (o *GetDrainsResponseBody) GetDrains() GetDrainsDrainsUnion {
	if o == nil {
		return GetDrainsDrainsUnion{}
	}
	return o.Drains
}

type GetDrainsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetDrainsResponseBody
}

func (o *GetDrainsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetDrainsResponse) GetObject() *GetDrainsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
