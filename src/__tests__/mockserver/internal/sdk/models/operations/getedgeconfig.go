// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetEdgeConfigRequest struct {
	EdgeConfigID string `pathParam:"style=simple,explode=false,name=edgeConfigId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetEdgeConfigRequest) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *GetEdgeConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetEdgeConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetEdgeConfigTransfer - Keeps track of the current state of the Edge Config while it gets transferred.
type GetEdgeConfigTransfer struct {
	FromAccountID string   `json:"fromAccountId"`
	StartedAt     float64  `json:"startedAt"`
	DoneAt        *float64 `json:"doneAt"`
}

func (o *GetEdgeConfigTransfer) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *GetEdgeConfigTransfer) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *GetEdgeConfigTransfer) GetDoneAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DoneAt
}

type GetEdgeConfigSchema struct {
}

type GetEdgeConfigTypeExperimentation string

const (
	GetEdgeConfigTypeExperimentationExperimentation GetEdgeConfigTypeExperimentation = "experimentation"
)

func (e GetEdgeConfigTypeExperimentation) ToPointer() *GetEdgeConfigTypeExperimentation {
	return &e
}
func (e *GetEdgeConfigTypeExperimentation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experimentation":
		*e = GetEdgeConfigTypeExperimentation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEdgeConfigTypeExperimentation: %v", v)
	}
}

type GetEdgeConfigPurposeExperimentation struct {
	Type       GetEdgeConfigTypeExperimentation `json:"type"`
	ResourceID string                           `json:"resourceId"`
}

func (o *GetEdgeConfigPurposeExperimentation) GetType() GetEdgeConfigTypeExperimentation {
	if o == nil {
		return GetEdgeConfigTypeExperimentation("")
	}
	return o.Type
}

func (o *GetEdgeConfigPurposeExperimentation) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type GetEdgeConfigTypeFlags string

const (
	GetEdgeConfigTypeFlagsFlags GetEdgeConfigTypeFlags = "flags"
)

func (e GetEdgeConfigTypeFlags) ToPointer() *GetEdgeConfigTypeFlags {
	return &e
}
func (e *GetEdgeConfigTypeFlags) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags":
		*e = GetEdgeConfigTypeFlags(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEdgeConfigTypeFlags: %v", v)
	}
}

type GetEdgeConfigPurposeFlags struct {
	Type      GetEdgeConfigTypeFlags `json:"type"`
	ProjectID string                 `json:"projectId"`
}

func (o *GetEdgeConfigPurposeFlags) GetType() GetEdgeConfigTypeFlags {
	if o == nil {
		return GetEdgeConfigTypeFlags("")
	}
	return o.Type
}

func (o *GetEdgeConfigPurposeFlags) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetEdgeConfigPurposeUnionType string

const (
	GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurposeFlags           GetEdgeConfigPurposeUnionType = "getEdgeConfig_purpose_Flags"
	GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurposeExperimentation GetEdgeConfigPurposeUnionType = "getEdgeConfig_purpose_Experimentation"
)

type GetEdgeConfigPurposeUnion struct {
	GetEdgeConfigPurposeFlags           *GetEdgeConfigPurposeFlags           `queryParam:"inline"`
	GetEdgeConfigPurposeExperimentation *GetEdgeConfigPurposeExperimentation `queryParam:"inline"`

	Type GetEdgeConfigPurposeUnionType
}

func CreateGetEdgeConfigPurposeUnionGetEdgeConfigPurposeFlags(getEdgeConfigPurposeFlags GetEdgeConfigPurposeFlags) GetEdgeConfigPurposeUnion {
	typ := GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurposeFlags

	return GetEdgeConfigPurposeUnion{
		GetEdgeConfigPurposeFlags: &getEdgeConfigPurposeFlags,
		Type:                      typ,
	}
}

func CreateGetEdgeConfigPurposeUnionGetEdgeConfigPurposeExperimentation(getEdgeConfigPurposeExperimentation GetEdgeConfigPurposeExperimentation) GetEdgeConfigPurposeUnion {
	typ := GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurposeExperimentation

	return GetEdgeConfigPurposeUnion{
		GetEdgeConfigPurposeExperimentation: &getEdgeConfigPurposeExperimentation,
		Type:                                typ,
	}
}

func (u *GetEdgeConfigPurposeUnion) UnmarshalJSON(data []byte) error {

	var getEdgeConfigPurposeFlags GetEdgeConfigPurposeFlags = GetEdgeConfigPurposeFlags{}
	if err := utils.UnmarshalJSON(data, &getEdgeConfigPurposeFlags, "", true, true); err == nil {
		u.GetEdgeConfigPurposeFlags = &getEdgeConfigPurposeFlags
		u.Type = GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurposeFlags
		return nil
	}

	var getEdgeConfigPurposeExperimentation GetEdgeConfigPurposeExperimentation = GetEdgeConfigPurposeExperimentation{}
	if err := utils.UnmarshalJSON(data, &getEdgeConfigPurposeExperimentation, "", true, true); err == nil {
		u.GetEdgeConfigPurposeExperimentation = &getEdgeConfigPurposeExperimentation
		u.Type = GetEdgeConfigPurposeUnionTypeGetEdgeConfigPurposeExperimentation
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetEdgeConfigPurposeUnion", string(data))
}

func (u GetEdgeConfigPurposeUnion) MarshalJSON() ([]byte, error) {
	if u.GetEdgeConfigPurposeFlags != nil {
		return utils.MarshalJSON(u.GetEdgeConfigPurposeFlags, "", true)
	}

	if u.GetEdgeConfigPurposeExperimentation != nil {
		return utils.MarshalJSON(u.GetEdgeConfigPurposeExperimentation, "", true)
	}

	return nil, errors.New("could not marshal union type GetEdgeConfigPurposeUnion: all fields are null")
}

// GetEdgeConfigResponseBody - The EdgeConfig.
type GetEdgeConfigResponseBody struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	ID        *string  `json:"id,omitempty"`
	// Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
	Slug    *string `json:"slug,omitempty"`
	OwnerID *string `json:"ownerId,omitempty"`
	Digest  *string `json:"digest,omitempty"`
	// Keeps track of the current state of the Edge Config while it gets transferred.
	Transfer    *GetEdgeConfigTransfer     `json:"transfer,omitempty"`
	Schema      *GetEdgeConfigSchema       `json:"schema,omitempty"`
	Purpose     *GetEdgeConfigPurposeUnion `json:"purpose,omitempty"`
	SizeInBytes float64                    `json:"sizeInBytes"`
	ItemCount   float64                    `json:"itemCount"`
}

func (o *GetEdgeConfigResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetEdgeConfigResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetEdgeConfigResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetEdgeConfigResponseBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetEdgeConfigResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetEdgeConfigResponseBody) GetDigest() *string {
	if o == nil {
		return nil
	}
	return o.Digest
}

func (o *GetEdgeConfigResponseBody) GetTransfer() *GetEdgeConfigTransfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *GetEdgeConfigResponseBody) GetSchema() *GetEdgeConfigSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *GetEdgeConfigResponseBody) GetPurpose() *GetEdgeConfigPurposeUnion {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *GetEdgeConfigResponseBody) GetSizeInBytes() float64 {
	if o == nil {
		return 0.0
	}
	return o.SizeInBytes
}

func (o *GetEdgeConfigResponseBody) GetItemCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ItemCount
}

type GetEdgeConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The EdgeConfig.
	Object *GetEdgeConfigResponseBody
}

func (o *GetEdgeConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEdgeConfigResponse) GetObject() *GetEdgeConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
