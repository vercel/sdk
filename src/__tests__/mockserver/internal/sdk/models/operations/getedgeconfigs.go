// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetEdgeConfigsRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetEdgeConfigsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetEdgeConfigsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// Transfer - Keeps track of the current state of the Edge Config while it gets transferred.
type Transfer struct {
	FromAccountID string   `json:"fromAccountId"`
	StartedAt     float64  `json:"startedAt"`
	DoneAt        *float64 `json:"doneAt"`
}

func (o *Transfer) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *Transfer) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *Transfer) GetDoneAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DoneAt
}

type Schema struct {
}

type GetEdgeConfigsType string

const (
	GetEdgeConfigsTypeFlags GetEdgeConfigsType = "flags"
)

func (e GetEdgeConfigsType) ToPointer() *GetEdgeConfigsType {
	return &e
}
func (e *GetEdgeConfigsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags":
		*e = GetEdgeConfigsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetEdgeConfigsType: %v", v)
	}
}

type Purpose struct {
	Type      GetEdgeConfigsType `json:"type"`
	ProjectID string             `json:"projectId"`
}

func (o *Purpose) GetType() GetEdgeConfigsType {
	if o == nil {
		return GetEdgeConfigsType("")
	}
	return o.Type
}

func (o *Purpose) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetEdgeConfigsResponseBody struct {
	ID        *string  `json:"id,omitempty"`
	CreatedAt *float64 `json:"createdAt,omitempty"`
	OwnerID   *string  `json:"ownerId,omitempty"`
	// Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
	Slug      *string  `json:"slug,omitempty"`
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	Digest    *string  `json:"digest,omitempty"`
	// Keeps track of the current state of the Edge Config while it gets transferred.
	Transfer    *Transfer `json:"transfer,omitempty"`
	Schema      *Schema   `json:"schema,omitempty"`
	Purpose     *Purpose  `json:"purpose,omitempty"`
	SizeInBytes float64   `json:"sizeInBytes"`
	ItemCount   float64   `json:"itemCount"`
}

func (o *GetEdgeConfigsResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetEdgeConfigsResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetEdgeConfigsResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetEdgeConfigsResponseBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetEdgeConfigsResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetEdgeConfigsResponseBody) GetDigest() *string {
	if o == nil {
		return nil
	}
	return o.Digest
}

func (o *GetEdgeConfigsResponseBody) GetTransfer() *Transfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *GetEdgeConfigsResponseBody) GetSchema() *Schema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *GetEdgeConfigsResponseBody) GetPurpose() *Purpose {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *GetEdgeConfigsResponseBody) GetSizeInBytes() float64 {
	if o == nil {
		return 0.0
	}
	return o.SizeInBytes
}

func (o *GetEdgeConfigsResponseBody) GetItemCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ItemCount
}

type GetEdgeConfigsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// List of all edge configs.
	ResponseBodies []GetEdgeConfigsResponseBody
}

func (o *GetEdgeConfigsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetEdgeConfigsResponse) GetResponseBodies() []GetEdgeConfigsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
