// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetFirewallConfigRequest struct {
	ProjectID string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The deployed configVersion for the firewall configuration
	ConfigVersion string `pathParam:"style=simple,explode=false,name=configVersion"`
}

func (o *GetFirewallConfigRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetFirewallConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetFirewallConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetFirewallConfigRequest) GetConfigVersion() string {
	if o == nil {
		return ""
	}
	return o.ConfigVersion
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction: %v", v)
	}
}

// GetFirewallConfigSd - Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
type GetFirewallConfigSd struct {
	Active bool                                                                       `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction `json:"action"`
}

func (o *GetFirewallConfigSd) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigSd) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSdAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction: %v", v)
	}
}

// GetFirewallConfigMa - Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
type GetFirewallConfigMa struct {
	Active bool                                                                       `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction `json:"action"`
}

func (o *GetFirewallConfigMa) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigMa) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsMaAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponseAction string

const (
	GetFirewallConfigSecurityResponseActionDeny GetFirewallConfigSecurityResponseAction = "deny"
	GetFirewallConfigSecurityResponseActionLog  GetFirewallConfigSecurityResponseAction = "log"
)

func (e GetFirewallConfigSecurityResponseAction) ToPointer() *GetFirewallConfigSecurityResponseAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponseAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponseAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponseAction: %v", v)
	}
}

// GetFirewallConfigLfi - Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
type GetFirewallConfigLfi struct {
	Active bool                                    `json:"active"`
	Action GetFirewallConfigSecurityResponseAction `json:"action"`
}

func (o *GetFirewallConfigLfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigLfi) GetAction() GetFirewallConfigSecurityResponseAction {
	if o == nil {
		return GetFirewallConfigSecurityResponseAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200Action string

const (
	GetFirewallConfigSecurityResponse200ActionDeny GetFirewallConfigSecurityResponse200Action = "deny"
	GetFirewallConfigSecurityResponse200ActionLog  GetFirewallConfigSecurityResponse200Action = "log"
)

func (e GetFirewallConfigSecurityResponse200Action) ToPointer() *GetFirewallConfigSecurityResponse200Action {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200Action: %v", v)
	}
}

// GetFirewallConfigRfi - Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
type GetFirewallConfigRfi struct {
	Active bool                                       `json:"active"`
	Action GetFirewallConfigSecurityResponse200Action `json:"action"`
}

func (o *GetFirewallConfigRfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigRfi) GetAction() GetFirewallConfigSecurityResponse200Action {
	if o == nil {
		return GetFirewallConfigSecurityResponse200Action("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONAction: %v", v)
	}
}

// GetFirewallConfigRce - Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
type GetFirewallConfigRce struct {
	Active bool                                                      `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONAction `json:"action"`
}

func (o *GetFirewallConfigRce) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigRce) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction: %v", v)
	}
}

// GetFirewallConfigPhp - PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
type GetFirewallConfigPhp struct {
	Active bool                                                                  `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction `json:"action"`
}

func (o *GetFirewallConfigPhp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigPhp) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction: %v", v)
	}
}

// GetFirewallConfigGen - Generic Attack - Provide broad protection from various undefined or novel attack vectors.
type GetFirewallConfigGen struct {
	Active bool                                                                     `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction `json:"action"`
}

func (o *GetFirewallConfigGen) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigGen) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction: %v", v)
	}
}

// GetFirewallConfigXSS - XSS Attack - Prevent injection of malicious scripts into trusted webpages.
type GetFirewallConfigXSS struct {
	Active bool                                                                        `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction `json:"action"`
}

func (o *GetFirewallConfigXSS) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigXSS) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsXSSAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction: %v", v)
	}
}

// GetFirewallConfigSqli - SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
type GetFirewallConfigSqli struct {
	Active bool                                                                         `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction `json:"action"`
}

func (o *GetFirewallConfigSqli) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigSqli) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSqliAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction: %v", v)
	}
}

// GetFirewallConfigSf - Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
type GetFirewallConfigSf struct {
	Active bool                                                                       `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction `json:"action"`
}

func (o *GetFirewallConfigSf) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigSf) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsSfAction("")
	}
	return o.Action
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaActionDeny GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaActionLog  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction = "log"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction: %v", v)
	}
}

// GetFirewallConfigJava - Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
type GetFirewallConfigJava struct {
	Active bool                                                                         `json:"active"`
	Action GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction `json:"action"`
}

func (o *GetFirewallConfigJava) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigJava) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyCrsJavaAction("")
	}
	return o.Action
}

// GetFirewallConfigCrs - Custom Ruleset
type GetFirewallConfigCrs struct {
	// Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
	Sd GetFirewallConfigSd `json:"sd"`
	// Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
	Ma GetFirewallConfigMa `json:"ma"`
	// Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
	Lfi GetFirewallConfigLfi `json:"lfi"`
	// Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
	Rfi GetFirewallConfigRfi `json:"rfi"`
	// Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
	Rce GetFirewallConfigRce `json:"rce"`
	// PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
	Php GetFirewallConfigPhp `json:"php"`
	// Generic Attack - Provide broad protection from various undefined or novel attack vectors.
	Gen GetFirewallConfigGen `json:"gen"`
	// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
	XSS GetFirewallConfigXSS `json:"xss"`
	// SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
	Sqli GetFirewallConfigSqli `json:"sqli"`
	// Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
	Sf GetFirewallConfigSf `json:"sf"`
	// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
	Java GetFirewallConfigJava `json:"java"`
}

func (o *GetFirewallConfigCrs) GetSd() GetFirewallConfigSd {
	if o == nil {
		return GetFirewallConfigSd{}
	}
	return o.Sd
}

func (o *GetFirewallConfigCrs) GetMa() GetFirewallConfigMa {
	if o == nil {
		return GetFirewallConfigMa{}
	}
	return o.Ma
}

func (o *GetFirewallConfigCrs) GetLfi() GetFirewallConfigLfi {
	if o == nil {
		return GetFirewallConfigLfi{}
	}
	return o.Lfi
}

func (o *GetFirewallConfigCrs) GetRfi() GetFirewallConfigRfi {
	if o == nil {
		return GetFirewallConfigRfi{}
	}
	return o.Rfi
}

func (o *GetFirewallConfigCrs) GetRce() GetFirewallConfigRce {
	if o == nil {
		return GetFirewallConfigRce{}
	}
	return o.Rce
}

func (o *GetFirewallConfigCrs) GetPhp() GetFirewallConfigPhp {
	if o == nil {
		return GetFirewallConfigPhp{}
	}
	return o.Php
}

func (o *GetFirewallConfigCrs) GetGen() GetFirewallConfigGen {
	if o == nil {
		return GetFirewallConfigGen{}
	}
	return o.Gen
}

func (o *GetFirewallConfigCrs) GetXSS() GetFirewallConfigXSS {
	if o == nil {
		return GetFirewallConfigXSS{}
	}
	return o.XSS
}

func (o *GetFirewallConfigCrs) GetSqli() GetFirewallConfigSqli {
	if o == nil {
		return GetFirewallConfigSqli{}
	}
	return o.Sqli
}

func (o *GetFirewallConfigCrs) GetSf() GetFirewallConfigSf {
	if o == nil {
		return GetFirewallConfigSf{}
	}
	return o.Sf
}

func (o *GetFirewallConfigCrs) GetJava() GetFirewallConfigJava {
	if o == nil {
		return GetFirewallConfigJava{}
	}
	return o.Java
}

// GetFirewallConfigType - [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
type GetFirewallConfigType string

const (
	GetFirewallConfigTypeHost             GetFirewallConfigType = "host"
	GetFirewallConfigTypePath             GetFirewallConfigType = "path"
	GetFirewallConfigTypeMethod           GetFirewallConfigType = "method"
	GetFirewallConfigTypeHeader           GetFirewallConfigType = "header"
	GetFirewallConfigTypeQuery            GetFirewallConfigType = "query"
	GetFirewallConfigTypeCookie           GetFirewallConfigType = "cookie"
	GetFirewallConfigTypeTargetPath       GetFirewallConfigType = "target_path"
	GetFirewallConfigTypeRawPath          GetFirewallConfigType = "raw_path"
	GetFirewallConfigTypeIPAddress        GetFirewallConfigType = "ip_address"
	GetFirewallConfigTypeProtocol         GetFirewallConfigType = "protocol"
	GetFirewallConfigTypeRegion           GetFirewallConfigType = "region"
	GetFirewallConfigTypeScheme           GetFirewallConfigType = "scheme"
	GetFirewallConfigTypeEnvironment      GetFirewallConfigType = "environment"
	GetFirewallConfigTypeUserAgent        GetFirewallConfigType = "user_agent"
	GetFirewallConfigTypeGeoContinent     GetFirewallConfigType = "geo_continent"
	GetFirewallConfigTypeGeoCountry       GetFirewallConfigType = "geo_country"
	GetFirewallConfigTypeGeoCountryRegion GetFirewallConfigType = "geo_country_region"
	GetFirewallConfigTypeGeoCity          GetFirewallConfigType = "geo_city"
	GetFirewallConfigTypeGeoAsNumber      GetFirewallConfigType = "geo_as_number"
	GetFirewallConfigTypeJa4Digest        GetFirewallConfigType = "ja4_digest"
	GetFirewallConfigTypeJa3Digest        GetFirewallConfigType = "ja3_digest"
	GetFirewallConfigTypeRateLimitAPIID   GetFirewallConfigType = "rate_limit_api_id"
)

func (e GetFirewallConfigType) ToPointer() *GetFirewallConfigType {
	return &e
}
func (e *GetFirewallConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "region":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = GetFirewallConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigType: %v", v)
	}
}

// GetFirewallConfigOp - [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
type GetFirewallConfigOp string

const (
	GetFirewallConfigOpRe   GetFirewallConfigOp = "re"
	GetFirewallConfigOpEq   GetFirewallConfigOp = "eq"
	GetFirewallConfigOpEx   GetFirewallConfigOp = "ex"
	GetFirewallConfigOpInc  GetFirewallConfigOp = "inc"
	GetFirewallConfigOpPre  GetFirewallConfigOp = "pre"
	GetFirewallConfigOpSuf  GetFirewallConfigOp = "suf"
	GetFirewallConfigOpSub  GetFirewallConfigOp = "sub"
	GetFirewallConfigOpGt   GetFirewallConfigOp = "gt"
	GetFirewallConfigOpGte  GetFirewallConfigOp = "gte"
	GetFirewallConfigOpLt   GetFirewallConfigOp = "lt"
	GetFirewallConfigOpLte  GetFirewallConfigOp = "lte"
	GetFirewallConfigOpNex  GetFirewallConfigOp = "nex"
	GetFirewallConfigOpNinc GetFirewallConfigOp = "ninc"
	GetFirewallConfigOpNeq  GetFirewallConfigOp = "neq"
)

func (e GetFirewallConfigOp) ToPointer() *GetFirewallConfigOp {
	return &e
}
func (e *GetFirewallConfigOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "ex":
		fallthrough
	case "inc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		fallthrough
	case "nex":
		fallthrough
	case "ninc":
		fallthrough
	case "neq":
		*e = GetFirewallConfigOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigOp: %v", v)
	}
}

type GetFirewallConfigValueType string

const (
	GetFirewallConfigValueTypeStr        GetFirewallConfigValueType = "str"
	GetFirewallConfigValueTypeNumber     GetFirewallConfigValueType = "number"
	GetFirewallConfigValueTypeArrayOfStr GetFirewallConfigValueType = "arrayOfStr"
)

type GetFirewallConfigValue struct {
	Str        *string
	Number     *float64
	ArrayOfStr []string

	Type GetFirewallConfigValueType
}

func CreateGetFirewallConfigValueStr(str string) GetFirewallConfigValue {
	typ := GetFirewallConfigValueTypeStr

	return GetFirewallConfigValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetFirewallConfigValueNumber(number float64) GetFirewallConfigValue {
	typ := GetFirewallConfigValueTypeNumber

	return GetFirewallConfigValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetFirewallConfigValueArrayOfStr(arrayOfStr []string) GetFirewallConfigValue {
	typ := GetFirewallConfigValueTypeArrayOfStr

	return GetFirewallConfigValue{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetFirewallConfigValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetFirewallConfigValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetFirewallConfigValueTypeNumber
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetFirewallConfigValueTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetFirewallConfigValue", string(data))
}

func (u GetFirewallConfigValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetFirewallConfigValue: all fields are null")
}

type GetFirewallConfigConditions struct {
	// [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
	Type GetFirewallConfigType `json:"type"`
	// [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value
	Op    GetFirewallConfigOp     `json:"op"`
	Neg   *bool                   `json:"neg,omitempty"`
	Key   *string                 `json:"key,omitempty"`
	Value *GetFirewallConfigValue `json:"value,omitempty"`
}

func (o *GetFirewallConfigConditions) GetType() GetFirewallConfigType {
	if o == nil {
		return GetFirewallConfigType("")
	}
	return o.Type
}

func (o *GetFirewallConfigConditions) GetOp() GetFirewallConfigOp {
	if o == nil {
		return GetFirewallConfigOp("")
	}
	return o.Op
}

func (o *GetFirewallConfigConditions) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *GetFirewallConfigConditions) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetFirewallConfigConditions) GetValue() *GetFirewallConfigValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetFirewallConfigConditionGroup struct {
	Conditions []GetFirewallConfigConditions `json:"conditions"`
}

func (o *GetFirewallConfigConditionGroup) GetConditions() []GetFirewallConfigConditions {
	if o == nil {
		return []GetFirewallConfigConditions{}
	}
	return o.Conditions
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionDeny      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionLog       GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = "log"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionChallenge GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = "challenge"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionBypass    GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = "bypass"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionRateLimit GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = "rate_limit"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionRedirect  GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction = "redirect"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction: %v", v)
	}
}

type GetFirewallConfigAlgo string

const (
	GetFirewallConfigAlgoFixedWindow GetFirewallConfigAlgo = "fixed_window"
	GetFirewallConfigAlgoTokenBucket GetFirewallConfigAlgo = "token_bucket"
)

func (e GetFirewallConfigAlgo) ToPointer() *GetFirewallConfigAlgo {
	return &e
}
func (e *GetFirewallConfigAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = GetFirewallConfigAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigAlgo: %v", v)
	}
}

type GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction string

const (
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionActionDeny      GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction = "deny"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionActionLog       GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction = "log"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionActionChallenge GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction = "challenge"
	GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionActionRateLimit GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction = "rate_limit"
)

func (e GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction) ToPointer() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction {
	return &e
}
func (e *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "rate_limit":
		*e = GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction: %v", v)
	}
}

type GetFirewallConfigRateLimit struct {
	Algo   GetFirewallConfigAlgo                                                             `json:"algo"`
	Window float64                                                                           `json:"window"`
	Limit  float64                                                                           `json:"limit"`
	Keys   []string                                                                          `json:"keys"`
	Action *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction `json:"action,omitempty"`
}

func (o *GetFirewallConfigRateLimit) GetAlgo() GetFirewallConfigAlgo {
	if o == nil {
		return GetFirewallConfigAlgo("")
	}
	return o.Algo
}

func (o *GetFirewallConfigRateLimit) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *GetFirewallConfigRateLimit) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *GetFirewallConfigRateLimit) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *GetFirewallConfigRateLimit) GetAction() *GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesActionAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetFirewallConfigRedirect struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *GetFirewallConfigRedirect) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *GetFirewallConfigRedirect) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type GetFirewallConfigMitigate struct {
	Action         GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction `json:"action"`
	RateLimit      *GetFirewallConfigRateLimit                                                `json:"rateLimit,omitempty"`
	Redirect       *GetFirewallConfigRedirect                                                 `json:"redirect,omitempty"`
	ActionDuration *string                                                                    `json:"actionDuration,omitempty"`
}

func (o *GetFirewallConfigMitigate) GetAction() GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction {
	if o == nil {
		return GetFirewallConfigSecurityResponse200ApplicationJSONResponseBodyRulesAction("")
	}
	return o.Action
}

func (o *GetFirewallConfigMitigate) GetRateLimit() *GetFirewallConfigRateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *GetFirewallConfigMitigate) GetRedirect() *GetFirewallConfigRedirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetFirewallConfigMitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

type GetFirewallConfigAction struct {
	Mitigate *GetFirewallConfigMitigate `json:"mitigate,omitempty"`
}

func (o *GetFirewallConfigAction) GetMitigate() *GetFirewallConfigMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type GetFirewallConfigRules struct {
	ID             string                            `json:"id"`
	Name           string                            `json:"name"`
	Description    *string                           `json:"description,omitempty"`
	Active         bool                              `json:"active"`
	ConditionGroup []GetFirewallConfigConditionGroup `json:"conditionGroup"`
	Action         GetFirewallConfigAction           `json:"action"`
}

func (o *GetFirewallConfigRules) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetFirewallConfigRules) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetFirewallConfigRules) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetFirewallConfigRules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigRules) GetConditionGroup() []GetFirewallConfigConditionGroup {
	if o == nil {
		return []GetFirewallConfigConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *GetFirewallConfigRules) GetAction() GetFirewallConfigAction {
	if o == nil {
		return GetFirewallConfigAction{}
	}
	return o.Action
}

type GetFirewallConfigSecurityAction string

const (
	GetFirewallConfigSecurityActionDeny      GetFirewallConfigSecurityAction = "deny"
	GetFirewallConfigSecurityActionLog       GetFirewallConfigSecurityAction = "log"
	GetFirewallConfigSecurityActionChallenge GetFirewallConfigSecurityAction = "challenge"
	GetFirewallConfigSecurityActionBypass    GetFirewallConfigSecurityAction = "bypass"
)

func (e GetFirewallConfigSecurityAction) ToPointer() *GetFirewallConfigSecurityAction {
	return &e
}
func (e *GetFirewallConfigSecurityAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		*e = GetFirewallConfigSecurityAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSecurityAction: %v", v)
	}
}

type GetFirewallConfigIps struct {
	ID       string                          `json:"id"`
	Hostname string                          `json:"hostname"`
	IP       string                          `json:"ip"`
	Notes    *string                         `json:"notes,omitempty"`
	Action   GetFirewallConfigSecurityAction `json:"action"`
}

func (o *GetFirewallConfigIps) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetFirewallConfigIps) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *GetFirewallConfigIps) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *GetFirewallConfigIps) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *GetFirewallConfigIps) GetAction() GetFirewallConfigSecurityAction {
	if o == nil {
		return GetFirewallConfigSecurityAction("")
	}
	return o.Action
}

type Changes struct {
}

type GetFirewallConfigOwasp struct {
	Active    bool    `json:"active"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UserID    *string `json:"userId,omitempty"`
	Username  *string `json:"username,omitempty"`
}

func (o *GetFirewallConfigOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigOwasp) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetFirewallConfigOwasp) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetFirewallConfigOwasp) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type VerifiedBotsBypass struct {
	Active    bool    `json:"active"`
	UpdatedAt *string `json:"updatedAt,omitempty"`
	UserID    *string `json:"userId,omitempty"`
	Username  *string `json:"username,omitempty"`
}

func (o *VerifiedBotsBypass) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *VerifiedBotsBypass) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *VerifiedBotsBypass) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *VerifiedBotsBypass) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type GetFirewallConfigManagedRules struct {
	Owasp              *GetFirewallConfigOwasp `json:"owasp,omitempty"`
	VerifiedBotsBypass *VerifiedBotsBypass     `json:"verifiedBotsBypass,omitempty"`
}

func (o *GetFirewallConfigManagedRules) GetOwasp() *GetFirewallConfigOwasp {
	if o == nil {
		return nil
	}
	return o.Owasp
}

func (o *GetFirewallConfigManagedRules) GetVerifiedBotsBypass() *VerifiedBotsBypass {
	if o == nil {
		return nil
	}
	return o.VerifiedBotsBypass
}

// GetFirewallConfigResponseBody - If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
type GetFirewallConfigResponseBody struct {
	OwnerID         string  `json:"ownerId"`
	ProjectKey      string  `json:"projectKey"`
	ID              string  `json:"id"`
	Version         float64 `json:"version"`
	UpdatedAt       string  `json:"updatedAt"`
	FirewallEnabled bool    `json:"firewallEnabled"`
	// Custom Ruleset
	Crs          GetFirewallConfigCrs           `json:"crs"`
	Rules        []GetFirewallConfigRules       `json:"rules"`
	Ips          []GetFirewallConfigIps         `json:"ips"`
	Changes      []Changes                      `json:"changes"`
	ManagedRules *GetFirewallConfigManagedRules `json:"managedRules,omitempty"`
}

func (o *GetFirewallConfigResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetFirewallConfigResponseBody) GetProjectKey() string {
	if o == nil {
		return ""
	}
	return o.ProjectKey
}

func (o *GetFirewallConfigResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetFirewallConfigResponseBody) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *GetFirewallConfigResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *GetFirewallConfigResponseBody) GetFirewallEnabled() bool {
	if o == nil {
		return false
	}
	return o.FirewallEnabled
}

func (o *GetFirewallConfigResponseBody) GetCrs() GetFirewallConfigCrs {
	if o == nil {
		return GetFirewallConfigCrs{}
	}
	return o.Crs
}

func (o *GetFirewallConfigResponseBody) GetRules() []GetFirewallConfigRules {
	if o == nil {
		return []GetFirewallConfigRules{}
	}
	return o.Rules
}

func (o *GetFirewallConfigResponseBody) GetIps() []GetFirewallConfigIps {
	if o == nil {
		return []GetFirewallConfigIps{}
	}
	return o.Ips
}

func (o *GetFirewallConfigResponseBody) GetChanges() []Changes {
	if o == nil {
		return []Changes{}
	}
	return o.Changes
}

func (o *GetFirewallConfigResponseBody) GetManagedRules() *GetFirewallConfigManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

type GetFirewallConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
	Object *GetFirewallConfigResponseBody
}

func (o *GetFirewallConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetFirewallConfigResponse) GetObject() *GetFirewallConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
