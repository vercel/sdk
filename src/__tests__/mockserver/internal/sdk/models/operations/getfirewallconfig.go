// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetFirewallConfigRequest struct {
	ProjectID string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
	// The deployed configVersion for the firewall configuration
	ConfigVersion string `pathParam:"style=simple,explode=false,name=configVersion"`
}

func (o *GetFirewallConfigRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetFirewallConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetFirewallConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetFirewallConfigRequest) GetConfigVersion() string {
	if o == nil {
		return ""
	}
	return o.ConfigVersion
}

type GetFirewallConfigSdAction string

const (
	GetFirewallConfigSdActionDeny GetFirewallConfigSdAction = "deny"
	GetFirewallConfigSdActionLog  GetFirewallConfigSdAction = "log"
)

func (e GetFirewallConfigSdAction) ToPointer() *GetFirewallConfigSdAction {
	return &e
}
func (e *GetFirewallConfigSdAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSdAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSdAction: %v", v)
	}
}

// GetFirewallConfigSd - Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
type GetFirewallConfigSd struct {
	Active bool                      `json:"active"`
	Action GetFirewallConfigSdAction `json:"action"`
}

func (o *GetFirewallConfigSd) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigSd) GetAction() GetFirewallConfigSdAction {
	if o == nil {
		return GetFirewallConfigSdAction("")
	}
	return o.Action
}

type GetFirewallConfigMaAction string

const (
	GetFirewallConfigMaActionDeny GetFirewallConfigMaAction = "deny"
	GetFirewallConfigMaActionLog  GetFirewallConfigMaAction = "log"
)

func (e GetFirewallConfigMaAction) ToPointer() *GetFirewallConfigMaAction {
	return &e
}
func (e *GetFirewallConfigMaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigMaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigMaAction: %v", v)
	}
}

// GetFirewallConfigMa - Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
type GetFirewallConfigMa struct {
	Active bool                      `json:"active"`
	Action GetFirewallConfigMaAction `json:"action"`
}

func (o *GetFirewallConfigMa) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigMa) GetAction() GetFirewallConfigMaAction {
	if o == nil {
		return GetFirewallConfigMaAction("")
	}
	return o.Action
}

type GetFirewallConfigLfiAction string

const (
	GetFirewallConfigLfiActionDeny GetFirewallConfigLfiAction = "deny"
	GetFirewallConfigLfiActionLog  GetFirewallConfigLfiAction = "log"
)

func (e GetFirewallConfigLfiAction) ToPointer() *GetFirewallConfigLfiAction {
	return &e
}
func (e *GetFirewallConfigLfiAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigLfiAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigLfiAction: %v", v)
	}
}

// GetFirewallConfigLfi - Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
type GetFirewallConfigLfi struct {
	Active bool                       `json:"active"`
	Action GetFirewallConfigLfiAction `json:"action"`
}

func (o *GetFirewallConfigLfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigLfi) GetAction() GetFirewallConfigLfiAction {
	if o == nil {
		return GetFirewallConfigLfiAction("")
	}
	return o.Action
}

type GetFirewallConfigRfiAction string

const (
	GetFirewallConfigRfiActionDeny GetFirewallConfigRfiAction = "deny"
	GetFirewallConfigRfiActionLog  GetFirewallConfigRfiAction = "log"
)

func (e GetFirewallConfigRfiAction) ToPointer() *GetFirewallConfigRfiAction {
	return &e
}
func (e *GetFirewallConfigRfiAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigRfiAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigRfiAction: %v", v)
	}
}

// GetFirewallConfigRfi - Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
type GetFirewallConfigRfi struct {
	Active bool                       `json:"active"`
	Action GetFirewallConfigRfiAction `json:"action"`
}

func (o *GetFirewallConfigRfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigRfi) GetAction() GetFirewallConfigRfiAction {
	if o == nil {
		return GetFirewallConfigRfiAction("")
	}
	return o.Action
}

type GetFirewallConfigRceAction string

const (
	GetFirewallConfigRceActionDeny GetFirewallConfigRceAction = "deny"
	GetFirewallConfigRceActionLog  GetFirewallConfigRceAction = "log"
)

func (e GetFirewallConfigRceAction) ToPointer() *GetFirewallConfigRceAction {
	return &e
}
func (e *GetFirewallConfigRceAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigRceAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigRceAction: %v", v)
	}
}

// GetFirewallConfigRce - Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
type GetFirewallConfigRce struct {
	Active bool                       `json:"active"`
	Action GetFirewallConfigRceAction `json:"action"`
}

func (o *GetFirewallConfigRce) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigRce) GetAction() GetFirewallConfigRceAction {
	if o == nil {
		return GetFirewallConfigRceAction("")
	}
	return o.Action
}

type GetFirewallConfigPhpAction string

const (
	GetFirewallConfigPhpActionDeny GetFirewallConfigPhpAction = "deny"
	GetFirewallConfigPhpActionLog  GetFirewallConfigPhpAction = "log"
)

func (e GetFirewallConfigPhpAction) ToPointer() *GetFirewallConfigPhpAction {
	return &e
}
func (e *GetFirewallConfigPhpAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigPhpAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigPhpAction: %v", v)
	}
}

// GetFirewallConfigPhp - PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
type GetFirewallConfigPhp struct {
	Active bool                       `json:"active"`
	Action GetFirewallConfigPhpAction `json:"action"`
}

func (o *GetFirewallConfigPhp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigPhp) GetAction() GetFirewallConfigPhpAction {
	if o == nil {
		return GetFirewallConfigPhpAction("")
	}
	return o.Action
}

type GetFirewallConfigGenAction string

const (
	GetFirewallConfigGenActionDeny GetFirewallConfigGenAction = "deny"
	GetFirewallConfigGenActionLog  GetFirewallConfigGenAction = "log"
)

func (e GetFirewallConfigGenAction) ToPointer() *GetFirewallConfigGenAction {
	return &e
}
func (e *GetFirewallConfigGenAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigGenAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigGenAction: %v", v)
	}
}

// GetFirewallConfigGen - Generic Attack - Provide broad protection from various undefined or novel attack vectors.
type GetFirewallConfigGen struct {
	Active bool                       `json:"active"`
	Action GetFirewallConfigGenAction `json:"action"`
}

func (o *GetFirewallConfigGen) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigGen) GetAction() GetFirewallConfigGenAction {
	if o == nil {
		return GetFirewallConfigGenAction("")
	}
	return o.Action
}

type GetFirewallConfigXSSAction string

const (
	GetFirewallConfigXSSActionDeny GetFirewallConfigXSSAction = "deny"
	GetFirewallConfigXSSActionLog  GetFirewallConfigXSSAction = "log"
)

func (e GetFirewallConfigXSSAction) ToPointer() *GetFirewallConfigXSSAction {
	return &e
}
func (e *GetFirewallConfigXSSAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigXSSAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigXSSAction: %v", v)
	}
}

// GetFirewallConfigXSS - XSS Attack - Prevent injection of malicious scripts into trusted webpages.
type GetFirewallConfigXSS struct {
	Active bool                       `json:"active"`
	Action GetFirewallConfigXSSAction `json:"action"`
}

func (o *GetFirewallConfigXSS) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigXSS) GetAction() GetFirewallConfigXSSAction {
	if o == nil {
		return GetFirewallConfigXSSAction("")
	}
	return o.Action
}

type GetFirewallConfigSqliAction string

const (
	GetFirewallConfigSqliActionDeny GetFirewallConfigSqliAction = "deny"
	GetFirewallConfigSqliActionLog  GetFirewallConfigSqliAction = "log"
)

func (e GetFirewallConfigSqliAction) ToPointer() *GetFirewallConfigSqliAction {
	return &e
}
func (e *GetFirewallConfigSqliAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSqliAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSqliAction: %v", v)
	}
}

// GetFirewallConfigSqli - SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
type GetFirewallConfigSqli struct {
	Active bool                        `json:"active"`
	Action GetFirewallConfigSqliAction `json:"action"`
}

func (o *GetFirewallConfigSqli) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigSqli) GetAction() GetFirewallConfigSqliAction {
	if o == nil {
		return GetFirewallConfigSqliAction("")
	}
	return o.Action
}

type GetFirewallConfigSfAction string

const (
	GetFirewallConfigSfActionDeny GetFirewallConfigSfAction = "deny"
	GetFirewallConfigSfActionLog  GetFirewallConfigSfAction = "log"
)

func (e GetFirewallConfigSfAction) ToPointer() *GetFirewallConfigSfAction {
	return &e
}
func (e *GetFirewallConfigSfAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigSfAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigSfAction: %v", v)
	}
}

// GetFirewallConfigSf - Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
type GetFirewallConfigSf struct {
	Active bool                      `json:"active"`
	Action GetFirewallConfigSfAction `json:"action"`
}

func (o *GetFirewallConfigSf) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigSf) GetAction() GetFirewallConfigSfAction {
	if o == nil {
		return GetFirewallConfigSfAction("")
	}
	return o.Action
}

type GetFirewallConfigJavaAction string

const (
	GetFirewallConfigJavaActionDeny GetFirewallConfigJavaAction = "deny"
	GetFirewallConfigJavaActionLog  GetFirewallConfigJavaAction = "log"
)

func (e GetFirewallConfigJavaAction) ToPointer() *GetFirewallConfigJavaAction {
	return &e
}
func (e *GetFirewallConfigJavaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GetFirewallConfigJavaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigJavaAction: %v", v)
	}
}

// GetFirewallConfigJava - Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
type GetFirewallConfigJava struct {
	Active bool                        `json:"active"`
	Action GetFirewallConfigJavaAction `json:"action"`
}

func (o *GetFirewallConfigJava) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigJava) GetAction() GetFirewallConfigJavaAction {
	if o == nil {
		return GetFirewallConfigJavaAction("")
	}
	return o.Action
}

// GetFirewallConfigCrs - Custom Ruleset
type GetFirewallConfigCrs struct {
	// Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
	Sd GetFirewallConfigSd `json:"sd"`
	// Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
	Ma GetFirewallConfigMa `json:"ma"`
	// Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
	Lfi GetFirewallConfigLfi `json:"lfi"`
	// Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
	Rfi GetFirewallConfigRfi `json:"rfi"`
	// Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
	Rce GetFirewallConfigRce `json:"rce"`
	// PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
	Php GetFirewallConfigPhp `json:"php"`
	// Generic Attack - Provide broad protection from various undefined or novel attack vectors.
	Gen GetFirewallConfigGen `json:"gen"`
	// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
	XSS GetFirewallConfigXSS `json:"xss"`
	// SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
	Sqli GetFirewallConfigSqli `json:"sqli"`
	// Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
	Sf GetFirewallConfigSf `json:"sf"`
	// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
	Java GetFirewallConfigJava `json:"java"`
}

func (o *GetFirewallConfigCrs) GetSd() GetFirewallConfigSd {
	if o == nil {
		return GetFirewallConfigSd{}
	}
	return o.Sd
}

func (o *GetFirewallConfigCrs) GetMa() GetFirewallConfigMa {
	if o == nil {
		return GetFirewallConfigMa{}
	}
	return o.Ma
}

func (o *GetFirewallConfigCrs) GetLfi() GetFirewallConfigLfi {
	if o == nil {
		return GetFirewallConfigLfi{}
	}
	return o.Lfi
}

func (o *GetFirewallConfigCrs) GetRfi() GetFirewallConfigRfi {
	if o == nil {
		return GetFirewallConfigRfi{}
	}
	return o.Rfi
}

func (o *GetFirewallConfigCrs) GetRce() GetFirewallConfigRce {
	if o == nil {
		return GetFirewallConfigRce{}
	}
	return o.Rce
}

func (o *GetFirewallConfigCrs) GetPhp() GetFirewallConfigPhp {
	if o == nil {
		return GetFirewallConfigPhp{}
	}
	return o.Php
}

func (o *GetFirewallConfigCrs) GetGen() GetFirewallConfigGen {
	if o == nil {
		return GetFirewallConfigGen{}
	}
	return o.Gen
}

func (o *GetFirewallConfigCrs) GetXSS() GetFirewallConfigXSS {
	if o == nil {
		return GetFirewallConfigXSS{}
	}
	return o.XSS
}

func (o *GetFirewallConfigCrs) GetSqli() GetFirewallConfigSqli {
	if o == nil {
		return GetFirewallConfigSqli{}
	}
	return o.Sqli
}

func (o *GetFirewallConfigCrs) GetSf() GetFirewallConfigSf {
	if o == nil {
		return GetFirewallConfigSf{}
	}
	return o.Sf
}

func (o *GetFirewallConfigCrs) GetJava() GetFirewallConfigJava {
	if o == nil {
		return GetFirewallConfigJava{}
	}
	return o.Java
}

// GetFirewallConfigType - [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
type GetFirewallConfigType string

const (
	GetFirewallConfigTypeHost             GetFirewallConfigType = "host"
	GetFirewallConfigTypePath             GetFirewallConfigType = "path"
	GetFirewallConfigTypeMethod           GetFirewallConfigType = "method"
	GetFirewallConfigTypeHeader           GetFirewallConfigType = "header"
	GetFirewallConfigTypeQuery            GetFirewallConfigType = "query"
	GetFirewallConfigTypeCookie           GetFirewallConfigType = "cookie"
	GetFirewallConfigTypeTargetPath       GetFirewallConfigType = "target_path"
	GetFirewallConfigTypeRawPath          GetFirewallConfigType = "raw_path"
	GetFirewallConfigTypeIPAddress        GetFirewallConfigType = "ip_address"
	GetFirewallConfigTypeProtocol         GetFirewallConfigType = "protocol"
	GetFirewallConfigTypeRegion           GetFirewallConfigType = "region"
	GetFirewallConfigTypeScheme           GetFirewallConfigType = "scheme"
	GetFirewallConfigTypeEnvironment      GetFirewallConfigType = "environment"
	GetFirewallConfigTypeUserAgent        GetFirewallConfigType = "user_agent"
	GetFirewallConfigTypeGeoContinent     GetFirewallConfigType = "geo_continent"
	GetFirewallConfigTypeGeoCountry       GetFirewallConfigType = "geo_country"
	GetFirewallConfigTypeGeoCountryRegion GetFirewallConfigType = "geo_country_region"
	GetFirewallConfigTypeGeoCity          GetFirewallConfigType = "geo_city"
	GetFirewallConfigTypeGeoAsNumber      GetFirewallConfigType = "geo_as_number"
	GetFirewallConfigTypeJa4Digest        GetFirewallConfigType = "ja4_digest"
	GetFirewallConfigTypeJa3Digest        GetFirewallConfigType = "ja3_digest"
	GetFirewallConfigTypeRateLimitAPIID   GetFirewallConfigType = "rate_limit_api_id"
)

func (e GetFirewallConfigType) ToPointer() *GetFirewallConfigType {
	return &e
}
func (e *GetFirewallConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "region":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = GetFirewallConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigType: %v", v)
	}
}

type GetFirewallConfigOp string

const (
	GetFirewallConfigOpRe   GetFirewallConfigOp = "re"
	GetFirewallConfigOpEq   GetFirewallConfigOp = "eq"
	GetFirewallConfigOpEx   GetFirewallConfigOp = "ex"
	GetFirewallConfigOpInc  GetFirewallConfigOp = "inc"
	GetFirewallConfigOpPre  GetFirewallConfigOp = "pre"
	GetFirewallConfigOpSuf  GetFirewallConfigOp = "suf"
	GetFirewallConfigOpSub  GetFirewallConfigOp = "sub"
	GetFirewallConfigOpGt   GetFirewallConfigOp = "gt"
	GetFirewallConfigOpGte  GetFirewallConfigOp = "gte"
	GetFirewallConfigOpLt   GetFirewallConfigOp = "lt"
	GetFirewallConfigOpLte  GetFirewallConfigOp = "lte"
	GetFirewallConfigOpNex  GetFirewallConfigOp = "nex"
	GetFirewallConfigOpNinc GetFirewallConfigOp = "ninc"
	GetFirewallConfigOpNeq  GetFirewallConfigOp = "neq"
)

func (e GetFirewallConfigOp) ToPointer() *GetFirewallConfigOp {
	return &e
}
func (e *GetFirewallConfigOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "ex":
		fallthrough
	case "inc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		fallthrough
	case "nex":
		fallthrough
	case "ninc":
		fallthrough
	case "neq":
		*e = GetFirewallConfigOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigOp: %v", v)
	}
}

type GetFirewallConfigValueType string

const (
	GetFirewallConfigValueTypeStr        GetFirewallConfigValueType = "str"
	GetFirewallConfigValueTypeNumber     GetFirewallConfigValueType = "number"
	GetFirewallConfigValueTypeArrayOfStr GetFirewallConfigValueType = "arrayOfStr"
)

type GetFirewallConfigValue struct {
	Str        *string  `queryParam:"inline"`
	Number     *float64 `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type GetFirewallConfigValueType
}

func CreateGetFirewallConfigValueStr(str string) GetFirewallConfigValue {
	typ := GetFirewallConfigValueTypeStr

	return GetFirewallConfigValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetFirewallConfigValueNumber(number float64) GetFirewallConfigValue {
	typ := GetFirewallConfigValueTypeNumber

	return GetFirewallConfigValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetFirewallConfigValueArrayOfStr(arrayOfStr []string) GetFirewallConfigValue {
	typ := GetFirewallConfigValueTypeArrayOfStr

	return GetFirewallConfigValue{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *GetFirewallConfigValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetFirewallConfigValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetFirewallConfigValueTypeNumber
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetFirewallConfigValueTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetFirewallConfigValue", string(data))
}

func (u GetFirewallConfigValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type GetFirewallConfigValue: all fields are null")
}

type GetFirewallConfigCondition struct {
	// [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
	Type  GetFirewallConfigType   `json:"type"`
	Op    GetFirewallConfigOp     `json:"op"`
	Neg   *bool                   `json:"neg,omitempty"`
	Key   *string                 `json:"key,omitempty"`
	Value *GetFirewallConfigValue `json:"value,omitempty"`
}

func (o *GetFirewallConfigCondition) GetType() GetFirewallConfigType {
	if o == nil {
		return GetFirewallConfigType("")
	}
	return o.Type
}

func (o *GetFirewallConfigCondition) GetOp() GetFirewallConfigOp {
	if o == nil {
		return GetFirewallConfigOp("")
	}
	return o.Op
}

func (o *GetFirewallConfigCondition) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *GetFirewallConfigCondition) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetFirewallConfigCondition) GetValue() *GetFirewallConfigValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetFirewallConfigConditionGroup struct {
	Conditions []GetFirewallConfigCondition `json:"conditions"`
}

func (o *GetFirewallConfigConditionGroup) GetConditions() []GetFirewallConfigCondition {
	if o == nil {
		return []GetFirewallConfigCondition{}
	}
	return o.Conditions
}

type GetFirewallConfigMitigateAction string

const (
	GetFirewallConfigMitigateActionDeny      GetFirewallConfigMitigateAction = "deny"
	GetFirewallConfigMitigateActionLog       GetFirewallConfigMitigateAction = "log"
	GetFirewallConfigMitigateActionChallenge GetFirewallConfigMitigateAction = "challenge"
	GetFirewallConfigMitigateActionBypass    GetFirewallConfigMitigateAction = "bypass"
	GetFirewallConfigMitigateActionRateLimit GetFirewallConfigMitigateAction = "rate_limit"
	GetFirewallConfigMitigateActionRedirect  GetFirewallConfigMitigateAction = "redirect"
)

func (e GetFirewallConfigMitigateAction) ToPointer() *GetFirewallConfigMitigateAction {
	return &e
}
func (e *GetFirewallConfigMitigateAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = GetFirewallConfigMitigateAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigMitigateAction: %v", v)
	}
}

type GetFirewallConfigAlgo string

const (
	GetFirewallConfigAlgoFixedWindow GetFirewallConfigAlgo = "fixed_window"
	GetFirewallConfigAlgoTokenBucket GetFirewallConfigAlgo = "token_bucket"
)

func (e GetFirewallConfigAlgo) ToPointer() *GetFirewallConfigAlgo {
	return &e
}
func (e *GetFirewallConfigAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = GetFirewallConfigAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigAlgo: %v", v)
	}
}

type GetFirewallConfigRateLimitAction string

const (
	GetFirewallConfigRateLimitActionDeny      GetFirewallConfigRateLimitAction = "deny"
	GetFirewallConfigRateLimitActionLog       GetFirewallConfigRateLimitAction = "log"
	GetFirewallConfigRateLimitActionChallenge GetFirewallConfigRateLimitAction = "challenge"
	GetFirewallConfigRateLimitActionRateLimit GetFirewallConfigRateLimitAction = "rate_limit"
)

func (e GetFirewallConfigRateLimitAction) ToPointer() *GetFirewallConfigRateLimitAction {
	return &e
}
func (e *GetFirewallConfigRateLimitAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "rate_limit":
		*e = GetFirewallConfigRateLimitAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigRateLimitAction: %v", v)
	}
}

type GetFirewallConfigRateLimit struct {
	Algo   GetFirewallConfigAlgo             `json:"algo"`
	Window float64                           `json:"window"`
	Limit  float64                           `json:"limit"`
	Keys   []string                          `json:"keys"`
	Action *GetFirewallConfigRateLimitAction `json:"action,omitempty"`
}

func (o *GetFirewallConfigRateLimit) GetAlgo() GetFirewallConfigAlgo {
	if o == nil {
		return GetFirewallConfigAlgo("")
	}
	return o.Algo
}

func (o *GetFirewallConfigRateLimit) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *GetFirewallConfigRateLimit) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *GetFirewallConfigRateLimit) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *GetFirewallConfigRateLimit) GetAction() *GetFirewallConfigRateLimitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetFirewallConfigRedirect struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *GetFirewallConfigRedirect) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *GetFirewallConfigRedirect) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type GetFirewallConfigMitigate struct {
	Action         GetFirewallConfigMitigateAction `json:"action"`
	RateLimit      *GetFirewallConfigRateLimit     `json:"rateLimit,omitempty"`
	Redirect       *GetFirewallConfigRedirect      `json:"redirect,omitempty"`
	ActionDuration *string                         `json:"actionDuration,omitempty"`
	BypassSystem   *bool                           `json:"bypassSystem,omitempty"`
}

func (o *GetFirewallConfigMitigate) GetAction() GetFirewallConfigMitigateAction {
	if o == nil {
		return GetFirewallConfigMitigateAction("")
	}
	return o.Action
}

func (o *GetFirewallConfigMitigate) GetRateLimit() *GetFirewallConfigRateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *GetFirewallConfigMitigate) GetRedirect() *GetFirewallConfigRedirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetFirewallConfigMitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *GetFirewallConfigMitigate) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type GetFirewallConfigRuleAction struct {
	Mitigate *GetFirewallConfigMitigate `json:"mitigate,omitempty"`
}

func (o *GetFirewallConfigRuleAction) GetMitigate() *GetFirewallConfigMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type GetFirewallConfigRule struct {
	ID             string                            `json:"id"`
	Name           string                            `json:"name"`
	Description    *string                           `json:"description,omitempty"`
	Active         bool                              `json:"active"`
	ConditionGroup []GetFirewallConfigConditionGroup `json:"conditionGroup"`
	Action         GetFirewallConfigRuleAction       `json:"action"`
}

func (o *GetFirewallConfigRule) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetFirewallConfigRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetFirewallConfigRule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetFirewallConfigRule) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigRule) GetConditionGroup() []GetFirewallConfigConditionGroup {
	if o == nil {
		return []GetFirewallConfigConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *GetFirewallConfigRule) GetAction() GetFirewallConfigRuleAction {
	if o == nil {
		return GetFirewallConfigRuleAction{}
	}
	return o.Action
}

type GetFirewallConfigIPAction string

const (
	GetFirewallConfigIPActionDeny      GetFirewallConfigIPAction = "deny"
	GetFirewallConfigIPActionLog       GetFirewallConfigIPAction = "log"
	GetFirewallConfigIPActionChallenge GetFirewallConfigIPAction = "challenge"
	GetFirewallConfigIPActionBypass    GetFirewallConfigIPAction = "bypass"
)

func (e GetFirewallConfigIPAction) ToPointer() *GetFirewallConfigIPAction {
	return &e
}
func (e *GetFirewallConfigIPAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		*e = GetFirewallConfigIPAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigIPAction: %v", v)
	}
}

type GetFirewallConfigIP struct {
	ID       string                    `json:"id"`
	Hostname string                    `json:"hostname"`
	IP       string                    `json:"ip"`
	Notes    *string                   `json:"notes,omitempty"`
	Action   GetFirewallConfigIPAction `json:"action"`
}

func (o *GetFirewallConfigIP) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetFirewallConfigIP) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *GetFirewallConfigIP) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *GetFirewallConfigIP) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *GetFirewallConfigIP) GetAction() GetFirewallConfigIPAction {
	if o == nil {
		return GetFirewallConfigIPAction("")
	}
	return o.Action
}

type GetFirewallConfigChange struct {
}

type GetFirewallConfigBotProtectionAction string

const (
	GetFirewallConfigBotProtectionActionDeny      GetFirewallConfigBotProtectionAction = "deny"
	GetFirewallConfigBotProtectionActionLog       GetFirewallConfigBotProtectionAction = "log"
	GetFirewallConfigBotProtectionActionChallenge GetFirewallConfigBotProtectionAction = "challenge"
)

func (e GetFirewallConfigBotProtectionAction) ToPointer() *GetFirewallConfigBotProtectionAction {
	return &e
}
func (e *GetFirewallConfigBotProtectionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = GetFirewallConfigBotProtectionAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigBotProtectionAction: %v", v)
	}
}

type GetFirewallConfigBotProtection struct {
	Active    bool                                  `json:"active"`
	Action    *GetFirewallConfigBotProtectionAction `json:"action,omitempty"`
	UpdatedAt *string                               `json:"updatedAt,omitempty"`
	UserID    *string                               `json:"userId,omitempty"`
	Username  *string                               `json:"username,omitempty"`
}

func (o *GetFirewallConfigBotProtection) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigBotProtection) GetAction() *GetFirewallConfigBotProtectionAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *GetFirewallConfigBotProtection) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetFirewallConfigBotProtection) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetFirewallConfigBotProtection) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type GetFirewallConfigAiBotsAction string

const (
	GetFirewallConfigAiBotsActionDeny      GetFirewallConfigAiBotsAction = "deny"
	GetFirewallConfigAiBotsActionLog       GetFirewallConfigAiBotsAction = "log"
	GetFirewallConfigAiBotsActionChallenge GetFirewallConfigAiBotsAction = "challenge"
)

func (e GetFirewallConfigAiBotsAction) ToPointer() *GetFirewallConfigAiBotsAction {
	return &e
}
func (e *GetFirewallConfigAiBotsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = GetFirewallConfigAiBotsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigAiBotsAction: %v", v)
	}
}

type GetFirewallConfigAiBots struct {
	Active    bool                           `json:"active"`
	Action    *GetFirewallConfigAiBotsAction `json:"action,omitempty"`
	UpdatedAt *string                        `json:"updatedAt,omitempty"`
	UserID    *string                        `json:"userId,omitempty"`
	Username  *string                        `json:"username,omitempty"`
}

func (o *GetFirewallConfigAiBots) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigAiBots) GetAction() *GetFirewallConfigAiBotsAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *GetFirewallConfigAiBots) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetFirewallConfigAiBots) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetFirewallConfigAiBots) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type GetFirewallConfigOwaspAction string

const (
	GetFirewallConfigOwaspActionDeny      GetFirewallConfigOwaspAction = "deny"
	GetFirewallConfigOwaspActionLog       GetFirewallConfigOwaspAction = "log"
	GetFirewallConfigOwaspActionChallenge GetFirewallConfigOwaspAction = "challenge"
)

func (e GetFirewallConfigOwaspAction) ToPointer() *GetFirewallConfigOwaspAction {
	return &e
}
func (e *GetFirewallConfigOwaspAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = GetFirewallConfigOwaspAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetFirewallConfigOwaspAction: %v", v)
	}
}

type GetFirewallConfigOwasp struct {
	Active    bool                          `json:"active"`
	Action    *GetFirewallConfigOwaspAction `json:"action,omitempty"`
	UpdatedAt *string                       `json:"updatedAt,omitempty"`
	UserID    *string                       `json:"userId,omitempty"`
	Username  *string                       `json:"username,omitempty"`
}

func (o *GetFirewallConfigOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetFirewallConfigOwasp) GetAction() *GetFirewallConfigOwaspAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *GetFirewallConfigOwasp) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetFirewallConfigOwasp) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *GetFirewallConfigOwasp) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type GetFirewallConfigManagedRules struct {
	BotProtection *GetFirewallConfigBotProtection `json:"bot_protection,omitempty"`
	AiBots        *GetFirewallConfigAiBots        `json:"ai_bots,omitempty"`
	Owasp         *GetFirewallConfigOwasp         `json:"owasp,omitempty"`
}

func (o *GetFirewallConfigManagedRules) GetBotProtection() *GetFirewallConfigBotProtection {
	if o == nil {
		return nil
	}
	return o.BotProtection
}

func (o *GetFirewallConfigManagedRules) GetAiBots() *GetFirewallConfigAiBots {
	if o == nil {
		return nil
	}
	return o.AiBots
}

func (o *GetFirewallConfigManagedRules) GetOwasp() *GetFirewallConfigOwasp {
	if o == nil {
		return nil
	}
	return o.Owasp
}

// GetFirewallConfigResponseBody - If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
type GetFirewallConfigResponseBody struct {
	OwnerID         string  `json:"ownerId"`
	ProjectKey      string  `json:"projectKey"`
	ID              string  `json:"id"`
	Version         float64 `json:"version"`
	UpdatedAt       string  `json:"updatedAt"`
	FirewallEnabled bool    `json:"firewallEnabled"`
	// Custom Ruleset
	Crs          GetFirewallConfigCrs           `json:"crs"`
	Rules        []GetFirewallConfigRule        `json:"rules"`
	Ips          []GetFirewallConfigIP          `json:"ips"`
	Changes      []GetFirewallConfigChange      `json:"changes"`
	ManagedRules *GetFirewallConfigManagedRules `json:"managedRules,omitempty"`
}

func (o *GetFirewallConfigResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetFirewallConfigResponseBody) GetProjectKey() string {
	if o == nil {
		return ""
	}
	return o.ProjectKey
}

func (o *GetFirewallConfigResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetFirewallConfigResponseBody) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *GetFirewallConfigResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *GetFirewallConfigResponseBody) GetFirewallEnabled() bool {
	if o == nil {
		return false
	}
	return o.FirewallEnabled
}

func (o *GetFirewallConfigResponseBody) GetCrs() GetFirewallConfigCrs {
	if o == nil {
		return GetFirewallConfigCrs{}
	}
	return o.Crs
}

func (o *GetFirewallConfigResponseBody) GetRules() []GetFirewallConfigRule {
	if o == nil {
		return []GetFirewallConfigRule{}
	}
	return o.Rules
}

func (o *GetFirewallConfigResponseBody) GetIps() []GetFirewallConfigIP {
	if o == nil {
		return []GetFirewallConfigIP{}
	}
	return o.Ips
}

func (o *GetFirewallConfigResponseBody) GetChanges() []GetFirewallConfigChange {
	if o == nil {
		return []GetFirewallConfigChange{}
	}
	return o.Changes
}

func (o *GetFirewallConfigResponseBody) GetManagedRules() *GetFirewallConfigManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

type GetFirewallConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// If the firewall configuration includes a [custom managed ruleset](https://vercel.com/docs/security/vercel-waf/managed-rulesets), it will include a `crs` item that has the following values: sd: Scanner Detection ma: Multipart Attack lfi: Local File Inclusion Attack rfi: Remote File Inclusion Attack rce: Remote Execution Attack php: PHP Attack gen: Generic Attack xss: XSS Attack sqli: SQL Injection Attack sf: Session Fixation Attack java: Java Attack
	Object *GetFirewallConfigResponseBody
}

func (o *GetFirewallConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetFirewallConfigResponse) GetObject() *GetFirewallConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
