// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetIntegrationResourceRequest struct {
	// The ID of the integration configuration (installation) the resource belongs to
	IntegrationConfigurationID string `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	// The ID provided by the 3rd party provider for the given resource
	ResourceID string `pathParam:"style=simple,explode=false,name=resourceId"`
}

func (o *GetIntegrationResourceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *GetIntegrationResourceRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

// GetIntegrationResourceStatus - The current status of the resource
type GetIntegrationResourceStatus string

const (
	GetIntegrationResourceStatusReady       GetIntegrationResourceStatus = "ready"
	GetIntegrationResourceStatusPending     GetIntegrationResourceStatus = "pending"
	GetIntegrationResourceStatusSuspended   GetIntegrationResourceStatus = "suspended"
	GetIntegrationResourceStatusResumed     GetIntegrationResourceStatus = "resumed"
	GetIntegrationResourceStatusUninstalled GetIntegrationResourceStatus = "uninstalled"
	GetIntegrationResourceStatusError       GetIntegrationResourceStatus = "error"
)

func (e GetIntegrationResourceStatus) ToPointer() *GetIntegrationResourceStatus {
	return &e
}
func (e *GetIntegrationResourceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ready":
		fallthrough
	case "pending":
		fallthrough
	case "suspended":
		fallthrough
	case "resumed":
		fallthrough
	case "uninstalled":
		fallthrough
	case "error":
		*e = GetIntegrationResourceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationResourceStatus: %v", v)
	}
}

type GetIntegrationResourceExperimentation struct {
	EdgeConfigSyncingEnabled *bool   `json:"edgeConfigSyncingEnabled,omitempty"`
	EdgeConfigID             *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID        *string `json:"edgeConfigTokenId,omitempty"`
}

func (o *GetIntegrationResourceExperimentation) GetEdgeConfigSyncingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSyncingEnabled
}

func (o *GetIntegrationResourceExperimentation) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetIntegrationResourceExperimentation) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

// GetIntegrationResourceProtocolSettings - Any settings provided for the resource to support its product's protocols
type GetIntegrationResourceProtocolSettings struct {
	Experimentation *GetIntegrationResourceExperimentation `json:"experimentation,omitempty"`
}

func (o *GetIntegrationResourceProtocolSettings) GetExperimentation() *GetIntegrationResourceExperimentation {
	if o == nil {
		return nil
	}
	return o.Experimentation
}

type GetIntegrationResourceLevel string

const (
	GetIntegrationResourceLevelError GetIntegrationResourceLevel = "error"
	GetIntegrationResourceLevelInfo  GetIntegrationResourceLevel = "info"
	GetIntegrationResourceLevelWarn  GetIntegrationResourceLevel = "warn"
)

func (e GetIntegrationResourceLevel) ToPointer() *GetIntegrationResourceLevel {
	return &e
}
func (e *GetIntegrationResourceLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		*e = GetIntegrationResourceLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationResourceLevel: %v", v)
	}
}

// GetIntegrationResourceNotification - The notification, if set, displayed to the user when viewing the resource in Vercel
type GetIntegrationResourceNotification struct {
	Level   GetIntegrationResourceLevel `json:"level"`
	Title   string                      `json:"title"`
	Message *string                     `json:"message,omitempty"`
	Href    *string                     `json:"href,omitempty"`
}

func (o *GetIntegrationResourceNotification) GetLevel() GetIntegrationResourceLevel {
	if o == nil {
		return GetIntegrationResourceLevel("")
	}
	return o.Level
}

func (o *GetIntegrationResourceNotification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetIntegrationResourceNotification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetIntegrationResourceNotification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

type GetIntegrationResourceMetadataType string

const (
	GetIntegrationResourceMetadataTypeStr           GetIntegrationResourceMetadataType = "str"
	GetIntegrationResourceMetadataTypeNumber        GetIntegrationResourceMetadataType = "number"
	GetIntegrationResourceMetadataTypeBoolean       GetIntegrationResourceMetadataType = "boolean"
	GetIntegrationResourceMetadataTypeArrayOfStr    GetIntegrationResourceMetadataType = "arrayOfStr"
	GetIntegrationResourceMetadataTypeArrayOfNumber GetIntegrationResourceMetadataType = "arrayOfNumber"
)

type GetIntegrationResourceMetadata struct {
	Str           *string   `queryParam:"inline"`
	Number        *float64  `queryParam:"inline"`
	Boolean       *bool     `queryParam:"inline"`
	ArrayOfStr    []string  `queryParam:"inline"`
	ArrayOfNumber []float64 `queryParam:"inline"`

	Type GetIntegrationResourceMetadataType
}

func CreateGetIntegrationResourceMetadataStr(str string) GetIntegrationResourceMetadata {
	typ := GetIntegrationResourceMetadataTypeStr

	return GetIntegrationResourceMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIntegrationResourceMetadataNumber(number float64) GetIntegrationResourceMetadata {
	typ := GetIntegrationResourceMetadataTypeNumber

	return GetIntegrationResourceMetadata{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetIntegrationResourceMetadataBoolean(boolean bool) GetIntegrationResourceMetadata {
	typ := GetIntegrationResourceMetadataTypeBoolean

	return GetIntegrationResourceMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateGetIntegrationResourceMetadataArrayOfStr(arrayOfStr []string) GetIntegrationResourceMetadata {
	typ := GetIntegrationResourceMetadataTypeArrayOfStr

	return GetIntegrationResourceMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateGetIntegrationResourceMetadataArrayOfNumber(arrayOfNumber []float64) GetIntegrationResourceMetadata {
	typ := GetIntegrationResourceMetadataTypeArrayOfNumber

	return GetIntegrationResourceMetadata{
		ArrayOfNumber: arrayOfNumber,
		Type:          typ,
	}
}

func (u *GetIntegrationResourceMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIntegrationResourceMetadataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetIntegrationResourceMetadataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetIntegrationResourceMetadataTypeBoolean
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetIntegrationResourceMetadataTypeArrayOfStr
		return nil
	}

	var arrayOfNumber []float64 = []float64{}
	if err := utils.UnmarshalJSON(data, &arrayOfNumber, "", true, true); err == nil {
		u.ArrayOfNumber = arrayOfNumber
		u.Type = GetIntegrationResourceMetadataTypeArrayOfNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetIntegrationResourceMetadata", string(data))
}

func (u GetIntegrationResourceMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfNumber != nil {
		return utils.MarshalJSON(u.ArrayOfNumber, "", true)
	}

	return nil, errors.New("could not marshal union type GetIntegrationResourceMetadata: all fields are null")
}

type GetIntegrationResourceResponseBody struct {
	// The ID provided by the 3rd party provider for the given resource
	ID string `json:"id"`
	// The ID assigned by Vercel for the given resource
	InternalID string `json:"internalId"`
	// The name of the resource as it is recorded in Vercel
	Name string `json:"name"`
	// The current status of the resource
	Status *GetIntegrationResourceStatus `json:"status,omitempty"`
	// The ID of the product the resource is derived from
	ProductID string `json:"productId"`
	// Any settings provided for the resource to support its product's protocols
	ProtocolSettings *GetIntegrationResourceProtocolSettings `json:"protocolSettings,omitempty"`
	// The notification, if set, displayed to the user when viewing the resource in Vercel
	Notification *GetIntegrationResourceNotification `json:"notification,omitempty"`
	// The ID of the billing plan the resource is subscribed to, if applicable
	BillingPlanID *string `json:"billingPlanId,omitempty"`
	// The configured metadata for the resource as defined by its product's Metadata Schema
	Metadata map[string]GetIntegrationResourceMetadata `json:"metadata,omitempty"`
}

func (o *GetIntegrationResourceResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetIntegrationResourceResponseBody) GetInternalID() string {
	if o == nil {
		return ""
	}
	return o.InternalID
}

func (o *GetIntegrationResourceResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetIntegrationResourceResponseBody) GetStatus() *GetIntegrationResourceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetIntegrationResourceResponseBody) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetIntegrationResourceResponseBody) GetProtocolSettings() *GetIntegrationResourceProtocolSettings {
	if o == nil {
		return nil
	}
	return o.ProtocolSettings
}

func (o *GetIntegrationResourceResponseBody) GetNotification() *GetIntegrationResourceNotification {
	if o == nil {
		return nil
	}
	return o.Notification
}

func (o *GetIntegrationResourceResponseBody) GetBillingPlanID() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanID
}

func (o *GetIntegrationResourceResponseBody) GetMetadata() map[string]GetIntegrationResourceMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type GetIntegrationResourceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetIntegrationResourceResponseBody
}

func (o *GetIntegrationResourceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetIntegrationResourceResponse) GetObject() *GetIntegrationResourceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
