// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetIntegrationResourcesRequest struct {
	IntegrationConfigurationID string `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
}

func (o *GetIntegrationResourcesRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

// GetIntegrationResourcesStatus - The current status of the resource
type GetIntegrationResourcesStatus string

const (
	GetIntegrationResourcesStatusReady       GetIntegrationResourcesStatus = "ready"
	GetIntegrationResourcesStatusPending     GetIntegrationResourcesStatus = "pending"
	GetIntegrationResourcesStatusSuspended   GetIntegrationResourcesStatus = "suspended"
	GetIntegrationResourcesStatusResumed     GetIntegrationResourcesStatus = "resumed"
	GetIntegrationResourcesStatusUninstalled GetIntegrationResourcesStatus = "uninstalled"
	GetIntegrationResourcesStatusError       GetIntegrationResourcesStatus = "error"
)

func (e GetIntegrationResourcesStatus) ToPointer() *GetIntegrationResourcesStatus {
	return &e
}
func (e *GetIntegrationResourcesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ready":
		fallthrough
	case "pending":
		fallthrough
	case "suspended":
		fallthrough
	case "resumed":
		fallthrough
	case "uninstalled":
		fallthrough
	case "error":
		*e = GetIntegrationResourcesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationResourcesStatus: %v", v)
	}
}

type GetIntegrationResourcesExperimentation struct {
	EdgeConfigSyncingEnabled *bool   `json:"edgeConfigSyncingEnabled,omitempty"`
	EdgeConfigID             *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID        *string `json:"edgeConfigTokenId,omitempty"`
}

func (o *GetIntegrationResourcesExperimentation) GetEdgeConfigSyncingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSyncingEnabled
}

func (o *GetIntegrationResourcesExperimentation) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetIntegrationResourcesExperimentation) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

// GetIntegrationResourcesProtocolSettings - Any settings provided for the resource to support its product's protocols
type GetIntegrationResourcesProtocolSettings struct {
	Experimentation *GetIntegrationResourcesExperimentation `json:"experimentation,omitempty"`
}

func (o *GetIntegrationResourcesProtocolSettings) GetExperimentation() *GetIntegrationResourcesExperimentation {
	if o == nil {
		return nil
	}
	return o.Experimentation
}

type GetIntegrationResourcesLevel string

const (
	GetIntegrationResourcesLevelError GetIntegrationResourcesLevel = "error"
	GetIntegrationResourcesLevelInfo  GetIntegrationResourcesLevel = "info"
	GetIntegrationResourcesLevelWarn  GetIntegrationResourcesLevel = "warn"
)

func (e GetIntegrationResourcesLevel) ToPointer() *GetIntegrationResourcesLevel {
	return &e
}
func (e *GetIntegrationResourcesLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		*e = GetIntegrationResourcesLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetIntegrationResourcesLevel: %v", v)
	}
}

// GetIntegrationResourcesNotification - The notification, if set, displayed to the user when viewing the resource in Vercel
type GetIntegrationResourcesNotification struct {
	Level   GetIntegrationResourcesLevel `json:"level"`
	Title   string                       `json:"title"`
	Message *string                      `json:"message,omitempty"`
	Href    *string                      `json:"href,omitempty"`
}

func (o *GetIntegrationResourcesNotification) GetLevel() GetIntegrationResourcesLevel {
	if o == nil {
		return GetIntegrationResourcesLevel("")
	}
	return o.Level
}

func (o *GetIntegrationResourcesNotification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetIntegrationResourcesNotification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetIntegrationResourcesNotification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

type GetIntegrationResourcesMetadataType string

const (
	GetIntegrationResourcesMetadataTypeStr           GetIntegrationResourcesMetadataType = "str"
	GetIntegrationResourcesMetadataTypeNumber        GetIntegrationResourcesMetadataType = "number"
	GetIntegrationResourcesMetadataTypeBoolean       GetIntegrationResourcesMetadataType = "boolean"
	GetIntegrationResourcesMetadataTypeArrayOfStr    GetIntegrationResourcesMetadataType = "arrayOfStr"
	GetIntegrationResourcesMetadataTypeArrayOfNumber GetIntegrationResourcesMetadataType = "arrayOfNumber"
)

type GetIntegrationResourcesMetadata struct {
	Str           *string   `queryParam:"inline"`
	Number        *float64  `queryParam:"inline"`
	Boolean       *bool     `queryParam:"inline"`
	ArrayOfStr    []string  `queryParam:"inline"`
	ArrayOfNumber []float64 `queryParam:"inline"`

	Type GetIntegrationResourcesMetadataType
}

func CreateGetIntegrationResourcesMetadataStr(str string) GetIntegrationResourcesMetadata {
	typ := GetIntegrationResourcesMetadataTypeStr

	return GetIntegrationResourcesMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetIntegrationResourcesMetadataNumber(number float64) GetIntegrationResourcesMetadata {
	typ := GetIntegrationResourcesMetadataTypeNumber

	return GetIntegrationResourcesMetadata{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetIntegrationResourcesMetadataBoolean(boolean bool) GetIntegrationResourcesMetadata {
	typ := GetIntegrationResourcesMetadataTypeBoolean

	return GetIntegrationResourcesMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateGetIntegrationResourcesMetadataArrayOfStr(arrayOfStr []string) GetIntegrationResourcesMetadata {
	typ := GetIntegrationResourcesMetadataTypeArrayOfStr

	return GetIntegrationResourcesMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateGetIntegrationResourcesMetadataArrayOfNumber(arrayOfNumber []float64) GetIntegrationResourcesMetadata {
	typ := GetIntegrationResourcesMetadataTypeArrayOfNumber

	return GetIntegrationResourcesMetadata{
		ArrayOfNumber: arrayOfNumber,
		Type:          typ,
	}
}

func (u *GetIntegrationResourcesMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetIntegrationResourcesMetadataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetIntegrationResourcesMetadataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetIntegrationResourcesMetadataTypeBoolean
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetIntegrationResourcesMetadataTypeArrayOfStr
		return nil
	}

	var arrayOfNumber []float64 = []float64{}
	if err := utils.UnmarshalJSON(data, &arrayOfNumber, "", true, true); err == nil {
		u.ArrayOfNumber = arrayOfNumber
		u.Type = GetIntegrationResourcesMetadataTypeArrayOfNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetIntegrationResourcesMetadata", string(data))
}

func (u GetIntegrationResourcesMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfNumber != nil {
		return utils.MarshalJSON(u.ArrayOfNumber, "", true)
	}

	return nil, errors.New("could not marshal union type GetIntegrationResourcesMetadata: all fields are null")
}

type Resource struct {
	// The ID provided by the partner for the given resource
	PartnerID string `json:"partnerId"`
	// The ID assigned by Vercel for the given resource
	InternalID string `json:"internalId"`
	// The name of the resource as it is recorded in Vercel
	Name string `json:"name"`
	// The current status of the resource
	Status *GetIntegrationResourcesStatus `json:"status,omitempty"`
	// The ID of the product the resource is derived from
	ProductID string `json:"productId"`
	// Any settings provided for the resource to support its product's protocols
	ProtocolSettings *GetIntegrationResourcesProtocolSettings `json:"protocolSettings,omitempty"`
	// The notification, if set, displayed to the user when viewing the resource in Vercel
	Notification *GetIntegrationResourcesNotification `json:"notification,omitempty"`
	// The ID of the billing plan the resource is subscribed to, if applicable
	BillingPlanID *string `json:"billingPlanId,omitempty"`
	// The configured metadata for the resource as defined by its product's Metadata Schema
	Metadata map[string]GetIntegrationResourcesMetadata `json:"metadata,omitempty"`
}

func (o *Resource) GetPartnerID() string {
	if o == nil {
		return ""
	}
	return o.PartnerID
}

func (o *Resource) GetInternalID() string {
	if o == nil {
		return ""
	}
	return o.InternalID
}

func (o *Resource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Resource) GetStatus() *GetIntegrationResourcesStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Resource) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Resource) GetProtocolSettings() *GetIntegrationResourcesProtocolSettings {
	if o == nil {
		return nil
	}
	return o.ProtocolSettings
}

func (o *Resource) GetNotification() *GetIntegrationResourcesNotification {
	if o == nil {
		return nil
	}
	return o.Notification
}

func (o *Resource) GetBillingPlanID() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanID
}

func (o *Resource) GetMetadata() map[string]GetIntegrationResourcesMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type GetIntegrationResourcesResponseBody struct {
	Resources []Resource `json:"resources"`
}

func (o *GetIntegrationResourcesResponseBody) GetResources() []Resource {
	if o == nil {
		return []Resource{}
	}
	return o.Resources
}

type GetIntegrationResourcesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetIntegrationResourcesResponseBody
}

func (o *GetIntegrationResourcesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetIntegrationResourcesResponse) GetObject() *GetIntegrationResourcesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
