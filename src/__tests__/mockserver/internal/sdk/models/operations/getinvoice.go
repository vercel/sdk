// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetInvoiceRequest struct {
	IntegrationConfigurationID string `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	InvoiceID                  string `pathParam:"style=simple,explode=false,name=invoiceId"`
}

func (o *GetInvoiceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *GetInvoiceRequest) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

// State - Invoice state.
type State string

const (
	StatePending         State = "pending"
	StateScheduled       State = "scheduled"
	StateInvoiced        State = "invoiced"
	StatePaid            State = "paid"
	StateNotpaid         State = "notpaid"
	StateRefundRequested State = "refund_requested"
	StateRefunded        State = "refunded"
)

func (e State) ToPointer() *State {
	return &e
}
func (e *State) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "scheduled":
		fallthrough
	case "invoiced":
		fallthrough
	case "paid":
		fallthrough
	case "notpaid":
		fallthrough
	case "refund_requested":
		fallthrough
	case "refunded":
		*e = State(v)
		return nil
	default:
		return fmt.Errorf("invalid value for State: %v", v)
	}
}

// GetInvoicePeriod - Subscription period for this billing cycle. ISO 8601 timestamps.
type GetInvoicePeriod struct {
	Start string `json:"start"`
	End   string `json:"end"`
}

func (o *GetInvoicePeriod) GetStart() string {
	if o == nil {
		return ""
	}
	return o.Start
}

func (o *GetInvoicePeriod) GetEnd() string {
	if o == nil {
		return ""
	}
	return o.End
}

// GetInvoiceItems - Invoice items.
type GetInvoiceItems struct {
	// Partner's billing plan ID.
	BillingPlanID string `json:"billingPlanId"`
	// Partner's resource ID. If not specified, indicates installation-wide item.
	ResourceID *string `json:"resourceId,omitempty"`
	// Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
	Start *string `json:"start,omitempty"`
	// Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
	End *string `json:"end,omitempty"`
	// Invoice item name.
	Name string `json:"name"`
	// Additional item details.
	Details *string `json:"details,omitempty"`
	// Item price. A dollar-based decimal string.
	Price string `json:"price"`
	// Item quantity.
	Quantity float64 `json:"quantity"`
	// Units for item's quantity.
	Units string `json:"units"`
	// Item total. A dollar-based decimal string.
	Total string `json:"total"`
}

func (o *GetInvoiceItems) GetBillingPlanID() string {
	if o == nil {
		return ""
	}
	return o.BillingPlanID
}

func (o *GetInvoiceItems) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *GetInvoiceItems) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *GetInvoiceItems) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *GetInvoiceItems) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetInvoiceItems) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *GetInvoiceItems) GetPrice() string {
	if o == nil {
		return ""
	}
	return o.Price
}

func (o *GetInvoiceItems) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *GetInvoiceItems) GetUnits() string {
	if o == nil {
		return ""
	}
	return o.Units
}

func (o *GetInvoiceItems) GetTotal() string {
	if o == nil {
		return ""
	}
	return o.Total
}

// GetInvoiceDiscounts - Invoice discounts.
type GetInvoiceDiscounts struct {
	// Partner's billing plan ID.
	BillingPlanID string `json:"billingPlanId"`
	// Partner's resource ID. If not specified, indicates installation-wide discount.
	ResourceID *string `json:"resourceId,omitempty"`
	// Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
	Start *string `json:"start,omitempty"`
	// Start and end are only needed if different from the period's start/end. ISO 8601 timestamp.
	End *string `json:"end,omitempty"`
	// Discount name.
	Name string `json:"name"`
	// Additional discount details.
	Details *string `json:"details,omitempty"`
	// Discount amount. A dollar-based decimal string.
	Amount string `json:"amount"`
}

func (o *GetInvoiceDiscounts) GetBillingPlanID() string {
	if o == nil {
		return ""
	}
	return o.BillingPlanID
}

func (o *GetInvoiceDiscounts) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *GetInvoiceDiscounts) GetStart() *string {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *GetInvoiceDiscounts) GetEnd() *string {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *GetInvoiceDiscounts) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetInvoiceDiscounts) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *GetInvoiceDiscounts) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

type GetInvoiceResponseBody struct {
	// Whether the invoice is in the testmode (no real transaction created).
	Test *bool `json:"test,omitempty"`
	// Vercel Marketplace Invoice ID.
	InvoiceID string `json:"invoiceId"`
	// Partner-supplied Invoice ID, if applicable.
	ExternalID *string `json:"externalId,omitempty"`
	// Invoice state.
	State State `json:"state"`
	// User-readable invoice number.
	InvoiceNumber *string `json:"invoiceNumber,omitempty"`
	// Invoice date. ISO 8601 timestamp.
	InvoiceDate string `json:"invoiceDate"`
	// Subscription period for this billing cycle. ISO 8601 timestamps.
	Period GetInvoicePeriod `json:"period"`
	// Additional memo for the invoice.
	Memo *string `json:"memo,omitempty"`
	// Invoice items.
	Items []GetInvoiceItems `json:"items"`
	// Invoice discounts.
	Discounts []GetInvoiceDiscounts `json:"discounts,omitempty"`
	// Invoice total amount. A dollar-based decimal string.
	Total string `json:"total"`
	// The reason for refund. Only applicable for states "refunded" or "refund_request".
	RefundReason *string `json:"refundReason,omitempty"`
	// Refund amount. Only applicable for states "refunded" or "refund_request". A dollar-based decimal string.
	RefundTotal *string `json:"refundTotal,omitempty"`
	// System creation date. ISO 8601 timestamp.
	Created string `json:"created"`
	// System update date. ISO 8601 timestamp.
	Updated string `json:"updated"`
}

func (o *GetInvoiceResponseBody) GetTest() *bool {
	if o == nil {
		return nil
	}
	return o.Test
}

func (o *GetInvoiceResponseBody) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *GetInvoiceResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *GetInvoiceResponseBody) GetState() State {
	if o == nil {
		return State("")
	}
	return o.State
}

func (o *GetInvoiceResponseBody) GetInvoiceNumber() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceNumber
}

func (o *GetInvoiceResponseBody) GetInvoiceDate() string {
	if o == nil {
		return ""
	}
	return o.InvoiceDate
}

func (o *GetInvoiceResponseBody) GetPeriod() GetInvoicePeriod {
	if o == nil {
		return GetInvoicePeriod{}
	}
	return o.Period
}

func (o *GetInvoiceResponseBody) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *GetInvoiceResponseBody) GetItems() []GetInvoiceItems {
	if o == nil {
		return []GetInvoiceItems{}
	}
	return o.Items
}

func (o *GetInvoiceResponseBody) GetDiscounts() []GetInvoiceDiscounts {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *GetInvoiceResponseBody) GetTotal() string {
	if o == nil {
		return ""
	}
	return o.Total
}

func (o *GetInvoiceResponseBody) GetRefundReason() *string {
	if o == nil {
		return nil
	}
	return o.RefundReason
}

func (o *GetInvoiceResponseBody) GetRefundTotal() *string {
	if o == nil {
		return nil
	}
	return o.RefundTotal
}

func (o *GetInvoiceResponseBody) GetCreated() string {
	if o == nil {
		return ""
	}
	return o.Created
}

func (o *GetInvoiceResponseBody) GetUpdated() string {
	if o == nil {
		return ""
	}
	return o.Updated
}

type GetInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetInvoiceResponseBody
}

func (o *GetInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetInvoiceResponse) GetObject() *GetInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
