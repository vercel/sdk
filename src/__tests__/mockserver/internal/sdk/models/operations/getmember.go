// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetMemberRequest struct {
	IntegrationConfigurationID string `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	MemberID                   string `pathParam:"style=simple,explode=false,name=memberId"`
}

func (o *GetMemberRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *GetMemberRequest) GetMemberID() string {
	if o == nil {
		return ""
	}
	return o.MemberID
}

// GetMemberRole - "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
type GetMemberRole string

const (
	GetMemberRoleAdmin GetMemberRole = "ADMIN"
	GetMemberRoleUser  GetMemberRole = "USER"
)

func (e GetMemberRole) ToPointer() *GetMemberRole {
	return &e
}
func (e *GetMemberRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "USER":
		*e = GetMemberRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetMemberRole: %v", v)
	}
}

type GetMemberResponseBody struct {
	ID string `json:"id"`
	// "The `ADMIN` role, by default, is provided to users capable of installing integrations, while the `USER` role can be granted to Vercel users with the Vercel `Billing` or Vercel `Viewer` role, which are considered to be Read-Only roles."
	Role GetMemberRole `json:"role"`
}

func (o *GetMemberResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetMemberResponseBody) GetRole() GetMemberRole {
	if o == nil {
		return GetMemberRole("")
	}
	return o.Role
}

type GetMemberResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetMemberResponseBody
}

func (o *GetMemberResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetMemberResponse) GetObject() *GetMemberResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
