// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetOrderRequest struct {
	OrderID string `pathParam:"style=simple,explode=false,name=orderId"`
}

func (o *GetOrderRequest) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

type PurchaseTypeTransfer string

const (
	PurchaseTypeTransferTransfer PurchaseTypeTransfer = "transfer"
)

func (e PurchaseTypeTransfer) ToPointer() *PurchaseTypeTransfer {
	return &e
}
func (e *PurchaseTypeTransfer) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "transfer":
		*e = PurchaseTypeTransfer(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseTypeTransfer: %v", v)
	}
}

type DomainStatus3 string

const (
	DomainStatus3Pending      DomainStatus3 = "pending"
	DomainStatus3Completed    DomainStatus3 = "completed"
	DomainStatus3Failed       DomainStatus3 = "failed"
	DomainStatus3Refunded     DomainStatus3 = "refunded"
	DomainStatus3RefundFailed DomainStatus3 = "refund-failed"
)

func (e DomainStatus3) ToPointer() *DomainStatus3 {
	return &e
}
func (e *DomainStatus3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		fallthrough
	case "refunded":
		fallthrough
	case "refund-failed":
		*e = DomainStatus3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainStatus3: %v", v)
	}
}

type DomainTransfer struct {
	PurchaseType PurchaseTypeTransfer `json:"purchaseType"`
	AutoRenew    bool                 `json:"autoRenew"`
	// The number of years the domain is being transferred for.
	Years      float64       `json:"years"`
	DomainName string        `json:"domainName"`
	Status     DomainStatus3 `json:"status"`
	// The price for the domain.
	Price float64 `json:"price"`
}

func (d DomainTransfer) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DomainTransfer) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"purchaseType", "autoRenew", "years", "domainName", "status", "price"}); err != nil {
		return err
	}
	return nil
}

func (o *DomainTransfer) GetPurchaseType() PurchaseTypeTransfer {
	if o == nil {
		return PurchaseTypeTransfer("")
	}
	return o.PurchaseType
}

func (o *DomainTransfer) GetAutoRenew() bool {
	if o == nil {
		return false
	}
	return o.AutoRenew
}

func (o *DomainTransfer) GetYears() float64 {
	if o == nil {
		return 0.0
	}
	return o.Years
}

func (o *DomainTransfer) GetDomainName() string {
	if o == nil {
		return ""
	}
	return o.DomainName
}

func (o *DomainTransfer) GetStatus() DomainStatus3 {
	if o == nil {
		return DomainStatus3("")
	}
	return o.Status
}

func (o *DomainTransfer) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type PurchaseTypeRenewal string

const (
	PurchaseTypeRenewalRenewal PurchaseTypeRenewal = "renewal"
)

func (e PurchaseTypeRenewal) ToPointer() *PurchaseTypeRenewal {
	return &e
}
func (e *PurchaseTypeRenewal) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "renewal":
		*e = PurchaseTypeRenewal(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseTypeRenewal: %v", v)
	}
}

type DomainStatus2 string

const (
	DomainStatus2Pending      DomainStatus2 = "pending"
	DomainStatus2Completed    DomainStatus2 = "completed"
	DomainStatus2Failed       DomainStatus2 = "failed"
	DomainStatus2Refunded     DomainStatus2 = "refunded"
	DomainStatus2RefundFailed DomainStatus2 = "refund-failed"
)

func (e DomainStatus2) ToPointer() *DomainStatus2 {
	return &e
}
func (e *DomainStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		fallthrough
	case "refunded":
		fallthrough
	case "refund-failed":
		*e = DomainStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainStatus2: %v", v)
	}
}

type DomainRenewal struct {
	PurchaseType PurchaseTypeRenewal `json:"purchaseType"`
	// The number of years the domain is being renewed for.
	Years      float64       `json:"years"`
	DomainName string        `json:"domainName"`
	Status     DomainStatus2 `json:"status"`
	// The price for the domain.
	Price float64 `json:"price"`
}

func (d DomainRenewal) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DomainRenewal) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"purchaseType", "years", "domainName", "status", "price"}); err != nil {
		return err
	}
	return nil
}

func (o *DomainRenewal) GetPurchaseType() PurchaseTypeRenewal {
	if o == nil {
		return PurchaseTypeRenewal("")
	}
	return o.PurchaseType
}

func (o *DomainRenewal) GetYears() float64 {
	if o == nil {
		return 0.0
	}
	return o.Years
}

func (o *DomainRenewal) GetDomainName() string {
	if o == nil {
		return ""
	}
	return o.DomainName
}

func (o *DomainRenewal) GetStatus() DomainStatus2 {
	if o == nil {
		return DomainStatus2("")
	}
	return o.Status
}

func (o *DomainRenewal) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type PurchaseTypePurchase string

const (
	PurchaseTypePurchasePurchase PurchaseTypePurchase = "purchase"
)

func (e PurchaseTypePurchase) ToPointer() *PurchaseTypePurchase {
	return &e
}
func (e *PurchaseTypePurchase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "purchase":
		*e = PurchaseTypePurchase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PurchaseTypePurchase: %v", v)
	}
}

type DomainStatus1 string

const (
	DomainStatus1Pending      DomainStatus1 = "pending"
	DomainStatus1Completed    DomainStatus1 = "completed"
	DomainStatus1Failed       DomainStatus1 = "failed"
	DomainStatus1Refunded     DomainStatus1 = "refunded"
	DomainStatus1RefundFailed DomainStatus1 = "refund-failed"
)

func (e DomainStatus1) ToPointer() *DomainStatus1 {
	return &e
}
func (e *DomainStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		fallthrough
	case "refunded":
		fallthrough
	case "refund-failed":
		*e = DomainStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DomainStatus1: %v", v)
	}
}

type DomainPurchase struct {
	PurchaseType PurchaseTypePurchase `json:"purchaseType"`
	AutoRenew    bool                 `json:"autoRenew"`
	// The number of years the domain is being purchased for.
	Years      float64       `json:"years"`
	DomainName string        `json:"domainName"`
	Status     DomainStatus1 `json:"status"`
	// The price for the domain.
	Price float64 `json:"price"`
}

func (d DomainPurchase) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DomainPurchase) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"purchaseType", "autoRenew", "years", "domainName", "status", "price"}); err != nil {
		return err
	}
	return nil
}

func (o *DomainPurchase) GetPurchaseType() PurchaseTypePurchase {
	if o == nil {
		return PurchaseTypePurchase("")
	}
	return o.PurchaseType
}

func (o *DomainPurchase) GetAutoRenew() bool {
	if o == nil {
		return false
	}
	return o.AutoRenew
}

func (o *DomainPurchase) GetYears() float64 {
	if o == nil {
		return 0.0
	}
	return o.Years
}

func (o *DomainPurchase) GetDomainName() string {
	if o == nil {
		return ""
	}
	return o.DomainName
}

func (o *DomainPurchase) GetStatus() DomainStatus1 {
	if o == nil {
		return DomainStatus1("")
	}
	return o.Status
}

func (o *DomainPurchase) GetPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.Price
}

type GetOrderDomainUnionType string

const (
	GetOrderDomainUnionTypeDomainPurchase GetOrderDomainUnionType = "domain_Purchase"
	GetOrderDomainUnionTypeDomainRenewal  GetOrderDomainUnionType = "domain_Renewal"
	GetOrderDomainUnionTypeDomainTransfer GetOrderDomainUnionType = "domain_Transfer"
)

type GetOrderDomainUnion struct {
	DomainPurchase *DomainPurchase `queryParam:"inline"`
	DomainRenewal  *DomainRenewal  `queryParam:"inline"`
	DomainTransfer *DomainTransfer `queryParam:"inline"`

	Type GetOrderDomainUnionType
}

func CreateGetOrderDomainUnionDomainPurchase(domainPurchase DomainPurchase) GetOrderDomainUnion {
	typ := GetOrderDomainUnionTypeDomainPurchase

	return GetOrderDomainUnion{
		DomainPurchase: &domainPurchase,
		Type:           typ,
	}
}

func CreateGetOrderDomainUnionDomainRenewal(domainRenewal DomainRenewal) GetOrderDomainUnion {
	typ := GetOrderDomainUnionTypeDomainRenewal

	return GetOrderDomainUnion{
		DomainRenewal: &domainRenewal,
		Type:          typ,
	}
}

func CreateGetOrderDomainUnionDomainTransfer(domainTransfer DomainTransfer) GetOrderDomainUnion {
	typ := GetOrderDomainUnionTypeDomainTransfer

	return GetOrderDomainUnion{
		DomainTransfer: &domainTransfer,
		Type:           typ,
	}
}

func (u *GetOrderDomainUnion) UnmarshalJSON(data []byte) error {

	var domainPurchase DomainPurchase = DomainPurchase{}
	if err := utils.UnmarshalJSON(data, &domainPurchase, "", true, nil); err == nil {
		u.DomainPurchase = &domainPurchase
		u.Type = GetOrderDomainUnionTypeDomainPurchase
		return nil
	}

	var domainTransfer DomainTransfer = DomainTransfer{}
	if err := utils.UnmarshalJSON(data, &domainTransfer, "", true, nil); err == nil {
		u.DomainTransfer = &domainTransfer
		u.Type = GetOrderDomainUnionTypeDomainTransfer
		return nil
	}

	var domainRenewal DomainRenewal = DomainRenewal{}
	if err := utils.UnmarshalJSON(data, &domainRenewal, "", true, nil); err == nil {
		u.DomainRenewal = &domainRenewal
		u.Type = GetOrderDomainUnionTypeDomainRenewal
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetOrderDomainUnion", string(data))
}

func (u GetOrderDomainUnion) MarshalJSON() ([]byte, error) {
	if u.DomainPurchase != nil {
		return utils.MarshalJSON(u.DomainPurchase, "", true)
	}

	if u.DomainRenewal != nil {
		return utils.MarshalJSON(u.DomainRenewal, "", true)
	}

	if u.DomainTransfer != nil {
		return utils.MarshalJSON(u.DomainTransfer, "", true)
	}

	return nil, errors.New("could not marshal union type GetOrderDomainUnion: all fields are null")
}

type GetOrderStatus string

const (
	GetOrderStatusDraft      GetOrderStatus = "draft"
	GetOrderStatusPurchasing GetOrderStatus = "purchasing"
	GetOrderStatusCompleted  GetOrderStatus = "completed"
	GetOrderStatusFailed     GetOrderStatus = "failed"
)

func (e GetOrderStatus) ToPointer() *GetOrderStatus {
	return &e
}
func (e *GetOrderStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "draft":
		fallthrough
	case "purchasing":
		fallthrough
	case "completed":
		fallthrough
	case "failed":
		*e = GetOrderStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetOrderStatus: %v", v)
	}
}

type CodeUnexpectedError string

const (
	CodeUnexpectedErrorUnexpectedError CodeUnexpectedError = "unexpected-error"
)

func (e CodeUnexpectedError) ToPointer() *CodeUnexpectedError {
	return &e
}
func (e *CodeUnexpectedError) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "unexpected-error":
		*e = CodeUnexpectedError(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodeUnexpectedError: %v", v)
	}
}

type ErrorUnexpectedError struct {
	Code CodeUnexpectedError `json:"code"`
}

func (e ErrorUnexpectedError) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ErrorUnexpectedError) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"code"}); err != nil {
		return err
	}
	return nil
}

func (o *ErrorUnexpectedError) GetCode() CodeUnexpectedError {
	if o == nil {
		return CodeUnexpectedError("")
	}
	return o.Code
}

type CodePriceMismatch string

const (
	CodePriceMismatchPriceMismatch CodePriceMismatch = "price-mismatch"
)

func (e CodePriceMismatch) ToPointer() *CodePriceMismatch {
	return &e
}
func (e *CodePriceMismatch) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "price-mismatch":
		*e = CodePriceMismatch(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodePriceMismatch: %v", v)
	}
}

type Details2 struct {
	ExpectedPrice float64  `json:"expectedPrice"`
	ActualPrice   *float64 `json:"actualPrice,omitempty"`
}

func (d Details2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Details2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"expectedPrice"}); err != nil {
		return err
	}
	return nil
}

func (o *Details2) GetExpectedPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpectedPrice
}

func (o *Details2) GetActualPrice() *float64 {
	if o == nil {
		return nil
	}
	return o.ActualPrice
}

type ErrorPriceMismatch struct {
	Code    CodePriceMismatch `json:"code"`
	Details Details2          `json:"details"`
}

func (e ErrorPriceMismatch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ErrorPriceMismatch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"code", "details"}); err != nil {
		return err
	}
	return nil
}

func (o *ErrorPriceMismatch) GetCode() CodePriceMismatch {
	if o == nil {
		return CodePriceMismatch("")
	}
	return o.Code
}

func (o *ErrorPriceMismatch) GetDetails() Details2 {
	if o == nil {
		return Details2{}
	}
	return o.Details
}

type CodeTldOutage string

const (
	CodeTldOutageTldOutage CodeTldOutage = "tld-outage"
)

func (e CodeTldOutage) ToPointer() *CodeTldOutage {
	return &e
}
func (e *CodeTldOutage) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "tld-outage":
		*e = CodeTldOutage(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodeTldOutage: %v", v)
	}
}

type Tld struct {
	TldName string `json:"tldName"`
	EndsAt  string `json:"endsAt"`
}

func (t Tld) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *Tld) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"tldName", "endsAt"}); err != nil {
		return err
	}
	return nil
}

func (o *Tld) GetTldName() string {
	if o == nil {
		return ""
	}
	return o.TldName
}

func (o *Tld) GetEndsAt() string {
	if o == nil {
		return ""
	}
	return o.EndsAt
}

type Details1 struct {
	Tlds []Tld `json:"tlds"`
}

func (d Details1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Details1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"tlds"}); err != nil {
		return err
	}
	return nil
}

func (o *Details1) GetTlds() []Tld {
	if o == nil {
		return []Tld{}
	}
	return o.Tlds
}

type ErrorTldOutage struct {
	Code    CodeTldOutage `json:"code"`
	Details Details1      `json:"details"`
}

func (e ErrorTldOutage) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ErrorTldOutage) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"code", "details"}); err != nil {
		return err
	}
	return nil
}

func (o *ErrorTldOutage) GetCode() CodeTldOutage {
	if o == nil {
		return CodeTldOutage("")
	}
	return o.Code
}

func (o *ErrorTldOutage) GetDetails() Details1 {
	if o == nil {
		return Details1{}
	}
	return o.Details
}

type CodePaymentFailed string

const (
	CodePaymentFailedPaymentFailed CodePaymentFailed = "payment-failed"
)

func (e CodePaymentFailed) ToPointer() *CodePaymentFailed {
	return &e
}
func (e *CodePaymentFailed) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "payment-failed":
		*e = CodePaymentFailed(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CodePaymentFailed: %v", v)
	}
}

type ErrorPaymentFailed struct {
	Code CodePaymentFailed `json:"code"`
}

func (e ErrorPaymentFailed) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *ErrorPaymentFailed) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, []string{"code"}); err != nil {
		return err
	}
	return nil
}

func (o *ErrorPaymentFailed) GetCode() CodePaymentFailed {
	if o == nil {
		return CodePaymentFailed("")
	}
	return o.Code
}

type ErrorType string

const (
	ErrorTypeErrorPaymentFailed   ErrorType = "error_PaymentFailed"
	ErrorTypeErrorTldOutage       ErrorType = "error_TldOutage"
	ErrorTypeErrorPriceMismatch   ErrorType = "error_PriceMismatch"
	ErrorTypeErrorUnexpectedError ErrorType = "error_UnexpectedError"
)

type Error struct {
	ErrorPaymentFailed   *ErrorPaymentFailed   `queryParam:"inline"`
	ErrorTldOutage       *ErrorTldOutage       `queryParam:"inline"`
	ErrorPriceMismatch   *ErrorPriceMismatch   `queryParam:"inline"`
	ErrorUnexpectedError *ErrorUnexpectedError `queryParam:"inline"`

	Type ErrorType
}

func CreateErrorErrorPaymentFailed(errorPaymentFailed ErrorPaymentFailed) Error {
	typ := ErrorTypeErrorPaymentFailed

	return Error{
		ErrorPaymentFailed: &errorPaymentFailed,
		Type:               typ,
	}
}

func CreateErrorErrorTldOutage(errorTldOutage ErrorTldOutage) Error {
	typ := ErrorTypeErrorTldOutage

	return Error{
		ErrorTldOutage: &errorTldOutage,
		Type:           typ,
	}
}

func CreateErrorErrorPriceMismatch(errorPriceMismatch ErrorPriceMismatch) Error {
	typ := ErrorTypeErrorPriceMismatch

	return Error{
		ErrorPriceMismatch: &errorPriceMismatch,
		Type:               typ,
	}
}

func CreateErrorErrorUnexpectedError(errorUnexpectedError ErrorUnexpectedError) Error {
	typ := ErrorTypeErrorUnexpectedError

	return Error{
		ErrorUnexpectedError: &errorUnexpectedError,
		Type:                 typ,
	}
}

func (u *Error) UnmarshalJSON(data []byte) error {

	var errorTldOutage ErrorTldOutage = ErrorTldOutage{}
	if err := utils.UnmarshalJSON(data, &errorTldOutage, "", true, nil); err == nil {
		u.ErrorTldOutage = &errorTldOutage
		u.Type = ErrorTypeErrorTldOutage
		return nil
	}

	var errorPriceMismatch ErrorPriceMismatch = ErrorPriceMismatch{}
	if err := utils.UnmarshalJSON(data, &errorPriceMismatch, "", true, nil); err == nil {
		u.ErrorPriceMismatch = &errorPriceMismatch
		u.Type = ErrorTypeErrorPriceMismatch
		return nil
	}

	var errorPaymentFailed ErrorPaymentFailed = ErrorPaymentFailed{}
	if err := utils.UnmarshalJSON(data, &errorPaymentFailed, "", true, nil); err == nil {
		u.ErrorPaymentFailed = &errorPaymentFailed
		u.Type = ErrorTypeErrorPaymentFailed
		return nil
	}

	var errorUnexpectedError ErrorUnexpectedError = ErrorUnexpectedError{}
	if err := utils.UnmarshalJSON(data, &errorUnexpectedError, "", true, nil); err == nil {
		u.ErrorUnexpectedError = &errorUnexpectedError
		u.Type = ErrorTypeErrorUnexpectedError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Error", string(data))
}

func (u Error) MarshalJSON() ([]byte, error) {
	if u.ErrorPaymentFailed != nil {
		return utils.MarshalJSON(u.ErrorPaymentFailed, "", true)
	}

	if u.ErrorTldOutage != nil {
		return utils.MarshalJSON(u.ErrorTldOutage, "", true)
	}

	if u.ErrorPriceMismatch != nil {
		return utils.MarshalJSON(u.ErrorPriceMismatch, "", true)
	}

	if u.ErrorUnexpectedError != nil {
		return utils.MarshalJSON(u.ErrorUnexpectedError, "", true)
	}

	return nil, errors.New("could not marshal union type Error: all fields are null")
}

// GetOrderResponseBody - Success
type GetOrderResponseBody struct {
	OrderID string                `json:"orderId"`
	Domains []GetOrderDomainUnion `json:"domains"`
	Status  GetOrderStatus        `json:"status"`
	Error   *Error                `json:"error,omitempty"`
}

func (o *GetOrderResponseBody) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *GetOrderResponseBody) GetDomains() []GetOrderDomainUnion {
	if o == nil {
		return []GetOrderDomainUnion{}
	}
	return o.Domains
}

func (o *GetOrderResponseBody) GetStatus() GetOrderStatus {
	if o == nil {
		return GetOrderStatus("")
	}
	return o.Status
}

func (o *GetOrderResponseBody) GetError() *Error {
	if o == nil {
		return nil
	}
	return o.Error
}

type GetOrderResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *GetOrderResponseBody
}

func (o *GetOrderResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetOrderResponse) GetObject() *GetOrderResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
