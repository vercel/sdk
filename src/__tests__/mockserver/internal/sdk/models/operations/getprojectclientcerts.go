// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type GetProjectClientCertsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetProjectClientCertsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectClientCertsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectClientCertsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type ClientCert struct {
	Origin string `json:"origin"`
	ID     string `json:"id"`
}

func (o *ClientCert) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *ClientCert) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

// GetProjectClientCertsResponseBody - Client certificates retrieved successfully
type GetProjectClientCertsResponseBody struct {
	ClientCerts []ClientCert `json:"clientCerts"`
}

func (o *GetProjectClientCertsResponseBody) GetClientCerts() []ClientCert {
	if o == nil {
		return []ClientCert{}
	}
	return o.ClientCerts
}

type GetProjectClientCertsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Client certificates retrieved successfully
	Object *GetProjectClientCertsResponseBody
}

func (o *GetProjectClientCertsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectClientCertsResponse) GetObject() *GetProjectClientCertsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
