// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Production - Filters only production domains when set to `true`.
type Production string

const (
	ProductionTrue  Production = "true"
	ProductionFalse Production = "false"
)

func (e Production) ToPointer() *Production {
	return &e
}
func (e *Production) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Production(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Production: %v", v)
	}
}

// GetProjectDomainsTarget - Filters on the target of the domain. Can be either \"production\", \"preview\"
type GetProjectDomainsTarget string

const (
	GetProjectDomainsTargetProduction GetProjectDomainsTarget = "production"
	GetProjectDomainsTargetPreview    GetProjectDomainsTarget = "preview"
)

func (e GetProjectDomainsTarget) ToPointer() *GetProjectDomainsTarget {
	return &e
}
func (e *GetProjectDomainsTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetProjectDomainsTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectDomainsTarget: %v", v)
	}
}

// Redirects - Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
type Redirects string

const (
	RedirectsTrue  Redirects = "true"
	RedirectsFalse Redirects = "false"
)

func (e Redirects) ToPointer() *Redirects {
	return &e
}
func (e *Redirects) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Redirects(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Redirects: %v", v)
	}
}

// Verified - Filters domains based on their verification status.
type Verified string

const (
	VerifiedTrue  Verified = "true"
	VerifiedFalse Verified = "false"
)

func (e Verified) ToPointer() *Verified {
	return &e
}
func (e *Verified) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Verified(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Verified: %v", v)
	}
}

// Order - Domains sort order by createdAt
type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

func (e Order) ToPointer() *Order {
	return &e
}
func (e *Order) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = Order(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Order: %v", v)
	}
}

type GetProjectDomainsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Filters only production domains when set to `true`.
	Production *Production `default:"false" queryParam:"style=form,explode=true,name=production"`
	// Filters on the target of the domain. Can be either \"production\", \"preview\"
	Target *GetProjectDomainsTarget `queryParam:"style=form,explode=true,name=target"`
	// The unique custom environment identifier within the project
	CustomEnvironmentID *string `queryParam:"style=form,explode=true,name=customEnvironmentId"`
	// Filters domains based on specific branch.
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
	Redirects *Redirects `default:"true" queryParam:"style=form,explode=true,name=redirects"`
	// Filters domains based on their redirect target.
	Redirect *string `queryParam:"style=form,explode=true,name=redirect"`
	// Filters domains based on their verification status.
	Verified *Verified `queryParam:"style=form,explode=true,name=verified"`
	// Maximum number of domains to list from a request (max 100).
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Get domains created after this JavaScript timestamp.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Get domains created before this JavaScript timestamp.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// Domains sort order by createdAt
	Order *Order `default:"DESC" queryParam:"style=form,explode=true,name=order"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (g GetProjectDomainsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetProjectDomainsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetProjectDomainsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectDomainsRequest) GetProduction() *Production {
	if o == nil {
		return nil
	}
	return o.Production
}

func (o *GetProjectDomainsRequest) GetTarget() *GetProjectDomainsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectDomainsRequest) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetProjectDomainsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectDomainsRequest) GetRedirects() *Redirects {
	if o == nil {
		return nil
	}
	return o.Redirects
}

func (o *GetProjectDomainsRequest) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectDomainsRequest) GetVerified() *Verified {
	if o == nil {
		return nil
	}
	return o.Verified
}

func (o *GetProjectDomainsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectDomainsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetProjectDomainsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetProjectDomainsRequest) GetOrder() *Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *GetProjectDomainsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectDomainsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetProjectDomainsVerification2 - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetProjectDomainsVerification2 struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetProjectDomainsVerification2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetProjectDomainsVerification2) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetProjectDomainsVerification2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectDomainsVerification2) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetProjectDomainsDomain2 struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetProjectDomainsVerification2 `json:"verification,omitempty"`
}

func (o *GetProjectDomainsDomain2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectDomainsDomain2) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetProjectDomainsDomain2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectDomainsDomain2) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectDomainsDomain2) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetProjectDomainsDomain2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectDomainsDomain2) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetProjectDomainsDomain2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectDomainsDomain2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectDomainsDomain2) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetProjectDomainsDomain2) GetVerification() []GetProjectDomainsVerification2 {
	if o == nil {
		return nil
	}
	return o.Verification
}

type GetProjectDomainsResponseBody2 struct {
	Domains []GetProjectDomainsDomain2 `json:"domains"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *GetProjectDomainsResponseBody2) GetDomains() []GetProjectDomainsDomain2 {
	if o == nil {
		return []GetProjectDomainsDomain2{}
	}
	return o.Domains
}

func (o *GetProjectDomainsResponseBody2) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

// GetProjectDomainsVerification1 - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetProjectDomainsVerification1 struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetProjectDomainsVerification1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetProjectDomainsVerification1) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetProjectDomainsVerification1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectDomainsVerification1) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetProjectDomainsDomain1 struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetProjectDomainsVerification1 `json:"verification,omitempty"`
}

func (o *GetProjectDomainsDomain1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectDomainsDomain1) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetProjectDomainsDomain1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectDomainsDomain1) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectDomainsDomain1) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetProjectDomainsDomain1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectDomainsDomain1) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetProjectDomainsDomain1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectDomainsDomain1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectDomainsDomain1) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetProjectDomainsDomain1) GetVerification() []GetProjectDomainsVerification1 {
	if o == nil {
		return nil
	}
	return o.Verification
}

type GetProjectDomainsPagination struct {
	Count float64  `json:"count"`
	Next  *float64 `json:"next"`
	Prev  *float64 `json:"prev"`
}

func (o *GetProjectDomainsPagination) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *GetProjectDomainsPagination) GetNext() *float64 {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetProjectDomainsPagination) GetPrev() *float64 {
	if o == nil {
		return nil
	}
	return o.Prev
}

type GetProjectDomainsResponseBody1 struct {
	Domains    []GetProjectDomainsDomain1  `json:"domains"`
	Pagination GetProjectDomainsPagination `json:"pagination"`
}

func (o *GetProjectDomainsResponseBody1) GetDomains() []GetProjectDomainsDomain1 {
	if o == nil {
		return []GetProjectDomainsDomain1{}
	}
	return o.Domains
}

func (o *GetProjectDomainsResponseBody1) GetPagination() GetProjectDomainsPagination {
	if o == nil {
		return GetProjectDomainsPagination{}
	}
	return o.Pagination
}

type GetProjectDomainsResponseBodyType string

const (
	GetProjectDomainsResponseBodyTypeGetProjectDomainsResponseBody1 GetProjectDomainsResponseBodyType = "getProjectDomains_ResponseBody_1"
	GetProjectDomainsResponseBodyTypeGetProjectDomainsResponseBody2 GetProjectDomainsResponseBodyType = "getProjectDomains_ResponseBody_2"
)

// GetProjectDomainsResponseBody - Successful response retrieving a list of domains
type GetProjectDomainsResponseBody struct {
	GetProjectDomainsResponseBody1 *GetProjectDomainsResponseBody1 `queryParam:"inline"`
	GetProjectDomainsResponseBody2 *GetProjectDomainsResponseBody2 `queryParam:"inline"`

	Type GetProjectDomainsResponseBodyType
}

func CreateGetProjectDomainsResponseBodyGetProjectDomainsResponseBody1(getProjectDomainsResponseBody1 GetProjectDomainsResponseBody1) GetProjectDomainsResponseBody {
	typ := GetProjectDomainsResponseBodyTypeGetProjectDomainsResponseBody1

	return GetProjectDomainsResponseBody{
		GetProjectDomainsResponseBody1: &getProjectDomainsResponseBody1,
		Type:                           typ,
	}
}

func CreateGetProjectDomainsResponseBodyGetProjectDomainsResponseBody2(getProjectDomainsResponseBody2 GetProjectDomainsResponseBody2) GetProjectDomainsResponseBody {
	typ := GetProjectDomainsResponseBodyTypeGetProjectDomainsResponseBody2

	return GetProjectDomainsResponseBody{
		GetProjectDomainsResponseBody2: &getProjectDomainsResponseBody2,
		Type:                           typ,
	}
}

func (u *GetProjectDomainsResponseBody) UnmarshalJSON(data []byte) error {

	var getProjectDomainsResponseBody1 GetProjectDomainsResponseBody1 = GetProjectDomainsResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getProjectDomainsResponseBody1, "", true, true); err == nil {
		u.GetProjectDomainsResponseBody1 = &getProjectDomainsResponseBody1
		u.Type = GetProjectDomainsResponseBodyTypeGetProjectDomainsResponseBody1
		return nil
	}

	var getProjectDomainsResponseBody2 GetProjectDomainsResponseBody2 = GetProjectDomainsResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getProjectDomainsResponseBody2, "", true, true); err == nil {
		u.GetProjectDomainsResponseBody2 = &getProjectDomainsResponseBody2
		u.Type = GetProjectDomainsResponseBodyTypeGetProjectDomainsResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectDomainsResponseBody", string(data))
}

func (u GetProjectDomainsResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetProjectDomainsResponseBody1 != nil {
		return utils.MarshalJSON(u.GetProjectDomainsResponseBody1, "", true)
	}

	if u.GetProjectDomainsResponseBody2 != nil {
		return utils.MarshalJSON(u.GetProjectDomainsResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectDomainsResponseBody: all fields are null")
}

type GetProjectDomainsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response retrieving a list of domains
	OneOf *GetProjectDomainsResponseBody
}

func (o *GetProjectDomainsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectDomainsResponse) GetOneOf() *GetProjectDomainsResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
