// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Production - Filters only production domains when set to `true`.
type Production string

const (
	ProductionTrue  Production = "true"
	ProductionFalse Production = "false"
)

func (e Production) ToPointer() *Production {
	return &e
}
func (e *Production) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Production(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Production: %v", v)
	}
}

// QueryParamTarget - Filters on the target of the domain. Can be either \"production\", \"preview\"
type QueryParamTarget string

const (
	QueryParamTargetProduction QueryParamTarget = "production"
	QueryParamTargetPreview    QueryParamTarget = "preview"
)

func (e QueryParamTarget) ToPointer() *QueryParamTarget {
	return &e
}
func (e *QueryParamTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = QueryParamTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamTarget: %v", v)
	}
}

// Redirects - Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
type Redirects string

const (
	RedirectsTrue  Redirects = "true"
	RedirectsFalse Redirects = "false"
)

func (e Redirects) ToPointer() *Redirects {
	return &e
}
func (e *Redirects) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Redirects(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Redirects: %v", v)
	}
}

// Verified - Filters domains based on their verification status.
type Verified string

const (
	VerifiedTrue  Verified = "true"
	VerifiedFalse Verified = "false"
)

func (e Verified) ToPointer() *Verified {
	return &e
}
func (e *Verified) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "true":
		fallthrough
	case "false":
		*e = Verified(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Verified: %v", v)
	}
}

// Order - Domains sort order by createdAt
type Order string

const (
	OrderAsc  Order = "ASC"
	OrderDesc Order = "DESC"
)

func (e Order) ToPointer() *Order {
	return &e
}
func (e *Order) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ASC":
		fallthrough
	case "DESC":
		*e = Order(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Order: %v", v)
	}
}

type GetProjectDomainsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Filters only production domains when set to `true`.
	Production *Production `default:"false" queryParam:"style=form,explode=true,name=production"`
	// Filters on the target of the domain. Can be either \"production\", \"preview\"
	Target *QueryParamTarget `queryParam:"style=form,explode=true,name=target"`
	// The unique custom environment identifier within the project
	CustomEnvironmentID *string `queryParam:"style=form,explode=true,name=customEnvironmentId"`
	// Filters domains based on specific branch.
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// Excludes redirect project domains when \"false\". Includes redirect project domains when \"true\" (default).
	Redirects *Redirects `default:"true" queryParam:"style=form,explode=true,name=redirects"`
	// Filters domains based on their redirect target.
	Redirect *string `queryParam:"style=form,explode=true,name=redirect"`
	// Filters domains based on their verification status.
	Verified *Verified `queryParam:"style=form,explode=true,name=verified"`
	// Maximum number of domains to list from a request (max 100).
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Get domains created after this JavaScript timestamp.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Get domains created before this JavaScript timestamp.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// Domains sort order by createdAt
	Order *Order `default:"DESC" queryParam:"style=form,explode=true,name=order"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (g GetProjectDomainsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetProjectDomainsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetProjectDomainsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectDomainsRequest) GetProduction() *Production {
	if o == nil {
		return nil
	}
	return o.Production
}

func (o *GetProjectDomainsRequest) GetTarget() *QueryParamTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectDomainsRequest) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetProjectDomainsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectDomainsRequest) GetRedirects() *Redirects {
	if o == nil {
		return nil
	}
	return o.Redirects
}

func (o *GetProjectDomainsRequest) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectDomainsRequest) GetVerified() *Verified {
	if o == nil {
		return nil
	}
	return o.Verified
}

func (o *GetProjectDomainsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectDomainsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetProjectDomainsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetProjectDomainsRequest) GetOrder() *Order {
	if o == nil {
		return nil
	}
	return o.Order
}

func (o *GetProjectDomainsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectDomainsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetProjectDomainsVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetProjectDomainsVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetProjectDomainsVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetProjectDomainsVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetProjectDomainsVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectDomainsVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

type GetProjectDomainsDomains struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetProjectDomainsVerification `json:"verification,omitempty"`
}

func (o *GetProjectDomainsDomains) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectDomainsDomains) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetProjectDomainsDomains) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectDomainsDomains) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectDomainsDomains) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetProjectDomainsDomains) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectDomainsDomains) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetProjectDomainsDomains) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectDomainsDomains) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectDomainsDomains) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetProjectDomainsDomains) GetVerification() []GetProjectDomainsVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// GetProjectDomainsResponseBody - Successful response retrieving a list of domains
type GetProjectDomainsResponseBody struct {
	Domains []GetProjectDomainsDomains `json:"domains"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *GetProjectDomainsResponseBody) GetDomains() []GetProjectDomainsDomains {
	if o == nil {
		return []GetProjectDomainsDomains{}
	}
	return o.Domains
}

func (o *GetProjectDomainsResponseBody) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type GetProjectDomainsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response retrieving a list of domains
	Object *GetProjectDomainsResponseBody
}

func (o *GetProjectDomainsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectDomainsResponse) GetObject() *GetProjectDomainsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
