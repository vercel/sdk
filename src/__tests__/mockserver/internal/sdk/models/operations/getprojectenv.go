// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique ID for the environment variable to get the decrypted value.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetProjectEnvTargetEnum5 string

const (
	GetProjectEnvTargetEnum5Production  GetProjectEnvTargetEnum5 = "production"
	GetProjectEnvTargetEnum5Preview     GetProjectEnvTargetEnum5 = "preview"
	GetProjectEnvTargetEnum5Development GetProjectEnvTargetEnum5 = "development"
)

func (e GetProjectEnvTargetEnum5) ToPointer() *GetProjectEnvTargetEnum5 {
	return &e
}
func (e *GetProjectEnvTargetEnum5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvTargetEnum5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTargetEnum5: %v", v)
	}
}

type GetProjectEnvTargetUnion3Type string

const (
	GetProjectEnvTargetUnion3TypeArrayOfStr               GetProjectEnvTargetUnion3Type = "arrayOfStr"
	GetProjectEnvTargetUnion3TypeGetProjectEnvTargetEnum5 GetProjectEnvTargetUnion3Type = "getProjectEnv_target_enum_5"
)

type GetProjectEnvTargetUnion3 struct {
	ArrayOfStr               []string                  `queryParam:"inline"`
	GetProjectEnvTargetEnum5 *GetProjectEnvTargetEnum5 `queryParam:"inline"`

	Type GetProjectEnvTargetUnion3Type
}

func CreateGetProjectEnvTargetUnion3ArrayOfStr(arrayOfStr []string) GetProjectEnvTargetUnion3 {
	typ := GetProjectEnvTargetUnion3TypeArrayOfStr

	return GetProjectEnvTargetUnion3{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateGetProjectEnvTargetUnion3GetProjectEnvTargetEnum5(getProjectEnvTargetEnum5 GetProjectEnvTargetEnum5) GetProjectEnvTargetUnion3 {
	typ := GetProjectEnvTargetUnion3TypeGetProjectEnvTargetEnum5

	return GetProjectEnvTargetUnion3{
		GetProjectEnvTargetEnum5: &getProjectEnvTargetEnum5,
		Type:                     typ,
	}
}

func (u *GetProjectEnvTargetUnion3) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetProjectEnvTargetUnion3TypeArrayOfStr
		return nil
	}

	var getProjectEnvTargetEnum5 GetProjectEnvTargetEnum5 = GetProjectEnvTargetEnum5("")
	if err := utils.UnmarshalJSON(data, &getProjectEnvTargetEnum5, "", true, true); err == nil {
		u.GetProjectEnvTargetEnum5 = &getProjectEnvTargetEnum5
		u.Type = GetProjectEnvTargetUnion3TypeGetProjectEnvTargetEnum5
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvTargetUnion3", string(data))
}

func (u GetProjectEnvTargetUnion3) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.GetProjectEnvTargetEnum5 != nil {
		return utils.MarshalJSON(u.GetProjectEnvTargetEnum5, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvTargetUnion3: all fields are null")
}

type GetProjectEnvType3 string

const (
	GetProjectEnvType3System    GetProjectEnvType3 = "system"
	GetProjectEnvType3Encrypted GetProjectEnvType3 = "encrypted"
	GetProjectEnvType3Plain     GetProjectEnvType3 = "plain"
	GetProjectEnvType3Sensitive GetProjectEnvType3 = "sensitive"
	GetProjectEnvType3Secret    GetProjectEnvType3 = "secret"
)

func (e GetProjectEnvType3) ToPointer() *GetProjectEnvType3 {
	return &e
}
func (e *GetProjectEnvType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = GetProjectEnvType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvType3: %v", v)
	}
}

type GetProjectEnvTypeFlagsConnectionString3 string

const (
	GetProjectEnvTypeFlagsConnectionString3FlagsConnectionString GetProjectEnvTypeFlagsConnectionString3 = "flags-connection-string"
)

func (e GetProjectEnvTypeFlagsConnectionString3) ToPointer() *GetProjectEnvTypeFlagsConnectionString3 {
	return &e
}
func (e *GetProjectEnvTypeFlagsConnectionString3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = GetProjectEnvTypeFlagsConnectionString3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeFlagsConnectionString3: %v", v)
	}
}

type GetProjectEnvContentHintFlagsConnectionString3 struct {
	Type      GetProjectEnvTypeFlagsConnectionString3 `json:"type"`
	ProjectID string                                  `json:"projectId"`
}

func (o *GetProjectEnvContentHintFlagsConnectionString3) GetType() GetProjectEnvTypeFlagsConnectionString3 {
	if o == nil {
		return GetProjectEnvTypeFlagsConnectionString3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintFlagsConnectionString3) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetProjectEnvTypeIntegrationStoreSecret3 string

const (
	GetProjectEnvTypeIntegrationStoreSecret3IntegrationStoreSecret GetProjectEnvTypeIntegrationStoreSecret3 = "integration-store-secret"
)

func (e GetProjectEnvTypeIntegrationStoreSecret3) ToPointer() *GetProjectEnvTypeIntegrationStoreSecret3 {
	return &e
}
func (e *GetProjectEnvTypeIntegrationStoreSecret3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectEnvTypeIntegrationStoreSecret3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeIntegrationStoreSecret3: %v", v)
	}
}

type GetProjectEnvContentHintIntegrationStoreSecret3 struct {
	Type                       GetProjectEnvTypeIntegrationStoreSecret3 `json:"type"`
	StoreID                    string                                   `json:"storeId"`
	IntegrationID              string                                   `json:"integrationId"`
	IntegrationProductID       string                                   `json:"integrationProductId"`
	IntegrationConfigurationID string                                   `json:"integrationConfigurationId"`
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret3) GetType() GetProjectEnvTypeIntegrationStoreSecret3 {
	if o == nil {
		return GetProjectEnvTypeIntegrationStoreSecret3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret3) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret3) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret3) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetProjectEnvTypePostgresURLNoSsl3 string

const (
	GetProjectEnvTypePostgresURLNoSsl3PostgresURLNoSsl GetProjectEnvTypePostgresURLNoSsl3 = "postgres-url-no-ssl"
)

func (e GetProjectEnvTypePostgresURLNoSsl3) ToPointer() *GetProjectEnvTypePostgresURLNoSsl3 {
	return &e
}
func (e *GetProjectEnvTypePostgresURLNoSsl3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectEnvTypePostgresURLNoSsl3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURLNoSsl3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURLNoSsl3 struct {
	Type    GetProjectEnvTypePostgresURLNoSsl3 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURLNoSsl3) GetType() GetProjectEnvTypePostgresURLNoSsl3 {
	if o == nil {
		return GetProjectEnvTypePostgresURLNoSsl3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURLNoSsl3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresDatabase3 string

const (
	GetProjectEnvTypePostgresDatabase3PostgresDatabase GetProjectEnvTypePostgresDatabase3 = "postgres-database"
)

func (e GetProjectEnvTypePostgresDatabase3) ToPointer() *GetProjectEnvTypePostgresDatabase3 {
	return &e
}
func (e *GetProjectEnvTypePostgresDatabase3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectEnvTypePostgresDatabase3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresDatabase3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresDatabase3 struct {
	Type    GetProjectEnvTypePostgresDatabase3 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresDatabase3) GetType() GetProjectEnvTypePostgresDatabase3 {
	if o == nil {
		return GetProjectEnvTypePostgresDatabase3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresDatabase3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresPassword3 string

const (
	GetProjectEnvTypePostgresPassword3PostgresPassword GetProjectEnvTypePostgresPassword3 = "postgres-password"
)

func (e GetProjectEnvTypePostgresPassword3) ToPointer() *GetProjectEnvTypePostgresPassword3 {
	return &e
}
func (e *GetProjectEnvTypePostgresPassword3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectEnvTypePostgresPassword3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresPassword3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresPassword3 struct {
	Type    GetProjectEnvTypePostgresPassword3 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresPassword3) GetType() GetProjectEnvTypePostgresPassword3 {
	if o == nil {
		return GetProjectEnvTypePostgresPassword3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresPassword3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresHost3 string

const (
	GetProjectEnvTypePostgresHost3PostgresHost GetProjectEnvTypePostgresHost3 = "postgres-host"
)

func (e GetProjectEnvTypePostgresHost3) ToPointer() *GetProjectEnvTypePostgresHost3 {
	return &e
}
func (e *GetProjectEnvTypePostgresHost3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectEnvTypePostgresHost3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresHost3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresHost3 struct {
	Type    GetProjectEnvTypePostgresHost3 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresHost3) GetType() GetProjectEnvTypePostgresHost3 {
	if o == nil {
		return GetProjectEnvTypePostgresHost3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresHost3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresUser3 string

const (
	GetProjectEnvTypePostgresUser3PostgresUser GetProjectEnvTypePostgresUser3 = "postgres-user"
)

func (e GetProjectEnvTypePostgresUser3) ToPointer() *GetProjectEnvTypePostgresUser3 {
	return &e
}
func (e *GetProjectEnvTypePostgresUser3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectEnvTypePostgresUser3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresUser3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresUser3 struct {
	Type    GetProjectEnvTypePostgresUser3 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresUser3) GetType() GetProjectEnvTypePostgresUser3 {
	if o == nil {
		return GetProjectEnvTypePostgresUser3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresUser3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresPrismaURL3 string

const (
	GetProjectEnvTypePostgresPrismaURL3PostgresPrismaURL GetProjectEnvTypePostgresPrismaURL3 = "postgres-prisma-url"
)

func (e GetProjectEnvTypePostgresPrismaURL3) ToPointer() *GetProjectEnvTypePostgresPrismaURL3 {
	return &e
}
func (e *GetProjectEnvTypePostgresPrismaURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectEnvTypePostgresPrismaURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresPrismaURL3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresPrismaURL3 struct {
	Type    GetProjectEnvTypePostgresPrismaURL3 `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresPrismaURL3) GetType() GetProjectEnvTypePostgresPrismaURL3 {
	if o == nil {
		return GetProjectEnvTypePostgresPrismaURL3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresPrismaURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresURLNonPooling3 string

const (
	GetProjectEnvTypePostgresURLNonPooling3PostgresURLNonPooling GetProjectEnvTypePostgresURLNonPooling3 = "postgres-url-non-pooling"
)

func (e GetProjectEnvTypePostgresURLNonPooling3) ToPointer() *GetProjectEnvTypePostgresURLNonPooling3 {
	return &e
}
func (e *GetProjectEnvTypePostgresURLNonPooling3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectEnvTypePostgresURLNonPooling3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURLNonPooling3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURLNonPooling3 struct {
	Type    GetProjectEnvTypePostgresURLNonPooling3 `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURLNonPooling3) GetType() GetProjectEnvTypePostgresURLNonPooling3 {
	if o == nil {
		return GetProjectEnvTypePostgresURLNonPooling3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURLNonPooling3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresURL3 string

const (
	GetProjectEnvTypePostgresURL3PostgresURL GetProjectEnvTypePostgresURL3 = "postgres-url"
)

func (e GetProjectEnvTypePostgresURL3) ToPointer() *GetProjectEnvTypePostgresURL3 {
	return &e
}
func (e *GetProjectEnvTypePostgresURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectEnvTypePostgresURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURL3: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURL3 struct {
	Type    GetProjectEnvTypePostgresURL3 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURL3) GetType() GetProjectEnvTypePostgresURL3 {
	if o == nil {
		return GetProjectEnvTypePostgresURL3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeBlobReadWriteToken3 string

const (
	GetProjectEnvTypeBlobReadWriteToken3BlobReadWriteToken GetProjectEnvTypeBlobReadWriteToken3 = "blob-read-write-token"
)

func (e GetProjectEnvTypeBlobReadWriteToken3) ToPointer() *GetProjectEnvTypeBlobReadWriteToken3 {
	return &e
}
func (e *GetProjectEnvTypeBlobReadWriteToken3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectEnvTypeBlobReadWriteToken3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeBlobReadWriteToken3: %v", v)
	}
}

type GetProjectEnvContentHintBlobReadWriteToken3 struct {
	Type    GetProjectEnvTypeBlobReadWriteToken3 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *GetProjectEnvContentHintBlobReadWriteToken3) GetType() GetProjectEnvTypeBlobReadWriteToken3 {
	if o == nil {
		return GetProjectEnvTypeBlobReadWriteToken3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintBlobReadWriteToken3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIReadOnlyToken3 string

const (
	GetProjectEnvTypeRedisRestAPIReadOnlyToken3RedisRestAPIReadOnlyToken GetProjectEnvTypeRedisRestAPIReadOnlyToken3 = "redis-rest-api-read-only-token"
)

func (e GetProjectEnvTypeRedisRestAPIReadOnlyToken3) ToPointer() *GetProjectEnvTypeRedisRestAPIReadOnlyToken3 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIReadOnlyToken3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectEnvTypeRedisRestAPIReadOnlyToken3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIReadOnlyToken3: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIReadOnlyToken3 struct {
	Type    GetProjectEnvTypeRedisRestAPIReadOnlyToken3 `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIReadOnlyToken3) GetType() GetProjectEnvTypeRedisRestAPIReadOnlyToken3 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIReadOnlyToken3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIReadOnlyToken3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIToken3 string

const (
	GetProjectEnvTypeRedisRestAPIToken3RedisRestAPIToken GetProjectEnvTypeRedisRestAPIToken3 = "redis-rest-api-token"
)

func (e GetProjectEnvTypeRedisRestAPIToken3) ToPointer() *GetProjectEnvTypeRedisRestAPIToken3 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIToken3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectEnvTypeRedisRestAPIToken3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIToken3: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIToken3 struct {
	Type    GetProjectEnvTypeRedisRestAPIToken3 `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIToken3) GetType() GetProjectEnvTypeRedisRestAPIToken3 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIToken3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIToken3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIURL3 string

const (
	GetProjectEnvTypeRedisRestAPIURL3RedisRestAPIURL GetProjectEnvTypeRedisRestAPIURL3 = "redis-rest-api-url"
)

func (e GetProjectEnvTypeRedisRestAPIURL3) ToPointer() *GetProjectEnvTypeRedisRestAPIURL3 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectEnvTypeRedisRestAPIURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIURL3: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIURL3 struct {
	Type    GetProjectEnvTypeRedisRestAPIURL3 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIURL3) GetType() GetProjectEnvTypeRedisRestAPIURL3 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIURL3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisURL3 string

const (
	GetProjectEnvTypeRedisURL3RedisURL GetProjectEnvTypeRedisURL3 = "redis-url"
)

func (e GetProjectEnvTypeRedisURL3) ToPointer() *GetProjectEnvTypeRedisURL3 {
	return &e
}
func (e *GetProjectEnvTypeRedisURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectEnvTypeRedisURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisURL3: %v", v)
	}
}

type GetProjectEnvContentHintRedisURL3 struct {
	Type    GetProjectEnvTypeRedisURL3 `json:"type"`
	StoreID string                     `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisURL3) GetType() GetProjectEnvTypeRedisURL3 {
	if o == nil {
		return GetProjectEnvTypeRedisURL3("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintUnion3Type string

const (
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisURL3                  GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_RedisURL_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIURL3           GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_RedisRestAPIURL_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIToken3         GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_RedisRestAPIToken_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken3 GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_RedisRestAPIReadOnlyToken_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintBlobReadWriteToken3        GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_BlobReadWriteToken_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURL3               GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresURL_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURLNonPooling3     GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresURLNonPooling_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresPrismaURL3         GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresPrismaURL_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresUser3              GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresUser_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresHost3              GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresHost_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresPassword3          GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresPassword_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresDatabase3          GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresDatabase_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURLNoSsl3          GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_PostgresURLNoSsl_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintIntegrationStoreSecret3    GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_IntegrationStoreSecret_3"
	GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintFlagsConnectionString3     GetProjectEnvContentHintUnion3Type = "getProjectEnv_contentHint_FlagsConnectionString_3"
)

type GetProjectEnvContentHintUnion3 struct {
	GetProjectEnvContentHintRedisURL3                  *GetProjectEnvContentHintRedisURL3                  `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIURL3           *GetProjectEnvContentHintRedisRestAPIURL3           `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIToken3         *GetProjectEnvContentHintRedisRestAPIToken3         `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIReadOnlyToken3 *GetProjectEnvContentHintRedisRestAPIReadOnlyToken3 `queryParam:"inline"`
	GetProjectEnvContentHintBlobReadWriteToken3        *GetProjectEnvContentHintBlobReadWriteToken3        `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURL3               *GetProjectEnvContentHintPostgresURL3               `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURLNonPooling3     *GetProjectEnvContentHintPostgresURLNonPooling3     `queryParam:"inline"`
	GetProjectEnvContentHintPostgresPrismaURL3         *GetProjectEnvContentHintPostgresPrismaURL3         `queryParam:"inline"`
	GetProjectEnvContentHintPostgresUser3              *GetProjectEnvContentHintPostgresUser3              `queryParam:"inline"`
	GetProjectEnvContentHintPostgresHost3              *GetProjectEnvContentHintPostgresHost3              `queryParam:"inline"`
	GetProjectEnvContentHintPostgresPassword3          *GetProjectEnvContentHintPostgresPassword3          `queryParam:"inline"`
	GetProjectEnvContentHintPostgresDatabase3          *GetProjectEnvContentHintPostgresDatabase3          `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURLNoSsl3          *GetProjectEnvContentHintPostgresURLNoSsl3          `queryParam:"inline"`
	GetProjectEnvContentHintIntegrationStoreSecret3    *GetProjectEnvContentHintIntegrationStoreSecret3    `queryParam:"inline"`
	GetProjectEnvContentHintFlagsConnectionString3     *GetProjectEnvContentHintFlagsConnectionString3     `queryParam:"inline"`

	Type GetProjectEnvContentHintUnion3Type
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintRedisURL3(getProjectEnvContentHintRedisURL3 GetProjectEnvContentHintRedisURL3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisURL3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintRedisURL3: &getProjectEnvContentHintRedisURL3,
		Type:                              typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintRedisRestAPIURL3(getProjectEnvContentHintRedisRestAPIURL3 GetProjectEnvContentHintRedisRestAPIURL3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIURL3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintRedisRestAPIURL3: &getProjectEnvContentHintRedisRestAPIURL3,
		Type:                                     typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintRedisRestAPIToken3(getProjectEnvContentHintRedisRestAPIToken3 GetProjectEnvContentHintRedisRestAPIToken3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIToken3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintRedisRestAPIToken3: &getProjectEnvContentHintRedisRestAPIToken3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintRedisRestAPIReadOnlyToken3(getProjectEnvContentHintRedisRestAPIReadOnlyToken3 GetProjectEnvContentHintRedisRestAPIReadOnlyToken3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintRedisRestAPIReadOnlyToken3: &getProjectEnvContentHintRedisRestAPIReadOnlyToken3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintBlobReadWriteToken3(getProjectEnvContentHintBlobReadWriteToken3 GetProjectEnvContentHintBlobReadWriteToken3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintBlobReadWriteToken3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintBlobReadWriteToken3: &getProjectEnvContentHintBlobReadWriteToken3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresURL3(getProjectEnvContentHintPostgresURL3 GetProjectEnvContentHintPostgresURL3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURL3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresURL3: &getProjectEnvContentHintPostgresURL3,
		Type:                                 typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresURLNonPooling3(getProjectEnvContentHintPostgresURLNonPooling3 GetProjectEnvContentHintPostgresURLNonPooling3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURLNonPooling3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresURLNonPooling3: &getProjectEnvContentHintPostgresURLNonPooling3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresPrismaURL3(getProjectEnvContentHintPostgresPrismaURL3 GetProjectEnvContentHintPostgresPrismaURL3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresPrismaURL3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresPrismaURL3: &getProjectEnvContentHintPostgresPrismaURL3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresUser3(getProjectEnvContentHintPostgresUser3 GetProjectEnvContentHintPostgresUser3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresUser3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresUser3: &getProjectEnvContentHintPostgresUser3,
		Type:                                  typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresHost3(getProjectEnvContentHintPostgresHost3 GetProjectEnvContentHintPostgresHost3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresHost3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresHost3: &getProjectEnvContentHintPostgresHost3,
		Type:                                  typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresPassword3(getProjectEnvContentHintPostgresPassword3 GetProjectEnvContentHintPostgresPassword3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresPassword3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresPassword3: &getProjectEnvContentHintPostgresPassword3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresDatabase3(getProjectEnvContentHintPostgresDatabase3 GetProjectEnvContentHintPostgresDatabase3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresDatabase3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresDatabase3: &getProjectEnvContentHintPostgresDatabase3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintPostgresURLNoSsl3(getProjectEnvContentHintPostgresURLNoSsl3 GetProjectEnvContentHintPostgresURLNoSsl3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURLNoSsl3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintPostgresURLNoSsl3: &getProjectEnvContentHintPostgresURLNoSsl3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintIntegrationStoreSecret3(getProjectEnvContentHintIntegrationStoreSecret3 GetProjectEnvContentHintIntegrationStoreSecret3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintIntegrationStoreSecret3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintIntegrationStoreSecret3: &getProjectEnvContentHintIntegrationStoreSecret3,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion3GetProjectEnvContentHintFlagsConnectionString3(getProjectEnvContentHintFlagsConnectionString3 GetProjectEnvContentHintFlagsConnectionString3) GetProjectEnvContentHintUnion3 {
	typ := GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintFlagsConnectionString3

	return GetProjectEnvContentHintUnion3{
		GetProjectEnvContentHintFlagsConnectionString3: &getProjectEnvContentHintFlagsConnectionString3,
		Type: typ,
	}
}

func (u *GetProjectEnvContentHintUnion3) UnmarshalJSON(data []byte) error {

	var getProjectEnvContentHintPostgresURLNonPooling3 GetProjectEnvContentHintPostgresURLNonPooling3 = GetProjectEnvContentHintPostgresURLNonPooling3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURLNonPooling3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURLNonPooling3 = &getProjectEnvContentHintPostgresURLNonPooling3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURLNonPooling3
		return nil
	}

	var getProjectEnvContentHintPostgresPassword3 GetProjectEnvContentHintPostgresPassword3 = GetProjectEnvContentHintPostgresPassword3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresPassword3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresPassword3 = &getProjectEnvContentHintPostgresPassword3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresPassword3
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIToken3 GetProjectEnvContentHintRedisRestAPIToken3 = GetProjectEnvContentHintRedisRestAPIToken3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIToken3, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIToken3 = &getProjectEnvContentHintRedisRestAPIToken3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIToken3
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIReadOnlyToken3 GetProjectEnvContentHintRedisRestAPIReadOnlyToken3 = GetProjectEnvContentHintRedisRestAPIReadOnlyToken3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIReadOnlyToken3, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken3 = &getProjectEnvContentHintRedisRestAPIReadOnlyToken3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken3
		return nil
	}

	var getProjectEnvContentHintBlobReadWriteToken3 GetProjectEnvContentHintBlobReadWriteToken3 = GetProjectEnvContentHintBlobReadWriteToken3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintBlobReadWriteToken3, "", true, true); err == nil {
		u.GetProjectEnvContentHintBlobReadWriteToken3 = &getProjectEnvContentHintBlobReadWriteToken3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintBlobReadWriteToken3
		return nil
	}

	var getProjectEnvContentHintPostgresURL3 GetProjectEnvContentHintPostgresURL3 = GetProjectEnvContentHintPostgresURL3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURL3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURL3 = &getProjectEnvContentHintPostgresURL3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURL3
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIURL3 GetProjectEnvContentHintRedisRestAPIURL3 = GetProjectEnvContentHintRedisRestAPIURL3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIURL3, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIURL3 = &getProjectEnvContentHintRedisRestAPIURL3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisRestAPIURL3
		return nil
	}

	var getProjectEnvContentHintPostgresUser3 GetProjectEnvContentHintPostgresUser3 = GetProjectEnvContentHintPostgresUser3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresUser3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresUser3 = &getProjectEnvContentHintPostgresUser3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresUser3
		return nil
	}

	var getProjectEnvContentHintRedisURL3 GetProjectEnvContentHintRedisURL3 = GetProjectEnvContentHintRedisURL3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisURL3, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisURL3 = &getProjectEnvContentHintRedisURL3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintRedisURL3
		return nil
	}

	var getProjectEnvContentHintPostgresHost3 GetProjectEnvContentHintPostgresHost3 = GetProjectEnvContentHintPostgresHost3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresHost3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresHost3 = &getProjectEnvContentHintPostgresHost3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresHost3
		return nil
	}

	var getProjectEnvContentHintPostgresPrismaURL3 GetProjectEnvContentHintPostgresPrismaURL3 = GetProjectEnvContentHintPostgresPrismaURL3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresPrismaURL3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresPrismaURL3 = &getProjectEnvContentHintPostgresPrismaURL3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresPrismaURL3
		return nil
	}

	var getProjectEnvContentHintPostgresDatabase3 GetProjectEnvContentHintPostgresDatabase3 = GetProjectEnvContentHintPostgresDatabase3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresDatabase3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresDatabase3 = &getProjectEnvContentHintPostgresDatabase3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresDatabase3
		return nil
	}

	var getProjectEnvContentHintPostgresURLNoSsl3 GetProjectEnvContentHintPostgresURLNoSsl3 = GetProjectEnvContentHintPostgresURLNoSsl3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURLNoSsl3, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURLNoSsl3 = &getProjectEnvContentHintPostgresURLNoSsl3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintPostgresURLNoSsl3
		return nil
	}

	var getProjectEnvContentHintFlagsConnectionString3 GetProjectEnvContentHintFlagsConnectionString3 = GetProjectEnvContentHintFlagsConnectionString3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintFlagsConnectionString3, "", true, true); err == nil {
		u.GetProjectEnvContentHintFlagsConnectionString3 = &getProjectEnvContentHintFlagsConnectionString3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintFlagsConnectionString3
		return nil
	}

	var getProjectEnvContentHintIntegrationStoreSecret3 GetProjectEnvContentHintIntegrationStoreSecret3 = GetProjectEnvContentHintIntegrationStoreSecret3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintIntegrationStoreSecret3, "", true, true); err == nil {
		u.GetProjectEnvContentHintIntegrationStoreSecret3 = &getProjectEnvContentHintIntegrationStoreSecret3
		u.Type = GetProjectEnvContentHintUnion3TypeGetProjectEnvContentHintIntegrationStoreSecret3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvContentHintUnion3", string(data))
}

func (u GetProjectEnvContentHintUnion3) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvContentHintRedisURL3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisURL3, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIURL3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIURL3, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIToken3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIToken3, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken3, "", true)
	}

	if u.GetProjectEnvContentHintBlobReadWriteToken3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintBlobReadWriteToken3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURL3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURL3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURLNonPooling3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURLNonPooling3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresPrismaURL3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresPrismaURL3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresUser3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresUser3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresHost3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresHost3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresPassword3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresPassword3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresDatabase3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresDatabase3, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURLNoSsl3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURLNoSsl3, "", true)
	}

	if u.GetProjectEnvContentHintIntegrationStoreSecret3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintIntegrationStoreSecret3, "", true)
	}

	if u.GetProjectEnvContentHintFlagsConnectionString3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintFlagsConnectionString3, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvContentHintUnion3: all fields are null")
}

type GetProjectEnvTypeFlagsSecret3 string

const (
	GetProjectEnvTypeFlagsSecret3FlagsSecret GetProjectEnvTypeFlagsSecret3 = "flags-secret"
)

func (e GetProjectEnvTypeFlagsSecret3) ToPointer() *GetProjectEnvTypeFlagsSecret3 {
	return &e
}
func (e *GetProjectEnvTypeFlagsSecret3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectEnvTypeFlagsSecret3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeFlagsSecret3: %v", v)
	}
}

// GetProjectEnvInternalContentHint3 - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectEnvInternalContentHint3 struct {
	Type GetProjectEnvTypeFlagsSecret3 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectEnvInternalContentHint3) GetType() GetProjectEnvTypeFlagsSecret3 {
	if o == nil {
		return GetProjectEnvTypeFlagsSecret3("")
	}
	return o.Type
}

func (o *GetProjectEnvInternalContentHint3) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectEnvResponseBody3 struct {
	Target *GetProjectEnvTargetUnion3 `json:"target,omitempty"`
	Type   GetProjectEnvType3         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                         `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                           `json:"decrypted,omitempty"`
	Value             string                          `json:"value"`
	ID                *string                         `json:"id,omitempty"`
	Key               string                          `json:"key"`
	ConfigurationID   *string                         `json:"configurationId,omitempty"`
	CreatedAt         *float64                        `json:"createdAt,omitempty"`
	UpdatedAt         *float64                        `json:"updatedAt,omitempty"`
	CreatedBy         *string                         `json:"createdBy,omitempty"`
	UpdatedBy         *string                         `json:"updatedBy,omitempty"`
	GitBranch         *string                         `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                         `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectEnvContentHintUnion3 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *GetProjectEnvInternalContentHint3 `json:"internalContentHint,omitempty"`
	Comment              *string                            `json:"comment,omitempty"`
	CustomEnvironmentIds []string                           `json:"customEnvironmentIds,omitempty"`
}

func (o *GetProjectEnvResponseBody3) GetTarget() *GetProjectEnvTargetUnion3 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnvResponseBody3) GetType() GetProjectEnvType3 {
	if o == nil {
		return GetProjectEnvType3("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBody3) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *GetProjectEnvResponseBody3) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectEnvResponseBody3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectEnvResponseBody3) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnvResponseBody3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnvResponseBody3) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnvResponseBody3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnvResponseBody3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnvResponseBody3) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnvResponseBody3) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnvResponseBody3) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnvResponseBody3) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnvResponseBody3) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnvResponseBody3) GetContentHint() *GetProjectEnvContentHintUnion3 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnvResponseBody3) GetInternalContentHint() *GetProjectEnvInternalContentHint3 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectEnvResponseBody3) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectEnvResponseBody3) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type GetProjectEnvTargetEnum4 string

const (
	GetProjectEnvTargetEnum4Production  GetProjectEnvTargetEnum4 = "production"
	GetProjectEnvTargetEnum4Preview     GetProjectEnvTargetEnum4 = "preview"
	GetProjectEnvTargetEnum4Development GetProjectEnvTargetEnum4 = "development"
)

func (e GetProjectEnvTargetEnum4) ToPointer() *GetProjectEnvTargetEnum4 {
	return &e
}
func (e *GetProjectEnvTargetEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvTargetEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTargetEnum4: %v", v)
	}
}

type GetProjectEnvTargetEnum3 string

const (
	GetProjectEnvTargetEnum3Production  GetProjectEnvTargetEnum3 = "production"
	GetProjectEnvTargetEnum3Preview     GetProjectEnvTargetEnum3 = "preview"
	GetProjectEnvTargetEnum3Development GetProjectEnvTargetEnum3 = "development"
)

func (e GetProjectEnvTargetEnum3) ToPointer() *GetProjectEnvTargetEnum3 {
	return &e
}
func (e *GetProjectEnvTargetEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvTargetEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTargetEnum3: %v", v)
	}
}

type GetProjectEnvTargetUnion2Type string

const (
	GetProjectEnvTargetUnion2TypeArrayOfGetProjectEnvTargetEnum3 GetProjectEnvTargetUnion2Type = "arrayOfGetProjectEnvTargetEnum3"
	GetProjectEnvTargetUnion2TypeGetProjectEnvTargetEnum4        GetProjectEnvTargetUnion2Type = "getProjectEnv_target_enum_4"
)

type GetProjectEnvTargetUnion2 struct {
	ArrayOfGetProjectEnvTargetEnum3 []GetProjectEnvTargetEnum3 `queryParam:"inline"`
	GetProjectEnvTargetEnum4        *GetProjectEnvTargetEnum4  `queryParam:"inline"`

	Type GetProjectEnvTargetUnion2Type
}

func CreateGetProjectEnvTargetUnion2ArrayOfGetProjectEnvTargetEnum3(arrayOfGetProjectEnvTargetEnum3 []GetProjectEnvTargetEnum3) GetProjectEnvTargetUnion2 {
	typ := GetProjectEnvTargetUnion2TypeArrayOfGetProjectEnvTargetEnum3

	return GetProjectEnvTargetUnion2{
		ArrayOfGetProjectEnvTargetEnum3: arrayOfGetProjectEnvTargetEnum3,
		Type:                            typ,
	}
}

func CreateGetProjectEnvTargetUnion2GetProjectEnvTargetEnum4(getProjectEnvTargetEnum4 GetProjectEnvTargetEnum4) GetProjectEnvTargetUnion2 {
	typ := GetProjectEnvTargetUnion2TypeGetProjectEnvTargetEnum4

	return GetProjectEnvTargetUnion2{
		GetProjectEnvTargetEnum4: &getProjectEnvTargetEnum4,
		Type:                     typ,
	}
}

func (u *GetProjectEnvTargetUnion2) UnmarshalJSON(data []byte) error {

	var arrayOfGetProjectEnvTargetEnum3 []GetProjectEnvTargetEnum3 = []GetProjectEnvTargetEnum3{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetProjectEnvTargetEnum3, "", true, true); err == nil {
		u.ArrayOfGetProjectEnvTargetEnum3 = arrayOfGetProjectEnvTargetEnum3
		u.Type = GetProjectEnvTargetUnion2TypeArrayOfGetProjectEnvTargetEnum3
		return nil
	}

	var getProjectEnvTargetEnum4 GetProjectEnvTargetEnum4 = GetProjectEnvTargetEnum4("")
	if err := utils.UnmarshalJSON(data, &getProjectEnvTargetEnum4, "", true, true); err == nil {
		u.GetProjectEnvTargetEnum4 = &getProjectEnvTargetEnum4
		u.Type = GetProjectEnvTargetUnion2TypeGetProjectEnvTargetEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvTargetUnion2", string(data))
}

func (u GetProjectEnvTargetUnion2) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetProjectEnvTargetEnum3 != nil {
		return utils.MarshalJSON(u.ArrayOfGetProjectEnvTargetEnum3, "", true)
	}

	if u.GetProjectEnvTargetEnum4 != nil {
		return utils.MarshalJSON(u.GetProjectEnvTargetEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvTargetUnion2: all fields are null")
}

type GetProjectEnvType2 string

const (
	GetProjectEnvType2System    GetProjectEnvType2 = "system"
	GetProjectEnvType2Encrypted GetProjectEnvType2 = "encrypted"
	GetProjectEnvType2Plain     GetProjectEnvType2 = "plain"
	GetProjectEnvType2Sensitive GetProjectEnvType2 = "sensitive"
	GetProjectEnvType2Secret    GetProjectEnvType2 = "secret"
)

func (e GetProjectEnvType2) ToPointer() *GetProjectEnvType2 {
	return &e
}
func (e *GetProjectEnvType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = GetProjectEnvType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvType2: %v", v)
	}
}

type GetProjectEnvTypeFlagsConnectionString2 string

const (
	GetProjectEnvTypeFlagsConnectionString2FlagsConnectionString GetProjectEnvTypeFlagsConnectionString2 = "flags-connection-string"
)

func (e GetProjectEnvTypeFlagsConnectionString2) ToPointer() *GetProjectEnvTypeFlagsConnectionString2 {
	return &e
}
func (e *GetProjectEnvTypeFlagsConnectionString2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = GetProjectEnvTypeFlagsConnectionString2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeFlagsConnectionString2: %v", v)
	}
}

type GetProjectEnvContentHintFlagsConnectionString2 struct {
	Type      GetProjectEnvTypeFlagsConnectionString2 `json:"type"`
	ProjectID string                                  `json:"projectId"`
}

func (o *GetProjectEnvContentHintFlagsConnectionString2) GetType() GetProjectEnvTypeFlagsConnectionString2 {
	if o == nil {
		return GetProjectEnvTypeFlagsConnectionString2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintFlagsConnectionString2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetProjectEnvTypeIntegrationStoreSecret2 string

const (
	GetProjectEnvTypeIntegrationStoreSecret2IntegrationStoreSecret GetProjectEnvTypeIntegrationStoreSecret2 = "integration-store-secret"
)

func (e GetProjectEnvTypeIntegrationStoreSecret2) ToPointer() *GetProjectEnvTypeIntegrationStoreSecret2 {
	return &e
}
func (e *GetProjectEnvTypeIntegrationStoreSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectEnvTypeIntegrationStoreSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeIntegrationStoreSecret2: %v", v)
	}
}

type GetProjectEnvContentHintIntegrationStoreSecret2 struct {
	Type                       GetProjectEnvTypeIntegrationStoreSecret2 `json:"type"`
	StoreID                    string                                   `json:"storeId"`
	IntegrationID              string                                   `json:"integrationId"`
	IntegrationProductID       string                                   `json:"integrationProductId"`
	IntegrationConfigurationID string                                   `json:"integrationConfigurationId"`
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret2) GetType() GetProjectEnvTypeIntegrationStoreSecret2 {
	if o == nil {
		return GetProjectEnvTypeIntegrationStoreSecret2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetProjectEnvTypePostgresURLNoSsl2 string

const (
	GetProjectEnvTypePostgresURLNoSsl2PostgresURLNoSsl GetProjectEnvTypePostgresURLNoSsl2 = "postgres-url-no-ssl"
)

func (e GetProjectEnvTypePostgresURLNoSsl2) ToPointer() *GetProjectEnvTypePostgresURLNoSsl2 {
	return &e
}
func (e *GetProjectEnvTypePostgresURLNoSsl2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectEnvTypePostgresURLNoSsl2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURLNoSsl2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURLNoSsl2 struct {
	Type    GetProjectEnvTypePostgresURLNoSsl2 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURLNoSsl2) GetType() GetProjectEnvTypePostgresURLNoSsl2 {
	if o == nil {
		return GetProjectEnvTypePostgresURLNoSsl2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURLNoSsl2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresDatabase2 string

const (
	GetProjectEnvTypePostgresDatabase2PostgresDatabase GetProjectEnvTypePostgresDatabase2 = "postgres-database"
)

func (e GetProjectEnvTypePostgresDatabase2) ToPointer() *GetProjectEnvTypePostgresDatabase2 {
	return &e
}
func (e *GetProjectEnvTypePostgresDatabase2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectEnvTypePostgresDatabase2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresDatabase2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresDatabase2 struct {
	Type    GetProjectEnvTypePostgresDatabase2 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresDatabase2) GetType() GetProjectEnvTypePostgresDatabase2 {
	if o == nil {
		return GetProjectEnvTypePostgresDatabase2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresDatabase2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresPassword2 string

const (
	GetProjectEnvTypePostgresPassword2PostgresPassword GetProjectEnvTypePostgresPassword2 = "postgres-password"
)

func (e GetProjectEnvTypePostgresPassword2) ToPointer() *GetProjectEnvTypePostgresPassword2 {
	return &e
}
func (e *GetProjectEnvTypePostgresPassword2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectEnvTypePostgresPassword2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresPassword2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresPassword2 struct {
	Type    GetProjectEnvTypePostgresPassword2 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresPassword2) GetType() GetProjectEnvTypePostgresPassword2 {
	if o == nil {
		return GetProjectEnvTypePostgresPassword2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresPassword2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresHost2 string

const (
	GetProjectEnvTypePostgresHost2PostgresHost GetProjectEnvTypePostgresHost2 = "postgres-host"
)

func (e GetProjectEnvTypePostgresHost2) ToPointer() *GetProjectEnvTypePostgresHost2 {
	return &e
}
func (e *GetProjectEnvTypePostgresHost2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectEnvTypePostgresHost2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresHost2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresHost2 struct {
	Type    GetProjectEnvTypePostgresHost2 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresHost2) GetType() GetProjectEnvTypePostgresHost2 {
	if o == nil {
		return GetProjectEnvTypePostgresHost2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresHost2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresUser2 string

const (
	GetProjectEnvTypePostgresUser2PostgresUser GetProjectEnvTypePostgresUser2 = "postgres-user"
)

func (e GetProjectEnvTypePostgresUser2) ToPointer() *GetProjectEnvTypePostgresUser2 {
	return &e
}
func (e *GetProjectEnvTypePostgresUser2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectEnvTypePostgresUser2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresUser2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresUser2 struct {
	Type    GetProjectEnvTypePostgresUser2 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresUser2) GetType() GetProjectEnvTypePostgresUser2 {
	if o == nil {
		return GetProjectEnvTypePostgresUser2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresUser2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresPrismaURL2 string

const (
	GetProjectEnvTypePostgresPrismaURL2PostgresPrismaURL GetProjectEnvTypePostgresPrismaURL2 = "postgres-prisma-url"
)

func (e GetProjectEnvTypePostgresPrismaURL2) ToPointer() *GetProjectEnvTypePostgresPrismaURL2 {
	return &e
}
func (e *GetProjectEnvTypePostgresPrismaURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectEnvTypePostgresPrismaURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresPrismaURL2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresPrismaURL2 struct {
	Type    GetProjectEnvTypePostgresPrismaURL2 `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresPrismaURL2) GetType() GetProjectEnvTypePostgresPrismaURL2 {
	if o == nil {
		return GetProjectEnvTypePostgresPrismaURL2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresPrismaURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresURLNonPooling2 string

const (
	GetProjectEnvTypePostgresURLNonPooling2PostgresURLNonPooling GetProjectEnvTypePostgresURLNonPooling2 = "postgres-url-non-pooling"
)

func (e GetProjectEnvTypePostgresURLNonPooling2) ToPointer() *GetProjectEnvTypePostgresURLNonPooling2 {
	return &e
}
func (e *GetProjectEnvTypePostgresURLNonPooling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectEnvTypePostgresURLNonPooling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURLNonPooling2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURLNonPooling2 struct {
	Type    GetProjectEnvTypePostgresURLNonPooling2 `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURLNonPooling2) GetType() GetProjectEnvTypePostgresURLNonPooling2 {
	if o == nil {
		return GetProjectEnvTypePostgresURLNonPooling2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURLNonPooling2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresURL2 string

const (
	GetProjectEnvTypePostgresURL2PostgresURL GetProjectEnvTypePostgresURL2 = "postgres-url"
)

func (e GetProjectEnvTypePostgresURL2) ToPointer() *GetProjectEnvTypePostgresURL2 {
	return &e
}
func (e *GetProjectEnvTypePostgresURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectEnvTypePostgresURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURL2: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURL2 struct {
	Type    GetProjectEnvTypePostgresURL2 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURL2) GetType() GetProjectEnvTypePostgresURL2 {
	if o == nil {
		return GetProjectEnvTypePostgresURL2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeBlobReadWriteToken2 string

const (
	GetProjectEnvTypeBlobReadWriteToken2BlobReadWriteToken GetProjectEnvTypeBlobReadWriteToken2 = "blob-read-write-token"
)

func (e GetProjectEnvTypeBlobReadWriteToken2) ToPointer() *GetProjectEnvTypeBlobReadWriteToken2 {
	return &e
}
func (e *GetProjectEnvTypeBlobReadWriteToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectEnvTypeBlobReadWriteToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeBlobReadWriteToken2: %v", v)
	}
}

type GetProjectEnvContentHintBlobReadWriteToken2 struct {
	Type    GetProjectEnvTypeBlobReadWriteToken2 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *GetProjectEnvContentHintBlobReadWriteToken2) GetType() GetProjectEnvTypeBlobReadWriteToken2 {
	if o == nil {
		return GetProjectEnvTypeBlobReadWriteToken2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintBlobReadWriteToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIReadOnlyToken2 string

const (
	GetProjectEnvTypeRedisRestAPIReadOnlyToken2RedisRestAPIReadOnlyToken GetProjectEnvTypeRedisRestAPIReadOnlyToken2 = "redis-rest-api-read-only-token"
)

func (e GetProjectEnvTypeRedisRestAPIReadOnlyToken2) ToPointer() *GetProjectEnvTypeRedisRestAPIReadOnlyToken2 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIReadOnlyToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectEnvTypeRedisRestAPIReadOnlyToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIReadOnlyToken2: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIReadOnlyToken2 struct {
	Type    GetProjectEnvTypeRedisRestAPIReadOnlyToken2 `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetType() GetProjectEnvTypeRedisRestAPIReadOnlyToken2 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIReadOnlyToken2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIToken2 string

const (
	GetProjectEnvTypeRedisRestAPIToken2RedisRestAPIToken GetProjectEnvTypeRedisRestAPIToken2 = "redis-rest-api-token"
)

func (e GetProjectEnvTypeRedisRestAPIToken2) ToPointer() *GetProjectEnvTypeRedisRestAPIToken2 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectEnvTypeRedisRestAPIToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIToken2: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIToken2 struct {
	Type    GetProjectEnvTypeRedisRestAPIToken2 `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIToken2) GetType() GetProjectEnvTypeRedisRestAPIToken2 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIToken2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIURL2 string

const (
	GetProjectEnvTypeRedisRestAPIURL2RedisRestAPIURL GetProjectEnvTypeRedisRestAPIURL2 = "redis-rest-api-url"
)

func (e GetProjectEnvTypeRedisRestAPIURL2) ToPointer() *GetProjectEnvTypeRedisRestAPIURL2 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectEnvTypeRedisRestAPIURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIURL2: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIURL2 struct {
	Type    GetProjectEnvTypeRedisRestAPIURL2 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIURL2) GetType() GetProjectEnvTypeRedisRestAPIURL2 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIURL2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisURL2 string

const (
	GetProjectEnvTypeRedisURL2RedisURL GetProjectEnvTypeRedisURL2 = "redis-url"
)

func (e GetProjectEnvTypeRedisURL2) ToPointer() *GetProjectEnvTypeRedisURL2 {
	return &e
}
func (e *GetProjectEnvTypeRedisURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectEnvTypeRedisURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisURL2: %v", v)
	}
}

type GetProjectEnvContentHintRedisURL2 struct {
	Type    GetProjectEnvTypeRedisURL2 `json:"type"`
	StoreID string                     `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisURL2) GetType() GetProjectEnvTypeRedisURL2 {
	if o == nil {
		return GetProjectEnvTypeRedisURL2("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintUnion2Type string

const (
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisURL2                  GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_RedisURL_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIURL2           GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_RedisRestAPIURL_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIToken2         GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_RedisRestAPIToken_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken2 GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_RedisRestAPIReadOnlyToken_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintBlobReadWriteToken2        GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_BlobReadWriteToken_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURL2               GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresURL_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURLNonPooling2     GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresURLNonPooling_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresPrismaURL2         GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresPrismaURL_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresUser2              GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresUser_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresHost2              GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresHost_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresPassword2          GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresPassword_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresDatabase2          GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresDatabase_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURLNoSsl2          GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_PostgresURLNoSsl_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintIntegrationStoreSecret2    GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_IntegrationStoreSecret_2"
	GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintFlagsConnectionString2     GetProjectEnvContentHintUnion2Type = "getProjectEnv_contentHint_FlagsConnectionString_2"
)

type GetProjectEnvContentHintUnion2 struct {
	GetProjectEnvContentHintRedisURL2                  *GetProjectEnvContentHintRedisURL2                  `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIURL2           *GetProjectEnvContentHintRedisRestAPIURL2           `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIToken2         *GetProjectEnvContentHintRedisRestAPIToken2         `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIReadOnlyToken2 *GetProjectEnvContentHintRedisRestAPIReadOnlyToken2 `queryParam:"inline"`
	GetProjectEnvContentHintBlobReadWriteToken2        *GetProjectEnvContentHintBlobReadWriteToken2        `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURL2               *GetProjectEnvContentHintPostgresURL2               `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURLNonPooling2     *GetProjectEnvContentHintPostgresURLNonPooling2     `queryParam:"inline"`
	GetProjectEnvContentHintPostgresPrismaURL2         *GetProjectEnvContentHintPostgresPrismaURL2         `queryParam:"inline"`
	GetProjectEnvContentHintPostgresUser2              *GetProjectEnvContentHintPostgresUser2              `queryParam:"inline"`
	GetProjectEnvContentHintPostgresHost2              *GetProjectEnvContentHintPostgresHost2              `queryParam:"inline"`
	GetProjectEnvContentHintPostgresPassword2          *GetProjectEnvContentHintPostgresPassword2          `queryParam:"inline"`
	GetProjectEnvContentHintPostgresDatabase2          *GetProjectEnvContentHintPostgresDatabase2          `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURLNoSsl2          *GetProjectEnvContentHintPostgresURLNoSsl2          `queryParam:"inline"`
	GetProjectEnvContentHintIntegrationStoreSecret2    *GetProjectEnvContentHintIntegrationStoreSecret2    `queryParam:"inline"`
	GetProjectEnvContentHintFlagsConnectionString2     *GetProjectEnvContentHintFlagsConnectionString2     `queryParam:"inline"`

	Type GetProjectEnvContentHintUnion2Type
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintRedisURL2(getProjectEnvContentHintRedisURL2 GetProjectEnvContentHintRedisURL2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisURL2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintRedisURL2: &getProjectEnvContentHintRedisURL2,
		Type:                              typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintRedisRestAPIURL2(getProjectEnvContentHintRedisRestAPIURL2 GetProjectEnvContentHintRedisRestAPIURL2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIURL2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintRedisRestAPIURL2: &getProjectEnvContentHintRedisRestAPIURL2,
		Type:                                     typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintRedisRestAPIToken2(getProjectEnvContentHintRedisRestAPIToken2 GetProjectEnvContentHintRedisRestAPIToken2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIToken2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintRedisRestAPIToken2: &getProjectEnvContentHintRedisRestAPIToken2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintRedisRestAPIReadOnlyToken2(getProjectEnvContentHintRedisRestAPIReadOnlyToken2 GetProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintRedisRestAPIReadOnlyToken2: &getProjectEnvContentHintRedisRestAPIReadOnlyToken2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintBlobReadWriteToken2(getProjectEnvContentHintBlobReadWriteToken2 GetProjectEnvContentHintBlobReadWriteToken2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintBlobReadWriteToken2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintBlobReadWriteToken2: &getProjectEnvContentHintBlobReadWriteToken2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresURL2(getProjectEnvContentHintPostgresURL2 GetProjectEnvContentHintPostgresURL2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURL2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresURL2: &getProjectEnvContentHintPostgresURL2,
		Type:                                 typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresURLNonPooling2(getProjectEnvContentHintPostgresURLNonPooling2 GetProjectEnvContentHintPostgresURLNonPooling2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURLNonPooling2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresURLNonPooling2: &getProjectEnvContentHintPostgresURLNonPooling2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresPrismaURL2(getProjectEnvContentHintPostgresPrismaURL2 GetProjectEnvContentHintPostgresPrismaURL2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresPrismaURL2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresPrismaURL2: &getProjectEnvContentHintPostgresPrismaURL2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresUser2(getProjectEnvContentHintPostgresUser2 GetProjectEnvContentHintPostgresUser2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresUser2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresUser2: &getProjectEnvContentHintPostgresUser2,
		Type:                                  typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresHost2(getProjectEnvContentHintPostgresHost2 GetProjectEnvContentHintPostgresHost2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresHost2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresHost2: &getProjectEnvContentHintPostgresHost2,
		Type:                                  typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresPassword2(getProjectEnvContentHintPostgresPassword2 GetProjectEnvContentHintPostgresPassword2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresPassword2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresPassword2: &getProjectEnvContentHintPostgresPassword2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresDatabase2(getProjectEnvContentHintPostgresDatabase2 GetProjectEnvContentHintPostgresDatabase2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresDatabase2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresDatabase2: &getProjectEnvContentHintPostgresDatabase2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintPostgresURLNoSsl2(getProjectEnvContentHintPostgresURLNoSsl2 GetProjectEnvContentHintPostgresURLNoSsl2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURLNoSsl2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintPostgresURLNoSsl2: &getProjectEnvContentHintPostgresURLNoSsl2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintIntegrationStoreSecret2(getProjectEnvContentHintIntegrationStoreSecret2 GetProjectEnvContentHintIntegrationStoreSecret2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintIntegrationStoreSecret2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintIntegrationStoreSecret2: &getProjectEnvContentHintIntegrationStoreSecret2,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion2GetProjectEnvContentHintFlagsConnectionString2(getProjectEnvContentHintFlagsConnectionString2 GetProjectEnvContentHintFlagsConnectionString2) GetProjectEnvContentHintUnion2 {
	typ := GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintFlagsConnectionString2

	return GetProjectEnvContentHintUnion2{
		GetProjectEnvContentHintFlagsConnectionString2: &getProjectEnvContentHintFlagsConnectionString2,
		Type: typ,
	}
}

func (u *GetProjectEnvContentHintUnion2) UnmarshalJSON(data []byte) error {

	var getProjectEnvContentHintPostgresURLNonPooling2 GetProjectEnvContentHintPostgresURLNonPooling2 = GetProjectEnvContentHintPostgresURLNonPooling2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURLNonPooling2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURLNonPooling2 = &getProjectEnvContentHintPostgresURLNonPooling2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURLNonPooling2
		return nil
	}

	var getProjectEnvContentHintPostgresPassword2 GetProjectEnvContentHintPostgresPassword2 = GetProjectEnvContentHintPostgresPassword2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresPassword2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresPassword2 = &getProjectEnvContentHintPostgresPassword2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresPassword2
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIToken2 GetProjectEnvContentHintRedisRestAPIToken2 = GetProjectEnvContentHintRedisRestAPIToken2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIToken2, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIToken2 = &getProjectEnvContentHintRedisRestAPIToken2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIToken2
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIReadOnlyToken2 GetProjectEnvContentHintRedisRestAPIReadOnlyToken2 = GetProjectEnvContentHintRedisRestAPIReadOnlyToken2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIReadOnlyToken2, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken2 = &getProjectEnvContentHintRedisRestAPIReadOnlyToken2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken2
		return nil
	}

	var getProjectEnvContentHintBlobReadWriteToken2 GetProjectEnvContentHintBlobReadWriteToken2 = GetProjectEnvContentHintBlobReadWriteToken2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintBlobReadWriteToken2, "", true, true); err == nil {
		u.GetProjectEnvContentHintBlobReadWriteToken2 = &getProjectEnvContentHintBlobReadWriteToken2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintBlobReadWriteToken2
		return nil
	}

	var getProjectEnvContentHintPostgresURL2 GetProjectEnvContentHintPostgresURL2 = GetProjectEnvContentHintPostgresURL2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURL2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURL2 = &getProjectEnvContentHintPostgresURL2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURL2
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIURL2 GetProjectEnvContentHintRedisRestAPIURL2 = GetProjectEnvContentHintRedisRestAPIURL2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIURL2, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIURL2 = &getProjectEnvContentHintRedisRestAPIURL2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisRestAPIURL2
		return nil
	}

	var getProjectEnvContentHintPostgresUser2 GetProjectEnvContentHintPostgresUser2 = GetProjectEnvContentHintPostgresUser2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresUser2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresUser2 = &getProjectEnvContentHintPostgresUser2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresUser2
		return nil
	}

	var getProjectEnvContentHintRedisURL2 GetProjectEnvContentHintRedisURL2 = GetProjectEnvContentHintRedisURL2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisURL2, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisURL2 = &getProjectEnvContentHintRedisURL2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintRedisURL2
		return nil
	}

	var getProjectEnvContentHintPostgresHost2 GetProjectEnvContentHintPostgresHost2 = GetProjectEnvContentHintPostgresHost2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresHost2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresHost2 = &getProjectEnvContentHintPostgresHost2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresHost2
		return nil
	}

	var getProjectEnvContentHintPostgresPrismaURL2 GetProjectEnvContentHintPostgresPrismaURL2 = GetProjectEnvContentHintPostgresPrismaURL2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresPrismaURL2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresPrismaURL2 = &getProjectEnvContentHintPostgresPrismaURL2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresPrismaURL2
		return nil
	}

	var getProjectEnvContentHintPostgresDatabase2 GetProjectEnvContentHintPostgresDatabase2 = GetProjectEnvContentHintPostgresDatabase2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresDatabase2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresDatabase2 = &getProjectEnvContentHintPostgresDatabase2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresDatabase2
		return nil
	}

	var getProjectEnvContentHintPostgresURLNoSsl2 GetProjectEnvContentHintPostgresURLNoSsl2 = GetProjectEnvContentHintPostgresURLNoSsl2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURLNoSsl2, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURLNoSsl2 = &getProjectEnvContentHintPostgresURLNoSsl2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintPostgresURLNoSsl2
		return nil
	}

	var getProjectEnvContentHintFlagsConnectionString2 GetProjectEnvContentHintFlagsConnectionString2 = GetProjectEnvContentHintFlagsConnectionString2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintFlagsConnectionString2, "", true, true); err == nil {
		u.GetProjectEnvContentHintFlagsConnectionString2 = &getProjectEnvContentHintFlagsConnectionString2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintFlagsConnectionString2
		return nil
	}

	var getProjectEnvContentHintIntegrationStoreSecret2 GetProjectEnvContentHintIntegrationStoreSecret2 = GetProjectEnvContentHintIntegrationStoreSecret2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintIntegrationStoreSecret2, "", true, true); err == nil {
		u.GetProjectEnvContentHintIntegrationStoreSecret2 = &getProjectEnvContentHintIntegrationStoreSecret2
		u.Type = GetProjectEnvContentHintUnion2TypeGetProjectEnvContentHintIntegrationStoreSecret2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvContentHintUnion2", string(data))
}

func (u GetProjectEnvContentHintUnion2) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvContentHintRedisURL2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisURL2, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIURL2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIURL2, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIToken2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIToken2, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken2, "", true)
	}

	if u.GetProjectEnvContentHintBlobReadWriteToken2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintBlobReadWriteToken2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURL2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURL2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURLNonPooling2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURLNonPooling2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresPrismaURL2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresPrismaURL2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresUser2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresUser2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresHost2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresHost2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresPassword2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresPassword2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresDatabase2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresDatabase2, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURLNoSsl2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURLNoSsl2, "", true)
	}

	if u.GetProjectEnvContentHintIntegrationStoreSecret2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintIntegrationStoreSecret2, "", true)
	}

	if u.GetProjectEnvContentHintFlagsConnectionString2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintFlagsConnectionString2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvContentHintUnion2: all fields are null")
}

type GetProjectEnvTypeFlagsSecret2 string

const (
	GetProjectEnvTypeFlagsSecret2FlagsSecret GetProjectEnvTypeFlagsSecret2 = "flags-secret"
)

func (e GetProjectEnvTypeFlagsSecret2) ToPointer() *GetProjectEnvTypeFlagsSecret2 {
	return &e
}
func (e *GetProjectEnvTypeFlagsSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectEnvTypeFlagsSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeFlagsSecret2: %v", v)
	}
}

// GetProjectEnvInternalContentHint2 - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectEnvInternalContentHint2 struct {
	Type GetProjectEnvTypeFlagsSecret2 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectEnvInternalContentHint2) GetType() GetProjectEnvTypeFlagsSecret2 {
	if o == nil {
		return GetProjectEnvTypeFlagsSecret2("")
	}
	return o.Type
}

func (o *GetProjectEnvInternalContentHint2) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectEnvResponseBody2 struct {
	Target *GetProjectEnvTargetUnion2 `json:"target,omitempty"`
	Type   GetProjectEnvType2         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                         `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                           `json:"decrypted,omitempty"`
	Value             string                          `json:"value"`
	VsmValue          *string                         `json:"vsmValue,omitempty"`
	ID                *string                         `json:"id,omitempty"`
	Key               string                          `json:"key"`
	ConfigurationID   *string                         `json:"configurationId,omitempty"`
	CreatedAt         *float64                        `json:"createdAt,omitempty"`
	UpdatedAt         *float64                        `json:"updatedAt,omitempty"`
	CreatedBy         *string                         `json:"createdBy,omitempty"`
	UpdatedBy         *string                         `json:"updatedBy,omitempty"`
	GitBranch         *string                         `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                         `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectEnvContentHintUnion2 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *GetProjectEnvInternalContentHint2 `json:"internalContentHint,omitempty"`
	Comment              *string                            `json:"comment,omitempty"`
	CustomEnvironmentIds []string                           `json:"customEnvironmentIds,omitempty"`
}

func (o *GetProjectEnvResponseBody2) GetTarget() *GetProjectEnvTargetUnion2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnvResponseBody2) GetType() GetProjectEnvType2 {
	if o == nil {
		return GetProjectEnvType2("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBody2) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *GetProjectEnvResponseBody2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectEnvResponseBody2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectEnvResponseBody2) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *GetProjectEnvResponseBody2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnvResponseBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnvResponseBody2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnvResponseBody2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnvResponseBody2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnvResponseBody2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnvResponseBody2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnvResponseBody2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnvResponseBody2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnvResponseBody2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnvResponseBody2) GetContentHint() *GetProjectEnvContentHintUnion2 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnvResponseBody2) GetInternalContentHint() *GetProjectEnvInternalContentHint2 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectEnvResponseBody2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectEnvResponseBody2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type GetProjectEnvTargetEnum2 string

const (
	GetProjectEnvTargetEnum2Production  GetProjectEnvTargetEnum2 = "production"
	GetProjectEnvTargetEnum2Preview     GetProjectEnvTargetEnum2 = "preview"
	GetProjectEnvTargetEnum2Development GetProjectEnvTargetEnum2 = "development"
)

func (e GetProjectEnvTargetEnum2) ToPointer() *GetProjectEnvTargetEnum2 {
	return &e
}
func (e *GetProjectEnvTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTargetEnum2: %v", v)
	}
}

type GetProjectEnvTargetEnum1 string

const (
	GetProjectEnvTargetEnum1Production  GetProjectEnvTargetEnum1 = "production"
	GetProjectEnvTargetEnum1Preview     GetProjectEnvTargetEnum1 = "preview"
	GetProjectEnvTargetEnum1Development GetProjectEnvTargetEnum1 = "development"
)

func (e GetProjectEnvTargetEnum1) ToPointer() *GetProjectEnvTargetEnum1 {
	return &e
}
func (e *GetProjectEnvTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectEnvTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTargetEnum1: %v", v)
	}
}

type GetProjectEnvTargetUnion1Type string

const (
	GetProjectEnvTargetUnion1TypeArrayOfGetProjectEnvTargetEnum1 GetProjectEnvTargetUnion1Type = "arrayOfGetProjectEnvTargetEnum1"
	GetProjectEnvTargetUnion1TypeGetProjectEnvTargetEnum2        GetProjectEnvTargetUnion1Type = "getProjectEnv_target_enum_2"
)

type GetProjectEnvTargetUnion1 struct {
	ArrayOfGetProjectEnvTargetEnum1 []GetProjectEnvTargetEnum1 `queryParam:"inline"`
	GetProjectEnvTargetEnum2        *GetProjectEnvTargetEnum2  `queryParam:"inline"`

	Type GetProjectEnvTargetUnion1Type
}

func CreateGetProjectEnvTargetUnion1ArrayOfGetProjectEnvTargetEnum1(arrayOfGetProjectEnvTargetEnum1 []GetProjectEnvTargetEnum1) GetProjectEnvTargetUnion1 {
	typ := GetProjectEnvTargetUnion1TypeArrayOfGetProjectEnvTargetEnum1

	return GetProjectEnvTargetUnion1{
		ArrayOfGetProjectEnvTargetEnum1: arrayOfGetProjectEnvTargetEnum1,
		Type:                            typ,
	}
}

func CreateGetProjectEnvTargetUnion1GetProjectEnvTargetEnum2(getProjectEnvTargetEnum2 GetProjectEnvTargetEnum2) GetProjectEnvTargetUnion1 {
	typ := GetProjectEnvTargetUnion1TypeGetProjectEnvTargetEnum2

	return GetProjectEnvTargetUnion1{
		GetProjectEnvTargetEnum2: &getProjectEnvTargetEnum2,
		Type:                     typ,
	}
}

func (u *GetProjectEnvTargetUnion1) UnmarshalJSON(data []byte) error {

	var arrayOfGetProjectEnvTargetEnum1 []GetProjectEnvTargetEnum1 = []GetProjectEnvTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetProjectEnvTargetEnum1, "", true, true); err == nil {
		u.ArrayOfGetProjectEnvTargetEnum1 = arrayOfGetProjectEnvTargetEnum1
		u.Type = GetProjectEnvTargetUnion1TypeArrayOfGetProjectEnvTargetEnum1
		return nil
	}

	var getProjectEnvTargetEnum2 GetProjectEnvTargetEnum2 = GetProjectEnvTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &getProjectEnvTargetEnum2, "", true, true); err == nil {
		u.GetProjectEnvTargetEnum2 = &getProjectEnvTargetEnum2
		u.Type = GetProjectEnvTargetUnion1TypeGetProjectEnvTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvTargetUnion1", string(data))
}

func (u GetProjectEnvTargetUnion1) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetProjectEnvTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfGetProjectEnvTargetEnum1, "", true)
	}

	if u.GetProjectEnvTargetEnum2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvTargetUnion1: all fields are null")
}

type GetProjectEnvType1 string

const (
	GetProjectEnvType1System    GetProjectEnvType1 = "system"
	GetProjectEnvType1Encrypted GetProjectEnvType1 = "encrypted"
	GetProjectEnvType1Plain     GetProjectEnvType1 = "plain"
	GetProjectEnvType1Sensitive GetProjectEnvType1 = "sensitive"
	GetProjectEnvType1Secret    GetProjectEnvType1 = "secret"
)

func (e GetProjectEnvType1) ToPointer() *GetProjectEnvType1 {
	return &e
}
func (e *GetProjectEnvType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = GetProjectEnvType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvType1: %v", v)
	}
}

type GetProjectEnvTypeFlagsConnectionString1 string

const (
	GetProjectEnvTypeFlagsConnectionString1FlagsConnectionString GetProjectEnvTypeFlagsConnectionString1 = "flags-connection-string"
)

func (e GetProjectEnvTypeFlagsConnectionString1) ToPointer() *GetProjectEnvTypeFlagsConnectionString1 {
	return &e
}
func (e *GetProjectEnvTypeFlagsConnectionString1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = GetProjectEnvTypeFlagsConnectionString1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeFlagsConnectionString1: %v", v)
	}
}

type GetProjectEnvContentHintFlagsConnectionString1 struct {
	Type      GetProjectEnvTypeFlagsConnectionString1 `json:"type"`
	ProjectID string                                  `json:"projectId"`
}

func (o *GetProjectEnvContentHintFlagsConnectionString1) GetType() GetProjectEnvTypeFlagsConnectionString1 {
	if o == nil {
		return GetProjectEnvTypeFlagsConnectionString1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintFlagsConnectionString1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetProjectEnvTypeIntegrationStoreSecret1 string

const (
	GetProjectEnvTypeIntegrationStoreSecret1IntegrationStoreSecret GetProjectEnvTypeIntegrationStoreSecret1 = "integration-store-secret"
)

func (e GetProjectEnvTypeIntegrationStoreSecret1) ToPointer() *GetProjectEnvTypeIntegrationStoreSecret1 {
	return &e
}
func (e *GetProjectEnvTypeIntegrationStoreSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectEnvTypeIntegrationStoreSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeIntegrationStoreSecret1: %v", v)
	}
}

type GetProjectEnvContentHintIntegrationStoreSecret1 struct {
	Type                       GetProjectEnvTypeIntegrationStoreSecret1 `json:"type"`
	StoreID                    string                                   `json:"storeId"`
	IntegrationID              string                                   `json:"integrationId"`
	IntegrationProductID       string                                   `json:"integrationProductId"`
	IntegrationConfigurationID string                                   `json:"integrationConfigurationId"`
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret1) GetType() GetProjectEnvTypeIntegrationStoreSecret1 {
	if o == nil {
		return GetProjectEnvTypeIntegrationStoreSecret1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *GetProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetProjectEnvTypePostgresURLNoSsl1 string

const (
	GetProjectEnvTypePostgresURLNoSsl1PostgresURLNoSsl GetProjectEnvTypePostgresURLNoSsl1 = "postgres-url-no-ssl"
)

func (e GetProjectEnvTypePostgresURLNoSsl1) ToPointer() *GetProjectEnvTypePostgresURLNoSsl1 {
	return &e
}
func (e *GetProjectEnvTypePostgresURLNoSsl1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectEnvTypePostgresURLNoSsl1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURLNoSsl1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURLNoSsl1 struct {
	Type    GetProjectEnvTypePostgresURLNoSsl1 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURLNoSsl1) GetType() GetProjectEnvTypePostgresURLNoSsl1 {
	if o == nil {
		return GetProjectEnvTypePostgresURLNoSsl1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURLNoSsl1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresDatabase1 string

const (
	GetProjectEnvTypePostgresDatabase1PostgresDatabase GetProjectEnvTypePostgresDatabase1 = "postgres-database"
)

func (e GetProjectEnvTypePostgresDatabase1) ToPointer() *GetProjectEnvTypePostgresDatabase1 {
	return &e
}
func (e *GetProjectEnvTypePostgresDatabase1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectEnvTypePostgresDatabase1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresDatabase1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresDatabase1 struct {
	Type    GetProjectEnvTypePostgresDatabase1 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresDatabase1) GetType() GetProjectEnvTypePostgresDatabase1 {
	if o == nil {
		return GetProjectEnvTypePostgresDatabase1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresDatabase1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresPassword1 string

const (
	GetProjectEnvTypePostgresPassword1PostgresPassword GetProjectEnvTypePostgresPassword1 = "postgres-password"
)

func (e GetProjectEnvTypePostgresPassword1) ToPointer() *GetProjectEnvTypePostgresPassword1 {
	return &e
}
func (e *GetProjectEnvTypePostgresPassword1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectEnvTypePostgresPassword1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresPassword1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresPassword1 struct {
	Type    GetProjectEnvTypePostgresPassword1 `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresPassword1) GetType() GetProjectEnvTypePostgresPassword1 {
	if o == nil {
		return GetProjectEnvTypePostgresPassword1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresPassword1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresHost1 string

const (
	GetProjectEnvTypePostgresHost1PostgresHost GetProjectEnvTypePostgresHost1 = "postgres-host"
)

func (e GetProjectEnvTypePostgresHost1) ToPointer() *GetProjectEnvTypePostgresHost1 {
	return &e
}
func (e *GetProjectEnvTypePostgresHost1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectEnvTypePostgresHost1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresHost1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresHost1 struct {
	Type    GetProjectEnvTypePostgresHost1 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresHost1) GetType() GetProjectEnvTypePostgresHost1 {
	if o == nil {
		return GetProjectEnvTypePostgresHost1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresHost1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresUser1 string

const (
	GetProjectEnvTypePostgresUser1PostgresUser GetProjectEnvTypePostgresUser1 = "postgres-user"
)

func (e GetProjectEnvTypePostgresUser1) ToPointer() *GetProjectEnvTypePostgresUser1 {
	return &e
}
func (e *GetProjectEnvTypePostgresUser1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectEnvTypePostgresUser1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresUser1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresUser1 struct {
	Type    GetProjectEnvTypePostgresUser1 `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresUser1) GetType() GetProjectEnvTypePostgresUser1 {
	if o == nil {
		return GetProjectEnvTypePostgresUser1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresUser1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresPrismaURL1 string

const (
	GetProjectEnvTypePostgresPrismaURL1PostgresPrismaURL GetProjectEnvTypePostgresPrismaURL1 = "postgres-prisma-url"
)

func (e GetProjectEnvTypePostgresPrismaURL1) ToPointer() *GetProjectEnvTypePostgresPrismaURL1 {
	return &e
}
func (e *GetProjectEnvTypePostgresPrismaURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectEnvTypePostgresPrismaURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresPrismaURL1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresPrismaURL1 struct {
	Type    GetProjectEnvTypePostgresPrismaURL1 `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresPrismaURL1) GetType() GetProjectEnvTypePostgresPrismaURL1 {
	if o == nil {
		return GetProjectEnvTypePostgresPrismaURL1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresPrismaURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresURLNonPooling1 string

const (
	GetProjectEnvTypePostgresURLNonPooling1PostgresURLNonPooling GetProjectEnvTypePostgresURLNonPooling1 = "postgres-url-non-pooling"
)

func (e GetProjectEnvTypePostgresURLNonPooling1) ToPointer() *GetProjectEnvTypePostgresURLNonPooling1 {
	return &e
}
func (e *GetProjectEnvTypePostgresURLNonPooling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectEnvTypePostgresURLNonPooling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURLNonPooling1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURLNonPooling1 struct {
	Type    GetProjectEnvTypePostgresURLNonPooling1 `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURLNonPooling1) GetType() GetProjectEnvTypePostgresURLNonPooling1 {
	if o == nil {
		return GetProjectEnvTypePostgresURLNonPooling1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURLNonPooling1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypePostgresURL1 string

const (
	GetProjectEnvTypePostgresURL1PostgresURL GetProjectEnvTypePostgresURL1 = "postgres-url"
)

func (e GetProjectEnvTypePostgresURL1) ToPointer() *GetProjectEnvTypePostgresURL1 {
	return &e
}
func (e *GetProjectEnvTypePostgresURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectEnvTypePostgresURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypePostgresURL1: %v", v)
	}
}

type GetProjectEnvContentHintPostgresURL1 struct {
	Type    GetProjectEnvTypePostgresURL1 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *GetProjectEnvContentHintPostgresURL1) GetType() GetProjectEnvTypePostgresURL1 {
	if o == nil {
		return GetProjectEnvTypePostgresURL1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintPostgresURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeBlobReadWriteToken1 string

const (
	GetProjectEnvTypeBlobReadWriteToken1BlobReadWriteToken GetProjectEnvTypeBlobReadWriteToken1 = "blob-read-write-token"
)

func (e GetProjectEnvTypeBlobReadWriteToken1) ToPointer() *GetProjectEnvTypeBlobReadWriteToken1 {
	return &e
}
func (e *GetProjectEnvTypeBlobReadWriteToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectEnvTypeBlobReadWriteToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeBlobReadWriteToken1: %v", v)
	}
}

type GetProjectEnvContentHintBlobReadWriteToken1 struct {
	Type    GetProjectEnvTypeBlobReadWriteToken1 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *GetProjectEnvContentHintBlobReadWriteToken1) GetType() GetProjectEnvTypeBlobReadWriteToken1 {
	if o == nil {
		return GetProjectEnvTypeBlobReadWriteToken1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintBlobReadWriteToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIReadOnlyToken1 string

const (
	GetProjectEnvTypeRedisRestAPIReadOnlyToken1RedisRestAPIReadOnlyToken GetProjectEnvTypeRedisRestAPIReadOnlyToken1 = "redis-rest-api-read-only-token"
)

func (e GetProjectEnvTypeRedisRestAPIReadOnlyToken1) ToPointer() *GetProjectEnvTypeRedisRestAPIReadOnlyToken1 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIReadOnlyToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectEnvTypeRedisRestAPIReadOnlyToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIReadOnlyToken1: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIReadOnlyToken1 struct {
	Type    GetProjectEnvTypeRedisRestAPIReadOnlyToken1 `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetType() GetProjectEnvTypeRedisRestAPIReadOnlyToken1 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIReadOnlyToken1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIToken1 string

const (
	GetProjectEnvTypeRedisRestAPIToken1RedisRestAPIToken GetProjectEnvTypeRedisRestAPIToken1 = "redis-rest-api-token"
)

func (e GetProjectEnvTypeRedisRestAPIToken1) ToPointer() *GetProjectEnvTypeRedisRestAPIToken1 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectEnvTypeRedisRestAPIToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIToken1: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIToken1 struct {
	Type    GetProjectEnvTypeRedisRestAPIToken1 `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIToken1) GetType() GetProjectEnvTypeRedisRestAPIToken1 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIToken1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisRestAPIURL1 string

const (
	GetProjectEnvTypeRedisRestAPIURL1RedisRestAPIURL GetProjectEnvTypeRedisRestAPIURL1 = "redis-rest-api-url"
)

func (e GetProjectEnvTypeRedisRestAPIURL1) ToPointer() *GetProjectEnvTypeRedisRestAPIURL1 {
	return &e
}
func (e *GetProjectEnvTypeRedisRestAPIURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectEnvTypeRedisRestAPIURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisRestAPIURL1: %v", v)
	}
}

type GetProjectEnvContentHintRedisRestAPIURL1 struct {
	Type    GetProjectEnvTypeRedisRestAPIURL1 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisRestAPIURL1) GetType() GetProjectEnvTypeRedisRestAPIURL1 {
	if o == nil {
		return GetProjectEnvTypeRedisRestAPIURL1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisRestAPIURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvTypeRedisURL1 string

const (
	GetProjectEnvTypeRedisURL1RedisURL GetProjectEnvTypeRedisURL1 = "redis-url"
)

func (e GetProjectEnvTypeRedisURL1) ToPointer() *GetProjectEnvTypeRedisURL1 {
	return &e
}
func (e *GetProjectEnvTypeRedisURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectEnvTypeRedisURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeRedisURL1: %v", v)
	}
}

type GetProjectEnvContentHintRedisURL1 struct {
	Type    GetProjectEnvTypeRedisURL1 `json:"type"`
	StoreID string                     `json:"storeId"`
}

func (o *GetProjectEnvContentHintRedisURL1) GetType() GetProjectEnvTypeRedisURL1 {
	if o == nil {
		return GetProjectEnvTypeRedisURL1("")
	}
	return o.Type
}

func (o *GetProjectEnvContentHintRedisURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectEnvContentHintUnion1Type string

const (
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisURL1                  GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_RedisURL_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIURL1           GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_RedisRestAPIURL_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIToken1         GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_RedisRestAPIToken_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken1 GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_RedisRestAPIReadOnlyToken_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintBlobReadWriteToken1        GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_BlobReadWriteToken_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURL1               GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresURL_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURLNonPooling1     GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresURLNonPooling_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresPrismaURL1         GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresPrismaURL_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresUser1              GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresUser_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresHost1              GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresHost_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresPassword1          GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresPassword_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresDatabase1          GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresDatabase_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURLNoSsl1          GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_PostgresURLNoSsl_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintIntegrationStoreSecret1    GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_IntegrationStoreSecret_1"
	GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintFlagsConnectionString1     GetProjectEnvContentHintUnion1Type = "getProjectEnv_contentHint_FlagsConnectionString_1"
)

type GetProjectEnvContentHintUnion1 struct {
	GetProjectEnvContentHintRedisURL1                  *GetProjectEnvContentHintRedisURL1                  `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIURL1           *GetProjectEnvContentHintRedisRestAPIURL1           `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIToken1         *GetProjectEnvContentHintRedisRestAPIToken1         `queryParam:"inline"`
	GetProjectEnvContentHintRedisRestAPIReadOnlyToken1 *GetProjectEnvContentHintRedisRestAPIReadOnlyToken1 `queryParam:"inline"`
	GetProjectEnvContentHintBlobReadWriteToken1        *GetProjectEnvContentHintBlobReadWriteToken1        `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURL1               *GetProjectEnvContentHintPostgresURL1               `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURLNonPooling1     *GetProjectEnvContentHintPostgresURLNonPooling1     `queryParam:"inline"`
	GetProjectEnvContentHintPostgresPrismaURL1         *GetProjectEnvContentHintPostgresPrismaURL1         `queryParam:"inline"`
	GetProjectEnvContentHintPostgresUser1              *GetProjectEnvContentHintPostgresUser1              `queryParam:"inline"`
	GetProjectEnvContentHintPostgresHost1              *GetProjectEnvContentHintPostgresHost1              `queryParam:"inline"`
	GetProjectEnvContentHintPostgresPassword1          *GetProjectEnvContentHintPostgresPassword1          `queryParam:"inline"`
	GetProjectEnvContentHintPostgresDatabase1          *GetProjectEnvContentHintPostgresDatabase1          `queryParam:"inline"`
	GetProjectEnvContentHintPostgresURLNoSsl1          *GetProjectEnvContentHintPostgresURLNoSsl1          `queryParam:"inline"`
	GetProjectEnvContentHintIntegrationStoreSecret1    *GetProjectEnvContentHintIntegrationStoreSecret1    `queryParam:"inline"`
	GetProjectEnvContentHintFlagsConnectionString1     *GetProjectEnvContentHintFlagsConnectionString1     `queryParam:"inline"`

	Type GetProjectEnvContentHintUnion1Type
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintRedisURL1(getProjectEnvContentHintRedisURL1 GetProjectEnvContentHintRedisURL1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisURL1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintRedisURL1: &getProjectEnvContentHintRedisURL1,
		Type:                              typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintRedisRestAPIURL1(getProjectEnvContentHintRedisRestAPIURL1 GetProjectEnvContentHintRedisRestAPIURL1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIURL1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintRedisRestAPIURL1: &getProjectEnvContentHintRedisRestAPIURL1,
		Type:                                     typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintRedisRestAPIToken1(getProjectEnvContentHintRedisRestAPIToken1 GetProjectEnvContentHintRedisRestAPIToken1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIToken1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintRedisRestAPIToken1: &getProjectEnvContentHintRedisRestAPIToken1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintRedisRestAPIReadOnlyToken1(getProjectEnvContentHintRedisRestAPIReadOnlyToken1 GetProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintRedisRestAPIReadOnlyToken1: &getProjectEnvContentHintRedisRestAPIReadOnlyToken1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintBlobReadWriteToken1(getProjectEnvContentHintBlobReadWriteToken1 GetProjectEnvContentHintBlobReadWriteToken1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintBlobReadWriteToken1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintBlobReadWriteToken1: &getProjectEnvContentHintBlobReadWriteToken1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresURL1(getProjectEnvContentHintPostgresURL1 GetProjectEnvContentHintPostgresURL1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURL1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresURL1: &getProjectEnvContentHintPostgresURL1,
		Type:                                 typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresURLNonPooling1(getProjectEnvContentHintPostgresURLNonPooling1 GetProjectEnvContentHintPostgresURLNonPooling1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURLNonPooling1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresURLNonPooling1: &getProjectEnvContentHintPostgresURLNonPooling1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresPrismaURL1(getProjectEnvContentHintPostgresPrismaURL1 GetProjectEnvContentHintPostgresPrismaURL1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresPrismaURL1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresPrismaURL1: &getProjectEnvContentHintPostgresPrismaURL1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresUser1(getProjectEnvContentHintPostgresUser1 GetProjectEnvContentHintPostgresUser1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresUser1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresUser1: &getProjectEnvContentHintPostgresUser1,
		Type:                                  typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresHost1(getProjectEnvContentHintPostgresHost1 GetProjectEnvContentHintPostgresHost1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresHost1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresHost1: &getProjectEnvContentHintPostgresHost1,
		Type:                                  typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresPassword1(getProjectEnvContentHintPostgresPassword1 GetProjectEnvContentHintPostgresPassword1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresPassword1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresPassword1: &getProjectEnvContentHintPostgresPassword1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresDatabase1(getProjectEnvContentHintPostgresDatabase1 GetProjectEnvContentHintPostgresDatabase1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresDatabase1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresDatabase1: &getProjectEnvContentHintPostgresDatabase1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintPostgresURLNoSsl1(getProjectEnvContentHintPostgresURLNoSsl1 GetProjectEnvContentHintPostgresURLNoSsl1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURLNoSsl1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintPostgresURLNoSsl1: &getProjectEnvContentHintPostgresURLNoSsl1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintIntegrationStoreSecret1(getProjectEnvContentHintIntegrationStoreSecret1 GetProjectEnvContentHintIntegrationStoreSecret1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintIntegrationStoreSecret1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintIntegrationStoreSecret1: &getProjectEnvContentHintIntegrationStoreSecret1,
		Type: typ,
	}
}

func CreateGetProjectEnvContentHintUnion1GetProjectEnvContentHintFlagsConnectionString1(getProjectEnvContentHintFlagsConnectionString1 GetProjectEnvContentHintFlagsConnectionString1) GetProjectEnvContentHintUnion1 {
	typ := GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintFlagsConnectionString1

	return GetProjectEnvContentHintUnion1{
		GetProjectEnvContentHintFlagsConnectionString1: &getProjectEnvContentHintFlagsConnectionString1,
		Type: typ,
	}
}

func (u *GetProjectEnvContentHintUnion1) UnmarshalJSON(data []byte) error {

	var getProjectEnvContentHintPostgresURLNonPooling1 GetProjectEnvContentHintPostgresURLNonPooling1 = GetProjectEnvContentHintPostgresURLNonPooling1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURLNonPooling1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURLNonPooling1 = &getProjectEnvContentHintPostgresURLNonPooling1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURLNonPooling1
		return nil
	}

	var getProjectEnvContentHintPostgresPassword1 GetProjectEnvContentHintPostgresPassword1 = GetProjectEnvContentHintPostgresPassword1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresPassword1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresPassword1 = &getProjectEnvContentHintPostgresPassword1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresPassword1
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIToken1 GetProjectEnvContentHintRedisRestAPIToken1 = GetProjectEnvContentHintRedisRestAPIToken1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIToken1, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIToken1 = &getProjectEnvContentHintRedisRestAPIToken1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIToken1
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIReadOnlyToken1 GetProjectEnvContentHintRedisRestAPIReadOnlyToken1 = GetProjectEnvContentHintRedisRestAPIReadOnlyToken1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIReadOnlyToken1, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken1 = &getProjectEnvContentHintRedisRestAPIReadOnlyToken1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIReadOnlyToken1
		return nil
	}

	var getProjectEnvContentHintBlobReadWriteToken1 GetProjectEnvContentHintBlobReadWriteToken1 = GetProjectEnvContentHintBlobReadWriteToken1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintBlobReadWriteToken1, "", true, true); err == nil {
		u.GetProjectEnvContentHintBlobReadWriteToken1 = &getProjectEnvContentHintBlobReadWriteToken1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintBlobReadWriteToken1
		return nil
	}

	var getProjectEnvContentHintPostgresURL1 GetProjectEnvContentHintPostgresURL1 = GetProjectEnvContentHintPostgresURL1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURL1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURL1 = &getProjectEnvContentHintPostgresURL1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURL1
		return nil
	}

	var getProjectEnvContentHintRedisRestAPIURL1 GetProjectEnvContentHintRedisRestAPIURL1 = GetProjectEnvContentHintRedisRestAPIURL1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisRestAPIURL1, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisRestAPIURL1 = &getProjectEnvContentHintRedisRestAPIURL1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisRestAPIURL1
		return nil
	}

	var getProjectEnvContentHintPostgresUser1 GetProjectEnvContentHintPostgresUser1 = GetProjectEnvContentHintPostgresUser1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresUser1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresUser1 = &getProjectEnvContentHintPostgresUser1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresUser1
		return nil
	}

	var getProjectEnvContentHintRedisURL1 GetProjectEnvContentHintRedisURL1 = GetProjectEnvContentHintRedisURL1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintRedisURL1, "", true, true); err == nil {
		u.GetProjectEnvContentHintRedisURL1 = &getProjectEnvContentHintRedisURL1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintRedisURL1
		return nil
	}

	var getProjectEnvContentHintPostgresHost1 GetProjectEnvContentHintPostgresHost1 = GetProjectEnvContentHintPostgresHost1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresHost1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresHost1 = &getProjectEnvContentHintPostgresHost1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresHost1
		return nil
	}

	var getProjectEnvContentHintPostgresPrismaURL1 GetProjectEnvContentHintPostgresPrismaURL1 = GetProjectEnvContentHintPostgresPrismaURL1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresPrismaURL1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresPrismaURL1 = &getProjectEnvContentHintPostgresPrismaURL1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresPrismaURL1
		return nil
	}

	var getProjectEnvContentHintPostgresDatabase1 GetProjectEnvContentHintPostgresDatabase1 = GetProjectEnvContentHintPostgresDatabase1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresDatabase1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresDatabase1 = &getProjectEnvContentHintPostgresDatabase1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresDatabase1
		return nil
	}

	var getProjectEnvContentHintPostgresURLNoSsl1 GetProjectEnvContentHintPostgresURLNoSsl1 = GetProjectEnvContentHintPostgresURLNoSsl1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintPostgresURLNoSsl1, "", true, true); err == nil {
		u.GetProjectEnvContentHintPostgresURLNoSsl1 = &getProjectEnvContentHintPostgresURLNoSsl1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintPostgresURLNoSsl1
		return nil
	}

	var getProjectEnvContentHintFlagsConnectionString1 GetProjectEnvContentHintFlagsConnectionString1 = GetProjectEnvContentHintFlagsConnectionString1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintFlagsConnectionString1, "", true, true); err == nil {
		u.GetProjectEnvContentHintFlagsConnectionString1 = &getProjectEnvContentHintFlagsConnectionString1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintFlagsConnectionString1
		return nil
	}

	var getProjectEnvContentHintIntegrationStoreSecret1 GetProjectEnvContentHintIntegrationStoreSecret1 = GetProjectEnvContentHintIntegrationStoreSecret1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvContentHintIntegrationStoreSecret1, "", true, true); err == nil {
		u.GetProjectEnvContentHintIntegrationStoreSecret1 = &getProjectEnvContentHintIntegrationStoreSecret1
		u.Type = GetProjectEnvContentHintUnion1TypeGetProjectEnvContentHintIntegrationStoreSecret1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvContentHintUnion1", string(data))
}

func (u GetProjectEnvContentHintUnion1) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvContentHintRedisURL1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisURL1, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIURL1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIURL1, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIToken1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIToken1, "", true)
	}

	if u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintRedisRestAPIReadOnlyToken1, "", true)
	}

	if u.GetProjectEnvContentHintBlobReadWriteToken1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintBlobReadWriteToken1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURL1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURL1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURLNonPooling1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURLNonPooling1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresPrismaURL1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresPrismaURL1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresUser1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresUser1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresHost1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresHost1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresPassword1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresPassword1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresDatabase1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresDatabase1, "", true)
	}

	if u.GetProjectEnvContentHintPostgresURLNoSsl1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintPostgresURLNoSsl1, "", true)
	}

	if u.GetProjectEnvContentHintIntegrationStoreSecret1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintIntegrationStoreSecret1, "", true)
	}

	if u.GetProjectEnvContentHintFlagsConnectionString1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvContentHintFlagsConnectionString1, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvContentHintUnion1: all fields are null")
}

type GetProjectEnvTypeFlagsSecret1 string

const (
	GetProjectEnvTypeFlagsSecret1FlagsSecret GetProjectEnvTypeFlagsSecret1 = "flags-secret"
)

func (e GetProjectEnvTypeFlagsSecret1) ToPointer() *GetProjectEnvTypeFlagsSecret1 {
	return &e
}
func (e *GetProjectEnvTypeFlagsSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectEnvTypeFlagsSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectEnvTypeFlagsSecret1: %v", v)
	}
}

// GetProjectEnvInternalContentHint1 - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectEnvInternalContentHint1 struct {
	Type GetProjectEnvTypeFlagsSecret1 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectEnvInternalContentHint1) GetType() GetProjectEnvTypeFlagsSecret1 {
	if o == nil {
		return GetProjectEnvTypeFlagsSecret1("")
	}
	return o.Type
}

func (o *GetProjectEnvInternalContentHint1) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectEnvResponseBody1 struct {
	Decrypted bool                       `json:"decrypted"`
	Target    *GetProjectEnvTargetUnion1 `json:"target,omitempty"`
	Type      GetProjectEnvType1         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                         `json:"sunsetSecretId,omitempty"`
	ID                *string                         `json:"id,omitempty"`
	Key               string                          `json:"key"`
	ConfigurationID   *string                         `json:"configurationId,omitempty"`
	CreatedAt         *float64                        `json:"createdAt,omitempty"`
	UpdatedAt         *float64                        `json:"updatedAt,omitempty"`
	CreatedBy         *string                         `json:"createdBy,omitempty"`
	UpdatedBy         *string                         `json:"updatedBy,omitempty"`
	GitBranch         *string                         `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                         `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                         `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectEnvContentHintUnion1 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *GetProjectEnvInternalContentHint1 `json:"internalContentHint,omitempty"`
	Comment              *string                            `json:"comment,omitempty"`
	CustomEnvironmentIds []string                           `json:"customEnvironmentIds,omitempty"`
}

func (o *GetProjectEnvResponseBody1) GetDecrypted() bool {
	if o == nil {
		return false
	}
	return o.Decrypted
}

func (o *GetProjectEnvResponseBody1) GetTarget() *GetProjectEnvTargetUnion1 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectEnvResponseBody1) GetType() GetProjectEnvType1 {
	if o == nil {
		return GetProjectEnvType1("")
	}
	return o.Type
}

func (o *GetProjectEnvResponseBody1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *GetProjectEnvResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectEnvResponseBody1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectEnvResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectEnvResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectEnvResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectEnvResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectEnvResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectEnvResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectEnvResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectEnvResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectEnvResponseBody1) GetContentHint() *GetProjectEnvContentHintUnion1 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectEnvResponseBody1) GetInternalContentHint() *GetProjectEnvInternalContentHint1 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectEnvResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectEnvResponseBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type GetProjectEnvResponseBodyType string

const (
	GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody1 GetProjectEnvResponseBodyType = "getProjectEnv_ResponseBody_1"
	GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody2 GetProjectEnvResponseBodyType = "getProjectEnv_ResponseBody_2"
	GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody3 GetProjectEnvResponseBodyType = "getProjectEnv_ResponseBody_3"
)

type GetProjectEnvResponseBody struct {
	GetProjectEnvResponseBody1 *GetProjectEnvResponseBody1 `queryParam:"inline"`
	GetProjectEnvResponseBody2 *GetProjectEnvResponseBody2 `queryParam:"inline"`
	GetProjectEnvResponseBody3 *GetProjectEnvResponseBody3 `queryParam:"inline"`

	Type GetProjectEnvResponseBodyType
}

func CreateGetProjectEnvResponseBodyGetProjectEnvResponseBody1(getProjectEnvResponseBody1 GetProjectEnvResponseBody1) GetProjectEnvResponseBody {
	typ := GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody1

	return GetProjectEnvResponseBody{
		GetProjectEnvResponseBody1: &getProjectEnvResponseBody1,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyGetProjectEnvResponseBody2(getProjectEnvResponseBody2 GetProjectEnvResponseBody2) GetProjectEnvResponseBody {
	typ := GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody2

	return GetProjectEnvResponseBody{
		GetProjectEnvResponseBody2: &getProjectEnvResponseBody2,
		Type:                       typ,
	}
}

func CreateGetProjectEnvResponseBodyGetProjectEnvResponseBody3(getProjectEnvResponseBody3 GetProjectEnvResponseBody3) GetProjectEnvResponseBody {
	typ := GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody3

	return GetProjectEnvResponseBody{
		GetProjectEnvResponseBody3: &getProjectEnvResponseBody3,
		Type:                       typ,
	}
}

func (u *GetProjectEnvResponseBody) UnmarshalJSON(data []byte) error {

	var getProjectEnvResponseBody1 GetProjectEnvResponseBody1 = GetProjectEnvResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvResponseBody1, "", true, true); err == nil {
		u.GetProjectEnvResponseBody1 = &getProjectEnvResponseBody1
		u.Type = GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody1
		return nil
	}

	var getProjectEnvResponseBody3 GetProjectEnvResponseBody3 = GetProjectEnvResponseBody3{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvResponseBody3, "", true, true); err == nil {
		u.GetProjectEnvResponseBody3 = &getProjectEnvResponseBody3
		u.Type = GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody3
		return nil
	}

	var getProjectEnvResponseBody2 GetProjectEnvResponseBody2 = GetProjectEnvResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getProjectEnvResponseBody2, "", true, true); err == nil {
		u.GetProjectEnvResponseBody2 = &getProjectEnvResponseBody2
		u.Type = GetProjectEnvResponseBodyTypeGetProjectEnvResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectEnvResponseBody", string(data))
}

func (u GetProjectEnvResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetProjectEnvResponseBody1 != nil {
		return utils.MarshalJSON(u.GetProjectEnvResponseBody1, "", true)
	}

	if u.GetProjectEnvResponseBody2 != nil {
		return utils.MarshalJSON(u.GetProjectEnvResponseBody2, "", true)
	}

	if u.GetProjectEnvResponseBody3 != nil {
		return utils.MarshalJSON(u.GetProjectEnvResponseBody3, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectEnvResponseBody: all fields are null")
}

type GetProjectEnvResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *GetProjectEnvResponseBody
}

func (o *GetProjectEnvResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectEnvResponse) GetOneOf() *GetProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
