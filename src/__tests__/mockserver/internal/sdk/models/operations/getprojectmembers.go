// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetProjectMembersRequest struct {
	// The ID or name of the Project.
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Limit how many project members should be returned
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp in milliseconds to only include members added since then.
	Since *int64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp in milliseconds to only include members added until then.
	Until *int64 `queryParam:"style=form,explode=true,name=until"`
	// Search project members by their name, username, and email.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetProjectMembersRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetProjectMembersRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectMembersRequest) GetSince() *int64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetProjectMembersRequest) GetUntil() *int64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetProjectMembersRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetProjectMembersRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectMembersRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetProjectMembersRole - Role of this user in the project.
type GetProjectMembersRole string

const (
	GetProjectMembersRoleAdmin            GetProjectMembersRole = "ADMIN"
	GetProjectMembersRoleProjectDeveloper GetProjectMembersRole = "PROJECT_DEVELOPER"
	GetProjectMembersRoleProjectViewer    GetProjectMembersRole = "PROJECT_VIEWER"
)

func (e GetProjectMembersRole) ToPointer() *GetProjectMembersRole {
	return &e
}
func (e *GetProjectMembersRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = GetProjectMembersRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectMembersRole: %v", v)
	}
}

// ComputedProjectRole - Role of this user in the project.
type ComputedProjectRole string

const (
	ComputedProjectRoleAdmin            ComputedProjectRole = "ADMIN"
	ComputedProjectRoleProjectDeveloper ComputedProjectRole = "PROJECT_DEVELOPER"
	ComputedProjectRoleProjectViewer    ComputedProjectRole = "PROJECT_VIEWER"
)

func (e ComputedProjectRole) ToPointer() *ComputedProjectRole {
	return &e
}
func (e *ComputedProjectRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ComputedProjectRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ComputedProjectRole: %v", v)
	}
}

// GetProjectMembersTeamRole - The role of this user in the team.
type GetProjectMembersTeamRole string

const (
	GetProjectMembersTeamRoleOwner       GetProjectMembersTeamRole = "OWNER"
	GetProjectMembersTeamRoleMember      GetProjectMembersTeamRole = "MEMBER"
	GetProjectMembersTeamRoleDeveloper   GetProjectMembersTeamRole = "DEVELOPER"
	GetProjectMembersTeamRoleSecurity    GetProjectMembersTeamRole = "SECURITY"
	GetProjectMembersTeamRoleBilling     GetProjectMembersTeamRole = "BILLING"
	GetProjectMembersTeamRoleViewer      GetProjectMembersTeamRole = "VIEWER"
	GetProjectMembersTeamRoleContributor GetProjectMembersTeamRole = "CONTRIBUTOR"
)

func (e GetProjectMembersTeamRole) ToPointer() *GetProjectMembersTeamRole {
	return &e
}
func (e *GetProjectMembersTeamRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = GetProjectMembersTeamRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectMembersTeamRole: %v", v)
	}
}

type GetProjectMembersMember struct {
	// ID of the file for the Avatar of this member.
	Avatar *string `json:"avatar,omitempty"`
	// The email of this member.
	Email string `json:"email"`
	// Role of this user in the project.
	Role GetProjectMembersRole `json:"role"`
	// Role of this user in the project.
	ComputedProjectRole ComputedProjectRole `json:"computedProjectRole"`
	// The ID of this user.
	UID string `json:"uid"`
	// The unique username of this user.
	Username string `json:"username"`
	// The name of this user.
	Name *string `json:"name,omitempty"`
	// Timestamp in milliseconds when this member was added.
	CreatedAt float64 `json:"createdAt"`
	// The role of this user in the team.
	TeamRole GetProjectMembersTeamRole `json:"teamRole"`
}

func (o *GetProjectMembersMember) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetProjectMembersMember) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjectMembersMember) GetRole() GetProjectMembersRole {
	if o == nil {
		return GetProjectMembersRole("")
	}
	return o.Role
}

func (o *GetProjectMembersMember) GetComputedProjectRole() ComputedProjectRole {
	if o == nil {
		return ComputedProjectRole("")
	}
	return o.ComputedProjectRole
}

func (o *GetProjectMembersMember) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjectMembersMember) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *GetProjectMembersMember) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetProjectMembersMember) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectMembersMember) GetTeamRole() GetProjectMembersTeamRole {
	if o == nil {
		return GetProjectMembersTeamRole("")
	}
	return o.TeamRole
}

type GetProjectMembersPagination struct {
	HasNext bool `json:"hasNext"`
	// Amount of items in the current page.
	Count float64 `json:"count"`
	// Timestamp that must be used to request the next page.
	Next *float64 `json:"next"`
	// Timestamp that must be used to request the previous page.
	Prev *float64 `json:"prev"`
}

func (o *GetProjectMembersPagination) GetHasNext() bool {
	if o == nil {
		return false
	}
	return o.HasNext
}

func (o *GetProjectMembersPagination) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *GetProjectMembersPagination) GetNext() *float64 {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetProjectMembersPagination) GetPrev() *float64 {
	if o == nil {
		return nil
	}
	return o.Prev
}

// GetProjectMembersResponseBody2 - Paginated list of members for the project.
type GetProjectMembersResponseBody2 struct {
	Members    []GetProjectMembersMember   `json:"members"`
	Pagination GetProjectMembersPagination `json:"pagination"`
}

func (o *GetProjectMembersResponseBody2) GetMembers() []GetProjectMembersMember {
	if o == nil {
		return []GetProjectMembersMember{}
	}
	return o.Members
}

func (o *GetProjectMembersResponseBody2) GetPagination() GetProjectMembersPagination {
	if o == nil {
		return GetProjectMembersPagination{}
	}
	return o.Pagination
}

type GetProjectMembersResponseBody1 struct {
}

type GetProjectMembersResponseBodyType string

const (
	GetProjectMembersResponseBodyTypeGetProjectMembersResponseBody1 GetProjectMembersResponseBodyType = "getProjectMembers_ResponseBody_1"
	GetProjectMembersResponseBodyTypeGetProjectMembersResponseBody2 GetProjectMembersResponseBodyType = "getProjectMembers_ResponseBody_2"
)

// GetProjectMembersResponseBody - Paginated list of members for the project.
type GetProjectMembersResponseBody struct {
	GetProjectMembersResponseBody1 *GetProjectMembersResponseBody1 `queryParam:"inline"`
	GetProjectMembersResponseBody2 *GetProjectMembersResponseBody2 `queryParam:"inline"`

	Type GetProjectMembersResponseBodyType
}

func CreateGetProjectMembersResponseBodyGetProjectMembersResponseBody1(getProjectMembersResponseBody1 GetProjectMembersResponseBody1) GetProjectMembersResponseBody {
	typ := GetProjectMembersResponseBodyTypeGetProjectMembersResponseBody1

	return GetProjectMembersResponseBody{
		GetProjectMembersResponseBody1: &getProjectMembersResponseBody1,
		Type:                           typ,
	}
}

func CreateGetProjectMembersResponseBodyGetProjectMembersResponseBody2(getProjectMembersResponseBody2 GetProjectMembersResponseBody2) GetProjectMembersResponseBody {
	typ := GetProjectMembersResponseBodyTypeGetProjectMembersResponseBody2

	return GetProjectMembersResponseBody{
		GetProjectMembersResponseBody2: &getProjectMembersResponseBody2,
		Type:                           typ,
	}
}

func (u *GetProjectMembersResponseBody) UnmarshalJSON(data []byte) error {

	var getProjectMembersResponseBody1 GetProjectMembersResponseBody1 = GetProjectMembersResponseBody1{}
	if err := utils.UnmarshalJSON(data, &getProjectMembersResponseBody1, "", true, true); err == nil {
		u.GetProjectMembersResponseBody1 = &getProjectMembersResponseBody1
		u.Type = GetProjectMembersResponseBodyTypeGetProjectMembersResponseBody1
		return nil
	}

	var getProjectMembersResponseBody2 GetProjectMembersResponseBody2 = GetProjectMembersResponseBody2{}
	if err := utils.UnmarshalJSON(data, &getProjectMembersResponseBody2, "", true, true); err == nil {
		u.GetProjectMembersResponseBody2 = &getProjectMembersResponseBody2
		u.Type = GetProjectMembersResponseBodyTypeGetProjectMembersResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectMembersResponseBody", string(data))
}

func (u GetProjectMembersResponseBody) MarshalJSON() ([]byte, error) {
	if u.GetProjectMembersResponseBody1 != nil {
		return utils.MarshalJSON(u.GetProjectMembersResponseBody1, "", true)
	}

	if u.GetProjectMembersResponseBody2 != nil {
		return utils.MarshalJSON(u.GetProjectMembersResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectMembersResponseBody: all fields are null")
}

type GetProjectMembersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Paginated list of members for the project.
	OneOf *GetProjectMembersResponseBody
}

func (o *GetProjectMembersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectMembersResponse) GetOneOf() *GetProjectMembersResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
