// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// GitForkProtection - Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
type GitForkProtection string

const (
	GitForkProtectionOne  GitForkProtection = "1"
	GitForkProtectionZero GitForkProtection = "0"
)

func (e GitForkProtection) ToPointer() *GitForkProtection {
	return &e
}
func (e *GitForkProtection) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "1":
		fallthrough
	case "0":
		*e = GitForkProtection(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GitForkProtection: %v", v)
	}
}

type GetProjectsRequest struct {
	// Query only projects updated after the given timestamp
	From *string `queryParam:"style=form,explode=true,name=from"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *GitForkProtection `queryParam:"style=form,explode=true,name=gitForkProtection"`
	// Limit the number of projects returned
	Limit *string `queryParam:"style=form,explode=true,name=limit"`
	// Search projects by the name field
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Filter results by repo. Also used for project count
	Repo *string `queryParam:"style=form,explode=true,name=repo"`
	// Filter results by Repository ID.
	RepoID *string `queryParam:"style=form,explode=true,name=repoId"`
	// Filter results by Repository URL.
	RepoURL *string `queryParam:"style=form,explode=true,name=repoUrl"`
	// Filter results by excluding those projects that belong to a repo
	ExcludeRepos *string `queryParam:"style=form,explode=true,name=excludeRepos"`
	// Filter results by connected Edge Config ID
	EdgeConfigID *string `queryParam:"style=form,explode=true,name=edgeConfigId"`
	// Filter results by connected Edge Config Token ID
	EdgeConfigTokenID *string `queryParam:"style=form,explode=true,name=edgeConfigTokenId"`
	Deprecated        *bool   `queryParam:"style=form,explode=true,name=deprecated"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetProjectsRequest) GetFrom() *string {
	if o == nil {
		return nil
	}
	return o.From
}

func (o *GetProjectsRequest) GetGitForkProtection() *GitForkProtection {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjectsRequest) GetLimit() *string {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetProjectsRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetProjectsRequest) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjectsRequest) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjectsRequest) GetRepoURL() *string {
	if o == nil {
		return nil
	}
	return o.RepoURL
}

func (o *GetProjectsRequest) GetExcludeRepos() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeRepos
}

func (o *GetProjectsRequest) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectsRequest) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectsRequest) GetDeprecated() *bool {
	if o == nil {
		return nil
	}
	return o.Deprecated
}

func (o *GetProjectsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type GetProjectsAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *GetProjectsAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectsAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *GetProjectsAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *GetProjectsAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *GetProjectsAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *GetProjectsAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type GetProjectsSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *GetProjectsSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *GetProjectsSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectsSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectsSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *GetProjectsSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type GetProjectsEnvIDEnum string

const (
	GetProjectsEnvIDEnumProduction GetProjectsEnvIDEnum = "production"
	GetProjectsEnvIDEnumPreview    GetProjectsEnvIDEnum = "preview"
)

func (e GetProjectsEnvIDEnum) ToPointer() *GetProjectsEnvIDEnum {
	return &e
}
func (e *GetProjectsEnvIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = GetProjectsEnvIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsEnvIDEnum: %v", v)
	}
}

type GetProjectsEnvIDUnionType string

const (
	GetProjectsEnvIDUnionTypeStr                  GetProjectsEnvIDUnionType = "str"
	GetProjectsEnvIDUnionTypeGetProjectsEnvIDEnum GetProjectsEnvIDUnionType = "getProjects_envId_enum"
)

type GetProjectsEnvIDUnion struct {
	Str                  *string               `queryParam:"inline"`
	GetProjectsEnvIDEnum *GetProjectsEnvIDEnum `queryParam:"inline"`

	Type GetProjectsEnvIDUnionType
}

func CreateGetProjectsEnvIDUnionStr(str string) GetProjectsEnvIDUnion {
	typ := GetProjectsEnvIDUnionTypeStr

	return GetProjectsEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectsEnvIDUnionGetProjectsEnvIDEnum(getProjectsEnvIDEnum GetProjectsEnvIDEnum) GetProjectsEnvIDUnion {
	typ := GetProjectsEnvIDUnionTypeGetProjectsEnvIDEnum

	return GetProjectsEnvIDUnion{
		GetProjectsEnvIDEnum: &getProjectsEnvIDEnum,
		Type:                 typ,
	}
}

func (u *GetProjectsEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectsEnvIDUnionTypeStr
		return nil
	}

	var getProjectsEnvIDEnum GetProjectsEnvIDEnum = GetProjectsEnvIDEnum("")
	if err := utils.UnmarshalJSON(data, &getProjectsEnvIDEnum, "", true, true); err == nil {
		u.GetProjectsEnvIDEnum = &getProjectsEnvIDEnum
		u.Type = GetProjectsEnvIDUnionTypeGetProjectsEnvIDEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsEnvIDUnion", string(data))
}

func (u GetProjectsEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectsEnvIDEnum != nil {
		return utils.MarshalJSON(u.GetProjectsEnvIDEnum, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsEnvIDUnion: all fields are null")
}

type GetProjectsAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *GetProjectsAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *GetProjectsAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type GetProjectsConnectConfiguration struct {
	EnvID                  GetProjectsEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                `json:"connectConfigurationId"`
	Passive                bool                  `json:"passive"`
	BuildsEnabled          bool                  `json:"buildsEnabled"`
	Aws                    *GetProjectsAws       `json:"aws,omitempty"`
	CreatedAt              float64               `json:"createdAt"`
	UpdatedAt              float64               `json:"updatedAt"`
}

func (o *GetProjectsConnectConfiguration) GetEnvID() GetProjectsEnvIDUnion {
	if o == nil {
		return GetProjectsEnvIDUnion{}
	}
	return o.EnvID
}

func (o *GetProjectsConnectConfiguration) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsConnectConfiguration) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *GetProjectsConnectConfiguration) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *GetProjectsConnectConfiguration) GetAws() *GetProjectsAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *GetProjectsConnectConfiguration) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectsConnectConfiguration) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type GetProjectsDefinition struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *GetProjectsDefinition) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *GetProjectsDefinition) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *GetProjectsDefinition) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type GetProjectsCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                 `json:"deploymentId"`
	Definitions  []GetProjectsDefinition `json:"definitions"`
}

func (o *GetProjectsCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *GetProjectsCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectsCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetProjectsCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *GetProjectsCrons) GetDefinitions() []GetProjectsDefinition {
	if o == nil {
		return []GetProjectsDefinition{}
	}
	return o.Definitions
}

type GetProjectsDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *GetProjectsDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *GetProjectsDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *GetProjectsDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type GetProjectsDeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *GetProjectsDeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *GetProjectsDeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *GetProjectsDeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *GetProjectsDeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *GetProjectsDeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type GetProjectsTargetEnum2 string

const (
	GetProjectsTargetEnum2Production  GetProjectsTargetEnum2 = "production"
	GetProjectsTargetEnum2Preview     GetProjectsTargetEnum2 = "preview"
	GetProjectsTargetEnum2Development GetProjectsTargetEnum2 = "development"
)

func (e GetProjectsTargetEnum2) ToPointer() *GetProjectsTargetEnum2 {
	return &e
}
func (e *GetProjectsTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectsTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTargetEnum2: %v", v)
	}
}

type GetProjectsTargetEnum1 string

const (
	GetProjectsTargetEnum1Production  GetProjectsTargetEnum1 = "production"
	GetProjectsTargetEnum1Preview     GetProjectsTargetEnum1 = "preview"
	GetProjectsTargetEnum1Development GetProjectsTargetEnum1 = "development"
)

func (e GetProjectsTargetEnum1) ToPointer() *GetProjectsTargetEnum1 {
	return &e
}
func (e *GetProjectsTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectsTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTargetEnum1: %v", v)
	}
}

type GetProjectsTargetUnionType string

const (
	GetProjectsTargetUnionTypeArrayOfGetProjectsTargetEnum1 GetProjectsTargetUnionType = "arrayOfGetProjectsTargetEnum1"
	GetProjectsTargetUnionTypeGetProjectsTargetEnum2        GetProjectsTargetUnionType = "getProjects_target_enum_2"
)

type GetProjectsTargetUnion struct {
	ArrayOfGetProjectsTargetEnum1 []GetProjectsTargetEnum1 `queryParam:"inline"`
	GetProjectsTargetEnum2        *GetProjectsTargetEnum2  `queryParam:"inline"`

	Type GetProjectsTargetUnionType
}

func CreateGetProjectsTargetUnionArrayOfGetProjectsTargetEnum1(arrayOfGetProjectsTargetEnum1 []GetProjectsTargetEnum1) GetProjectsTargetUnion {
	typ := GetProjectsTargetUnionTypeArrayOfGetProjectsTargetEnum1

	return GetProjectsTargetUnion{
		ArrayOfGetProjectsTargetEnum1: arrayOfGetProjectsTargetEnum1,
		Type:                          typ,
	}
}

func CreateGetProjectsTargetUnionGetProjectsTargetEnum2(getProjectsTargetEnum2 GetProjectsTargetEnum2) GetProjectsTargetUnion {
	typ := GetProjectsTargetUnionTypeGetProjectsTargetEnum2

	return GetProjectsTargetUnion{
		GetProjectsTargetEnum2: &getProjectsTargetEnum2,
		Type:                   typ,
	}
}

func (u *GetProjectsTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfGetProjectsTargetEnum1 []GetProjectsTargetEnum1 = []GetProjectsTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetProjectsTargetEnum1, "", true, true); err == nil {
		u.ArrayOfGetProjectsTargetEnum1 = arrayOfGetProjectsTargetEnum1
		u.Type = GetProjectsTargetUnionTypeArrayOfGetProjectsTargetEnum1
		return nil
	}

	var getProjectsTargetEnum2 GetProjectsTargetEnum2 = GetProjectsTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &getProjectsTargetEnum2, "", true, true); err == nil {
		u.GetProjectsTargetEnum2 = &getProjectsTargetEnum2
		u.Type = GetProjectsTargetUnionTypeGetProjectsTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsTargetUnion", string(data))
}

func (u GetProjectsTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetProjectsTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfGetProjectsTargetEnum1, "", true)
	}

	if u.GetProjectsTargetEnum2 != nil {
		return utils.MarshalJSON(u.GetProjectsTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsTargetUnion: all fields are null")
}

type GetProjectsEnvType string

const (
	GetProjectsEnvTypeSystem    GetProjectsEnvType = "system"
	GetProjectsEnvTypeEncrypted GetProjectsEnvType = "encrypted"
	GetProjectsEnvTypePlain     GetProjectsEnvType = "plain"
	GetProjectsEnvTypeSensitive GetProjectsEnvType = "sensitive"
	GetProjectsEnvTypeSecret    GetProjectsEnvType = "secret"
)

func (e GetProjectsEnvType) ToPointer() *GetProjectsEnvType {
	return &e
}
func (e *GetProjectsEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = GetProjectsEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsEnvType: %v", v)
	}
}

type GetProjectsTypeFlagsConnectionString string

const (
	GetProjectsTypeFlagsConnectionStringFlagsConnectionString GetProjectsTypeFlagsConnectionString = "flags-connection-string"
)

func (e GetProjectsTypeFlagsConnectionString) ToPointer() *GetProjectsTypeFlagsConnectionString {
	return &e
}
func (e *GetProjectsTypeFlagsConnectionString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = GetProjectsTypeFlagsConnectionString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeFlagsConnectionString: %v", v)
	}
}

type GetProjectsContentHintFlagsConnectionString struct {
	Type      GetProjectsTypeFlagsConnectionString `json:"type"`
	ProjectID string                               `json:"projectId"`
}

func (o *GetProjectsContentHintFlagsConnectionString) GetType() GetProjectsTypeFlagsConnectionString {
	if o == nil {
		return GetProjectsTypeFlagsConnectionString("")
	}
	return o.Type
}

func (o *GetProjectsContentHintFlagsConnectionString) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type GetProjectsTypeIntegrationStoreSecret string

const (
	GetProjectsTypeIntegrationStoreSecretIntegrationStoreSecret GetProjectsTypeIntegrationStoreSecret = "integration-store-secret"
)

func (e GetProjectsTypeIntegrationStoreSecret) ToPointer() *GetProjectsTypeIntegrationStoreSecret {
	return &e
}
func (e *GetProjectsTypeIntegrationStoreSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = GetProjectsTypeIntegrationStoreSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeIntegrationStoreSecret: %v", v)
	}
}

type GetProjectsContentHintIntegrationStoreSecret struct {
	Type                       GetProjectsTypeIntegrationStoreSecret `json:"type"`
	StoreID                    string                                `json:"storeId"`
	IntegrationID              string                                `json:"integrationId"`
	IntegrationProductID       string                                `json:"integrationProductId"`
	IntegrationConfigurationID string                                `json:"integrationConfigurationId"`
}

func (o *GetProjectsContentHintIntegrationStoreSecret) GetType() GetProjectsTypeIntegrationStoreSecret {
	if o == nil {
		return GetProjectsTypeIntegrationStoreSecret("")
	}
	return o.Type
}

func (o *GetProjectsContentHintIntegrationStoreSecret) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *GetProjectsContentHintIntegrationStoreSecret) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetProjectsContentHintIntegrationStoreSecret) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *GetProjectsContentHintIntegrationStoreSecret) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type GetProjectsTypePostgresURLNoSsl string

const (
	GetProjectsTypePostgresURLNoSslPostgresURLNoSsl GetProjectsTypePostgresURLNoSsl = "postgres-url-no-ssl"
)

func (e GetProjectsTypePostgresURLNoSsl) ToPointer() *GetProjectsTypePostgresURLNoSsl {
	return &e
}
func (e *GetProjectsTypePostgresURLNoSsl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = GetProjectsTypePostgresURLNoSsl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresURLNoSsl: %v", v)
	}
}

type GetProjectsContentHintPostgresURLNoSsl struct {
	Type    GetProjectsTypePostgresURLNoSsl `json:"type"`
	StoreID string                          `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresURLNoSsl) GetType() GetProjectsTypePostgresURLNoSsl {
	if o == nil {
		return GetProjectsTypePostgresURLNoSsl("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresURLNoSsl) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresDatabase string

const (
	GetProjectsTypePostgresDatabasePostgresDatabase GetProjectsTypePostgresDatabase = "postgres-database"
)

func (e GetProjectsTypePostgresDatabase) ToPointer() *GetProjectsTypePostgresDatabase {
	return &e
}
func (e *GetProjectsTypePostgresDatabase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = GetProjectsTypePostgresDatabase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresDatabase: %v", v)
	}
}

type GetProjectsContentHintPostgresDatabase struct {
	Type    GetProjectsTypePostgresDatabase `json:"type"`
	StoreID string                          `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresDatabase) GetType() GetProjectsTypePostgresDatabase {
	if o == nil {
		return GetProjectsTypePostgresDatabase("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresDatabase) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresPassword string

const (
	GetProjectsTypePostgresPasswordPostgresPassword GetProjectsTypePostgresPassword = "postgres-password"
)

func (e GetProjectsTypePostgresPassword) ToPointer() *GetProjectsTypePostgresPassword {
	return &e
}
func (e *GetProjectsTypePostgresPassword) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = GetProjectsTypePostgresPassword(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresPassword: %v", v)
	}
}

type GetProjectsContentHintPostgresPassword struct {
	Type    GetProjectsTypePostgresPassword `json:"type"`
	StoreID string                          `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresPassword) GetType() GetProjectsTypePostgresPassword {
	if o == nil {
		return GetProjectsTypePostgresPassword("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresPassword) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresHost string

const (
	GetProjectsTypePostgresHostPostgresHost GetProjectsTypePostgresHost = "postgres-host"
)

func (e GetProjectsTypePostgresHost) ToPointer() *GetProjectsTypePostgresHost {
	return &e
}
func (e *GetProjectsTypePostgresHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = GetProjectsTypePostgresHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresHost: %v", v)
	}
}

type GetProjectsContentHintPostgresHost struct {
	Type    GetProjectsTypePostgresHost `json:"type"`
	StoreID string                      `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresHost) GetType() GetProjectsTypePostgresHost {
	if o == nil {
		return GetProjectsTypePostgresHost("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresHost) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresUser string

const (
	GetProjectsTypePostgresUserPostgresUser GetProjectsTypePostgresUser = "postgres-user"
)

func (e GetProjectsTypePostgresUser) ToPointer() *GetProjectsTypePostgresUser {
	return &e
}
func (e *GetProjectsTypePostgresUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = GetProjectsTypePostgresUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresUser: %v", v)
	}
}

type GetProjectsContentHintPostgresUser struct {
	Type    GetProjectsTypePostgresUser `json:"type"`
	StoreID string                      `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresUser) GetType() GetProjectsTypePostgresUser {
	if o == nil {
		return GetProjectsTypePostgresUser("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresUser) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresPrismaURL string

const (
	GetProjectsTypePostgresPrismaURLPostgresPrismaURL GetProjectsTypePostgresPrismaURL = "postgres-prisma-url"
)

func (e GetProjectsTypePostgresPrismaURL) ToPointer() *GetProjectsTypePostgresPrismaURL {
	return &e
}
func (e *GetProjectsTypePostgresPrismaURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = GetProjectsTypePostgresPrismaURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresPrismaURL: %v", v)
	}
}

type GetProjectsContentHintPostgresPrismaURL struct {
	Type    GetProjectsTypePostgresPrismaURL `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresPrismaURL) GetType() GetProjectsTypePostgresPrismaURL {
	if o == nil {
		return GetProjectsTypePostgresPrismaURL("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresPrismaURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresURLNonPooling string

const (
	GetProjectsTypePostgresURLNonPoolingPostgresURLNonPooling GetProjectsTypePostgresURLNonPooling = "postgres-url-non-pooling"
)

func (e GetProjectsTypePostgresURLNonPooling) ToPointer() *GetProjectsTypePostgresURLNonPooling {
	return &e
}
func (e *GetProjectsTypePostgresURLNonPooling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = GetProjectsTypePostgresURLNonPooling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresURLNonPooling: %v", v)
	}
}

type GetProjectsContentHintPostgresURLNonPooling struct {
	Type    GetProjectsTypePostgresURLNonPooling `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresURLNonPooling) GetType() GetProjectsTypePostgresURLNonPooling {
	if o == nil {
		return GetProjectsTypePostgresURLNonPooling("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresURLNonPooling) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypePostgresURL string

const (
	GetProjectsTypePostgresURLPostgresURL GetProjectsTypePostgresURL = "postgres-url"
)

func (e GetProjectsTypePostgresURL) ToPointer() *GetProjectsTypePostgresURL {
	return &e
}
func (e *GetProjectsTypePostgresURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = GetProjectsTypePostgresURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypePostgresURL: %v", v)
	}
}

type GetProjectsContentHintPostgresURL struct {
	Type    GetProjectsTypePostgresURL `json:"type"`
	StoreID string                     `json:"storeId"`
}

func (o *GetProjectsContentHintPostgresURL) GetType() GetProjectsTypePostgresURL {
	if o == nil {
		return GetProjectsTypePostgresURL("")
	}
	return o.Type
}

func (o *GetProjectsContentHintPostgresURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypeBlobReadWriteToken string

const (
	GetProjectsTypeBlobReadWriteTokenBlobReadWriteToken GetProjectsTypeBlobReadWriteToken = "blob-read-write-token"
)

func (e GetProjectsTypeBlobReadWriteToken) ToPointer() *GetProjectsTypeBlobReadWriteToken {
	return &e
}
func (e *GetProjectsTypeBlobReadWriteToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = GetProjectsTypeBlobReadWriteToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeBlobReadWriteToken: %v", v)
	}
}

type GetProjectsContentHintBlobReadWriteToken struct {
	Type    GetProjectsTypeBlobReadWriteToken `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *GetProjectsContentHintBlobReadWriteToken) GetType() GetProjectsTypeBlobReadWriteToken {
	if o == nil {
		return GetProjectsTypeBlobReadWriteToken("")
	}
	return o.Type
}

func (o *GetProjectsContentHintBlobReadWriteToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypeRedisRestAPIReadOnlyToken string

const (
	GetProjectsTypeRedisRestAPIReadOnlyTokenRedisRestAPIReadOnlyToken GetProjectsTypeRedisRestAPIReadOnlyToken = "redis-rest-api-read-only-token"
)

func (e GetProjectsTypeRedisRestAPIReadOnlyToken) ToPointer() *GetProjectsTypeRedisRestAPIReadOnlyToken {
	return &e
}
func (e *GetProjectsTypeRedisRestAPIReadOnlyToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = GetProjectsTypeRedisRestAPIReadOnlyToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeRedisRestAPIReadOnlyToken: %v", v)
	}
}

type GetProjectsContentHintRedisRestAPIReadOnlyToken struct {
	Type    GetProjectsTypeRedisRestAPIReadOnlyToken `json:"type"`
	StoreID string                                   `json:"storeId"`
}

func (o *GetProjectsContentHintRedisRestAPIReadOnlyToken) GetType() GetProjectsTypeRedisRestAPIReadOnlyToken {
	if o == nil {
		return GetProjectsTypeRedisRestAPIReadOnlyToken("")
	}
	return o.Type
}

func (o *GetProjectsContentHintRedisRestAPIReadOnlyToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypeRedisRestAPIToken string

const (
	GetProjectsTypeRedisRestAPITokenRedisRestAPIToken GetProjectsTypeRedisRestAPIToken = "redis-rest-api-token"
)

func (e GetProjectsTypeRedisRestAPIToken) ToPointer() *GetProjectsTypeRedisRestAPIToken {
	return &e
}
func (e *GetProjectsTypeRedisRestAPIToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = GetProjectsTypeRedisRestAPIToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeRedisRestAPIToken: %v", v)
	}
}

type GetProjectsContentHintRedisRestAPIToken struct {
	Type    GetProjectsTypeRedisRestAPIToken `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *GetProjectsContentHintRedisRestAPIToken) GetType() GetProjectsTypeRedisRestAPIToken {
	if o == nil {
		return GetProjectsTypeRedisRestAPIToken("")
	}
	return o.Type
}

func (o *GetProjectsContentHintRedisRestAPIToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypeRedisRestAPIURL string

const (
	GetProjectsTypeRedisRestAPIURLRedisRestAPIURL GetProjectsTypeRedisRestAPIURL = "redis-rest-api-url"
)

func (e GetProjectsTypeRedisRestAPIURL) ToPointer() *GetProjectsTypeRedisRestAPIURL {
	return &e
}
func (e *GetProjectsTypeRedisRestAPIURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = GetProjectsTypeRedisRestAPIURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeRedisRestAPIURL: %v", v)
	}
}

type GetProjectsContentHintRedisRestAPIURL struct {
	Type    GetProjectsTypeRedisRestAPIURL `json:"type"`
	StoreID string                         `json:"storeId"`
}

func (o *GetProjectsContentHintRedisRestAPIURL) GetType() GetProjectsTypeRedisRestAPIURL {
	if o == nil {
		return GetProjectsTypeRedisRestAPIURL("")
	}
	return o.Type
}

func (o *GetProjectsContentHintRedisRestAPIURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsTypeRedisURL string

const (
	GetProjectsTypeRedisURLRedisURL GetProjectsTypeRedisURL = "redis-url"
)

func (e GetProjectsTypeRedisURL) ToPointer() *GetProjectsTypeRedisURL {
	return &e
}
func (e *GetProjectsTypeRedisURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = GetProjectsTypeRedisURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeRedisURL: %v", v)
	}
}

type GetProjectsContentHintRedisURL struct {
	Type    GetProjectsTypeRedisURL `json:"type"`
	StoreID string                  `json:"storeId"`
}

func (o *GetProjectsContentHintRedisURL) GetType() GetProjectsTypeRedisURL {
	if o == nil {
		return GetProjectsTypeRedisURL("")
	}
	return o.Type
}

func (o *GetProjectsContentHintRedisURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type GetProjectsContentHintUnionType string

const (
	GetProjectsContentHintUnionTypeGetProjectsContentHintRedisURL                  GetProjectsContentHintUnionType = "getProjects_contentHint_RedisURL"
	GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIURL           GetProjectsContentHintUnionType = "getProjects_contentHint_RedisRestAPIURL"
	GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIToken         GetProjectsContentHintUnionType = "getProjects_contentHint_RedisRestAPIToken"
	GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIReadOnlyToken GetProjectsContentHintUnionType = "getProjects_contentHint_RedisRestAPIReadOnlyToken"
	GetProjectsContentHintUnionTypeGetProjectsContentHintBlobReadWriteToken        GetProjectsContentHintUnionType = "getProjects_contentHint_BlobReadWriteToken"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURL               GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresURL"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURLNonPooling     GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresURLNonPooling"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresPrismaURL         GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresPrismaURL"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresUser              GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresUser"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresHost              GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresHost"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresPassword          GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresPassword"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresDatabase          GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresDatabase"
	GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURLNoSsl          GetProjectsContentHintUnionType = "getProjects_contentHint_PostgresURLNoSsl"
	GetProjectsContentHintUnionTypeGetProjectsContentHintIntegrationStoreSecret    GetProjectsContentHintUnionType = "getProjects_contentHint_IntegrationStoreSecret"
	GetProjectsContentHintUnionTypeGetProjectsContentHintFlagsConnectionString     GetProjectsContentHintUnionType = "getProjects_contentHint_FlagsConnectionString"
)

type GetProjectsContentHintUnion struct {
	GetProjectsContentHintRedisURL                  *GetProjectsContentHintRedisURL                  `queryParam:"inline"`
	GetProjectsContentHintRedisRestAPIURL           *GetProjectsContentHintRedisRestAPIURL           `queryParam:"inline"`
	GetProjectsContentHintRedisRestAPIToken         *GetProjectsContentHintRedisRestAPIToken         `queryParam:"inline"`
	GetProjectsContentHintRedisRestAPIReadOnlyToken *GetProjectsContentHintRedisRestAPIReadOnlyToken `queryParam:"inline"`
	GetProjectsContentHintBlobReadWriteToken        *GetProjectsContentHintBlobReadWriteToken        `queryParam:"inline"`
	GetProjectsContentHintPostgresURL               *GetProjectsContentHintPostgresURL               `queryParam:"inline"`
	GetProjectsContentHintPostgresURLNonPooling     *GetProjectsContentHintPostgresURLNonPooling     `queryParam:"inline"`
	GetProjectsContentHintPostgresPrismaURL         *GetProjectsContentHintPostgresPrismaURL         `queryParam:"inline"`
	GetProjectsContentHintPostgresUser              *GetProjectsContentHintPostgresUser              `queryParam:"inline"`
	GetProjectsContentHintPostgresHost              *GetProjectsContentHintPostgresHost              `queryParam:"inline"`
	GetProjectsContentHintPostgresPassword          *GetProjectsContentHintPostgresPassword          `queryParam:"inline"`
	GetProjectsContentHintPostgresDatabase          *GetProjectsContentHintPostgresDatabase          `queryParam:"inline"`
	GetProjectsContentHintPostgresURLNoSsl          *GetProjectsContentHintPostgresURLNoSsl          `queryParam:"inline"`
	GetProjectsContentHintIntegrationStoreSecret    *GetProjectsContentHintIntegrationStoreSecret    `queryParam:"inline"`
	GetProjectsContentHintFlagsConnectionString     *GetProjectsContentHintFlagsConnectionString     `queryParam:"inline"`

	Type GetProjectsContentHintUnionType
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintRedisURL(getProjectsContentHintRedisURL GetProjectsContentHintRedisURL) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintRedisURL

	return GetProjectsContentHintUnion{
		GetProjectsContentHintRedisURL: &getProjectsContentHintRedisURL,
		Type:                           typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintRedisRestAPIURL(getProjectsContentHintRedisRestAPIURL GetProjectsContentHintRedisRestAPIURL) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIURL

	return GetProjectsContentHintUnion{
		GetProjectsContentHintRedisRestAPIURL: &getProjectsContentHintRedisRestAPIURL,
		Type:                                  typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintRedisRestAPIToken(getProjectsContentHintRedisRestAPIToken GetProjectsContentHintRedisRestAPIToken) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIToken

	return GetProjectsContentHintUnion{
		GetProjectsContentHintRedisRestAPIToken: &getProjectsContentHintRedisRestAPIToken,
		Type:                                    typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintRedisRestAPIReadOnlyToken(getProjectsContentHintRedisRestAPIReadOnlyToken GetProjectsContentHintRedisRestAPIReadOnlyToken) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIReadOnlyToken

	return GetProjectsContentHintUnion{
		GetProjectsContentHintRedisRestAPIReadOnlyToken: &getProjectsContentHintRedisRestAPIReadOnlyToken,
		Type: typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintBlobReadWriteToken(getProjectsContentHintBlobReadWriteToken GetProjectsContentHintBlobReadWriteToken) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintBlobReadWriteToken

	return GetProjectsContentHintUnion{
		GetProjectsContentHintBlobReadWriteToken: &getProjectsContentHintBlobReadWriteToken,
		Type:                                     typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresURL(getProjectsContentHintPostgresURL GetProjectsContentHintPostgresURL) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURL

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresURL: &getProjectsContentHintPostgresURL,
		Type:                              typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresURLNonPooling(getProjectsContentHintPostgresURLNonPooling GetProjectsContentHintPostgresURLNonPooling) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURLNonPooling

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresURLNonPooling: &getProjectsContentHintPostgresURLNonPooling,
		Type: typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresPrismaURL(getProjectsContentHintPostgresPrismaURL GetProjectsContentHintPostgresPrismaURL) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresPrismaURL

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresPrismaURL: &getProjectsContentHintPostgresPrismaURL,
		Type:                                    typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresUser(getProjectsContentHintPostgresUser GetProjectsContentHintPostgresUser) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresUser

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresUser: &getProjectsContentHintPostgresUser,
		Type:                               typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresHost(getProjectsContentHintPostgresHost GetProjectsContentHintPostgresHost) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresHost

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresHost: &getProjectsContentHintPostgresHost,
		Type:                               typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresPassword(getProjectsContentHintPostgresPassword GetProjectsContentHintPostgresPassword) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresPassword

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresPassword: &getProjectsContentHintPostgresPassword,
		Type:                                   typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresDatabase(getProjectsContentHintPostgresDatabase GetProjectsContentHintPostgresDatabase) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresDatabase

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresDatabase: &getProjectsContentHintPostgresDatabase,
		Type:                                   typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintPostgresURLNoSsl(getProjectsContentHintPostgresURLNoSsl GetProjectsContentHintPostgresURLNoSsl) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURLNoSsl

	return GetProjectsContentHintUnion{
		GetProjectsContentHintPostgresURLNoSsl: &getProjectsContentHintPostgresURLNoSsl,
		Type:                                   typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintIntegrationStoreSecret(getProjectsContentHintIntegrationStoreSecret GetProjectsContentHintIntegrationStoreSecret) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintIntegrationStoreSecret

	return GetProjectsContentHintUnion{
		GetProjectsContentHintIntegrationStoreSecret: &getProjectsContentHintIntegrationStoreSecret,
		Type: typ,
	}
}

func CreateGetProjectsContentHintUnionGetProjectsContentHintFlagsConnectionString(getProjectsContentHintFlagsConnectionString GetProjectsContentHintFlagsConnectionString) GetProjectsContentHintUnion {
	typ := GetProjectsContentHintUnionTypeGetProjectsContentHintFlagsConnectionString

	return GetProjectsContentHintUnion{
		GetProjectsContentHintFlagsConnectionString: &getProjectsContentHintFlagsConnectionString,
		Type: typ,
	}
}

func (u *GetProjectsContentHintUnion) UnmarshalJSON(data []byte) error {

	var getProjectsContentHintPostgresURLNonPooling GetProjectsContentHintPostgresURLNonPooling = GetProjectsContentHintPostgresURLNonPooling{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresURLNonPooling, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresURLNonPooling = &getProjectsContentHintPostgresURLNonPooling
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURLNonPooling
		return nil
	}

	var getProjectsContentHintPostgresPassword GetProjectsContentHintPostgresPassword = GetProjectsContentHintPostgresPassword{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresPassword, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresPassword = &getProjectsContentHintPostgresPassword
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresPassword
		return nil
	}

	var getProjectsContentHintRedisRestAPIToken GetProjectsContentHintRedisRestAPIToken = GetProjectsContentHintRedisRestAPIToken{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintRedisRestAPIToken, "", true, true); err == nil {
		u.GetProjectsContentHintRedisRestAPIToken = &getProjectsContentHintRedisRestAPIToken
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIToken
		return nil
	}

	var getProjectsContentHintRedisRestAPIReadOnlyToken GetProjectsContentHintRedisRestAPIReadOnlyToken = GetProjectsContentHintRedisRestAPIReadOnlyToken{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintRedisRestAPIReadOnlyToken, "", true, true); err == nil {
		u.GetProjectsContentHintRedisRestAPIReadOnlyToken = &getProjectsContentHintRedisRestAPIReadOnlyToken
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIReadOnlyToken
		return nil
	}

	var getProjectsContentHintBlobReadWriteToken GetProjectsContentHintBlobReadWriteToken = GetProjectsContentHintBlobReadWriteToken{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintBlobReadWriteToken, "", true, true); err == nil {
		u.GetProjectsContentHintBlobReadWriteToken = &getProjectsContentHintBlobReadWriteToken
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintBlobReadWriteToken
		return nil
	}

	var getProjectsContentHintPostgresURL GetProjectsContentHintPostgresURL = GetProjectsContentHintPostgresURL{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresURL, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresURL = &getProjectsContentHintPostgresURL
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURL
		return nil
	}

	var getProjectsContentHintRedisRestAPIURL GetProjectsContentHintRedisRestAPIURL = GetProjectsContentHintRedisRestAPIURL{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintRedisRestAPIURL, "", true, true); err == nil {
		u.GetProjectsContentHintRedisRestAPIURL = &getProjectsContentHintRedisRestAPIURL
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintRedisRestAPIURL
		return nil
	}

	var getProjectsContentHintPostgresUser GetProjectsContentHintPostgresUser = GetProjectsContentHintPostgresUser{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresUser, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresUser = &getProjectsContentHintPostgresUser
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresUser
		return nil
	}

	var getProjectsContentHintRedisURL GetProjectsContentHintRedisURL = GetProjectsContentHintRedisURL{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintRedisURL, "", true, true); err == nil {
		u.GetProjectsContentHintRedisURL = &getProjectsContentHintRedisURL
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintRedisURL
		return nil
	}

	var getProjectsContentHintPostgresHost GetProjectsContentHintPostgresHost = GetProjectsContentHintPostgresHost{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresHost, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresHost = &getProjectsContentHintPostgresHost
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresHost
		return nil
	}

	var getProjectsContentHintPostgresPrismaURL GetProjectsContentHintPostgresPrismaURL = GetProjectsContentHintPostgresPrismaURL{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresPrismaURL, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresPrismaURL = &getProjectsContentHintPostgresPrismaURL
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresPrismaURL
		return nil
	}

	var getProjectsContentHintPostgresDatabase GetProjectsContentHintPostgresDatabase = GetProjectsContentHintPostgresDatabase{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresDatabase, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresDatabase = &getProjectsContentHintPostgresDatabase
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresDatabase
		return nil
	}

	var getProjectsContentHintPostgresURLNoSsl GetProjectsContentHintPostgresURLNoSsl = GetProjectsContentHintPostgresURLNoSsl{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintPostgresURLNoSsl, "", true, true); err == nil {
		u.GetProjectsContentHintPostgresURLNoSsl = &getProjectsContentHintPostgresURLNoSsl
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintPostgresURLNoSsl
		return nil
	}

	var getProjectsContentHintFlagsConnectionString GetProjectsContentHintFlagsConnectionString = GetProjectsContentHintFlagsConnectionString{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintFlagsConnectionString, "", true, true); err == nil {
		u.GetProjectsContentHintFlagsConnectionString = &getProjectsContentHintFlagsConnectionString
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintFlagsConnectionString
		return nil
	}

	var getProjectsContentHintIntegrationStoreSecret GetProjectsContentHintIntegrationStoreSecret = GetProjectsContentHintIntegrationStoreSecret{}
	if err := utils.UnmarshalJSON(data, &getProjectsContentHintIntegrationStoreSecret, "", true, true); err == nil {
		u.GetProjectsContentHintIntegrationStoreSecret = &getProjectsContentHintIntegrationStoreSecret
		u.Type = GetProjectsContentHintUnionTypeGetProjectsContentHintIntegrationStoreSecret
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsContentHintUnion", string(data))
}

func (u GetProjectsContentHintUnion) MarshalJSON() ([]byte, error) {
	if u.GetProjectsContentHintRedisURL != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintRedisURL, "", true)
	}

	if u.GetProjectsContentHintRedisRestAPIURL != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintRedisRestAPIURL, "", true)
	}

	if u.GetProjectsContentHintRedisRestAPIToken != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintRedisRestAPIToken, "", true)
	}

	if u.GetProjectsContentHintRedisRestAPIReadOnlyToken != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintRedisRestAPIReadOnlyToken, "", true)
	}

	if u.GetProjectsContentHintBlobReadWriteToken != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintBlobReadWriteToken, "", true)
	}

	if u.GetProjectsContentHintPostgresURL != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresURL, "", true)
	}

	if u.GetProjectsContentHintPostgresURLNonPooling != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresURLNonPooling, "", true)
	}

	if u.GetProjectsContentHintPostgresPrismaURL != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresPrismaURL, "", true)
	}

	if u.GetProjectsContentHintPostgresUser != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresUser, "", true)
	}

	if u.GetProjectsContentHintPostgresHost != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresHost, "", true)
	}

	if u.GetProjectsContentHintPostgresPassword != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresPassword, "", true)
	}

	if u.GetProjectsContentHintPostgresDatabase != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresDatabase, "", true)
	}

	if u.GetProjectsContentHintPostgresURLNoSsl != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintPostgresURLNoSsl, "", true)
	}

	if u.GetProjectsContentHintIntegrationStoreSecret != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintIntegrationStoreSecret, "", true)
	}

	if u.GetProjectsContentHintFlagsConnectionString != nil {
		return utils.MarshalJSON(u.GetProjectsContentHintFlagsConnectionString, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsContentHintUnion: all fields are null")
}

type GetProjectsTypeFlagsSecret string

const (
	GetProjectsTypeFlagsSecretFlagsSecret GetProjectsTypeFlagsSecret = "flags-secret"
)

func (e GetProjectsTypeFlagsSecret) ToPointer() *GetProjectsTypeFlagsSecret {
	return &e
}
func (e *GetProjectsTypeFlagsSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = GetProjectsTypeFlagsSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeFlagsSecret: %v", v)
	}
}

// GetProjectsInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type GetProjectsInternalContentHint struct {
	Type GetProjectsTypeFlagsSecret `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *GetProjectsInternalContentHint) GetType() GetProjectsTypeFlagsSecret {
	if o == nil {
		return GetProjectsTypeFlagsSecret("")
	}
	return o.Type
}

func (o *GetProjectsInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type GetProjectsEnv struct {
	Target *GetProjectsTargetUnion `json:"target,omitempty"`
	Type   GetProjectsEnvType      `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                      `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                        `json:"decrypted,omitempty"`
	Value             string                       `json:"value"`
	VsmValue          *string                      `json:"vsmValue,omitempty"`
	ID                *string                      `json:"id,omitempty"`
	Key               string                       `json:"key"`
	ConfigurationID   *string                      `json:"configurationId,omitempty"`
	CreatedAt         *float64                     `json:"createdAt,omitempty"`
	UpdatedAt         *float64                     `json:"updatedAt,omitempty"`
	CreatedBy         *string                      `json:"createdBy,omitempty"`
	UpdatedBy         *string                      `json:"updatedBy,omitempty"`
	GitBranch         *string                      `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                      `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                      `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *GetProjectsContentHintUnion `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *GetProjectsInternalContentHint `json:"internalContentHint,omitempty"`
	Comment              *string                         `json:"comment,omitempty"`
	CustomEnvironmentIds []string                        `json:"customEnvironmentIds,omitempty"`
}

func (o *GetProjectsEnv) GetTarget() *GetProjectsTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectsEnv) GetType() GetProjectsEnvType {
	if o == nil {
		return GetProjectsEnvType("")
	}
	return o.Type
}

func (o *GetProjectsEnv) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *GetProjectsEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetProjectsEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectsEnv) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *GetProjectsEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetProjectsEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *GetProjectsEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *GetProjectsEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetProjectsEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetProjectsEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectsEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetProjectsEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *GetProjectsEnv) GetContentHint() *GetProjectsContentHintUnion {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *GetProjectsEnv) GetInternalContentHint() *GetProjectsInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *GetProjectsEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetProjectsEnv) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

// GetProjectsCustomEnvironmentType - The type of environment (production, preview, or development)
type GetProjectsCustomEnvironmentType string

const (
	GetProjectsCustomEnvironmentTypeProduction  GetProjectsCustomEnvironmentType = "production"
	GetProjectsCustomEnvironmentTypePreview     GetProjectsCustomEnvironmentType = "preview"
	GetProjectsCustomEnvironmentTypeDevelopment GetProjectsCustomEnvironmentType = "development"
)

func (e GetProjectsCustomEnvironmentType) ToPointer() *GetProjectsCustomEnvironmentType {
	return &e
}
func (e *GetProjectsCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetProjectsCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsCustomEnvironmentType: %v", v)
	}
}

// GetProjectsCustomEnvironmentBranchMatcherType - The type of matching to perform
type GetProjectsCustomEnvironmentBranchMatcherType string

const (
	GetProjectsCustomEnvironmentBranchMatcherTypeEndsWith   GetProjectsCustomEnvironmentBranchMatcherType = "endsWith"
	GetProjectsCustomEnvironmentBranchMatcherTypeStartsWith GetProjectsCustomEnvironmentBranchMatcherType = "startsWith"
	GetProjectsCustomEnvironmentBranchMatcherTypeEquals     GetProjectsCustomEnvironmentBranchMatcherType = "equals"
)

func (e GetProjectsCustomEnvironmentBranchMatcherType) ToPointer() *GetProjectsCustomEnvironmentBranchMatcherType {
	return &e
}
func (e *GetProjectsCustomEnvironmentBranchMatcherType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = GetProjectsCustomEnvironmentBranchMatcherType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsCustomEnvironmentBranchMatcherType: %v", v)
	}
}

// GetProjectsCustomEnvironmentBranchMatcher - Configuration for matching git branches to this environment
type GetProjectsCustomEnvironmentBranchMatcher struct {
	// The type of matching to perform
	Type GetProjectsCustomEnvironmentBranchMatcherType `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *GetProjectsCustomEnvironmentBranchMatcher) GetType() GetProjectsCustomEnvironmentBranchMatcherType {
	if o == nil {
		return GetProjectsCustomEnvironmentBranchMatcherType("")
	}
	return o.Type
}

func (o *GetProjectsCustomEnvironmentBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// GetProjectsVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetProjectsVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetProjectsVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetProjectsVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetProjectsVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectsVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// GetProjectsDomain - List of domains associated with this environment
type GetProjectsDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetProjectsVerification `json:"verification,omitempty"`
}

func (o *GetProjectsDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetProjectsDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectsDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetProjectsDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetProjectsDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetProjectsDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetProjectsDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetProjectsDomain) GetVerification() []GetProjectsVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// GetProjectsCustomEnvironment - Internal representation of a custom environment with all required properties
type GetProjectsCustomEnvironment struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type GetProjectsCustomEnvironmentType `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *GetProjectsCustomEnvironmentBranchMatcher `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []GetProjectsDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *GetProjectsCustomEnvironment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsCustomEnvironment) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetProjectsCustomEnvironment) GetType() GetProjectsCustomEnvironmentType {
	if o == nil {
		return GetProjectsCustomEnvironmentType("")
	}
	return o.Type
}

func (o *GetProjectsCustomEnvironment) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetProjectsCustomEnvironment) GetBranchMatcher() *GetProjectsCustomEnvironmentBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *GetProjectsCustomEnvironment) GetDomains() []GetProjectsDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *GetProjectsCustomEnvironment) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *GetProjectsCustomEnvironment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectsCustomEnvironment) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type GetProjectsFramework string

const (
	GetProjectsFrameworkBlitzjs        GetProjectsFramework = "blitzjs"
	GetProjectsFrameworkNextjs         GetProjectsFramework = "nextjs"
	GetProjectsFrameworkGatsby         GetProjectsFramework = "gatsby"
	GetProjectsFrameworkRemix          GetProjectsFramework = "remix"
	GetProjectsFrameworkReactRouter    GetProjectsFramework = "react-router"
	GetProjectsFrameworkAstro          GetProjectsFramework = "astro"
	GetProjectsFrameworkHexo           GetProjectsFramework = "hexo"
	GetProjectsFrameworkEleventy       GetProjectsFramework = "eleventy"
	GetProjectsFrameworkDocusaurus2    GetProjectsFramework = "docusaurus-2"
	GetProjectsFrameworkDocusaurus     GetProjectsFramework = "docusaurus"
	GetProjectsFrameworkPreact         GetProjectsFramework = "preact"
	GetProjectsFrameworkSolidstart1    GetProjectsFramework = "solidstart-1"
	GetProjectsFrameworkSolidstart     GetProjectsFramework = "solidstart"
	GetProjectsFrameworkDojo           GetProjectsFramework = "dojo"
	GetProjectsFrameworkEmber          GetProjectsFramework = "ember"
	GetProjectsFrameworkVue            GetProjectsFramework = "vue"
	GetProjectsFrameworkScully         GetProjectsFramework = "scully"
	GetProjectsFrameworkIonicAngular   GetProjectsFramework = "ionic-angular"
	GetProjectsFrameworkAngular        GetProjectsFramework = "angular"
	GetProjectsFrameworkPolymer        GetProjectsFramework = "polymer"
	GetProjectsFrameworkSvelte         GetProjectsFramework = "svelte"
	GetProjectsFrameworkSveltekit      GetProjectsFramework = "sveltekit"
	GetProjectsFrameworkSveltekit1     GetProjectsFramework = "sveltekit-1"
	GetProjectsFrameworkIonicReact     GetProjectsFramework = "ionic-react"
	GetProjectsFrameworkCreateReactApp GetProjectsFramework = "create-react-app"
	GetProjectsFrameworkGridsome       GetProjectsFramework = "gridsome"
	GetProjectsFrameworkUmijs          GetProjectsFramework = "umijs"
	GetProjectsFrameworkSapper         GetProjectsFramework = "sapper"
	GetProjectsFrameworkSaber          GetProjectsFramework = "saber"
	GetProjectsFrameworkStencil        GetProjectsFramework = "stencil"
	GetProjectsFrameworkNuxtjs         GetProjectsFramework = "nuxtjs"
	GetProjectsFrameworkRedwoodjs      GetProjectsFramework = "redwoodjs"
	GetProjectsFrameworkHugo           GetProjectsFramework = "hugo"
	GetProjectsFrameworkJekyll         GetProjectsFramework = "jekyll"
	GetProjectsFrameworkBrunch         GetProjectsFramework = "brunch"
	GetProjectsFrameworkMiddleman      GetProjectsFramework = "middleman"
	GetProjectsFrameworkZola           GetProjectsFramework = "zola"
	GetProjectsFrameworkHydrogen       GetProjectsFramework = "hydrogen"
	GetProjectsFrameworkVite           GetProjectsFramework = "vite"
	GetProjectsFrameworkVitepress      GetProjectsFramework = "vitepress"
	GetProjectsFrameworkVuepress       GetProjectsFramework = "vuepress"
	GetProjectsFrameworkParcel         GetProjectsFramework = "parcel"
	GetProjectsFrameworkFasthtml       GetProjectsFramework = "fasthtml"
	GetProjectsFrameworkSanityV3       GetProjectsFramework = "sanity-v3"
	GetProjectsFrameworkSanity         GetProjectsFramework = "sanity"
	GetProjectsFrameworkStorybook      GetProjectsFramework = "storybook"
)

func (e GetProjectsFramework) ToPointer() *GetProjectsFramework {
	return &e
}
func (e *GetProjectsFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetProjectsFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsFramework: %v", v)
	}
}

type GetProjectsIPBucket struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *GetProjectsIPBucket) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *GetProjectsIPBucket) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type GetProjectsLatestDeployment struct {
	ID                     string                           `json:"id"`
	Alias                  []string                         `json:"alias,omitempty"`
	AliasAssigned          *GetProjectsAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjectsAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                          `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                         `json:"automaticAliases,omitempty"`
	BranchMatcher          *GetProjectsBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                         `json:"buildingAt,omitempty"`
	Builds                 []GetProjectsBuild               `json:"builds,omitempty"`
	ChecksConclusion       *GetProjectsChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjectsChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                          `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                          `json:"createdAt"`
	CreatedIn              string                           `json:"createdIn"`
	Creator                *GetProjectsCreator              `json:"creator"`
	DeletedAt              *float64                         `json:"deletedAt,omitempty"`
	DeploymentHostname     string                           `json:"deploymentHostname"`
	Forced                 *bool                            `json:"forced,omitempty"`
	Name                   string                           `json:"name"`
	Meta                   map[string]string                `json:"meta,omitempty"`
	MonorepoManager        *string                          `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *GetProjectsOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   GetProjectsPlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                     `json:"previewCommentsEnabled,omitempty"`
	Private                bool                      `json:"private"`
	ReadyAt                *float64                  `json:"readyAt,omitempty"`
	ReadyState             GetProjectsReadyState     `json:"readyState"`
	ReadySubstate          *GetProjectsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                  `json:"requestedAt,omitempty"`
	Target                 *string                   `json:"target,omitempty"`
	TeamID                 *string                   `json:"teamId,omitempty"`
	Type                   GetProjectsTypeLambdas    `json:"type"`
	URL                    string                    `json:"url"`
	UserID                 string                    `json:"userId"`
	WithCache              *bool                     `json:"withCache,omitempty"`
}

func (o *GetProjectsLatestDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsLatestDeployment) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjectsLatestDeployment) GetAliasAssigned() *GetProjectsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjectsLatestDeployment) GetAliasError() *GetProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjectsLatestDeployment) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjectsLatestDeployment) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjectsLatestDeployment) GetBranchMatcher() *GetProjectsBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *GetProjectsLatestDeployment) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjectsLatestDeployment) GetBuilds() []GetProjectsBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjectsLatestDeployment) GetChecksConclusion() *GetProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjectsLatestDeployment) GetChecksState() *GetProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjectsLatestDeployment) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectsLatestDeployment) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsLatestDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectsLatestDeployment) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjectsLatestDeployment) GetCreator() *GetProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjectsLatestDeployment) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetProjectsLatestDeployment) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjectsLatestDeployment) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjectsLatestDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsLatestDeployment) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjectsLatestDeployment) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjectsLatestDeployment) GetOidcTokenClaims() *GetProjectsOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *GetProjectsLatestDeployment) GetPlan() GetProjectsPlan {
	if o == nil {
		return GetProjectsPlan("")
	}
	return o.Plan
}

func (o *GetProjectsLatestDeployment) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjectsLatestDeployment) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjectsLatestDeployment) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjectsLatestDeployment) GetReadyState() GetProjectsReadyState {
	if o == nil {
		return GetProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjectsLatestDeployment) GetReadySubstate() *GetProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjectsLatestDeployment) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjectsLatestDeployment) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectsLatestDeployment) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectsLatestDeployment) GetType() GetProjectsTypeLambdas {
	if o == nil {
		return GetProjectsTypeLambdas("")
	}
	return o.Type
}

func (o *GetProjectsLatestDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjectsLatestDeployment) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjectsLatestDeployment) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type GetProjectsTypeGithubCustomHost string

const (
	GetProjectsTypeGithubCustomHostGithubCustomHost GetProjectsTypeGithubCustomHost = "github-custom-host"
)

func (e GetProjectsTypeGithubCustomHost) ToPointer() *GetProjectsTypeGithubCustomHost {
	return &e
}
func (e *GetProjectsTypeGithubCustomHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = GetProjectsTypeGithubCustomHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeGithubCustomHost: %v", v)
	}
}

type GetProjectsDeployHook4 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectsDeployHook4) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsDeployHook4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsDeployHook4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsDeployHook4) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsDeployHook4) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsLinkGithubCustomHost struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                         `json:"repoOwnerId,omitempty"`
	Repo             *string                          `json:"repo,omitempty"`
	RepoID           *float64                         `json:"repoId,omitempty"`
	Type             *GetProjectsTypeGithubCustomHost `json:"type,omitempty"`
	Host             *string                          `json:"host,omitempty"`
	CreatedAt        *float64                         `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectsDeployHook4         `json:"deployHooks"`
	GitCredentialID  *string                          `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                         `json:"updatedAt,omitempty"`
	Sourceless       *bool                            `json:"sourceless,omitempty"`
	ProductionBranch *string                          `json:"productionBranch,omitempty"`
}

func (o *GetProjectsLinkGithubCustomHost) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetProjectsLinkGithubCustomHost) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *GetProjectsLinkGithubCustomHost) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjectsLinkGithubCustomHost) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjectsLinkGithubCustomHost) GetType() *GetProjectsTypeGithubCustomHost {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectsLinkGithubCustomHost) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *GetProjectsLinkGithubCustomHost) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsLinkGithubCustomHost) GetDeployHooks() []GetProjectsDeployHook4 {
	if o == nil {
		return []GetProjectsDeployHook4{}
	}
	return o.DeployHooks
}

func (o *GetProjectsLinkGithubCustomHost) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectsLinkGithubCustomHost) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsLinkGithubCustomHost) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectsLinkGithubCustomHost) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectsTypeBitbucket string

const (
	GetProjectsTypeBitbucketBitbucket GetProjectsTypeBitbucket = "bitbucket"
)

func (e GetProjectsTypeBitbucket) ToPointer() *GetProjectsTypeBitbucket {
	return &e
}
func (e *GetProjectsTypeBitbucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = GetProjectsTypeBitbucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeBitbucket: %v", v)
	}
}

type GetProjectsDeployHook3 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectsDeployHook3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsDeployHook3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsDeployHook3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsDeployHook3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsDeployHook3) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsLinkBitbucket struct {
	Name             *string                   `json:"name,omitempty"`
	Slug             *string                   `json:"slug,omitempty"`
	Owner            *string                   `json:"owner,omitempty"`
	Type             *GetProjectsTypeBitbucket `json:"type,omitempty"`
	UUID             *string                   `json:"uuid,omitempty"`
	WorkspaceUUID    *string                   `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                  `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectsDeployHook3  `json:"deployHooks"`
	GitCredentialID  *string                   `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                  `json:"updatedAt,omitempty"`
	Sourceless       *bool                     `json:"sourceless,omitempty"`
	ProductionBranch *string                   `json:"productionBranch,omitempty"`
}

func (o *GetProjectsLinkBitbucket) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetProjectsLinkBitbucket) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *GetProjectsLinkBitbucket) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *GetProjectsLinkBitbucket) GetType() *GetProjectsTypeBitbucket {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectsLinkBitbucket) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *GetProjectsLinkBitbucket) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *GetProjectsLinkBitbucket) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsLinkBitbucket) GetDeployHooks() []GetProjectsDeployHook3 {
	if o == nil {
		return []GetProjectsDeployHook3{}
	}
	return o.DeployHooks
}

func (o *GetProjectsLinkBitbucket) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectsLinkBitbucket) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsLinkBitbucket) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectsLinkBitbucket) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectsTypeGitlab string

const (
	GetProjectsTypeGitlabGitlab GetProjectsTypeGitlab = "gitlab"
)

func (e GetProjectsTypeGitlab) ToPointer() *GetProjectsTypeGitlab {
	return &e
}
func (e *GetProjectsTypeGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = GetProjectsTypeGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeGitlab: %v", v)
	}
}

type GetProjectsDeployHook2 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectsDeployHook2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsDeployHook2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsDeployHook2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsDeployHook2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsDeployHook2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsLinkGitlab struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                 `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                  `json:"projectUrl,omitempty"`
	Type             *GetProjectsTypeGitlab   `json:"type,omitempty"`
	CreatedAt        *float64                 `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectsDeployHook2 `json:"deployHooks"`
	GitCredentialID  *string                  `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                 `json:"updatedAt,omitempty"`
	Sourceless       *bool                    `json:"sourceless,omitempty"`
	ProductionBranch *string                  `json:"productionBranch,omitempty"`
}

func (o *GetProjectsLinkGitlab) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetProjectsLinkGitlab) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *GetProjectsLinkGitlab) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *GetProjectsLinkGitlab) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *GetProjectsLinkGitlab) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *GetProjectsLinkGitlab) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *GetProjectsLinkGitlab) GetType() *GetProjectsTypeGitlab {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectsLinkGitlab) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsLinkGitlab) GetDeployHooks() []GetProjectsDeployHook2 {
	if o == nil {
		return []GetProjectsDeployHook2{}
	}
	return o.DeployHooks
}

func (o *GetProjectsLinkGitlab) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectsLinkGitlab) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsLinkGitlab) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectsLinkGitlab) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectsTypeGithub string

const (
	GetProjectsTypeGithubGithub GetProjectsTypeGithub = "github"
)

func (e GetProjectsTypeGithub) ToPointer() *GetProjectsTypeGithub {
	return &e
}
func (e *GetProjectsTypeGithub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = GetProjectsTypeGithub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeGithub: %v", v)
	}
}

type GetProjectsDeployHook1 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *GetProjectsDeployHook1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsDeployHook1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsDeployHook1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsDeployHook1) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *GetProjectsDeployHook1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type GetProjectsLinkGithub struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                 `json:"repoOwnerId,omitempty"`
	Repo             *string                  `json:"repo,omitempty"`
	RepoID           *float64                 `json:"repoId,omitempty"`
	Type             *GetProjectsTypeGithub   `json:"type,omitempty"`
	CreatedAt        *float64                 `json:"createdAt,omitempty"`
	DeployHooks      []GetProjectsDeployHook1 `json:"deployHooks"`
	GitCredentialID  *string                  `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                 `json:"updatedAt,omitempty"`
	Sourceless       *bool                    `json:"sourceless,omitempty"`
	ProductionBranch *string                  `json:"productionBranch,omitempty"`
}

func (o *GetProjectsLinkGithub) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *GetProjectsLinkGithub) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *GetProjectsLinkGithub) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *GetProjectsLinkGithub) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetProjectsLinkGithub) GetType() *GetProjectsTypeGithub {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetProjectsLinkGithub) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsLinkGithub) GetDeployHooks() []GetProjectsDeployHook1 {
	if o == nil {
		return []GetProjectsDeployHook1{}
	}
	return o.DeployHooks
}

func (o *GetProjectsLinkGithub) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *GetProjectsLinkGithub) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsLinkGithub) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *GetProjectsLinkGithub) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type GetProjectsLinkUnionType string

const (
	GetProjectsLinkUnionTypeGetProjectsLinkGithub           GetProjectsLinkUnionType = "getProjects_link_Github"
	GetProjectsLinkUnionTypeGetProjectsLinkGitlab           GetProjectsLinkUnionType = "getProjects_link_Gitlab"
	GetProjectsLinkUnionTypeGetProjectsLinkBitbucket        GetProjectsLinkUnionType = "getProjects_link_Bitbucket"
	GetProjectsLinkUnionTypeGetProjectsLinkGithubCustomHost GetProjectsLinkUnionType = "getProjects_link_GithubCustomHost"
)

type GetProjectsLinkUnion struct {
	GetProjectsLinkGithub           *GetProjectsLinkGithub           `queryParam:"inline"`
	GetProjectsLinkGitlab           *GetProjectsLinkGitlab           `queryParam:"inline"`
	GetProjectsLinkBitbucket        *GetProjectsLinkBitbucket        `queryParam:"inline"`
	GetProjectsLinkGithubCustomHost *GetProjectsLinkGithubCustomHost `queryParam:"inline"`

	Type GetProjectsLinkUnionType
}

func CreateGetProjectsLinkUnionGetProjectsLinkGithub(getProjectsLinkGithub GetProjectsLinkGithub) GetProjectsLinkUnion {
	typ := GetProjectsLinkUnionTypeGetProjectsLinkGithub

	return GetProjectsLinkUnion{
		GetProjectsLinkGithub: &getProjectsLinkGithub,
		Type:                  typ,
	}
}

func CreateGetProjectsLinkUnionGetProjectsLinkGitlab(getProjectsLinkGitlab GetProjectsLinkGitlab) GetProjectsLinkUnion {
	typ := GetProjectsLinkUnionTypeGetProjectsLinkGitlab

	return GetProjectsLinkUnion{
		GetProjectsLinkGitlab: &getProjectsLinkGitlab,
		Type:                  typ,
	}
}

func CreateGetProjectsLinkUnionGetProjectsLinkBitbucket(getProjectsLinkBitbucket GetProjectsLinkBitbucket) GetProjectsLinkUnion {
	typ := GetProjectsLinkUnionTypeGetProjectsLinkBitbucket

	return GetProjectsLinkUnion{
		GetProjectsLinkBitbucket: &getProjectsLinkBitbucket,
		Type:                     typ,
	}
}

func CreateGetProjectsLinkUnionGetProjectsLinkGithubCustomHost(getProjectsLinkGithubCustomHost GetProjectsLinkGithubCustomHost) GetProjectsLinkUnion {
	typ := GetProjectsLinkUnionTypeGetProjectsLinkGithubCustomHost

	return GetProjectsLinkUnion{
		GetProjectsLinkGithubCustomHost: &getProjectsLinkGithubCustomHost,
		Type:                            typ,
	}
}

func (u *GetProjectsLinkUnion) UnmarshalJSON(data []byte) error {

	var getProjectsLinkGithub GetProjectsLinkGithub = GetProjectsLinkGithub{}
	if err := utils.UnmarshalJSON(data, &getProjectsLinkGithub, "", true, true); err == nil {
		u.GetProjectsLinkGithub = &getProjectsLinkGithub
		u.Type = GetProjectsLinkUnionTypeGetProjectsLinkGithub
		return nil
	}

	var getProjectsLinkBitbucket GetProjectsLinkBitbucket = GetProjectsLinkBitbucket{}
	if err := utils.UnmarshalJSON(data, &getProjectsLinkBitbucket, "", true, true); err == nil {
		u.GetProjectsLinkBitbucket = &getProjectsLinkBitbucket
		u.Type = GetProjectsLinkUnionTypeGetProjectsLinkBitbucket
		return nil
	}

	var getProjectsLinkGithubCustomHost GetProjectsLinkGithubCustomHost = GetProjectsLinkGithubCustomHost{}
	if err := utils.UnmarshalJSON(data, &getProjectsLinkGithubCustomHost, "", true, true); err == nil {
		u.GetProjectsLinkGithubCustomHost = &getProjectsLinkGithubCustomHost
		u.Type = GetProjectsLinkUnionTypeGetProjectsLinkGithubCustomHost
		return nil
	}

	var getProjectsLinkGitlab GetProjectsLinkGitlab = GetProjectsLinkGitlab{}
	if err := utils.UnmarshalJSON(data, &getProjectsLinkGitlab, "", true, true); err == nil {
		u.GetProjectsLinkGitlab = &getProjectsLinkGitlab
		u.Type = GetProjectsLinkUnionTypeGetProjectsLinkGitlab
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsLinkUnion", string(data))
}

func (u GetProjectsLinkUnion) MarshalJSON() ([]byte, error) {
	if u.GetProjectsLinkGithub != nil {
		return utils.MarshalJSON(u.GetProjectsLinkGithub, "", true)
	}

	if u.GetProjectsLinkGitlab != nil {
		return utils.MarshalJSON(u.GetProjectsLinkGitlab, "", true)
	}

	if u.GetProjectsLinkBitbucket != nil {
		return utils.MarshalJSON(u.GetProjectsLinkBitbucket, "", true)
	}

	if u.GetProjectsLinkGithubCustomHost != nil {
		return utils.MarshalJSON(u.GetProjectsLinkGithubCustomHost, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsLinkUnion: all fields are null")
}

type GetProjectsMicrofrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *GetProjectsMicrofrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetProjectsMicrofrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *GetProjectsMicrofrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type GetProjectsMicrofrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *GetProjectsMicrofrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetProjectsMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *GetProjectsMicrofrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *GetProjectsMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *GetProjectsMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *GetProjectsMicrofrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type GetProjectsMicrofrontendsUnionType string

const (
	GetProjectsMicrofrontendsUnionTypeGetProjectsMicrofrontends1 GetProjectsMicrofrontendsUnionType = "getProjects_microfrontends_1"
	GetProjectsMicrofrontendsUnionTypeGetProjectsMicrofrontends2 GetProjectsMicrofrontendsUnionType = "getProjects_microfrontends_2"
)

type GetProjectsMicrofrontendsUnion struct {
	GetProjectsMicrofrontends1 *GetProjectsMicrofrontends1 `queryParam:"inline"`
	GetProjectsMicrofrontends2 *GetProjectsMicrofrontends2 `queryParam:"inline"`

	Type GetProjectsMicrofrontendsUnionType
}

func CreateGetProjectsMicrofrontendsUnionGetProjectsMicrofrontends1(getProjectsMicrofrontends1 GetProjectsMicrofrontends1) GetProjectsMicrofrontendsUnion {
	typ := GetProjectsMicrofrontendsUnionTypeGetProjectsMicrofrontends1

	return GetProjectsMicrofrontendsUnion{
		GetProjectsMicrofrontends1: &getProjectsMicrofrontends1,
		Type:                       typ,
	}
}

func CreateGetProjectsMicrofrontendsUnionGetProjectsMicrofrontends2(getProjectsMicrofrontends2 GetProjectsMicrofrontends2) GetProjectsMicrofrontendsUnion {
	typ := GetProjectsMicrofrontendsUnionTypeGetProjectsMicrofrontends2

	return GetProjectsMicrofrontendsUnion{
		GetProjectsMicrofrontends2: &getProjectsMicrofrontends2,
		Type:                       typ,
	}
}

func (u *GetProjectsMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var getProjectsMicrofrontends2 GetProjectsMicrofrontends2 = GetProjectsMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &getProjectsMicrofrontends2, "", true, true); err == nil {
		u.GetProjectsMicrofrontends2 = &getProjectsMicrofrontends2
		u.Type = GetProjectsMicrofrontendsUnionTypeGetProjectsMicrofrontends2
		return nil
	}

	var getProjectsMicrofrontends1 GetProjectsMicrofrontends1 = GetProjectsMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &getProjectsMicrofrontends1, "", true, true); err == nil {
		u.GetProjectsMicrofrontends1 = &getProjectsMicrofrontends1
		u.Type = GetProjectsMicrofrontendsUnionTypeGetProjectsMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsMicrofrontendsUnion", string(data))
}

func (u GetProjectsMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.GetProjectsMicrofrontends1 != nil {
		return utils.MarshalJSON(u.GetProjectsMicrofrontends1, "", true)
	}

	if u.GetProjectsMicrofrontends2 != nil {
		return utils.MarshalJSON(u.GetProjectsMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsMicrofrontendsUnion: all fields are null")
}

type GetProjectsNodeVersion string

const (
	GetProjectsNodeVersionTwentyTwoDotX  GetProjectsNodeVersion = "22.x"
	GetProjectsNodeVersionTwentyDotX     GetProjectsNodeVersion = "20.x"
	GetProjectsNodeVersionEighteenDotX   GetProjectsNodeVersion = "18.x"
	GetProjectsNodeVersionSixteenDotX    GetProjectsNodeVersion = "16.x"
	GetProjectsNodeVersionFourteenDotX   GetProjectsNodeVersion = "14.x"
	GetProjectsNodeVersionTwelveDotX     GetProjectsNodeVersion = "12.x"
	GetProjectsNodeVersionTenDotX        GetProjectsNodeVersion = "10.x"
	GetProjectsNodeVersionEightDot10DotX GetProjectsNodeVersion = "8.10.x"
)

func (e GetProjectsNodeVersion) ToPointer() *GetProjectsNodeVersion {
	return &e
}
func (e *GetProjectsNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = GetProjectsNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsNodeVersion: %v", v)
	}
}

type GetProjectsPath struct {
	Value string `json:"value"`
}

func (o *GetProjectsPath) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type GetProjectsOptionsAllowlist struct {
	Paths []GetProjectsPath `json:"paths"`
}

func (o *GetProjectsOptionsAllowlist) GetPaths() []GetProjectsPath {
	if o == nil {
		return []GetProjectsPath{}
	}
	return o.Paths
}

type GetProjectsPasswordProtection struct {
}

type GetProjectsResourceConfigFunctionDefaultMemoryType string

const (
	GetProjectsResourceConfigFunctionDefaultMemoryTypeStandardLegacy GetProjectsResourceConfigFunctionDefaultMemoryType = "standard_legacy"
	GetProjectsResourceConfigFunctionDefaultMemoryTypeStandard       GetProjectsResourceConfigFunctionDefaultMemoryType = "standard"
	GetProjectsResourceConfigFunctionDefaultMemoryTypePerformance    GetProjectsResourceConfigFunctionDefaultMemoryType = "performance"
)

func (e GetProjectsResourceConfigFunctionDefaultMemoryType) ToPointer() *GetProjectsResourceConfigFunctionDefaultMemoryType {
	return &e
}
func (e *GetProjectsResourceConfigFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = GetProjectsResourceConfigFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsResourceConfigFunctionDefaultMemoryType: %v", v)
	}
}

type GetProjectsResourceConfigBuildMachineType string

const (
	GetProjectsResourceConfigBuildMachineTypeEnhanced GetProjectsResourceConfigBuildMachineType = "enhanced"
	GetProjectsResourceConfigBuildMachineTypeTurbo    GetProjectsResourceConfigBuildMachineType = "turbo"
)

func (e GetProjectsResourceConfigBuildMachineType) ToPointer() *GetProjectsResourceConfigBuildMachineType {
	return &e
}
func (e *GetProjectsResourceConfigBuildMachineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = GetProjectsResourceConfigBuildMachineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsResourceConfigBuildMachineType: %v", v)
	}
}

type GetProjectsResourceConfig struct {
	Fluid                      *bool                                               `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                            `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                            `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *GetProjectsResourceConfigFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                               `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                               `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *GetProjectsResourceConfigBuildMachineType          `json:"buildMachineType,omitempty"`
}

func (o *GetProjectsResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *GetProjectsResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *GetProjectsResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *GetProjectsResourceConfig) GetFunctionDefaultMemoryType() *GetProjectsResourceConfigFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *GetProjectsResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *GetProjectsResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *GetProjectsResourceConfig) GetBuildMachineType() *GetProjectsResourceConfigBuildMachineType {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

// GetProjectsRollbackDescription - Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
type GetProjectsRollbackDescription struct {
	// The user who rolled back the project.
	UserID string `json:"userId"`
	// The username of the user who rolled back the project.
	Username string `json:"username"`
	// User-supplied explanation of why they rolled back the project. Limited to 250 characters.
	Description string `json:"description"`
	// Timestamp of when the rollback was requested.
	CreatedAt float64 `json:"createdAt"`
}

func (o *GetProjectsRollbackDescription) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjectsRollbackDescription) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *GetProjectsRollbackDescription) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *GetProjectsRollbackDescription) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// GetProjectsStage - An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
type GetProjectsStage struct {
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval *bool `json:"requireApproval,omitempty"`
	// Duration in minutes for automatic advancement to the next stage
	Duration *float64 `json:"duration,omitempty"`
}

func (o *GetProjectsStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *GetProjectsStage) GetRequireApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireApproval
}

func (o *GetProjectsStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// GetProjectsRollingRelease - Project-level rolling release configuration that defines how deployments should be gradually rolled out
type GetProjectsRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
	Stages []GetProjectsStage `json:"stages,omitempty"`
	// Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
	CanaryResponseHeader *bool `json:"canaryResponseHeader,omitempty"`
}

func (o *GetProjectsRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *GetProjectsRollingRelease) GetStages() []GetProjectsStage {
	if o == nil {
		return nil
	}
	return o.Stages
}

func (o *GetProjectsRollingRelease) GetCanaryResponseHeader() *bool {
	if o == nil {
		return nil
	}
	return o.CanaryResponseHeader
}

type GetProjectsDefaultResourceConfigFunctionDefaultMemoryType string

const (
	GetProjectsDefaultResourceConfigFunctionDefaultMemoryTypeStandardLegacy GetProjectsDefaultResourceConfigFunctionDefaultMemoryType = "standard_legacy"
	GetProjectsDefaultResourceConfigFunctionDefaultMemoryTypeStandard       GetProjectsDefaultResourceConfigFunctionDefaultMemoryType = "standard"
	GetProjectsDefaultResourceConfigFunctionDefaultMemoryTypePerformance    GetProjectsDefaultResourceConfigFunctionDefaultMemoryType = "performance"
)

func (e GetProjectsDefaultResourceConfigFunctionDefaultMemoryType) ToPointer() *GetProjectsDefaultResourceConfigFunctionDefaultMemoryType {
	return &e
}
func (e *GetProjectsDefaultResourceConfigFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = GetProjectsDefaultResourceConfigFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsDefaultResourceConfigFunctionDefaultMemoryType: %v", v)
	}
}

type GetProjectsDefaultResourceConfigBuildMachineType string

const (
	GetProjectsDefaultResourceConfigBuildMachineTypeEnhanced GetProjectsDefaultResourceConfigBuildMachineType = "enhanced"
	GetProjectsDefaultResourceConfigBuildMachineTypeTurbo    GetProjectsDefaultResourceConfigBuildMachineType = "turbo"
)

func (e GetProjectsDefaultResourceConfigBuildMachineType) ToPointer() *GetProjectsDefaultResourceConfigBuildMachineType {
	return &e
}
func (e *GetProjectsDefaultResourceConfigBuildMachineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = GetProjectsDefaultResourceConfigBuildMachineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsDefaultResourceConfigBuildMachineType: %v", v)
	}
}

type GetProjectsDefaultResourceConfig struct {
	Fluid                      *bool                                                      `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                   `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                   `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *GetProjectsDefaultResourceConfigFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                      `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                      `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *GetProjectsDefaultResourceConfigBuildMachineType          `json:"buildMachineType,omitempty"`
}

func (o *GetProjectsDefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *GetProjectsDefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *GetProjectsDefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *GetProjectsDefaultResourceConfig) GetFunctionDefaultMemoryType() *GetProjectsDefaultResourceConfigFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *GetProjectsDefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *GetProjectsDefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *GetProjectsDefaultResourceConfig) GetBuildMachineType() *GetProjectsDefaultResourceConfigBuildMachineType {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

type GetProjectsSsoProtectionDeploymentType string

const (
	GetProjectsSsoProtectionDeploymentTypePreview                          GetProjectsSsoProtectionDeploymentType = "preview"
	GetProjectsSsoProtectionDeploymentTypeAll                              GetProjectsSsoProtectionDeploymentType = "all"
	GetProjectsSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews GetProjectsSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e GetProjectsSsoProtectionDeploymentType) ToPointer() *GetProjectsSsoProtectionDeploymentType {
	return &e
}
func (e *GetProjectsSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = GetProjectsSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsSsoProtectionDeploymentType: %v", v)
	}
}

type GetProjectsSsoProtection struct {
	DeploymentType GetProjectsSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *GetProjectsSsoProtection) GetDeploymentType() GetProjectsSsoProtectionDeploymentType {
	if o == nil {
		return GetProjectsSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type GetProjectsAliasAssignedType string

const (
	GetProjectsAliasAssignedTypeNumber  GetProjectsAliasAssignedType = "number"
	GetProjectsAliasAssignedTypeBoolean GetProjectsAliasAssignedType = "boolean"
)

type GetProjectsAliasAssigned struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type GetProjectsAliasAssignedType
}

func CreateGetProjectsAliasAssignedNumber(number float64) GetProjectsAliasAssigned {
	typ := GetProjectsAliasAssignedTypeNumber

	return GetProjectsAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetProjectsAliasAssignedBoolean(boolean bool) GetProjectsAliasAssigned {
	typ := GetProjectsAliasAssignedTypeBoolean

	return GetProjectsAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *GetProjectsAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetProjectsAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetProjectsAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsAliasAssigned", string(data))
}

func (u GetProjectsAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsAliasAssigned: all fields are null")
}

type GetProjectsAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *GetProjectsAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *GetProjectsAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// GetProjectsBranchMatcherTypeLambdas - The type of matching to perform
type GetProjectsBranchMatcherTypeLambdas string

const (
	GetProjectsBranchMatcherTypeLambdasEndsWith   GetProjectsBranchMatcherTypeLambdas = "endsWith"
	GetProjectsBranchMatcherTypeLambdasStartsWith GetProjectsBranchMatcherTypeLambdas = "startsWith"
	GetProjectsBranchMatcherTypeLambdasEquals     GetProjectsBranchMatcherTypeLambdas = "equals"
)

func (e GetProjectsBranchMatcherTypeLambdas) ToPointer() *GetProjectsBranchMatcherTypeLambdas {
	return &e
}
func (e *GetProjectsBranchMatcherTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = GetProjectsBranchMatcherTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsBranchMatcherTypeLambdas: %v", v)
	}
}

type GetProjectsBranchMatcherLambdas struct {
	// The type of matching to perform
	Type GetProjectsBranchMatcherTypeLambdas `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *GetProjectsBranchMatcherLambdas) GetType() GetProjectsBranchMatcherTypeLambdas {
	if o == nil {
		return GetProjectsBranchMatcherTypeLambdas("")
	}
	return o.Type
}

func (o *GetProjectsBranchMatcherLambdas) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type GetProjectsBuild struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *GetProjectsBuild) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *GetProjectsBuild) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjectsBuild) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type GetProjectsChecksConclusion string

const (
	GetProjectsChecksConclusionSucceeded GetProjectsChecksConclusion = "succeeded"
	GetProjectsChecksConclusionFailed    GetProjectsChecksConclusion = "failed"
	GetProjectsChecksConclusionSkipped   GetProjectsChecksConclusion = "skipped"
	GetProjectsChecksConclusionCanceled  GetProjectsChecksConclusion = "canceled"
)

func (e GetProjectsChecksConclusion) ToPointer() *GetProjectsChecksConclusion {
	return &e
}
func (e *GetProjectsChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = GetProjectsChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsChecksConclusion: %v", v)
	}
}

type GetProjectsChecksState string

const (
	GetProjectsChecksStateRegistered GetProjectsChecksState = "registered"
	GetProjectsChecksStateRunning    GetProjectsChecksState = "running"
	GetProjectsChecksStateCompleted  GetProjectsChecksState = "completed"
)

func (e GetProjectsChecksState) ToPointer() *GetProjectsChecksState {
	return &e
}
func (e *GetProjectsChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = GetProjectsChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsChecksState: %v", v)
	}
}

type GetProjectsCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *GetProjectsCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetProjectsCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *GetProjectsCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *GetProjectsCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetProjectsCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type GetProjectsOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *GetProjectsOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *GetProjectsOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *GetProjectsOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *GetProjectsOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *GetProjectsOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *GetProjectsOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetProjectsOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *GetProjectsOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetProjectsOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type GetProjectsPlan string

const (
	GetProjectsPlanPro        GetProjectsPlan = "pro"
	GetProjectsPlanEnterprise GetProjectsPlan = "enterprise"
	GetProjectsPlanHobby      GetProjectsPlan = "hobby"
)

func (e GetProjectsPlan) ToPointer() *GetProjectsPlan {
	return &e
}
func (e *GetProjectsPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = GetProjectsPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsPlan: %v", v)
	}
}

type GetProjectsReadyState string

const (
	GetProjectsReadyStateBuilding     GetProjectsReadyState = "BUILDING"
	GetProjectsReadyStateError        GetProjectsReadyState = "ERROR"
	GetProjectsReadyStateInitializing GetProjectsReadyState = "INITIALIZING"
	GetProjectsReadyStateQueued       GetProjectsReadyState = "QUEUED"
	GetProjectsReadyStateReady        GetProjectsReadyState = "READY"
	GetProjectsReadyStateCanceled     GetProjectsReadyState = "CANCELED"
)

func (e GetProjectsReadyState) ToPointer() *GetProjectsReadyState {
	return &e
}
func (e *GetProjectsReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetProjectsReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsReadyState: %v", v)
	}
}

type GetProjectsReadySubstate string

const (
	GetProjectsReadySubstateStaged   GetProjectsReadySubstate = "STAGED"
	GetProjectsReadySubstateRolling  GetProjectsReadySubstate = "ROLLING"
	GetProjectsReadySubstatePromoted GetProjectsReadySubstate = "PROMOTED"
)

func (e GetProjectsReadySubstate) ToPointer() *GetProjectsReadySubstate {
	return &e
}
func (e *GetProjectsReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = GetProjectsReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsReadySubstate: %v", v)
	}
}

type GetProjectsTypeLambdas string

const (
	GetProjectsTypeLambdasLambdas GetProjectsTypeLambdas = "LAMBDAS"
)

func (e GetProjectsTypeLambdas) ToPointer() *GetProjectsTypeLambdas {
	return &e
}
func (e *GetProjectsTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = GetProjectsTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTypeLambdas: %v", v)
	}
}

type GetProjectsTargets struct {
	ID                     string                           `json:"id"`
	Alias                  []string                         `json:"alias,omitempty"`
	AliasAssigned          *GetProjectsAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *GetProjectsAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                          `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                         `json:"automaticAliases,omitempty"`
	BranchMatcher          *GetProjectsBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                         `json:"buildingAt,omitempty"`
	Builds                 []GetProjectsBuild               `json:"builds,omitempty"`
	ChecksConclusion       *GetProjectsChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *GetProjectsChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                            `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                          `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                          `json:"createdAt"`
	CreatedIn              string                           `json:"createdIn"`
	Creator                *GetProjectsCreator              `json:"creator"`
	DeletedAt              *float64                         `json:"deletedAt,omitempty"`
	DeploymentHostname     string                           `json:"deploymentHostname"`
	Forced                 *bool                            `json:"forced,omitempty"`
	Name                   string                           `json:"name"`
	Meta                   map[string]string                `json:"meta,omitempty"`
	MonorepoManager        *string                          `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *GetProjectsOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   GetProjectsPlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                     `json:"previewCommentsEnabled,omitempty"`
	Private                bool                      `json:"private"`
	ReadyAt                *float64                  `json:"readyAt,omitempty"`
	ReadyState             GetProjectsReadyState     `json:"readyState"`
	ReadySubstate          *GetProjectsReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                  `json:"requestedAt,omitempty"`
	Target                 *string                   `json:"target,omitempty"`
	TeamID                 *string                   `json:"teamId,omitempty"`
	Type                   GetProjectsTypeLambdas    `json:"type"`
	URL                    string                    `json:"url"`
	UserID                 string                    `json:"userId"`
	WithCache              *bool                     `json:"withCache,omitempty"`
}

func (o *GetProjectsTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *GetProjectsTargets) GetAliasAssigned() *GetProjectsAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *GetProjectsTargets) GetAliasError() *GetProjectsAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *GetProjectsTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *GetProjectsTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *GetProjectsTargets) GetBranchMatcher() *GetProjectsBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *GetProjectsTargets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *GetProjectsTargets) GetBuilds() []GetProjectsBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *GetProjectsTargets) GetChecksConclusion() *GetProjectsChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *GetProjectsTargets) GetChecksState() *GetProjectsChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *GetProjectsTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectsTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsTargets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectsTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *GetProjectsTargets) GetCreator() *GetProjectsCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *GetProjectsTargets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetProjectsTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *GetProjectsTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *GetProjectsTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *GetProjectsTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *GetProjectsTargets) GetOidcTokenClaims() *GetProjectsOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *GetProjectsTargets) GetPlan() GetProjectsPlan {
	if o == nil {
		return GetProjectsPlan("")
	}
	return o.Plan
}

func (o *GetProjectsTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *GetProjectsTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *GetProjectsTargets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *GetProjectsTargets) GetReadyState() GetProjectsReadyState {
	if o == nil {
		return GetProjectsReadyState("")
	}
	return o.ReadyState
}

func (o *GetProjectsTargets) GetReadySubstate() *GetProjectsReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *GetProjectsTargets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *GetProjectsTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetProjectsTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetProjectsTargets) GetType() GetProjectsTypeLambdas {
	if o == nil {
		return GetProjectsTypeLambdas("")
	}
	return o.Type
}

func (o *GetProjectsTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetProjectsTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *GetProjectsTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type GetProjectsPermissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	ObservabilityNotebook                    []components.ACLAction `json:"observabilityNotebook,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	VercelAppInstallation                    []components.ACLAction `json:"vercelAppInstallation,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMemberMfaStatus                      []components.ACLAction `json:"teamMemberMfaStatus,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	VercelRun                                []components.ACLAction `json:"vercelRun,omitempty"`
	VercelRunExec                            []components.ACLAction `json:"vercelRunExec,omitempty"`
	APIKey                                   []components.ACLAction `json:"apiKey,omitempty"`
	APIKeyOwnedBySelf                        []components.ACLAction `json:"apiKeyOwnedBySelf,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	BuildMachine                             []components.ACLAction `json:"buildMachine,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	EdgeCacheNamespace                       []components.ACLAction `json:"edgeCacheNamespace,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	OnDemandBuild                            []components.ACLAction `json:"onDemandBuild,omitempty"`
	OnDemandConcurrency                      []components.ACLAction `json:"onDemandConcurrency,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectCheck                             []components.ACLAction `json:"projectCheck,omitempty"`
	ProjectCheckRun                          []components.ACLAction `json:"projectCheckRun,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *GetProjectsPermissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *GetProjectsPermissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *GetProjectsPermissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *GetProjectsPermissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *GetProjectsPermissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *GetProjectsPermissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *GetProjectsPermissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *GetProjectsPermissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *GetProjectsPermissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *GetProjectsPermissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *GetProjectsPermissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *GetProjectsPermissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *GetProjectsPermissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *GetProjectsPermissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *GetProjectsPermissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *GetProjectsPermissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *GetProjectsPermissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *GetProjectsPermissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *GetProjectsPermissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *GetProjectsPermissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *GetProjectsPermissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *GetProjectsPermissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *GetProjectsPermissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *GetProjectsPermissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *GetProjectsPermissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *GetProjectsPermissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *GetProjectsPermissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *GetProjectsPermissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *GetProjectsPermissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *GetProjectsPermissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *GetProjectsPermissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *GetProjectsPermissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *GetProjectsPermissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *GetProjectsPermissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *GetProjectsPermissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *GetProjectsPermissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *GetProjectsPermissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *GetProjectsPermissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *GetProjectsPermissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *GetProjectsPermissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *GetProjectsPermissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *GetProjectsPermissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *GetProjectsPermissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *GetProjectsPermissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *GetProjectsPermissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *GetProjectsPermissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *GetProjectsPermissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *GetProjectsPermissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *GetProjectsPermissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *GetProjectsPermissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *GetProjectsPermissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *GetProjectsPermissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *GetProjectsPermissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *GetProjectsPermissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *GetProjectsPermissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *GetProjectsPermissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *GetProjectsPermissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *GetProjectsPermissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *GetProjectsPermissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *GetProjectsPermissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *GetProjectsPermissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *GetProjectsPermissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *GetProjectsPermissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *GetProjectsPermissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *GetProjectsPermissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *GetProjectsPermissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *GetProjectsPermissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *GetProjectsPermissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *GetProjectsPermissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *GetProjectsPermissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *GetProjectsPermissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *GetProjectsPermissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *GetProjectsPermissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *GetProjectsPermissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *GetProjectsPermissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *GetProjectsPermissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *GetProjectsPermissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *GetProjectsPermissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *GetProjectsPermissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *GetProjectsPermissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *GetProjectsPermissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *GetProjectsPermissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *GetProjectsPermissions) GetObservabilityNotebook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityNotebook
}

func (o *GetProjectsPermissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *GetProjectsPermissions) GetVercelAppInstallation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelAppInstallation
}

func (o *GetProjectsPermissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *GetProjectsPermissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjectsPermissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *GetProjectsPermissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *GetProjectsPermissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *GetProjectsPermissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *GetProjectsPermissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *GetProjectsPermissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *GetProjectsPermissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *GetProjectsPermissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *GetProjectsPermissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *GetProjectsPermissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *GetProjectsPermissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *GetProjectsPermissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *GetProjectsPermissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *GetProjectsPermissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *GetProjectsPermissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *GetProjectsPermissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *GetProjectsPermissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *GetProjectsPermissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *GetProjectsPermissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *GetProjectsPermissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *GetProjectsPermissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *GetProjectsPermissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *GetProjectsPermissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *GetProjectsPermissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *GetProjectsPermissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *GetProjectsPermissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *GetProjectsPermissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *GetProjectsPermissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *GetProjectsPermissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *GetProjectsPermissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *GetProjectsPermissions) GetTeamMemberMfaStatus() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMemberMfaStatus
}

func (o *GetProjectsPermissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *GetProjectsPermissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *GetProjectsPermissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *GetProjectsPermissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *GetProjectsPermissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *GetProjectsPermissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *GetProjectsPermissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *GetProjectsPermissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *GetProjectsPermissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *GetProjectsPermissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *GetProjectsPermissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *GetProjectsPermissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *GetProjectsPermissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *GetProjectsPermissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *GetProjectsPermissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *GetProjectsPermissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *GetProjectsPermissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *GetProjectsPermissions) GetVercelRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRun
}

func (o *GetProjectsPermissions) GetVercelRunExec() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRunExec
}

func (o *GetProjectsPermissions) GetAPIKey() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *GetProjectsPermissions) GetAPIKeyOwnedBySelf() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKeyOwnedBySelf
}

func (o *GetProjectsPermissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *GetProjectsPermissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *GetProjectsPermissions) GetBuildMachine() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

func (o *GetProjectsPermissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *GetProjectsPermissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *GetProjectsPermissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *GetProjectsPermissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *GetProjectsPermissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *GetProjectsPermissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *GetProjectsPermissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *GetProjectsPermissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *GetProjectsPermissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *GetProjectsPermissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *GetProjectsPermissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *GetProjectsPermissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *GetProjectsPermissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *GetProjectsPermissions) GetEdgeCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeCacheNamespace
}

func (o *GetProjectsPermissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *GetProjectsPermissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *GetProjectsPermissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *GetProjectsPermissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjectsPermissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *GetProjectsPermissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *GetProjectsPermissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *GetProjectsPermissions) GetOnDemandBuild() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandBuild
}

func (o *GetProjectsPermissions) GetOnDemandConcurrency() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandConcurrency
}

func (o *GetProjectsPermissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *GetProjectsPermissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *GetProjectsPermissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *GetProjectsPermissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *GetProjectsPermissions) GetProjectCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheck
}

func (o *GetProjectsPermissions) GetProjectCheckRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheckRun
}

func (o *GetProjectsPermissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *GetProjectsPermissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *GetProjectsPermissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *GetProjectsPermissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *GetProjectsPermissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *GetProjectsPermissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *GetProjectsPermissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *GetProjectsPermissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *GetProjectsPermissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetProjectsPermissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *GetProjectsPermissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *GetProjectsPermissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *GetProjectsPermissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *GetProjectsPermissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *GetProjectsPermissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *GetProjectsPermissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *GetProjectsPermissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *GetProjectsPermissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *GetProjectsPermissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *GetProjectsPermissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *GetProjectsPermissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *GetProjectsPermissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *GetProjectsPermissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *GetProjectsPermissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *GetProjectsPermissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *GetProjectsPermissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *GetProjectsPermissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *GetProjectsPermissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjectsPermissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjectsPermissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *GetProjectsPermissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *GetProjectsPermissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type GetProjectsLastRollbackTarget struct {
}

type GetProjectsJobStatus string

const (
	GetProjectsJobStatusSucceeded  GetProjectsJobStatus = "succeeded"
	GetProjectsJobStatusFailed     GetProjectsJobStatus = "failed"
	GetProjectsJobStatusSkipped    GetProjectsJobStatus = "skipped"
	GetProjectsJobStatusPending    GetProjectsJobStatus = "pending"
	GetProjectsJobStatusInProgress GetProjectsJobStatus = "in-progress"
)

func (e GetProjectsJobStatus) ToPointer() *GetProjectsJobStatus {
	return &e
}
func (e *GetProjectsJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = GetProjectsJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsJobStatus: %v", v)
	}
}

type GetProjectsLastAliasRequestType string

const (
	GetProjectsLastAliasRequestTypePromote  GetProjectsLastAliasRequestType = "promote"
	GetProjectsLastAliasRequestTypeRollback GetProjectsLastAliasRequestType = "rollback"
)

func (e GetProjectsLastAliasRequestType) ToPointer() *GetProjectsLastAliasRequestType {
	return &e
}
func (e *GetProjectsLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = GetProjectsLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsLastAliasRequestType: %v", v)
	}
}

type GetProjectsLastAliasRequest struct {
	FromDeploymentID string `json:"fromDeploymentId"`
	ToDeploymentID   string `json:"toDeploymentId"`
	// If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
	FromRollingReleaseID *string                         `json:"fromRollingReleaseId,omitempty"`
	JobStatus            GetProjectsJobStatus            `json:"jobStatus"`
	RequestedAt          float64                         `json:"requestedAt"`
	Type                 GetProjectsLastAliasRequestType `json:"type"`
}

func (o *GetProjectsLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *GetProjectsLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *GetProjectsLastAliasRequest) GetFromRollingReleaseID() *string {
	if o == nil {
		return nil
	}
	return o.FromRollingReleaseID
}

func (o *GetProjectsLastAliasRequest) GetJobStatus() GetProjectsJobStatus {
	if o == nil {
		return GetProjectsJobStatus("")
	}
	return o.JobStatus
}

func (o *GetProjectsLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *GetProjectsLastAliasRequest) GetType() GetProjectsLastAliasRequestType {
	if o == nil {
		return GetProjectsLastAliasRequestType("")
	}
	return o.Type
}

type GetProjectsScopeAutomationBypass string

const (
	GetProjectsScopeAutomationBypassAutomationBypass GetProjectsScopeAutomationBypass = "automation-bypass"
)

func (e GetProjectsScopeAutomationBypass) ToPointer() *GetProjectsScopeAutomationBypass {
	return &e
}
func (e *GetProjectsScopeAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = GetProjectsScopeAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsScopeAutomationBypass: %v", v)
	}
}

type GetProjectsProtectionBypassAutomationBypass struct {
	CreatedAt float64                          `json:"createdAt"`
	CreatedBy string                           `json:"createdBy"`
	Scope     GetProjectsScopeAutomationBypass `json:"scope"`
}

func (o *GetProjectsProtectionBypassAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectsProtectionBypassAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetProjectsProtectionBypassAutomationBypass) GetScope() GetProjectsScopeAutomationBypass {
	if o == nil {
		return GetProjectsScopeAutomationBypass("")
	}
	return o.Scope
}

type GetProjectsScopeIntegrationAutomationBypass string

const (
	GetProjectsScopeIntegrationAutomationBypassIntegrationAutomationBypass GetProjectsScopeIntegrationAutomationBypass = "integration-automation-bypass"
)

func (e GetProjectsScopeIntegrationAutomationBypass) ToPointer() *GetProjectsScopeIntegrationAutomationBypass {
	return &e
}
func (e *GetProjectsScopeIntegrationAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-automation-bypass":
		*e = GetProjectsScopeIntegrationAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsScopeIntegrationAutomationBypass: %v", v)
	}
}

type GetProjectsProtectionBypassIntegrationAutomationBypass struct {
	CreatedAt       float64                                     `json:"createdAt"`
	CreatedBy       string                                      `json:"createdBy"`
	Scope           GetProjectsScopeIntegrationAutomationBypass `json:"scope"`
	IntegrationID   string                                      `json:"integrationId"`
	ConfigurationID string                                      `json:"configurationId"`
}

func (o *GetProjectsProtectionBypassIntegrationAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetProjectsProtectionBypassIntegrationAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *GetProjectsProtectionBypassIntegrationAutomationBypass) GetScope() GetProjectsScopeIntegrationAutomationBypass {
	if o == nil {
		return GetProjectsScopeIntegrationAutomationBypass("")
	}
	return o.Scope
}

func (o *GetProjectsProtectionBypassIntegrationAutomationBypass) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *GetProjectsProtectionBypassIntegrationAutomationBypass) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

type GetProjectsProtectionBypassUnionType string

const (
	GetProjectsProtectionBypassUnionTypeGetProjectsProtectionBypassIntegrationAutomationBypass GetProjectsProtectionBypassUnionType = "getProjects_protectionBypass_IntegrationAutomationBypass"
	GetProjectsProtectionBypassUnionTypeGetProjectsProtectionBypassAutomationBypass            GetProjectsProtectionBypassUnionType = "getProjects_protectionBypass_AutomationBypass"
)

type GetProjectsProtectionBypassUnion struct {
	GetProjectsProtectionBypassIntegrationAutomationBypass *GetProjectsProtectionBypassIntegrationAutomationBypass `queryParam:"inline"`
	GetProjectsProtectionBypassAutomationBypass            *GetProjectsProtectionBypassAutomationBypass            `queryParam:"inline"`

	Type GetProjectsProtectionBypassUnionType
}

func CreateGetProjectsProtectionBypassUnionGetProjectsProtectionBypassIntegrationAutomationBypass(getProjectsProtectionBypassIntegrationAutomationBypass GetProjectsProtectionBypassIntegrationAutomationBypass) GetProjectsProtectionBypassUnion {
	typ := GetProjectsProtectionBypassUnionTypeGetProjectsProtectionBypassIntegrationAutomationBypass

	return GetProjectsProtectionBypassUnion{
		GetProjectsProtectionBypassIntegrationAutomationBypass: &getProjectsProtectionBypassIntegrationAutomationBypass,
		Type: typ,
	}
}

func CreateGetProjectsProtectionBypassUnionGetProjectsProtectionBypassAutomationBypass(getProjectsProtectionBypassAutomationBypass GetProjectsProtectionBypassAutomationBypass) GetProjectsProtectionBypassUnion {
	typ := GetProjectsProtectionBypassUnionTypeGetProjectsProtectionBypassAutomationBypass

	return GetProjectsProtectionBypassUnion{
		GetProjectsProtectionBypassAutomationBypass: &getProjectsProtectionBypassAutomationBypass,
		Type: typ,
	}
}

func (u *GetProjectsProtectionBypassUnion) UnmarshalJSON(data []byte) error {

	var getProjectsProtectionBypassAutomationBypass GetProjectsProtectionBypassAutomationBypass = GetProjectsProtectionBypassAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &getProjectsProtectionBypassAutomationBypass, "", true, true); err == nil {
		u.GetProjectsProtectionBypassAutomationBypass = &getProjectsProtectionBypassAutomationBypass
		u.Type = GetProjectsProtectionBypassUnionTypeGetProjectsProtectionBypassAutomationBypass
		return nil
	}

	var getProjectsProtectionBypassIntegrationAutomationBypass GetProjectsProtectionBypassIntegrationAutomationBypass = GetProjectsProtectionBypassIntegrationAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &getProjectsProtectionBypassIntegrationAutomationBypass, "", true, true); err == nil {
		u.GetProjectsProtectionBypassIntegrationAutomationBypass = &getProjectsProtectionBypassIntegrationAutomationBypass
		u.Type = GetProjectsProtectionBypassUnionTypeGetProjectsProtectionBypassIntegrationAutomationBypass
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsProtectionBypassUnion", string(data))
}

func (u GetProjectsProtectionBypassUnion) MarshalJSON() ([]byte, error) {
	if u.GetProjectsProtectionBypassIntegrationAutomationBypass != nil {
		return utils.MarshalJSON(u.GetProjectsProtectionBypassIntegrationAutomationBypass, "", true)
	}

	if u.GetProjectsProtectionBypassAutomationBypass != nil {
		return utils.MarshalJSON(u.GetProjectsProtectionBypassAutomationBypass, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsProtectionBypassUnion: all fields are null")
}

type GetProjectsTrustedIpsDeploymentType2 string

const (
	GetProjectsTrustedIpsDeploymentType2Production                       GetProjectsTrustedIpsDeploymentType2 = "production"
	GetProjectsTrustedIpsDeploymentType2Preview                          GetProjectsTrustedIpsDeploymentType2 = "preview"
	GetProjectsTrustedIpsDeploymentType2All                              GetProjectsTrustedIpsDeploymentType2 = "all"
	GetProjectsTrustedIpsDeploymentType2ProdDeploymentUrlsAndAllPreviews GetProjectsTrustedIpsDeploymentType2 = "prod_deployment_urls_and_all_previews"
)

func (e GetProjectsTrustedIpsDeploymentType2) ToPointer() *GetProjectsTrustedIpsDeploymentType2 {
	return &e
}
func (e *GetProjectsTrustedIpsDeploymentType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = GetProjectsTrustedIpsDeploymentType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTrustedIpsDeploymentType2: %v", v)
	}
}

type GetProjectsTrustedIps2 struct {
	DeploymentType GetProjectsTrustedIpsDeploymentType2 `json:"deploymentType"`
}

func (o *GetProjectsTrustedIps2) GetDeploymentType() GetProjectsTrustedIpsDeploymentType2 {
	if o == nil {
		return GetProjectsTrustedIpsDeploymentType2("")
	}
	return o.DeploymentType
}

type GetProjectsTrustedIpsDeploymentType1 string

const (
	GetProjectsTrustedIpsDeploymentType1Production                       GetProjectsTrustedIpsDeploymentType1 = "production"
	GetProjectsTrustedIpsDeploymentType1Preview                          GetProjectsTrustedIpsDeploymentType1 = "preview"
	GetProjectsTrustedIpsDeploymentType1All                              GetProjectsTrustedIpsDeploymentType1 = "all"
	GetProjectsTrustedIpsDeploymentType1ProdDeploymentUrlsAndAllPreviews GetProjectsTrustedIpsDeploymentType1 = "prod_deployment_urls_and_all_previews"
)

func (e GetProjectsTrustedIpsDeploymentType1) ToPointer() *GetProjectsTrustedIpsDeploymentType1 {
	return &e
}
func (e *GetProjectsTrustedIpsDeploymentType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = GetProjectsTrustedIpsDeploymentType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTrustedIpsDeploymentType1: %v", v)
	}
}

type GetProjectsAddress struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *GetProjectsAddress) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetProjectsAddress) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type GetProjectsProtectionMode string

const (
	GetProjectsProtectionModeAdditional GetProjectsProtectionMode = "additional"
	GetProjectsProtectionModeExclusive  GetProjectsProtectionMode = "exclusive"
)

func (e GetProjectsProtectionMode) ToPointer() *GetProjectsProtectionMode {
	return &e
}
func (e *GetProjectsProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = GetProjectsProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsProtectionMode: %v", v)
	}
}

type GetProjectsTrustedIps1 struct {
	DeploymentType GetProjectsTrustedIpsDeploymentType1 `json:"deploymentType"`
	Addresses      []GetProjectsAddress                 `json:"addresses"`
	ProtectionMode GetProjectsProtectionMode            `json:"protectionMode"`
}

func (o *GetProjectsTrustedIps1) GetDeploymentType() GetProjectsTrustedIpsDeploymentType1 {
	if o == nil {
		return GetProjectsTrustedIpsDeploymentType1("")
	}
	return o.DeploymentType
}

func (o *GetProjectsTrustedIps1) GetAddresses() []GetProjectsAddress {
	if o == nil {
		return []GetProjectsAddress{}
	}
	return o.Addresses
}

func (o *GetProjectsTrustedIps1) GetProtectionMode() GetProjectsProtectionMode {
	if o == nil {
		return GetProjectsProtectionMode("")
	}
	return o.ProtectionMode
}

type GetProjectsTrustedIpsUnionType string

const (
	GetProjectsTrustedIpsUnionTypeGetProjectsTrustedIps1 GetProjectsTrustedIpsUnionType = "getProjects_trustedIps_1"
	GetProjectsTrustedIpsUnionTypeGetProjectsTrustedIps2 GetProjectsTrustedIpsUnionType = "getProjects_trustedIps_2"
)

type GetProjectsTrustedIpsUnion struct {
	GetProjectsTrustedIps1 *GetProjectsTrustedIps1 `queryParam:"inline"`
	GetProjectsTrustedIps2 *GetProjectsTrustedIps2 `queryParam:"inline"`

	Type GetProjectsTrustedIpsUnionType
}

func CreateGetProjectsTrustedIpsUnionGetProjectsTrustedIps1(getProjectsTrustedIps1 GetProjectsTrustedIps1) GetProjectsTrustedIpsUnion {
	typ := GetProjectsTrustedIpsUnionTypeGetProjectsTrustedIps1

	return GetProjectsTrustedIpsUnion{
		GetProjectsTrustedIps1: &getProjectsTrustedIps1,
		Type:                   typ,
	}
}

func CreateGetProjectsTrustedIpsUnionGetProjectsTrustedIps2(getProjectsTrustedIps2 GetProjectsTrustedIps2) GetProjectsTrustedIpsUnion {
	typ := GetProjectsTrustedIpsUnionTypeGetProjectsTrustedIps2

	return GetProjectsTrustedIpsUnion{
		GetProjectsTrustedIps2: &getProjectsTrustedIps2,
		Type:                   typ,
	}
}

func (u *GetProjectsTrustedIpsUnion) UnmarshalJSON(data []byte) error {

	var getProjectsTrustedIps2 GetProjectsTrustedIps2 = GetProjectsTrustedIps2{}
	if err := utils.UnmarshalJSON(data, &getProjectsTrustedIps2, "", true, true); err == nil {
		u.GetProjectsTrustedIps2 = &getProjectsTrustedIps2
		u.Type = GetProjectsTrustedIpsUnionTypeGetProjectsTrustedIps2
		return nil
	}

	var getProjectsTrustedIps1 GetProjectsTrustedIps1 = GetProjectsTrustedIps1{}
	if err := utils.UnmarshalJSON(data, &getProjectsTrustedIps1, "", true, true); err == nil {
		u.GetProjectsTrustedIps1 = &getProjectsTrustedIps1
		u.Type = GetProjectsTrustedIpsUnionTypeGetProjectsTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsTrustedIpsUnion", string(data))
}

func (u GetProjectsTrustedIpsUnion) MarshalJSON() ([]byte, error) {
	if u.GetProjectsTrustedIps1 != nil {
		return utils.MarshalJSON(u.GetProjectsTrustedIps1, "", true)
	}

	if u.GetProjectsTrustedIps2 != nil {
		return utils.MarshalJSON(u.GetProjectsTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsTrustedIpsUnion: all fields are null")
}

type GetProjectsGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *GetProjectsGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *GetProjectsGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// GetProjectsCreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type GetProjectsCreateDeployments string

const (
	GetProjectsCreateDeploymentsEnabled  GetProjectsCreateDeployments = "enabled"
	GetProjectsCreateDeploymentsDisabled GetProjectsCreateDeployments = "disabled"
)

func (e GetProjectsCreateDeployments) ToPointer() *GetProjectsCreateDeployments {
	return &e
}
func (e *GetProjectsCreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = GetProjectsCreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsCreateDeployments: %v", v)
	}
}

type GetProjectsGitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments GetProjectsCreateDeployments `json:"createDeployments"`
}

func (o *GetProjectsGitProviderOptions) GetCreateDeployments() GetProjectsCreateDeployments {
	if o == nil {
		return GetProjectsCreateDeployments("")
	}
	return o.CreateDeployments
}

type GetProjectsWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *GetProjectsWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *GetProjectsWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *GetProjectsWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *GetProjectsWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type GetProjectsSrc struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *GetProjectsSrc) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *GetProjectsSrc) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *GetProjectsSrc) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *GetProjectsSrc) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *GetProjectsSrc) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *GetProjectsSrc) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *GetProjectsSrc) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *GetProjectsSrc) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetProjectsSrc) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetProjectsSrc) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetProjectsSrc) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetProjectsSrcUnionType string

const (
	GetProjectsSrcUnionTypeStr            GetProjectsSrcUnionType = "str"
	GetProjectsSrcUnionTypeGetProjectsSrc GetProjectsSrcUnionType = "getProjects_src"
)

type GetProjectsSrcUnion struct {
	Str            *string         `queryParam:"inline"`
	GetProjectsSrc *GetProjectsSrc `queryParam:"inline"`

	Type GetProjectsSrcUnionType
}

func CreateGetProjectsSrcUnionStr(str string) GetProjectsSrcUnion {
	typ := GetProjectsSrcUnionTypeStr

	return GetProjectsSrcUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectsSrcUnionGetProjectsSrc(getProjectsSrc GetProjectsSrc) GetProjectsSrcUnion {
	typ := GetProjectsSrcUnionTypeGetProjectsSrc

	return GetProjectsSrcUnion{
		GetProjectsSrc: &getProjectsSrc,
		Type:           typ,
	}
}

func (u *GetProjectsSrcUnion) UnmarshalJSON(data []byte) error {

	var getProjectsSrc GetProjectsSrc = GetProjectsSrc{}
	if err := utils.UnmarshalJSON(data, &getProjectsSrc, "", true, true); err == nil {
		u.GetProjectsSrc = &getProjectsSrc
		u.Type = GetProjectsSrcUnionTypeGetProjectsSrc
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectsSrcUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsSrcUnion", string(data))
}

func (u GetProjectsSrcUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectsSrc != nil {
		return utils.MarshalJSON(u.GetProjectsSrc, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsSrcUnion: all fields are null")
}

type GetProjectsHasType string

const (
	GetProjectsHasTypePath               GetProjectsHasType = "path"
	GetProjectsHasTypeHost               GetProjectsHasType = "host"
	GetProjectsHasTypeMethod             GetProjectsHasType = "method"
	GetProjectsHasTypeHeader             GetProjectsHasType = "header"
	GetProjectsHasTypeCookie             GetProjectsHasType = "cookie"
	GetProjectsHasTypeQuery              GetProjectsHasType = "query"
	GetProjectsHasTypeIPAddress          GetProjectsHasType = "ip_address"
	GetProjectsHasTypeProtocol           GetProjectsHasType = "protocol"
	GetProjectsHasTypeScheme             GetProjectsHasType = "scheme"
	GetProjectsHasTypeEnvironment        GetProjectsHasType = "environment"
	GetProjectsHasTypeRegion             GetProjectsHasType = "region"
	GetProjectsHasTypeInitialRequestPath GetProjectsHasType = "initial_request_path"
)

func (e GetProjectsHasType) ToPointer() *GetProjectsHasType {
	return &e
}
func (e *GetProjectsHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = GetProjectsHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsHasType: %v", v)
	}
}

type GetProjectsValueHas struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *GetProjectsValueHas) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *GetProjectsValueHas) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *GetProjectsValueHas) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *GetProjectsValueHas) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *GetProjectsValueHas) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *GetProjectsValueHas) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *GetProjectsValueHas) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *GetProjectsValueHas) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetProjectsValueHas) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetProjectsValueHas) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetProjectsValueHas) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetProjectsHasValueUnionType string

const (
	GetProjectsHasValueUnionTypeStr                 GetProjectsHasValueUnionType = "str"
	GetProjectsHasValueUnionTypeGetProjectsValueHas GetProjectsHasValueUnionType = "getProjects_value_has"
)

type GetProjectsHasValueUnion struct {
	Str                 *string              `queryParam:"inline"`
	GetProjectsValueHas *GetProjectsValueHas `queryParam:"inline"`

	Type GetProjectsHasValueUnionType
}

func CreateGetProjectsHasValueUnionStr(str string) GetProjectsHasValueUnion {
	typ := GetProjectsHasValueUnionTypeStr

	return GetProjectsHasValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectsHasValueUnionGetProjectsValueHas(getProjectsValueHas GetProjectsValueHas) GetProjectsHasValueUnion {
	typ := GetProjectsHasValueUnionTypeGetProjectsValueHas

	return GetProjectsHasValueUnion{
		GetProjectsValueHas: &getProjectsValueHas,
		Type:                typ,
	}
}

func (u *GetProjectsHasValueUnion) UnmarshalJSON(data []byte) error {

	var getProjectsValueHas GetProjectsValueHas = GetProjectsValueHas{}
	if err := utils.UnmarshalJSON(data, &getProjectsValueHas, "", true, true); err == nil {
		u.GetProjectsValueHas = &getProjectsValueHas
		u.Type = GetProjectsHasValueUnionTypeGetProjectsValueHas
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectsHasValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsHasValueUnion", string(data))
}

func (u GetProjectsHasValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectsValueHas != nil {
		return utils.MarshalJSON(u.GetProjectsValueHas, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsHasValueUnion: all fields are null")
}

type GetProjectsHas struct {
	Type  GetProjectsHasType        `json:"type"`
	Key   *string                   `json:"key,omitempty"`
	Value *GetProjectsHasValueUnion `json:"value,omitempty"`
}

func (o *GetProjectsHas) GetType() GetProjectsHasType {
	if o == nil {
		return GetProjectsHasType("")
	}
	return o.Type
}

func (o *GetProjectsHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetProjectsHas) GetValue() *GetProjectsHasValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetProjectsMissingType string

const (
	GetProjectsMissingTypePath               GetProjectsMissingType = "path"
	GetProjectsMissingTypeHost               GetProjectsMissingType = "host"
	GetProjectsMissingTypeMethod             GetProjectsMissingType = "method"
	GetProjectsMissingTypeHeader             GetProjectsMissingType = "header"
	GetProjectsMissingTypeCookie             GetProjectsMissingType = "cookie"
	GetProjectsMissingTypeQuery              GetProjectsMissingType = "query"
	GetProjectsMissingTypeIPAddress          GetProjectsMissingType = "ip_address"
	GetProjectsMissingTypeProtocol           GetProjectsMissingType = "protocol"
	GetProjectsMissingTypeScheme             GetProjectsMissingType = "scheme"
	GetProjectsMissingTypeEnvironment        GetProjectsMissingType = "environment"
	GetProjectsMissingTypeRegion             GetProjectsMissingType = "region"
	GetProjectsMissingTypeInitialRequestPath GetProjectsMissingType = "initial_request_path"
)

func (e GetProjectsMissingType) ToPointer() *GetProjectsMissingType {
	return &e
}
func (e *GetProjectsMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = GetProjectsMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsMissingType: %v", v)
	}
}

type GetProjectsValueMissing struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *GetProjectsValueMissing) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *GetProjectsValueMissing) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *GetProjectsValueMissing) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *GetProjectsValueMissing) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *GetProjectsValueMissing) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *GetProjectsValueMissing) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *GetProjectsValueMissing) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *GetProjectsValueMissing) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *GetProjectsValueMissing) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *GetProjectsValueMissing) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *GetProjectsValueMissing) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type GetProjectsMissingValueUnionType string

const (
	GetProjectsMissingValueUnionTypeStr                     GetProjectsMissingValueUnionType = "str"
	GetProjectsMissingValueUnionTypeGetProjectsValueMissing GetProjectsMissingValueUnionType = "getProjects_value_missing"
)

type GetProjectsMissingValueUnion struct {
	Str                     *string                  `queryParam:"inline"`
	GetProjectsValueMissing *GetProjectsValueMissing `queryParam:"inline"`

	Type GetProjectsMissingValueUnionType
}

func CreateGetProjectsMissingValueUnionStr(str string) GetProjectsMissingValueUnion {
	typ := GetProjectsMissingValueUnionTypeStr

	return GetProjectsMissingValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetProjectsMissingValueUnionGetProjectsValueMissing(getProjectsValueMissing GetProjectsValueMissing) GetProjectsMissingValueUnion {
	typ := GetProjectsMissingValueUnionTypeGetProjectsValueMissing

	return GetProjectsMissingValueUnion{
		GetProjectsValueMissing: &getProjectsValueMissing,
		Type:                    typ,
	}
}

func (u *GetProjectsMissingValueUnion) UnmarshalJSON(data []byte) error {

	var getProjectsValueMissing GetProjectsValueMissing = GetProjectsValueMissing{}
	if err := utils.UnmarshalJSON(data, &getProjectsValueMissing, "", true, true); err == nil {
		u.GetProjectsValueMissing = &getProjectsValueMissing
		u.Type = GetProjectsMissingValueUnionTypeGetProjectsValueMissing
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetProjectsMissingValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetProjectsMissingValueUnion", string(data))
}

func (u GetProjectsMissingValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.GetProjectsValueMissing != nil {
		return utils.MarshalJSON(u.GetProjectsValueMissing, "", true)
	}

	return nil, errors.New("could not marshal union type GetProjectsMissingValueUnion: all fields are null")
}

type GetProjectsMissing struct {
	Type  GetProjectsMissingType        `json:"type"`
	Key   *string                       `json:"key,omitempty"`
	Value *GetProjectsMissingValueUnion `json:"value,omitempty"`
}

func (o *GetProjectsMissing) GetType() GetProjectsMissingType {
	if o == nil {
		return GetProjectsMissingType("")
	}
	return o.Type
}

func (o *GetProjectsMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetProjectsMissing) GetValue() *GetProjectsMissingValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type GetProjectsHandle string

const (
	GetProjectsHandleInit     GetProjectsHandle = "init"
	GetProjectsHandleFinalize GetProjectsHandle = "finalize"
)

func (e GetProjectsHandle) ToPointer() *GetProjectsHandle {
	return &e
}
func (e *GetProjectsHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = GetProjectsHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsHandle: %v", v)
	}
}

type GetProjectsFirewallRouteAction string

const (
	GetProjectsFirewallRouteActionDeny      GetProjectsFirewallRouteAction = "deny"
	GetProjectsFirewallRouteActionChallenge GetProjectsFirewallRouteAction = "challenge"
	GetProjectsFirewallRouteActionLog       GetProjectsFirewallRouteAction = "log"
	GetProjectsFirewallRouteActionBypass    GetProjectsFirewallRouteAction = "bypass"
	GetProjectsFirewallRouteActionRateLimit GetProjectsFirewallRouteAction = "rate_limit"
	GetProjectsFirewallRouteActionRedirect  GetProjectsFirewallRouteAction = "redirect"
)

func (e GetProjectsFirewallRouteAction) ToPointer() *GetProjectsFirewallRouteAction {
	return &e
}
func (e *GetProjectsFirewallRouteAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = GetProjectsFirewallRouteAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsFirewallRouteAction: %v", v)
	}
}

type GetProjectsAlgo string

const (
	GetProjectsAlgoFixedWindow GetProjectsAlgo = "fixed_window"
	GetProjectsAlgoTokenBucket GetProjectsAlgo = "token_bucket"
)

func (e GetProjectsAlgo) ToPointer() *GetProjectsAlgo {
	return &e
}
func (e *GetProjectsAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = GetProjectsAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsAlgo: %v", v)
	}
}

type GetProjectsErl struct {
	Algo   GetProjectsAlgo `json:"algo"`
	Window float64         `json:"window"`
	Limit  float64         `json:"limit"`
	Keys   []string        `json:"keys"`
}

func (o *GetProjectsErl) GetAlgo() GetProjectsAlgo {
	if o == nil {
		return GetProjectsAlgo("")
	}
	return o.Algo
}

func (o *GetProjectsErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *GetProjectsErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *GetProjectsErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type GetProjectsMitigate struct {
	Action GetProjectsFirewallRouteAction `json:"action"`
	RuleID string                         `json:"rule_id"`
	TTL    *float64                       `json:"ttl,omitempty"`
	Erl    *GetProjectsErl                `json:"erl,omitempty"`
}

func (o *GetProjectsMitigate) GetAction() GetProjectsFirewallRouteAction {
	if o == nil {
		return GetProjectsFirewallRouteAction("")
	}
	return o.Action
}

func (o *GetProjectsMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *GetProjectsMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *GetProjectsMitigate) GetErl() *GetProjectsErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type GetProjectsFirewallRoute struct {
	Src      *GetProjectsSrcUnion `json:"src,omitempty"`
	Has      []GetProjectsHas     `json:"has,omitempty"`
	Missing  []GetProjectsMissing `json:"missing,omitempty"`
	Dest     *string              `json:"dest,omitempty"`
	Status   *float64             `json:"status,omitempty"`
	Handle   *GetProjectsHandle   `json:"handle,omitempty"`
	Mitigate *GetProjectsMitigate `json:"mitigate,omitempty"`
}

func (o *GetProjectsFirewallRoute) GetSrc() *GetProjectsSrcUnion {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *GetProjectsFirewallRoute) GetHas() []GetProjectsHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *GetProjectsFirewallRoute) GetMissing() []GetProjectsMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *GetProjectsFirewallRoute) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *GetProjectsFirewallRoute) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetProjectsFirewallRoute) GetHandle() *GetProjectsHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *GetProjectsFirewallRoute) GetMitigate() *GetProjectsMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type GetProjectsBotFilterAction string

const (
	GetProjectsBotFilterActionDeny      GetProjectsBotFilterAction = "deny"
	GetProjectsBotFilterActionChallenge GetProjectsBotFilterAction = "challenge"
	GetProjectsBotFilterActionLog       GetProjectsBotFilterAction = "log"
)

func (e GetProjectsBotFilterAction) ToPointer() *GetProjectsBotFilterAction {
	return &e
}
func (e *GetProjectsBotFilterAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = GetProjectsBotFilterAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsBotFilterAction: %v", v)
	}
}

type GetProjectsBotFilter struct {
	Active bool                        `json:"active"`
	Action *GetProjectsBotFilterAction `json:"action,omitempty"`
}

func (o *GetProjectsBotFilter) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetProjectsBotFilter) GetAction() *GetProjectsBotFilterAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetProjectsAiBotsAction string

const (
	GetProjectsAiBotsActionDeny      GetProjectsAiBotsAction = "deny"
	GetProjectsAiBotsActionChallenge GetProjectsAiBotsAction = "challenge"
	GetProjectsAiBotsActionLog       GetProjectsAiBotsAction = "log"
)

func (e GetProjectsAiBotsAction) ToPointer() *GetProjectsAiBotsAction {
	return &e
}
func (e *GetProjectsAiBotsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = GetProjectsAiBotsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsAiBotsAction: %v", v)
	}
}

type GetProjectsAiBots struct {
	Active bool                     `json:"active"`
	Action *GetProjectsAiBotsAction `json:"action,omitempty"`
}

func (o *GetProjectsAiBots) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetProjectsAiBots) GetAction() *GetProjectsAiBotsAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetProjectsOwaspAction string

const (
	GetProjectsOwaspActionDeny      GetProjectsOwaspAction = "deny"
	GetProjectsOwaspActionChallenge GetProjectsOwaspAction = "challenge"
	GetProjectsOwaspActionLog       GetProjectsOwaspAction = "log"
)

func (e GetProjectsOwaspAction) ToPointer() *GetProjectsOwaspAction {
	return &e
}
func (e *GetProjectsOwaspAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = GetProjectsOwaspAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsOwaspAction: %v", v)
	}
}

type GetProjectsOwasp struct {
	Active bool                    `json:"active"`
	Action *GetProjectsOwaspAction `json:"action,omitempty"`
}

func (o *GetProjectsOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GetProjectsOwasp) GetAction() *GetProjectsOwaspAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type GetProjectsManagedRules struct {
	BotFilter GetProjectsBotFilter `json:"bot_filter"`
	AiBots    GetProjectsAiBots    `json:"ai_bots"`
	Owasp     GetProjectsOwasp     `json:"owasp"`
}

func (o *GetProjectsManagedRules) GetBotFilter() GetProjectsBotFilter {
	if o == nil {
		return GetProjectsBotFilter{}
	}
	return o.BotFilter
}

func (o *GetProjectsManagedRules) GetAiBots() GetProjectsAiBots {
	if o == nil {
		return GetProjectsAiBots{}
	}
	return o.AiBots
}

func (o *GetProjectsManagedRules) GetOwasp() GetProjectsOwasp {
	if o == nil {
		return GetProjectsOwasp{}
	}
	return o.Owasp
}

type GetProjectsSecurity struct {
	AttackModeEnabled      *bool                      `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                   `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                      `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                   `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                   `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                   `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []GetProjectsFirewallRoute `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                      `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                      `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                      `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                   `json:"firewallBypassIps,omitempty"`
	ManagedRules           *GetProjectsManagedRules   `json:"managedRules,omitempty"`
}

func (o *GetProjectsSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *GetProjectsSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *GetProjectsSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *GetProjectsSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *GetProjectsSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *GetProjectsSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *GetProjectsSecurity) GetFirewallRoutes() []GetProjectsFirewallRoute {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *GetProjectsSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *GetProjectsSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *GetProjectsSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *GetProjectsSecurity) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *GetProjectsSecurity) GetManagedRules() *GetProjectsManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// GetProjectsIssuerMode - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type GetProjectsIssuerMode string

const (
	GetProjectsIssuerModeTeam   GetProjectsIssuerMode = "team"
	GetProjectsIssuerModeGlobal GetProjectsIssuerMode = "global"
)

func (e GetProjectsIssuerMode) ToPointer() *GetProjectsIssuerMode {
	return &e
}
func (e *GetProjectsIssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = GetProjectsIssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsIssuerMode: %v", v)
	}
}

type GetProjectsOidcTokenConfig struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	Enabled *bool `json:"enabled,omitempty"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *GetProjectsIssuerMode `json:"issuerMode,omitempty"`
}

func (o *GetProjectsOidcTokenConfig) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *GetProjectsOidcTokenConfig) GetIssuerMode() *GetProjectsIssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type GetProjectsTier string

const (
	GetProjectsTierStandard GetProjectsTier = "standard"
	GetProjectsTierAdvanced GetProjectsTier = "advanced"
	GetProjectsTierCritical GetProjectsTier = "critical"
)

func (e GetProjectsTier) ToPointer() *GetProjectsTier {
	return &e
}
func (e *GetProjectsTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = GetProjectsTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetProjectsTier: %v", v)
	}
}

type GetProjectsFeatures struct {
	WebAnalytics *bool `json:"webAnalytics,omitempty"`
}

func (o *GetProjectsFeatures) GetWebAnalytics() *bool {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type GetProjectsProject struct {
	AccountID                        string                            `json:"accountId"`
	Analytics                        *GetProjectsAnalytics             `json:"analytics,omitempty"`
	SpeedInsights                    *GetProjectsSpeedInsights         `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs             *bool                             `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains          *bool                             `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                           `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                     *string                           `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                           `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurations            []GetProjectsConnectConfiguration `json:"connectConfigurations,omitempty"`
	ConnectConfigurationID           *string                           `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled             *bool                             `json:"connectBuildsEnabled,omitempty"`
	PassiveConnectConfigurationID    *string                           `json:"passiveConnectConfigurationId,omitempty"`
	CreatedAt                        *float64                          `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility    *bool                             `json:"customerSupportCodeVisibility,omitempty"`
	Crons                            *GetProjectsCrons                 `json:"crons,omitempty"`
	DataCache                        *GetProjectsDataCache             `json:"dataCache,omitempty"`
	DeploymentExpiration             *GetProjectsDeploymentExpiration  `json:"deploymentExpiration,omitempty"`
	DevCommand                       *string                           `json:"devCommand,omitempty"`
	DirectoryListing                 bool                              `json:"directoryListing"`
	InstallCommand                   *string                           `json:"installCommand,omitempty"`
	Env                              []GetProjectsEnv                  `json:"env,omitempty"`
	CustomEnvironments               []GetProjectsCustomEnvironment    `json:"customEnvironments,omitempty"`
	Framework                        *GetProjectsFramework             `json:"framework,omitempty"`
	GitForkProtection                *bool                             `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                             `json:"gitLFS,omitempty"`
	ID                               string                            `json:"id"`
	IPBuckets                        []GetProjectsIPBucket             `json:"ipBuckets,omitempty"`
	LatestDeployments                []GetProjectsLatestDeployment     `json:"latestDeployments,omitempty"`
	Link                             *GetProjectsLinkUnion             `json:"link,omitempty"`
	Microfrontends                   *GetProjectsMicrofrontendsUnion   `json:"microfrontends,omitempty"`
	Name                             string                            `json:"name"`
	NodeVersion                      GetProjectsNodeVersion            `json:"nodeVersion"`
	OptionsAllowlist                 *GetProjectsOptionsAllowlist      `json:"optionsAllowlist,omitempty"`
	OutputDirectory                  *string                           `json:"outputDirectory,omitempty"`
	PasswordProtection               *GetProjectsPasswordProtection    `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane    *bool                             `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                     *bool                             `json:"publicSource,omitempty"`
	ResourceConfig                   GetProjectsResourceConfig         `json:"resourceConfig"`
	// Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
	RollbackDescription *GetProjectsRollbackDescription `json:"rollbackDescription,omitempty"`
	// Project-level rolling release configuration that defines how deployments should be gradually rolled out
	RollingRelease                       *GetProjectsRollingRelease                  `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                GetProjectsDefaultResourceConfig            `json:"defaultResourceConfig"`
	RootDirectory                        *string                                     `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                     `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                       `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                    `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                    `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                       `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                       `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                       `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *GetProjectsSsoProtection                   `json:"ssoProtection,omitempty"`
	Targets                              map[string]*GetProjectsTargets              `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                    `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                    `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                     `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                     `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                    `json:"updatedAt,omitempty"`
	Live                                 *bool                                       `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                       `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                       `json:"enableProductionFeedback,omitempty"`
	Permissions                          *GetProjectsPermissions                     `json:"permissions,omitempty"`
	LastRollbackTarget                   *GetProjectsLastRollbackTarget              `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *GetProjectsLastAliasRequest                `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]GetProjectsProtectionBypassUnion `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                       `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *GetProjectsTrustedIpsUnion                 `json:"trustedIps,omitempty"`
	GitComments                          *GetProjectsGitComments                     `json:"gitComments,omitempty"`
	GitProviderOptions                   *GetProjectsGitProviderOptions              `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                       `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                     `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *GetProjectsWebAnalytics                    `json:"webAnalytics,omitempty"`
	Security                             *GetProjectsSecurity                        `json:"security,omitempty"`
	OidcTokenConfig                      *GetProjectsOidcTokenConfig                 `json:"oidcTokenConfig,omitempty"`
	Tier                                 *GetProjectsTier                            `json:"tier,omitempty"`
	Features                             *GetProjectsFeatures                        `json:"features,omitempty"`
}

func (o *GetProjectsProject) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *GetProjectsProject) GetAnalytics() *GetProjectsAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *GetProjectsProject) GetSpeedInsights() *GetProjectsSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *GetProjectsProject) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *GetProjectsProject) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *GetProjectsProject) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *GetProjectsProject) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *GetProjectsProject) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *GetProjectsProject) GetConnectConfigurations() []GetProjectsConnectConfiguration {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurations
}

func (o *GetProjectsProject) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *GetProjectsProject) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *GetProjectsProject) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *GetProjectsProject) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetProjectsProject) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *GetProjectsProject) GetCrons() *GetProjectsCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *GetProjectsProject) GetDataCache() *GetProjectsDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *GetProjectsProject) GetDeploymentExpiration() *GetProjectsDeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *GetProjectsProject) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *GetProjectsProject) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *GetProjectsProject) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *GetProjectsProject) GetEnv() []GetProjectsEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *GetProjectsProject) GetCustomEnvironments() []GetProjectsCustomEnvironment {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *GetProjectsProject) GetFramework() *GetProjectsFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *GetProjectsProject) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *GetProjectsProject) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *GetProjectsProject) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetProjectsProject) GetIPBuckets() []GetProjectsIPBucket {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *GetProjectsProject) GetLatestDeployments() []GetProjectsLatestDeployment {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *GetProjectsProject) GetLink() *GetProjectsLinkUnion {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *GetProjectsProject) GetMicrofrontends() *GetProjectsMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *GetProjectsProject) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetProjectsProject) GetNodeVersion() GetProjectsNodeVersion {
	if o == nil {
		return GetProjectsNodeVersion("")
	}
	return o.NodeVersion
}

func (o *GetProjectsProject) GetOptionsAllowlist() *GetProjectsOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *GetProjectsProject) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *GetProjectsProject) GetPasswordProtection() *GetProjectsPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *GetProjectsProject) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *GetProjectsProject) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *GetProjectsProject) GetResourceConfig() GetProjectsResourceConfig {
	if o == nil {
		return GetProjectsResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *GetProjectsProject) GetRollbackDescription() *GetProjectsRollbackDescription {
	if o == nil {
		return nil
	}
	return o.RollbackDescription
}

func (o *GetProjectsProject) GetRollingRelease() *GetProjectsRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *GetProjectsProject) GetDefaultResourceConfig() GetProjectsDefaultResourceConfig {
	if o == nil {
		return GetProjectsDefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *GetProjectsProject) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *GetProjectsProject) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *GetProjectsProject) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *GetProjectsProject) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *GetProjectsProject) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *GetProjectsProject) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *GetProjectsProject) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *GetProjectsProject) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *GetProjectsProject) GetSsoProtection() *GetProjectsSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *GetProjectsProject) GetTargets() map[string]*GetProjectsTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *GetProjectsProject) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *GetProjectsProject) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *GetProjectsProject) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *GetProjectsProject) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *GetProjectsProject) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetProjectsProject) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *GetProjectsProject) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *GetProjectsProject) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *GetProjectsProject) GetPermissions() *GetProjectsPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *GetProjectsProject) GetLastRollbackTarget() *GetProjectsLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *GetProjectsProject) GetLastAliasRequest() *GetProjectsLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *GetProjectsProject) GetProtectionBypass() map[string]GetProjectsProtectionBypassUnion {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *GetProjectsProject) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *GetProjectsProject) GetTrustedIps() *GetProjectsTrustedIpsUnion {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *GetProjectsProject) GetGitComments() *GetProjectsGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *GetProjectsProject) GetGitProviderOptions() *GetProjectsGitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *GetProjectsProject) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *GetProjectsProject) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *GetProjectsProject) GetWebAnalytics() *GetProjectsWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *GetProjectsProject) GetSecurity() *GetProjectsSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *GetProjectsProject) GetOidcTokenConfig() *GetProjectsOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *GetProjectsProject) GetTier() *GetProjectsTier {
	if o == nil {
		return nil
	}
	return o.Tier
}

func (o *GetProjectsProject) GetFeatures() *GetProjectsFeatures {
	if o == nil {
		return nil
	}
	return o.Features
}

// GetProjectsResponseBody - The paginated list of projects
type GetProjectsResponseBody struct {
	Projects []GetProjectsProject `json:"projects"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *GetProjectsResponseBody) GetProjects() []GetProjectsProject {
	if o == nil {
		return []GetProjectsProject{}
	}
	return o.Projects
}

func (o *GetProjectsResponseBody) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type GetProjectsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The paginated list of projects
	Object *GetProjectsResponseBody
}

func (o *GetProjectsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetProjectsResponse) GetObject() *GetProjectsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
