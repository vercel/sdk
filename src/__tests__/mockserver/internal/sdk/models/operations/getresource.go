// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetResourceRequest struct {
	// The ID of the integration configuration (installation) the resource belongs to
	IntegrationConfigurationID string `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	// The ID provided by the 3rd party provider for the given resource
	ResourceID string `pathParam:"style=simple,explode=false,name=resourceId"`
}

func (o *GetResourceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *GetResourceRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

// GetResourceStatus - The current status of the resource
type GetResourceStatus string

const (
	GetResourceStatusReady       GetResourceStatus = "ready"
	GetResourceStatusPending     GetResourceStatus = "pending"
	GetResourceStatusSuspended   GetResourceStatus = "suspended"
	GetResourceStatusResumed     GetResourceStatus = "resumed"
	GetResourceStatusUninstalled GetResourceStatus = "uninstalled"
	GetResourceStatusError       GetResourceStatus = "error"
)

func (e GetResourceStatus) ToPointer() *GetResourceStatus {
	return &e
}
func (e *GetResourceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ready":
		fallthrough
	case "pending":
		fallthrough
	case "suspended":
		fallthrough
	case "resumed":
		fallthrough
	case "uninstalled":
		fallthrough
	case "error":
		*e = GetResourceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetResourceStatus: %v", v)
	}
}

type GetResourceExperimentation struct {
	EdgeConfigSyncingEnabled *bool   `json:"edgeConfigSyncingEnabled,omitempty"`
	EdgeConfigID             *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID        *string `json:"edgeConfigTokenId,omitempty"`
}

func (o *GetResourceExperimentation) GetEdgeConfigSyncingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSyncingEnabled
}

func (o *GetResourceExperimentation) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetResourceExperimentation) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

// GetResourceProtocolSettings - Any settings provided for the resource to support its product's protocols
type GetResourceProtocolSettings struct {
	Experimentation *GetResourceExperimentation `json:"experimentation,omitempty"`
}

func (o *GetResourceProtocolSettings) GetExperimentation() *GetResourceExperimentation {
	if o == nil {
		return nil
	}
	return o.Experimentation
}

type GetResourceLevel string

const (
	GetResourceLevelError GetResourceLevel = "error"
	GetResourceLevelInfo  GetResourceLevel = "info"
	GetResourceLevelWarn  GetResourceLevel = "warn"
)

func (e GetResourceLevel) ToPointer() *GetResourceLevel {
	return &e
}
func (e *GetResourceLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		*e = GetResourceLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetResourceLevel: %v", v)
	}
}

// GetResourceNotification - The notification, if set, displayed to the user when viewing the resource in Vercel
type GetResourceNotification struct {
	Level   GetResourceLevel `json:"level"`
	Title   string           `json:"title"`
	Message *string          `json:"message,omitempty"`
	Href    *string          `json:"href,omitempty"`
}

func (o *GetResourceNotification) GetLevel() GetResourceLevel {
	if o == nil {
		return GetResourceLevel("")
	}
	return o.Level
}

func (o *GetResourceNotification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetResourceNotification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetResourceNotification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

type GetResourceMetadataType string

const (
	GetResourceMetadataTypeStr           GetResourceMetadataType = "str"
	GetResourceMetadataTypeNumber        GetResourceMetadataType = "number"
	GetResourceMetadataTypeBoolean       GetResourceMetadataType = "boolean"
	GetResourceMetadataTypeArrayOfStr    GetResourceMetadataType = "arrayOfStr"
	GetResourceMetadataTypeArrayOfNumber GetResourceMetadataType = "arrayOfNumber"
)

type GetResourceMetadata struct {
	Str           *string   `queryParam:"inline"`
	Number        *float64  `queryParam:"inline"`
	Boolean       *bool     `queryParam:"inline"`
	ArrayOfStr    []string  `queryParam:"inline"`
	ArrayOfNumber []float64 `queryParam:"inline"`

	Type GetResourceMetadataType
}

func CreateGetResourceMetadataStr(str string) GetResourceMetadata {
	typ := GetResourceMetadataTypeStr

	return GetResourceMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetResourceMetadataNumber(number float64) GetResourceMetadata {
	typ := GetResourceMetadataTypeNumber

	return GetResourceMetadata{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetResourceMetadataBoolean(boolean bool) GetResourceMetadata {
	typ := GetResourceMetadataTypeBoolean

	return GetResourceMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateGetResourceMetadataArrayOfStr(arrayOfStr []string) GetResourceMetadata {
	typ := GetResourceMetadataTypeArrayOfStr

	return GetResourceMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateGetResourceMetadataArrayOfNumber(arrayOfNumber []float64) GetResourceMetadata {
	typ := GetResourceMetadataTypeArrayOfNumber

	return GetResourceMetadata{
		ArrayOfNumber: arrayOfNumber,
		Type:          typ,
	}
}

func (u *GetResourceMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetResourceMetadataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetResourceMetadataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetResourceMetadataTypeBoolean
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetResourceMetadataTypeArrayOfStr
		return nil
	}

	var arrayOfNumber []float64 = []float64{}
	if err := utils.UnmarshalJSON(data, &arrayOfNumber, "", true, true); err == nil {
		u.ArrayOfNumber = arrayOfNumber
		u.Type = GetResourceMetadataTypeArrayOfNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetResourceMetadata", string(data))
}

func (u GetResourceMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfNumber != nil {
		return utils.MarshalJSON(u.ArrayOfNumber, "", true)
	}

	return nil, errors.New("could not marshal union type GetResourceMetadata: all fields are null")
}

type GetResourceResponseBody struct {
	// The ID provided by the 3rd party provider for the given resource
	ID string `json:"id"`
	// The ID assigned by Vercel for the given resource
	InternalID string `json:"internalId"`
	// The name of the resource as it is recorded in Vercel
	Name string `json:"name"`
	// The current status of the resource
	Status *GetResourceStatus `json:"status,omitempty"`
	// The ID of the product the resource is derived from
	ProductID string `json:"productId"`
	// Any settings provided for the resource to support its product's protocols
	ProtocolSettings *GetResourceProtocolSettings `json:"protocolSettings,omitempty"`
	// The notification, if set, displayed to the user when viewing the resource in Vercel
	Notification *GetResourceNotification `json:"notification,omitempty"`
	// The ID of the billing plan the resource is subscribed to, if applicable
	BillingPlanID *string `json:"billingPlanId,omitempty"`
	// The configured metadata for the resource as defined by its product's Metadata Schema
	Metadata map[string]GetResourceMetadata `json:"metadata,omitempty"`
}

func (o *GetResourceResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetResourceResponseBody) GetInternalID() string {
	if o == nil {
		return ""
	}
	return o.InternalID
}

func (o *GetResourceResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetResourceResponseBody) GetStatus() *GetResourceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *GetResourceResponseBody) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *GetResourceResponseBody) GetProtocolSettings() *GetResourceProtocolSettings {
	if o == nil {
		return nil
	}
	return o.ProtocolSettings
}

func (o *GetResourceResponseBody) GetNotification() *GetResourceNotification {
	if o == nil {
		return nil
	}
	return o.Notification
}

func (o *GetResourceResponseBody) GetBillingPlanID() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanID
}

func (o *GetResourceResponseBody) GetMetadata() map[string]GetResourceMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type GetResourceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetResourceResponseBody
}

func (o *GetResourceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetResourceResponse) GetObject() *GetResourceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
