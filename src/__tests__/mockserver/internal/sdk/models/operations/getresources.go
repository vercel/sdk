// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetResourcesRequest struct {
	IntegrationConfigurationID string `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
}

func (o *GetResourcesRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

// GetResourcesStatus - The current status of the resource
type GetResourcesStatus string

const (
	GetResourcesStatusReady       GetResourcesStatus = "ready"
	GetResourcesStatusPending     GetResourcesStatus = "pending"
	GetResourcesStatusSuspended   GetResourcesStatus = "suspended"
	GetResourcesStatusResumed     GetResourcesStatus = "resumed"
	GetResourcesStatusUninstalled GetResourcesStatus = "uninstalled"
	GetResourcesStatusError       GetResourcesStatus = "error"
)

func (e GetResourcesStatus) ToPointer() *GetResourcesStatus {
	return &e
}
func (e *GetResourcesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ready":
		fallthrough
	case "pending":
		fallthrough
	case "suspended":
		fallthrough
	case "resumed":
		fallthrough
	case "uninstalled":
		fallthrough
	case "error":
		*e = GetResourcesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetResourcesStatus: %v", v)
	}
}

type GetResourcesExperimentation struct {
	EdgeConfigSyncingEnabled *bool   `json:"edgeConfigSyncingEnabled,omitempty"`
	EdgeConfigID             *string `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID        *string `json:"edgeConfigTokenId,omitempty"`
}

func (o *GetResourcesExperimentation) GetEdgeConfigSyncingEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSyncingEnabled
}

func (o *GetResourcesExperimentation) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *GetResourcesExperimentation) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

// GetResourcesProtocolSettings - Any settings provided for the resource to support its product's protocols
type GetResourcesProtocolSettings struct {
	Experimentation *GetResourcesExperimentation `json:"experimentation,omitempty"`
}

func (o *GetResourcesProtocolSettings) GetExperimentation() *GetResourcesExperimentation {
	if o == nil {
		return nil
	}
	return o.Experimentation
}

type GetResourcesLevel string

const (
	GetResourcesLevelError GetResourcesLevel = "error"
	GetResourcesLevelInfo  GetResourcesLevel = "info"
	GetResourcesLevelWarn  GetResourcesLevel = "warn"
)

func (e GetResourcesLevel) ToPointer() *GetResourcesLevel {
	return &e
}
func (e *GetResourcesLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "error":
		fallthrough
	case "info":
		fallthrough
	case "warn":
		*e = GetResourcesLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetResourcesLevel: %v", v)
	}
}

// GetResourcesNotification - The notification, if set, displayed to the user when viewing the resource in Vercel
type GetResourcesNotification struct {
	Level   GetResourcesLevel `json:"level"`
	Title   string            `json:"title"`
	Message *string           `json:"message,omitempty"`
	Href    *string           `json:"href,omitempty"`
}

func (o *GetResourcesNotification) GetLevel() GetResourcesLevel {
	if o == nil {
		return GetResourcesLevel("")
	}
	return o.Level
}

func (o *GetResourcesNotification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *GetResourcesNotification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *GetResourcesNotification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

type GetResourcesMetadataType string

const (
	GetResourcesMetadataTypeStr           GetResourcesMetadataType = "str"
	GetResourcesMetadataTypeNumber        GetResourcesMetadataType = "number"
	GetResourcesMetadataTypeBoolean       GetResourcesMetadataType = "boolean"
	GetResourcesMetadataTypeArrayOfStr    GetResourcesMetadataType = "arrayOfStr"
	GetResourcesMetadataTypeArrayOfNumber GetResourcesMetadataType = "arrayOfNumber"
)

type GetResourcesMetadata struct {
	Str           *string   `queryParam:"inline"`
	Number        *float64  `queryParam:"inline"`
	Boolean       *bool     `queryParam:"inline"`
	ArrayOfStr    []string  `queryParam:"inline"`
	ArrayOfNumber []float64 `queryParam:"inline"`

	Type GetResourcesMetadataType
}

func CreateGetResourcesMetadataStr(str string) GetResourcesMetadata {
	typ := GetResourcesMetadataTypeStr

	return GetResourcesMetadata{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetResourcesMetadataNumber(number float64) GetResourcesMetadata {
	typ := GetResourcesMetadataTypeNumber

	return GetResourcesMetadata{
		Number: &number,
		Type:   typ,
	}
}

func CreateGetResourcesMetadataBoolean(boolean bool) GetResourcesMetadata {
	typ := GetResourcesMetadataTypeBoolean

	return GetResourcesMetadata{
		Boolean: &boolean,
		Type:    typ,
	}
}

func CreateGetResourcesMetadataArrayOfStr(arrayOfStr []string) GetResourcesMetadata {
	typ := GetResourcesMetadataTypeArrayOfStr

	return GetResourcesMetadata{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateGetResourcesMetadataArrayOfNumber(arrayOfNumber []float64) GetResourcesMetadata {
	typ := GetResourcesMetadataTypeArrayOfNumber

	return GetResourcesMetadata{
		ArrayOfNumber: arrayOfNumber,
		Type:          typ,
	}
}

func (u *GetResourcesMetadata) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetResourcesMetadataTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetResourcesMetadataTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = GetResourcesMetadataTypeBoolean
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = GetResourcesMetadataTypeArrayOfStr
		return nil
	}

	var arrayOfNumber []float64 = []float64{}
	if err := utils.UnmarshalJSON(data, &arrayOfNumber, "", true, true); err == nil {
		u.ArrayOfNumber = arrayOfNumber
		u.Type = GetResourcesMetadataTypeArrayOfNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetResourcesMetadata", string(data))
}

func (u GetResourcesMetadata) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.ArrayOfNumber != nil {
		return utils.MarshalJSON(u.ArrayOfNumber, "", true)
	}

	return nil, errors.New("could not marshal union type GetResourcesMetadata: all fields are null")
}

type Resource struct {
	// The ID provided by the partner for the given resource
	PartnerID string `json:"partnerId"`
	// The ID assigned by Vercel for the given resource
	InternalID string `json:"internalId"`
	// The name of the resource as it is recorded in Vercel
	Name string `json:"name"`
	// The current status of the resource
	Status *GetResourcesStatus `json:"status,omitempty"`
	// The ID of the product the resource is derived from
	ProductID string `json:"productId"`
	// Any settings provided for the resource to support its product's protocols
	ProtocolSettings *GetResourcesProtocolSettings `json:"protocolSettings,omitempty"`
	// The notification, if set, displayed to the user when viewing the resource in Vercel
	Notification *GetResourcesNotification `json:"notification,omitempty"`
	// The ID of the billing plan the resource is subscribed to, if applicable
	BillingPlanID *string `json:"billingPlanId,omitempty"`
	// The configured metadata for the resource as defined by its product's Metadata Schema
	Metadata map[string]GetResourcesMetadata `json:"metadata,omitempty"`
}

func (o *Resource) GetPartnerID() string {
	if o == nil {
		return ""
	}
	return o.PartnerID
}

func (o *Resource) GetInternalID() string {
	if o == nil {
		return ""
	}
	return o.InternalID
}

func (o *Resource) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Resource) GetStatus() *GetResourcesStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *Resource) GetProductID() string {
	if o == nil {
		return ""
	}
	return o.ProductID
}

func (o *Resource) GetProtocolSettings() *GetResourcesProtocolSettings {
	if o == nil {
		return nil
	}
	return o.ProtocolSettings
}

func (o *Resource) GetNotification() *GetResourcesNotification {
	if o == nil {
		return nil
	}
	return o.Notification
}

func (o *Resource) GetBillingPlanID() *string {
	if o == nil {
		return nil
	}
	return o.BillingPlanID
}

func (o *Resource) GetMetadata() map[string]GetResourcesMetadata {
	if o == nil {
		return nil
	}
	return o.Metadata
}

type GetResourcesResponseBody struct {
	Resources []Resource `json:"resources"`
}

func (o *GetResourcesResponseBody) GetResources() []Resource {
	if o == nil {
		return []Resource{}
	}
	return o.Resources
}

type GetResourcesResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetResourcesResponseBody
}

func (o *GetResourcesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetResourcesResponse) GetObject() *GetResourcesResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
