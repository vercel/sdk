// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// QueryParamState - Filter by rolling release state
type QueryParamState string

const (
	QueryParamStateActive   QueryParamState = "ACTIVE"
	QueryParamStateComplete QueryParamState = "COMPLETE"
	QueryParamStateAborted  QueryParamState = "ABORTED"
)

func (e QueryParamState) ToPointer() *QueryParamState {
	return &e
}
func (e *QueryParamState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "ABORTED":
		*e = QueryParamState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamState: %v", v)
	}
}

type GetRollingReleaseRequest struct {
	// Project ID or project name (URL-encoded)
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Filter by rolling release state
	State *QueryParamState `queryParam:"style=form,explode=true,name=state"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetRollingReleaseRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetRollingReleaseRequest) GetState() *QueryParamState {
	if o == nil {
		return nil
	}
	return o.State
}

func (o *GetRollingReleaseRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetRollingReleaseRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetRollingReleaseStateResponseBody - The current state of the rolling release
type GetRollingReleaseStateResponseBody string

const (
	GetRollingReleaseStateResponseBodyActive   GetRollingReleaseStateResponseBody = "ACTIVE"
	GetRollingReleaseStateResponseBodyComplete GetRollingReleaseStateResponseBody = "COMPLETE"
	GetRollingReleaseStateResponseBodyAborted  GetRollingReleaseStateResponseBody = "ABORTED"
)

func (e GetRollingReleaseStateResponseBody) ToPointer() *GetRollingReleaseStateResponseBody {
	return &e
}
func (e *GetRollingReleaseStateResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ACTIVE":
		fallthrough
	case "COMPLETE":
		fallthrough
	case "ABORTED":
		*e = GetRollingReleaseStateResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseStateResponseBody: %v", v)
	}
}

type GetRollingReleaseCurrentDeploymentTarget string

const (
	GetRollingReleaseCurrentDeploymentTargetStaging    GetRollingReleaseCurrentDeploymentTarget = "staging"
	GetRollingReleaseCurrentDeploymentTargetProduction GetRollingReleaseCurrentDeploymentTarget = "production"
)

func (e GetRollingReleaseCurrentDeploymentTarget) ToPointer() *GetRollingReleaseCurrentDeploymentTarget {
	return &e
}
func (e *GetRollingReleaseCurrentDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetRollingReleaseCurrentDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseCurrentDeploymentTarget: %v", v)
	}
}

type GetRollingReleaseCurrentDeploymentSource string

const (
	GetRollingReleaseCurrentDeploymentSourceAPITriggerGitDeploy GetRollingReleaseCurrentDeploymentSource = "api-trigger-git-deploy"
	GetRollingReleaseCurrentDeploymentSourceCli                 GetRollingReleaseCurrentDeploymentSource = "cli"
	GetRollingReleaseCurrentDeploymentSourceCloneRepo           GetRollingReleaseCurrentDeploymentSource = "clone/repo"
	GetRollingReleaseCurrentDeploymentSourceGit                 GetRollingReleaseCurrentDeploymentSource = "git"
	GetRollingReleaseCurrentDeploymentSourceImport              GetRollingReleaseCurrentDeploymentSource = "import"
	GetRollingReleaseCurrentDeploymentSourceImportRepo          GetRollingReleaseCurrentDeploymentSource = "import/repo"
	GetRollingReleaseCurrentDeploymentSourceRedeploy            GetRollingReleaseCurrentDeploymentSource = "redeploy"
	GetRollingReleaseCurrentDeploymentSourceV0Web               GetRollingReleaseCurrentDeploymentSource = "v0-web"
)

func (e GetRollingReleaseCurrentDeploymentSource) ToPointer() *GetRollingReleaseCurrentDeploymentSource {
	return &e
}
func (e *GetRollingReleaseCurrentDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = GetRollingReleaseCurrentDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseCurrentDeploymentSource: %v", v)
	}
}

type GetRollingReleaseCurrentDeploymentReadyState string

const (
	GetRollingReleaseCurrentDeploymentReadyStateBuilding     GetRollingReleaseCurrentDeploymentReadyState = "BUILDING"
	GetRollingReleaseCurrentDeploymentReadyStateError        GetRollingReleaseCurrentDeploymentReadyState = "ERROR"
	GetRollingReleaseCurrentDeploymentReadyStateInitializing GetRollingReleaseCurrentDeploymentReadyState = "INITIALIZING"
	GetRollingReleaseCurrentDeploymentReadyStateQueued       GetRollingReleaseCurrentDeploymentReadyState = "QUEUED"
	GetRollingReleaseCurrentDeploymentReadyStateReady        GetRollingReleaseCurrentDeploymentReadyState = "READY"
	GetRollingReleaseCurrentDeploymentReadyStateCanceled     GetRollingReleaseCurrentDeploymentReadyState = "CANCELED"
)

func (e GetRollingReleaseCurrentDeploymentReadyState) ToPointer() *GetRollingReleaseCurrentDeploymentReadyState {
	return &e
}
func (e *GetRollingReleaseCurrentDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetRollingReleaseCurrentDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseCurrentDeploymentReadyState: %v", v)
	}
}

// GetRollingReleaseCurrentDeployment - The current deployment receiving production traffic
type GetRollingReleaseCurrentDeployment struct {
	ID           string                                       `json:"id"`
	Name         string                                       `json:"name"`
	URL          string                                       `json:"url"`
	Target       *GetRollingReleaseCurrentDeploymentTarget    `json:"target,omitempty"`
	Source       *GetRollingReleaseCurrentDeploymentSource    `json:"source,omitempty"`
	CreatedAt    float64                                      `json:"createdAt"`
	ReadyState   GetRollingReleaseCurrentDeploymentReadyState `json:"readyState"`
	ReadyStateAt *float64                                     `json:"readyStateAt,omitempty"`
}

func (o *GetRollingReleaseCurrentDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetRollingReleaseCurrentDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRollingReleaseCurrentDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetRollingReleaseCurrentDeployment) GetTarget() *GetRollingReleaseCurrentDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetRollingReleaseCurrentDeployment) GetSource() *GetRollingReleaseCurrentDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetRollingReleaseCurrentDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetRollingReleaseCurrentDeployment) GetReadyState() GetRollingReleaseCurrentDeploymentReadyState {
	if o == nil {
		return GetRollingReleaseCurrentDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *GetRollingReleaseCurrentDeployment) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

type GetRollingReleaseCanaryDeploymentTarget string

const (
	GetRollingReleaseCanaryDeploymentTargetStaging    GetRollingReleaseCanaryDeploymentTarget = "staging"
	GetRollingReleaseCanaryDeploymentTargetProduction GetRollingReleaseCanaryDeploymentTarget = "production"
)

func (e GetRollingReleaseCanaryDeploymentTarget) ToPointer() *GetRollingReleaseCanaryDeploymentTarget {
	return &e
}
func (e *GetRollingReleaseCanaryDeploymentTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "staging":
		fallthrough
	case "production":
		*e = GetRollingReleaseCanaryDeploymentTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseCanaryDeploymentTarget: %v", v)
	}
}

type GetRollingReleaseCanaryDeploymentSource string

const (
	GetRollingReleaseCanaryDeploymentSourceAPITriggerGitDeploy GetRollingReleaseCanaryDeploymentSource = "api-trigger-git-deploy"
	GetRollingReleaseCanaryDeploymentSourceCli                 GetRollingReleaseCanaryDeploymentSource = "cli"
	GetRollingReleaseCanaryDeploymentSourceCloneRepo           GetRollingReleaseCanaryDeploymentSource = "clone/repo"
	GetRollingReleaseCanaryDeploymentSourceGit                 GetRollingReleaseCanaryDeploymentSource = "git"
	GetRollingReleaseCanaryDeploymentSourceImport              GetRollingReleaseCanaryDeploymentSource = "import"
	GetRollingReleaseCanaryDeploymentSourceImportRepo          GetRollingReleaseCanaryDeploymentSource = "import/repo"
	GetRollingReleaseCanaryDeploymentSourceRedeploy            GetRollingReleaseCanaryDeploymentSource = "redeploy"
	GetRollingReleaseCanaryDeploymentSourceV0Web               GetRollingReleaseCanaryDeploymentSource = "v0-web"
)

func (e GetRollingReleaseCanaryDeploymentSource) ToPointer() *GetRollingReleaseCanaryDeploymentSource {
	return &e
}
func (e *GetRollingReleaseCanaryDeploymentSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "api-trigger-git-deploy":
		fallthrough
	case "cli":
		fallthrough
	case "clone/repo":
		fallthrough
	case "git":
		fallthrough
	case "import":
		fallthrough
	case "import/repo":
		fallthrough
	case "redeploy":
		fallthrough
	case "v0-web":
		*e = GetRollingReleaseCanaryDeploymentSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseCanaryDeploymentSource: %v", v)
	}
}

type GetRollingReleaseCanaryDeploymentReadyState string

const (
	GetRollingReleaseCanaryDeploymentReadyStateBuilding     GetRollingReleaseCanaryDeploymentReadyState = "BUILDING"
	GetRollingReleaseCanaryDeploymentReadyStateError        GetRollingReleaseCanaryDeploymentReadyState = "ERROR"
	GetRollingReleaseCanaryDeploymentReadyStateInitializing GetRollingReleaseCanaryDeploymentReadyState = "INITIALIZING"
	GetRollingReleaseCanaryDeploymentReadyStateQueued       GetRollingReleaseCanaryDeploymentReadyState = "QUEUED"
	GetRollingReleaseCanaryDeploymentReadyStateReady        GetRollingReleaseCanaryDeploymentReadyState = "READY"
	GetRollingReleaseCanaryDeploymentReadyStateCanceled     GetRollingReleaseCanaryDeploymentReadyState = "CANCELED"
)

func (e GetRollingReleaseCanaryDeploymentReadyState) ToPointer() *GetRollingReleaseCanaryDeploymentReadyState {
	return &e
}
func (e *GetRollingReleaseCanaryDeploymentReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = GetRollingReleaseCanaryDeploymentReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetRollingReleaseCanaryDeploymentReadyState: %v", v)
	}
}

// GetRollingReleaseCanaryDeployment - The canary deployment being rolled out
type GetRollingReleaseCanaryDeployment struct {
	ID           string                                      `json:"id"`
	Name         string                                      `json:"name"`
	URL          string                                      `json:"url"`
	Target       *GetRollingReleaseCanaryDeploymentTarget    `json:"target,omitempty"`
	Source       *GetRollingReleaseCanaryDeploymentSource    `json:"source,omitempty"`
	CreatedAt    float64                                     `json:"createdAt"`
	ReadyState   GetRollingReleaseCanaryDeploymentReadyState `json:"readyState"`
	ReadyStateAt *float64                                    `json:"readyStateAt,omitempty"`
}

func (o *GetRollingReleaseCanaryDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetRollingReleaseCanaryDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetRollingReleaseCanaryDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetRollingReleaseCanaryDeployment) GetTarget() *GetRollingReleaseCanaryDeploymentTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetRollingReleaseCanaryDeployment) GetSource() *GetRollingReleaseCanaryDeploymentSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *GetRollingReleaseCanaryDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetRollingReleaseCanaryDeployment) GetReadyState() GetRollingReleaseCanaryDeploymentReadyState {
	if o == nil {
		return GetRollingReleaseCanaryDeploymentReadyState("")
	}
	return o.ReadyState
}

func (o *GetRollingReleaseCanaryDeployment) GetReadyStateAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyStateAt
}

// GetRollingReleaseStage - All stages configured for this rolling release
type GetRollingReleaseStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *GetRollingReleaseStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *GetRollingReleaseStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *GetRollingReleaseStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *GetRollingReleaseStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *GetRollingReleaseStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// GetRollingReleaseActiveStage - The currently active stage, null if the rollout is aborted
type GetRollingReleaseActiveStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *GetRollingReleaseActiveStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *GetRollingReleaseActiveStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *GetRollingReleaseActiveStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *GetRollingReleaseActiveStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *GetRollingReleaseActiveStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// GetRollingReleaseNextStage - The next stage to be activated, null if not in ACTIVE state
type GetRollingReleaseNextStage struct {
	// The zero-based index of the stage
	Index float64 `json:"index"`
	// Whether or not this stage is the final stage (targetPercentage === 100)
	IsFinalStage bool `json:"isFinalStage"`
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval bool `json:"requireApproval"`
	// Duration in seconds for automatic advancement, null for manual stages or the final stage
	Duration *float64 `json:"duration"`
}

func (o *GetRollingReleaseNextStage) GetIndex() float64 {
	if o == nil {
		return 0.0
	}
	return o.Index
}

func (o *GetRollingReleaseNextStage) GetIsFinalStage() bool {
	if o == nil {
		return false
	}
	return o.IsFinalStage
}

func (o *GetRollingReleaseNextStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *GetRollingReleaseNextStage) GetRequireApproval() bool {
	if o == nil {
		return false
	}
	return o.RequireApproval
}

func (o *GetRollingReleaseNextStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// GetRollingReleaseRollingRelease - Rolling release information including configuration and document details, or null if no rolling release exists
type GetRollingReleaseRollingRelease struct {
	// The current state of the rolling release
	State GetRollingReleaseStateResponseBody `json:"state"`
	// The current deployment receiving production traffic
	CurrentDeployment *GetRollingReleaseCurrentDeployment `json:"currentDeployment"`
	// The canary deployment being rolled out
	CanaryDeployment *GetRollingReleaseCanaryDeployment `json:"canaryDeployment"`
	// The ID of a deployment queued for the next rolling release
	QueuedDeploymentID *string `json:"queuedDeploymentId"`
	// All stages configured for this rolling release
	Stages []GetRollingReleaseStage `json:"stages"`
	// The currently active stage, null if the rollout is aborted
	ActiveStage *GetRollingReleaseActiveStage `json:"activeStage"`
	// The next stage to be activated, null if not in ACTIVE state
	NextStage *GetRollingReleaseNextStage `json:"nextStage"`
	// Unix timestamp in milliseconds when the rolling release started
	StartedAt float64 `json:"startedAt"`
	// Unix timestamp in milliseconds when the rolling release was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *GetRollingReleaseRollingRelease) GetState() GetRollingReleaseStateResponseBody {
	if o == nil {
		return GetRollingReleaseStateResponseBody("")
	}
	return o.State
}

func (o *GetRollingReleaseRollingRelease) GetCurrentDeployment() *GetRollingReleaseCurrentDeployment {
	if o == nil {
		return nil
	}
	return o.CurrentDeployment
}

func (o *GetRollingReleaseRollingRelease) GetCanaryDeployment() *GetRollingReleaseCanaryDeployment {
	if o == nil {
		return nil
	}
	return o.CanaryDeployment
}

func (o *GetRollingReleaseRollingRelease) GetQueuedDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.QueuedDeploymentID
}

func (o *GetRollingReleaseRollingRelease) GetStages() []GetRollingReleaseStage {
	if o == nil {
		return []GetRollingReleaseStage{}
	}
	return o.Stages
}

func (o *GetRollingReleaseRollingRelease) GetActiveStage() *GetRollingReleaseActiveStage {
	if o == nil {
		return nil
	}
	return o.ActiveStage
}

func (o *GetRollingReleaseRollingRelease) GetNextStage() *GetRollingReleaseNextStage {
	if o == nil {
		return nil
	}
	return o.NextStage
}

func (o *GetRollingReleaseRollingRelease) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *GetRollingReleaseRollingRelease) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

// GetRollingReleaseResponseBody - The response format for rolling release endpoints that return rolling release information
type GetRollingReleaseResponseBody struct {
	// Rolling release information including configuration and document details, or null if no rolling release exists
	RollingRelease *GetRollingReleaseRollingRelease `json:"rollingRelease"`
}

func (o *GetRollingReleaseResponseBody) GetRollingRelease() *GetRollingReleaseRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

type GetRollingReleaseResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetRollingReleaseResponseBody
}

func (o *GetRollingReleaseResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRollingReleaseResponse) GetObject() *GetRollingReleaseResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
