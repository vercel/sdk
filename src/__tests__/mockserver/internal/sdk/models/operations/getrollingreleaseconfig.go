// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type GetRollingReleaseConfigRequest struct {
	// Project ID or project name (URL-encoded)
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetRollingReleaseConfigRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetRollingReleaseConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetRollingReleaseConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetRollingReleaseConfigStage - An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
type GetRollingReleaseConfigStage struct {
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval *bool `json:"requireApproval,omitempty"`
	// Duration in minutes for automatic advancement to the next stage
	Duration *float64 `json:"duration,omitempty"`
}

func (o *GetRollingReleaseConfigStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *GetRollingReleaseConfigStage) GetRequireApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireApproval
}

func (o *GetRollingReleaseConfigStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// GetRollingReleaseConfigRollingRelease - Project-level rolling release configuration that defines how deployments should be gradually rolled out
type GetRollingReleaseConfigRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
	Stages []GetRollingReleaseConfigStage `json:"stages,omitempty"`
	// Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
	CanaryResponseHeader *bool `json:"canaryResponseHeader,omitempty"`
}

func (o *GetRollingReleaseConfigRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *GetRollingReleaseConfigRollingRelease) GetStages() []GetRollingReleaseConfigStage {
	if o == nil {
		return nil
	}
	return o.Stages
}

func (o *GetRollingReleaseConfigRollingRelease) GetCanaryResponseHeader() *bool {
	if o == nil {
		return nil
	}
	return o.CanaryResponseHeader
}

type GetRollingReleaseConfigResponseBody struct {
	// Project-level rolling release configuration that defines how deployments should be gradually rolled out
	RollingRelease *GetRollingReleaseConfigRollingRelease `json:"rollingRelease"`
}

func (o *GetRollingReleaseConfigResponseBody) GetRollingRelease() *GetRollingReleaseConfigRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

type GetRollingReleaseConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetRollingReleaseConfigResponseBody
}

func (o *GetRollingReleaseConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetRollingReleaseConfigResponse) GetObject() *GetRollingReleaseConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
