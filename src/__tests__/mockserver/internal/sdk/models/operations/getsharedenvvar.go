// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type GetSharedEnvVarRequest struct {
	// The unique ID for the Shared Environment Variable to get the decrypted value.
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetSharedEnvVarRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetSharedEnvVarRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetSharedEnvVarRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetSharedEnvVarType - The type of this cosmos doc instance, if blank, assume secret.
type GetSharedEnvVarType string

const (
	GetSharedEnvVarTypeEncrypted GetSharedEnvVarType = "encrypted"
	GetSharedEnvVarTypeSensitive GetSharedEnvVarType = "sensitive"
	GetSharedEnvVarTypeSystem    GetSharedEnvVarType = "system"
	GetSharedEnvVarTypePlain     GetSharedEnvVarType = "plain"
)

func (e GetSharedEnvVarType) ToPointer() *GetSharedEnvVarType {
	return &e
}
func (e *GetSharedEnvVarType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		fallthrough
	case "system":
		fallthrough
	case "plain":
		*e = GetSharedEnvVarType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSharedEnvVarType: %v", v)
	}
}

// GetSharedEnvVarTarget - environments this env variable targets
type GetSharedEnvVarTarget string

const (
	GetSharedEnvVarTargetProduction  GetSharedEnvVarTarget = "production"
	GetSharedEnvVarTargetPreview     GetSharedEnvVarTarget = "preview"
	GetSharedEnvVarTargetDevelopment GetSharedEnvVarTarget = "development"
)

func (e GetSharedEnvVarTarget) ToPointer() *GetSharedEnvVarTarget {
	return &e
}
func (e *GetSharedEnvVarTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetSharedEnvVarTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetSharedEnvVarTarget: %v", v)
	}
}

type GetSharedEnvVarResponseBody struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *GetSharedEnvVarType `json:"type,omitempty"`
	// environments this env variable targets
	Target []GetSharedEnvVarTarget `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string `json:"lastEditedByDisplayName,omitempty"`
}

func (g GetSharedEnvVarResponseBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetSharedEnvVarResponseBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *GetSharedEnvVarResponseBody) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *GetSharedEnvVarResponseBody) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *GetSharedEnvVarResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *GetSharedEnvVarResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetSharedEnvVarResponseBody) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *GetSharedEnvVarResponseBody) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *GetSharedEnvVarResponseBody) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *GetSharedEnvVarResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetSharedEnvVarResponseBody) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *GetSharedEnvVarResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetSharedEnvVarResponseBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *GetSharedEnvVarResponseBody) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetSharedEnvVarResponseBody) GetType() *GetSharedEnvVarType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *GetSharedEnvVarResponseBody) GetTarget() []GetSharedEnvVarTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *GetSharedEnvVarResponseBody) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *GetSharedEnvVarResponseBody) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *GetSharedEnvVarResponseBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *GetSharedEnvVarResponseBody) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

type GetSharedEnvVarResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetSharedEnvVarResponseBody
}

func (o *GetSharedEnvVarResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetSharedEnvVarResponse) GetObject() *GetSharedEnvVarResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
