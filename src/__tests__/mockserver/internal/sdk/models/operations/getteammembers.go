// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// QueryParamRole - Only return members with the specified team role.
type QueryParamRole string

const (
	QueryParamRoleOwner       QueryParamRole = "OWNER"
	QueryParamRoleMember      QueryParamRole = "MEMBER"
	QueryParamRoleDeveloper   QueryParamRole = "DEVELOPER"
	QueryParamRoleViewer      QueryParamRole = "VIEWER"
	QueryParamRoleBilling     QueryParamRole = "BILLING"
	QueryParamRoleContributor QueryParamRole = "CONTRIBUTOR"
)

func (e QueryParamRole) ToPointer() *QueryParamRole {
	return &e
}
func (e *QueryParamRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		*e = QueryParamRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryParamRole: %v", v)
	}
}

type GetTeamMembersRequest struct {
	// Limit how many teams should be returned
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp in milliseconds to only include members added since then.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp in milliseconds to only include members added until then.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
	// Search team members by their name, username, and email.
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Only return members with the specified team role.
	Role *QueryParamRole `queryParam:"style=form,explode=true,name=role"`
	// Exclude members who belong to the specified project.
	ExcludeProject *string `queryParam:"style=form,explode=true,name=excludeProject"`
	// Include team members who are eligible to be members of the specified project.
	EligibleMembersForProjectID *string `queryParam:"style=form,explode=true,name=eligibleMembersForProjectId"`
}

func (o *GetTeamMembersRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetTeamMembersRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetTeamMembersRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *GetTeamMembersRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *GetTeamMembersRequest) GetRole() *QueryParamRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *GetTeamMembersRequest) GetExcludeProject() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeProject
}

func (o *GetTeamMembersRequest) GetEligibleMembersForProjectID() *string {
	if o == nil {
		return nil
	}
	return o.EligibleMembersForProjectID
}

// GetTeamMembersGithub - Information about the GitHub account for this user.
type GetTeamMembersGithub struct {
	Login *string `json:"login,omitempty"`
}

func (o *GetTeamMembersGithub) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// GetTeamMembersGitlab - Information about the GitLab account of this user.
type GetTeamMembersGitlab struct {
	Login *string `json:"login,omitempty"`
}

func (o *GetTeamMembersGitlab) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// GetTeamMembersBitbucket - Information about the Bitbucket account of this user.
type GetTeamMembersBitbucket struct {
	Login *string `json:"login,omitempty"`
}

func (o *GetTeamMembersBitbucket) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// GetTeamMembersMemberRole - Role of this user in the team.
type GetTeamMembersMemberRole string

const (
	GetTeamMembersMemberRoleOwner       GetTeamMembersMemberRole = "OWNER"
	GetTeamMembersMemberRoleMember      GetTeamMembersMemberRole = "MEMBER"
	GetTeamMembersMemberRoleDeveloper   GetTeamMembersMemberRole = "DEVELOPER"
	GetTeamMembersMemberRoleViewer      GetTeamMembersMemberRole = "VIEWER"
	GetTeamMembersMemberRoleBilling     GetTeamMembersMemberRole = "BILLING"
	GetTeamMembersMemberRoleContributor GetTeamMembersMemberRole = "CONTRIBUTOR"
	GetTeamMembersMemberRoleSecurity    GetTeamMembersMemberRole = "SECURITY"
)

func (e GetTeamMembersMemberRole) ToPointer() *GetTeamMembersMemberRole {
	return &e
}
func (e *GetTeamMembersMemberRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		fallthrough
	case "SECURITY":
		*e = GetTeamMembersMemberRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembersMemberRole: %v", v)
	}
}

type GetTeamMembersOrigin string

const (
	GetTeamMembersOriginTeams             GetTeamMembersOrigin = "teams"
	GetTeamMembersOriginLink              GetTeamMembersOrigin = "link"
	GetTeamMembersOriginSaml              GetTeamMembersOrigin = "saml"
	GetTeamMembersOriginGithub            GetTeamMembersOrigin = "github"
	GetTeamMembersOriginGitlab            GetTeamMembersOrigin = "gitlab"
	GetTeamMembersOriginBitbucket         GetTeamMembersOrigin = "bitbucket"
	GetTeamMembersOriginMail              GetTeamMembersOrigin = "mail"
	GetTeamMembersOriginImport            GetTeamMembersOrigin = "import"
	GetTeamMembersOriginDsync             GetTeamMembersOrigin = "dsync"
	GetTeamMembersOriginFeedback          GetTeamMembersOrigin = "feedback"
	GetTeamMembersOriginOrganizationTeams GetTeamMembersOrigin = "organization-teams"
)

func (e GetTeamMembersOrigin) ToPointer() *GetTeamMembersOrigin {
	return &e
}
func (e *GetTeamMembersOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "teams":
		fallthrough
	case "link":
		fallthrough
	case "saml":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "mail":
		fallthrough
	case "import":
		fallthrough
	case "dsync":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = GetTeamMembersOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetTeamMembersOrigin: %v", v)
	}
}

type GetTeamMembersGitUserIDType string

const (
	GetTeamMembersGitUserIDTypeStr    GetTeamMembersGitUserIDType = "str"
	GetTeamMembersGitUserIDTypeNumber GetTeamMembersGitUserIDType = "number"
)

type GetTeamMembersGitUserID struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GetTeamMembersGitUserIDType
}

func CreateGetTeamMembersGitUserIDStr(str string) GetTeamMembersGitUserID {
	typ := GetTeamMembersGitUserIDTypeStr

	return GetTeamMembersGitUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGetTeamMembersGitUserIDNumber(number float64) GetTeamMembersGitUserID {
	typ := GetTeamMembersGitUserIDTypeNumber

	return GetTeamMembersGitUserID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GetTeamMembersGitUserID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GetTeamMembersGitUserIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GetTeamMembersGitUserIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTeamMembersGitUserID", string(data))
}

func (u GetTeamMembersGitUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GetTeamMembersGitUserID: all fields are null")
}

// GetTeamMembersJoinedFrom - Map with information about the members origin if they joined by requesting access.
type GetTeamMembersJoinedFrom struct {
	Origin           GetTeamMembersOrigin     `json:"origin"`
	CommitID         *string                  `json:"commitId,omitempty"`
	RepoID           *string                  `json:"repoId,omitempty"`
	RepoPath         *string                  `json:"repoPath,omitempty"`
	GitUserID        *GetTeamMembersGitUserID `json:"gitUserId,omitempty"`
	GitUserLogin     *string                  `json:"gitUserLogin,omitempty"`
	SsoUserID        *string                  `json:"ssoUserId,omitempty"`
	SsoConnectedAt   *float64                 `json:"ssoConnectedAt,omitempty"`
	IdpUserID        *string                  `json:"idpUserId,omitempty"`
	DsyncUserID      *string                  `json:"dsyncUserId,omitempty"`
	DsyncConnectedAt *float64                 `json:"dsyncConnectedAt,omitempty"`
}

func (o *GetTeamMembersJoinedFrom) GetOrigin() GetTeamMembersOrigin {
	if o == nil {
		return GetTeamMembersOrigin("")
	}
	return o.Origin
}

func (o *GetTeamMembersJoinedFrom) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *GetTeamMembersJoinedFrom) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *GetTeamMembersJoinedFrom) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *GetTeamMembersJoinedFrom) GetGitUserID() *GetTeamMembersGitUserID {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *GetTeamMembersJoinedFrom) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

func (o *GetTeamMembersJoinedFrom) GetSsoUserID() *string {
	if o == nil {
		return nil
	}
	return o.SsoUserID
}

func (o *GetTeamMembersJoinedFrom) GetSsoConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SsoConnectedAt
}

func (o *GetTeamMembersJoinedFrom) GetIdpUserID() *string {
	if o == nil {
		return nil
	}
	return o.IdpUserID
}

func (o *GetTeamMembersJoinedFrom) GetDsyncUserID() *string {
	if o == nil {
		return nil
	}
	return o.DsyncUserID
}

func (o *GetTeamMembersJoinedFrom) GetDsyncConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DsyncConnectedAt
}

type MemberProjectRole string

const (
	MemberProjectRoleAdmin            MemberProjectRole = "ADMIN"
	MemberProjectRoleProjectDeveloper MemberProjectRole = "PROJECT_DEVELOPER"
	MemberProjectRoleProjectViewer    MemberProjectRole = "PROJECT_VIEWER"
)

func (e MemberProjectRole) ToPointer() *MemberProjectRole {
	return &e
}
func (e *MemberProjectRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = MemberProjectRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MemberProjectRole: %v", v)
	}
}

// GetTeamMembersProject - Array of project memberships
type GetTeamMembersProject struct {
	Name *string            `json:"name,omitempty"`
	ID   *string            `json:"id,omitempty"`
	Role *MemberProjectRole `json:"role,omitempty"`
}

func (o *GetTeamMembersProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetTeamMembersProject) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *GetTeamMembersProject) GetRole() *MemberProjectRole {
	if o == nil {
		return nil
	}
	return o.Role
}

type GetTeamMembersMember struct {
	// ID of the file for the Avatar of this member.
	Avatar *string `json:"avatar,omitempty"`
	// Boolean that indicates if this member was confirmed by an owner.
	Confirmed bool `json:"confirmed"`
	// The email of this member.
	Email string `json:"email"`
	// Information about the GitHub account for this user.
	Github *GetTeamMembersGithub `json:"github,omitempty"`
	// Information about the GitLab account of this user.
	Gitlab *GetTeamMembersGitlab `json:"gitlab,omitempty"`
	// Information about the Bitbucket account of this user.
	Bitbucket *GetTeamMembersBitbucket `json:"bitbucket,omitempty"`
	// Role of this user in the team.
	Role GetTeamMembersMemberRole `json:"role"`
	// The ID of this user.
	UID string `json:"uid"`
	// The unique username of this user.
	Username string `json:"username"`
	// The name of this user.
	Name *string `json:"name,omitempty"`
	// Timestamp in milliseconds when this member was added.
	CreatedAt float64 `json:"createdAt"`
	// Timestamp in milliseconds for when this team member was accepted by an owner.
	AccessRequestedAt *float64 `json:"accessRequestedAt,omitempty"`
	// Map with information about the members origin if they joined by requesting access.
	JoinedFrom *GetTeamMembersJoinedFrom `json:"joinedFrom,omitempty"`
	// Array of project memberships
	Projects []GetTeamMembersProject `json:"projects,omitempty"`
}

func (o *GetTeamMembersMember) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *GetTeamMembersMember) GetConfirmed() bool {
	if o == nil {
		return false
	}
	return o.Confirmed
}

func (o *GetTeamMembersMember) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *GetTeamMembersMember) GetGithub() *GetTeamMembersGithub {
	if o == nil {
		return nil
	}
	return o.Github
}

func (o *GetTeamMembersMember) GetGitlab() *GetTeamMembersGitlab {
	if o == nil {
		return nil
	}
	return o.Gitlab
}

func (o *GetTeamMembersMember) GetBitbucket() *GetTeamMembersBitbucket {
	if o == nil {
		return nil
	}
	return o.Bitbucket
}

func (o *GetTeamMembersMember) GetRole() GetTeamMembersMemberRole {
	if o == nil {
		return GetTeamMembersMemberRole("")
	}
	return o.Role
}

func (o *GetTeamMembersMember) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *GetTeamMembersMember) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *GetTeamMembersMember) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GetTeamMembersMember) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetTeamMembersMember) GetAccessRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessRequestedAt
}

func (o *GetTeamMembersMember) GetJoinedFrom() *GetTeamMembersJoinedFrom {
	if o == nil {
		return nil
	}
	return o.JoinedFrom
}

func (o *GetTeamMembersMember) GetProjects() []GetTeamMembersProject {
	if o == nil {
		return nil
	}
	return o.Projects
}

type EmailInviteCodeRole string

const (
	EmailInviteCodeRoleOwner       EmailInviteCodeRole = "OWNER"
	EmailInviteCodeRoleMember      EmailInviteCodeRole = "MEMBER"
	EmailInviteCodeRoleDeveloper   EmailInviteCodeRole = "DEVELOPER"
	EmailInviteCodeRoleViewer      EmailInviteCodeRole = "VIEWER"
	EmailInviteCodeRoleBilling     EmailInviteCodeRole = "BILLING"
	EmailInviteCodeRoleContributor EmailInviteCodeRole = "CONTRIBUTOR"
	EmailInviteCodeRoleSecurity    EmailInviteCodeRole = "SECURITY"
)

func (e EmailInviteCodeRole) ToPointer() *EmailInviteCodeRole {
	return &e
}
func (e *EmailInviteCodeRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "VIEWER":
		fallthrough
	case "BILLING":
		fallthrough
	case "CONTRIBUTOR":
		fallthrough
	case "SECURITY":
		*e = EmailInviteCodeRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for EmailInviteCodeRole: %v", v)
	}
}

type Projects string

const (
	ProjectsAdmin            Projects = "ADMIN"
	ProjectsProjectDeveloper Projects = "PROJECT_DEVELOPER"
	ProjectsProjectViewer    Projects = "PROJECT_VIEWER"
)

func (e Projects) ToPointer() *Projects {
	return &e
}
func (e *Projects) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = Projects(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Projects: %v", v)
	}
}

type EmailInviteCode struct {
	AccessGroups []string             `json:"accessGroups,omitempty"`
	ID           string               `json:"id"`
	Email        *string              `json:"email,omitempty"`
	Role         *EmailInviteCodeRole `json:"role,omitempty"`
	IsDSyncUser  bool                 `json:"isDSyncUser"`
	CreatedAt    *float64             `json:"createdAt,omitempty"`
	Expired      *bool                `json:"expired,omitempty"`
	Projects     map[string]Projects  `json:"projects,omitempty"`
	Entitlements []string             `json:"entitlements,omitempty"`
}

func (o *EmailInviteCode) GetAccessGroups() []string {
	if o == nil {
		return nil
	}
	return o.AccessGroups
}

func (o *EmailInviteCode) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *EmailInviteCode) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *EmailInviteCode) GetRole() *EmailInviteCodeRole {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *EmailInviteCode) GetIsDSyncUser() bool {
	if o == nil {
		return false
	}
	return o.IsDSyncUser
}

func (o *EmailInviteCode) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *EmailInviteCode) GetExpired() *bool {
	if o == nil {
		return nil
	}
	return o.Expired
}

func (o *EmailInviteCode) GetProjects() map[string]Projects {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *EmailInviteCode) GetEntitlements() []string {
	if o == nil {
		return nil
	}
	return o.Entitlements
}

type GetTeamMembersPagination struct {
	HasNext bool `json:"hasNext"`
	// Amount of items in the current page.
	Count float64 `json:"count"`
	// Timestamp that must be used to request the next page.
	Next *float64 `json:"next"`
	// Timestamp that must be used to request the previous page.
	Prev *float64 `json:"prev"`
}

func (o *GetTeamMembersPagination) GetHasNext() bool {
	if o == nil {
		return false
	}
	return o.HasNext
}

func (o *GetTeamMembersPagination) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *GetTeamMembersPagination) GetNext() *float64 {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *GetTeamMembersPagination) GetPrev() *float64 {
	if o == nil {
		return nil
	}
	return o.Prev
}

type GetTeamMembersResponseBody struct {
	Members          []GetTeamMembersMember   `json:"members"`
	EmailInviteCodes []EmailInviteCode        `json:"emailInviteCodes,omitempty"`
	Pagination       GetTeamMembersPagination `json:"pagination"`
}

func (o *GetTeamMembersResponseBody) GetMembers() []GetTeamMembersMember {
	if o == nil {
		return []GetTeamMembersMember{}
	}
	return o.Members
}

func (o *GetTeamMembersResponseBody) GetEmailInviteCodes() []EmailInviteCode {
	if o == nil {
		return nil
	}
	return o.EmailInviteCodes
}

func (o *GetTeamMembersResponseBody) GetPagination() GetTeamMembersPagination {
	if o == nil {
		return GetTeamMembersPagination{}
	}
	return o.Pagination
}

type GetTeamMembersResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetTeamMembersResponseBody
}

func (o *GetTeamMembersResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTeamMembersResponse) GetObject() *GetTeamMembersResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
