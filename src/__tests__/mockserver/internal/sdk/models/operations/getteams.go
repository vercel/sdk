// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetTeamsRequest struct {
	// Maximum number of Teams which may be returned.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp (in milliseconds) to only include Teams created since then.
	Since *float64 `queryParam:"style=form,explode=true,name=since"`
	// Timestamp (in milliseconds) to only include Teams created until then.
	Until *float64 `queryParam:"style=form,explode=true,name=until"`
}

func (o *GetTeamsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *GetTeamsRequest) GetSince() *float64 {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *GetTeamsRequest) GetUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.Until
}

type GetTeamsTeamType string

const (
	GetTeamsTeamTypeTeam        GetTeamsTeamType = "Team"
	GetTeamsTeamTypeTeamLimited GetTeamsTeamType = "TeamLimited"
)

type GetTeamsTeam struct {
	Team        *components.Team        `queryParam:"inline"`
	TeamLimited *components.TeamLimited `queryParam:"inline"`

	Type GetTeamsTeamType
}

func CreateGetTeamsTeamTeam(team components.Team) GetTeamsTeam {
	typ := GetTeamsTeamTypeTeam

	return GetTeamsTeam{
		Team: &team,
		Type: typ,
	}
}

func CreateGetTeamsTeamTeamLimited(teamLimited components.TeamLimited) GetTeamsTeam {
	typ := GetTeamsTeamTypeTeamLimited

	return GetTeamsTeam{
		TeamLimited: &teamLimited,
		Type:        typ,
	}
}

func (u *GetTeamsTeam) UnmarshalJSON(data []byte) error {

	var teamLimited components.TeamLimited = components.TeamLimited{}
	if err := utils.UnmarshalJSON(data, &teamLimited, "", true, true); err == nil {
		u.TeamLimited = &teamLimited
		u.Type = GetTeamsTeamTypeTeamLimited
		return nil
	}

	var team components.Team = components.Team{}
	if err := utils.UnmarshalJSON(data, &team, "", true, true); err == nil {
		u.Team = &team
		u.Type = GetTeamsTeamTypeTeam
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTeamsTeam", string(data))
}

func (u GetTeamsTeam) MarshalJSON() ([]byte, error) {
	if u.Team != nil {
		return utils.MarshalJSON(u.Team, "", true)
	}

	if u.TeamLimited != nil {
		return utils.MarshalJSON(u.TeamLimited, "", true)
	}

	return nil, errors.New("could not marshal union type GetTeamsTeam: all fields are null")
}

// GetTeamsResponseBody - A paginated list of teams.
type GetTeamsResponseBody struct {
	Teams []GetTeamsTeam `json:"teams"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *GetTeamsResponseBody) GetTeams() []GetTeamsTeam {
	if o == nil {
		return []GetTeamsTeam{}
	}
	return o.Teams
}

func (o *GetTeamsResponseBody) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type GetTeamsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// A paginated list of teams.
	Object *GetTeamsResponseBody
}

func (o *GetTeamsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetTeamsResponse) GetObject() *GetTeamsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
