// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetV9ProjectsIDOrNameCustomEnvironmentsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Fetch custom environments for a specific git branch
	GitBranch *string `queryParam:"style=form,explode=true,name=gitBranch"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsRequest) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// AccountLimit - The maximum number of custom environments allowed either by the team's plan type or a custom override.
type AccountLimit struct {
	Total float64 `json:"total"`
}

func (o *AccountLimit) GetTotal() float64 {
	if o == nil {
		return 0.0
	}
	return o.Total
}

// GetV9ProjectsIDOrNameCustomEnvironmentsType - The type of environment (production, preview, or development)
type GetV9ProjectsIDOrNameCustomEnvironmentsType string

const (
	GetV9ProjectsIDOrNameCustomEnvironmentsTypeProduction  GetV9ProjectsIDOrNameCustomEnvironmentsType = "production"
	GetV9ProjectsIDOrNameCustomEnvironmentsTypePreview     GetV9ProjectsIDOrNameCustomEnvironmentsType = "preview"
	GetV9ProjectsIDOrNameCustomEnvironmentsTypeDevelopment GetV9ProjectsIDOrNameCustomEnvironmentsType = "development"
)

func (e GetV9ProjectsIDOrNameCustomEnvironmentsType) ToPointer() *GetV9ProjectsIDOrNameCustomEnvironmentsType {
	return &e
}
func (e *GetV9ProjectsIDOrNameCustomEnvironmentsType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = GetV9ProjectsIDOrNameCustomEnvironmentsType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetV9ProjectsIDOrNameCustomEnvironmentsType: %v", v)
	}
}

// GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType - The type of matching to perform
type GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType string

const (
	GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherTypeEndsWith   GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType = "endsWith"
	GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherTypeStartsWith GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType = "startsWith"
	GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherTypeEquals     GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType = "equals"
)

func (e GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType) ToPointer() *GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType {
	return &e
}
func (e *GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType: %v", v)
	}
}

// GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcher - Configuration for matching git branches to this environment
type GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcher struct {
	// The type of matching to perform
	Type GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcher) GetType() GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType {
	if o == nil {
		return GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcherType("")
	}
	return o.Type
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// GetV9ProjectsIDOrNameCustomEnvironmentsVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type GetV9ProjectsIDOrNameCustomEnvironmentsVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// GetV9ProjectsIDOrNameCustomEnvironmentsDomain - List of domains associated with this environment
type GetV9ProjectsIDOrNameCustomEnvironmentsDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []GetV9ProjectsIDOrNameCustomEnvironmentsVerification `json:"verification,omitempty"`
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsDomain) GetVerification() []GetV9ProjectsIDOrNameCustomEnvironmentsVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

type GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type GetV9ProjectsIDOrNameCustomEnvironmentsType `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcher `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []GetV9ProjectsIDOrNameCustomEnvironmentsDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetType() GetV9ProjectsIDOrNameCustomEnvironmentsType {
	if o == nil {
		return GetV9ProjectsIDOrNameCustomEnvironmentsType("")
	}
	return o.Type
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetBranchMatcher() *GetV9ProjectsIDOrNameCustomEnvironmentsBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetDomains() []GetV9ProjectsIDOrNameCustomEnvironmentsDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type GetV9ProjectsIDOrNameCustomEnvironmentsResponseBody struct {
	// The maximum number of custom environments allowed either by the team's plan type or a custom override.
	AccountLimit AccountLimit                                         `json:"accountLimit"`
	Environments []GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment `json:"environments"`
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsResponseBody) GetAccountLimit() AccountLimit {
	if o == nil {
		return AccountLimit{}
	}
	return o.AccountLimit
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsResponseBody) GetEnvironments() []GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment {
	if o == nil {
		return []GetV9ProjectsIDOrNameCustomEnvironmentsEnvironment{}
	}
	return o.Environments
}

type GetV9ProjectsIDOrNameCustomEnvironmentsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetV9ProjectsIDOrNameCustomEnvironmentsResponseBody
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetV9ProjectsIDOrNameCustomEnvironmentsResponse) GetObject() *GetV9ProjectsIDOrNameCustomEnvironmentsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
