// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type GetWebhookRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetWebhookRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetWebhookRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetWebhookEvent - The webhooks events
type GetWebhookEvent string

const (
	GetWebhookEventBudgetReached                                      GetWebhookEvent = "budget.reached"
	GetWebhookEventBudgetReset                                        GetWebhookEvent = "budget.reset"
	GetWebhookEventDomainCreated                                      GetWebhookEvent = "domain.created"
	GetWebhookEventDomainDnsRecordsChanged                            GetWebhookEvent = "domain.dns.records.changed"
	GetWebhookEventDomainTransferInStarted                            GetWebhookEvent = "domain.transfer-in.started"
	GetWebhookEventDomainTransferInCompleted                          GetWebhookEvent = "domain.transfer-in.completed"
	GetWebhookEventDomainTransferInFailed                             GetWebhookEvent = "domain.transfer-in.failed"
	GetWebhookEventDomainCertificateAdd                               GetWebhookEvent = "domain.certificate.add"
	GetWebhookEventDomainCertificateAddFailed                         GetWebhookEvent = "domain.certificate.add.failed"
	GetWebhookEventDomainCertificateRenew                             GetWebhookEvent = "domain.certificate.renew"
	GetWebhookEventDomainCertificateRenewFailed                       GetWebhookEvent = "domain.certificate.renew.failed"
	GetWebhookEventDomainCertificateDeleted                           GetWebhookEvent = "domain.certificate.deleted"
	GetWebhookEventDomainRenewal                                      GetWebhookEvent = "domain.renewal"
	GetWebhookEventDomainRenewalFailed                                GetWebhookEvent = "domain.renewal.failed"
	GetWebhookEventDomainAutoRenewChanged                             GetWebhookEvent = "domain.auto-renew.changed"
	GetWebhookEventDeploymentCreated                                  GetWebhookEvent = "deployment.created"
	GetWebhookEventDeploymentError                                    GetWebhookEvent = "deployment.error"
	GetWebhookEventDeploymentCanceled                                 GetWebhookEvent = "deployment.canceled"
	GetWebhookEventDeploymentSucceeded                                GetWebhookEvent = "deployment.succeeded"
	GetWebhookEventDeploymentReady                                    GetWebhookEvent = "deployment.ready"
	GetWebhookEventDeploymentCheckRerequested                         GetWebhookEvent = "deployment.check-rerequested"
	GetWebhookEventDeploymentPromoted                                 GetWebhookEvent = "deployment.promoted"
	GetWebhookEventDeploymentIntegrationActionStart                   GetWebhookEvent = "deployment.integration.action.start"
	GetWebhookEventDeploymentIntegrationActionCancel                  GetWebhookEvent = "deployment.integration.action.cancel"
	GetWebhookEventDeploymentIntegrationActionCleanup                 GetWebhookEvent = "deployment.integration.action.cleanup"
	GetWebhookEventEdgeConfigCreated                                  GetWebhookEvent = "edge-config.created"
	GetWebhookEventEdgeConfigDeleted                                  GetWebhookEvent = "edge-config.deleted"
	GetWebhookEventEdgeConfigItemsUpdated                             GetWebhookEvent = "edge-config.items.updated"
	GetWebhookEventFirewallAttack                                     GetWebhookEvent = "firewall.attack"
	GetWebhookEventIntegrationConfigurationPermissionUpgraded         GetWebhookEvent = "integration-configuration.permission-upgraded"
	GetWebhookEventIntegrationConfigurationRemoved                    GetWebhookEvent = "integration-configuration.removed"
	GetWebhookEventIntegrationConfigurationScopeChangeConfirmed       GetWebhookEvent = "integration-configuration.scope-change-confirmed"
	GetWebhookEventIntegrationResourceProjectConnected                GetWebhookEvent = "integration-resource.project-connected"
	GetWebhookEventIntegrationResourceProjectDisconnected             GetWebhookEvent = "integration-resource.project-disconnected"
	GetWebhookEventProjectCreated                                     GetWebhookEvent = "project.created"
	GetWebhookEventProjectRemoved                                     GetWebhookEvent = "project.removed"
	GetWebhookEventProjectDomainCreated                               GetWebhookEvent = "project.domain.created"
	GetWebhookEventProjectDomainUpdated                               GetWebhookEvent = "project.domain.updated"
	GetWebhookEventProjectDomainDeleted                               GetWebhookEvent = "project.domain.deleted"
	GetWebhookEventProjectDomainVerified                              GetWebhookEvent = "project.domain.verified"
	GetWebhookEventProjectDomainUnverified                            GetWebhookEvent = "project.domain.unverified"
	GetWebhookEventProjectDomainMoved                                 GetWebhookEvent = "project.domain.moved"
	GetWebhookEventProjectRollingReleaseStarted                       GetWebhookEvent = "project.rolling-release.started"
	GetWebhookEventProjectRollingReleaseAborted                       GetWebhookEvent = "project.rolling-release.aborted"
	GetWebhookEventProjectRollingReleaseCompleted                     GetWebhookEvent = "project.rolling-release.completed"
	GetWebhookEventProjectRollingReleaseApproved                      GetWebhookEvent = "project.rolling-release.approved"
	GetWebhookEventDeploymentChecksCompleted                          GetWebhookEvent = "deployment-checks-completed"
	GetWebhookEventDeploymentReadyLegacy                              GetWebhookEvent = "deployment-ready"
	GetWebhookEventDeploymentPrepared                                 GetWebhookEvent = "deployment-prepared"
	GetWebhookEventDeploymentErrorLegacy                              GetWebhookEvent = "deployment-error"
	GetWebhookEventDeploymentCheckRerequestedLegacy                   GetWebhookEvent = "deployment-check-rerequested"
	GetWebhookEventDeploymentCanceledLegacy                           GetWebhookEvent = "deployment-canceled"
	GetWebhookEventProjectCreatedLegacy                               GetWebhookEvent = "project-created"
	GetWebhookEventProjectRemovedLegacy                               GetWebhookEvent = "project-removed"
	GetWebhookEventDomainCreatedLegacy                                GetWebhookEvent = "domain-created"
	GetWebhookEventDeployment                                         GetWebhookEvent = "deployment"
	GetWebhookEventIntegrationConfigurationPermissionUpdated          GetWebhookEvent = "integration-configuration-permission-updated"
	GetWebhookEventIntegrationConfigurationRemovedLegacy              GetWebhookEvent = "integration-configuration-removed"
	GetWebhookEventIntegrationConfigurationScopeChangeConfirmedLegacy GetWebhookEvent = "integration-configuration-scope-change-confirmed"
	GetWebhookEventMarketplaceInvoiceCreated                          GetWebhookEvent = "marketplace.invoice.created"
	GetWebhookEventMarketplaceInvoicePaid                             GetWebhookEvent = "marketplace.invoice.paid"
	GetWebhookEventMarketplaceInvoiceNotpaid                          GetWebhookEvent = "marketplace.invoice.notpaid"
	GetWebhookEventMarketplaceInvoiceRefunded                         GetWebhookEvent = "marketplace.invoice.refunded"
	GetWebhookEventObservabilityAnomaly                               GetWebhookEvent = "observability.anomaly"
	GetWebhookEventTestWebhook                                        GetWebhookEvent = "test-webhook"
)

func (e GetWebhookEvent) ToPointer() *GetWebhookEvent {
	return &e
}
func (e *GetWebhookEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "domain.dns.records.changed":
		fallthrough
	case "domain.transfer-in.started":
		fallthrough
	case "domain.transfer-in.completed":
		fallthrough
	case "domain.transfer-in.failed":
		fallthrough
	case "domain.certificate.add":
		fallthrough
	case "domain.certificate.add.failed":
		fallthrough
	case "domain.certificate.renew":
		fallthrough
	case "domain.certificate.renew.failed":
		fallthrough
	case "domain.certificate.deleted":
		fallthrough
	case "domain.renewal":
		fallthrough
	case "domain.renewal.failed":
		fallthrough
	case "domain.auto-renew.changed":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "project.domain.created":
		fallthrough
	case "project.domain.updated":
		fallthrough
	case "project.domain.deleted":
		fallthrough
	case "project.domain.verified":
		fallthrough
	case "project.domain.unverified":
		fallthrough
	case "project.domain.moved":
		fallthrough
	case "project.rolling-release.started":
		fallthrough
	case "project.rolling-release.aborted":
		fallthrough
	case "project.rolling-release.completed":
		fallthrough
	case "project.rolling-release.approved":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = GetWebhookEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhookEvent: %v", v)
	}
}

type GetWebhookResponseBody struct {
	// The webhooks events
	Events []GetWebhookEvent `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhookResponseBody) GetEvents() []GetWebhookEvent {
	if o == nil {
		return []GetWebhookEvent{}
	}
	return o.Events
}

func (o *GetWebhookResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhookResponseBody) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhookResponseBody) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhookResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhookResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhookResponseBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhookResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *GetWebhookResponseBody
}

func (o *GetWebhookResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWebhookResponse) GetObject() *GetWebhookResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
