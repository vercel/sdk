// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetWebhooksRequest struct {
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *GetWebhooksRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *GetWebhooksRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *GetWebhooksRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// GetWebhooksEvent2 - The webhooks events
type GetWebhooksEvent2 string

const (
	GetWebhooksEvent2BudgetReached                                      GetWebhooksEvent2 = "budget.reached"
	GetWebhooksEvent2BudgetReset                                        GetWebhooksEvent2 = "budget.reset"
	GetWebhooksEvent2DomainCreated                                      GetWebhooksEvent2 = "domain.created"
	GetWebhooksEvent2DomainDnsRecordsChanged                            GetWebhooksEvent2 = "domain.dns.records.changed"
	GetWebhooksEvent2DomainTransferInStarted                            GetWebhooksEvent2 = "domain.transfer-in.started"
	GetWebhooksEvent2DomainTransferInCompleted                          GetWebhooksEvent2 = "domain.transfer-in.completed"
	GetWebhooksEvent2DomainTransferInFailed                             GetWebhooksEvent2 = "domain.transfer-in.failed"
	GetWebhooksEvent2DomainCertificateAdd                               GetWebhooksEvent2 = "domain.certificate.add"
	GetWebhooksEvent2DomainCertificateAddFailed                         GetWebhooksEvent2 = "domain.certificate.add.failed"
	GetWebhooksEvent2DomainCertificateRenew                             GetWebhooksEvent2 = "domain.certificate.renew"
	GetWebhooksEvent2DomainCertificateRenewFailed                       GetWebhooksEvent2 = "domain.certificate.renew.failed"
	GetWebhooksEvent2DomainCertificateDeleted                           GetWebhooksEvent2 = "domain.certificate.deleted"
	GetWebhooksEvent2DomainRenewal                                      GetWebhooksEvent2 = "domain.renewal"
	GetWebhooksEvent2DomainRenewalFailed                                GetWebhooksEvent2 = "domain.renewal.failed"
	GetWebhooksEvent2DomainAutoRenewChanged                             GetWebhooksEvent2 = "domain.auto-renew.changed"
	GetWebhooksEvent2DeploymentCreated                                  GetWebhooksEvent2 = "deployment.created"
	GetWebhooksEvent2DeploymentError                                    GetWebhooksEvent2 = "deployment.error"
	GetWebhooksEvent2DeploymentCanceled                                 GetWebhooksEvent2 = "deployment.canceled"
	GetWebhooksEvent2DeploymentSucceeded                                GetWebhooksEvent2 = "deployment.succeeded"
	GetWebhooksEvent2DeploymentReady                                    GetWebhooksEvent2 = "deployment.ready"
	GetWebhooksEvent2DeploymentCheckRerequested                         GetWebhooksEvent2 = "deployment.check-rerequested"
	GetWebhooksEvent2DeploymentPromoted                                 GetWebhooksEvent2 = "deployment.promoted"
	GetWebhooksEvent2DeploymentIntegrationActionStart                   GetWebhooksEvent2 = "deployment.integration.action.start"
	GetWebhooksEvent2DeploymentIntegrationActionCancel                  GetWebhooksEvent2 = "deployment.integration.action.cancel"
	GetWebhooksEvent2DeploymentIntegrationActionCleanup                 GetWebhooksEvent2 = "deployment.integration.action.cleanup"
	GetWebhooksEvent2EdgeConfigCreated                                  GetWebhooksEvent2 = "edge-config.created"
	GetWebhooksEvent2EdgeConfigDeleted                                  GetWebhooksEvent2 = "edge-config.deleted"
	GetWebhooksEvent2EdgeConfigItemsUpdated                             GetWebhooksEvent2 = "edge-config.items.updated"
	GetWebhooksEvent2FirewallAttack                                     GetWebhooksEvent2 = "firewall.attack"
	GetWebhooksEvent2IntegrationConfigurationPermissionUpgraded         GetWebhooksEvent2 = "integration-configuration.permission-upgraded"
	GetWebhooksEvent2IntegrationConfigurationRemoved                    GetWebhooksEvent2 = "integration-configuration.removed"
	GetWebhooksEvent2IntegrationConfigurationScopeChangeConfirmed       GetWebhooksEvent2 = "integration-configuration.scope-change-confirmed"
	GetWebhooksEvent2IntegrationResourceProjectConnected                GetWebhooksEvent2 = "integration-resource.project-connected"
	GetWebhooksEvent2IntegrationResourceProjectDisconnected             GetWebhooksEvent2 = "integration-resource.project-disconnected"
	GetWebhooksEvent2ProjectCreated                                     GetWebhooksEvent2 = "project.created"
	GetWebhooksEvent2ProjectRemoved                                     GetWebhooksEvent2 = "project.removed"
	GetWebhooksEvent2ProjectDomainCreated                               GetWebhooksEvent2 = "project.domain.created"
	GetWebhooksEvent2ProjectDomainUpdated                               GetWebhooksEvent2 = "project.domain.updated"
	GetWebhooksEvent2ProjectDomainDeleted                               GetWebhooksEvent2 = "project.domain.deleted"
	GetWebhooksEvent2ProjectDomainVerified                              GetWebhooksEvent2 = "project.domain.verified"
	GetWebhooksEvent2ProjectDomainUnverified                            GetWebhooksEvent2 = "project.domain.unverified"
	GetWebhooksEvent2ProjectDomainMoved                                 GetWebhooksEvent2 = "project.domain.moved"
	GetWebhooksEvent2ProjectRollingReleaseStarted                       GetWebhooksEvent2 = "project.rolling-release.started"
	GetWebhooksEvent2ProjectRollingReleaseAborted                       GetWebhooksEvent2 = "project.rolling-release.aborted"
	GetWebhooksEvent2ProjectRollingReleaseCompleted                     GetWebhooksEvent2 = "project.rolling-release.completed"
	GetWebhooksEvent2ProjectRollingReleaseApproved                      GetWebhooksEvent2 = "project.rolling-release.approved"
	GetWebhooksEvent2DeploymentChecksCompleted                          GetWebhooksEvent2 = "deployment-checks-completed"
	GetWebhooksEvent2DeploymentReadyLegacy                              GetWebhooksEvent2 = "deployment-ready"
	GetWebhooksEvent2DeploymentPrepared                                 GetWebhooksEvent2 = "deployment-prepared"
	GetWebhooksEvent2DeploymentErrorLegacy                              GetWebhooksEvent2 = "deployment-error"
	GetWebhooksEvent2DeploymentCheckRerequestedLegacy                   GetWebhooksEvent2 = "deployment-check-rerequested"
	GetWebhooksEvent2DeploymentCanceledLegacy                           GetWebhooksEvent2 = "deployment-canceled"
	GetWebhooksEvent2ProjectCreatedLegacy                               GetWebhooksEvent2 = "project-created"
	GetWebhooksEvent2ProjectRemovedLegacy                               GetWebhooksEvent2 = "project-removed"
	GetWebhooksEvent2DomainCreatedLegacy                                GetWebhooksEvent2 = "domain-created"
	GetWebhooksEvent2Deployment                                         GetWebhooksEvent2 = "deployment"
	GetWebhooksEvent2IntegrationConfigurationPermissionUpdated          GetWebhooksEvent2 = "integration-configuration-permission-updated"
	GetWebhooksEvent2IntegrationConfigurationRemovedLegacy              GetWebhooksEvent2 = "integration-configuration-removed"
	GetWebhooksEvent2IntegrationConfigurationScopeChangeConfirmedLegacy GetWebhooksEvent2 = "integration-configuration-scope-change-confirmed"
	GetWebhooksEvent2MarketplaceInvoiceCreated                          GetWebhooksEvent2 = "marketplace.invoice.created"
	GetWebhooksEvent2MarketplaceInvoicePaid                             GetWebhooksEvent2 = "marketplace.invoice.paid"
	GetWebhooksEvent2MarketplaceInvoiceNotpaid                          GetWebhooksEvent2 = "marketplace.invoice.notpaid"
	GetWebhooksEvent2MarketplaceInvoiceRefunded                         GetWebhooksEvent2 = "marketplace.invoice.refunded"
	GetWebhooksEvent2ObservabilityAnomaly                               GetWebhooksEvent2 = "observability.anomaly"
	GetWebhooksEvent2TestWebhook                                        GetWebhooksEvent2 = "test-webhook"
)

func (e GetWebhooksEvent2) ToPointer() *GetWebhooksEvent2 {
	return &e
}
func (e *GetWebhooksEvent2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "domain.dns.records.changed":
		fallthrough
	case "domain.transfer-in.started":
		fallthrough
	case "domain.transfer-in.completed":
		fallthrough
	case "domain.transfer-in.failed":
		fallthrough
	case "domain.certificate.add":
		fallthrough
	case "domain.certificate.add.failed":
		fallthrough
	case "domain.certificate.renew":
		fallthrough
	case "domain.certificate.renew.failed":
		fallthrough
	case "domain.certificate.deleted":
		fallthrough
	case "domain.renewal":
		fallthrough
	case "domain.renewal.failed":
		fallthrough
	case "domain.auto-renew.changed":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "project.domain.created":
		fallthrough
	case "project.domain.updated":
		fallthrough
	case "project.domain.deleted":
		fallthrough
	case "project.domain.verified":
		fallthrough
	case "project.domain.unverified":
		fallthrough
	case "project.domain.moved":
		fallthrough
	case "project.rolling-release.started":
		fallthrough
	case "project.rolling-release.aborted":
		fallthrough
	case "project.rolling-release.completed":
		fallthrough
	case "project.rolling-release.approved":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = GetWebhooksEvent2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksEvent2: %v", v)
	}
}

type GetWebhooksResponseBody2 struct {
	// The webhooks events
	Events []GetWebhooksEvent2 `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhooksResponseBody2) GetEvents() []GetWebhooksEvent2 {
	if o == nil {
		return []GetWebhooksEvent2{}
	}
	return o.Events
}

func (o *GetWebhooksResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhooksResponseBody2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhooksResponseBody2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhooksResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhooksResponseBody2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhooksResponseBody2) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhooksFramework string

const (
	GetWebhooksFrameworkBlitzjs        GetWebhooksFramework = "blitzjs"
	GetWebhooksFrameworkNextjs         GetWebhooksFramework = "nextjs"
	GetWebhooksFrameworkGatsby         GetWebhooksFramework = "gatsby"
	GetWebhooksFrameworkRemix          GetWebhooksFramework = "remix"
	GetWebhooksFrameworkReactRouter    GetWebhooksFramework = "react-router"
	GetWebhooksFrameworkAstro          GetWebhooksFramework = "astro"
	GetWebhooksFrameworkHexo           GetWebhooksFramework = "hexo"
	GetWebhooksFrameworkEleventy       GetWebhooksFramework = "eleventy"
	GetWebhooksFrameworkDocusaurus2    GetWebhooksFramework = "docusaurus-2"
	GetWebhooksFrameworkDocusaurus     GetWebhooksFramework = "docusaurus"
	GetWebhooksFrameworkPreact         GetWebhooksFramework = "preact"
	GetWebhooksFrameworkSolidstart1    GetWebhooksFramework = "solidstart-1"
	GetWebhooksFrameworkSolidstart     GetWebhooksFramework = "solidstart"
	GetWebhooksFrameworkDojo           GetWebhooksFramework = "dojo"
	GetWebhooksFrameworkEmber          GetWebhooksFramework = "ember"
	GetWebhooksFrameworkVue            GetWebhooksFramework = "vue"
	GetWebhooksFrameworkScully         GetWebhooksFramework = "scully"
	GetWebhooksFrameworkIonicAngular   GetWebhooksFramework = "ionic-angular"
	GetWebhooksFrameworkAngular        GetWebhooksFramework = "angular"
	GetWebhooksFrameworkPolymer        GetWebhooksFramework = "polymer"
	GetWebhooksFrameworkSvelte         GetWebhooksFramework = "svelte"
	GetWebhooksFrameworkSveltekit      GetWebhooksFramework = "sveltekit"
	GetWebhooksFrameworkSveltekit1     GetWebhooksFramework = "sveltekit-1"
	GetWebhooksFrameworkIonicReact     GetWebhooksFramework = "ionic-react"
	GetWebhooksFrameworkCreateReactApp GetWebhooksFramework = "create-react-app"
	GetWebhooksFrameworkGridsome       GetWebhooksFramework = "gridsome"
	GetWebhooksFrameworkUmijs          GetWebhooksFramework = "umijs"
	GetWebhooksFrameworkSapper         GetWebhooksFramework = "sapper"
	GetWebhooksFrameworkSaber          GetWebhooksFramework = "saber"
	GetWebhooksFrameworkStencil        GetWebhooksFramework = "stencil"
	GetWebhooksFrameworkNuxtjs         GetWebhooksFramework = "nuxtjs"
	GetWebhooksFrameworkRedwoodjs      GetWebhooksFramework = "redwoodjs"
	GetWebhooksFrameworkHugo           GetWebhooksFramework = "hugo"
	GetWebhooksFrameworkJekyll         GetWebhooksFramework = "jekyll"
	GetWebhooksFrameworkBrunch         GetWebhooksFramework = "brunch"
	GetWebhooksFrameworkMiddleman      GetWebhooksFramework = "middleman"
	GetWebhooksFrameworkZola           GetWebhooksFramework = "zola"
	GetWebhooksFrameworkHydrogen       GetWebhooksFramework = "hydrogen"
	GetWebhooksFrameworkVite           GetWebhooksFramework = "vite"
	GetWebhooksFrameworkVitepress      GetWebhooksFramework = "vitepress"
	GetWebhooksFrameworkVuepress       GetWebhooksFramework = "vuepress"
	GetWebhooksFrameworkParcel         GetWebhooksFramework = "parcel"
	GetWebhooksFrameworkFasthtml       GetWebhooksFramework = "fasthtml"
	GetWebhooksFrameworkSanityV3       GetWebhooksFramework = "sanity-v3"
	GetWebhooksFrameworkSanity         GetWebhooksFramework = "sanity"
	GetWebhooksFrameworkStorybook      GetWebhooksFramework = "storybook"
)

func (e GetWebhooksFramework) ToPointer() *GetWebhooksFramework {
	return &e
}
func (e *GetWebhooksFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = GetWebhooksFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksFramework: %v", v)
	}
}

type ProjectsMetadatum struct {
	ID               string                `json:"id"`
	Name             string                `json:"name"`
	Framework        *GetWebhooksFramework `json:"framework,omitempty"`
	LatestDeployment *string               `json:"latestDeployment,omitempty"`
}

func (o *ProjectsMetadatum) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ProjectsMetadatum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ProjectsMetadatum) GetFramework() *GetWebhooksFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ProjectsMetadatum) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

// GetWebhooksEvent1 - The webhooks events
type GetWebhooksEvent1 string

const (
	GetWebhooksEvent1BudgetReached                                      GetWebhooksEvent1 = "budget.reached"
	GetWebhooksEvent1BudgetReset                                        GetWebhooksEvent1 = "budget.reset"
	GetWebhooksEvent1DomainCreated                                      GetWebhooksEvent1 = "domain.created"
	GetWebhooksEvent1DomainDnsRecordsChanged                            GetWebhooksEvent1 = "domain.dns.records.changed"
	GetWebhooksEvent1DomainTransferInStarted                            GetWebhooksEvent1 = "domain.transfer-in.started"
	GetWebhooksEvent1DomainTransferInCompleted                          GetWebhooksEvent1 = "domain.transfer-in.completed"
	GetWebhooksEvent1DomainTransferInFailed                             GetWebhooksEvent1 = "domain.transfer-in.failed"
	GetWebhooksEvent1DomainCertificateAdd                               GetWebhooksEvent1 = "domain.certificate.add"
	GetWebhooksEvent1DomainCertificateAddFailed                         GetWebhooksEvent1 = "domain.certificate.add.failed"
	GetWebhooksEvent1DomainCertificateRenew                             GetWebhooksEvent1 = "domain.certificate.renew"
	GetWebhooksEvent1DomainCertificateRenewFailed                       GetWebhooksEvent1 = "domain.certificate.renew.failed"
	GetWebhooksEvent1DomainCertificateDeleted                           GetWebhooksEvent1 = "domain.certificate.deleted"
	GetWebhooksEvent1DomainRenewal                                      GetWebhooksEvent1 = "domain.renewal"
	GetWebhooksEvent1DomainRenewalFailed                                GetWebhooksEvent1 = "domain.renewal.failed"
	GetWebhooksEvent1DomainAutoRenewChanged                             GetWebhooksEvent1 = "domain.auto-renew.changed"
	GetWebhooksEvent1DeploymentCreated                                  GetWebhooksEvent1 = "deployment.created"
	GetWebhooksEvent1DeploymentError                                    GetWebhooksEvent1 = "deployment.error"
	GetWebhooksEvent1DeploymentCanceled                                 GetWebhooksEvent1 = "deployment.canceled"
	GetWebhooksEvent1DeploymentSucceeded                                GetWebhooksEvent1 = "deployment.succeeded"
	GetWebhooksEvent1DeploymentReady                                    GetWebhooksEvent1 = "deployment.ready"
	GetWebhooksEvent1DeploymentCheckRerequested                         GetWebhooksEvent1 = "deployment.check-rerequested"
	GetWebhooksEvent1DeploymentPromoted                                 GetWebhooksEvent1 = "deployment.promoted"
	GetWebhooksEvent1DeploymentIntegrationActionStart                   GetWebhooksEvent1 = "deployment.integration.action.start"
	GetWebhooksEvent1DeploymentIntegrationActionCancel                  GetWebhooksEvent1 = "deployment.integration.action.cancel"
	GetWebhooksEvent1DeploymentIntegrationActionCleanup                 GetWebhooksEvent1 = "deployment.integration.action.cleanup"
	GetWebhooksEvent1EdgeConfigCreated                                  GetWebhooksEvent1 = "edge-config.created"
	GetWebhooksEvent1EdgeConfigDeleted                                  GetWebhooksEvent1 = "edge-config.deleted"
	GetWebhooksEvent1EdgeConfigItemsUpdated                             GetWebhooksEvent1 = "edge-config.items.updated"
	GetWebhooksEvent1FirewallAttack                                     GetWebhooksEvent1 = "firewall.attack"
	GetWebhooksEvent1IntegrationConfigurationPermissionUpgraded         GetWebhooksEvent1 = "integration-configuration.permission-upgraded"
	GetWebhooksEvent1IntegrationConfigurationRemoved                    GetWebhooksEvent1 = "integration-configuration.removed"
	GetWebhooksEvent1IntegrationConfigurationScopeChangeConfirmed       GetWebhooksEvent1 = "integration-configuration.scope-change-confirmed"
	GetWebhooksEvent1IntegrationResourceProjectConnected                GetWebhooksEvent1 = "integration-resource.project-connected"
	GetWebhooksEvent1IntegrationResourceProjectDisconnected             GetWebhooksEvent1 = "integration-resource.project-disconnected"
	GetWebhooksEvent1ProjectCreated                                     GetWebhooksEvent1 = "project.created"
	GetWebhooksEvent1ProjectRemoved                                     GetWebhooksEvent1 = "project.removed"
	GetWebhooksEvent1ProjectDomainCreated                               GetWebhooksEvent1 = "project.domain.created"
	GetWebhooksEvent1ProjectDomainUpdated                               GetWebhooksEvent1 = "project.domain.updated"
	GetWebhooksEvent1ProjectDomainDeleted                               GetWebhooksEvent1 = "project.domain.deleted"
	GetWebhooksEvent1ProjectDomainVerified                              GetWebhooksEvent1 = "project.domain.verified"
	GetWebhooksEvent1ProjectDomainUnverified                            GetWebhooksEvent1 = "project.domain.unverified"
	GetWebhooksEvent1ProjectDomainMoved                                 GetWebhooksEvent1 = "project.domain.moved"
	GetWebhooksEvent1ProjectRollingReleaseStarted                       GetWebhooksEvent1 = "project.rolling-release.started"
	GetWebhooksEvent1ProjectRollingReleaseAborted                       GetWebhooksEvent1 = "project.rolling-release.aborted"
	GetWebhooksEvent1ProjectRollingReleaseCompleted                     GetWebhooksEvent1 = "project.rolling-release.completed"
	GetWebhooksEvent1ProjectRollingReleaseApproved                      GetWebhooksEvent1 = "project.rolling-release.approved"
	GetWebhooksEvent1DeploymentChecksCompleted                          GetWebhooksEvent1 = "deployment-checks-completed"
	GetWebhooksEvent1DeploymentReadyLegacy                              GetWebhooksEvent1 = "deployment-ready"
	GetWebhooksEvent1DeploymentPrepared                                 GetWebhooksEvent1 = "deployment-prepared"
	GetWebhooksEvent1DeploymentErrorLegacy                              GetWebhooksEvent1 = "deployment-error"
	GetWebhooksEvent1DeploymentCheckRerequestedLegacy                   GetWebhooksEvent1 = "deployment-check-rerequested"
	GetWebhooksEvent1DeploymentCanceledLegacy                           GetWebhooksEvent1 = "deployment-canceled"
	GetWebhooksEvent1ProjectCreatedLegacy                               GetWebhooksEvent1 = "project-created"
	GetWebhooksEvent1ProjectRemovedLegacy                               GetWebhooksEvent1 = "project-removed"
	GetWebhooksEvent1DomainCreatedLegacy                                GetWebhooksEvent1 = "domain-created"
	GetWebhooksEvent1Deployment                                         GetWebhooksEvent1 = "deployment"
	GetWebhooksEvent1IntegrationConfigurationPermissionUpdated          GetWebhooksEvent1 = "integration-configuration-permission-updated"
	GetWebhooksEvent1IntegrationConfigurationRemovedLegacy              GetWebhooksEvent1 = "integration-configuration-removed"
	GetWebhooksEvent1IntegrationConfigurationScopeChangeConfirmedLegacy GetWebhooksEvent1 = "integration-configuration-scope-change-confirmed"
	GetWebhooksEvent1MarketplaceInvoiceCreated                          GetWebhooksEvent1 = "marketplace.invoice.created"
	GetWebhooksEvent1MarketplaceInvoicePaid                             GetWebhooksEvent1 = "marketplace.invoice.paid"
	GetWebhooksEvent1MarketplaceInvoiceNotpaid                          GetWebhooksEvent1 = "marketplace.invoice.notpaid"
	GetWebhooksEvent1MarketplaceInvoiceRefunded                         GetWebhooksEvent1 = "marketplace.invoice.refunded"
	GetWebhooksEvent1ObservabilityAnomaly                               GetWebhooksEvent1 = "observability.anomaly"
	GetWebhooksEvent1TestWebhook                                        GetWebhooksEvent1 = "test-webhook"
)

func (e GetWebhooksEvent1) ToPointer() *GetWebhooksEvent1 {
	return &e
}
func (e *GetWebhooksEvent1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "budget.reached":
		fallthrough
	case "budget.reset":
		fallthrough
	case "domain.created":
		fallthrough
	case "domain.dns.records.changed":
		fallthrough
	case "domain.transfer-in.started":
		fallthrough
	case "domain.transfer-in.completed":
		fallthrough
	case "domain.transfer-in.failed":
		fallthrough
	case "domain.certificate.add":
		fallthrough
	case "domain.certificate.add.failed":
		fallthrough
	case "domain.certificate.renew":
		fallthrough
	case "domain.certificate.renew.failed":
		fallthrough
	case "domain.certificate.deleted":
		fallthrough
	case "domain.renewal":
		fallthrough
	case "domain.renewal.failed":
		fallthrough
	case "domain.auto-renew.changed":
		fallthrough
	case "deployment.created":
		fallthrough
	case "deployment.error":
		fallthrough
	case "deployment.canceled":
		fallthrough
	case "deployment.succeeded":
		fallthrough
	case "deployment.ready":
		fallthrough
	case "deployment.check-rerequested":
		fallthrough
	case "deployment.promoted":
		fallthrough
	case "deployment.integration.action.start":
		fallthrough
	case "deployment.integration.action.cancel":
		fallthrough
	case "deployment.integration.action.cleanup":
		fallthrough
	case "edge-config.created":
		fallthrough
	case "edge-config.deleted":
		fallthrough
	case "edge-config.items.updated":
		fallthrough
	case "firewall.attack":
		fallthrough
	case "integration-configuration.permission-upgraded":
		fallthrough
	case "integration-configuration.removed":
		fallthrough
	case "integration-configuration.scope-change-confirmed":
		fallthrough
	case "integration-resource.project-connected":
		fallthrough
	case "integration-resource.project-disconnected":
		fallthrough
	case "project.created":
		fallthrough
	case "project.removed":
		fallthrough
	case "project.domain.created":
		fallthrough
	case "project.domain.updated":
		fallthrough
	case "project.domain.deleted":
		fallthrough
	case "project.domain.verified":
		fallthrough
	case "project.domain.unverified":
		fallthrough
	case "project.domain.moved":
		fallthrough
	case "project.rolling-release.started":
		fallthrough
	case "project.rolling-release.aborted":
		fallthrough
	case "project.rolling-release.completed":
		fallthrough
	case "project.rolling-release.approved":
		fallthrough
	case "deployment-checks-completed":
		fallthrough
	case "deployment-ready":
		fallthrough
	case "deployment-prepared":
		fallthrough
	case "deployment-error":
		fallthrough
	case "deployment-check-rerequested":
		fallthrough
	case "deployment-canceled":
		fallthrough
	case "project-created":
		fallthrough
	case "project-removed":
		fallthrough
	case "domain-created":
		fallthrough
	case "deployment":
		fallthrough
	case "integration-configuration-permission-updated":
		fallthrough
	case "integration-configuration-removed":
		fallthrough
	case "integration-configuration-scope-change-confirmed":
		fallthrough
	case "marketplace.invoice.created":
		fallthrough
	case "marketplace.invoice.paid":
		fallthrough
	case "marketplace.invoice.notpaid":
		fallthrough
	case "marketplace.invoice.refunded":
		fallthrough
	case "observability.anomaly":
		fallthrough
	case "test-webhook":
		*e = GetWebhooksEvent1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebhooksEvent1: %v", v)
	}
}

type GetWebhooksResponseBody1 struct {
	ProjectsMetadata []ProjectsMetadatum `json:"projectsMetadata"`
	// The webhooks events
	Events []GetWebhooksEvent1 `json:"events"`
	// The webhook id
	ID string `json:"id"`
	// A string with the URL of the webhook
	URL string `json:"url"`
	// The unique ID of the team the webhook belongs to
	OwnerID string `json:"ownerId"`
	// A number containing the date when the webhook was created in in milliseconds
	CreatedAt float64 `json:"createdAt"`
	// A number containing the date when the webhook was updated in in milliseconds
	UpdatedAt float64 `json:"updatedAt"`
	// The ID of the projects the webhook is associated with
	ProjectIds []string `json:"projectIds,omitempty"`
}

func (o *GetWebhooksResponseBody1) GetProjectsMetadata() []ProjectsMetadatum {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

func (o *GetWebhooksResponseBody1) GetEvents() []GetWebhooksEvent1 {
	if o == nil {
		return []GetWebhooksEvent1{}
	}
	return o.Events
}

func (o *GetWebhooksResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebhooksResponseBody1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebhooksResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *GetWebhooksResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *GetWebhooksResponseBody1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *GetWebhooksResponseBody1) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

type GetWebhooksResponseBodyType string

const (
	GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody1 GetWebhooksResponseBodyType = "arrayOfGetWebhooksResponseBody1"
	GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody2 GetWebhooksResponseBodyType = "arrayOfGetWebhooksResponseBody2"
)

type GetWebhooksResponseBody struct {
	ArrayOfGetWebhooksResponseBody1 []GetWebhooksResponseBody1 `queryParam:"inline"`
	ArrayOfGetWebhooksResponseBody2 []GetWebhooksResponseBody2 `queryParam:"inline"`

	Type GetWebhooksResponseBodyType
}

func CreateGetWebhooksResponseBodyArrayOfGetWebhooksResponseBody1(arrayOfGetWebhooksResponseBody1 []GetWebhooksResponseBody1) GetWebhooksResponseBody {
	typ := GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody1

	return GetWebhooksResponseBody{
		ArrayOfGetWebhooksResponseBody1: arrayOfGetWebhooksResponseBody1,
		Type:                            typ,
	}
}

func CreateGetWebhooksResponseBodyArrayOfGetWebhooksResponseBody2(arrayOfGetWebhooksResponseBody2 []GetWebhooksResponseBody2) GetWebhooksResponseBody {
	typ := GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody2

	return GetWebhooksResponseBody{
		ArrayOfGetWebhooksResponseBody2: arrayOfGetWebhooksResponseBody2,
		Type:                            typ,
	}
}

func (u *GetWebhooksResponseBody) UnmarshalJSON(data []byte) error {

	var arrayOfGetWebhooksResponseBody1 []GetWebhooksResponseBody1 = []GetWebhooksResponseBody1{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetWebhooksResponseBody1, "", true, true); err == nil {
		u.ArrayOfGetWebhooksResponseBody1 = arrayOfGetWebhooksResponseBody1
		u.Type = GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody1
		return nil
	}

	var arrayOfGetWebhooksResponseBody2 []GetWebhooksResponseBody2 = []GetWebhooksResponseBody2{}
	if err := utils.UnmarshalJSON(data, &arrayOfGetWebhooksResponseBody2, "", true, true); err == nil {
		u.ArrayOfGetWebhooksResponseBody2 = arrayOfGetWebhooksResponseBody2
		u.Type = GetWebhooksResponseBodyTypeArrayOfGetWebhooksResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetWebhooksResponseBody", string(data))
}

func (u GetWebhooksResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfGetWebhooksResponseBody1 != nil {
		return utils.MarshalJSON(u.ArrayOfGetWebhooksResponseBody1, "", true)
	}

	if u.ArrayOfGetWebhooksResponseBody2 != nil {
		return utils.MarshalJSON(u.ArrayOfGetWebhooksResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type GetWebhooksResponseBody: all fields are null")
}

type GetWebhooksResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *GetWebhooksResponseBody
}

func (o *GetWebhooksResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GetWebhooksResponse) GetOneOf() *GetWebhooksResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
