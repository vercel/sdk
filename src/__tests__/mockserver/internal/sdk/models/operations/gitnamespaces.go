// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type Provider string

const (
	ProviderGithub           Provider = "github"
	ProviderGithubCustomHost Provider = "github-custom-host"
	ProviderGitlab           Provider = "gitlab"
	ProviderBitbucket        Provider = "bitbucket"
)

func (e Provider) ToPointer() *Provider {
	return &e
}
func (e *Provider) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		fallthrough
	case "github-custom-host":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		*e = Provider(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Provider: %v", v)
	}
}

type GitNamespacesRequest struct {
	// The custom Git host if using a custom Git provider, like GitHub Enterprise Server
	Host     *string   `queryParam:"style=form,explode=true,name=host"`
	Provider *Provider `queryParam:"style=form,explode=true,name=provider"`
}

func (o *GitNamespacesRequest) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *GitNamespacesRequest) GetProvider() *Provider {
	if o == nil {
		return nil
	}
	return o.Provider
}

type GitNamespacesIDType string

const (
	GitNamespacesIDTypeStr    GitNamespacesIDType = "str"
	GitNamespacesIDTypeNumber GitNamespacesIDType = "number"
)

type GitNamespacesID struct {
	Str    *string
	Number *float64

	Type GitNamespacesIDType
}

func CreateGitNamespacesIDStr(str string) GitNamespacesID {
	typ := GitNamespacesIDTypeStr

	return GitNamespacesID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGitNamespacesIDNumber(number float64) GitNamespacesID {
	typ := GitNamespacesIDTypeNumber

	return GitNamespacesID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GitNamespacesID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GitNamespacesIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GitNamespacesIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GitNamespacesID", string(data))
}

func (u GitNamespacesID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GitNamespacesID: all fields are null")
}

type GitNamespacesResponseBody struct {
	Provider           string          `json:"provider"`
	Slug               string          `json:"slug"`
	ID                 GitNamespacesID `json:"id"`
	OwnerType          string          `json:"ownerType"`
	Name               *string         `json:"name,omitempty"`
	IsAccessRestricted *bool           `json:"isAccessRestricted,omitempty"`
	InstallationID     *float64        `json:"installationId,omitempty"`
	RequireReauth      *bool           `json:"requireReauth,omitempty"`
}

func (o *GitNamespacesResponseBody) GetProvider() string {
	if o == nil {
		return ""
	}
	return o.Provider
}

func (o *GitNamespacesResponseBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *GitNamespacesResponseBody) GetID() GitNamespacesID {
	if o == nil {
		return GitNamespacesID{}
	}
	return o.ID
}

func (o *GitNamespacesResponseBody) GetOwnerType() string {
	if o == nil {
		return ""
	}
	return o.OwnerType
}

func (o *GitNamespacesResponseBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *GitNamespacesResponseBody) GetIsAccessRestricted() *bool {
	if o == nil {
		return nil
	}
	return o.IsAccessRestricted
}

func (o *GitNamespacesResponseBody) GetInstallationID() *float64 {
	if o == nil {
		return nil
	}
	return o.InstallationID
}

func (o *GitNamespacesResponseBody) GetRequireReauth() *bool {
	if o == nil {
		return nil
	}
	return o.RequireReauth
}

type GitNamespacesResponse struct {
	HTTPMeta       components.HTTPMetadata `json:"-"`
	ResponseBodies []GitNamespacesResponseBody
}

func (o *GitNamespacesResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *GitNamespacesResponse) GetResponseBodies() []GitNamespacesResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
