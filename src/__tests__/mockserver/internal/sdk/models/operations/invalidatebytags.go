// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type InvalidateByTagsTagsType string

const (
	InvalidateByTagsTagsTypeArrayOfStr InvalidateByTagsTagsType = "arrayOfStr"
	InvalidateByTagsTagsTypeStr        InvalidateByTagsTagsType = "str"
)

type InvalidateByTagsTags struct {
	ArrayOfStr []string `queryParam:"inline"`
	Str        *string  `queryParam:"inline"`

	Type InvalidateByTagsTagsType
}

func CreateInvalidateByTagsTagsArrayOfStr(arrayOfStr []string) InvalidateByTagsTags {
	typ := InvalidateByTagsTagsTypeArrayOfStr

	return InvalidateByTagsTags{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateInvalidateByTagsTagsStr(str string) InvalidateByTagsTags {
	typ := InvalidateByTagsTagsTypeStr

	return InvalidateByTagsTags{
		Str:  &str,
		Type: typ,
	}
}

func (u *InvalidateByTagsTags) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = InvalidateByTagsTagsTypeArrayOfStr
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = InvalidateByTagsTagsTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InvalidateByTagsTags", string(data))
}

func (u InvalidateByTagsTags) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type InvalidateByTagsTags: all fields are null")
}

type InvalidateByTagsTarget string

const (
	InvalidateByTagsTargetProduction InvalidateByTagsTarget = "production"
	InvalidateByTagsTargetPreview    InvalidateByTagsTarget = "preview"
)

func (e InvalidateByTagsTarget) ToPointer() *InvalidateByTagsTarget {
	return &e
}
func (e *InvalidateByTagsTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = InvalidateByTagsTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InvalidateByTagsTarget: %v", v)
	}
}

type InvalidateByTagsRequestBody struct {
	Tags   InvalidateByTagsTags    `json:"tags"`
	Target *InvalidateByTagsTarget `json:"target,omitempty"`
}

func (o *InvalidateByTagsRequestBody) GetTags() InvalidateByTagsTags {
	if o == nil {
		return InvalidateByTagsTags{}
	}
	return o.Tags
}

func (o *InvalidateByTagsRequestBody) GetTarget() *InvalidateByTagsTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

type InvalidateByTagsRequest struct {
	ProjectIDOrName string `queryParam:"style=form,explode=true,name=projectIdOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                      `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *InvalidateByTagsRequestBody `request:"mediaType=application/json"`
}

func (o *InvalidateByTagsRequest) GetProjectIDOrName() string {
	if o == nil {
		return ""
	}
	return o.ProjectIDOrName
}

func (o *InvalidateByTagsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *InvalidateByTagsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *InvalidateByTagsRequest) GetRequestBody() *InvalidateByTagsRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type InvalidateByTagsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *InvalidateByTagsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
