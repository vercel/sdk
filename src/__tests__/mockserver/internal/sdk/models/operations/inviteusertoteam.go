// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// InviteUserToTeamRoleRequest - The role of the user to invite
type InviteUserToTeamRoleRequest string

const (
	InviteUserToTeamRoleRequestOwner       InviteUserToTeamRoleRequest = "OWNER"
	InviteUserToTeamRoleRequestMember      InviteUserToTeamRoleRequest = "MEMBER"
	InviteUserToTeamRoleRequestDeveloper   InviteUserToTeamRoleRequest = "DEVELOPER"
	InviteUserToTeamRoleRequestSecurity    InviteUserToTeamRoleRequest = "SECURITY"
	InviteUserToTeamRoleRequestBilling     InviteUserToTeamRoleRequest = "BILLING"
	InviteUserToTeamRoleRequestViewer      InviteUserToTeamRoleRequest = "VIEWER"
	InviteUserToTeamRoleRequestContributor InviteUserToTeamRoleRequest = "CONTRIBUTOR"
)

func (e InviteUserToTeamRoleRequest) ToPointer() *InviteUserToTeamRoleRequest {
	return &e
}
func (e *InviteUserToTeamRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRoleRequest: %v", v)
	}
}

// InviteUserToTeamProjectRole - Sets the project roles for the invited user
type InviteUserToTeamProjectRole string

const (
	InviteUserToTeamProjectRoleAdmin            InviteUserToTeamProjectRole = "ADMIN"
	InviteUserToTeamProjectRoleProjectViewer    InviteUserToTeamProjectRole = "PROJECT_VIEWER"
	InviteUserToTeamProjectRoleProjectDeveloper InviteUserToTeamProjectRole = "PROJECT_DEVELOPER"
)

func (e InviteUserToTeamProjectRole) ToPointer() *InviteUserToTeamProjectRole {
	return &e
}
func (e *InviteUserToTeamProjectRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = InviteUserToTeamProjectRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamProjectRole: %v", v)
	}
}

type InviteUserToTeamProject struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// Sets the project roles for the invited user
	Role InviteUserToTeamProjectRole `json:"role"`
}

func (o *InviteUserToTeamProject) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *InviteUserToTeamProject) GetRole() InviteUserToTeamProjectRole {
	if o == nil {
		return InviteUserToTeamProjectRole("")
	}
	return o.Role
}

type InviteUserToTeamRequestBody struct {
	// The id of the user to invite
	UID *string `json:"uid,omitempty"`
	// The email address of the user to invite
	Email *string `json:"email,omitempty"`
	// The role of the user to invite
	Role     *InviteUserToTeamRoleRequest `default:"MEMBER" json:"role"`
	Projects []InviteUserToTeamProject    `json:"projects,omitempty"`
}

func (i InviteUserToTeamRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InviteUserToTeamRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InviteUserToTeamRequestBody) GetUID() *string {
	if o == nil {
		return nil
	}
	return o.UID
}

func (o *InviteUserToTeamRequestBody) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *InviteUserToTeamRequestBody) GetRole() *InviteUserToTeamRoleRequest {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *InviteUserToTeamRequestBody) GetProjects() []InviteUserToTeamProject {
	if o == nil {
		return nil
	}
	return o.Projects
}

type InviteUserToTeamRequest struct {
	TeamID      string                      `pathParam:"style=simple,explode=false,name=teamId"`
	RequestBody InviteUserToTeamRequestBody `request:"mediaType=application/json"`
}

func (o *InviteUserToTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *InviteUserToTeamRequest) GetRequestBody() InviteUserToTeamRequestBody {
	if o == nil {
		return InviteUserToTeamRequestBody{}
	}
	return o.RequestBody
}

type InviteUserToTeamRoleResponse2 string

const (
	InviteUserToTeamRoleResponse2Owner       InviteUserToTeamRoleResponse2 = "OWNER"
	InviteUserToTeamRoleResponse2Member      InviteUserToTeamRoleResponse2 = "MEMBER"
	InviteUserToTeamRoleResponse2Developer   InviteUserToTeamRoleResponse2 = "DEVELOPER"
	InviteUserToTeamRoleResponse2Security    InviteUserToTeamRoleResponse2 = "SECURITY"
	InviteUserToTeamRoleResponse2Billing     InviteUserToTeamRoleResponse2 = "BILLING"
	InviteUserToTeamRoleResponse2Viewer      InviteUserToTeamRoleResponse2 = "VIEWER"
	InviteUserToTeamRoleResponse2Contributor InviteUserToTeamRoleResponse2 = "CONTRIBUTOR"
)

func (e InviteUserToTeamRoleResponse2) ToPointer() *InviteUserToTeamRoleResponse2 {
	return &e
}
func (e *InviteUserToTeamRoleResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamRoleResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRoleResponse2: %v", v)
	}
}

type InviteUserToTeamTeamRole2 string

const (
	InviteUserToTeamTeamRole2Owner       InviteUserToTeamTeamRole2 = "OWNER"
	InviteUserToTeamTeamRole2Member      InviteUserToTeamTeamRole2 = "MEMBER"
	InviteUserToTeamTeamRole2Developer   InviteUserToTeamTeamRole2 = "DEVELOPER"
	InviteUserToTeamTeamRole2Security    InviteUserToTeamTeamRole2 = "SECURITY"
	InviteUserToTeamTeamRole2Billing     InviteUserToTeamTeamRole2 = "BILLING"
	InviteUserToTeamTeamRole2Viewer      InviteUserToTeamTeamRole2 = "VIEWER"
	InviteUserToTeamTeamRole2Contributor InviteUserToTeamTeamRole2 = "CONTRIBUTOR"
)

func (e InviteUserToTeamTeamRole2) ToPointer() *InviteUserToTeamTeamRole2 {
	return &e
}
func (e *InviteUserToTeamTeamRole2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamTeamRole2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamTeamRole2: %v", v)
	}
}

type TeamPermission2 string

const (
	TeamPermission2CreateProject            TeamPermission2 = "CreateProject"
	TeamPermission2FullProductionDeployment TeamPermission2 = "FullProductionDeployment"
	TeamPermission2UsageViewer              TeamPermission2 = "UsageViewer"
	TeamPermission2EnvVariableManager       TeamPermission2 = "EnvVariableManager"
	TeamPermission2EnvironmentManager       TeamPermission2 = "EnvironmentManager"
)

func (e TeamPermission2) ToPointer() *TeamPermission2 {
	return &e
}
func (e *TeamPermission2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateProject":
		fallthrough
	case "FullProductionDeployment":
		fallthrough
	case "UsageViewer":
		fallthrough
	case "EnvVariableManager":
		fallthrough
	case "EnvironmentManager":
		*e = TeamPermission2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamPermission2: %v", v)
	}
}

type InviteUserToTeamResponseBody2 struct {
	UID             string                        `json:"uid"`
	Username        string                        `json:"username"`
	Role            InviteUserToTeamRoleResponse2 `json:"role"`
	TeamRoles       []InviteUserToTeamTeamRole2   `json:"teamRoles,omitempty"`
	TeamPermissions []TeamPermission2             `json:"teamPermissions,omitempty"`
}

func (o *InviteUserToTeamResponseBody2) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeamResponseBody2) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *InviteUserToTeamResponseBody2) GetRole() InviteUserToTeamRoleResponse2 {
	if o == nil {
		return InviteUserToTeamRoleResponse2("")
	}
	return o.Role
}

func (o *InviteUserToTeamResponseBody2) GetTeamRoles() []InviteUserToTeamTeamRole2 {
	if o == nil {
		return nil
	}
	return o.TeamRoles
}

func (o *InviteUserToTeamResponseBody2) GetTeamPermissions() []TeamPermission2 {
	if o == nil {
		return nil
	}
	return o.TeamPermissions
}

// InviteUserToTeamRoleResponse1 - The role used for the invitation
type InviteUserToTeamRoleResponse1 string

const (
	InviteUserToTeamRoleResponse1Owner       InviteUserToTeamRoleResponse1 = "OWNER"
	InviteUserToTeamRoleResponse1Member      InviteUserToTeamRoleResponse1 = "MEMBER"
	InviteUserToTeamRoleResponse1Developer   InviteUserToTeamRoleResponse1 = "DEVELOPER"
	InviteUserToTeamRoleResponse1Security    InviteUserToTeamRoleResponse1 = "SECURITY"
	InviteUserToTeamRoleResponse1Billing     InviteUserToTeamRoleResponse1 = "BILLING"
	InviteUserToTeamRoleResponse1Viewer      InviteUserToTeamRoleResponse1 = "VIEWER"
	InviteUserToTeamRoleResponse1Contributor InviteUserToTeamRoleResponse1 = "CONTRIBUTOR"
)

func (e InviteUserToTeamRoleResponse1) ToPointer() *InviteUserToTeamRoleResponse1 {
	return &e
}
func (e *InviteUserToTeamRoleResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamRoleResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRoleResponse1: %v", v)
	}
}

// InviteUserToTeamTeamRole1 - The team roles of the user
type InviteUserToTeamTeamRole1 string

const (
	InviteUserToTeamTeamRole1Owner       InviteUserToTeamTeamRole1 = "OWNER"
	InviteUserToTeamTeamRole1Member      InviteUserToTeamTeamRole1 = "MEMBER"
	InviteUserToTeamTeamRole1Developer   InviteUserToTeamTeamRole1 = "DEVELOPER"
	InviteUserToTeamTeamRole1Security    InviteUserToTeamTeamRole1 = "SECURITY"
	InviteUserToTeamTeamRole1Billing     InviteUserToTeamTeamRole1 = "BILLING"
	InviteUserToTeamTeamRole1Viewer      InviteUserToTeamTeamRole1 = "VIEWER"
	InviteUserToTeamTeamRole1Contributor InviteUserToTeamTeamRole1 = "CONTRIBUTOR"
)

func (e InviteUserToTeamTeamRole1) ToPointer() *InviteUserToTeamTeamRole1 {
	return &e
}
func (e *InviteUserToTeamTeamRole1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamTeamRole1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamTeamRole1: %v", v)
	}
}

// TeamPermission1 - The team permissions of the user
type TeamPermission1 string

const (
	TeamPermission1CreateProject            TeamPermission1 = "CreateProject"
	TeamPermission1FullProductionDeployment TeamPermission1 = "FullProductionDeployment"
	TeamPermission1UsageViewer              TeamPermission1 = "UsageViewer"
	TeamPermission1EnvVariableManager       TeamPermission1 = "EnvVariableManager"
	TeamPermission1EnvironmentManager       TeamPermission1 = "EnvironmentManager"
)

func (e TeamPermission1) ToPointer() *TeamPermission1 {
	return &e
}
func (e *TeamPermission1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateProject":
		fallthrough
	case "FullProductionDeployment":
		fallthrough
	case "UsageViewer":
		fallthrough
	case "EnvVariableManager":
		fallthrough
	case "EnvironmentManager":
		*e = TeamPermission1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamPermission1: %v", v)
	}
}

// InviteUserToTeamResponseBody1 - The member was successfully added to the team
type InviteUserToTeamResponseBody1 struct {
	// The ID of the invited user
	UID string `json:"uid"`
	// The username of the invited user
	Username string `json:"username"`
	// The email of the invited user. Not included if the user was invited via their UID.
	Email *string `json:"email,omitempty"`
	// The role used for the invitation
	Role InviteUserToTeamRoleResponse1 `json:"role"`
	// The team roles of the user
	TeamRoles []InviteUserToTeamTeamRole1 `json:"teamRoles,omitempty"`
	// The team permissions of the user
	TeamPermissions []TeamPermission1 `json:"teamPermissions,omitempty"`
}

func (o *InviteUserToTeamResponseBody1) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeamResponseBody1) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *InviteUserToTeamResponseBody1) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *InviteUserToTeamResponseBody1) GetRole() InviteUserToTeamRoleResponse1 {
	if o == nil {
		return InviteUserToTeamRoleResponse1("")
	}
	return o.Role
}

func (o *InviteUserToTeamResponseBody1) GetTeamRoles() []InviteUserToTeamTeamRole1 {
	if o == nil {
		return nil
	}
	return o.TeamRoles
}

func (o *InviteUserToTeamResponseBody1) GetTeamPermissions() []TeamPermission1 {
	if o == nil {
		return nil
	}
	return o.TeamPermissions
}

type InviteUserToTeamResponseBodyType string

const (
	InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody1 InviteUserToTeamResponseBodyType = "inviteUserToTeam_ResponseBody_1"
	InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody2 InviteUserToTeamResponseBodyType = "inviteUserToTeam_ResponseBody_2"
)

// InviteUserToTeamResponseBody - The member was successfully added to the team
type InviteUserToTeamResponseBody struct {
	InviteUserToTeamResponseBody1 *InviteUserToTeamResponseBody1 `queryParam:"inline"`
	InviteUserToTeamResponseBody2 *InviteUserToTeamResponseBody2 `queryParam:"inline"`

	Type InviteUserToTeamResponseBodyType
}

func CreateInviteUserToTeamResponseBodyInviteUserToTeamResponseBody1(inviteUserToTeamResponseBody1 InviteUserToTeamResponseBody1) InviteUserToTeamResponseBody {
	typ := InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody1

	return InviteUserToTeamResponseBody{
		InviteUserToTeamResponseBody1: &inviteUserToTeamResponseBody1,
		Type:                          typ,
	}
}

func CreateInviteUserToTeamResponseBodyInviteUserToTeamResponseBody2(inviteUserToTeamResponseBody2 InviteUserToTeamResponseBody2) InviteUserToTeamResponseBody {
	typ := InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody2

	return InviteUserToTeamResponseBody{
		InviteUserToTeamResponseBody2: &inviteUserToTeamResponseBody2,
		Type:                          typ,
	}
}

func (u *InviteUserToTeamResponseBody) UnmarshalJSON(data []byte) error {

	var inviteUserToTeamResponseBody2 InviteUserToTeamResponseBody2 = InviteUserToTeamResponseBody2{}
	if err := utils.UnmarshalJSON(data, &inviteUserToTeamResponseBody2, "", true, true); err == nil {
		u.InviteUserToTeamResponseBody2 = &inviteUserToTeamResponseBody2
		u.Type = InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody2
		return nil
	}

	var inviteUserToTeamResponseBody1 InviteUserToTeamResponseBody1 = InviteUserToTeamResponseBody1{}
	if err := utils.UnmarshalJSON(data, &inviteUserToTeamResponseBody1, "", true, true); err == nil {
		u.InviteUserToTeamResponseBody1 = &inviteUserToTeamResponseBody1
		u.Type = InviteUserToTeamResponseBodyTypeInviteUserToTeamResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for InviteUserToTeamResponseBody", string(data))
}

func (u InviteUserToTeamResponseBody) MarshalJSON() ([]byte, error) {
	if u.InviteUserToTeamResponseBody1 != nil {
		return utils.MarshalJSON(u.InviteUserToTeamResponseBody1, "", true)
	}

	if u.InviteUserToTeamResponseBody2 != nil {
		return utils.MarshalJSON(u.InviteUserToTeamResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type InviteUserToTeamResponseBody: all fields are null")
}

type InviteUserToTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The member was successfully added to the team
	OneOf *InviteUserToTeamResponseBody
}

func (o *InviteUserToTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *InviteUserToTeamResponse) GetOneOf() *InviteUserToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
