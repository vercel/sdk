// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// InviteUserToTeamRoleRequest - The role of the user to invite
type InviteUserToTeamRoleRequest string

const (
	InviteUserToTeamRoleRequestOwner         InviteUserToTeamRoleRequest = "OWNER"
	InviteUserToTeamRoleRequestMember        InviteUserToTeamRoleRequest = "MEMBER"
	InviteUserToTeamRoleRequestDeveloper     InviteUserToTeamRoleRequest = "DEVELOPER"
	InviteUserToTeamRoleRequestSecurity      InviteUserToTeamRoleRequest = "SECURITY"
	InviteUserToTeamRoleRequestBilling       InviteUserToTeamRoleRequest = "BILLING"
	InviteUserToTeamRoleRequestViewer        InviteUserToTeamRoleRequest = "VIEWER"
	InviteUserToTeamRoleRequestViewerForPlus InviteUserToTeamRoleRequest = "VIEWER_FOR_PLUS"
	InviteUserToTeamRoleRequestContributor   InviteUserToTeamRoleRequest = "CONTRIBUTOR"
)

func (e InviteUserToTeamRoleRequest) ToPointer() *InviteUserToTeamRoleRequest {
	return &e
}
func (e *InviteUserToTeamRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "VIEWER_FOR_PLUS":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRoleRequest: %v", v)
	}
}

// InviteUserToTeamProjectRole - Sets the project roles for the invited user
type InviteUserToTeamProjectRole string

const (
	InviteUserToTeamProjectRoleAdmin            InviteUserToTeamProjectRole = "ADMIN"
	InviteUserToTeamProjectRoleProjectViewer    InviteUserToTeamProjectRole = "PROJECT_VIEWER"
	InviteUserToTeamProjectRoleProjectDeveloper InviteUserToTeamProjectRole = "PROJECT_DEVELOPER"
)

func (e InviteUserToTeamProjectRole) ToPointer() *InviteUserToTeamProjectRole {
	return &e
}
func (e *InviteUserToTeamProjectRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = InviteUserToTeamProjectRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamProjectRole: %v", v)
	}
}

type InviteUserToTeamProject struct {
	// The ID of the project.
	ProjectID string `json:"projectId"`
	// Sets the project roles for the invited user
	Role InviteUserToTeamProjectRole `json:"role"`
}

func (o *InviteUserToTeamProject) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *InviteUserToTeamProject) GetRole() InviteUserToTeamProjectRole {
	if o == nil {
		return InviteUserToTeamProjectRole("")
	}
	return o.Role
}

type InviteUserToTeamRequestBody struct {
	// The email address of the user to invite
	Email string `json:"email"`
	// The role of the user to invite
	Role     *InviteUserToTeamRoleRequest `default:"MEMBER" json:"role"`
	Projects []InviteUserToTeamProject    `json:"projects,omitempty"`
}

func (i InviteUserToTeamRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(i, "", false)
}

func (i *InviteUserToTeamRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &i, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *InviteUserToTeamRequestBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *InviteUserToTeamRequestBody) GetRole() *InviteUserToTeamRoleRequest {
	if o == nil {
		return nil
	}
	return o.Role
}

func (o *InviteUserToTeamRequestBody) GetProjects() []InviteUserToTeamProject {
	if o == nil {
		return nil
	}
	return o.Projects
}

type InviteUserToTeamRequest struct {
	TeamID      string                      `pathParam:"style=simple,explode=false,name=teamId"`
	RequestBody InviteUserToTeamRequestBody `request:"mediaType=application/json"`
}

func (o *InviteUserToTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *InviteUserToTeamRequest) GetRequestBody() InviteUserToTeamRequestBody {
	if o == nil {
		return InviteUserToTeamRequestBody{}
	}
	return o.RequestBody
}

// InviteUserToTeamRoleResponse - The role used for the invitation
type InviteUserToTeamRoleResponse string

const (
	InviteUserToTeamRoleResponseOwner         InviteUserToTeamRoleResponse = "OWNER"
	InviteUserToTeamRoleResponseMember        InviteUserToTeamRoleResponse = "MEMBER"
	InviteUserToTeamRoleResponseDeveloper     InviteUserToTeamRoleResponse = "DEVELOPER"
	InviteUserToTeamRoleResponseSecurity      InviteUserToTeamRoleResponse = "SECURITY"
	InviteUserToTeamRoleResponseBilling       InviteUserToTeamRoleResponse = "BILLING"
	InviteUserToTeamRoleResponseViewer        InviteUserToTeamRoleResponse = "VIEWER"
	InviteUserToTeamRoleResponseViewerForPlus InviteUserToTeamRoleResponse = "VIEWER_FOR_PLUS"
	InviteUserToTeamRoleResponseContributor   InviteUserToTeamRoleResponse = "CONTRIBUTOR"
)

func (e InviteUserToTeamRoleResponse) ToPointer() *InviteUserToTeamRoleResponse {
	return &e
}
func (e *InviteUserToTeamRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "VIEWER_FOR_PLUS":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamRoleResponse: %v", v)
	}
}

// InviteUserToTeamTeamRole - The team roles of the user
type InviteUserToTeamTeamRole string

const (
	InviteUserToTeamTeamRoleOwner         InviteUserToTeamTeamRole = "OWNER"
	InviteUserToTeamTeamRoleMember        InviteUserToTeamTeamRole = "MEMBER"
	InviteUserToTeamTeamRoleDeveloper     InviteUserToTeamTeamRole = "DEVELOPER"
	InviteUserToTeamTeamRoleSecurity      InviteUserToTeamTeamRole = "SECURITY"
	InviteUserToTeamTeamRoleBilling       InviteUserToTeamTeamRole = "BILLING"
	InviteUserToTeamTeamRoleViewer        InviteUserToTeamTeamRole = "VIEWER"
	InviteUserToTeamTeamRoleViewerForPlus InviteUserToTeamTeamRole = "VIEWER_FOR_PLUS"
	InviteUserToTeamTeamRoleContributor   InviteUserToTeamTeamRole = "CONTRIBUTOR"
)

func (e InviteUserToTeamTeamRole) ToPointer() *InviteUserToTeamTeamRole {
	return &e
}
func (e *InviteUserToTeamTeamRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "VIEWER_FOR_PLUS":
		fallthrough
	case "CONTRIBUTOR":
		*e = InviteUserToTeamTeamRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for InviteUserToTeamTeamRole: %v", v)
	}
}

// TeamPermission - The team permissions of the user
type TeamPermission string

const (
	TeamPermissionCreateProject            TeamPermission = "CreateProject"
	TeamPermissionFullProductionDeployment TeamPermission = "FullProductionDeployment"
	TeamPermissionUsageViewer              TeamPermission = "UsageViewer"
	TeamPermissionEnvVariableManager       TeamPermission = "EnvVariableManager"
	TeamPermissionEnvironmentManager       TeamPermission = "EnvironmentManager"
	TeamPermissionV0Builder                TeamPermission = "V0Builder"
	TeamPermissionV0Chatter                TeamPermission = "V0Chatter"
	TeamPermissionV0Viewer                 TeamPermission = "V0Viewer"
)

func (e TeamPermission) ToPointer() *TeamPermission {
	return &e
}
func (e *TeamPermission) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CreateProject":
		fallthrough
	case "FullProductionDeployment":
		fallthrough
	case "UsageViewer":
		fallthrough
	case "EnvVariableManager":
		fallthrough
	case "EnvironmentManager":
		fallthrough
	case "V0Builder":
		fallthrough
	case "V0Chatter":
		fallthrough
	case "V0Viewer":
		*e = TeamPermission(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TeamPermission: %v", v)
	}
}

// InviteUserToTeamResponseBody - The member was successfully added to the team
type InviteUserToTeamResponseBody struct {
	// The ID of the invited user
	UID string `json:"uid"`
	// The username of the invited user
	Username string `json:"username"`
	// The email of the invited user.
	Email string `json:"email"`
	// The role used for the invitation
	Role InviteUserToTeamRoleResponse `json:"role"`
	// The team roles of the user
	TeamRoles []InviteUserToTeamTeamRole `json:"teamRoles,omitempty"`
	// The team permissions of the user
	TeamPermissions []TeamPermission `json:"teamPermissions,omitempty"`
}

func (o *InviteUserToTeamResponseBody) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *InviteUserToTeamResponseBody) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *InviteUserToTeamResponseBody) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *InviteUserToTeamResponseBody) GetRole() InviteUserToTeamRoleResponse {
	if o == nil {
		return InviteUserToTeamRoleResponse("")
	}
	return o.Role
}

func (o *InviteUserToTeamResponseBody) GetTeamRoles() []InviteUserToTeamTeamRole {
	if o == nil {
		return nil
	}
	return o.TeamRoles
}

func (o *InviteUserToTeamResponseBody) GetTeamPermissions() []TeamPermission {
	if o == nil {
		return nil
	}
	return o.TeamPermissions
}

type InviteUserToTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The member was successfully added to the team
	Object *InviteUserToTeamResponseBody
}

func (o *InviteUserToTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *InviteUserToTeamResponse) GetObject() *InviteUserToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
