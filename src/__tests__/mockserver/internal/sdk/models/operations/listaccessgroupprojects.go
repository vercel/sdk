// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type ListAccessGroupProjectsRequest struct {
	// The ID or name of the Access Group.
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// Limit how many access group projects should be returned.
	Limit *int64 `queryParam:"style=form,explode=true,name=limit"`
	// Continuation cursor to retrieve the next page of results.
	Next *string `queryParam:"style=form,explode=true,name=next"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ListAccessGroupProjectsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *ListAccessGroupProjectsRequest) GetLimit() *int64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListAccessGroupProjectsRequest) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

func (o *ListAccessGroupProjectsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListAccessGroupProjectsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type ListAccessGroupProjectsRole string

const (
	ListAccessGroupProjectsRoleAdmin            ListAccessGroupProjectsRole = "ADMIN"
	ListAccessGroupProjectsRoleProjectDeveloper ListAccessGroupProjectsRole = "PROJECT_DEVELOPER"
	ListAccessGroupProjectsRoleProjectViewer    ListAccessGroupProjectsRole = "PROJECT_VIEWER"
)

func (e ListAccessGroupProjectsRole) ToPointer() *ListAccessGroupProjectsRole {
	return &e
}
func (e *ListAccessGroupProjectsRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ListAccessGroupProjectsRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListAccessGroupProjectsRole: %v", v)
	}
}

type ListAccessGroupProjectsProject struct {
	Name               *string `json:"name,omitempty"`
	Framework          *string `json:"framework,omitempty"`
	LatestDeploymentID *string `json:"latestDeploymentId,omitempty"`
}

func (o *ListAccessGroupProjectsProject) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ListAccessGroupProjectsProject) GetFramework() *string {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *ListAccessGroupProjectsProject) GetLatestDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeploymentID
}

type ListAccessGroupProjectsProjects struct {
	ProjectID string                         `json:"projectId"`
	Role      ListAccessGroupProjectsRole    `json:"role"`
	CreatedAt string                         `json:"createdAt"`
	UpdatedAt string                         `json:"updatedAt"`
	Project   ListAccessGroupProjectsProject `json:"project"`
}

func (o *ListAccessGroupProjectsProjects) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *ListAccessGroupProjectsProjects) GetRole() ListAccessGroupProjectsRole {
	if o == nil {
		return ListAccessGroupProjectsRole("")
	}
	return o.Role
}

func (o *ListAccessGroupProjectsProjects) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ListAccessGroupProjectsProjects) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *ListAccessGroupProjectsProjects) GetProject() ListAccessGroupProjectsProject {
	if o == nil {
		return ListAccessGroupProjectsProject{}
	}
	return o.Project
}

type ListAccessGroupProjectsPagination struct {
	Count float64 `json:"count"`
	Next  *string `json:"next"`
}

func (o *ListAccessGroupProjectsPagination) GetCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.Count
}

func (o *ListAccessGroupProjectsPagination) GetNext() *string {
	if o == nil {
		return nil
	}
	return o.Next
}

type ListAccessGroupProjectsResponseBody struct {
	Projects   []ListAccessGroupProjectsProjects `json:"projects"`
	Pagination ListAccessGroupProjectsPagination `json:"pagination"`
}

func (o *ListAccessGroupProjectsResponseBody) GetProjects() []ListAccessGroupProjectsProjects {
	if o == nil {
		return []ListAccessGroupProjectsProjects{}
	}
	return o.Projects
}

func (o *ListAccessGroupProjectsResponseBody) GetPagination() ListAccessGroupProjectsPagination {
	if o == nil {
		return ListAccessGroupProjectsPagination{}
	}
	return o.Pagination
}

type ListAccessGroupProjectsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ListAccessGroupProjectsResponseBody
}

func (o *ListAccessGroupProjectsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListAccessGroupProjectsResponse) GetObject() *ListAccessGroupProjectsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
