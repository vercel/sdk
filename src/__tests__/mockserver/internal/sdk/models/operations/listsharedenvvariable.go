// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type ListSharedEnvVariableRequest struct {
	Search *string `queryParam:"style=form,explode=true,name=search"`
	// Filter SharedEnvVariables that belong to a project
	ProjectID *string `queryParam:"style=form,explode=true,name=projectId"`
	// Filter SharedEnvVariables based on comma separated ids
	Ids *string `queryParam:"style=form,explode=true,name=ids"`
	// Filter SharedEnvVariables based on comma separated ids
	ExcludeIdsQueryParameter *string `queryParam:"style=form,explode=true,name=exclude_ids"`
	// Filter SharedEnvVariables based on comma separated ids
	ExcludeIdsQueryParameter1 *string `queryParam:"style=form,explode=true,name=exclude-ids"`
	// Filter SharedEnvVariables that belong to a project
	ExcludeProjectIDQueryParameter *string `queryParam:"style=form,explode=true,name=exclude_projectId"`
	// Filter SharedEnvVariables that belong to a project
	ExcludeProjectIDQueryParameter1 *string `queryParam:"style=form,explode=true,name=exclude-projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ListSharedEnvVariableRequest) GetSearch() *string {
	if o == nil {
		return nil
	}
	return o.Search
}

func (o *ListSharedEnvVariableRequest) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *ListSharedEnvVariableRequest) GetIds() *string {
	if o == nil {
		return nil
	}
	return o.Ids
}

func (o *ListSharedEnvVariableRequest) GetExcludeIdsQueryParameter() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeIdsQueryParameter
}

func (o *ListSharedEnvVariableRequest) GetExcludeIdsQueryParameter1() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeIdsQueryParameter1
}

func (o *ListSharedEnvVariableRequest) GetExcludeProjectIDQueryParameter() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeProjectIDQueryParameter
}

func (o *ListSharedEnvVariableRequest) GetExcludeProjectIDQueryParameter1() *string {
	if o == nil {
		return nil
	}
	return o.ExcludeProjectIDQueryParameter1
}

func (o *ListSharedEnvVariableRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListSharedEnvVariableRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// ListSharedEnvVariableType - The type of this cosmos doc instance, if blank, assume secret.
type ListSharedEnvVariableType string

const (
	ListSharedEnvVariableTypeEncrypted ListSharedEnvVariableType = "encrypted"
	ListSharedEnvVariableTypeSensitive ListSharedEnvVariableType = "sensitive"
	ListSharedEnvVariableTypeSystem    ListSharedEnvVariableType = "system"
	ListSharedEnvVariableTypePlain     ListSharedEnvVariableType = "plain"
)

func (e ListSharedEnvVariableType) ToPointer() *ListSharedEnvVariableType {
	return &e
}
func (e *ListSharedEnvVariableType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		fallthrough
	case "system":
		fallthrough
	case "plain":
		*e = ListSharedEnvVariableType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSharedEnvVariableType: %v", v)
	}
}

// ListSharedEnvVariableTarget - environments this env variable targets
type ListSharedEnvVariableTarget string

const (
	ListSharedEnvVariableTargetProduction  ListSharedEnvVariableTarget = "production"
	ListSharedEnvVariableTargetPreview     ListSharedEnvVariableTarget = "preview"
	ListSharedEnvVariableTargetDevelopment ListSharedEnvVariableTarget = "development"
)

func (e ListSharedEnvVariableTarget) ToPointer() *ListSharedEnvVariableTarget {
	return &e
}
func (e *ListSharedEnvVariableTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = ListSharedEnvVariableTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSharedEnvVariableTarget: %v", v)
	}
}

type Data struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *ListSharedEnvVariableType `json:"type,omitempty"`
	// environments this env variable targets
	Target []ListSharedEnvVariableTarget `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string `json:"lastEditedByDisplayName,omitempty"`
}

func (d Data) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *Data) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Data) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Data) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Data) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Data) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Data) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Data) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *Data) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Data) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Data) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Data) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Data) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Data) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Data) GetType() *ListSharedEnvVariableType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Data) GetTarget() []ListSharedEnvVariableTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Data) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *Data) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Data) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Data) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

type ListSharedEnvVariableResponseBody struct {
	Data []Data `json:"data"`
	// This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
	Pagination components.Pagination `json:"pagination"`
}

func (o *ListSharedEnvVariableResponseBody) GetData() []Data {
	if o == nil {
		return []Data{}
	}
	return o.Data
}

func (o *ListSharedEnvVariableResponseBody) GetPagination() components.Pagination {
	if o == nil {
		return components.Pagination{}
	}
	return o.Pagination
}

type ListSharedEnvVariableResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ListSharedEnvVariableResponseBody
}

func (o *ListSharedEnvVariableResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListSharedEnvVariableResponse) GetObject() *ListSharedEnvVariableResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
