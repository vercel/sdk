// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type ListUserEventsRequest struct {
	// Maximum number of items which may be returned.
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Timestamp to only include items created since then.
	Since *string `queryParam:"style=form,explode=true,name=since"`
	// Timestamp to only include items created until then.
	Until *string `queryParam:"style=form,explode=true,name=until"`
	// Comma-delimited list of event \"types\" to filter the results by.
	Types *string `queryParam:"style=form,explode=true,name=types"`
	// When retrieving events for a Team, the `userId` parameter may be specified to filter events generated by a specific member of the Team.
	UserID *string `queryParam:"style=form,explode=true,name=userId"`
	// When set to `true`, the response will include the `payload` field for each event.
	WithPayload *string `queryParam:"style=form,explode=true,name=withPayload"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ListUserEventsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListUserEventsRequest) GetSince() *string {
	if o == nil {
		return nil
	}
	return o.Since
}

func (o *ListUserEventsRequest) GetUntil() *string {
	if o == nil {
		return nil
	}
	return o.Until
}

func (o *ListUserEventsRequest) GetTypes() *string {
	if o == nil {
		return nil
	}
	return o.Types
}

func (o *ListUserEventsRequest) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *ListUserEventsRequest) GetWithPayload() *string {
	if o == nil {
		return nil
	}
	return o.WithPayload
}

func (o *ListUserEventsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ListUserEventsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// ListUserEventsResponseBody - Successful response.
type ListUserEventsResponseBody struct {
	// Array of events generated by the User.
	Events []components.UserEvent `json:"events"`
}

func (o *ListUserEventsResponseBody) GetEvents() []components.UserEvent {
	if o == nil {
		return []components.UserEvent{}
	}
	return o.Events
}

type ListUserEventsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successful response.
	Object *ListUserEventsResponseBody
}

func (o *ListUserEventsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ListUserEventsResponse) GetObject() *ListUserEventsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
