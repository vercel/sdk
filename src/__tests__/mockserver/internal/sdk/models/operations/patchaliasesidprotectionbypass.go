// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type RequestBodyScope string

const (
	RequestBodyScopeAliasProtectionOverride RequestBodyScope = "alias-protection-override"
)

func (e RequestBodyScope) ToPointer() *RequestBodyScope {
	return &e
}
func (e *RequestBodyScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "alias-protection-override":
		*e = RequestBodyScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestBodyScope: %v", v)
	}
}

type PatchAliasesIDProtectionBypassRequestBodyAction string

const (
	PatchAliasesIDProtectionBypassRequestBodyActionCreate PatchAliasesIDProtectionBypassRequestBodyAction = "create"
	PatchAliasesIDProtectionBypassRequestBodyActionRevoke PatchAliasesIDProtectionBypassRequestBodyAction = "revoke"
)

func (e PatchAliasesIDProtectionBypassRequestBodyAction) ToPointer() *PatchAliasesIDProtectionBypassRequestBodyAction {
	return &e
}
func (e *PatchAliasesIDProtectionBypassRequestBodyAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "create":
		fallthrough
	case "revoke":
		*e = PatchAliasesIDProtectionBypassRequestBodyAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchAliasesIDProtectionBypassRequestBodyAction: %v", v)
	}
}

type Override struct {
	Scope  RequestBodyScope                                `json:"scope"`
	Action PatchAliasesIDProtectionBypassRequestBodyAction `json:"action"`
}

func (o *Override) GetScope() RequestBodyScope {
	if o == nil {
		return RequestBodyScope("")
	}
	return o.Scope
}

func (o *Override) GetAction() PatchAliasesIDProtectionBypassRequestBodyAction {
	if o == nil {
		return PatchAliasesIDProtectionBypassRequestBodyAction("")
	}
	return o.Action
}

type RequestBody3 struct {
	Override Override `json:"override"`
}

func (o *RequestBody3) GetOverride() Override {
	if o == nil {
		return Override{}
	}
	return o.Override
}

// ScopeAccess - Invitation status for the user scoped bypass.
type ScopeAccess string

const (
	ScopeAccessDenied  ScopeAccess = "denied"
	ScopeAccessGranted ScopeAccess = "granted"
)

func (e ScopeAccess) ToPointer() *ScopeAccess {
	return &e
}
func (e *ScopeAccess) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "denied":
		fallthrough
	case "granted":
		*e = ScopeAccess(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ScopeAccess: %v", v)
	}
}

type Scope2 struct {
	// Specified user id for the scoped bypass.
	UserID *string `json:"userId,omitempty"`
	// Specified email for the scoped bypass.
	Email string `json:"email"`
	// Invitation status for the user scoped bypass.
	Access ScopeAccess `json:"access"`
}

func (o *Scope2) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *Scope2) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *Scope2) GetAccess() ScopeAccess {
	if o == nil {
		return ScopeAccess("")
	}
	return o.Access
}

// Access - Invitation status for the user scoped bypass.
type Access string

const (
	AccessDenied  Access = "denied"
	AccessGranted Access = "granted"
)

func (e Access) ToPointer() *Access {
	return &e
}
func (e *Access) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "denied":
		fallthrough
	case "granted":
		*e = Access(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Access: %v", v)
	}
}

type Scope1 struct {
	// Specified user id for the scoped bypass.
	UserID string `json:"userId"`
	// Specified email for the scoped bypass.
	Email *string `json:"email,omitempty"`
	// Invitation status for the user scoped bypass.
	Access Access `json:"access"`
}

func (o *Scope1) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *Scope1) GetEmail() *string {
	if o == nil {
		return nil
	}
	return o.Email
}

func (o *Scope1) GetAccess() Access {
	if o == nil {
		return Access("")
	}
	return o.Access
}

type ScopeType string

const (
	ScopeTypeScope1 ScopeType = "scope_1"
	ScopeTypeScope2 ScopeType = "scope_2"
)

// Scope - Instructions for creating a user scoped protection bypass
type Scope struct {
	Scope1 *Scope1
	Scope2 *Scope2

	Type ScopeType
}

func CreateScopeScope1(scope1 Scope1) Scope {
	typ := ScopeTypeScope1

	return Scope{
		Scope1: &scope1,
		Type:   typ,
	}
}

func CreateScopeScope2(scope2 Scope2) Scope {
	typ := ScopeTypeScope2

	return Scope{
		Scope2: &scope2,
		Type:   typ,
	}
}

func (u *Scope) UnmarshalJSON(data []byte) error {

	var scope1 Scope1 = Scope1{}
	if err := utils.UnmarshalJSON(data, &scope1, "", true, true); err == nil {
		u.Scope1 = &scope1
		u.Type = ScopeTypeScope1
		return nil
	}

	var scope2 Scope2 = Scope2{}
	if err := utils.UnmarshalJSON(data, &scope2, "", true, true); err == nil {
		u.Scope2 = &scope2
		u.Type = ScopeTypeScope2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Scope", string(data))
}

func (u Scope) MarshalJSON() ([]byte, error) {
	if u.Scope1 != nil {
		return utils.MarshalJSON(u.Scope1, "", true)
	}

	if u.Scope2 != nil {
		return utils.MarshalJSON(u.Scope2, "", true)
	}

	return nil, errors.New("could not marshal union type Scope: all fields are null")
}

type RequestBody2 struct {
	// Instructions for creating a user scoped protection bypass
	Scope Scope `json:"scope"`
}

func (o *RequestBody2) GetScope() Scope {
	if o == nil {
		return Scope{}
	}
	return o.Scope
}

// RequestBodyRevoke - Optional instructions for revoking and regenerating a shareable link
type RequestBodyRevoke struct {
	// Sharebale link to revoked
	Secret string `json:"secret"`
	// Whether or not a new shareable link should be created after the provided secret is revoked
	Regenerate bool `json:"regenerate"`
}

func (o *RequestBodyRevoke) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *RequestBodyRevoke) GetRegenerate() bool {
	if o == nil {
		return false
	}
	return o.Regenerate
}

type RequestBody1 struct {
	// Optional instructions for revoking and regenerating a shareable link
	Revoke *RequestBodyRevoke `json:"revoke,omitempty"`
}

func (o *RequestBody1) GetRevoke() *RequestBodyRevoke {
	if o == nil {
		return nil
	}
	return o.Revoke
}

type PatchAliasesIDProtectionBypassRequestBodyType string

const (
	PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody1 PatchAliasesIDProtectionBypassRequestBodyType = "requestBody_1"
	PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody2 PatchAliasesIDProtectionBypassRequestBodyType = "requestBody_2"
	PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody3 PatchAliasesIDProtectionBypassRequestBodyType = "requestBody_3"
)

type PatchAliasesIDProtectionBypassRequestBody struct {
	RequestBody1 *RequestBody1
	RequestBody2 *RequestBody2
	RequestBody3 *RequestBody3

	Type PatchAliasesIDProtectionBypassRequestBodyType
}

func CreatePatchAliasesIDProtectionBypassRequestBodyRequestBody1(requestBody1 RequestBody1) PatchAliasesIDProtectionBypassRequestBody {
	typ := PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody1

	return PatchAliasesIDProtectionBypassRequestBody{
		RequestBody1: &requestBody1,
		Type:         typ,
	}
}

func CreatePatchAliasesIDProtectionBypassRequestBodyRequestBody2(requestBody2 RequestBody2) PatchAliasesIDProtectionBypassRequestBody {
	typ := PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody2

	return PatchAliasesIDProtectionBypassRequestBody{
		RequestBody2: &requestBody2,
		Type:         typ,
	}
}

func CreatePatchAliasesIDProtectionBypassRequestBodyRequestBody3(requestBody3 RequestBody3) PatchAliasesIDProtectionBypassRequestBody {
	typ := PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody3

	return PatchAliasesIDProtectionBypassRequestBody{
		RequestBody3: &requestBody3,
		Type:         typ,
	}
}

func (u *PatchAliasesIDProtectionBypassRequestBody) UnmarshalJSON(data []byte) error {

	var requestBody1 RequestBody1 = RequestBody1{}
	if err := utils.UnmarshalJSON(data, &requestBody1, "", true, true); err == nil {
		u.RequestBody1 = &requestBody1
		u.Type = PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody1
		return nil
	}

	var requestBody2 RequestBody2 = RequestBody2{}
	if err := utils.UnmarshalJSON(data, &requestBody2, "", true, true); err == nil {
		u.RequestBody2 = &requestBody2
		u.Type = PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody2
		return nil
	}

	var requestBody3 RequestBody3 = RequestBody3{}
	if err := utils.UnmarshalJSON(data, &requestBody3, "", true, true); err == nil {
		u.RequestBody3 = &requestBody3
		u.Type = PatchAliasesIDProtectionBypassRequestBodyTypeRequestBody3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PatchAliasesIDProtectionBypassRequestBody", string(data))
}

func (u PatchAliasesIDProtectionBypassRequestBody) MarshalJSON() ([]byte, error) {
	if u.RequestBody1 != nil {
		return utils.MarshalJSON(u.RequestBody1, "", true)
	}

	if u.RequestBody2 != nil {
		return utils.MarshalJSON(u.RequestBody2, "", true)
	}

	if u.RequestBody3 != nil {
		return utils.MarshalJSON(u.RequestBody3, "", true)
	}

	return nil, errors.New("could not marshal union type PatchAliasesIDProtectionBypassRequestBody: all fields are null")
}

type PatchAliasesIDProtectionBypassRequest struct {
	// The alias or deployment ID
	ID          string                                     `pathParam:"style=simple,explode=false,name=id"`
	RequestBody *PatchAliasesIDProtectionBypassRequestBody `request:"mediaType=application/json"`
}

func (o *PatchAliasesIDProtectionBypassRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PatchAliasesIDProtectionBypassRequest) GetRequestBody() *PatchAliasesIDProtectionBypassRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type PatchAliasesIDProtectionBypassResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   map[string]any
}

func (o *PatchAliasesIDProtectionBypassResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *PatchAliasesIDProtectionBypassResponse) GetObject() map[string]any {
	if o == nil {
		return nil
	}
	return o.Object
}
