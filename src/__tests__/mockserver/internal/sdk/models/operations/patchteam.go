// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type Roles struct {
	AccessGroupID string `json:"accessGroupId"`
}

func (o *Roles) GetAccessGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupID
}

type RolesEnum string

const (
	RolesEnumOwner         RolesEnum = "OWNER"
	RolesEnumMember        RolesEnum = "MEMBER"
	RolesEnumDeveloper     RolesEnum = "DEVELOPER"
	RolesEnumSecurity      RolesEnum = "SECURITY"
	RolesEnumBilling       RolesEnum = "BILLING"
	RolesEnumViewer        RolesEnum = "VIEWER"
	RolesEnumViewerForPlus RolesEnum = "VIEWER_FOR_PLUS"
	RolesEnumContributor   RolesEnum = "CONTRIBUTOR"
)

func (e RolesEnum) ToPointer() *RolesEnum {
	return &e
}
func (e *RolesEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "OWNER":
		fallthrough
	case "MEMBER":
		fallthrough
	case "DEVELOPER":
		fallthrough
	case "SECURITY":
		fallthrough
	case "BILLING":
		fallthrough
	case "VIEWER":
		fallthrough
	case "VIEWER_FOR_PLUS":
		fallthrough
	case "CONTRIBUTOR":
		*e = RolesEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RolesEnum: %v", v)
	}
}

type RolesUnionType string

const (
	RolesUnionTypeRolesEnum RolesUnionType = "roles_enum"
	RolesUnionTypeRoles     RolesUnionType = "roles"
)

type RolesUnion struct {
	RolesEnum *RolesEnum `queryParam:"inline"`
	Roles     *Roles     `queryParam:"inline"`

	Type RolesUnionType
}

func CreateRolesUnionRolesEnum(rolesEnum RolesEnum) RolesUnion {
	typ := RolesUnionTypeRolesEnum

	return RolesUnion{
		RolesEnum: &rolesEnum,
		Type:      typ,
	}
}

func CreateRolesUnionRoles(roles Roles) RolesUnion {
	typ := RolesUnionTypeRoles

	return RolesUnion{
		Roles: &roles,
		Type:  typ,
	}
}

func (u *RolesUnion) UnmarshalJSON(data []byte) error {

	var roles Roles = Roles{}
	if err := utils.UnmarshalJSON(data, &roles, "", true, true); err == nil {
		u.Roles = &roles
		u.Type = RolesUnionTypeRoles
		return nil
	}

	var rolesEnum RolesEnum = RolesEnum("")
	if err := utils.UnmarshalJSON(data, &rolesEnum, "", true, true); err == nil {
		u.RolesEnum = &rolesEnum
		u.Type = RolesUnionTypeRolesEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RolesUnion", string(data))
}

func (u RolesUnion) MarshalJSON() ([]byte, error) {
	if u.RolesEnum != nil {
		return utils.MarshalJSON(u.RolesEnum, "", true)
	}

	if u.Roles != nil {
		return utils.MarshalJSON(u.Roles, "", true)
	}

	return nil, errors.New("could not marshal union type RolesUnion: all fields are null")
}

type Saml struct {
	// Require that members of the team use SAML Single Sign-On.
	Enforced *bool `json:"enforced,omitempty"`
	// Directory groups to role or access group mappings.
	Roles map[string]RolesUnion `json:"roles,omitempty"`
}

func (o *Saml) GetEnforced() *bool {
	if o == nil {
		return nil
	}
	return o.Enforced
}

func (o *Saml) GetRoles() map[string]RolesUnion {
	if o == nil {
		return nil
	}
	return o.Roles
}

// RemoteCaching - Whether or not remote caching is enabled for the team
type RemoteCaching struct {
	// Enable or disable remote caching for the team.
	Enabled *bool `json:"enabled,omitempty"`
}

func (o *RemoteCaching) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

// PatchTeamPasswordProtectionDeploymentType - Specify if the password will apply to every Deployment Target or just Preview
type PatchTeamPasswordProtectionDeploymentType string

const (
	PatchTeamPasswordProtectionDeploymentTypeAll                              PatchTeamPasswordProtectionDeploymentType = "all"
	PatchTeamPasswordProtectionDeploymentTypePreview                          PatchTeamPasswordProtectionDeploymentType = "preview"
	PatchTeamPasswordProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews PatchTeamPasswordProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
	PatchTeamPasswordProtectionDeploymentTypeAllExceptCustomDomains           PatchTeamPasswordProtectionDeploymentType = "all_except_custom_domains"
)

func (e PatchTeamPasswordProtectionDeploymentType) ToPointer() *PatchTeamPasswordProtectionDeploymentType {
	return &e
}
func (e *PatchTeamPasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "all_except_custom_domains":
		*e = PatchTeamPasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchTeamPasswordProtectionDeploymentType: %v", v)
	}
}

// PatchTeamPasswordProtection - Allows to protect project deployments with a password
type PatchTeamPasswordProtection struct {
	// Specify if the password will apply to every Deployment Target or just Preview
	DeploymentType PatchTeamPasswordProtectionDeploymentType `json:"deploymentType"`
	// The password that will be used to protect Project Deployments
	Password *string `json:"password,omitempty"`
}

func (o *PatchTeamPasswordProtection) GetDeploymentType() PatchTeamPasswordProtectionDeploymentType {
	if o == nil {
		return PatchTeamPasswordProtectionDeploymentType("")
	}
	return o.DeploymentType
}

func (o *PatchTeamPasswordProtection) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

// PatchTeamSsoProtectionDeploymentType - Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
type PatchTeamSsoProtectionDeploymentType string

const (
	PatchTeamSsoProtectionDeploymentTypeAll                              PatchTeamSsoProtectionDeploymentType = "all"
	PatchTeamSsoProtectionDeploymentTypePreview                          PatchTeamSsoProtectionDeploymentType = "preview"
	PatchTeamSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews PatchTeamSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
	PatchTeamSsoProtectionDeploymentTypeAllExceptCustomDomains           PatchTeamSsoProtectionDeploymentType = "all_except_custom_domains"
)

func (e PatchTeamSsoProtectionDeploymentType) ToPointer() *PatchTeamSsoProtectionDeploymentType {
	return &e
}
func (e *PatchTeamSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		fallthrough
	case "all_except_custom_domains":
		*e = PatchTeamSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PatchTeamSsoProtectionDeploymentType: %v", v)
	}
}

// PatchTeamSsoProtection - Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
type PatchTeamSsoProtection struct {
	// Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
	DeploymentType *PatchTeamSsoProtectionDeploymentType `default:"preview" json:"deploymentType"`
}

func (p PatchTeamSsoProtection) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PatchTeamSsoProtection) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *PatchTeamSsoProtection) GetDeploymentType() *PatchTeamSsoProtectionDeploymentType {
	if o == nil {
		return nil
	}
	return o.DeploymentType
}

// DefaultDeploymentProtection - Default deployment protection settings for new projects.
type DefaultDeploymentProtection struct {
	// Allows to protect project deployments with a password
	PasswordProtection *PatchTeamPasswordProtection `json:"passwordProtection,omitempty"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
	SsoProtection *PatchTeamSsoProtection `json:"ssoProtection,omitempty"`
}

func (o *DefaultDeploymentProtection) GetPasswordProtection() *PatchTeamPasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *DefaultDeploymentProtection) GetSsoProtection() *PatchTeamSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

type PatchTeamRequestBody struct {
	// The hash value of an uploaded image.
	Avatar *string `json:"avatar,omitempty"`
	// A short text that describes the team.
	Description *string `json:"description,omitempty"`
	EmailDomain *string `json:"emailDomain,omitempty"`
	// The name of the team.
	Name *string `json:"name,omitempty"`
	// Suffix that will be used for all preview deployments.
	PreviewDeploymentSuffix *string `json:"previewDeploymentSuffix,omitempty"`
	// Create a new invite code and replace the current one.
	RegenerateInviteCode *bool `json:"regenerateInviteCode,omitempty"`
	Saml                 *Saml `json:"saml,omitempty"`
	// A new slug for the team.
	Slug *string `json:"slug,omitempty"`
	// Enable preview toolbar: one of on, off or default.
	EnablePreviewFeedback *string `json:"enablePreviewFeedback,omitempty"`
	// Enable production toolbar: one of on, off or default.
	EnableProductionFeedback *string `json:"enableProductionFeedback,omitempty"`
	// Sensitive environment variable policy: one of on, off or default.
	SensitiveEnvironmentVariablePolicy *string `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	// Whether or not remote caching is enabled for the team
	RemoteCaching *RemoteCaching `json:"remoteCaching,omitempty"`
	// Display or hide IP addresses in Monitoring queries.
	HideIPAddresses *bool `json:"hideIpAddresses,omitempty"`
	// Display or hide IP addresses in Log Drains.
	HideIPAddressesInLogDrains *bool `json:"hideIpAddressesInLogDrains,omitempty"`
	// Default deployment protection settings for new projects.
	DefaultDeploymentProtection *DefaultDeploymentProtection `json:"defaultDeploymentProtection,omitempty"`
}

func (o *PatchTeamRequestBody) GetAvatar() *string {
	if o == nil {
		return nil
	}
	return o.Avatar
}

func (o *PatchTeamRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PatchTeamRequestBody) GetEmailDomain() *string {
	if o == nil {
		return nil
	}
	return o.EmailDomain
}

func (o *PatchTeamRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *PatchTeamRequestBody) GetPreviewDeploymentSuffix() *string {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *PatchTeamRequestBody) GetRegenerateInviteCode() *bool {
	if o == nil {
		return nil
	}
	return o.RegenerateInviteCode
}

func (o *PatchTeamRequestBody) GetSaml() *Saml {
	if o == nil {
		return nil
	}
	return o.Saml
}

func (o *PatchTeamRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PatchTeamRequestBody) GetEnablePreviewFeedback() *string {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *PatchTeamRequestBody) GetEnableProductionFeedback() *string {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *PatchTeamRequestBody) GetSensitiveEnvironmentVariablePolicy() *string {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *PatchTeamRequestBody) GetRemoteCaching() *RemoteCaching {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *PatchTeamRequestBody) GetHideIPAddresses() *bool {
	if o == nil {
		return nil
	}
	return o.HideIPAddresses
}

func (o *PatchTeamRequestBody) GetHideIPAddressesInLogDrains() *bool {
	if o == nil {
		return nil
	}
	return o.HideIPAddressesInLogDrains
}

func (o *PatchTeamRequestBody) GetDefaultDeploymentProtection() *DefaultDeploymentProtection {
	if o == nil {
		return nil
	}
	return o.DefaultDeploymentProtection
}

type PatchTeamRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID string `pathParam:"style=simple,explode=false,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string              `queryParam:"style=form,explode=true,name=slug"`
	RequestBody PatchTeamRequestBody `request:"mediaType=application/json"`
}

func (o *PatchTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *PatchTeamRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PatchTeamRequest) GetRequestBody() PatchTeamRequestBody {
	if o == nil {
		return PatchTeamRequestBody{}
	}
	return o.RequestBody
}

type PatchTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Team     *components.Team
}

func (o *PatchTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *PatchTeamResponse) GetTeam() *components.Team {
	if o == nil {
		return nil
	}
	return o.Team
}
