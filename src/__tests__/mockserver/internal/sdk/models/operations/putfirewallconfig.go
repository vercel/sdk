// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type SdActionRequest string

const (
	SdActionRequestDeny SdActionRequest = "deny"
	SdActionRequestLog  SdActionRequest = "log"
)

func (e SdActionRequest) ToPointer() *SdActionRequest {
	return &e
}
func (e *SdActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = SdActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SdActionRequest: %v", v)
	}
}

// SdRequest - Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
type SdRequest struct {
	Active bool            `json:"active"`
	Action SdActionRequest `json:"action"`
}

func (o *SdRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *SdRequest) GetAction() SdActionRequest {
	if o == nil {
		return SdActionRequest("")
	}
	return o.Action
}

type MaActionRequest string

const (
	MaActionRequestDeny MaActionRequest = "deny"
	MaActionRequestLog  MaActionRequest = "log"
)

func (e MaActionRequest) ToPointer() *MaActionRequest {
	return &e
}
func (e *MaActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = MaActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for MaActionRequest: %v", v)
	}
}

// MaRequest - Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
type MaRequest struct {
	Active bool            `json:"active"`
	Action MaActionRequest `json:"action"`
}

func (o *MaRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *MaRequest) GetAction() MaActionRequest {
	if o == nil {
		return MaActionRequest("")
	}
	return o.Action
}

type LfiActionRequest string

const (
	LfiActionRequestDeny LfiActionRequest = "deny"
	LfiActionRequestLog  LfiActionRequest = "log"
)

func (e LfiActionRequest) ToPointer() *LfiActionRequest {
	return &e
}
func (e *LfiActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = LfiActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for LfiActionRequest: %v", v)
	}
}

// LfiRequest - Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
type LfiRequest struct {
	Active bool             `json:"active"`
	Action LfiActionRequest `json:"action"`
}

func (o *LfiRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *LfiRequest) GetAction() LfiActionRequest {
	if o == nil {
		return LfiActionRequest("")
	}
	return o.Action
}

type RfiActionRequest string

const (
	RfiActionRequestDeny RfiActionRequest = "deny"
	RfiActionRequestLog  RfiActionRequest = "log"
)

func (e RfiActionRequest) ToPointer() *RfiActionRequest {
	return &e
}
func (e *RfiActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = RfiActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RfiActionRequest: %v", v)
	}
}

// RfiRequest - Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
type RfiRequest struct {
	Active bool             `json:"active"`
	Action RfiActionRequest `json:"action"`
}

func (o *RfiRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *RfiRequest) GetAction() RfiActionRequest {
	if o == nil {
		return RfiActionRequest("")
	}
	return o.Action
}

type RceActionRequest string

const (
	RceActionRequestDeny RceActionRequest = "deny"
	RceActionRequestLog  RceActionRequest = "log"
)

func (e RceActionRequest) ToPointer() *RceActionRequest {
	return &e
}
func (e *RceActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = RceActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RceActionRequest: %v", v)
	}
}

// RceRequest - Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
type RceRequest struct {
	Active bool             `json:"active"`
	Action RceActionRequest `json:"action"`
}

func (o *RceRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *RceRequest) GetAction() RceActionRequest {
	if o == nil {
		return RceActionRequest("")
	}
	return o.Action
}

type PhpActionRequest string

const (
	PhpActionRequestDeny PhpActionRequest = "deny"
	PhpActionRequestLog  PhpActionRequest = "log"
)

func (e PhpActionRequest) ToPointer() *PhpActionRequest {
	return &e
}
func (e *PhpActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PhpActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PhpActionRequest: %v", v)
	}
}

// PhpRequest - PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
type PhpRequest struct {
	Active bool             `json:"active"`
	Action PhpActionRequest `json:"action"`
}

func (o *PhpRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PhpRequest) GetAction() PhpActionRequest {
	if o == nil {
		return PhpActionRequest("")
	}
	return o.Action
}

type GenActionRequest string

const (
	GenActionRequestDeny GenActionRequest = "deny"
	GenActionRequestLog  GenActionRequest = "log"
)

func (e GenActionRequest) ToPointer() *GenActionRequest {
	return &e
}
func (e *GenActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = GenActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GenActionRequest: %v", v)
	}
}

// GenRequest - Generic Attack - Provide broad protection from various undefined or novel attack vectors.
type GenRequest struct {
	Active bool             `json:"active"`
	Action GenActionRequest `json:"action"`
}

func (o *GenRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *GenRequest) GetAction() GenActionRequest {
	if o == nil {
		return GenActionRequest("")
	}
	return o.Action
}

type XSSActionRequest string

const (
	XSSActionRequestDeny XSSActionRequest = "deny"
	XSSActionRequestLog  XSSActionRequest = "log"
)

func (e XSSActionRequest) ToPointer() *XSSActionRequest {
	return &e
}
func (e *XSSActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = XSSActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for XSSActionRequest: %v", v)
	}
}

// XSSRequest - XSS Attack - Prevent injection of malicious scripts into trusted webpages.
type XSSRequest struct {
	Active bool             `json:"active"`
	Action XSSActionRequest `json:"action"`
}

func (o *XSSRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *XSSRequest) GetAction() XSSActionRequest {
	if o == nil {
		return XSSActionRequest("")
	}
	return o.Action
}

type SqliActionRequest string

const (
	SqliActionRequestDeny SqliActionRequest = "deny"
	SqliActionRequestLog  SqliActionRequest = "log"
)

func (e SqliActionRequest) ToPointer() *SqliActionRequest {
	return &e
}
func (e *SqliActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = SqliActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SqliActionRequest: %v", v)
	}
}

// SqliRequest - SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
type SqliRequest struct {
	Active bool              `json:"active"`
	Action SqliActionRequest `json:"action"`
}

func (o *SqliRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *SqliRequest) GetAction() SqliActionRequest {
	if o == nil {
		return SqliActionRequest("")
	}
	return o.Action
}

type SfActionRequest string

const (
	SfActionRequestDeny SfActionRequest = "deny"
	SfActionRequestLog  SfActionRequest = "log"
)

func (e SfActionRequest) ToPointer() *SfActionRequest {
	return &e
}
func (e *SfActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = SfActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SfActionRequest: %v", v)
	}
}

// SfRequest - Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
type SfRequest struct {
	Active bool            `json:"active"`
	Action SfActionRequest `json:"action"`
}

func (o *SfRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *SfRequest) GetAction() SfActionRequest {
	if o == nil {
		return SfActionRequest("")
	}
	return o.Action
}

type JavaActionRequest string

const (
	JavaActionRequestDeny JavaActionRequest = "deny"
	JavaActionRequestLog  JavaActionRequest = "log"
)

func (e JavaActionRequest) ToPointer() *JavaActionRequest {
	return &e
}
func (e *JavaActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = JavaActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for JavaActionRequest: %v", v)
	}
}

// JavaRequest - Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
type JavaRequest struct {
	Active bool              `json:"active"`
	Action JavaActionRequest `json:"action"`
}

func (o *JavaRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *JavaRequest) GetAction() JavaActionRequest {
	if o == nil {
		return JavaActionRequest("")
	}
	return o.Action
}

// CrsRequest - Custom Ruleset
type CrsRequest struct {
	// Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
	Sd *SdRequest `json:"sd,omitempty"`
	// Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
	Ma *MaRequest `json:"ma,omitempty"`
	// Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
	Lfi *LfiRequest `json:"lfi,omitempty"`
	// Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
	Rfi *RfiRequest `json:"rfi,omitempty"`
	// Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
	Rce *RceRequest `json:"rce,omitempty"`
	// PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
	Php *PhpRequest `json:"php,omitempty"`
	// Generic Attack - Provide broad protection from various undefined or novel attack vectors.
	Gen *GenRequest `json:"gen,omitempty"`
	// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
	XSS *XSSRequest `json:"xss,omitempty"`
	// SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
	Sqli *SqliRequest `json:"sqli,omitempty"`
	// Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
	Sf *SfRequest `json:"sf,omitempty"`
	// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
	Java *JavaRequest `json:"java,omitempty"`
}

func (o *CrsRequest) GetSd() *SdRequest {
	if o == nil {
		return nil
	}
	return o.Sd
}

func (o *CrsRequest) GetMa() *MaRequest {
	if o == nil {
		return nil
	}
	return o.Ma
}

func (o *CrsRequest) GetLfi() *LfiRequest {
	if o == nil {
		return nil
	}
	return o.Lfi
}

func (o *CrsRequest) GetRfi() *RfiRequest {
	if o == nil {
		return nil
	}
	return o.Rfi
}

func (o *CrsRequest) GetRce() *RceRequest {
	if o == nil {
		return nil
	}
	return o.Rce
}

func (o *CrsRequest) GetPhp() *PhpRequest {
	if o == nil {
		return nil
	}
	return o.Php
}

func (o *CrsRequest) GetGen() *GenRequest {
	if o == nil {
		return nil
	}
	return o.Gen
}

func (o *CrsRequest) GetXSS() *XSSRequest {
	if o == nil {
		return nil
	}
	return o.XSS
}

func (o *CrsRequest) GetSqli() *SqliRequest {
	if o == nil {
		return nil
	}
	return o.Sqli
}

func (o *CrsRequest) GetSf() *SfRequest {
	if o == nil {
		return nil
	}
	return o.Sf
}

func (o *CrsRequest) GetJava() *JavaRequest {
	if o == nil {
		return nil
	}
	return o.Java
}

// PutFirewallConfigTypeRequest - [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
type PutFirewallConfigTypeRequest string

const (
	PutFirewallConfigTypeRequestHost             PutFirewallConfigTypeRequest = "host"
	PutFirewallConfigTypeRequestPath             PutFirewallConfigTypeRequest = "path"
	PutFirewallConfigTypeRequestMethod           PutFirewallConfigTypeRequest = "method"
	PutFirewallConfigTypeRequestHeader           PutFirewallConfigTypeRequest = "header"
	PutFirewallConfigTypeRequestQuery            PutFirewallConfigTypeRequest = "query"
	PutFirewallConfigTypeRequestCookie           PutFirewallConfigTypeRequest = "cookie"
	PutFirewallConfigTypeRequestTargetPath       PutFirewallConfigTypeRequest = "target_path"
	PutFirewallConfigTypeRequestRoute            PutFirewallConfigTypeRequest = "route"
	PutFirewallConfigTypeRequestRawPath          PutFirewallConfigTypeRequest = "raw_path"
	PutFirewallConfigTypeRequestIPAddress        PutFirewallConfigTypeRequest = "ip_address"
	PutFirewallConfigTypeRequestRegion           PutFirewallConfigTypeRequest = "region"
	PutFirewallConfigTypeRequestProtocol         PutFirewallConfigTypeRequest = "protocol"
	PutFirewallConfigTypeRequestScheme           PutFirewallConfigTypeRequest = "scheme"
	PutFirewallConfigTypeRequestEnvironment      PutFirewallConfigTypeRequest = "environment"
	PutFirewallConfigTypeRequestUserAgent        PutFirewallConfigTypeRequest = "user_agent"
	PutFirewallConfigTypeRequestGeoContinent     PutFirewallConfigTypeRequest = "geo_continent"
	PutFirewallConfigTypeRequestGeoCountry       PutFirewallConfigTypeRequest = "geo_country"
	PutFirewallConfigTypeRequestGeoCountryRegion PutFirewallConfigTypeRequest = "geo_country_region"
	PutFirewallConfigTypeRequestGeoCity          PutFirewallConfigTypeRequest = "geo_city"
	PutFirewallConfigTypeRequestGeoAsNumber      PutFirewallConfigTypeRequest = "geo_as_number"
	PutFirewallConfigTypeRequestJa4Digest        PutFirewallConfigTypeRequest = "ja4_digest"
	PutFirewallConfigTypeRequestJa3Digest        PutFirewallConfigTypeRequest = "ja3_digest"
	PutFirewallConfigTypeRequestRateLimitAPIID   PutFirewallConfigTypeRequest = "rate_limit_api_id"
)

func (e PutFirewallConfigTypeRequest) ToPointer() *PutFirewallConfigTypeRequest {
	return &e
}
func (e *PutFirewallConfigTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "route":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "region":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = PutFirewallConfigTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigTypeRequest: %v", v)
	}
}

type PutFirewallConfigOpRequest string

const (
	PutFirewallConfigOpRequestRe   PutFirewallConfigOpRequest = "re"
	PutFirewallConfigOpRequestEq   PutFirewallConfigOpRequest = "eq"
	PutFirewallConfigOpRequestNeq  PutFirewallConfigOpRequest = "neq"
	PutFirewallConfigOpRequestEx   PutFirewallConfigOpRequest = "ex"
	PutFirewallConfigOpRequestNex  PutFirewallConfigOpRequest = "nex"
	PutFirewallConfigOpRequestInc  PutFirewallConfigOpRequest = "inc"
	PutFirewallConfigOpRequestNinc PutFirewallConfigOpRequest = "ninc"
	PutFirewallConfigOpRequestPre  PutFirewallConfigOpRequest = "pre"
	PutFirewallConfigOpRequestSuf  PutFirewallConfigOpRequest = "suf"
	PutFirewallConfigOpRequestSub  PutFirewallConfigOpRequest = "sub"
	PutFirewallConfigOpRequestGt   PutFirewallConfigOpRequest = "gt"
	PutFirewallConfigOpRequestGte  PutFirewallConfigOpRequest = "gte"
	PutFirewallConfigOpRequestLt   PutFirewallConfigOpRequest = "lt"
	PutFirewallConfigOpRequestLte  PutFirewallConfigOpRequest = "lte"
)

func (e PutFirewallConfigOpRequest) ToPointer() *PutFirewallConfigOpRequest {
	return &e
}
func (e *PutFirewallConfigOpRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "ex":
		fallthrough
	case "nex":
		fallthrough
	case "inc":
		fallthrough
	case "ninc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		*e = PutFirewallConfigOpRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigOpRequest: %v", v)
	}
}

type PutFirewallConfigValueRequestType string

const (
	PutFirewallConfigValueRequestTypeStr        PutFirewallConfigValueRequestType = "str"
	PutFirewallConfigValueRequestTypeArrayOfStr PutFirewallConfigValueRequestType = "arrayOfStr"
	PutFirewallConfigValueRequestTypeNumber     PutFirewallConfigValueRequestType = "number"
)

type PutFirewallConfigValueRequest struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`
	Number     *float64 `queryParam:"inline"`

	Type PutFirewallConfigValueRequestType
}

func CreatePutFirewallConfigValueRequestStr(str string) PutFirewallConfigValueRequest {
	typ := PutFirewallConfigValueRequestTypeStr

	return PutFirewallConfigValueRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreatePutFirewallConfigValueRequestArrayOfStr(arrayOfStr []string) PutFirewallConfigValueRequest {
	typ := PutFirewallConfigValueRequestTypeArrayOfStr

	return PutFirewallConfigValueRequest{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreatePutFirewallConfigValueRequestNumber(number float64) PutFirewallConfigValueRequest {
	typ := PutFirewallConfigValueRequestTypeNumber

	return PutFirewallConfigValueRequest{
		Number: &number,
		Type:   typ,
	}
}

func (u *PutFirewallConfigValueRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = PutFirewallConfigValueRequestTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = PutFirewallConfigValueRequestTypeArrayOfStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = PutFirewallConfigValueRequestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PutFirewallConfigValueRequest", string(data))
}

func (u PutFirewallConfigValueRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type PutFirewallConfigValueRequest: all fields are null")
}

type PutFirewallConfigConditionRequest struct {
	// [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
	Type  PutFirewallConfigTypeRequest   `json:"type"`
	Op    PutFirewallConfigOpRequest     `json:"op"`
	Neg   *bool                          `json:"neg,omitempty"`
	Key   *string                        `json:"key,omitempty"`
	Value *PutFirewallConfigValueRequest `json:"value,omitempty"`
}

func (o *PutFirewallConfigConditionRequest) GetType() PutFirewallConfigTypeRequest {
	if o == nil {
		return PutFirewallConfigTypeRequest("")
	}
	return o.Type
}

func (o *PutFirewallConfigConditionRequest) GetOp() PutFirewallConfigOpRequest {
	if o == nil {
		return PutFirewallConfigOpRequest("")
	}
	return o.Op
}

func (o *PutFirewallConfigConditionRequest) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *PutFirewallConfigConditionRequest) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *PutFirewallConfigConditionRequest) GetValue() *PutFirewallConfigValueRequest {
	if o == nil {
		return nil
	}
	return o.Value
}

type PutFirewallConfigConditionGroupRequest struct {
	Conditions []PutFirewallConfigConditionRequest `json:"conditions"`
}

func (o *PutFirewallConfigConditionGroupRequest) GetConditions() []PutFirewallConfigConditionRequest {
	if o == nil {
		return []PutFirewallConfigConditionRequest{}
	}
	return o.Conditions
}

type RuleActionRequestEnum string

const (
	RuleActionRequestEnumLog       RuleActionRequestEnum = "log"
	RuleActionRequestEnumChallenge RuleActionRequestEnum = "challenge"
	RuleActionRequestEnumDeny      RuleActionRequestEnum = "deny"
	RuleActionRequestEnumBypass    RuleActionRequestEnum = "bypass"
	RuleActionRequestEnumRateLimit RuleActionRequestEnum = "rate_limit"
	RuleActionRequestEnumRedirect  RuleActionRequestEnum = "redirect"
)

func (e RuleActionRequestEnum) ToPointer() *RuleActionRequestEnum {
	return &e
}
func (e *RuleActionRequestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = RuleActionRequestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RuleActionRequestEnum: %v", v)
	}
}

type PutFirewallConfigAlgoRequest string

const (
	PutFirewallConfigAlgoRequestFixedWindow PutFirewallConfigAlgoRequest = "fixed_window"
	PutFirewallConfigAlgoRequestTokenBucket PutFirewallConfigAlgoRequest = "token_bucket"
)

func (e PutFirewallConfigAlgoRequest) ToPointer() *PutFirewallConfigAlgoRequest {
	return &e
}
func (e *PutFirewallConfigAlgoRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = PutFirewallConfigAlgoRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigAlgoRequest: %v", v)
	}
}

type RateLimitActionRuleRequestEnum string

const (
	RateLimitActionRuleRequestEnumLog       RateLimitActionRuleRequestEnum = "log"
	RateLimitActionRuleRequestEnumChallenge RateLimitActionRuleRequestEnum = "challenge"
	RateLimitActionRuleRequestEnumDeny      RateLimitActionRuleRequestEnum = "deny"
	RateLimitActionRuleRequestEnumRateLimit RateLimitActionRuleRequestEnum = "rate_limit"
)

func (e RateLimitActionRuleRequestEnum) ToPointer() *RateLimitActionRuleRequestEnum {
	return &e
}
func (e *RateLimitActionRuleRequestEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "rate_limit":
		*e = RateLimitActionRuleRequestEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitActionRuleRequestEnum: %v", v)
	}
}

type RuleActionUnionType string

const (
	RuleActionUnionTypeRateLimitActionRuleRequestEnum RuleActionUnionType = "rateLimit_action_rule_request_enum"
	RuleActionUnionTypeAny                            RuleActionUnionType = "any"
)

type RuleActionUnion struct {
	RateLimitActionRuleRequestEnum *RateLimitActionRuleRequestEnum `queryParam:"inline"`
	Any                            any                             `queryParam:"inline"`

	Type RuleActionUnionType
}

func CreateRuleActionUnionRateLimitActionRuleRequestEnum(rateLimitActionRuleRequestEnum RateLimitActionRuleRequestEnum) RuleActionUnion {
	typ := RuleActionUnionTypeRateLimitActionRuleRequestEnum

	return RuleActionUnion{
		RateLimitActionRuleRequestEnum: &rateLimitActionRuleRequestEnum,
		Type:                           typ,
	}
}

func CreateRuleActionUnionAny(anyT any) RuleActionUnion {
	typ := RuleActionUnionTypeAny

	return RuleActionUnion{
		Any:  anyT,
		Type: typ,
	}
}

func (u *RuleActionUnion) UnmarshalJSON(data []byte) error {

	var rateLimitActionRuleRequestEnum RateLimitActionRuleRequestEnum = RateLimitActionRuleRequestEnum("")
	if err := utils.UnmarshalJSON(data, &rateLimitActionRuleRequestEnum, "", true, nil); err == nil {
		u.RateLimitActionRuleRequestEnum = &rateLimitActionRuleRequestEnum
		u.Type = RuleActionUnionTypeRateLimitActionRuleRequestEnum
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = RuleActionUnionTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RuleActionUnion", string(data))
}

func (u RuleActionUnion) MarshalJSON() ([]byte, error) {
	if u.RateLimitActionRuleRequestEnum != nil {
		return utils.MarshalJSON(u.RateLimitActionRuleRequestEnum, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RuleActionUnion: all fields are null")
}

type PutFirewallConfigRateLimitRequest struct {
	Algo   PutFirewallConfigAlgoRequest `json:"algo"`
	Window float64                      `json:"window"`
	Limit  float64                      `json:"limit"`
	Keys   []string                     `json:"keys"`
	Action *RuleActionUnion             `json:"action,omitempty"`
}

func (p PutFirewallConfigRateLimitRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutFirewallConfigRateLimitRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"algo", "window", "limit", "keys"}); err != nil {
		return err
	}
	return nil
}

func (o *PutFirewallConfigRateLimitRequest) GetAlgo() PutFirewallConfigAlgoRequest {
	if o == nil {
		return PutFirewallConfigAlgoRequest("")
	}
	return o.Algo
}

func (o *PutFirewallConfigRateLimitRequest) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *PutFirewallConfigRateLimitRequest) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *PutFirewallConfigRateLimitRequest) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *PutFirewallConfigRateLimitRequest) GetAction() *RuleActionUnion {
	if o == nil {
		return nil
	}
	return o.Action
}

type PutFirewallConfigRateLimitUnionType string

const (
	PutFirewallConfigRateLimitUnionTypePutFirewallConfigRateLimitRequest PutFirewallConfigRateLimitUnionType = "putFirewallConfig_rateLimit_request"
	PutFirewallConfigRateLimitUnionTypeAny                               PutFirewallConfigRateLimitUnionType = "any"
)

type PutFirewallConfigRateLimitUnion struct {
	PutFirewallConfigRateLimitRequest *PutFirewallConfigRateLimitRequest `queryParam:"inline"`
	Any                               any                                `queryParam:"inline"`

	Type PutFirewallConfigRateLimitUnionType
}

func CreatePutFirewallConfigRateLimitUnionPutFirewallConfigRateLimitRequest(putFirewallConfigRateLimitRequest PutFirewallConfigRateLimitRequest) PutFirewallConfigRateLimitUnion {
	typ := PutFirewallConfigRateLimitUnionTypePutFirewallConfigRateLimitRequest

	return PutFirewallConfigRateLimitUnion{
		PutFirewallConfigRateLimitRequest: &putFirewallConfigRateLimitRequest,
		Type:                              typ,
	}
}

func CreatePutFirewallConfigRateLimitUnionAny(anyT any) PutFirewallConfigRateLimitUnion {
	typ := PutFirewallConfigRateLimitUnionTypeAny

	return PutFirewallConfigRateLimitUnion{
		Any:  anyT,
		Type: typ,
	}
}

func (u *PutFirewallConfigRateLimitUnion) UnmarshalJSON(data []byte) error {

	var putFirewallConfigRateLimitRequest PutFirewallConfigRateLimitRequest = PutFirewallConfigRateLimitRequest{}
	if err := utils.UnmarshalJSON(data, &putFirewallConfigRateLimitRequest, "", true, nil); err == nil {
		u.PutFirewallConfigRateLimitRequest = &putFirewallConfigRateLimitRequest
		u.Type = PutFirewallConfigRateLimitUnionTypePutFirewallConfigRateLimitRequest
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = PutFirewallConfigRateLimitUnionTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PutFirewallConfigRateLimitUnion", string(data))
}

func (u PutFirewallConfigRateLimitUnion) MarshalJSON() ([]byte, error) {
	if u.PutFirewallConfigRateLimitRequest != nil {
		return utils.MarshalJSON(u.PutFirewallConfigRateLimitRequest, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type PutFirewallConfigRateLimitUnion: all fields are null")
}

type PutFirewallConfigRedirectRequest struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (p PutFirewallConfigRedirectRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PutFirewallConfigRedirectRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"location", "permanent"}); err != nil {
		return err
	}
	return nil
}

func (o *PutFirewallConfigRedirectRequest) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *PutFirewallConfigRedirectRequest) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type PutFirewallConfigRedirectUnionType string

const (
	PutFirewallConfigRedirectUnionTypePutFirewallConfigRedirectRequest PutFirewallConfigRedirectUnionType = "putFirewallConfig_redirect_request"
	PutFirewallConfigRedirectUnionTypeAny                              PutFirewallConfigRedirectUnionType = "any"
)

type PutFirewallConfigRedirectUnion struct {
	PutFirewallConfigRedirectRequest *PutFirewallConfigRedirectRequest `queryParam:"inline"`
	Any                              any                               `queryParam:"inline"`

	Type PutFirewallConfigRedirectUnionType
}

func CreatePutFirewallConfigRedirectUnionPutFirewallConfigRedirectRequest(putFirewallConfigRedirectRequest PutFirewallConfigRedirectRequest) PutFirewallConfigRedirectUnion {
	typ := PutFirewallConfigRedirectUnionTypePutFirewallConfigRedirectRequest

	return PutFirewallConfigRedirectUnion{
		PutFirewallConfigRedirectRequest: &putFirewallConfigRedirectRequest,
		Type:                             typ,
	}
}

func CreatePutFirewallConfigRedirectUnionAny(anyT any) PutFirewallConfigRedirectUnion {
	typ := PutFirewallConfigRedirectUnionTypeAny

	return PutFirewallConfigRedirectUnion{
		Any:  anyT,
		Type: typ,
	}
}

func (u *PutFirewallConfigRedirectUnion) UnmarshalJSON(data []byte) error {

	var putFirewallConfigRedirectRequest PutFirewallConfigRedirectRequest = PutFirewallConfigRedirectRequest{}
	if err := utils.UnmarshalJSON(data, &putFirewallConfigRedirectRequest, "", true, nil); err == nil {
		u.PutFirewallConfigRedirectRequest = &putFirewallConfigRedirectRequest
		u.Type = PutFirewallConfigRedirectUnionTypePutFirewallConfigRedirectRequest
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, nil); err == nil {
		u.Any = anyVar
		u.Type = PutFirewallConfigRedirectUnionTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PutFirewallConfigRedirectUnion", string(data))
}

func (u PutFirewallConfigRedirectUnion) MarshalJSON() ([]byte, error) {
	if u.PutFirewallConfigRedirectRequest != nil {
		return utils.MarshalJSON(u.PutFirewallConfigRedirectRequest, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type PutFirewallConfigRedirectUnion: all fields are null")
}

type PutFirewallConfigMitigateRequest struct {
	Action         RuleActionRequestEnum            `json:"action"`
	RateLimit      *PutFirewallConfigRateLimitUnion `json:"rateLimit,omitempty"`
	Redirect       *PutFirewallConfigRedirectUnion  `json:"redirect,omitempty"`
	ActionDuration *string                          `json:"actionDuration,omitempty"`
	BypassSystem   *bool                            `json:"bypassSystem,omitempty"`
}

func (o *PutFirewallConfigMitigateRequest) GetAction() RuleActionRequestEnum {
	if o == nil {
		return RuleActionRequestEnum("")
	}
	return o.Action
}

func (o *PutFirewallConfigMitigateRequest) GetRateLimit() *PutFirewallConfigRateLimitUnion {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *PutFirewallConfigMitigateRequest) GetRedirect() *PutFirewallConfigRedirectUnion {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *PutFirewallConfigMitigateRequest) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *PutFirewallConfigMitigateRequest) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type RuleActionRequest struct {
	Mitigate *PutFirewallConfigMitigateRequest `json:"mitigate,omitempty"`
}

func (o *RuleActionRequest) GetMitigate() *PutFirewallConfigMitigateRequest {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type RuleRequest struct {
	ID             *string                                  `json:"id,omitempty"`
	Name           string                                   `json:"name"`
	Description    *string                                  `json:"description,omitempty"`
	Active         bool                                     `json:"active"`
	ConditionGroup []PutFirewallConfigConditionGroupRequest `json:"conditionGroup"`
	Action         RuleActionRequest                        `json:"action"`
}

func (o *RuleRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RuleRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *RuleRequest) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *RuleRequest) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *RuleRequest) GetConditionGroup() []PutFirewallConfigConditionGroupRequest {
	if o == nil {
		return []PutFirewallConfigConditionGroupRequest{}
	}
	return o.ConditionGroup
}

func (o *RuleRequest) GetAction() RuleActionRequest {
	if o == nil {
		return RuleActionRequest{}
	}
	return o.Action
}

type IPActionRequest string

const (
	IPActionRequestDeny      IPActionRequest = "deny"
	IPActionRequestChallenge IPActionRequest = "challenge"
	IPActionRequestLog       IPActionRequest = "log"
	IPActionRequestBypass    IPActionRequest = "bypass"
)

func (e IPActionRequest) ToPointer() *IPActionRequest {
	return &e
}
func (e *IPActionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		*e = IPActionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for IPActionRequest: %v", v)
	}
}

type IPRequest struct {
	ID       *string         `json:"id,omitempty"`
	Hostname string          `json:"hostname"`
	IP       string          `json:"ip"`
	Notes    *string         `json:"notes,omitempty"`
	Action   IPActionRequest `json:"action"`
}

func (o *IPRequest) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IPRequest) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *IPRequest) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *IPRequest) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *IPRequest) GetAction() IPActionRequest {
	if o == nil {
		return IPActionRequest("")
	}
	return o.Action
}

type PutFirewallConfigRequestBody struct {
	FirewallEnabled bool           `json:"firewallEnabled"`
	ManagedRules    map[string]any `json:"managedRules,omitempty"`
	// Custom Ruleset
	Crs          *CrsRequest   `json:"crs,omitempty"`
	Rules        []RuleRequest `json:"rules,omitempty"`
	Ips          []IPRequest   `json:"ips,omitempty"`
	BotIDEnabled *bool         `json:"botIdEnabled,omitempty"`
}

func (o *PutFirewallConfigRequestBody) GetFirewallEnabled() bool {
	if o == nil {
		return false
	}
	return o.FirewallEnabled
}

func (o *PutFirewallConfigRequestBody) GetManagedRules() map[string]any {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

func (o *PutFirewallConfigRequestBody) GetCrs() *CrsRequest {
	if o == nil {
		return nil
	}
	return o.Crs
}

func (o *PutFirewallConfigRequestBody) GetRules() []RuleRequest {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *PutFirewallConfigRequestBody) GetIps() []IPRequest {
	if o == nil {
		return nil
	}
	return o.Ips
}

func (o *PutFirewallConfigRequestBody) GetBotIDEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.BotIDEnabled
}

type PutFirewallConfigRequest struct {
	ProjectID string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                      `queryParam:"style=form,explode=true,name=slug"`
	RequestBody PutFirewallConfigRequestBody `request:"mediaType=application/json"`
}

func (o *PutFirewallConfigRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *PutFirewallConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *PutFirewallConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PutFirewallConfigRequest) GetRequestBody() PutFirewallConfigRequestBody {
	if o == nil {
		return PutFirewallConfigRequestBody{}
	}
	return o.RequestBody
}

type ActiveSdAction string

const (
	ActiveSdActionDeny ActiveSdAction = "deny"
	ActiveSdActionLog  ActiveSdAction = "log"
)

func (e ActiveSdAction) ToPointer() *ActiveSdAction {
	return &e
}
func (e *ActiveSdAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveSdAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveSdAction: %v", v)
	}
}

// ActiveSd - Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
type ActiveSd struct {
	Active bool           `json:"active"`
	Action ActiveSdAction `json:"action"`
}

func (o *ActiveSd) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveSd) GetAction() ActiveSdAction {
	if o == nil {
		return ActiveSdAction("")
	}
	return o.Action
}

type ActiveMaAction string

const (
	ActiveMaActionDeny ActiveMaAction = "deny"
	ActiveMaActionLog  ActiveMaAction = "log"
)

func (e ActiveMaAction) ToPointer() *ActiveMaAction {
	return &e
}
func (e *ActiveMaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveMaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveMaAction: %v", v)
	}
}

// ActiveMa - Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
type ActiveMa struct {
	Active bool           `json:"active"`
	Action ActiveMaAction `json:"action"`
}

func (o *ActiveMa) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveMa) GetAction() ActiveMaAction {
	if o == nil {
		return ActiveMaAction("")
	}
	return o.Action
}

type ActiveLfiAction string

const (
	ActiveLfiActionDeny ActiveLfiAction = "deny"
	ActiveLfiActionLog  ActiveLfiAction = "log"
)

func (e ActiveLfiAction) ToPointer() *ActiveLfiAction {
	return &e
}
func (e *ActiveLfiAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveLfiAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveLfiAction: %v", v)
	}
}

// ActiveLfi - Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
type ActiveLfi struct {
	Active bool            `json:"active"`
	Action ActiveLfiAction `json:"action"`
}

func (o *ActiveLfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveLfi) GetAction() ActiveLfiAction {
	if o == nil {
		return ActiveLfiAction("")
	}
	return o.Action
}

type ActiveRfiAction string

const (
	ActiveRfiActionDeny ActiveRfiAction = "deny"
	ActiveRfiActionLog  ActiveRfiAction = "log"
)

func (e ActiveRfiAction) ToPointer() *ActiveRfiAction {
	return &e
}
func (e *ActiveRfiAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveRfiAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveRfiAction: %v", v)
	}
}

// ActiveRfi - Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
type ActiveRfi struct {
	Active bool            `json:"active"`
	Action ActiveRfiAction `json:"action"`
}

func (o *ActiveRfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveRfi) GetAction() ActiveRfiAction {
	if o == nil {
		return ActiveRfiAction("")
	}
	return o.Action
}

type ActiveRceAction string

const (
	ActiveRceActionDeny ActiveRceAction = "deny"
	ActiveRceActionLog  ActiveRceAction = "log"
)

func (e ActiveRceAction) ToPointer() *ActiveRceAction {
	return &e
}
func (e *ActiveRceAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveRceAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveRceAction: %v", v)
	}
}

// ActiveRce - Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
type ActiveRce struct {
	Active bool            `json:"active"`
	Action ActiveRceAction `json:"action"`
}

func (o *ActiveRce) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveRce) GetAction() ActiveRceAction {
	if o == nil {
		return ActiveRceAction("")
	}
	return o.Action
}

type ActivePhpAction string

const (
	ActivePhpActionDeny ActivePhpAction = "deny"
	ActivePhpActionLog  ActivePhpAction = "log"
)

func (e ActivePhpAction) ToPointer() *ActivePhpAction {
	return &e
}
func (e *ActivePhpAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActivePhpAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActivePhpAction: %v", v)
	}
}

// ActivePhp - PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
type ActivePhp struct {
	Active bool            `json:"active"`
	Action ActivePhpAction `json:"action"`
}

func (o *ActivePhp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActivePhp) GetAction() ActivePhpAction {
	if o == nil {
		return ActivePhpAction("")
	}
	return o.Action
}

type ActiveGenAction string

const (
	ActiveGenActionDeny ActiveGenAction = "deny"
	ActiveGenActionLog  ActiveGenAction = "log"
)

func (e ActiveGenAction) ToPointer() *ActiveGenAction {
	return &e
}
func (e *ActiveGenAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveGenAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveGenAction: %v", v)
	}
}

// ActiveGen - Generic Attack - Provide broad protection from various undefined or novel attack vectors.
type ActiveGen struct {
	Active bool            `json:"active"`
	Action ActiveGenAction `json:"action"`
}

func (o *ActiveGen) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveGen) GetAction() ActiveGenAction {
	if o == nil {
		return ActiveGenAction("")
	}
	return o.Action
}

type ActiveXSSAction string

const (
	ActiveXSSActionDeny ActiveXSSAction = "deny"
	ActiveXSSActionLog  ActiveXSSAction = "log"
)

func (e ActiveXSSAction) ToPointer() *ActiveXSSAction {
	return &e
}
func (e *ActiveXSSAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveXSSAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveXSSAction: %v", v)
	}
}

// ActiveXSS - XSS Attack - Prevent injection of malicious scripts into trusted webpages.
type ActiveXSS struct {
	Active bool            `json:"active"`
	Action ActiveXSSAction `json:"action"`
}

func (o *ActiveXSS) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveXSS) GetAction() ActiveXSSAction {
	if o == nil {
		return ActiveXSSAction("")
	}
	return o.Action
}

type ActiveSqliAction string

const (
	ActiveSqliActionDeny ActiveSqliAction = "deny"
	ActiveSqliActionLog  ActiveSqliAction = "log"
)

func (e ActiveSqliAction) ToPointer() *ActiveSqliAction {
	return &e
}
func (e *ActiveSqliAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveSqliAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveSqliAction: %v", v)
	}
}

// ActiveSqli - SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
type ActiveSqli struct {
	Active bool             `json:"active"`
	Action ActiveSqliAction `json:"action"`
}

func (o *ActiveSqli) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveSqli) GetAction() ActiveSqliAction {
	if o == nil {
		return ActiveSqliAction("")
	}
	return o.Action
}

type ActiveSfAction string

const (
	ActiveSfActionDeny ActiveSfAction = "deny"
	ActiveSfActionLog  ActiveSfAction = "log"
)

func (e ActiveSfAction) ToPointer() *ActiveSfAction {
	return &e
}
func (e *ActiveSfAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveSfAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveSfAction: %v", v)
	}
}

// ActiveSf - Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
type ActiveSf struct {
	Active bool           `json:"active"`
	Action ActiveSfAction `json:"action"`
}

func (o *ActiveSf) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveSf) GetAction() ActiveSfAction {
	if o == nil {
		return ActiveSfAction("")
	}
	return o.Action
}

type ActiveJavaAction string

const (
	ActiveJavaActionDeny ActiveJavaAction = "deny"
	ActiveJavaActionLog  ActiveJavaAction = "log"
)

func (e ActiveJavaAction) ToPointer() *ActiveJavaAction {
	return &e
}
func (e *ActiveJavaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ActiveJavaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveJavaAction: %v", v)
	}
}

// ActiveJava - Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
type ActiveJava struct {
	Active bool             `json:"active"`
	Action ActiveJavaAction `json:"action"`
}

func (o *ActiveJava) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveJava) GetAction() ActiveJavaAction {
	if o == nil {
		return ActiveJavaAction("")
	}
	return o.Action
}

// ActiveCrs - Custom Ruleset
type ActiveCrs struct {
	// Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
	Sd ActiveSd `json:"sd"`
	// Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
	Ma ActiveMa `json:"ma"`
	// Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
	Lfi ActiveLfi `json:"lfi"`
	// Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
	Rfi ActiveRfi `json:"rfi"`
	// Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
	Rce ActiveRce `json:"rce"`
	// PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
	Php ActivePhp `json:"php"`
	// Generic Attack - Provide broad protection from various undefined or novel attack vectors.
	Gen ActiveGen `json:"gen"`
	// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
	XSS ActiveXSS `json:"xss"`
	// SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
	Sqli ActiveSqli `json:"sqli"`
	// Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
	Sf ActiveSf `json:"sf"`
	// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
	Java ActiveJava `json:"java"`
}

func (o *ActiveCrs) GetSd() ActiveSd {
	if o == nil {
		return ActiveSd{}
	}
	return o.Sd
}

func (o *ActiveCrs) GetMa() ActiveMa {
	if o == nil {
		return ActiveMa{}
	}
	return o.Ma
}

func (o *ActiveCrs) GetLfi() ActiveLfi {
	if o == nil {
		return ActiveLfi{}
	}
	return o.Lfi
}

func (o *ActiveCrs) GetRfi() ActiveRfi {
	if o == nil {
		return ActiveRfi{}
	}
	return o.Rfi
}

func (o *ActiveCrs) GetRce() ActiveRce {
	if o == nil {
		return ActiveRce{}
	}
	return o.Rce
}

func (o *ActiveCrs) GetPhp() ActivePhp {
	if o == nil {
		return ActivePhp{}
	}
	return o.Php
}

func (o *ActiveCrs) GetGen() ActiveGen {
	if o == nil {
		return ActiveGen{}
	}
	return o.Gen
}

func (o *ActiveCrs) GetXSS() ActiveXSS {
	if o == nil {
		return ActiveXSS{}
	}
	return o.XSS
}

func (o *ActiveCrs) GetSqli() ActiveSqli {
	if o == nil {
		return ActiveSqli{}
	}
	return o.Sqli
}

func (o *ActiveCrs) GetSf() ActiveSf {
	if o == nil {
		return ActiveSf{}
	}
	return o.Sf
}

func (o *ActiveCrs) GetJava() ActiveJava {
	if o == nil {
		return ActiveJava{}
	}
	return o.Java
}

type ActiveType string

const (
	ActiveTypeHost             ActiveType = "host"
	ActiveTypePath             ActiveType = "path"
	ActiveTypeMethod           ActiveType = "method"
	ActiveTypeHeader           ActiveType = "header"
	ActiveTypeQuery            ActiveType = "query"
	ActiveTypeCookie           ActiveType = "cookie"
	ActiveTypeTargetPath       ActiveType = "target_path"
	ActiveTypeRoute            ActiveType = "route"
	ActiveTypeRawPath          ActiveType = "raw_path"
	ActiveTypeIPAddress        ActiveType = "ip_address"
	ActiveTypeProtocol         ActiveType = "protocol"
	ActiveTypeRegion           ActiveType = "region"
	ActiveTypeScheme           ActiveType = "scheme"
	ActiveTypeEnvironment      ActiveType = "environment"
	ActiveTypeUserAgent        ActiveType = "user_agent"
	ActiveTypeGeoContinent     ActiveType = "geo_continent"
	ActiveTypeGeoCountry       ActiveType = "geo_country"
	ActiveTypeGeoCountryRegion ActiveType = "geo_country_region"
	ActiveTypeGeoCity          ActiveType = "geo_city"
	ActiveTypeGeoAsNumber      ActiveType = "geo_as_number"
	ActiveTypeJa4Digest        ActiveType = "ja4_digest"
	ActiveTypeJa3Digest        ActiveType = "ja3_digest"
	ActiveTypeRateLimitAPIID   ActiveType = "rate_limit_api_id"
	ActiveTypeServerAction     ActiveType = "server_action"
)

func (e ActiveType) ToPointer() *ActiveType {
	return &e
}
func (e *ActiveType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "route":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "region":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		fallthrough
	case "server_action":
		*e = ActiveType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveType: %v", v)
	}
}

type ActiveOp string

const (
	ActiveOpRe   ActiveOp = "re"
	ActiveOpEq   ActiveOp = "eq"
	ActiveOpEx   ActiveOp = "ex"
	ActiveOpInc  ActiveOp = "inc"
	ActiveOpPre  ActiveOp = "pre"
	ActiveOpSuf  ActiveOp = "suf"
	ActiveOpSub  ActiveOp = "sub"
	ActiveOpGt   ActiveOp = "gt"
	ActiveOpGte  ActiveOp = "gte"
	ActiveOpLt   ActiveOp = "lt"
	ActiveOpLte  ActiveOp = "lte"
	ActiveOpNex  ActiveOp = "nex"
	ActiveOpNinc ActiveOp = "ninc"
	ActiveOpNeq  ActiveOp = "neq"
)

func (e ActiveOp) ToPointer() *ActiveOp {
	return &e
}
func (e *ActiveOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "ex":
		fallthrough
	case "inc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		fallthrough
	case "nex":
		fallthrough
	case "ninc":
		fallthrough
	case "neq":
		*e = ActiveOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveOp: %v", v)
	}
}

type ActiveValueType string

const (
	ActiveValueTypeStr        ActiveValueType = "str"
	ActiveValueTypeNumber     ActiveValueType = "number"
	ActiveValueTypeArrayOfStr ActiveValueType = "arrayOfStr"
)

type ActiveValue struct {
	Str        *string  `queryParam:"inline"`
	Number     *float64 `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`

	Type ActiveValueType
}

func CreateActiveValueStr(str string) ActiveValue {
	typ := ActiveValueTypeStr

	return ActiveValue{
		Str:  &str,
		Type: typ,
	}
}

func CreateActiveValueNumber(number float64) ActiveValue {
	typ := ActiveValueTypeNumber

	return ActiveValue{
		Number: &number,
		Type:   typ,
	}
}

func CreateActiveValueArrayOfStr(arrayOfStr []string) ActiveValue {
	typ := ActiveValueTypeArrayOfStr

	return ActiveValue{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *ActiveValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = ActiveValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, nil); err == nil {
		u.Number = &number
		u.Type = ActiveValueTypeNumber
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, nil); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ActiveValueTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ActiveValue", string(data))
}

func (u ActiveValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type ActiveValue: all fields are null")
}

type ActiveCondition struct {
	Type  ActiveType   `json:"type"`
	Op    ActiveOp     `json:"op"`
	Neg   *bool        `json:"neg,omitempty"`
	Key   *string      `json:"key,omitempty"`
	Value *ActiveValue `json:"value,omitempty"`
}

func (o *ActiveCondition) GetType() ActiveType {
	if o == nil {
		return ActiveType("")
	}
	return o.Type
}

func (o *ActiveCondition) GetOp() ActiveOp {
	if o == nil {
		return ActiveOp("")
	}
	return o.Op
}

func (o *ActiveCondition) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *ActiveCondition) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *ActiveCondition) GetValue() *ActiveValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type ActiveConditionGroup struct {
	Conditions []ActiveCondition `json:"conditions"`
}

func (o *ActiveConditionGroup) GetConditions() []ActiveCondition {
	if o == nil {
		return []ActiveCondition{}
	}
	return o.Conditions
}

type ActiveMitigateAction string

const (
	ActiveMitigateActionDeny      ActiveMitigateAction = "deny"
	ActiveMitigateActionLog       ActiveMitigateAction = "log"
	ActiveMitigateActionChallenge ActiveMitigateAction = "challenge"
	ActiveMitigateActionBypass    ActiveMitigateAction = "bypass"
	ActiveMitigateActionRateLimit ActiveMitigateAction = "rate_limit"
	ActiveMitigateActionRedirect  ActiveMitigateAction = "redirect"
)

func (e ActiveMitigateAction) ToPointer() *ActiveMitigateAction {
	return &e
}
func (e *ActiveMitigateAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = ActiveMitigateAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveMitigateAction: %v", v)
	}
}

type ActiveAlgo string

const (
	ActiveAlgoFixedWindow ActiveAlgo = "fixed_window"
	ActiveAlgoTokenBucket ActiveAlgo = "token_bucket"
)

func (e ActiveAlgo) ToPointer() *ActiveAlgo {
	return &e
}
func (e *ActiveAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = ActiveAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveAlgo: %v", v)
	}
}

type ActiveRateLimitAction string

const (
	ActiveRateLimitActionDeny      ActiveRateLimitAction = "deny"
	ActiveRateLimitActionLog       ActiveRateLimitAction = "log"
	ActiveRateLimitActionChallenge ActiveRateLimitAction = "challenge"
	ActiveRateLimitActionRateLimit ActiveRateLimitAction = "rate_limit"
)

func (e ActiveRateLimitAction) ToPointer() *ActiveRateLimitAction {
	return &e
}
func (e *ActiveRateLimitAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "rate_limit":
		*e = ActiveRateLimitAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveRateLimitAction: %v", v)
	}
}

type ActiveRateLimit struct {
	Algo   ActiveAlgo             `json:"algo"`
	Window float64                `json:"window"`
	Limit  float64                `json:"limit"`
	Keys   []string               `json:"keys"`
	Action *ActiveRateLimitAction `json:"action,omitempty"`
}

func (o *ActiveRateLimit) GetAlgo() ActiveAlgo {
	if o == nil {
		return ActiveAlgo("")
	}
	return o.Algo
}

func (o *ActiveRateLimit) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *ActiveRateLimit) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *ActiveRateLimit) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *ActiveRateLimit) GetAction() *ActiveRateLimitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type ActiveRedirect struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *ActiveRedirect) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *ActiveRedirect) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type ActiveMitigate struct {
	Action         ActiveMitigateAction `json:"action"`
	RateLimit      *ActiveRateLimit     `json:"rateLimit,omitempty"`
	Redirect       *ActiveRedirect      `json:"redirect,omitempty"`
	ActionDuration *string              `json:"actionDuration,omitempty"`
	BypassSystem   *bool                `json:"bypassSystem,omitempty"`
}

func (o *ActiveMitigate) GetAction() ActiveMitigateAction {
	if o == nil {
		return ActiveMitigateAction("")
	}
	return o.Action
}

func (o *ActiveMitigate) GetRateLimit() *ActiveRateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *ActiveMitigate) GetRedirect() *ActiveRedirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *ActiveMitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *ActiveMitigate) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type ActiveRuleAction struct {
	Mitigate *ActiveMitigate `json:"mitigate,omitempty"`
}

func (o *ActiveRuleAction) GetMitigate() *ActiveMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type ActiveRule struct {
	ID             string                 `json:"id"`
	Name           string                 `json:"name"`
	Description    *string                `json:"description,omitempty"`
	Active         bool                   `json:"active"`
	ConditionGroup []ActiveConditionGroup `json:"conditionGroup"`
	Action         ActiveRuleAction       `json:"action"`
}

func (o *ActiveRule) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ActiveRule) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ActiveRule) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *ActiveRule) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ActiveRule) GetConditionGroup() []ActiveConditionGroup {
	if o == nil {
		return []ActiveConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *ActiveRule) GetAction() ActiveRuleAction {
	if o == nil {
		return ActiveRuleAction{}
	}
	return o.Action
}

type ActiveIPAction string

const (
	ActiveIPActionDeny      ActiveIPAction = "deny"
	ActiveIPActionLog       ActiveIPAction = "log"
	ActiveIPActionChallenge ActiveIPAction = "challenge"
	ActiveIPActionBypass    ActiveIPAction = "bypass"
)

func (e ActiveIPAction) ToPointer() *ActiveIPAction {
	return &e
}
func (e *ActiveIPAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		*e = ActiveIPAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveIPAction: %v", v)
	}
}

type ActiveIP struct {
	ID       string         `json:"id"`
	Hostname string         `json:"hostname"`
	IP       string         `json:"ip"`
	Notes    *string        `json:"notes,omitempty"`
	Action   ActiveIPAction `json:"action"`
}

func (o *ActiveIP) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ActiveIP) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *ActiveIP) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *ActiveIP) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *ActiveIP) GetAction() ActiveIPAction {
	if o == nil {
		return ActiveIPAction("")
	}
	return o.Action
}

type PutFirewallConfigChange struct {
}

type ActiveBotProtectionAction string

const (
	ActiveBotProtectionActionDeny      ActiveBotProtectionAction = "deny"
	ActiveBotProtectionActionLog       ActiveBotProtectionAction = "log"
	ActiveBotProtectionActionChallenge ActiveBotProtectionAction = "challenge"
)

func (e ActiveBotProtectionAction) ToPointer() *ActiveBotProtectionAction {
	return &e
}
func (e *ActiveBotProtectionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = ActiveBotProtectionAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveBotProtectionAction: %v", v)
	}
}

type PutFirewallConfigBotProtection struct {
	Active    bool                       `json:"active"`
	Action    *ActiveBotProtectionAction `json:"action,omitempty"`
	UpdatedAt *string                    `json:"updatedAt,omitempty"`
	UserID    *string                    `json:"userId,omitempty"`
	Username  *string                    `json:"username,omitempty"`
}

func (o *PutFirewallConfigBotProtection) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigBotProtection) GetAction() *ActiveBotProtectionAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PutFirewallConfigBotProtection) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PutFirewallConfigBotProtection) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *PutFirewallConfigBotProtection) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ActiveAiBotsAction string

const (
	ActiveAiBotsActionDeny      ActiveAiBotsAction = "deny"
	ActiveAiBotsActionLog       ActiveAiBotsAction = "log"
	ActiveAiBotsActionChallenge ActiveAiBotsAction = "challenge"
)

func (e ActiveAiBotsAction) ToPointer() *ActiveAiBotsAction {
	return &e
}
func (e *ActiveAiBotsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = ActiveAiBotsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveAiBotsAction: %v", v)
	}
}

type PutFirewallConfigAiBots struct {
	Active    bool                `json:"active"`
	Action    *ActiveAiBotsAction `json:"action,omitempty"`
	UpdatedAt *string             `json:"updatedAt,omitempty"`
	UserID    *string             `json:"userId,omitempty"`
	Username  *string             `json:"username,omitempty"`
}

func (o *PutFirewallConfigAiBots) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigAiBots) GetAction() *ActiveAiBotsAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PutFirewallConfigAiBots) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PutFirewallConfigAiBots) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *PutFirewallConfigAiBots) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type ActiveOwaspAction string

const (
	ActiveOwaspActionDeny      ActiveOwaspAction = "deny"
	ActiveOwaspActionLog       ActiveOwaspAction = "log"
	ActiveOwaspActionChallenge ActiveOwaspAction = "challenge"
)

func (e ActiveOwaspAction) ToPointer() *ActiveOwaspAction {
	return &e
}
func (e *ActiveOwaspAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = ActiveOwaspAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActiveOwaspAction: %v", v)
	}
}

type PutFirewallConfigOwasp struct {
	Active    bool               `json:"active"`
	Action    *ActiveOwaspAction `json:"action,omitempty"`
	UpdatedAt *string            `json:"updatedAt,omitempty"`
	UserID    *string            `json:"userId,omitempty"`
	Username  *string            `json:"username,omitempty"`
}

func (o *PutFirewallConfigOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigOwasp) GetAction() *ActiveOwaspAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PutFirewallConfigOwasp) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PutFirewallConfigOwasp) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *PutFirewallConfigOwasp) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type PutFirewallConfigManagedRules struct {
	BotProtection *PutFirewallConfigBotProtection `json:"bot_protection,omitempty"`
	AiBots        *PutFirewallConfigAiBots        `json:"ai_bots,omitempty"`
	Owasp         *PutFirewallConfigOwasp         `json:"owasp,omitempty"`
}

func (o *PutFirewallConfigManagedRules) GetBotProtection() *PutFirewallConfigBotProtection {
	if o == nil {
		return nil
	}
	return o.BotProtection
}

func (o *PutFirewallConfigManagedRules) GetAiBots() *PutFirewallConfigAiBots {
	if o == nil {
		return nil
	}
	return o.AiBots
}

func (o *PutFirewallConfigManagedRules) GetOwasp() *PutFirewallConfigOwasp {
	if o == nil {
		return nil
	}
	return o.Owasp
}

type Active struct {
	OwnerID         string  `json:"ownerId"`
	ProjectKey      string  `json:"projectKey"`
	ID              string  `json:"id"`
	Version         float64 `json:"version"`
	UpdatedAt       string  `json:"updatedAt"`
	FirewallEnabled bool    `json:"firewallEnabled"`
	// Custom Ruleset
	Crs          ActiveCrs                      `json:"crs"`
	Rules        []ActiveRule                   `json:"rules"`
	Ips          []ActiveIP                     `json:"ips"`
	Changes      []PutFirewallConfigChange      `json:"changes"`
	ManagedRules *PutFirewallConfigManagedRules `json:"managedRules,omitempty"`
	BotIDEnabled *bool                          `json:"botIdEnabled,omitempty"`
}

func (o *Active) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Active) GetProjectKey() string {
	if o == nil {
		return ""
	}
	return o.ProjectKey
}

func (o *Active) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Active) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *Active) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Active) GetFirewallEnabled() bool {
	if o == nil {
		return false
	}
	return o.FirewallEnabled
}

func (o *Active) GetCrs() ActiveCrs {
	if o == nil {
		return ActiveCrs{}
	}
	return o.Crs
}

func (o *Active) GetRules() []ActiveRule {
	if o == nil {
		return []ActiveRule{}
	}
	return o.Rules
}

func (o *Active) GetIps() []ActiveIP {
	if o == nil {
		return []ActiveIP{}
	}
	return o.Ips
}

func (o *Active) GetChanges() []PutFirewallConfigChange {
	if o == nil {
		return []PutFirewallConfigChange{}
	}
	return o.Changes
}

func (o *Active) GetManagedRules() *PutFirewallConfigManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

func (o *Active) GetBotIDEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.BotIDEnabled
}

type PutFirewallConfigResponseBody struct {
	Active Active `json:"active"`
}

func (o *PutFirewallConfigResponseBody) GetActive() Active {
	if o == nil {
		return Active{}
	}
	return o.Active
}

type PutFirewallConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *PutFirewallConfigResponseBody
}

func (o *PutFirewallConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *PutFirewallConfigResponse) GetObject() *PutFirewallConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
