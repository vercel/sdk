// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ManagedRulesAction string

const (
	ManagedRulesActionLog       ManagedRulesAction = "log"
	ManagedRulesActionChallenge ManagedRulesAction = "challenge"
	ManagedRulesActionDeny      ManagedRulesAction = "deny"
)

func (e ManagedRulesAction) ToPointer() *ManagedRulesAction {
	return &e
}
func (e *ManagedRulesAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		*e = ManagedRulesAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ManagedRulesAction: %v", v)
	}
}

type PutFirewallConfigManagedRulesAction string

const (
	PutFirewallConfigManagedRulesActionLog       PutFirewallConfigManagedRulesAction = "log"
	PutFirewallConfigManagedRulesActionChallenge PutFirewallConfigManagedRulesAction = "challenge"
	PutFirewallConfigManagedRulesActionDeny      PutFirewallConfigManagedRulesAction = "deny"
)

func (e PutFirewallConfigManagedRulesAction) ToPointer() *PutFirewallConfigManagedRulesAction {
	return &e
}
func (e *PutFirewallConfigManagedRulesAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		*e = PutFirewallConfigManagedRulesAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigManagedRulesAction: %v", v)
	}
}

type RuleGroups struct {
	Active *bool                                `json:"active,omitempty"`
	Action *PutFirewallConfigManagedRulesAction `json:"action,omitempty"`
}

func (o *RuleGroups) GetActive() *bool {
	if o == nil {
		return nil
	}
	return o.Active
}

func (o *RuleGroups) GetAction() *PutFirewallConfigManagedRulesAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type ManagedRules1 struct {
	Active     bool                  `json:"active"`
	Action     *ManagedRulesAction   `json:"action,omitempty"`
	RuleGroups map[string]RuleGroups `json:"ruleGroups,omitempty"`
}

func (o *ManagedRules1) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *ManagedRules1) GetAction() *ManagedRulesAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *ManagedRules1) GetRuleGroups() map[string]RuleGroups {
	if o == nil {
		return nil
	}
	return o.RuleGroups
}

type ManagedRulesType string

const (
	ManagedRulesTypeManagedRules1 ManagedRulesType = "managedRules_1"
)

type ManagedRules struct {
	ManagedRules1 *ManagedRules1

	Type ManagedRulesType
}

func CreateManagedRulesManagedRules1(managedRules1 ManagedRules1) ManagedRules {
	typ := ManagedRulesTypeManagedRules1

	return ManagedRules{
		ManagedRules1: &managedRules1,
		Type:          typ,
	}
}

func (u *ManagedRules) UnmarshalJSON(data []byte) error {

	var managedRules1 ManagedRules1 = ManagedRules1{}
	if err := utils.UnmarshalJSON(data, &managedRules1, "", true, true); err == nil {
		u.ManagedRules1 = &managedRules1
		u.Type = ManagedRulesTypeManagedRules1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ManagedRules", string(data))
}

func (u ManagedRules) MarshalJSON() ([]byte, error) {
	if u.ManagedRules1 != nil {
		return utils.MarshalJSON(u.ManagedRules1, "", true)
	}

	return nil, errors.New("could not marshal union type ManagedRules: all fields are null")
}

type PutFirewallConfigAction string

const (
	PutFirewallConfigActionDeny PutFirewallConfigAction = "deny"
	PutFirewallConfigActionLog  PutFirewallConfigAction = "log"
)

func (e PutFirewallConfigAction) ToPointer() *PutFirewallConfigAction {
	return &e
}
func (e *PutFirewallConfigAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigAction: %v", v)
	}
}

// Sd - Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
type Sd struct {
	Active bool                    `json:"active"`
	Action PutFirewallConfigAction `json:"action"`
}

func (o *Sd) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Sd) GetAction() PutFirewallConfigAction {
	if o == nil {
		return PutFirewallConfigAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityAction string

const (
	PutFirewallConfigSecurityActionDeny PutFirewallConfigSecurityAction = "deny"
	PutFirewallConfigSecurityActionLog  PutFirewallConfigSecurityAction = "log"
)

func (e PutFirewallConfigSecurityAction) ToPointer() *PutFirewallConfigSecurityAction {
	return &e
}
func (e *PutFirewallConfigSecurityAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityAction: %v", v)
	}
}

// Ma - Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
type Ma struct {
	Active bool                            `json:"active"`
	Action PutFirewallConfigSecurityAction `json:"action"`
}

func (o *Ma) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Ma) GetAction() PutFirewallConfigSecurityAction {
	if o == nil {
		return PutFirewallConfigSecurityAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestAction string

const (
	PutFirewallConfigSecurityRequestActionDeny PutFirewallConfigSecurityRequestAction = "deny"
	PutFirewallConfigSecurityRequestActionLog  PutFirewallConfigSecurityRequestAction = "log"
)

func (e PutFirewallConfigSecurityRequestAction) ToPointer() *PutFirewallConfigSecurityRequestAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestAction: %v", v)
	}
}

// Lfi - Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
type Lfi struct {
	Active bool                                   `json:"active"`
	Action PutFirewallConfigSecurityRequestAction `json:"action"`
}

func (o *Lfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Lfi) GetAction() PutFirewallConfigSecurityRequestAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyActionDeny PutFirewallConfigSecurityRequestRequestBodyAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyActionLog  PutFirewallConfigSecurityRequestRequestBodyAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyAction: %v", v)
	}
}

// Rfi - Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
type Rfi struct {
	Active bool                                              `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyAction `json:"action"`
}

func (o *Rfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Rfi) GetAction() PutFirewallConfigSecurityRequestRequestBodyAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsAction: %v", v)
	}
}

// Rce - Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
type Rce struct {
	Active bool                                                 `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsAction `json:"action"`
}

func (o *Rce) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Rce) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsPhpActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsPhpActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction: %v", v)
	}
}

// Php - PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
type Php struct {
	Active bool                                                    `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction `json:"action"`
}

func (o *Php) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Php) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsPhpAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsGenAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsGenActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsGenAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsGenActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsGenAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsGenAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsGenAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsGenAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsGenAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsGenAction: %v", v)
	}
}

// Gen - Generic Attack - Provide broad protection from various undefined or novel attack vectors.
type Gen struct {
	Active bool                                                    `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsGenAction `json:"action"`
}

func (o *Gen) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Gen) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsGenAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsGenAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsXSSActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsXSSActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction: %v", v)
	}
}

// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
type XSS struct {
	Active bool                                                    `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction `json:"action"`
}

func (o *XSS) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *XSS) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsXSSAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsSqliActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsSqliActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction: %v", v)
	}
}

// Sqli - SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
type Sqli struct {
	Active bool                                                     `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction `json:"action"`
}

func (o *Sqli) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Sqli) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsSqliAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsSfAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsSfActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsSfAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsSfActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsSfAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsSfAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsSfAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsSfAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsSfAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsSfAction: %v", v)
	}
}

// Sf - Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
type Sf struct {
	Active bool                                                   `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsSfAction `json:"action"`
}

func (o *Sf) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Sf) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsSfAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsSfAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyCrsJavaActionDeny PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyCrsJavaActionLog  PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction = "log"
)

func (e PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction: %v", v)
	}
}

// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
type Java struct {
	Active bool                                                     `json:"active"`
	Action PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction `json:"action"`
}

func (o *Java) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Java) GetAction() PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyCrsJavaAction("")
	}
	return o.Action
}

// Crs - Custom Ruleset
type Crs struct {
	// Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
	Sd *Sd `json:"sd,omitempty"`
	// Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
	Ma *Ma `json:"ma,omitempty"`
	// Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
	Lfi *Lfi `json:"lfi,omitempty"`
	// Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
	Rfi *Rfi `json:"rfi,omitempty"`
	// Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
	Rce *Rce `json:"rce,omitempty"`
	// PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
	Php *Php `json:"php,omitempty"`
	// Generic Attack - Provide broad protection from various undefined or novel attack vectors.
	Gen *Gen `json:"gen,omitempty"`
	// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
	XSS *XSS `json:"xss,omitempty"`
	// SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
	Sqli *Sqli `json:"sqli,omitempty"`
	// Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
	Sf *Sf `json:"sf,omitempty"`
	// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
	Java *Java `json:"java,omitempty"`
}

func (o *Crs) GetSd() *Sd {
	if o == nil {
		return nil
	}
	return o.Sd
}

func (o *Crs) GetMa() *Ma {
	if o == nil {
		return nil
	}
	return o.Ma
}

func (o *Crs) GetLfi() *Lfi {
	if o == nil {
		return nil
	}
	return o.Lfi
}

func (o *Crs) GetRfi() *Rfi {
	if o == nil {
		return nil
	}
	return o.Rfi
}

func (o *Crs) GetRce() *Rce {
	if o == nil {
		return nil
	}
	return o.Rce
}

func (o *Crs) GetPhp() *Php {
	if o == nil {
		return nil
	}
	return o.Php
}

func (o *Crs) GetGen() *Gen {
	if o == nil {
		return nil
	}
	return o.Gen
}

func (o *Crs) GetXSS() *XSS {
	if o == nil {
		return nil
	}
	return o.XSS
}

func (o *Crs) GetSqli() *Sqli {
	if o == nil {
		return nil
	}
	return o.Sqli
}

func (o *Crs) GetSf() *Sf {
	if o == nil {
		return nil
	}
	return o.Sf
}

func (o *Crs) GetJava() *Java {
	if o == nil {
		return nil
	}
	return o.Java
}

// PutFirewallConfigType - [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
type PutFirewallConfigType string

const (
	PutFirewallConfigTypeHost             PutFirewallConfigType = "host"
	PutFirewallConfigTypePath             PutFirewallConfigType = "path"
	PutFirewallConfigTypeMethod           PutFirewallConfigType = "method"
	PutFirewallConfigTypeHeader           PutFirewallConfigType = "header"
	PutFirewallConfigTypeQuery            PutFirewallConfigType = "query"
	PutFirewallConfigTypeCookie           PutFirewallConfigType = "cookie"
	PutFirewallConfigTypeTargetPath       PutFirewallConfigType = "target_path"
	PutFirewallConfigTypeRawPath          PutFirewallConfigType = "raw_path"
	PutFirewallConfigTypeIPAddress        PutFirewallConfigType = "ip_address"
	PutFirewallConfigTypeRegion           PutFirewallConfigType = "region"
	PutFirewallConfigTypeProtocol         PutFirewallConfigType = "protocol"
	PutFirewallConfigTypeScheme           PutFirewallConfigType = "scheme"
	PutFirewallConfigTypeEnvironment      PutFirewallConfigType = "environment"
	PutFirewallConfigTypeUserAgent        PutFirewallConfigType = "user_agent"
	PutFirewallConfigTypeGeoContinent     PutFirewallConfigType = "geo_continent"
	PutFirewallConfigTypeGeoCountry       PutFirewallConfigType = "geo_country"
	PutFirewallConfigTypeGeoCountryRegion PutFirewallConfigType = "geo_country_region"
	PutFirewallConfigTypeGeoCity          PutFirewallConfigType = "geo_city"
	PutFirewallConfigTypeGeoAsNumber      PutFirewallConfigType = "geo_as_number"
	PutFirewallConfigTypeJa4Digest        PutFirewallConfigType = "ja4_digest"
	PutFirewallConfigTypeJa3Digest        PutFirewallConfigType = "ja3_digest"
	PutFirewallConfigTypeRateLimitAPIID   PutFirewallConfigType = "rate_limit_api_id"
)

func (e PutFirewallConfigType) ToPointer() *PutFirewallConfigType {
	return &e
}
func (e *PutFirewallConfigType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "region":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = PutFirewallConfigType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigType: %v", v)
	}
}

// Op - [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value.
type Op string

const (
	OpRe   Op = "re"
	OpEq   Op = "eq"
	OpNeq  Op = "neq"
	OpEx   Op = "ex"
	OpNex  Op = "nex"
	OpInc  Op = "inc"
	OpNinc Op = "ninc"
	OpPre  Op = "pre"
	OpSuf  Op = "suf"
	OpSub  Op = "sub"
	OpGt   Op = "gt"
	OpGte  Op = "gte"
	OpLt   Op = "lt"
	OpLte  Op = "lte"
)

func (e Op) ToPointer() *Op {
	return &e
}
func (e *Op) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "ex":
		fallthrough
	case "nex":
		fallthrough
	case "inc":
		fallthrough
	case "ninc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		*e = Op(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Op: %v", v)
	}
}

type ValueType string

const (
	ValueTypeStr        ValueType = "str"
	ValueTypeArrayOfStr ValueType = "arrayOfStr"
	ValueTypeNumber     ValueType = "number"
)

type Value struct {
	Str        *string
	ArrayOfStr []string
	Number     *float64

	Type ValueType
}

func CreateValueStr(str string) Value {
	typ := ValueTypeStr

	return Value{
		Str:  &str,
		Type: typ,
	}
}

func CreateValueArrayOfStr(arrayOfStr []string) Value {
	typ := ValueTypeArrayOfStr

	return Value{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateValueNumber(number float64) Value {
	typ := ValueTypeNumber

	return Value{
		Number: &number,
		Type:   typ,
	}
}

func (u *Value) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = ValueTypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = ValueTypeArrayOfStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = ValueTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Value", string(data))
}

func (u Value) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type Value: all fields are null")
}

type Conditions struct {
	// [Parameter](https://vercel.com/docs/security/vercel-waf/rule-configuration#parameters) from the incoming traffic.
	Type PutFirewallConfigType `json:"type"`
	// [Operator](https://vercel.com/docs/security/vercel-waf/rule-configuration#operators) used to compare the parameter with a value.
	Op    Op      `json:"op"`
	Neg   *bool   `json:"neg,omitempty"`
	Key   *string `json:"key,omitempty"`
	Value *Value  `json:"value,omitempty"`
}

func (o *Conditions) GetType() PutFirewallConfigType {
	if o == nil {
		return PutFirewallConfigType("")
	}
	return o.Type
}

func (o *Conditions) GetOp() Op {
	if o == nil {
		return Op("")
	}
	return o.Op
}

func (o *Conditions) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *Conditions) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Conditions) GetValue() *Value {
	if o == nil {
		return nil
	}
	return o.Value
}

type ConditionGroup struct {
	Conditions []Conditions `json:"conditions"`
}

func (o *ConditionGroup) GetConditions() []Conditions {
	if o == nil {
		return []Conditions{}
	}
	return o.Conditions
}

type PutFirewallConfigSecurityRequestRequestBodyRulesActionAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyRulesActionActionLog       PutFirewallConfigSecurityRequestRequestBodyRulesActionAction = "log"
	PutFirewallConfigSecurityRequestRequestBodyRulesActionActionChallenge PutFirewallConfigSecurityRequestRequestBodyRulesActionAction = "challenge"
	PutFirewallConfigSecurityRequestRequestBodyRulesActionActionDeny      PutFirewallConfigSecurityRequestRequestBodyRulesActionAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyRulesActionActionBypass    PutFirewallConfigSecurityRequestRequestBodyRulesActionAction = "bypass"
	PutFirewallConfigSecurityRequestRequestBodyRulesActionActionRateLimit PutFirewallConfigSecurityRequestRequestBodyRulesActionAction = "rate_limit"
	PutFirewallConfigSecurityRequestRequestBodyRulesActionActionRedirect  PutFirewallConfigSecurityRequestRequestBodyRulesActionAction = "redirect"
)

func (e PutFirewallConfigSecurityRequestRequestBodyRulesActionAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyRulesActionAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyRulesActionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = PutFirewallConfigSecurityRequestRequestBodyRulesActionAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyRulesActionAction: %v", v)
	}
}

type Algo string

const (
	AlgoFixedWindow Algo = "fixed_window"
	AlgoTokenBucket Algo = "token_bucket"
)

func (e Algo) ToPointer() *Algo {
	return &e
}
func (e *Algo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = Algo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Algo: %v", v)
	}
}

type Action1 string

const (
	Action1Log       Action1 = "log"
	Action1Challenge Action1 = "challenge"
	Action1Deny      Action1 = "deny"
	Action1RateLimit Action1 = "rate_limit"
)

func (e Action1) ToPointer() *Action1 {
	return &e
}
func (e *Action1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "rate_limit":
		*e = Action1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Action1: %v", v)
	}
}

type RateLimitActionType string

const (
	RateLimitActionTypeAction1 RateLimitActionType = "action_1"
	RateLimitActionTypeAny     RateLimitActionType = "any"
)

type RateLimitAction struct {
	Action1 *Action1
	Any     any

	Type RateLimitActionType
}

func CreateRateLimitActionAction1(action1 Action1) RateLimitAction {
	typ := RateLimitActionTypeAction1

	return RateLimitAction{
		Action1: &action1,
		Type:    typ,
	}
}

func CreateRateLimitActionAny(anyT any) RateLimitAction {
	typ := RateLimitActionTypeAny

	return RateLimitAction{
		Any:  anyT,
		Type: typ,
	}
}

func (u *RateLimitAction) UnmarshalJSON(data []byte) error {

	var action1 Action1 = Action1("")
	if err := utils.UnmarshalJSON(data, &action1, "", true, true); err == nil {
		u.Action1 = &action1
		u.Type = RateLimitActionTypeAction1
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = RateLimitActionTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RateLimitAction", string(data))
}

func (u RateLimitAction) MarshalJSON() ([]byte, error) {
	if u.Action1 != nil {
		return utils.MarshalJSON(u.Action1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RateLimitAction: all fields are null")
}

type RateLimit1 struct {
	Algo   Algo             `json:"algo"`
	Window float64          `json:"window"`
	Limit  float64          `json:"limit"`
	Keys   []string         `json:"keys"`
	Action *RateLimitAction `json:"action,omitempty"`
}

func (o *RateLimit1) GetAlgo() Algo {
	if o == nil {
		return Algo("")
	}
	return o.Algo
}

func (o *RateLimit1) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *RateLimit1) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *RateLimit1) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *RateLimit1) GetAction() *RateLimitAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type RateLimitType string

const (
	RateLimitTypeRateLimit1 RateLimitType = "rateLimit_1"
	RateLimitTypeAny        RateLimitType = "any"
)

type RateLimit struct {
	RateLimit1 *RateLimit1
	Any        any

	Type RateLimitType
}

func CreateRateLimitRateLimit1(rateLimit1 RateLimit1) RateLimit {
	typ := RateLimitTypeRateLimit1

	return RateLimit{
		RateLimit1: &rateLimit1,
		Type:       typ,
	}
}

func CreateRateLimitAny(anyT any) RateLimit {
	typ := RateLimitTypeAny

	return RateLimit{
		Any:  anyT,
		Type: typ,
	}
}

func (u *RateLimit) UnmarshalJSON(data []byte) error {

	var rateLimit1 RateLimit1 = RateLimit1{}
	if err := utils.UnmarshalJSON(data, &rateLimit1, "", true, true); err == nil {
		u.RateLimit1 = &rateLimit1
		u.Type = RateLimitTypeRateLimit1
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = RateLimitTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RateLimit", string(data))
}

func (u RateLimit) MarshalJSON() ([]byte, error) {
	if u.RateLimit1 != nil {
		return utils.MarshalJSON(u.RateLimit1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type RateLimit: all fields are null")
}

type Redirect1 struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *Redirect1) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *Redirect1) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type RedirectType string

const (
	RedirectTypeRedirect1 RedirectType = "redirect_1"
	RedirectTypeAny       RedirectType = "any"
)

type Redirect struct {
	Redirect1 *Redirect1
	Any       any

	Type RedirectType
}

func CreateRedirectRedirect1(redirect1 Redirect1) Redirect {
	typ := RedirectTypeRedirect1

	return Redirect{
		Redirect1: &redirect1,
		Type:      typ,
	}
}

func CreateRedirectAny(anyT any) Redirect {
	typ := RedirectTypeAny

	return Redirect{
		Any:  anyT,
		Type: typ,
	}
}

func (u *Redirect) UnmarshalJSON(data []byte) error {

	var redirect1 Redirect1 = Redirect1{}
	if err := utils.UnmarshalJSON(data, &redirect1, "", true, true); err == nil {
		u.Redirect1 = &redirect1
		u.Type = RedirectTypeRedirect1
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = RedirectTypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Redirect", string(data))
}

func (u Redirect) MarshalJSON() ([]byte, error) {
	if u.Redirect1 != nil {
		return utils.MarshalJSON(u.Redirect1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type Redirect: all fields are null")
}

type Mitigate struct {
	Action         PutFirewallConfigSecurityRequestRequestBodyRulesActionAction `json:"action"`
	RateLimit      *RateLimit                                                   `json:"rateLimit,omitempty"`
	Redirect       *Redirect                                                    `json:"redirect,omitempty"`
	ActionDuration *string                                                      `json:"actionDuration,omitempty"`
	BypassSystem   *bool                                                        `json:"bypassSystem,omitempty"`
}

func (o *Mitigate) GetAction() PutFirewallConfigSecurityRequestRequestBodyRulesActionAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyRulesActionAction("")
	}
	return o.Action
}

func (o *Mitigate) GetRateLimit() *RateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *Mitigate) GetRedirect() *Redirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *Mitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *Mitigate) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type PutFirewallConfigSecurityRequestRequestBodyRulesAction struct {
	Mitigate *Mitigate `json:"mitigate,omitempty"`
}

func (o *PutFirewallConfigSecurityRequestRequestBodyRulesAction) GetMitigate() *Mitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type Rules struct {
	ID             *string                                                `json:"id,omitempty"`
	Name           string                                                 `json:"name"`
	Description    *string                                                `json:"description,omitempty"`
	Active         bool                                                   `json:"active"`
	ConditionGroup []ConditionGroup                                       `json:"conditionGroup"`
	Action         PutFirewallConfigSecurityRequestRequestBodyRulesAction `json:"action"`
}

func (o *Rules) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Rules) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Rules) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *Rules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Rules) GetConditionGroup() []ConditionGroup {
	if o == nil {
		return []ConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *Rules) GetAction() PutFirewallConfigSecurityRequestRequestBodyRulesAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyRulesAction{}
	}
	return o.Action
}

type PutFirewallConfigSecurityRequestRequestBodyIpsAction string

const (
	PutFirewallConfigSecurityRequestRequestBodyIpsActionDeny      PutFirewallConfigSecurityRequestRequestBodyIpsAction = "deny"
	PutFirewallConfigSecurityRequestRequestBodyIpsActionChallenge PutFirewallConfigSecurityRequestRequestBodyIpsAction = "challenge"
	PutFirewallConfigSecurityRequestRequestBodyIpsActionLog       PutFirewallConfigSecurityRequestRequestBodyIpsAction = "log"
	PutFirewallConfigSecurityRequestRequestBodyIpsActionBypass    PutFirewallConfigSecurityRequestRequestBodyIpsAction = "bypass"
)

func (e PutFirewallConfigSecurityRequestRequestBodyIpsAction) ToPointer() *PutFirewallConfigSecurityRequestRequestBodyIpsAction {
	return &e
}
func (e *PutFirewallConfigSecurityRequestRequestBodyIpsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		*e = PutFirewallConfigSecurityRequestRequestBodyIpsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityRequestRequestBodyIpsAction: %v", v)
	}
}

type Ips struct {
	ID       *string                                              `json:"id,omitempty"`
	Hostname string                                               `json:"hostname"`
	IP       string                                               `json:"ip"`
	Notes    *string                                              `json:"notes,omitempty"`
	Action   PutFirewallConfigSecurityRequestRequestBodyIpsAction `json:"action"`
}

func (o *Ips) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Ips) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *Ips) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *Ips) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *Ips) GetAction() PutFirewallConfigSecurityRequestRequestBodyIpsAction {
	if o == nil {
		return PutFirewallConfigSecurityRequestRequestBodyIpsAction("")
	}
	return o.Action
}

type PutFirewallConfigRequestBody struct {
	FirewallEnabled bool                    `json:"firewallEnabled"`
	ManagedRules    map[string]ManagedRules `json:"managedRules,omitempty"`
	// Custom Ruleset
	Crs   *Crs    `json:"crs,omitempty"`
	Rules []Rules `json:"rules,omitempty"`
	Ips   []Ips   `json:"ips,omitempty"`
}

func (o *PutFirewallConfigRequestBody) GetFirewallEnabled() bool {
	if o == nil {
		return false
	}
	return o.FirewallEnabled
}

func (o *PutFirewallConfigRequestBody) GetManagedRules() map[string]ManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

func (o *PutFirewallConfigRequestBody) GetCrs() *Crs {
	if o == nil {
		return nil
	}
	return o.Crs
}

func (o *PutFirewallConfigRequestBody) GetRules() []Rules {
	if o == nil {
		return nil
	}
	return o.Rules
}

func (o *PutFirewallConfigRequestBody) GetIps() []Ips {
	if o == nil {
		return nil
	}
	return o.Ips
}

type PutFirewallConfigRequest struct {
	ProjectID string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                      `queryParam:"style=form,explode=true,name=slug"`
	RequestBody PutFirewallConfigRequestBody `request:"mediaType=application/json"`
}

func (o *PutFirewallConfigRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *PutFirewallConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *PutFirewallConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *PutFirewallConfigRequest) GetRequestBody() PutFirewallConfigRequestBody {
	if o == nil {
		return PutFirewallConfigRequestBody{}
	}
	return o.RequestBody
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction: %v", v)
	}
}

// PutFirewallConfigSd - Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
type PutFirewallConfigSd struct {
	Active bool                                                                             `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction `json:"action"`
}

func (o *PutFirewallConfigSd) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigSd) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSdAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction: %v", v)
	}
}

// PutFirewallConfigMa - Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
type PutFirewallConfigMa struct {
	Active bool                                                                             `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction `json:"action"`
}

func (o *PutFirewallConfigMa) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigMa) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsMaAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction: %v", v)
	}
}

// PutFirewallConfigLfi - Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
type PutFirewallConfigLfi struct {
	Active bool                                                                              `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction `json:"action"`
}

func (o *PutFirewallConfigLfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigLfi) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsLfiAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction: %v", v)
	}
}

// PutFirewallConfigRfi - Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
type PutFirewallConfigRfi struct {
	Active bool                                                                  `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction `json:"action"`
}

func (o *PutFirewallConfigRfi) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigRfi) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction: %v", v)
	}
}

// PutFirewallConfigRce - Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
type PutFirewallConfigRce struct {
	Active bool                                                                        `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction `json:"action"`
}

func (o *PutFirewallConfigRce) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigRce) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction: %v", v)
	}
}

// PutFirewallConfigPhp - PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
type PutFirewallConfigPhp struct {
	Active bool                                                                           `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction `json:"action"`
}

func (o *PutFirewallConfigPhp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigPhp) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction: %v", v)
	}
}

// PutFirewallConfigGen - Generic Attack - Provide broad protection from various undefined or novel attack vectors.
type PutFirewallConfigGen struct {
	Active bool                                                                              `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction `json:"action"`
}

func (o *PutFirewallConfigGen) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigGen) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsGenAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction: %v", v)
	}
}

// PutFirewallConfigXSS - XSS Attack - Prevent injection of malicious scripts into trusted webpages.
type PutFirewallConfigXSS struct {
	Active bool                                                                              `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction `json:"action"`
}

func (o *PutFirewallConfigXSS) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigXSS) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsXSSAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction: %v", v)
	}
}

// PutFirewallConfigSqli - SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
type PutFirewallConfigSqli struct {
	Active bool                                                                               `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction `json:"action"`
}

func (o *PutFirewallConfigSqli) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigSqli) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSqliAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction: %v", v)
	}
}

// PutFirewallConfigSf - Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
type PutFirewallConfigSf struct {
	Active bool                                                                             `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction `json:"action"`
}

func (o *PutFirewallConfigSf) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigSf) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsSfAction("")
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaActionDeny PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaActionLog  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction = "log"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction: %v", v)
	}
}

// PutFirewallConfigJava - Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
type PutFirewallConfigJava struct {
	Active bool                                                                               `json:"active"`
	Action PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction `json:"action"`
}

func (o *PutFirewallConfigJava) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigJava) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveCrsJavaAction("")
	}
	return o.Action
}

// PutFirewallConfigCrs - Custom Ruleset
type PutFirewallConfigCrs struct {
	// Scanner Detection - Detect and prevent reconnaissance activities from network scanning tools.
	Sd PutFirewallConfigSd `json:"sd"`
	// Multipart Attack - Block attempts to bypass security controls using multipart/form-data encoding.
	Ma PutFirewallConfigMa `json:"ma"`
	// Local File Inclusion Attack - Prevent unauthorized access to local files through web applications.
	Lfi PutFirewallConfigLfi `json:"lfi"`
	// Remote File Inclusion Attack - Prohibit unauthorized upload or execution of remote files.
	Rfi PutFirewallConfigRfi `json:"rfi"`
	// Remote Execution Attack - Prevent unauthorized execution of remote scripts or commands.
	Rce PutFirewallConfigRce `json:"rce"`
	// PHP Attack - Safeguard against vulnerability exploits in PHP-based applications.
	Php PutFirewallConfigPhp `json:"php"`
	// Generic Attack - Provide broad protection from various undefined or novel attack vectors.
	Gen PutFirewallConfigGen `json:"gen"`
	// XSS Attack - Prevent injection of malicious scripts into trusted webpages.
	XSS PutFirewallConfigXSS `json:"xss"`
	// SQL Injection Attack - Prohibit unauthorized use of SQL commands to manipulate databases.
	Sqli PutFirewallConfigSqli `json:"sqli"`
	// Session Fixation Attack - Prevent unauthorized takeover of user sessions by enforcing unique session IDs.
	Sf PutFirewallConfigSf `json:"sf"`
	// Java Attack - Mitigate risks of exploitation targeting Java-based applications or components.
	Java PutFirewallConfigJava `json:"java"`
}

func (o *PutFirewallConfigCrs) GetSd() PutFirewallConfigSd {
	if o == nil {
		return PutFirewallConfigSd{}
	}
	return o.Sd
}

func (o *PutFirewallConfigCrs) GetMa() PutFirewallConfigMa {
	if o == nil {
		return PutFirewallConfigMa{}
	}
	return o.Ma
}

func (o *PutFirewallConfigCrs) GetLfi() PutFirewallConfigLfi {
	if o == nil {
		return PutFirewallConfigLfi{}
	}
	return o.Lfi
}

func (o *PutFirewallConfigCrs) GetRfi() PutFirewallConfigRfi {
	if o == nil {
		return PutFirewallConfigRfi{}
	}
	return o.Rfi
}

func (o *PutFirewallConfigCrs) GetRce() PutFirewallConfigRce {
	if o == nil {
		return PutFirewallConfigRce{}
	}
	return o.Rce
}

func (o *PutFirewallConfigCrs) GetPhp() PutFirewallConfigPhp {
	if o == nil {
		return PutFirewallConfigPhp{}
	}
	return o.Php
}

func (o *PutFirewallConfigCrs) GetGen() PutFirewallConfigGen {
	if o == nil {
		return PutFirewallConfigGen{}
	}
	return o.Gen
}

func (o *PutFirewallConfigCrs) GetXSS() PutFirewallConfigXSS {
	if o == nil {
		return PutFirewallConfigXSS{}
	}
	return o.XSS
}

func (o *PutFirewallConfigCrs) GetSqli() PutFirewallConfigSqli {
	if o == nil {
		return PutFirewallConfigSqli{}
	}
	return o.Sqli
}

func (o *PutFirewallConfigCrs) GetSf() PutFirewallConfigSf {
	if o == nil {
		return PutFirewallConfigSf{}
	}
	return o.Sf
}

func (o *PutFirewallConfigCrs) GetJava() PutFirewallConfigJava {
	if o == nil {
		return PutFirewallConfigJava{}
	}
	return o.Java
}

type PutFirewallConfigSecurityType string

const (
	PutFirewallConfigSecurityTypeHost             PutFirewallConfigSecurityType = "host"
	PutFirewallConfigSecurityTypePath             PutFirewallConfigSecurityType = "path"
	PutFirewallConfigSecurityTypeMethod           PutFirewallConfigSecurityType = "method"
	PutFirewallConfigSecurityTypeHeader           PutFirewallConfigSecurityType = "header"
	PutFirewallConfigSecurityTypeQuery            PutFirewallConfigSecurityType = "query"
	PutFirewallConfigSecurityTypeCookie           PutFirewallConfigSecurityType = "cookie"
	PutFirewallConfigSecurityTypeTargetPath       PutFirewallConfigSecurityType = "target_path"
	PutFirewallConfigSecurityTypeRawPath          PutFirewallConfigSecurityType = "raw_path"
	PutFirewallConfigSecurityTypeIPAddress        PutFirewallConfigSecurityType = "ip_address"
	PutFirewallConfigSecurityTypeProtocol         PutFirewallConfigSecurityType = "protocol"
	PutFirewallConfigSecurityTypeRegion           PutFirewallConfigSecurityType = "region"
	PutFirewallConfigSecurityTypeScheme           PutFirewallConfigSecurityType = "scheme"
	PutFirewallConfigSecurityTypeEnvironment      PutFirewallConfigSecurityType = "environment"
	PutFirewallConfigSecurityTypeUserAgent        PutFirewallConfigSecurityType = "user_agent"
	PutFirewallConfigSecurityTypeGeoContinent     PutFirewallConfigSecurityType = "geo_continent"
	PutFirewallConfigSecurityTypeGeoCountry       PutFirewallConfigSecurityType = "geo_country"
	PutFirewallConfigSecurityTypeGeoCountryRegion PutFirewallConfigSecurityType = "geo_country_region"
	PutFirewallConfigSecurityTypeGeoCity          PutFirewallConfigSecurityType = "geo_city"
	PutFirewallConfigSecurityTypeGeoAsNumber      PutFirewallConfigSecurityType = "geo_as_number"
	PutFirewallConfigSecurityTypeJa4Digest        PutFirewallConfigSecurityType = "ja4_digest"
	PutFirewallConfigSecurityTypeJa3Digest        PutFirewallConfigSecurityType = "ja3_digest"
	PutFirewallConfigSecurityTypeRateLimitAPIID   PutFirewallConfigSecurityType = "rate_limit_api_id"
)

func (e PutFirewallConfigSecurityType) ToPointer() *PutFirewallConfigSecurityType {
	return &e
}
func (e *PutFirewallConfigSecurityType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "region":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = PutFirewallConfigSecurityType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityType: %v", v)
	}
}

type PutFirewallConfigOp string

const (
	PutFirewallConfigOpRe   PutFirewallConfigOp = "re"
	PutFirewallConfigOpEq   PutFirewallConfigOp = "eq"
	PutFirewallConfigOpEx   PutFirewallConfigOp = "ex"
	PutFirewallConfigOpInc  PutFirewallConfigOp = "inc"
	PutFirewallConfigOpPre  PutFirewallConfigOp = "pre"
	PutFirewallConfigOpSuf  PutFirewallConfigOp = "suf"
	PutFirewallConfigOpSub  PutFirewallConfigOp = "sub"
	PutFirewallConfigOpGt   PutFirewallConfigOp = "gt"
	PutFirewallConfigOpGte  PutFirewallConfigOp = "gte"
	PutFirewallConfigOpLt   PutFirewallConfigOp = "lt"
	PutFirewallConfigOpLte  PutFirewallConfigOp = "lte"
	PutFirewallConfigOpNex  PutFirewallConfigOp = "nex"
	PutFirewallConfigOpNinc PutFirewallConfigOp = "ninc"
	PutFirewallConfigOpNeq  PutFirewallConfigOp = "neq"
)

func (e PutFirewallConfigOp) ToPointer() *PutFirewallConfigOp {
	return &e
}
func (e *PutFirewallConfigOp) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "ex":
		fallthrough
	case "inc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		fallthrough
	case "nex":
		fallthrough
	case "ninc":
		fallthrough
	case "neq":
		*e = PutFirewallConfigOp(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigOp: %v", v)
	}
}

type PutFirewallConfigValueType string

const (
	PutFirewallConfigValueTypeStr        PutFirewallConfigValueType = "str"
	PutFirewallConfigValueTypeNumber     PutFirewallConfigValueType = "number"
	PutFirewallConfigValueTypeArrayOfStr PutFirewallConfigValueType = "arrayOfStr"
)

type PutFirewallConfigValue struct {
	Str        *string
	Number     *float64
	ArrayOfStr []string

	Type PutFirewallConfigValueType
}

func CreatePutFirewallConfigValueStr(str string) PutFirewallConfigValue {
	typ := PutFirewallConfigValueTypeStr

	return PutFirewallConfigValue{
		Str:  &str,
		Type: typ,
	}
}

func CreatePutFirewallConfigValueNumber(number float64) PutFirewallConfigValue {
	typ := PutFirewallConfigValueTypeNumber

	return PutFirewallConfigValue{
		Number: &number,
		Type:   typ,
	}
}

func CreatePutFirewallConfigValueArrayOfStr(arrayOfStr []string) PutFirewallConfigValue {
	typ := PutFirewallConfigValueTypeArrayOfStr

	return PutFirewallConfigValue{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func (u *PutFirewallConfigValue) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = PutFirewallConfigValueTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = PutFirewallConfigValueTypeNumber
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = PutFirewallConfigValueTypeArrayOfStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for PutFirewallConfigValue", string(data))
}

func (u PutFirewallConfigValue) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	return nil, errors.New("could not marshal union type PutFirewallConfigValue: all fields are null")
}

type PutFirewallConfigConditions struct {
	Type  PutFirewallConfigSecurityType `json:"type"`
	Op    PutFirewallConfigOp           `json:"op"`
	Neg   *bool                         `json:"neg,omitempty"`
	Key   *string                       `json:"key,omitempty"`
	Value *PutFirewallConfigValue       `json:"value,omitempty"`
}

func (o *PutFirewallConfigConditions) GetType() PutFirewallConfigSecurityType {
	if o == nil {
		return PutFirewallConfigSecurityType("")
	}
	return o.Type
}

func (o *PutFirewallConfigConditions) GetOp() PutFirewallConfigOp {
	if o == nil {
		return PutFirewallConfigOp("")
	}
	return o.Op
}

func (o *PutFirewallConfigConditions) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *PutFirewallConfigConditions) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *PutFirewallConfigConditions) GetValue() *PutFirewallConfigValue {
	if o == nil {
		return nil
	}
	return o.Value
}

type PutFirewallConfigConditionGroup struct {
	Conditions []PutFirewallConfigConditions `json:"conditions"`
}

func (o *PutFirewallConfigConditionGroup) GetConditions() []PutFirewallConfigConditions {
	if o == nil {
		return []PutFirewallConfigConditions{}
	}
	return o.Conditions
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionDeny      PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionLog       PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction = "log"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionChallenge PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction = "challenge"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionBypass    PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction = "bypass"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionRateLimit PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction = "rate_limit"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionRedirect  PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction = "redirect"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction: %v", v)
	}
}

type PutFirewallConfigAlgo string

const (
	PutFirewallConfigAlgoFixedWindow PutFirewallConfigAlgo = "fixed_window"
	PutFirewallConfigAlgoTokenBucket PutFirewallConfigAlgo = "token_bucket"
)

func (e PutFirewallConfigAlgo) ToPointer() *PutFirewallConfigAlgo {
	return &e
}
func (e *PutFirewallConfigAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = PutFirewallConfigAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigAlgo: %v", v)
	}
}

type PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionActionDeny      PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionActionLog       PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction = "log"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionActionChallenge PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction = "challenge"
	PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionActionRateLimit PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction = "rate_limit"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "rate_limit":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction: %v", v)
	}
}

type PutFirewallConfigRateLimit struct {
	Algo   PutFirewallConfigAlgo                                                                   `json:"algo"`
	Window float64                                                                                 `json:"window"`
	Limit  float64                                                                                 `json:"limit"`
	Keys   []string                                                                                `json:"keys"`
	Action *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction `json:"action,omitempty"`
}

func (o *PutFirewallConfigRateLimit) GetAlgo() PutFirewallConfigAlgo {
	if o == nil {
		return PutFirewallConfigAlgo("")
	}
	return o.Algo
}

func (o *PutFirewallConfigRateLimit) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *PutFirewallConfigRateLimit) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *PutFirewallConfigRateLimit) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *PutFirewallConfigRateLimit) GetAction() *PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesActionAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type PutFirewallConfigRedirect struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *PutFirewallConfigRedirect) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *PutFirewallConfigRedirect) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type PutFirewallConfigMitigate struct {
	Action         PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction `json:"action"`
	RateLimit      *PutFirewallConfigRateLimit                                                      `json:"rateLimit,omitempty"`
	Redirect       *PutFirewallConfigRedirect                                                       `json:"redirect,omitempty"`
	ActionDuration *string                                                                          `json:"actionDuration,omitempty"`
	BypassSystem   *bool                                                                            `json:"bypassSystem,omitempty"`
}

func (o *PutFirewallConfigMitigate) GetAction() PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction {
	if o == nil {
		return PutFirewallConfigSecurityResponse200ApplicationJSONResponseBodyActiveRulesAction("")
	}
	return o.Action
}

func (o *PutFirewallConfigMitigate) GetRateLimit() *PutFirewallConfigRateLimit {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *PutFirewallConfigMitigate) GetRedirect() *PutFirewallConfigRedirect {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *PutFirewallConfigMitigate) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *PutFirewallConfigMitigate) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type PutFirewallConfigSecurityResponseAction struct {
	Mitigate *PutFirewallConfigMitigate `json:"mitigate,omitempty"`
}

func (o *PutFirewallConfigSecurityResponseAction) GetMitigate() *PutFirewallConfigMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type PutFirewallConfigRules struct {
	ID             string                                  `json:"id"`
	Name           string                                  `json:"name"`
	Description    *string                                 `json:"description,omitempty"`
	Active         bool                                    `json:"active"`
	ConditionGroup []PutFirewallConfigConditionGroup       `json:"conditionGroup"`
	Action         PutFirewallConfigSecurityResponseAction `json:"action"`
}

func (o *PutFirewallConfigRules) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PutFirewallConfigRules) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *PutFirewallConfigRules) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *PutFirewallConfigRules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigRules) GetConditionGroup() []PutFirewallConfigConditionGroup {
	if o == nil {
		return []PutFirewallConfigConditionGroup{}
	}
	return o.ConditionGroup
}

func (o *PutFirewallConfigRules) GetAction() PutFirewallConfigSecurityResponseAction {
	if o == nil {
		return PutFirewallConfigSecurityResponseAction{}
	}
	return o.Action
}

type PutFirewallConfigSecurityResponse200Action string

const (
	PutFirewallConfigSecurityResponse200ActionDeny      PutFirewallConfigSecurityResponse200Action = "deny"
	PutFirewallConfigSecurityResponse200ActionLog       PutFirewallConfigSecurityResponse200Action = "log"
	PutFirewallConfigSecurityResponse200ActionChallenge PutFirewallConfigSecurityResponse200Action = "challenge"
	PutFirewallConfigSecurityResponse200ActionBypass    PutFirewallConfigSecurityResponse200Action = "bypass"
)

func (e PutFirewallConfigSecurityResponse200Action) ToPointer() *PutFirewallConfigSecurityResponse200Action {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200Action) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "bypass":
		*e = PutFirewallConfigSecurityResponse200Action(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200Action: %v", v)
	}
}

type PutFirewallConfigIps struct {
	ID       string                                     `json:"id"`
	Hostname string                                     `json:"hostname"`
	IP       string                                     `json:"ip"`
	Notes    *string                                    `json:"notes,omitempty"`
	Action   PutFirewallConfigSecurityResponse200Action `json:"action"`
}

func (o *PutFirewallConfigIps) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *PutFirewallConfigIps) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *PutFirewallConfigIps) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *PutFirewallConfigIps) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *PutFirewallConfigIps) GetAction() PutFirewallConfigSecurityResponse200Action {
	if o == nil {
		return PutFirewallConfigSecurityResponse200Action("")
	}
	return o.Action
}

type PutFirewallConfigChanges struct {
}

type PutFirewallConfigSecurityResponse200ApplicationJSONAction string

const (
	PutFirewallConfigSecurityResponse200ApplicationJSONActionDeny      PutFirewallConfigSecurityResponse200ApplicationJSONAction = "deny"
	PutFirewallConfigSecurityResponse200ApplicationJSONActionLog       PutFirewallConfigSecurityResponse200ApplicationJSONAction = "log"
	PutFirewallConfigSecurityResponse200ApplicationJSONActionChallenge PutFirewallConfigSecurityResponse200ApplicationJSONAction = "challenge"
)

func (e PutFirewallConfigSecurityResponse200ApplicationJSONAction) ToPointer() *PutFirewallConfigSecurityResponse200ApplicationJSONAction {
	return &e
}
func (e *PutFirewallConfigSecurityResponse200ApplicationJSONAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		fallthrough
	case "challenge":
		*e = PutFirewallConfigSecurityResponse200ApplicationJSONAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PutFirewallConfigSecurityResponse200ApplicationJSONAction: %v", v)
	}
}

type PutFirewallConfigManagedRules struct {
	Active    bool                                                       `json:"active"`
	Action    *PutFirewallConfigSecurityResponse200ApplicationJSONAction `json:"action,omitempty"`
	UpdatedAt *string                                                    `json:"updatedAt,omitempty"`
	UserID    *string                                                    `json:"userId,omitempty"`
	Username  *string                                                    `json:"username,omitempty"`
}

func (o *PutFirewallConfigManagedRules) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *PutFirewallConfigManagedRules) GetAction() *PutFirewallConfigSecurityResponse200ApplicationJSONAction {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *PutFirewallConfigManagedRules) GetUpdatedAt() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *PutFirewallConfigManagedRules) GetUserID() *string {
	if o == nil {
		return nil
	}
	return o.UserID
}

func (o *PutFirewallConfigManagedRules) GetUsername() *string {
	if o == nil {
		return nil
	}
	return o.Username
}

type Active struct {
	OwnerID         string  `json:"ownerId"`
	ProjectKey      string  `json:"projectKey"`
	ID              string  `json:"id"`
	Version         float64 `json:"version"`
	UpdatedAt       string  `json:"updatedAt"`
	FirewallEnabled bool    `json:"firewallEnabled"`
	// Custom Ruleset
	Crs          PutFirewallConfigCrs                     `json:"crs"`
	Rules        []PutFirewallConfigRules                 `json:"rules"`
	Ips          []PutFirewallConfigIps                   `json:"ips"`
	Changes      []PutFirewallConfigChanges               `json:"changes"`
	ManagedRules map[string]PutFirewallConfigManagedRules `json:"managedRules,omitempty"`
}

func (o *Active) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *Active) GetProjectKey() string {
	if o == nil {
		return ""
	}
	return o.ProjectKey
}

func (o *Active) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Active) GetVersion() float64 {
	if o == nil {
		return 0.0
	}
	return o.Version
}

func (o *Active) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

func (o *Active) GetFirewallEnabled() bool {
	if o == nil {
		return false
	}
	return o.FirewallEnabled
}

func (o *Active) GetCrs() PutFirewallConfigCrs {
	if o == nil {
		return PutFirewallConfigCrs{}
	}
	return o.Crs
}

func (o *Active) GetRules() []PutFirewallConfigRules {
	if o == nil {
		return []PutFirewallConfigRules{}
	}
	return o.Rules
}

func (o *Active) GetIps() []PutFirewallConfigIps {
	if o == nil {
		return []PutFirewallConfigIps{}
	}
	return o.Ips
}

func (o *Active) GetChanges() []PutFirewallConfigChanges {
	if o == nil {
		return []PutFirewallConfigChanges{}
	}
	return o.Changes
}

func (o *Active) GetManagedRules() map[string]PutFirewallConfigManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

type PutFirewallConfigResponseBody struct {
	Active Active `json:"active"`
}

func (o *PutFirewallConfigResponseBody) GetActive() Active {
	if o == nil {
		return Active{}
	}
	return o.Active
}

type PutFirewallConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *PutFirewallConfigResponseBody
}

func (o *PutFirewallConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *PutFirewallConfigResponse) GetObject() *PutFirewallConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
