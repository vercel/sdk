// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type QueryExperimentationItemsRequest struct {
	ResourceID *string `queryParam:"style=form,explode=true,name=resourceId"`
}

func (o *QueryExperimentationItemsRequest) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

// QueryExperimentationItemsCategory - An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
type QueryExperimentationItemsCategory string

const (
	QueryExperimentationItemsCategoryExperiment QueryExperimentationItemsCategory = "experiment"
	QueryExperimentationItemsCategoryFlag       QueryExperimentationItemsCategory = "flag"
)

func (e QueryExperimentationItemsCategory) ToPointer() *QueryExperimentationItemsCategory {
	return &e
}
func (e *QueryExperimentationItemsCategory) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experiment":
		fallthrough
	case "flag":
		*e = QueryExperimentationItemsCategory(v)
		return nil
	default:
		return fmt.Errorf("invalid value for QueryExperimentationItemsCategory: %v", v)
	}
}

type QueryExperimentationItemsItems struct {
	// The Vercel generated ID for this item Integrations should not receive this in API responses
	ID     string `json:"id"`
	Slug   string `json:"slug"`
	Origin string `json:"origin"`
	// The ID the partner has for this item. Integrations should receive this as `id` in API responses
	ExternalID string `json:"externalId"`
	// The id of the integration installation on a team
	IntegrationConfigurationID string `json:"integrationConfigurationId"`
	// The flags collection ID
	ResourceID string `json:"resourceId"`
	// An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
	Category    *QueryExperimentationItemsCategory `json:"category,omitempty"`
	Name        *string                            `json:"name,omitempty"`
	Description *string                            `json:"description,omitempty"`
	IsArchived  *bool                              `json:"isArchived,omitempty"`
	CreatedAt   *float64                           `json:"createdAt,omitempty"`
	UpdatedAt   *float64                           `json:"updatedAt,omitempty"`
}

func (o *QueryExperimentationItemsItems) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *QueryExperimentationItemsItems) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *QueryExperimentationItemsItems) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *QueryExperimentationItemsItems) GetExternalID() string {
	if o == nil {
		return ""
	}
	return o.ExternalID
}

func (o *QueryExperimentationItemsItems) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *QueryExperimentationItemsItems) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *QueryExperimentationItemsItems) GetCategory() *QueryExperimentationItemsCategory {
	if o == nil {
		return nil
	}
	return o.Category
}

func (o *QueryExperimentationItemsItems) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *QueryExperimentationItemsItems) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *QueryExperimentationItemsItems) GetIsArchived() *bool {
	if o == nil {
		return nil
	}
	return o.IsArchived
}

func (o *QueryExperimentationItemsItems) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *QueryExperimentationItemsItems) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

type QueryExperimentationItemsResponseBody struct {
	Items []QueryExperimentationItemsItems `json:"items"`
}

func (o *QueryExperimentationItemsResponseBody) GetItems() []QueryExperimentationItemsItems {
	if o == nil {
		return []QueryExperimentationItemsItems{}
	}
	return o.Items
}

type QueryExperimentationItemsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *QueryExperimentationItemsResponseBody
}

func (o *QueryExperimentationItemsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *QueryExperimentationItemsResponse) GetObject() *QueryExperimentationItemsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
