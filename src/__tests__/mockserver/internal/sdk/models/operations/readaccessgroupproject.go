// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type ReadAccessGroupProjectRequest struct {
	AccessGroupIDOrName string `pathParam:"style=simple,explode=false,name=accessGroupIdOrName"`
	ProjectID           string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *ReadAccessGroupProjectRequest) GetAccessGroupIDOrName() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupIDOrName
}

func (o *ReadAccessGroupProjectRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *ReadAccessGroupProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *ReadAccessGroupProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type ReadAccessGroupProjectRole string

const (
	ReadAccessGroupProjectRoleAdmin            ReadAccessGroupProjectRole = "ADMIN"
	ReadAccessGroupProjectRoleProjectDeveloper ReadAccessGroupProjectRole = "PROJECT_DEVELOPER"
	ReadAccessGroupProjectRoleProjectViewer    ReadAccessGroupProjectRole = "PROJECT_VIEWER"
)

func (e ReadAccessGroupProjectRole) ToPointer() *ReadAccessGroupProjectRole {
	return &e
}
func (e *ReadAccessGroupProjectRole) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = ReadAccessGroupProjectRole(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ReadAccessGroupProjectRole: %v", v)
	}
}

type ReadAccessGroupProjectResponseBody struct {
	TeamID        string                     `json:"teamId"`
	AccessGroupID string                     `json:"accessGroupId"`
	ProjectID     string                     `json:"projectId"`
	Role          ReadAccessGroupProjectRole `json:"role"`
	CreatedAt     string                     `json:"createdAt"`
	UpdatedAt     string                     `json:"updatedAt"`
}

func (o *ReadAccessGroupProjectResponseBody) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *ReadAccessGroupProjectResponseBody) GetAccessGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupID
}

func (o *ReadAccessGroupProjectResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *ReadAccessGroupProjectResponseBody) GetRole() ReadAccessGroupProjectRole {
	if o == nil {
		return ReadAccessGroupProjectRole("")
	}
	return o.Role
}

func (o *ReadAccessGroupProjectResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *ReadAccessGroupProjectResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type ReadAccessGroupProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *ReadAccessGroupProjectResponseBody
}

func (o *ReadAccessGroupProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *ReadAccessGroupProjectResponse) GetObject() *ReadAccessGroupProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
