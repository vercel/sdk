// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// RecordEventsSource - One of `LOCAL` or `REMOTE`. `LOCAL` specifies that the cache event was from the user's filesystem cache. `REMOTE` specifies that the cache event is from a remote cache.
type RecordEventsSource string

const (
	RecordEventsSourceLocal  RecordEventsSource = "LOCAL"
	RecordEventsSourceRemote RecordEventsSource = "REMOTE"
)

func (e RecordEventsSource) ToPointer() *RecordEventsSource {
	return &e
}
func (e *RecordEventsSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LOCAL":
		fallthrough
	case "REMOTE":
		*e = RecordEventsSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordEventsSource: %v", v)
	}
}

// RecordEventsEvent - One of `HIT` or `MISS`. `HIT` specifies that a cached artifact for `hash` was found in the cache. `MISS` specifies that a cached artifact with `hash` was not found.
type RecordEventsEvent string

const (
	RecordEventsEventHit  RecordEventsEvent = "HIT"
	RecordEventsEventMiss RecordEventsEvent = "MISS"
)

func (e RecordEventsEvent) ToPointer() *RecordEventsEvent {
	return &e
}
func (e *RecordEventsEvent) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "HIT":
		fallthrough
	case "MISS":
		*e = RecordEventsEvent(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordEventsEvent: %v", v)
	}
}

type RecordEventsRequestBody struct {
	// A UUID (universally unique identifer) for the session that generated this event.
	SessionID string `json:"sessionId"`
	// One of `LOCAL` or `REMOTE`. `LOCAL` specifies that the cache event was from the user's filesystem cache. `REMOTE` specifies that the cache event is from a remote cache.
	Source RecordEventsSource `json:"source"`
	// One of `HIT` or `MISS`. `HIT` specifies that a cached artifact for `hash` was found in the cache. `MISS` specifies that a cached artifact with `hash` was not found.
	Event RecordEventsEvent `json:"event"`
	// The artifact hash
	Hash string `json:"hash"`
	// The time taken to generate the artifact. This should be sent as a body parameter on `HIT` events.
	Duration *float64 `json:"duration,omitempty"`
}

func (o *RecordEventsRequestBody) GetSessionID() string {
	if o == nil {
		return ""
	}
	return o.SessionID
}

func (o *RecordEventsRequestBody) GetSource() RecordEventsSource {
	if o == nil {
		return RecordEventsSource("")
	}
	return o.Source
}

func (o *RecordEventsRequestBody) GetEvent() RecordEventsEvent {
	if o == nil {
		return RecordEventsEvent("")
	}
	return o.Event
}

func (o *RecordEventsRequestBody) GetHash() string {
	if o == nil {
		return ""
	}
	return o.Hash
}

func (o *RecordEventsRequestBody) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

type RecordEventsRequest struct {
	// The continuous integration or delivery environment where this artifact is downloaded.
	XArtifactClientCi *string `header:"style=simple,explode=false,name=x-artifact-client-ci"`
	// 1 if the client is an interactive shell. Otherwise 0
	XArtifactClientInteractive *int64 `header:"style=simple,explode=false,name=x-artifact-client-interactive"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                   `queryParam:"style=form,explode=true,name=slug"`
	RequestBody []RecordEventsRequestBody `request:"mediaType=application/json"`
}

func (o *RecordEventsRequest) GetXArtifactClientCi() *string {
	if o == nil {
		return nil
	}
	return o.XArtifactClientCi
}

func (o *RecordEventsRequest) GetXArtifactClientInteractive() *int64 {
	if o == nil {
		return nil
	}
	return o.XArtifactClientInteractive
}

func (o *RecordEventsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *RecordEventsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *RecordEventsRequest) GetRequestBody() []RecordEventsRequestBody {
	if o == nil {
		return []RecordEventsRequestBody{}
	}
	return o.RequestBody
}

type RecordEventsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *RecordEventsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
