// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type RemoveProjectEnvRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique environment variable identifier
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The unique custom environment identifier within the project
	CustomEnvironmentID *string `queryParam:"style=form,explode=true,name=customEnvironmentId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *RemoveProjectEnvRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *RemoveProjectEnvRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RemoveProjectEnvRequest) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *RemoveProjectEnvRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *RemoveProjectEnvRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type RemoveProjectEnvTargetEnum6 string

const (
	RemoveProjectEnvTargetEnum6Production  RemoveProjectEnvTargetEnum6 = "production"
	RemoveProjectEnvTargetEnum6Preview     RemoveProjectEnvTargetEnum6 = "preview"
	RemoveProjectEnvTargetEnum6Development RemoveProjectEnvTargetEnum6 = "development"
)

func (e RemoveProjectEnvTargetEnum6) ToPointer() *RemoveProjectEnvTargetEnum6 {
	return &e
}
func (e *RemoveProjectEnvTargetEnum6) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvTargetEnum6(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTargetEnum6: %v", v)
	}
}

type RemoveProjectEnvTargetEnum5 string

const (
	RemoveProjectEnvTargetEnum5Production  RemoveProjectEnvTargetEnum5 = "production"
	RemoveProjectEnvTargetEnum5Preview     RemoveProjectEnvTargetEnum5 = "preview"
	RemoveProjectEnvTargetEnum5Development RemoveProjectEnvTargetEnum5 = "development"
)

func (e RemoveProjectEnvTargetEnum5) ToPointer() *RemoveProjectEnvTargetEnum5 {
	return &e
}
func (e *RemoveProjectEnvTargetEnum5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvTargetEnum5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTargetEnum5: %v", v)
	}
}

type RemoveProjectEnvTargetUnion3Type string

const (
	RemoveProjectEnvTargetUnion3TypeArrayOfRemoveProjectEnvTargetEnum5 RemoveProjectEnvTargetUnion3Type = "arrayOfRemoveProjectEnvTargetEnum5"
	RemoveProjectEnvTargetUnion3TypeRemoveProjectEnvTargetEnum6        RemoveProjectEnvTargetUnion3Type = "removeProjectEnv_target_enum_6"
)

type RemoveProjectEnvTargetUnion3 struct {
	ArrayOfRemoveProjectEnvTargetEnum5 []RemoveProjectEnvTargetEnum5 `queryParam:"inline"`
	RemoveProjectEnvTargetEnum6        *RemoveProjectEnvTargetEnum6  `queryParam:"inline"`

	Type RemoveProjectEnvTargetUnion3Type
}

func CreateRemoveProjectEnvTargetUnion3ArrayOfRemoveProjectEnvTargetEnum5(arrayOfRemoveProjectEnvTargetEnum5 []RemoveProjectEnvTargetEnum5) RemoveProjectEnvTargetUnion3 {
	typ := RemoveProjectEnvTargetUnion3TypeArrayOfRemoveProjectEnvTargetEnum5

	return RemoveProjectEnvTargetUnion3{
		ArrayOfRemoveProjectEnvTargetEnum5: arrayOfRemoveProjectEnvTargetEnum5,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvTargetUnion3RemoveProjectEnvTargetEnum6(removeProjectEnvTargetEnum6 RemoveProjectEnvTargetEnum6) RemoveProjectEnvTargetUnion3 {
	typ := RemoveProjectEnvTargetUnion3TypeRemoveProjectEnvTargetEnum6

	return RemoveProjectEnvTargetUnion3{
		RemoveProjectEnvTargetEnum6: &removeProjectEnvTargetEnum6,
		Type:                        typ,
	}
}

func (u *RemoveProjectEnvTargetUnion3) UnmarshalJSON(data []byte) error {

	var arrayOfRemoveProjectEnvTargetEnum5 []RemoveProjectEnvTargetEnum5 = []RemoveProjectEnvTargetEnum5{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvTargetEnum5, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvTargetEnum5 = arrayOfRemoveProjectEnvTargetEnum5
		u.Type = RemoveProjectEnvTargetUnion3TypeArrayOfRemoveProjectEnvTargetEnum5
		return nil
	}

	var removeProjectEnvTargetEnum6 RemoveProjectEnvTargetEnum6 = RemoveProjectEnvTargetEnum6("")
	if err := utils.UnmarshalJSON(data, &removeProjectEnvTargetEnum6, "", true, true); err == nil {
		u.RemoveProjectEnvTargetEnum6 = &removeProjectEnvTargetEnum6
		u.Type = RemoveProjectEnvTargetUnion3TypeRemoveProjectEnvTargetEnum6
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvTargetUnion3", string(data))
}

func (u RemoveProjectEnvTargetUnion3) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvTargetEnum5 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvTargetEnum5, "", true)
	}

	if u.RemoveProjectEnvTargetEnum6 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvTargetEnum6, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvTargetUnion3: all fields are null")
}

type RemoveProjectEnvType3 string

const (
	RemoveProjectEnvType3System    RemoveProjectEnvType3 = "system"
	RemoveProjectEnvType3Encrypted RemoveProjectEnvType3 = "encrypted"
	RemoveProjectEnvType3Plain     RemoveProjectEnvType3 = "plain"
	RemoveProjectEnvType3Sensitive RemoveProjectEnvType3 = "sensitive"
	RemoveProjectEnvType3Secret    RemoveProjectEnvType3 = "secret"
)

func (e RemoveProjectEnvType3) ToPointer() *RemoveProjectEnvType3 {
	return &e
}
func (e *RemoveProjectEnvType3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnvType3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvType3: %v", v)
	}
}

type RemoveProjectEnvTypeFlagsConnectionString3 string

const (
	RemoveProjectEnvTypeFlagsConnectionString3FlagsConnectionString RemoveProjectEnvTypeFlagsConnectionString3 = "flags-connection-string"
)

func (e RemoveProjectEnvTypeFlagsConnectionString3) ToPointer() *RemoveProjectEnvTypeFlagsConnectionString3 {
	return &e
}
func (e *RemoveProjectEnvTypeFlagsConnectionString3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = RemoveProjectEnvTypeFlagsConnectionString3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeFlagsConnectionString3: %v", v)
	}
}

type RemoveProjectEnvContentHintFlagsConnectionString3 struct {
	Type      RemoveProjectEnvTypeFlagsConnectionString3 `json:"type"`
	ProjectID string                                     `json:"projectId"`
}

func (o *RemoveProjectEnvContentHintFlagsConnectionString3) GetType() RemoveProjectEnvTypeFlagsConnectionString3 {
	if o == nil {
		return RemoveProjectEnvTypeFlagsConnectionString3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintFlagsConnectionString3) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type RemoveProjectEnvTypeIntegrationStoreSecret3 string

const (
	RemoveProjectEnvTypeIntegrationStoreSecret3IntegrationStoreSecret RemoveProjectEnvTypeIntegrationStoreSecret3 = "integration-store-secret"
)

func (e RemoveProjectEnvTypeIntegrationStoreSecret3) ToPointer() *RemoveProjectEnvTypeIntegrationStoreSecret3 {
	return &e
}
func (e *RemoveProjectEnvTypeIntegrationStoreSecret3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = RemoveProjectEnvTypeIntegrationStoreSecret3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeIntegrationStoreSecret3: %v", v)
	}
}

type RemoveProjectEnvContentHintIntegrationStoreSecret3 struct {
	Type                       RemoveProjectEnvTypeIntegrationStoreSecret3 `json:"type"`
	StoreID                    string                                      `json:"storeId"`
	IntegrationID              string                                      `json:"integrationId"`
	IntegrationProductID       string                                      `json:"integrationProductId"`
	IntegrationConfigurationID string                                      `json:"integrationConfigurationId"`
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret3) GetType() RemoveProjectEnvTypeIntegrationStoreSecret3 {
	if o == nil {
		return RemoveProjectEnvTypeIntegrationStoreSecret3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret3) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret3) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret3) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type RemoveProjectEnvTypePostgresURLNoSsl3 string

const (
	RemoveProjectEnvTypePostgresURLNoSsl3PostgresURLNoSsl RemoveProjectEnvTypePostgresURLNoSsl3 = "postgres-url-no-ssl"
)

func (e RemoveProjectEnvTypePostgresURLNoSsl3) ToPointer() *RemoveProjectEnvTypePostgresURLNoSsl3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURLNoSsl3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = RemoveProjectEnvTypePostgresURLNoSsl3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURLNoSsl3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURLNoSsl3 struct {
	Type    RemoveProjectEnvTypePostgresURLNoSsl3 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURLNoSsl3) GetType() RemoveProjectEnvTypePostgresURLNoSsl3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURLNoSsl3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURLNoSsl3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresDatabase3 string

const (
	RemoveProjectEnvTypePostgresDatabase3PostgresDatabase RemoveProjectEnvTypePostgresDatabase3 = "postgres-database"
)

func (e RemoveProjectEnvTypePostgresDatabase3) ToPointer() *RemoveProjectEnvTypePostgresDatabase3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresDatabase3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnvTypePostgresDatabase3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresDatabase3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresDatabase3 struct {
	Type    RemoveProjectEnvTypePostgresDatabase3 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresDatabase3) GetType() RemoveProjectEnvTypePostgresDatabase3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresDatabase3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresDatabase3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresPassword3 string

const (
	RemoveProjectEnvTypePostgresPassword3PostgresPassword RemoveProjectEnvTypePostgresPassword3 = "postgres-password"
)

func (e RemoveProjectEnvTypePostgresPassword3) ToPointer() *RemoveProjectEnvTypePostgresPassword3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresPassword3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnvTypePostgresPassword3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresPassword3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresPassword3 struct {
	Type    RemoveProjectEnvTypePostgresPassword3 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresPassword3) GetType() RemoveProjectEnvTypePostgresPassword3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresPassword3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresPassword3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresHost3 string

const (
	RemoveProjectEnvTypePostgresHost3PostgresHost RemoveProjectEnvTypePostgresHost3 = "postgres-host"
)

func (e RemoveProjectEnvTypePostgresHost3) ToPointer() *RemoveProjectEnvTypePostgresHost3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresHost3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnvTypePostgresHost3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresHost3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresHost3 struct {
	Type    RemoveProjectEnvTypePostgresHost3 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresHost3) GetType() RemoveProjectEnvTypePostgresHost3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresHost3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresHost3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresUser3 string

const (
	RemoveProjectEnvTypePostgresUser3PostgresUser RemoveProjectEnvTypePostgresUser3 = "postgres-user"
)

func (e RemoveProjectEnvTypePostgresUser3) ToPointer() *RemoveProjectEnvTypePostgresUser3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresUser3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnvTypePostgresUser3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresUser3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresUser3 struct {
	Type    RemoveProjectEnvTypePostgresUser3 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresUser3) GetType() RemoveProjectEnvTypePostgresUser3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresUser3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresUser3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresPrismaURL3 string

const (
	RemoveProjectEnvTypePostgresPrismaURL3PostgresPrismaURL RemoveProjectEnvTypePostgresPrismaURL3 = "postgres-prisma-url"
)

func (e RemoveProjectEnvTypePostgresPrismaURL3) ToPointer() *RemoveProjectEnvTypePostgresPrismaURL3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresPrismaURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnvTypePostgresPrismaURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresPrismaURL3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresPrismaURL3 struct {
	Type    RemoveProjectEnvTypePostgresPrismaURL3 `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresPrismaURL3) GetType() RemoveProjectEnvTypePostgresPrismaURL3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresPrismaURL3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresPrismaURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresURLNonPooling3 string

const (
	RemoveProjectEnvTypePostgresURLNonPooling3PostgresURLNonPooling RemoveProjectEnvTypePostgresURLNonPooling3 = "postgres-url-non-pooling"
)

func (e RemoveProjectEnvTypePostgresURLNonPooling3) ToPointer() *RemoveProjectEnvTypePostgresURLNonPooling3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURLNonPooling3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnvTypePostgresURLNonPooling3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURLNonPooling3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURLNonPooling3 struct {
	Type    RemoveProjectEnvTypePostgresURLNonPooling3 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURLNonPooling3) GetType() RemoveProjectEnvTypePostgresURLNonPooling3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURLNonPooling3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURLNonPooling3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresURL3 string

const (
	RemoveProjectEnvTypePostgresURL3PostgresURL RemoveProjectEnvTypePostgresURL3 = "postgres-url"
)

func (e RemoveProjectEnvTypePostgresURL3) ToPointer() *RemoveProjectEnvTypePostgresURL3 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnvTypePostgresURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURL3: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURL3 struct {
	Type    RemoveProjectEnvTypePostgresURL3 `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURL3) GetType() RemoveProjectEnvTypePostgresURL3 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURL3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeBlobReadWriteToken3 string

const (
	RemoveProjectEnvTypeBlobReadWriteToken3BlobReadWriteToken RemoveProjectEnvTypeBlobReadWriteToken3 = "blob-read-write-token"
)

func (e RemoveProjectEnvTypeBlobReadWriteToken3) ToPointer() *RemoveProjectEnvTypeBlobReadWriteToken3 {
	return &e
}
func (e *RemoveProjectEnvTypeBlobReadWriteToken3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnvTypeBlobReadWriteToken3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeBlobReadWriteToken3: %v", v)
	}
}

type RemoveProjectEnvContentHintBlobReadWriteToken3 struct {
	Type    RemoveProjectEnvTypeBlobReadWriteToken3 `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintBlobReadWriteToken3) GetType() RemoveProjectEnvTypeBlobReadWriteToken3 {
	if o == nil {
		return RemoveProjectEnvTypeBlobReadWriteToken3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintBlobReadWriteToken3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3 string

const (
	RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3RedisRestAPIReadOnlyToken RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3 = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3) ToPointer() *RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3 `json:"type"`
	StoreID string                                         `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3) GetType() RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIReadOnlyToken3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIToken3 string

const (
	RemoveProjectEnvTypeRedisRestAPIToken3RedisRestAPIToken RemoveProjectEnvTypeRedisRestAPIToken3 = "redis-rest-api-token"
)

func (e RemoveProjectEnvTypeRedisRestAPIToken3) ToPointer() *RemoveProjectEnvTypeRedisRestAPIToken3 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIToken3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnvTypeRedisRestAPIToken3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIToken3: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIToken3 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIToken3 `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIToken3) GetType() RemoveProjectEnvTypeRedisRestAPIToken3 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIToken3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIToken3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIURL3 string

const (
	RemoveProjectEnvTypeRedisRestAPIURL3RedisRestAPIURL RemoveProjectEnvTypeRedisRestAPIURL3 = "redis-rest-api-url"
)

func (e RemoveProjectEnvTypeRedisRestAPIURL3) ToPointer() *RemoveProjectEnvTypeRedisRestAPIURL3 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnvTypeRedisRestAPIURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIURL3: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIURL3 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIURL3 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIURL3) GetType() RemoveProjectEnvTypeRedisRestAPIURL3 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIURL3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisURL3 string

const (
	RemoveProjectEnvTypeRedisURL3RedisURL RemoveProjectEnvTypeRedisURL3 = "redis-url"
)

func (e RemoveProjectEnvTypeRedisURL3) ToPointer() *RemoveProjectEnvTypeRedisURL3 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisURL3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnvTypeRedisURL3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisURL3: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisURL3 struct {
	Type    RemoveProjectEnvTypeRedisURL3 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisURL3) GetType() RemoveProjectEnvTypeRedisURL3 {
	if o == nil {
		return RemoveProjectEnvTypeRedisURL3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisURL3) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvContentHintUnion3Type string

const (
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisURL3                  RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_RedisURL_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIURL3           RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_RedisRestAPIURL_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIToken3         RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_RedisRestAPIToken_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_RedisRestAPIReadOnlyToken_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintBlobReadWriteToken3        RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_BlobReadWriteToken_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURL3               RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresURL_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURLNonPooling3     RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresURLNonPooling_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresPrismaURL3         RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresPrismaURL_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresUser3              RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresUser_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresHost3              RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresHost_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresPassword3          RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresPassword_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresDatabase3          RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresDatabase_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURLNoSsl3          RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_PostgresURLNoSsl_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintIntegrationStoreSecret3    RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_IntegrationStoreSecret_3"
	RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintFlagsConnectionString3     RemoveProjectEnvContentHintUnion3Type = "removeProjectEnv_contentHint_FlagsConnectionString_3"
)

type RemoveProjectEnvContentHintUnion3 struct {
	RemoveProjectEnvContentHintRedisURL3                  *RemoveProjectEnvContentHintRedisURL3                  `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIURL3           *RemoveProjectEnvContentHintRedisRestAPIURL3           `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIToken3         *RemoveProjectEnvContentHintRedisRestAPIToken3         `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 `queryParam:"inline"`
	RemoveProjectEnvContentHintBlobReadWriteToken3        *RemoveProjectEnvContentHintBlobReadWriteToken3        `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURL3               *RemoveProjectEnvContentHintPostgresURL3               `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURLNonPooling3     *RemoveProjectEnvContentHintPostgresURLNonPooling3     `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresPrismaURL3         *RemoveProjectEnvContentHintPostgresPrismaURL3         `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresUser3              *RemoveProjectEnvContentHintPostgresUser3              `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresHost3              *RemoveProjectEnvContentHintPostgresHost3              `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresPassword3          *RemoveProjectEnvContentHintPostgresPassword3          `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresDatabase3          *RemoveProjectEnvContentHintPostgresDatabase3          `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURLNoSsl3          *RemoveProjectEnvContentHintPostgresURLNoSsl3          `queryParam:"inline"`
	RemoveProjectEnvContentHintIntegrationStoreSecret3    *RemoveProjectEnvContentHintIntegrationStoreSecret3    `queryParam:"inline"`
	RemoveProjectEnvContentHintFlagsConnectionString3     *RemoveProjectEnvContentHintFlagsConnectionString3     `queryParam:"inline"`

	Type RemoveProjectEnvContentHintUnion3Type
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintRedisURL3(removeProjectEnvContentHintRedisURL3 RemoveProjectEnvContentHintRedisURL3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisURL3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintRedisURL3: &removeProjectEnvContentHintRedisURL3,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintRedisRestAPIURL3(removeProjectEnvContentHintRedisRestAPIURL3 RemoveProjectEnvContentHintRedisRestAPIURL3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIURL3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintRedisRestAPIURL3: &removeProjectEnvContentHintRedisRestAPIURL3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintRedisRestAPIToken3(removeProjectEnvContentHintRedisRestAPIToken3 RemoveProjectEnvContentHintRedisRestAPIToken3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIToken3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintRedisRestAPIToken3: &removeProjectEnvContentHintRedisRestAPIToken3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3(removeProjectEnvContentHintRedisRestAPIReadOnlyToken3 RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3: &removeProjectEnvContentHintRedisRestAPIReadOnlyToken3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintBlobReadWriteToken3(removeProjectEnvContentHintBlobReadWriteToken3 RemoveProjectEnvContentHintBlobReadWriteToken3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintBlobReadWriteToken3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintBlobReadWriteToken3: &removeProjectEnvContentHintBlobReadWriteToken3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresURL3(removeProjectEnvContentHintPostgresURL3 RemoveProjectEnvContentHintPostgresURL3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURL3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresURL3: &removeProjectEnvContentHintPostgresURL3,
		Type:                                    typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresURLNonPooling3(removeProjectEnvContentHintPostgresURLNonPooling3 RemoveProjectEnvContentHintPostgresURLNonPooling3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURLNonPooling3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresURLNonPooling3: &removeProjectEnvContentHintPostgresURLNonPooling3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresPrismaURL3(removeProjectEnvContentHintPostgresPrismaURL3 RemoveProjectEnvContentHintPostgresPrismaURL3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresPrismaURL3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresPrismaURL3: &removeProjectEnvContentHintPostgresPrismaURL3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresUser3(removeProjectEnvContentHintPostgresUser3 RemoveProjectEnvContentHintPostgresUser3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresUser3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresUser3: &removeProjectEnvContentHintPostgresUser3,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresHost3(removeProjectEnvContentHintPostgresHost3 RemoveProjectEnvContentHintPostgresHost3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresHost3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresHost3: &removeProjectEnvContentHintPostgresHost3,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresPassword3(removeProjectEnvContentHintPostgresPassword3 RemoveProjectEnvContentHintPostgresPassword3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresPassword3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresPassword3: &removeProjectEnvContentHintPostgresPassword3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresDatabase3(removeProjectEnvContentHintPostgresDatabase3 RemoveProjectEnvContentHintPostgresDatabase3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresDatabase3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresDatabase3: &removeProjectEnvContentHintPostgresDatabase3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintPostgresURLNoSsl3(removeProjectEnvContentHintPostgresURLNoSsl3 RemoveProjectEnvContentHintPostgresURLNoSsl3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURLNoSsl3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintPostgresURLNoSsl3: &removeProjectEnvContentHintPostgresURLNoSsl3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintIntegrationStoreSecret3(removeProjectEnvContentHintIntegrationStoreSecret3 RemoveProjectEnvContentHintIntegrationStoreSecret3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintIntegrationStoreSecret3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintIntegrationStoreSecret3: &removeProjectEnvContentHintIntegrationStoreSecret3,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion3RemoveProjectEnvContentHintFlagsConnectionString3(removeProjectEnvContentHintFlagsConnectionString3 RemoveProjectEnvContentHintFlagsConnectionString3) RemoveProjectEnvContentHintUnion3 {
	typ := RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintFlagsConnectionString3

	return RemoveProjectEnvContentHintUnion3{
		RemoveProjectEnvContentHintFlagsConnectionString3: &removeProjectEnvContentHintFlagsConnectionString3,
		Type: typ,
	}
}

func (u *RemoveProjectEnvContentHintUnion3) UnmarshalJSON(data []byte) error {

	var removeProjectEnvContentHintPostgresURLNonPooling3 RemoveProjectEnvContentHintPostgresURLNonPooling3 = RemoveProjectEnvContentHintPostgresURLNonPooling3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURLNonPooling3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURLNonPooling3 = &removeProjectEnvContentHintPostgresURLNonPooling3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURLNonPooling3
		return nil
	}

	var removeProjectEnvContentHintPostgresPassword3 RemoveProjectEnvContentHintPostgresPassword3 = RemoveProjectEnvContentHintPostgresPassword3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresPassword3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresPassword3 = &removeProjectEnvContentHintPostgresPassword3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresPassword3
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIToken3 RemoveProjectEnvContentHintRedisRestAPIToken3 = RemoveProjectEnvContentHintRedisRestAPIToken3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIToken3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIToken3 = &removeProjectEnvContentHintRedisRestAPIToken3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIToken3
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIReadOnlyToken3 RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 = RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIReadOnlyToken3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 = &removeProjectEnvContentHintRedisRestAPIReadOnlyToken3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3
		return nil
	}

	var removeProjectEnvContentHintBlobReadWriteToken3 RemoveProjectEnvContentHintBlobReadWriteToken3 = RemoveProjectEnvContentHintBlobReadWriteToken3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintBlobReadWriteToken3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintBlobReadWriteToken3 = &removeProjectEnvContentHintBlobReadWriteToken3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintBlobReadWriteToken3
		return nil
	}

	var removeProjectEnvContentHintPostgresURL3 RemoveProjectEnvContentHintPostgresURL3 = RemoveProjectEnvContentHintPostgresURL3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURL3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURL3 = &removeProjectEnvContentHintPostgresURL3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURL3
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIURL3 RemoveProjectEnvContentHintRedisRestAPIURL3 = RemoveProjectEnvContentHintRedisRestAPIURL3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIURL3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIURL3 = &removeProjectEnvContentHintRedisRestAPIURL3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisRestAPIURL3
		return nil
	}

	var removeProjectEnvContentHintPostgresUser3 RemoveProjectEnvContentHintPostgresUser3 = RemoveProjectEnvContentHintPostgresUser3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresUser3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresUser3 = &removeProjectEnvContentHintPostgresUser3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresUser3
		return nil
	}

	var removeProjectEnvContentHintRedisURL3 RemoveProjectEnvContentHintRedisURL3 = RemoveProjectEnvContentHintRedisURL3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisURL3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisURL3 = &removeProjectEnvContentHintRedisURL3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintRedisURL3
		return nil
	}

	var removeProjectEnvContentHintPostgresHost3 RemoveProjectEnvContentHintPostgresHost3 = RemoveProjectEnvContentHintPostgresHost3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresHost3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresHost3 = &removeProjectEnvContentHintPostgresHost3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresHost3
		return nil
	}

	var removeProjectEnvContentHintPostgresPrismaURL3 RemoveProjectEnvContentHintPostgresPrismaURL3 = RemoveProjectEnvContentHintPostgresPrismaURL3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresPrismaURL3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresPrismaURL3 = &removeProjectEnvContentHintPostgresPrismaURL3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresPrismaURL3
		return nil
	}

	var removeProjectEnvContentHintPostgresDatabase3 RemoveProjectEnvContentHintPostgresDatabase3 = RemoveProjectEnvContentHintPostgresDatabase3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresDatabase3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresDatabase3 = &removeProjectEnvContentHintPostgresDatabase3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresDatabase3
		return nil
	}

	var removeProjectEnvContentHintPostgresURLNoSsl3 RemoveProjectEnvContentHintPostgresURLNoSsl3 = RemoveProjectEnvContentHintPostgresURLNoSsl3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURLNoSsl3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURLNoSsl3 = &removeProjectEnvContentHintPostgresURLNoSsl3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintPostgresURLNoSsl3
		return nil
	}

	var removeProjectEnvContentHintFlagsConnectionString3 RemoveProjectEnvContentHintFlagsConnectionString3 = RemoveProjectEnvContentHintFlagsConnectionString3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintFlagsConnectionString3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintFlagsConnectionString3 = &removeProjectEnvContentHintFlagsConnectionString3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintFlagsConnectionString3
		return nil
	}

	var removeProjectEnvContentHintIntegrationStoreSecret3 RemoveProjectEnvContentHintIntegrationStoreSecret3 = RemoveProjectEnvContentHintIntegrationStoreSecret3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintIntegrationStoreSecret3, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintIntegrationStoreSecret3 = &removeProjectEnvContentHintIntegrationStoreSecret3
		u.Type = RemoveProjectEnvContentHintUnion3TypeRemoveProjectEnvContentHintIntegrationStoreSecret3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvContentHintUnion3", string(data))
}

func (u RemoveProjectEnvContentHintUnion3) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnvContentHintRedisURL3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisURL3, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIURL3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIURL3, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIToken3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIToken3, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken3, "", true)
	}

	if u.RemoveProjectEnvContentHintBlobReadWriteToken3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintBlobReadWriteToken3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURL3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURL3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURLNonPooling3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURLNonPooling3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresPrismaURL3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresPrismaURL3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresUser3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresUser3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresHost3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresHost3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresPassword3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresPassword3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresDatabase3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresDatabase3, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURLNoSsl3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURLNoSsl3, "", true)
	}

	if u.RemoveProjectEnvContentHintIntegrationStoreSecret3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintIntegrationStoreSecret3, "", true)
	}

	if u.RemoveProjectEnvContentHintFlagsConnectionString3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintFlagsConnectionString3, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvContentHintUnion3: all fields are null")
}

type RemoveProjectEnvTypeFlagsSecret3 string

const (
	RemoveProjectEnvTypeFlagsSecret3FlagsSecret RemoveProjectEnvTypeFlagsSecret3 = "flags-secret"
)

func (e RemoveProjectEnvTypeFlagsSecret3) ToPointer() *RemoveProjectEnvTypeFlagsSecret3 {
	return &e
}
func (e *RemoveProjectEnvTypeFlagsSecret3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = RemoveProjectEnvTypeFlagsSecret3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeFlagsSecret3: %v", v)
	}
}

// RemoveProjectEnvInternalContentHint3 - Similar to `contentHints`, but should not be exposed to the user.
type RemoveProjectEnvInternalContentHint3 struct {
	Type RemoveProjectEnvTypeFlagsSecret3 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *RemoveProjectEnvInternalContentHint3) GetType() RemoveProjectEnvTypeFlagsSecret3 {
	if o == nil {
		return RemoveProjectEnvTypeFlagsSecret3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvInternalContentHint3) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type RemoveProjectEnvResponseBody3 struct {
	Target *RemoveProjectEnvTargetUnion3 `json:"target,omitempty"`
	Type   RemoveProjectEnvType3         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                            `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                              `json:"decrypted,omitempty"`
	Value             string                             `json:"value"`
	VsmValue          *string                            `json:"vsmValue,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Key               string                             `json:"key"`
	ConfigurationID   *string                            `json:"configurationId,omitempty"`
	CreatedAt         *float64                           `json:"createdAt,omitempty"`
	UpdatedAt         *float64                           `json:"updatedAt,omitempty"`
	CreatedBy         *string                            `json:"createdBy,omitempty"`
	UpdatedBy         *string                            `json:"updatedBy,omitempty"`
	GitBranch         *string                            `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                            `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *RemoveProjectEnvContentHintUnion3 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *RemoveProjectEnvInternalContentHint3 `json:"internalContentHint,omitempty"`
	Comment              *string                               `json:"comment,omitempty"`
	CustomEnvironmentIds []string                              `json:"customEnvironmentIds,omitempty"`
}

func (o *RemoveProjectEnvResponseBody3) GetTarget() *RemoveProjectEnvTargetUnion3 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnvResponseBody3) GetType() RemoveProjectEnvType3 {
	if o == nil {
		return RemoveProjectEnvType3("")
	}
	return o.Type
}

func (o *RemoveProjectEnvResponseBody3) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *RemoveProjectEnvResponseBody3) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnvResponseBody3) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *RemoveProjectEnvResponseBody3) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *RemoveProjectEnvResponseBody3) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnvResponseBody3) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnvResponseBody3) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnvResponseBody3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnvResponseBody3) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnvResponseBody3) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnvResponseBody3) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnvResponseBody3) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnvResponseBody3) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnvResponseBody3) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnvResponseBody3) GetContentHint() *RemoveProjectEnvContentHintUnion3 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnvResponseBody3) GetInternalContentHint() *RemoveProjectEnvInternalContentHint3 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *RemoveProjectEnvResponseBody3) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *RemoveProjectEnvResponseBody3) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type RemoveProjectEnvTargetEnum4 string

const (
	RemoveProjectEnvTargetEnum4Production  RemoveProjectEnvTargetEnum4 = "production"
	RemoveProjectEnvTargetEnum4Preview     RemoveProjectEnvTargetEnum4 = "preview"
	RemoveProjectEnvTargetEnum4Development RemoveProjectEnvTargetEnum4 = "development"
)

func (e RemoveProjectEnvTargetEnum4) ToPointer() *RemoveProjectEnvTargetEnum4 {
	return &e
}
func (e *RemoveProjectEnvTargetEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvTargetEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTargetEnum4: %v", v)
	}
}

type RemoveProjectEnvTargetEnum3 string

const (
	RemoveProjectEnvTargetEnum3Production  RemoveProjectEnvTargetEnum3 = "production"
	RemoveProjectEnvTargetEnum3Preview     RemoveProjectEnvTargetEnum3 = "preview"
	RemoveProjectEnvTargetEnum3Development RemoveProjectEnvTargetEnum3 = "development"
)

func (e RemoveProjectEnvTargetEnum3) ToPointer() *RemoveProjectEnvTargetEnum3 {
	return &e
}
func (e *RemoveProjectEnvTargetEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvTargetEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTargetEnum3: %v", v)
	}
}

type RemoveProjectEnvTargetUnion2Type string

const (
	RemoveProjectEnvTargetUnion2TypeArrayOfRemoveProjectEnvTargetEnum3 RemoveProjectEnvTargetUnion2Type = "arrayOfRemoveProjectEnvTargetEnum3"
	RemoveProjectEnvTargetUnion2TypeRemoveProjectEnvTargetEnum4        RemoveProjectEnvTargetUnion2Type = "removeProjectEnv_target_enum_4"
)

type RemoveProjectEnvTargetUnion2 struct {
	ArrayOfRemoveProjectEnvTargetEnum3 []RemoveProjectEnvTargetEnum3 `queryParam:"inline"`
	RemoveProjectEnvTargetEnum4        *RemoveProjectEnvTargetEnum4  `queryParam:"inline"`

	Type RemoveProjectEnvTargetUnion2Type
}

func CreateRemoveProjectEnvTargetUnion2ArrayOfRemoveProjectEnvTargetEnum3(arrayOfRemoveProjectEnvTargetEnum3 []RemoveProjectEnvTargetEnum3) RemoveProjectEnvTargetUnion2 {
	typ := RemoveProjectEnvTargetUnion2TypeArrayOfRemoveProjectEnvTargetEnum3

	return RemoveProjectEnvTargetUnion2{
		ArrayOfRemoveProjectEnvTargetEnum3: arrayOfRemoveProjectEnvTargetEnum3,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvTargetUnion2RemoveProjectEnvTargetEnum4(removeProjectEnvTargetEnum4 RemoveProjectEnvTargetEnum4) RemoveProjectEnvTargetUnion2 {
	typ := RemoveProjectEnvTargetUnion2TypeRemoveProjectEnvTargetEnum4

	return RemoveProjectEnvTargetUnion2{
		RemoveProjectEnvTargetEnum4: &removeProjectEnvTargetEnum4,
		Type:                        typ,
	}
}

func (u *RemoveProjectEnvTargetUnion2) UnmarshalJSON(data []byte) error {

	var arrayOfRemoveProjectEnvTargetEnum3 []RemoveProjectEnvTargetEnum3 = []RemoveProjectEnvTargetEnum3{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvTargetEnum3, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvTargetEnum3 = arrayOfRemoveProjectEnvTargetEnum3
		u.Type = RemoveProjectEnvTargetUnion2TypeArrayOfRemoveProjectEnvTargetEnum3
		return nil
	}

	var removeProjectEnvTargetEnum4 RemoveProjectEnvTargetEnum4 = RemoveProjectEnvTargetEnum4("")
	if err := utils.UnmarshalJSON(data, &removeProjectEnvTargetEnum4, "", true, true); err == nil {
		u.RemoveProjectEnvTargetEnum4 = &removeProjectEnvTargetEnum4
		u.Type = RemoveProjectEnvTargetUnion2TypeRemoveProjectEnvTargetEnum4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvTargetUnion2", string(data))
}

func (u RemoveProjectEnvTargetUnion2) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvTargetEnum3 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvTargetEnum3, "", true)
	}

	if u.RemoveProjectEnvTargetEnum4 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvTargetEnum4, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvTargetUnion2: all fields are null")
}

type RemoveProjectEnvType2 string

const (
	RemoveProjectEnvType2System    RemoveProjectEnvType2 = "system"
	RemoveProjectEnvType2Encrypted RemoveProjectEnvType2 = "encrypted"
	RemoveProjectEnvType2Plain     RemoveProjectEnvType2 = "plain"
	RemoveProjectEnvType2Sensitive RemoveProjectEnvType2 = "sensitive"
	RemoveProjectEnvType2Secret    RemoveProjectEnvType2 = "secret"
)

func (e RemoveProjectEnvType2) ToPointer() *RemoveProjectEnvType2 {
	return &e
}
func (e *RemoveProjectEnvType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnvType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvType2: %v", v)
	}
}

type RemoveProjectEnvTypeFlagsConnectionString2 string

const (
	RemoveProjectEnvTypeFlagsConnectionString2FlagsConnectionString RemoveProjectEnvTypeFlagsConnectionString2 = "flags-connection-string"
)

func (e RemoveProjectEnvTypeFlagsConnectionString2) ToPointer() *RemoveProjectEnvTypeFlagsConnectionString2 {
	return &e
}
func (e *RemoveProjectEnvTypeFlagsConnectionString2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = RemoveProjectEnvTypeFlagsConnectionString2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeFlagsConnectionString2: %v", v)
	}
}

type RemoveProjectEnvContentHintFlagsConnectionString2 struct {
	Type      RemoveProjectEnvTypeFlagsConnectionString2 `json:"type"`
	ProjectID string                                     `json:"projectId"`
}

func (o *RemoveProjectEnvContentHintFlagsConnectionString2) GetType() RemoveProjectEnvTypeFlagsConnectionString2 {
	if o == nil {
		return RemoveProjectEnvTypeFlagsConnectionString2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintFlagsConnectionString2) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type RemoveProjectEnvTypeIntegrationStoreSecret2 string

const (
	RemoveProjectEnvTypeIntegrationStoreSecret2IntegrationStoreSecret RemoveProjectEnvTypeIntegrationStoreSecret2 = "integration-store-secret"
)

func (e RemoveProjectEnvTypeIntegrationStoreSecret2) ToPointer() *RemoveProjectEnvTypeIntegrationStoreSecret2 {
	return &e
}
func (e *RemoveProjectEnvTypeIntegrationStoreSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = RemoveProjectEnvTypeIntegrationStoreSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeIntegrationStoreSecret2: %v", v)
	}
}

type RemoveProjectEnvContentHintIntegrationStoreSecret2 struct {
	Type                       RemoveProjectEnvTypeIntegrationStoreSecret2 `json:"type"`
	StoreID                    string                                      `json:"storeId"`
	IntegrationID              string                                      `json:"integrationId"`
	IntegrationProductID       string                                      `json:"integrationProductId"`
	IntegrationConfigurationID string                                      `json:"integrationConfigurationId"`
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret2) GetType() RemoveProjectEnvTypeIntegrationStoreSecret2 {
	if o == nil {
		return RemoveProjectEnvTypeIntegrationStoreSecret2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type RemoveProjectEnvTypePostgresURLNoSsl2 string

const (
	RemoveProjectEnvTypePostgresURLNoSsl2PostgresURLNoSsl RemoveProjectEnvTypePostgresURLNoSsl2 = "postgres-url-no-ssl"
)

func (e RemoveProjectEnvTypePostgresURLNoSsl2) ToPointer() *RemoveProjectEnvTypePostgresURLNoSsl2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURLNoSsl2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = RemoveProjectEnvTypePostgresURLNoSsl2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURLNoSsl2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURLNoSsl2 struct {
	Type    RemoveProjectEnvTypePostgresURLNoSsl2 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURLNoSsl2) GetType() RemoveProjectEnvTypePostgresURLNoSsl2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURLNoSsl2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURLNoSsl2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresDatabase2 string

const (
	RemoveProjectEnvTypePostgresDatabase2PostgresDatabase RemoveProjectEnvTypePostgresDatabase2 = "postgres-database"
)

func (e RemoveProjectEnvTypePostgresDatabase2) ToPointer() *RemoveProjectEnvTypePostgresDatabase2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresDatabase2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnvTypePostgresDatabase2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresDatabase2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresDatabase2 struct {
	Type    RemoveProjectEnvTypePostgresDatabase2 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresDatabase2) GetType() RemoveProjectEnvTypePostgresDatabase2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresDatabase2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresDatabase2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresPassword2 string

const (
	RemoveProjectEnvTypePostgresPassword2PostgresPassword RemoveProjectEnvTypePostgresPassword2 = "postgres-password"
)

func (e RemoveProjectEnvTypePostgresPassword2) ToPointer() *RemoveProjectEnvTypePostgresPassword2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresPassword2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnvTypePostgresPassword2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresPassword2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresPassword2 struct {
	Type    RemoveProjectEnvTypePostgresPassword2 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresPassword2) GetType() RemoveProjectEnvTypePostgresPassword2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresPassword2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresPassword2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresHost2 string

const (
	RemoveProjectEnvTypePostgresHost2PostgresHost RemoveProjectEnvTypePostgresHost2 = "postgres-host"
)

func (e RemoveProjectEnvTypePostgresHost2) ToPointer() *RemoveProjectEnvTypePostgresHost2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresHost2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnvTypePostgresHost2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresHost2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresHost2 struct {
	Type    RemoveProjectEnvTypePostgresHost2 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresHost2) GetType() RemoveProjectEnvTypePostgresHost2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresHost2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresHost2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresUser2 string

const (
	RemoveProjectEnvTypePostgresUser2PostgresUser RemoveProjectEnvTypePostgresUser2 = "postgres-user"
)

func (e RemoveProjectEnvTypePostgresUser2) ToPointer() *RemoveProjectEnvTypePostgresUser2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresUser2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnvTypePostgresUser2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresUser2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresUser2 struct {
	Type    RemoveProjectEnvTypePostgresUser2 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresUser2) GetType() RemoveProjectEnvTypePostgresUser2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresUser2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresUser2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresPrismaURL2 string

const (
	RemoveProjectEnvTypePostgresPrismaURL2PostgresPrismaURL RemoveProjectEnvTypePostgresPrismaURL2 = "postgres-prisma-url"
)

func (e RemoveProjectEnvTypePostgresPrismaURL2) ToPointer() *RemoveProjectEnvTypePostgresPrismaURL2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresPrismaURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnvTypePostgresPrismaURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresPrismaURL2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresPrismaURL2 struct {
	Type    RemoveProjectEnvTypePostgresPrismaURL2 `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresPrismaURL2) GetType() RemoveProjectEnvTypePostgresPrismaURL2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresPrismaURL2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresPrismaURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresURLNonPooling2 string

const (
	RemoveProjectEnvTypePostgresURLNonPooling2PostgresURLNonPooling RemoveProjectEnvTypePostgresURLNonPooling2 = "postgres-url-non-pooling"
)

func (e RemoveProjectEnvTypePostgresURLNonPooling2) ToPointer() *RemoveProjectEnvTypePostgresURLNonPooling2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURLNonPooling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnvTypePostgresURLNonPooling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURLNonPooling2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURLNonPooling2 struct {
	Type    RemoveProjectEnvTypePostgresURLNonPooling2 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURLNonPooling2) GetType() RemoveProjectEnvTypePostgresURLNonPooling2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURLNonPooling2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURLNonPooling2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresURL2 string

const (
	RemoveProjectEnvTypePostgresURL2PostgresURL RemoveProjectEnvTypePostgresURL2 = "postgres-url"
)

func (e RemoveProjectEnvTypePostgresURL2) ToPointer() *RemoveProjectEnvTypePostgresURL2 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnvTypePostgresURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURL2: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURL2 struct {
	Type    RemoveProjectEnvTypePostgresURL2 `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURL2) GetType() RemoveProjectEnvTypePostgresURL2 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURL2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeBlobReadWriteToken2 string

const (
	RemoveProjectEnvTypeBlobReadWriteToken2BlobReadWriteToken RemoveProjectEnvTypeBlobReadWriteToken2 = "blob-read-write-token"
)

func (e RemoveProjectEnvTypeBlobReadWriteToken2) ToPointer() *RemoveProjectEnvTypeBlobReadWriteToken2 {
	return &e
}
func (e *RemoveProjectEnvTypeBlobReadWriteToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnvTypeBlobReadWriteToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeBlobReadWriteToken2: %v", v)
	}
}

type RemoveProjectEnvContentHintBlobReadWriteToken2 struct {
	Type    RemoveProjectEnvTypeBlobReadWriteToken2 `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintBlobReadWriteToken2) GetType() RemoveProjectEnvTypeBlobReadWriteToken2 {
	if o == nil {
		return RemoveProjectEnvTypeBlobReadWriteToken2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintBlobReadWriteToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2 string

const (
	RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2RedisRestAPIReadOnlyToken RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2 = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2) ToPointer() *RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2 `json:"type"`
	StoreID string                                         `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetType() RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIReadOnlyToken2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIToken2 string

const (
	RemoveProjectEnvTypeRedisRestAPIToken2RedisRestAPIToken RemoveProjectEnvTypeRedisRestAPIToken2 = "redis-rest-api-token"
)

func (e RemoveProjectEnvTypeRedisRestAPIToken2) ToPointer() *RemoveProjectEnvTypeRedisRestAPIToken2 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIToken2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnvTypeRedisRestAPIToken2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIToken2: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIToken2 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIToken2 `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIToken2) GetType() RemoveProjectEnvTypeRedisRestAPIToken2 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIToken2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIToken2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIURL2 string

const (
	RemoveProjectEnvTypeRedisRestAPIURL2RedisRestAPIURL RemoveProjectEnvTypeRedisRestAPIURL2 = "redis-rest-api-url"
)

func (e RemoveProjectEnvTypeRedisRestAPIURL2) ToPointer() *RemoveProjectEnvTypeRedisRestAPIURL2 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnvTypeRedisRestAPIURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIURL2: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIURL2 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIURL2 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIURL2) GetType() RemoveProjectEnvTypeRedisRestAPIURL2 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIURL2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisURL2 string

const (
	RemoveProjectEnvTypeRedisURL2RedisURL RemoveProjectEnvTypeRedisURL2 = "redis-url"
)

func (e RemoveProjectEnvTypeRedisURL2) ToPointer() *RemoveProjectEnvTypeRedisURL2 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisURL2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnvTypeRedisURL2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisURL2: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisURL2 struct {
	Type    RemoveProjectEnvTypeRedisURL2 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisURL2) GetType() RemoveProjectEnvTypeRedisURL2 {
	if o == nil {
		return RemoveProjectEnvTypeRedisURL2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisURL2) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvContentHintUnion2Type string

const (
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisURL2                  RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_RedisURL_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIURL2           RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_RedisRestAPIURL_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIToken2         RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_RedisRestAPIToken_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_RedisRestAPIReadOnlyToken_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintBlobReadWriteToken2        RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_BlobReadWriteToken_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURL2               RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresURL_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURLNonPooling2     RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresURLNonPooling_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresPrismaURL2         RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresPrismaURL_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresUser2              RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresUser_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresHost2              RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresHost_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresPassword2          RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresPassword_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresDatabase2          RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresDatabase_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURLNoSsl2          RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_PostgresURLNoSsl_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintIntegrationStoreSecret2    RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_IntegrationStoreSecret_2"
	RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintFlagsConnectionString2     RemoveProjectEnvContentHintUnion2Type = "removeProjectEnv_contentHint_FlagsConnectionString_2"
)

type RemoveProjectEnvContentHintUnion2 struct {
	RemoveProjectEnvContentHintRedisURL2                  *RemoveProjectEnvContentHintRedisURL2                  `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIURL2           *RemoveProjectEnvContentHintRedisRestAPIURL2           `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIToken2         *RemoveProjectEnvContentHintRedisRestAPIToken2         `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 `queryParam:"inline"`
	RemoveProjectEnvContentHintBlobReadWriteToken2        *RemoveProjectEnvContentHintBlobReadWriteToken2        `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURL2               *RemoveProjectEnvContentHintPostgresURL2               `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURLNonPooling2     *RemoveProjectEnvContentHintPostgresURLNonPooling2     `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresPrismaURL2         *RemoveProjectEnvContentHintPostgresPrismaURL2         `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresUser2              *RemoveProjectEnvContentHintPostgresUser2              `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresHost2              *RemoveProjectEnvContentHintPostgresHost2              `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresPassword2          *RemoveProjectEnvContentHintPostgresPassword2          `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresDatabase2          *RemoveProjectEnvContentHintPostgresDatabase2          `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURLNoSsl2          *RemoveProjectEnvContentHintPostgresURLNoSsl2          `queryParam:"inline"`
	RemoveProjectEnvContentHintIntegrationStoreSecret2    *RemoveProjectEnvContentHintIntegrationStoreSecret2    `queryParam:"inline"`
	RemoveProjectEnvContentHintFlagsConnectionString2     *RemoveProjectEnvContentHintFlagsConnectionString2     `queryParam:"inline"`

	Type RemoveProjectEnvContentHintUnion2Type
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintRedisURL2(removeProjectEnvContentHintRedisURL2 RemoveProjectEnvContentHintRedisURL2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisURL2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintRedisURL2: &removeProjectEnvContentHintRedisURL2,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintRedisRestAPIURL2(removeProjectEnvContentHintRedisRestAPIURL2 RemoveProjectEnvContentHintRedisRestAPIURL2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIURL2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintRedisRestAPIURL2: &removeProjectEnvContentHintRedisRestAPIURL2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintRedisRestAPIToken2(removeProjectEnvContentHintRedisRestAPIToken2 RemoveProjectEnvContentHintRedisRestAPIToken2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIToken2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintRedisRestAPIToken2: &removeProjectEnvContentHintRedisRestAPIToken2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2(removeProjectEnvContentHintRedisRestAPIReadOnlyToken2 RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2: &removeProjectEnvContentHintRedisRestAPIReadOnlyToken2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintBlobReadWriteToken2(removeProjectEnvContentHintBlobReadWriteToken2 RemoveProjectEnvContentHintBlobReadWriteToken2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintBlobReadWriteToken2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintBlobReadWriteToken2: &removeProjectEnvContentHintBlobReadWriteToken2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresURL2(removeProjectEnvContentHintPostgresURL2 RemoveProjectEnvContentHintPostgresURL2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURL2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresURL2: &removeProjectEnvContentHintPostgresURL2,
		Type:                                    typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresURLNonPooling2(removeProjectEnvContentHintPostgresURLNonPooling2 RemoveProjectEnvContentHintPostgresURLNonPooling2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURLNonPooling2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresURLNonPooling2: &removeProjectEnvContentHintPostgresURLNonPooling2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresPrismaURL2(removeProjectEnvContentHintPostgresPrismaURL2 RemoveProjectEnvContentHintPostgresPrismaURL2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresPrismaURL2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresPrismaURL2: &removeProjectEnvContentHintPostgresPrismaURL2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresUser2(removeProjectEnvContentHintPostgresUser2 RemoveProjectEnvContentHintPostgresUser2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresUser2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresUser2: &removeProjectEnvContentHintPostgresUser2,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresHost2(removeProjectEnvContentHintPostgresHost2 RemoveProjectEnvContentHintPostgresHost2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresHost2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresHost2: &removeProjectEnvContentHintPostgresHost2,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresPassword2(removeProjectEnvContentHintPostgresPassword2 RemoveProjectEnvContentHintPostgresPassword2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresPassword2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresPassword2: &removeProjectEnvContentHintPostgresPassword2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresDatabase2(removeProjectEnvContentHintPostgresDatabase2 RemoveProjectEnvContentHintPostgresDatabase2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresDatabase2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresDatabase2: &removeProjectEnvContentHintPostgresDatabase2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintPostgresURLNoSsl2(removeProjectEnvContentHintPostgresURLNoSsl2 RemoveProjectEnvContentHintPostgresURLNoSsl2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURLNoSsl2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintPostgresURLNoSsl2: &removeProjectEnvContentHintPostgresURLNoSsl2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintIntegrationStoreSecret2(removeProjectEnvContentHintIntegrationStoreSecret2 RemoveProjectEnvContentHintIntegrationStoreSecret2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintIntegrationStoreSecret2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintIntegrationStoreSecret2: &removeProjectEnvContentHintIntegrationStoreSecret2,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion2RemoveProjectEnvContentHintFlagsConnectionString2(removeProjectEnvContentHintFlagsConnectionString2 RemoveProjectEnvContentHintFlagsConnectionString2) RemoveProjectEnvContentHintUnion2 {
	typ := RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintFlagsConnectionString2

	return RemoveProjectEnvContentHintUnion2{
		RemoveProjectEnvContentHintFlagsConnectionString2: &removeProjectEnvContentHintFlagsConnectionString2,
		Type: typ,
	}
}

func (u *RemoveProjectEnvContentHintUnion2) UnmarshalJSON(data []byte) error {

	var removeProjectEnvContentHintPostgresURLNonPooling2 RemoveProjectEnvContentHintPostgresURLNonPooling2 = RemoveProjectEnvContentHintPostgresURLNonPooling2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURLNonPooling2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURLNonPooling2 = &removeProjectEnvContentHintPostgresURLNonPooling2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURLNonPooling2
		return nil
	}

	var removeProjectEnvContentHintPostgresPassword2 RemoveProjectEnvContentHintPostgresPassword2 = RemoveProjectEnvContentHintPostgresPassword2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresPassword2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresPassword2 = &removeProjectEnvContentHintPostgresPassword2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresPassword2
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIToken2 RemoveProjectEnvContentHintRedisRestAPIToken2 = RemoveProjectEnvContentHintRedisRestAPIToken2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIToken2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIToken2 = &removeProjectEnvContentHintRedisRestAPIToken2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIToken2
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIReadOnlyToken2 RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 = RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIReadOnlyToken2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 = &removeProjectEnvContentHintRedisRestAPIReadOnlyToken2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2
		return nil
	}

	var removeProjectEnvContentHintBlobReadWriteToken2 RemoveProjectEnvContentHintBlobReadWriteToken2 = RemoveProjectEnvContentHintBlobReadWriteToken2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintBlobReadWriteToken2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintBlobReadWriteToken2 = &removeProjectEnvContentHintBlobReadWriteToken2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintBlobReadWriteToken2
		return nil
	}

	var removeProjectEnvContentHintPostgresURL2 RemoveProjectEnvContentHintPostgresURL2 = RemoveProjectEnvContentHintPostgresURL2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURL2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURL2 = &removeProjectEnvContentHintPostgresURL2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURL2
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIURL2 RemoveProjectEnvContentHintRedisRestAPIURL2 = RemoveProjectEnvContentHintRedisRestAPIURL2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIURL2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIURL2 = &removeProjectEnvContentHintRedisRestAPIURL2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisRestAPIURL2
		return nil
	}

	var removeProjectEnvContentHintPostgresUser2 RemoveProjectEnvContentHintPostgresUser2 = RemoveProjectEnvContentHintPostgresUser2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresUser2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresUser2 = &removeProjectEnvContentHintPostgresUser2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresUser2
		return nil
	}

	var removeProjectEnvContentHintRedisURL2 RemoveProjectEnvContentHintRedisURL2 = RemoveProjectEnvContentHintRedisURL2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisURL2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisURL2 = &removeProjectEnvContentHintRedisURL2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintRedisURL2
		return nil
	}

	var removeProjectEnvContentHintPostgresHost2 RemoveProjectEnvContentHintPostgresHost2 = RemoveProjectEnvContentHintPostgresHost2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresHost2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresHost2 = &removeProjectEnvContentHintPostgresHost2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresHost2
		return nil
	}

	var removeProjectEnvContentHintPostgresPrismaURL2 RemoveProjectEnvContentHintPostgresPrismaURL2 = RemoveProjectEnvContentHintPostgresPrismaURL2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresPrismaURL2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresPrismaURL2 = &removeProjectEnvContentHintPostgresPrismaURL2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresPrismaURL2
		return nil
	}

	var removeProjectEnvContentHintPostgresDatabase2 RemoveProjectEnvContentHintPostgresDatabase2 = RemoveProjectEnvContentHintPostgresDatabase2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresDatabase2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresDatabase2 = &removeProjectEnvContentHintPostgresDatabase2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresDatabase2
		return nil
	}

	var removeProjectEnvContentHintPostgresURLNoSsl2 RemoveProjectEnvContentHintPostgresURLNoSsl2 = RemoveProjectEnvContentHintPostgresURLNoSsl2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURLNoSsl2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURLNoSsl2 = &removeProjectEnvContentHintPostgresURLNoSsl2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintPostgresURLNoSsl2
		return nil
	}

	var removeProjectEnvContentHintFlagsConnectionString2 RemoveProjectEnvContentHintFlagsConnectionString2 = RemoveProjectEnvContentHintFlagsConnectionString2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintFlagsConnectionString2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintFlagsConnectionString2 = &removeProjectEnvContentHintFlagsConnectionString2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintFlagsConnectionString2
		return nil
	}

	var removeProjectEnvContentHintIntegrationStoreSecret2 RemoveProjectEnvContentHintIntegrationStoreSecret2 = RemoveProjectEnvContentHintIntegrationStoreSecret2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintIntegrationStoreSecret2, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintIntegrationStoreSecret2 = &removeProjectEnvContentHintIntegrationStoreSecret2
		u.Type = RemoveProjectEnvContentHintUnion2TypeRemoveProjectEnvContentHintIntegrationStoreSecret2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvContentHintUnion2", string(data))
}

func (u RemoveProjectEnvContentHintUnion2) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnvContentHintRedisURL2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisURL2, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIURL2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIURL2, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIToken2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIToken2, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken2, "", true)
	}

	if u.RemoveProjectEnvContentHintBlobReadWriteToken2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintBlobReadWriteToken2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURL2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURL2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURLNonPooling2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURLNonPooling2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresPrismaURL2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresPrismaURL2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresUser2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresUser2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresHost2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresHost2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresPassword2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresPassword2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresDatabase2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresDatabase2, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURLNoSsl2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURLNoSsl2, "", true)
	}

	if u.RemoveProjectEnvContentHintIntegrationStoreSecret2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintIntegrationStoreSecret2, "", true)
	}

	if u.RemoveProjectEnvContentHintFlagsConnectionString2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintFlagsConnectionString2, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvContentHintUnion2: all fields are null")
}

type RemoveProjectEnvTypeFlagsSecret2 string

const (
	RemoveProjectEnvTypeFlagsSecret2FlagsSecret RemoveProjectEnvTypeFlagsSecret2 = "flags-secret"
)

func (e RemoveProjectEnvTypeFlagsSecret2) ToPointer() *RemoveProjectEnvTypeFlagsSecret2 {
	return &e
}
func (e *RemoveProjectEnvTypeFlagsSecret2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = RemoveProjectEnvTypeFlagsSecret2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeFlagsSecret2: %v", v)
	}
}

// RemoveProjectEnvInternalContentHint2 - Similar to `contentHints`, but should not be exposed to the user.
type RemoveProjectEnvInternalContentHint2 struct {
	Type RemoveProjectEnvTypeFlagsSecret2 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *RemoveProjectEnvInternalContentHint2) GetType() RemoveProjectEnvTypeFlagsSecret2 {
	if o == nil {
		return RemoveProjectEnvTypeFlagsSecret2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvInternalContentHint2) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type RemoveProjectEnvResponseBody2 struct {
	System *bool                         `json:"system,omitempty"`
	Target *RemoveProjectEnvTargetUnion2 `json:"target,omitempty"`
	Type   RemoveProjectEnvType2         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                            `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                              `json:"decrypted,omitempty"`
	Value             string                             `json:"value"`
	VsmValue          *string                            `json:"vsmValue,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Key               string                             `json:"key"`
	ConfigurationID   *string                            `json:"configurationId,omitempty"`
	CreatedAt         *float64                           `json:"createdAt,omitempty"`
	UpdatedAt         *float64                           `json:"updatedAt,omitempty"`
	CreatedBy         *string                            `json:"createdBy,omitempty"`
	UpdatedBy         *string                            `json:"updatedBy,omitempty"`
	GitBranch         *string                            `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                            `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *RemoveProjectEnvContentHintUnion2 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *RemoveProjectEnvInternalContentHint2 `json:"internalContentHint,omitempty"`
	Comment              *string                               `json:"comment,omitempty"`
	CustomEnvironmentIds []string                              `json:"customEnvironmentIds,omitempty"`
}

func (o *RemoveProjectEnvResponseBody2) GetSystem() *bool {
	if o == nil {
		return nil
	}
	return o.System
}

func (o *RemoveProjectEnvResponseBody2) GetTarget() *RemoveProjectEnvTargetUnion2 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnvResponseBody2) GetType() RemoveProjectEnvType2 {
	if o == nil {
		return RemoveProjectEnvType2("")
	}
	return o.Type
}

func (o *RemoveProjectEnvResponseBody2) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *RemoveProjectEnvResponseBody2) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnvResponseBody2) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *RemoveProjectEnvResponseBody2) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *RemoveProjectEnvResponseBody2) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnvResponseBody2) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnvResponseBody2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnvResponseBody2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnvResponseBody2) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnvResponseBody2) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnvResponseBody2) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnvResponseBody2) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnvResponseBody2) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnvResponseBody2) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnvResponseBody2) GetContentHint() *RemoveProjectEnvContentHintUnion2 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnvResponseBody2) GetInternalContentHint() *RemoveProjectEnvInternalContentHint2 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *RemoveProjectEnvResponseBody2) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *RemoveProjectEnvResponseBody2) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type RemoveProjectEnvTargetEnum2 string

const (
	RemoveProjectEnvTargetEnum2Production  RemoveProjectEnvTargetEnum2 = "production"
	RemoveProjectEnvTargetEnum2Preview     RemoveProjectEnvTargetEnum2 = "preview"
	RemoveProjectEnvTargetEnum2Development RemoveProjectEnvTargetEnum2 = "development"
)

func (e RemoveProjectEnvTargetEnum2) ToPointer() *RemoveProjectEnvTargetEnum2 {
	return &e
}
func (e *RemoveProjectEnvTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTargetEnum2: %v", v)
	}
}

type RemoveProjectEnvTargetEnum1 string

const (
	RemoveProjectEnvTargetEnum1Production  RemoveProjectEnvTargetEnum1 = "production"
	RemoveProjectEnvTargetEnum1Preview     RemoveProjectEnvTargetEnum1 = "preview"
	RemoveProjectEnvTargetEnum1Development RemoveProjectEnvTargetEnum1 = "development"
)

func (e RemoveProjectEnvTargetEnum1) ToPointer() *RemoveProjectEnvTargetEnum1 {
	return &e
}
func (e *RemoveProjectEnvTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = RemoveProjectEnvTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTargetEnum1: %v", v)
	}
}

type RemoveProjectEnvTargetUnion1Type string

const (
	RemoveProjectEnvTargetUnion1TypeArrayOfRemoveProjectEnvTargetEnum1 RemoveProjectEnvTargetUnion1Type = "arrayOfRemoveProjectEnvTargetEnum1"
	RemoveProjectEnvTargetUnion1TypeRemoveProjectEnvTargetEnum2        RemoveProjectEnvTargetUnion1Type = "removeProjectEnv_target_enum_2"
)

type RemoveProjectEnvTargetUnion1 struct {
	ArrayOfRemoveProjectEnvTargetEnum1 []RemoveProjectEnvTargetEnum1 `queryParam:"inline"`
	RemoveProjectEnvTargetEnum2        *RemoveProjectEnvTargetEnum2  `queryParam:"inline"`

	Type RemoveProjectEnvTargetUnion1Type
}

func CreateRemoveProjectEnvTargetUnion1ArrayOfRemoveProjectEnvTargetEnum1(arrayOfRemoveProjectEnvTargetEnum1 []RemoveProjectEnvTargetEnum1) RemoveProjectEnvTargetUnion1 {
	typ := RemoveProjectEnvTargetUnion1TypeArrayOfRemoveProjectEnvTargetEnum1

	return RemoveProjectEnvTargetUnion1{
		ArrayOfRemoveProjectEnvTargetEnum1: arrayOfRemoveProjectEnvTargetEnum1,
		Type:                               typ,
	}
}

func CreateRemoveProjectEnvTargetUnion1RemoveProjectEnvTargetEnum2(removeProjectEnvTargetEnum2 RemoveProjectEnvTargetEnum2) RemoveProjectEnvTargetUnion1 {
	typ := RemoveProjectEnvTargetUnion1TypeRemoveProjectEnvTargetEnum2

	return RemoveProjectEnvTargetUnion1{
		RemoveProjectEnvTargetEnum2: &removeProjectEnvTargetEnum2,
		Type:                        typ,
	}
}

func (u *RemoveProjectEnvTargetUnion1) UnmarshalJSON(data []byte) error {

	var arrayOfRemoveProjectEnvTargetEnum1 []RemoveProjectEnvTargetEnum1 = []RemoveProjectEnvTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvTargetEnum1, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvTargetEnum1 = arrayOfRemoveProjectEnvTargetEnum1
		u.Type = RemoveProjectEnvTargetUnion1TypeArrayOfRemoveProjectEnvTargetEnum1
		return nil
	}

	var removeProjectEnvTargetEnum2 RemoveProjectEnvTargetEnum2 = RemoveProjectEnvTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &removeProjectEnvTargetEnum2, "", true, true); err == nil {
		u.RemoveProjectEnvTargetEnum2 = &removeProjectEnvTargetEnum2
		u.Type = RemoveProjectEnvTargetUnion1TypeRemoveProjectEnvTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvTargetUnion1", string(data))
}

func (u RemoveProjectEnvTargetUnion1) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvTargetEnum1, "", true)
	}

	if u.RemoveProjectEnvTargetEnum2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvTargetUnion1: all fields are null")
}

type RemoveProjectEnvType1 string

const (
	RemoveProjectEnvType1System    RemoveProjectEnvType1 = "system"
	RemoveProjectEnvType1Encrypted RemoveProjectEnvType1 = "encrypted"
	RemoveProjectEnvType1Plain     RemoveProjectEnvType1 = "plain"
	RemoveProjectEnvType1Sensitive RemoveProjectEnvType1 = "sensitive"
	RemoveProjectEnvType1Secret    RemoveProjectEnvType1 = "secret"
)

func (e RemoveProjectEnvType1) ToPointer() *RemoveProjectEnvType1 {
	return &e
}
func (e *RemoveProjectEnvType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = RemoveProjectEnvType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvType1: %v", v)
	}
}

type RemoveProjectEnvTypeFlagsConnectionString1 string

const (
	RemoveProjectEnvTypeFlagsConnectionString1FlagsConnectionString RemoveProjectEnvTypeFlagsConnectionString1 = "flags-connection-string"
)

func (e RemoveProjectEnvTypeFlagsConnectionString1) ToPointer() *RemoveProjectEnvTypeFlagsConnectionString1 {
	return &e
}
func (e *RemoveProjectEnvTypeFlagsConnectionString1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = RemoveProjectEnvTypeFlagsConnectionString1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeFlagsConnectionString1: %v", v)
	}
}

type RemoveProjectEnvContentHintFlagsConnectionString1 struct {
	Type      RemoveProjectEnvTypeFlagsConnectionString1 `json:"type"`
	ProjectID string                                     `json:"projectId"`
}

func (o *RemoveProjectEnvContentHintFlagsConnectionString1) GetType() RemoveProjectEnvTypeFlagsConnectionString1 {
	if o == nil {
		return RemoveProjectEnvTypeFlagsConnectionString1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintFlagsConnectionString1) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type RemoveProjectEnvTypeIntegrationStoreSecret1 string

const (
	RemoveProjectEnvTypeIntegrationStoreSecret1IntegrationStoreSecret RemoveProjectEnvTypeIntegrationStoreSecret1 = "integration-store-secret"
)

func (e RemoveProjectEnvTypeIntegrationStoreSecret1) ToPointer() *RemoveProjectEnvTypeIntegrationStoreSecret1 {
	return &e
}
func (e *RemoveProjectEnvTypeIntegrationStoreSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = RemoveProjectEnvTypeIntegrationStoreSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeIntegrationStoreSecret1: %v", v)
	}
}

type RemoveProjectEnvContentHintIntegrationStoreSecret1 struct {
	Type                       RemoveProjectEnvTypeIntegrationStoreSecret1 `json:"type"`
	StoreID                    string                                      `json:"storeId"`
	IntegrationID              string                                      `json:"integrationId"`
	IntegrationProductID       string                                      `json:"integrationProductId"`
	IntegrationConfigurationID string                                      `json:"integrationConfigurationId"`
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret1) GetType() RemoveProjectEnvTypeIntegrationStoreSecret1 {
	if o == nil {
		return RemoveProjectEnvTypeIntegrationStoreSecret1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *RemoveProjectEnvContentHintIntegrationStoreSecret1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type RemoveProjectEnvTypePostgresURLNoSsl1 string

const (
	RemoveProjectEnvTypePostgresURLNoSsl1PostgresURLNoSsl RemoveProjectEnvTypePostgresURLNoSsl1 = "postgres-url-no-ssl"
)

func (e RemoveProjectEnvTypePostgresURLNoSsl1) ToPointer() *RemoveProjectEnvTypePostgresURLNoSsl1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURLNoSsl1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = RemoveProjectEnvTypePostgresURLNoSsl1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURLNoSsl1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURLNoSsl1 struct {
	Type    RemoveProjectEnvTypePostgresURLNoSsl1 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURLNoSsl1) GetType() RemoveProjectEnvTypePostgresURLNoSsl1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURLNoSsl1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURLNoSsl1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresDatabase1 string

const (
	RemoveProjectEnvTypePostgresDatabase1PostgresDatabase RemoveProjectEnvTypePostgresDatabase1 = "postgres-database"
)

func (e RemoveProjectEnvTypePostgresDatabase1) ToPointer() *RemoveProjectEnvTypePostgresDatabase1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresDatabase1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = RemoveProjectEnvTypePostgresDatabase1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresDatabase1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresDatabase1 struct {
	Type    RemoveProjectEnvTypePostgresDatabase1 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresDatabase1) GetType() RemoveProjectEnvTypePostgresDatabase1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresDatabase1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresDatabase1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresPassword1 string

const (
	RemoveProjectEnvTypePostgresPassword1PostgresPassword RemoveProjectEnvTypePostgresPassword1 = "postgres-password"
)

func (e RemoveProjectEnvTypePostgresPassword1) ToPointer() *RemoveProjectEnvTypePostgresPassword1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresPassword1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = RemoveProjectEnvTypePostgresPassword1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresPassword1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresPassword1 struct {
	Type    RemoveProjectEnvTypePostgresPassword1 `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresPassword1) GetType() RemoveProjectEnvTypePostgresPassword1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresPassword1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresPassword1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresHost1 string

const (
	RemoveProjectEnvTypePostgresHost1PostgresHost RemoveProjectEnvTypePostgresHost1 = "postgres-host"
)

func (e RemoveProjectEnvTypePostgresHost1) ToPointer() *RemoveProjectEnvTypePostgresHost1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresHost1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = RemoveProjectEnvTypePostgresHost1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresHost1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresHost1 struct {
	Type    RemoveProjectEnvTypePostgresHost1 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresHost1) GetType() RemoveProjectEnvTypePostgresHost1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresHost1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresHost1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresUser1 string

const (
	RemoveProjectEnvTypePostgresUser1PostgresUser RemoveProjectEnvTypePostgresUser1 = "postgres-user"
)

func (e RemoveProjectEnvTypePostgresUser1) ToPointer() *RemoveProjectEnvTypePostgresUser1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresUser1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = RemoveProjectEnvTypePostgresUser1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresUser1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresUser1 struct {
	Type    RemoveProjectEnvTypePostgresUser1 `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresUser1) GetType() RemoveProjectEnvTypePostgresUser1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresUser1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresUser1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresPrismaURL1 string

const (
	RemoveProjectEnvTypePostgresPrismaURL1PostgresPrismaURL RemoveProjectEnvTypePostgresPrismaURL1 = "postgres-prisma-url"
)

func (e RemoveProjectEnvTypePostgresPrismaURL1) ToPointer() *RemoveProjectEnvTypePostgresPrismaURL1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresPrismaURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = RemoveProjectEnvTypePostgresPrismaURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresPrismaURL1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresPrismaURL1 struct {
	Type    RemoveProjectEnvTypePostgresPrismaURL1 `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresPrismaURL1) GetType() RemoveProjectEnvTypePostgresPrismaURL1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresPrismaURL1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresPrismaURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresURLNonPooling1 string

const (
	RemoveProjectEnvTypePostgresURLNonPooling1PostgresURLNonPooling RemoveProjectEnvTypePostgresURLNonPooling1 = "postgres-url-non-pooling"
)

func (e RemoveProjectEnvTypePostgresURLNonPooling1) ToPointer() *RemoveProjectEnvTypePostgresURLNonPooling1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURLNonPooling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = RemoveProjectEnvTypePostgresURLNonPooling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURLNonPooling1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURLNonPooling1 struct {
	Type    RemoveProjectEnvTypePostgresURLNonPooling1 `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURLNonPooling1) GetType() RemoveProjectEnvTypePostgresURLNonPooling1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURLNonPooling1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURLNonPooling1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypePostgresURL1 string

const (
	RemoveProjectEnvTypePostgresURL1PostgresURL RemoveProjectEnvTypePostgresURL1 = "postgres-url"
)

func (e RemoveProjectEnvTypePostgresURL1) ToPointer() *RemoveProjectEnvTypePostgresURL1 {
	return &e
}
func (e *RemoveProjectEnvTypePostgresURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = RemoveProjectEnvTypePostgresURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypePostgresURL1: %v", v)
	}
}

type RemoveProjectEnvContentHintPostgresURL1 struct {
	Type    RemoveProjectEnvTypePostgresURL1 `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintPostgresURL1) GetType() RemoveProjectEnvTypePostgresURL1 {
	if o == nil {
		return RemoveProjectEnvTypePostgresURL1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintPostgresURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeBlobReadWriteToken1 string

const (
	RemoveProjectEnvTypeBlobReadWriteToken1BlobReadWriteToken RemoveProjectEnvTypeBlobReadWriteToken1 = "blob-read-write-token"
)

func (e RemoveProjectEnvTypeBlobReadWriteToken1) ToPointer() *RemoveProjectEnvTypeBlobReadWriteToken1 {
	return &e
}
func (e *RemoveProjectEnvTypeBlobReadWriteToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = RemoveProjectEnvTypeBlobReadWriteToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeBlobReadWriteToken1: %v", v)
	}
}

type RemoveProjectEnvContentHintBlobReadWriteToken1 struct {
	Type    RemoveProjectEnvTypeBlobReadWriteToken1 `json:"type"`
	StoreID string                                  `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintBlobReadWriteToken1) GetType() RemoveProjectEnvTypeBlobReadWriteToken1 {
	if o == nil {
		return RemoveProjectEnvTypeBlobReadWriteToken1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintBlobReadWriteToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1 string

const (
	RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1RedisRestAPIReadOnlyToken RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1 = "redis-rest-api-read-only-token"
)

func (e RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1) ToPointer() *RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1 `json:"type"`
	StoreID string                                         `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetType() RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIReadOnlyToken1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIToken1 string

const (
	RemoveProjectEnvTypeRedisRestAPIToken1RedisRestAPIToken RemoveProjectEnvTypeRedisRestAPIToken1 = "redis-rest-api-token"
)

func (e RemoveProjectEnvTypeRedisRestAPIToken1) ToPointer() *RemoveProjectEnvTypeRedisRestAPIToken1 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIToken1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = RemoveProjectEnvTypeRedisRestAPIToken1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIToken1: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIToken1 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIToken1 `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIToken1) GetType() RemoveProjectEnvTypeRedisRestAPIToken1 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIToken1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIToken1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisRestAPIURL1 string

const (
	RemoveProjectEnvTypeRedisRestAPIURL1RedisRestAPIURL RemoveProjectEnvTypeRedisRestAPIURL1 = "redis-rest-api-url"
)

func (e RemoveProjectEnvTypeRedisRestAPIURL1) ToPointer() *RemoveProjectEnvTypeRedisRestAPIURL1 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisRestAPIURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = RemoveProjectEnvTypeRedisRestAPIURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisRestAPIURL1: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisRestAPIURL1 struct {
	Type    RemoveProjectEnvTypeRedisRestAPIURL1 `json:"type"`
	StoreID string                               `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisRestAPIURL1) GetType() RemoveProjectEnvTypeRedisRestAPIURL1 {
	if o == nil {
		return RemoveProjectEnvTypeRedisRestAPIURL1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisRestAPIURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvTypeRedisURL1 string

const (
	RemoveProjectEnvTypeRedisURL1RedisURL RemoveProjectEnvTypeRedisURL1 = "redis-url"
)

func (e RemoveProjectEnvTypeRedisURL1) ToPointer() *RemoveProjectEnvTypeRedisURL1 {
	return &e
}
func (e *RemoveProjectEnvTypeRedisURL1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = RemoveProjectEnvTypeRedisURL1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeRedisURL1: %v", v)
	}
}

type RemoveProjectEnvContentHintRedisURL1 struct {
	Type    RemoveProjectEnvTypeRedisURL1 `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *RemoveProjectEnvContentHintRedisURL1) GetType() RemoveProjectEnvTypeRedisURL1 {
	if o == nil {
		return RemoveProjectEnvTypeRedisURL1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvContentHintRedisURL1) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type RemoveProjectEnvContentHintUnion1Type string

const (
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisURL1                  RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_RedisURL_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIURL1           RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_RedisRestAPIURL_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIToken1         RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_RedisRestAPIToken_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_RedisRestAPIReadOnlyToken_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintBlobReadWriteToken1        RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_BlobReadWriteToken_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURL1               RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresURL_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURLNonPooling1     RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresURLNonPooling_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresPrismaURL1         RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresPrismaURL_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresUser1              RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresUser_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresHost1              RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresHost_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresPassword1          RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresPassword_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresDatabase1          RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresDatabase_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURLNoSsl1          RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_PostgresURLNoSsl_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintIntegrationStoreSecret1    RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_IntegrationStoreSecret_1"
	RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintFlagsConnectionString1     RemoveProjectEnvContentHintUnion1Type = "removeProjectEnv_contentHint_FlagsConnectionString_1"
)

type RemoveProjectEnvContentHintUnion1 struct {
	RemoveProjectEnvContentHintRedisURL1                  *RemoveProjectEnvContentHintRedisURL1                  `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIURL1           *RemoveProjectEnvContentHintRedisRestAPIURL1           `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIToken1         *RemoveProjectEnvContentHintRedisRestAPIToken1         `queryParam:"inline"`
	RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 *RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 `queryParam:"inline"`
	RemoveProjectEnvContentHintBlobReadWriteToken1        *RemoveProjectEnvContentHintBlobReadWriteToken1        `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURL1               *RemoveProjectEnvContentHintPostgresURL1               `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURLNonPooling1     *RemoveProjectEnvContentHintPostgresURLNonPooling1     `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresPrismaURL1         *RemoveProjectEnvContentHintPostgresPrismaURL1         `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresUser1              *RemoveProjectEnvContentHintPostgresUser1              `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresHost1              *RemoveProjectEnvContentHintPostgresHost1              `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresPassword1          *RemoveProjectEnvContentHintPostgresPassword1          `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresDatabase1          *RemoveProjectEnvContentHintPostgresDatabase1          `queryParam:"inline"`
	RemoveProjectEnvContentHintPostgresURLNoSsl1          *RemoveProjectEnvContentHintPostgresURLNoSsl1          `queryParam:"inline"`
	RemoveProjectEnvContentHintIntegrationStoreSecret1    *RemoveProjectEnvContentHintIntegrationStoreSecret1    `queryParam:"inline"`
	RemoveProjectEnvContentHintFlagsConnectionString1     *RemoveProjectEnvContentHintFlagsConnectionString1     `queryParam:"inline"`

	Type RemoveProjectEnvContentHintUnion1Type
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintRedisURL1(removeProjectEnvContentHintRedisURL1 RemoveProjectEnvContentHintRedisURL1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisURL1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintRedisURL1: &removeProjectEnvContentHintRedisURL1,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintRedisRestAPIURL1(removeProjectEnvContentHintRedisRestAPIURL1 RemoveProjectEnvContentHintRedisRestAPIURL1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIURL1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintRedisRestAPIURL1: &removeProjectEnvContentHintRedisRestAPIURL1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintRedisRestAPIToken1(removeProjectEnvContentHintRedisRestAPIToken1 RemoveProjectEnvContentHintRedisRestAPIToken1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIToken1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintRedisRestAPIToken1: &removeProjectEnvContentHintRedisRestAPIToken1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1(removeProjectEnvContentHintRedisRestAPIReadOnlyToken1 RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1: &removeProjectEnvContentHintRedisRestAPIReadOnlyToken1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintBlobReadWriteToken1(removeProjectEnvContentHintBlobReadWriteToken1 RemoveProjectEnvContentHintBlobReadWriteToken1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintBlobReadWriteToken1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintBlobReadWriteToken1: &removeProjectEnvContentHintBlobReadWriteToken1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresURL1(removeProjectEnvContentHintPostgresURL1 RemoveProjectEnvContentHintPostgresURL1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURL1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresURL1: &removeProjectEnvContentHintPostgresURL1,
		Type:                                    typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresURLNonPooling1(removeProjectEnvContentHintPostgresURLNonPooling1 RemoveProjectEnvContentHintPostgresURLNonPooling1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURLNonPooling1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresURLNonPooling1: &removeProjectEnvContentHintPostgresURLNonPooling1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresPrismaURL1(removeProjectEnvContentHintPostgresPrismaURL1 RemoveProjectEnvContentHintPostgresPrismaURL1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresPrismaURL1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresPrismaURL1: &removeProjectEnvContentHintPostgresPrismaURL1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresUser1(removeProjectEnvContentHintPostgresUser1 RemoveProjectEnvContentHintPostgresUser1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresUser1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresUser1: &removeProjectEnvContentHintPostgresUser1,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresHost1(removeProjectEnvContentHintPostgresHost1 RemoveProjectEnvContentHintPostgresHost1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresHost1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresHost1: &removeProjectEnvContentHintPostgresHost1,
		Type:                                     typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresPassword1(removeProjectEnvContentHintPostgresPassword1 RemoveProjectEnvContentHintPostgresPassword1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresPassword1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresPassword1: &removeProjectEnvContentHintPostgresPassword1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresDatabase1(removeProjectEnvContentHintPostgresDatabase1 RemoveProjectEnvContentHintPostgresDatabase1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresDatabase1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresDatabase1: &removeProjectEnvContentHintPostgresDatabase1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintPostgresURLNoSsl1(removeProjectEnvContentHintPostgresURLNoSsl1 RemoveProjectEnvContentHintPostgresURLNoSsl1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURLNoSsl1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintPostgresURLNoSsl1: &removeProjectEnvContentHintPostgresURLNoSsl1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintIntegrationStoreSecret1(removeProjectEnvContentHintIntegrationStoreSecret1 RemoveProjectEnvContentHintIntegrationStoreSecret1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintIntegrationStoreSecret1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintIntegrationStoreSecret1: &removeProjectEnvContentHintIntegrationStoreSecret1,
		Type: typ,
	}
}

func CreateRemoveProjectEnvContentHintUnion1RemoveProjectEnvContentHintFlagsConnectionString1(removeProjectEnvContentHintFlagsConnectionString1 RemoveProjectEnvContentHintFlagsConnectionString1) RemoveProjectEnvContentHintUnion1 {
	typ := RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintFlagsConnectionString1

	return RemoveProjectEnvContentHintUnion1{
		RemoveProjectEnvContentHintFlagsConnectionString1: &removeProjectEnvContentHintFlagsConnectionString1,
		Type: typ,
	}
}

func (u *RemoveProjectEnvContentHintUnion1) UnmarshalJSON(data []byte) error {

	var removeProjectEnvContentHintPostgresURLNonPooling1 RemoveProjectEnvContentHintPostgresURLNonPooling1 = RemoveProjectEnvContentHintPostgresURLNonPooling1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURLNonPooling1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURLNonPooling1 = &removeProjectEnvContentHintPostgresURLNonPooling1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURLNonPooling1
		return nil
	}

	var removeProjectEnvContentHintPostgresPassword1 RemoveProjectEnvContentHintPostgresPassword1 = RemoveProjectEnvContentHintPostgresPassword1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresPassword1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresPassword1 = &removeProjectEnvContentHintPostgresPassword1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresPassword1
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIToken1 RemoveProjectEnvContentHintRedisRestAPIToken1 = RemoveProjectEnvContentHintRedisRestAPIToken1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIToken1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIToken1 = &removeProjectEnvContentHintRedisRestAPIToken1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIToken1
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIReadOnlyToken1 RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 = RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIReadOnlyToken1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 = &removeProjectEnvContentHintRedisRestAPIReadOnlyToken1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1
		return nil
	}

	var removeProjectEnvContentHintBlobReadWriteToken1 RemoveProjectEnvContentHintBlobReadWriteToken1 = RemoveProjectEnvContentHintBlobReadWriteToken1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintBlobReadWriteToken1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintBlobReadWriteToken1 = &removeProjectEnvContentHintBlobReadWriteToken1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintBlobReadWriteToken1
		return nil
	}

	var removeProjectEnvContentHintPostgresURL1 RemoveProjectEnvContentHintPostgresURL1 = RemoveProjectEnvContentHintPostgresURL1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURL1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURL1 = &removeProjectEnvContentHintPostgresURL1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURL1
		return nil
	}

	var removeProjectEnvContentHintRedisRestAPIURL1 RemoveProjectEnvContentHintRedisRestAPIURL1 = RemoveProjectEnvContentHintRedisRestAPIURL1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisRestAPIURL1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisRestAPIURL1 = &removeProjectEnvContentHintRedisRestAPIURL1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisRestAPIURL1
		return nil
	}

	var removeProjectEnvContentHintPostgresUser1 RemoveProjectEnvContentHintPostgresUser1 = RemoveProjectEnvContentHintPostgresUser1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresUser1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresUser1 = &removeProjectEnvContentHintPostgresUser1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresUser1
		return nil
	}

	var removeProjectEnvContentHintRedisURL1 RemoveProjectEnvContentHintRedisURL1 = RemoveProjectEnvContentHintRedisURL1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintRedisURL1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintRedisURL1 = &removeProjectEnvContentHintRedisURL1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintRedisURL1
		return nil
	}

	var removeProjectEnvContentHintPostgresHost1 RemoveProjectEnvContentHintPostgresHost1 = RemoveProjectEnvContentHintPostgresHost1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresHost1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresHost1 = &removeProjectEnvContentHintPostgresHost1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresHost1
		return nil
	}

	var removeProjectEnvContentHintPostgresPrismaURL1 RemoveProjectEnvContentHintPostgresPrismaURL1 = RemoveProjectEnvContentHintPostgresPrismaURL1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresPrismaURL1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresPrismaURL1 = &removeProjectEnvContentHintPostgresPrismaURL1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresPrismaURL1
		return nil
	}

	var removeProjectEnvContentHintPostgresDatabase1 RemoveProjectEnvContentHintPostgresDatabase1 = RemoveProjectEnvContentHintPostgresDatabase1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresDatabase1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresDatabase1 = &removeProjectEnvContentHintPostgresDatabase1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresDatabase1
		return nil
	}

	var removeProjectEnvContentHintPostgresURLNoSsl1 RemoveProjectEnvContentHintPostgresURLNoSsl1 = RemoveProjectEnvContentHintPostgresURLNoSsl1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintPostgresURLNoSsl1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintPostgresURLNoSsl1 = &removeProjectEnvContentHintPostgresURLNoSsl1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintPostgresURLNoSsl1
		return nil
	}

	var removeProjectEnvContentHintFlagsConnectionString1 RemoveProjectEnvContentHintFlagsConnectionString1 = RemoveProjectEnvContentHintFlagsConnectionString1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintFlagsConnectionString1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintFlagsConnectionString1 = &removeProjectEnvContentHintFlagsConnectionString1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintFlagsConnectionString1
		return nil
	}

	var removeProjectEnvContentHintIntegrationStoreSecret1 RemoveProjectEnvContentHintIntegrationStoreSecret1 = RemoveProjectEnvContentHintIntegrationStoreSecret1{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvContentHintIntegrationStoreSecret1, "", true, true); err == nil {
		u.RemoveProjectEnvContentHintIntegrationStoreSecret1 = &removeProjectEnvContentHintIntegrationStoreSecret1
		u.Type = RemoveProjectEnvContentHintUnion1TypeRemoveProjectEnvContentHintIntegrationStoreSecret1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvContentHintUnion1", string(data))
}

func (u RemoveProjectEnvContentHintUnion1) MarshalJSON() ([]byte, error) {
	if u.RemoveProjectEnvContentHintRedisURL1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisURL1, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIURL1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIURL1, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIToken1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIToken1, "", true)
	}

	if u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintRedisRestAPIReadOnlyToken1, "", true)
	}

	if u.RemoveProjectEnvContentHintBlobReadWriteToken1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintBlobReadWriteToken1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURL1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURL1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURLNonPooling1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURLNonPooling1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresPrismaURL1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresPrismaURL1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresUser1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresUser1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresHost1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresHost1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresPassword1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresPassword1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresDatabase1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresDatabase1, "", true)
	}

	if u.RemoveProjectEnvContentHintPostgresURLNoSsl1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintPostgresURLNoSsl1, "", true)
	}

	if u.RemoveProjectEnvContentHintIntegrationStoreSecret1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintIntegrationStoreSecret1, "", true)
	}

	if u.RemoveProjectEnvContentHintFlagsConnectionString1 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvContentHintFlagsConnectionString1, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvContentHintUnion1: all fields are null")
}

type RemoveProjectEnvTypeFlagsSecret1 string

const (
	RemoveProjectEnvTypeFlagsSecret1FlagsSecret RemoveProjectEnvTypeFlagsSecret1 = "flags-secret"
)

func (e RemoveProjectEnvTypeFlagsSecret1) ToPointer() *RemoveProjectEnvTypeFlagsSecret1 {
	return &e
}
func (e *RemoveProjectEnvTypeFlagsSecret1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = RemoveProjectEnvTypeFlagsSecret1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RemoveProjectEnvTypeFlagsSecret1: %v", v)
	}
}

// RemoveProjectEnvInternalContentHint1 - Similar to `contentHints`, but should not be exposed to the user.
type RemoveProjectEnvInternalContentHint1 struct {
	Type RemoveProjectEnvTypeFlagsSecret1 `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *RemoveProjectEnvInternalContentHint1) GetType() RemoveProjectEnvTypeFlagsSecret1 {
	if o == nil {
		return RemoveProjectEnvTypeFlagsSecret1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvInternalContentHint1) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type RemoveProjectEnvResponseBody1 struct {
	Target *RemoveProjectEnvTargetUnion1 `json:"target,omitempty"`
	Type   RemoveProjectEnvType1         `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                            `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                              `json:"decrypted,omitempty"`
	Value             string                             `json:"value"`
	VsmValue          *string                            `json:"vsmValue,omitempty"`
	ID                *string                            `json:"id,omitempty"`
	Key               string                             `json:"key"`
	ConfigurationID   *string                            `json:"configurationId,omitempty"`
	CreatedAt         *float64                           `json:"createdAt,omitempty"`
	UpdatedAt         *float64                           `json:"updatedAt,omitempty"`
	CreatedBy         *string                            `json:"createdBy,omitempty"`
	UpdatedBy         *string                            `json:"updatedBy,omitempty"`
	GitBranch         *string                            `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                            `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                            `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *RemoveProjectEnvContentHintUnion1 `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *RemoveProjectEnvInternalContentHint1 `json:"internalContentHint,omitempty"`
	Comment              *string                               `json:"comment,omitempty"`
	CustomEnvironmentIds []string                              `json:"customEnvironmentIds,omitempty"`
}

func (o *RemoveProjectEnvResponseBody1) GetTarget() *RemoveProjectEnvTargetUnion1 {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *RemoveProjectEnvResponseBody1) GetType() RemoveProjectEnvType1 {
	if o == nil {
		return RemoveProjectEnvType1("")
	}
	return o.Type
}

func (o *RemoveProjectEnvResponseBody1) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *RemoveProjectEnvResponseBody1) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *RemoveProjectEnvResponseBody1) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *RemoveProjectEnvResponseBody1) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *RemoveProjectEnvResponseBody1) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RemoveProjectEnvResponseBody1) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *RemoveProjectEnvResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *RemoveProjectEnvResponseBody1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *RemoveProjectEnvResponseBody1) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *RemoveProjectEnvResponseBody1) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *RemoveProjectEnvResponseBody1) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *RemoveProjectEnvResponseBody1) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *RemoveProjectEnvResponseBody1) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *RemoveProjectEnvResponseBody1) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *RemoveProjectEnvResponseBody1) GetContentHint() *RemoveProjectEnvContentHintUnion1 {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *RemoveProjectEnvResponseBody1) GetInternalContentHint() *RemoveProjectEnvInternalContentHint1 {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *RemoveProjectEnvResponseBody1) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *RemoveProjectEnvResponseBody1) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

type RemoveProjectEnvResponseBodyType string

const (
	RemoveProjectEnvResponseBodyTypeArrayOfRemoveProjectEnvResponseBody1 RemoveProjectEnvResponseBodyType = "arrayOfRemoveProjectEnvResponseBody1"
	RemoveProjectEnvResponseBodyTypeRemoveProjectEnvResponseBody2        RemoveProjectEnvResponseBodyType = "removeProjectEnv_ResponseBody_2"
	RemoveProjectEnvResponseBodyTypeRemoveProjectEnvResponseBody3        RemoveProjectEnvResponseBodyType = "removeProjectEnv_ResponseBody_3"
)

// RemoveProjectEnvResponseBody - The environment variable was successfully removed
type RemoveProjectEnvResponseBody struct {
	ArrayOfRemoveProjectEnvResponseBody1 []RemoveProjectEnvResponseBody1 `queryParam:"inline"`
	RemoveProjectEnvResponseBody2        *RemoveProjectEnvResponseBody2  `queryParam:"inline"`
	RemoveProjectEnvResponseBody3        *RemoveProjectEnvResponseBody3  `queryParam:"inline"`

	Type RemoveProjectEnvResponseBodyType
}

func CreateRemoveProjectEnvResponseBodyArrayOfRemoveProjectEnvResponseBody1(arrayOfRemoveProjectEnvResponseBody1 []RemoveProjectEnvResponseBody1) RemoveProjectEnvResponseBody {
	typ := RemoveProjectEnvResponseBodyTypeArrayOfRemoveProjectEnvResponseBody1

	return RemoveProjectEnvResponseBody{
		ArrayOfRemoveProjectEnvResponseBody1: arrayOfRemoveProjectEnvResponseBody1,
		Type:                                 typ,
	}
}

func CreateRemoveProjectEnvResponseBodyRemoveProjectEnvResponseBody2(removeProjectEnvResponseBody2 RemoveProjectEnvResponseBody2) RemoveProjectEnvResponseBody {
	typ := RemoveProjectEnvResponseBodyTypeRemoveProjectEnvResponseBody2

	return RemoveProjectEnvResponseBody{
		RemoveProjectEnvResponseBody2: &removeProjectEnvResponseBody2,
		Type:                          typ,
	}
}

func CreateRemoveProjectEnvResponseBodyRemoveProjectEnvResponseBody3(removeProjectEnvResponseBody3 RemoveProjectEnvResponseBody3) RemoveProjectEnvResponseBody {
	typ := RemoveProjectEnvResponseBodyTypeRemoveProjectEnvResponseBody3

	return RemoveProjectEnvResponseBody{
		RemoveProjectEnvResponseBody3: &removeProjectEnvResponseBody3,
		Type:                          typ,
	}
}

func (u *RemoveProjectEnvResponseBody) UnmarshalJSON(data []byte) error {

	var removeProjectEnvResponseBody3 RemoveProjectEnvResponseBody3 = RemoveProjectEnvResponseBody3{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvResponseBody3, "", true, true); err == nil {
		u.RemoveProjectEnvResponseBody3 = &removeProjectEnvResponseBody3
		u.Type = RemoveProjectEnvResponseBodyTypeRemoveProjectEnvResponseBody3
		return nil
	}

	var removeProjectEnvResponseBody2 RemoveProjectEnvResponseBody2 = RemoveProjectEnvResponseBody2{}
	if err := utils.UnmarshalJSON(data, &removeProjectEnvResponseBody2, "", true, true); err == nil {
		u.RemoveProjectEnvResponseBody2 = &removeProjectEnvResponseBody2
		u.Type = RemoveProjectEnvResponseBodyTypeRemoveProjectEnvResponseBody2
		return nil
	}

	var arrayOfRemoveProjectEnvResponseBody1 []RemoveProjectEnvResponseBody1 = []RemoveProjectEnvResponseBody1{}
	if err := utils.UnmarshalJSON(data, &arrayOfRemoveProjectEnvResponseBody1, "", true, true); err == nil {
		u.ArrayOfRemoveProjectEnvResponseBody1 = arrayOfRemoveProjectEnvResponseBody1
		u.Type = RemoveProjectEnvResponseBodyTypeArrayOfRemoveProjectEnvResponseBody1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RemoveProjectEnvResponseBody", string(data))
}

func (u RemoveProjectEnvResponseBody) MarshalJSON() ([]byte, error) {
	if u.ArrayOfRemoveProjectEnvResponseBody1 != nil {
		return utils.MarshalJSON(u.ArrayOfRemoveProjectEnvResponseBody1, "", true)
	}

	if u.RemoveProjectEnvResponseBody2 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvResponseBody2, "", true)
	}

	if u.RemoveProjectEnvResponseBody3 != nil {
		return utils.MarshalJSON(u.RemoveProjectEnvResponseBody3, "", true)
	}

	return nil, errors.New("could not marshal union type RemoveProjectEnvResponseBody: all fields are null")
}

type RemoveProjectEnvResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The environment variable was successfully removed
	OneOf *RemoveProjectEnvResponseBody
}

func (o *RemoveProjectEnvResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RemoveProjectEnvResponse) GetOneOf() *RemoveProjectEnvResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
