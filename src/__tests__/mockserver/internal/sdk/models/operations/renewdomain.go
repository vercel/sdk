// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type RenewDomainContactInformation struct {
	// a non empty string
	FirstName string `json:"firstName"`
	// a non empty string
	LastName string `json:"lastName"`
	// a non empty string
	Email string `json:"email"`
	// A valid E.164 phone number
	Phone string `json:"phone"`
	// a non empty string
	Address1 string `json:"address1"`
	// a non empty string
	Address2 *string `json:"address2,omitempty"`
	// a non empty string
	City string `json:"city"`
	// a non empty string
	State string `json:"state"`
	// a non empty string
	Zip string `json:"zip"`
	// A valid ISO 3166-1 alpha-2 country code
	Country string `json:"country"`
	// a non empty string
	CompanyName *string `json:"companyName,omitempty"`
	// A valid E.164 phone number
	Fax *string `json:"fax,omitempty"`
}

func (o *RenewDomainContactInformation) GetFirstName() string {
	if o == nil {
		return ""
	}
	return o.FirstName
}

func (o *RenewDomainContactInformation) GetLastName() string {
	if o == nil {
		return ""
	}
	return o.LastName
}

func (o *RenewDomainContactInformation) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *RenewDomainContactInformation) GetPhone() string {
	if o == nil {
		return ""
	}
	return o.Phone
}

func (o *RenewDomainContactInformation) GetAddress1() string {
	if o == nil {
		return ""
	}
	return o.Address1
}

func (o *RenewDomainContactInformation) GetAddress2() *string {
	if o == nil {
		return nil
	}
	return o.Address2
}

func (o *RenewDomainContactInformation) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *RenewDomainContactInformation) GetState() string {
	if o == nil {
		return ""
	}
	return o.State
}

func (o *RenewDomainContactInformation) GetZip() string {
	if o == nil {
		return ""
	}
	return o.Zip
}

func (o *RenewDomainContactInformation) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *RenewDomainContactInformation) GetCompanyName() *string {
	if o == nil {
		return nil
	}
	return o.CompanyName
}

func (o *RenewDomainContactInformation) GetFax() *string {
	if o == nil {
		return nil
	}
	return o.Fax
}

type RenewDomainRequestBody struct {
	// The number of years to renew the domain for.
	Years float64 `json:"years"`
	// The expected price for the domain. Use the [Get price data for a domain](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/get-price-data-for-a-domain) endpoint to retrieve the price data for a domain.
	ExpectedPrice      float64                        `json:"expectedPrice"`
	ContactInformation *RenewDomainContactInformation `json:"contactInformation,omitempty"`
}

func (o *RenewDomainRequestBody) GetYears() float64 {
	if o == nil {
		return 0.0
	}
	return o.Years
}

func (o *RenewDomainRequestBody) GetExpectedPrice() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpectedPrice
}

func (o *RenewDomainRequestBody) GetContactInformation() *RenewDomainContactInformation {
	if o == nil {
		return nil
	}
	return o.ContactInformation
}

type RenewDomainRequest struct {
	Domain      string                 `pathParam:"style=simple,explode=false,name=domain"`
	RequestBody RenewDomainRequestBody `request:"mediaType=application/json"`
}

func (o *RenewDomainRequest) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *RenewDomainRequest) GetRequestBody() RenewDomainRequestBody {
	if o == nil {
		return RenewDomainRequestBody{}
	}
	return o.RequestBody
}

type RenewDomainMethod string

const (
	RenewDomainMethodGet    RenewDomainMethod = "GET"
	RenewDomainMethodPost   RenewDomainMethod = "POST"
	RenewDomainMethodPut    RenewDomainMethod = "PUT"
	RenewDomainMethodDelete RenewDomainMethod = "DELETE"
	RenewDomainMethodPatch  RenewDomainMethod = "PATCH"
)

func (e RenewDomainMethod) ToPointer() *RenewDomainMethod {
	return &e
}
func (e *RenewDomainMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "GET":
		fallthrough
	case "POST":
		fallthrough
	case "PUT":
		fallthrough
	case "DELETE":
		fallthrough
	case "PATCH":
		*e = RenewDomainMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RenewDomainMethod: %v", v)
	}
}

type RenewDomainLinks struct {
	Href   string            `json:"href"`
	Method RenewDomainMethod `json:"method"`
}

func (o *RenewDomainLinks) GetHref() string {
	if o == nil {
		return ""
	}
	return o.Href
}

func (o *RenewDomainLinks) GetMethod() RenewDomainMethod {
	if o == nil {
		return RenewDomainMethod("")
	}
	return o.Method
}

// RenewDomainResponseBody - Success
type RenewDomainResponseBody struct {
	OrderID string                      `json:"orderId"`
	Links   map[string]RenewDomainLinks `json:"_links"`
}

func (o *RenewDomainResponseBody) GetOrderID() string {
	if o == nil {
		return ""
	}
	return o.OrderID
}

func (o *RenewDomainResponseBody) GetLinks() map[string]RenewDomainLinks {
	if o == nil {
		return map[string]RenewDomainLinks{}
	}
	return o.Links
}

type RenewDomainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Success
	Object *RenewDomainResponseBody
}

func (o *RenewDomainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RenewDomainResponse) GetObject() *RenewDomainResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
