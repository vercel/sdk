// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Origin - The origin of the request.
type Origin string

const (
	OriginImport            Origin = "import"
	OriginTeams             Origin = "teams"
	OriginGithub            Origin = "github"
	OriginGitlab            Origin = "gitlab"
	OriginBitbucket         Origin = "bitbucket"
	OriginFeedback          Origin = "feedback"
	OriginOrganizationTeams Origin = "organization-teams"
)

func (e Origin) ToPointer() *Origin {
	return &e
}
func (e *Origin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "import":
		fallthrough
	case "teams":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = Origin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Origin: %v", v)
	}
}

type GitUserIDType string

const (
	GitUserIDTypeStr    GitUserIDType = "str"
	GitUserIDTypeNumber GitUserIDType = "number"
)

// GitUserID - The ID of the Git account of the user who requests access.
type GitUserID struct {
	Str    *string
	Number *float64

	Type GitUserIDType
}

func CreateGitUserIDStr(str string) GitUserID {
	typ := GitUserIDTypeStr

	return GitUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateGitUserIDNumber(number float64) GitUserID {
	typ := GitUserIDTypeNumber

	return GitUserID{
		Number: &number,
		Type:   typ,
	}
}

func (u *GitUserID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GitUserIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GitUserIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GitUserID", string(data))
}

func (u GitUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GitUserID: all fields are null")
}

type JoinedFrom struct {
	// The origin of the request.
	Origin Origin `json:"origin"`
	// The commit sha if the origin is a git provider.
	CommitID *string `json:"commitId,omitempty"`
	// The ID of the repository for the given Git provider.
	RepoID *string `json:"repoId,omitempty"`
	// The path to the repository for the given Git provider.
	RepoPath *string `json:"repoPath,omitempty"`
	// The ID of the Git account of the user who requests access.
	GitUserID *GitUserID `json:"gitUserId,omitempty"`
	// The login name for the Git account of the user who requests access.
	GitUserLogin *string `json:"gitUserLogin,omitempty"`
}

func (o *JoinedFrom) GetOrigin() Origin {
	if o == nil {
		return Origin("")
	}
	return o.Origin
}

func (o *JoinedFrom) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *JoinedFrom) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *JoinedFrom) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *JoinedFrom) GetGitUserID() *GitUserID {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *JoinedFrom) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

type RequestAccessToTeamRequestBody struct {
	JoinedFrom JoinedFrom `json:"joinedFrom"`
}

func (o *RequestAccessToTeamRequestBody) GetJoinedFrom() JoinedFrom {
	if o == nil {
		return JoinedFrom{}
	}
	return o.JoinedFrom
}

type RequestAccessToTeamRequest struct {
	TeamID      string                         `pathParam:"style=simple,explode=false,name=teamId"`
	RequestBody RequestAccessToTeamRequestBody `request:"mediaType=application/json"`
}

func (o *RequestAccessToTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *RequestAccessToTeamRequest) GetRequestBody() RequestAccessToTeamRequestBody {
	if o == nil {
		return RequestAccessToTeamRequestBody{}
	}
	return o.RequestBody
}

type RequestAccessToTeamOrigin string

const (
	RequestAccessToTeamOriginImport            RequestAccessToTeamOrigin = "import"
	RequestAccessToTeamOriginTeams             RequestAccessToTeamOrigin = "teams"
	RequestAccessToTeamOriginGithub            RequestAccessToTeamOrigin = "github"
	RequestAccessToTeamOriginGitlab            RequestAccessToTeamOrigin = "gitlab"
	RequestAccessToTeamOriginBitbucket         RequestAccessToTeamOrigin = "bitbucket"
	RequestAccessToTeamOriginFeedback          RequestAccessToTeamOrigin = "feedback"
	RequestAccessToTeamOriginOrganizationTeams RequestAccessToTeamOrigin = "organization-teams"
	RequestAccessToTeamOriginMail              RequestAccessToTeamOrigin = "mail"
	RequestAccessToTeamOriginLink              RequestAccessToTeamOrigin = "link"
	RequestAccessToTeamOriginSaml              RequestAccessToTeamOrigin = "saml"
	RequestAccessToTeamOriginDsync             RequestAccessToTeamOrigin = "dsync"
)

func (e RequestAccessToTeamOrigin) ToPointer() *RequestAccessToTeamOrigin {
	return &e
}
func (e *RequestAccessToTeamOrigin) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "import":
		fallthrough
	case "teams":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		fallthrough
	case "mail":
		fallthrough
	case "link":
		fallthrough
	case "saml":
		fallthrough
	case "dsync":
		*e = RequestAccessToTeamOrigin(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestAccessToTeamOrigin: %v", v)
	}
}

type RequestAccessToTeamGitUserIDType string

const (
	RequestAccessToTeamGitUserIDTypeStr    RequestAccessToTeamGitUserIDType = "str"
	RequestAccessToTeamGitUserIDTypeNumber RequestAccessToTeamGitUserIDType = "number"
)

type RequestAccessToTeamGitUserID struct {
	Str    *string
	Number *float64

	Type RequestAccessToTeamGitUserIDType
}

func CreateRequestAccessToTeamGitUserIDStr(str string) RequestAccessToTeamGitUserID {
	typ := RequestAccessToTeamGitUserIDTypeStr

	return RequestAccessToTeamGitUserID{
		Str:  &str,
		Type: typ,
	}
}

func CreateRequestAccessToTeamGitUserIDNumber(number float64) RequestAccessToTeamGitUserID {
	typ := RequestAccessToTeamGitUserIDTypeNumber

	return RequestAccessToTeamGitUserID{
		Number: &number,
		Type:   typ,
	}
}

func (u *RequestAccessToTeamGitUserID) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RequestAccessToTeamGitUserIDTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = RequestAccessToTeamGitUserIDTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequestAccessToTeamGitUserID", string(data))
}

func (u RequestAccessToTeamGitUserID) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type RequestAccessToTeamGitUserID: all fields are null")
}

type RequestAccessToTeamJoinedFrom struct {
	Origin           RequestAccessToTeamOrigin     `json:"origin"`
	CommitID         *string                       `json:"commitId,omitempty"`
	RepoID           *string                       `json:"repoId,omitempty"`
	RepoPath         *string                       `json:"repoPath,omitempty"`
	GitUserID        *RequestAccessToTeamGitUserID `json:"gitUserId,omitempty"`
	GitUserLogin     *string                       `json:"gitUserLogin,omitempty"`
	SsoUserID        *string                       `json:"ssoUserId,omitempty"`
	SsoConnectedAt   *float64                      `json:"ssoConnectedAt,omitempty"`
	IdpUserID        *string                       `json:"idpUserId,omitempty"`
	DsyncUserID      *string                       `json:"dsyncUserId,omitempty"`
	DsyncConnectedAt *float64                      `json:"dsyncConnectedAt,omitempty"`
}

func (o *RequestAccessToTeamJoinedFrom) GetOrigin() RequestAccessToTeamOrigin {
	if o == nil {
		return RequestAccessToTeamOrigin("")
	}
	return o.Origin
}

func (o *RequestAccessToTeamJoinedFrom) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *RequestAccessToTeamJoinedFrom) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *RequestAccessToTeamJoinedFrom) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *RequestAccessToTeamJoinedFrom) GetGitUserID() *RequestAccessToTeamGitUserID {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *RequestAccessToTeamJoinedFrom) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

func (o *RequestAccessToTeamJoinedFrom) GetSsoUserID() *string {
	if o == nil {
		return nil
	}
	return o.SsoUserID
}

func (o *RequestAccessToTeamJoinedFrom) GetSsoConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SsoConnectedAt
}

func (o *RequestAccessToTeamJoinedFrom) GetIdpUserID() *string {
	if o == nil {
		return nil
	}
	return o.IdpUserID
}

func (o *RequestAccessToTeamJoinedFrom) GetDsyncUserID() *string {
	if o == nil {
		return nil
	}
	return o.DsyncUserID
}

func (o *RequestAccessToTeamJoinedFrom) GetDsyncConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DsyncConnectedAt
}

type Github struct {
	Login *string `json:"login,omitempty"`
}

func (o *Github) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

type Gitlab struct {
	Login *string `json:"login,omitempty"`
}

func (o *Gitlab) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

type Bitbucket struct {
	Login *string `json:"login,omitempty"`
}

func (o *Bitbucket) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// RequestAccessToTeamResponseBody - Successfuly requested access to the team.
type RequestAccessToTeamResponseBody struct {
	TeamSlug          string                         `json:"teamSlug"`
	TeamName          string                         `json:"teamName"`
	Confirmed         *bool                          `json:"confirmed,omitempty"`
	JoinedFrom        *RequestAccessToTeamJoinedFrom `json:"joinedFrom,omitempty"`
	AccessRequestedAt *float64                       `json:"accessRequestedAt,omitempty"`
	Github            *Github                        `json:"github"`
	Gitlab            *Gitlab                        `json:"gitlab"`
	Bitbucket         *Bitbucket                     `json:"bitbucket"`
}

func (o *RequestAccessToTeamResponseBody) GetTeamSlug() string {
	if o == nil {
		return ""
	}
	return o.TeamSlug
}

func (o *RequestAccessToTeamResponseBody) GetTeamName() string {
	if o == nil {
		return ""
	}
	return o.TeamName
}

func (o *RequestAccessToTeamResponseBody) GetConfirmed() *bool {
	if o == nil {
		return nil
	}
	return o.Confirmed
}

func (o *RequestAccessToTeamResponseBody) GetJoinedFrom() *RequestAccessToTeamJoinedFrom {
	if o == nil {
		return nil
	}
	return o.JoinedFrom
}

func (o *RequestAccessToTeamResponseBody) GetAccessRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessRequestedAt
}

func (o *RequestAccessToTeamResponseBody) GetGithub() *Github {
	if o == nil {
		return nil
	}
	return o.Github
}

func (o *RequestAccessToTeamResponseBody) GetGitlab() *Gitlab {
	if o == nil {
		return nil
	}
	return o.Gitlab
}

func (o *RequestAccessToTeamResponseBody) GetBitbucket() *Bitbucket {
	if o == nil {
		return nil
	}
	return o.Bitbucket
}

type RequestAccessToTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfuly requested access to the team.
	Object *RequestAccessToTeamResponseBody
}

func (o *RequestAccessToTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RequestAccessToTeamResponse) GetObject() *RequestAccessToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
