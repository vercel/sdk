// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// OriginRequest - The origin of the request.
type OriginRequest string

const (
	OriginRequestImport            OriginRequest = "import"
	OriginRequestTeams             OriginRequest = "teams"
	OriginRequestGithub            OriginRequest = "github"
	OriginRequestGitlab            OriginRequest = "gitlab"
	OriginRequestBitbucket         OriginRequest = "bitbucket"
	OriginRequestFeedback          OriginRequest = "feedback"
	OriginRequestOrganizationTeams OriginRequest = "organization-teams"
)

func (e OriginRequest) ToPointer() *OriginRequest {
	return &e
}
func (e *OriginRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "import":
		fallthrough
	case "teams":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		*e = OriginRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for OriginRequest: %v", v)
	}
}

type GitUserIDRequestType string

const (
	GitUserIDRequestTypeStr    GitUserIDRequestType = "str"
	GitUserIDRequestTypeNumber GitUserIDRequestType = "number"
)

// GitUserIDRequest - The ID of the Git account of the user who requests access.
type GitUserIDRequest struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type GitUserIDRequestType
}

func CreateGitUserIDRequestStr(str string) GitUserIDRequest {
	typ := GitUserIDRequestTypeStr

	return GitUserIDRequest{
		Str:  &str,
		Type: typ,
	}
}

func CreateGitUserIDRequestNumber(number float64) GitUserIDRequest {
	typ := GitUserIDRequestTypeNumber

	return GitUserIDRequest{
		Number: &number,
		Type:   typ,
	}
}

func (u *GitUserIDRequest) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = GitUserIDRequestTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = GitUserIDRequestTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GitUserIDRequest", string(data))
}

func (u GitUserIDRequest) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type GitUserIDRequest: all fields are null")
}

type RequestAccessToTeamJoinedFromRequest struct {
	// The origin of the request.
	Origin OriginRequest `json:"origin"`
	// The commit sha if the origin is a git provider.
	CommitID *string `json:"commitId,omitempty"`
	// The ID of the repository for the given Git provider.
	RepoID *string `json:"repoId,omitempty"`
	// The path to the repository for the given Git provider.
	RepoPath *string `json:"repoPath,omitempty"`
	// The ID of the Git account of the user who requests access.
	GitUserID *GitUserIDRequest `json:"gitUserId,omitempty"`
	// The login name for the Git account of the user who requests access.
	GitUserLogin *string `json:"gitUserLogin,omitempty"`
}

func (o *RequestAccessToTeamJoinedFromRequest) GetOrigin() OriginRequest {
	if o == nil {
		return OriginRequest("")
	}
	return o.Origin
}

func (o *RequestAccessToTeamJoinedFromRequest) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *RequestAccessToTeamJoinedFromRequest) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *RequestAccessToTeamJoinedFromRequest) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *RequestAccessToTeamJoinedFromRequest) GetGitUserID() *GitUserIDRequest {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *RequestAccessToTeamJoinedFromRequest) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

type RequestAccessToTeamRequestBody struct {
	JoinedFrom RequestAccessToTeamJoinedFromRequest `json:"joinedFrom"`
}

func (o *RequestAccessToTeamRequestBody) GetJoinedFrom() RequestAccessToTeamJoinedFromRequest {
	if o == nil {
		return RequestAccessToTeamJoinedFromRequest{}
	}
	return o.JoinedFrom
}

type RequestAccessToTeamRequest struct {
	TeamID      string                         `pathParam:"style=simple,explode=false,name=teamId"`
	RequestBody RequestAccessToTeamRequestBody `request:"mediaType=application/json"`
}

func (o *RequestAccessToTeamRequest) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *RequestAccessToTeamRequest) GetRequestBody() RequestAccessToTeamRequestBody {
	if o == nil {
		return RequestAccessToTeamRequestBody{}
	}
	return o.RequestBody
}

type RequestAccessToTeamOriginResponse string

const (
	RequestAccessToTeamOriginResponseImport            RequestAccessToTeamOriginResponse = "import"
	RequestAccessToTeamOriginResponseTeams             RequestAccessToTeamOriginResponse = "teams"
	RequestAccessToTeamOriginResponseGithub            RequestAccessToTeamOriginResponse = "github"
	RequestAccessToTeamOriginResponseGitlab            RequestAccessToTeamOriginResponse = "gitlab"
	RequestAccessToTeamOriginResponseBitbucket         RequestAccessToTeamOriginResponse = "bitbucket"
	RequestAccessToTeamOriginResponseFeedback          RequestAccessToTeamOriginResponse = "feedback"
	RequestAccessToTeamOriginResponseOrganizationTeams RequestAccessToTeamOriginResponse = "organization-teams"
	RequestAccessToTeamOriginResponseMail              RequestAccessToTeamOriginResponse = "mail"
	RequestAccessToTeamOriginResponseLink              RequestAccessToTeamOriginResponse = "link"
	RequestAccessToTeamOriginResponseSaml              RequestAccessToTeamOriginResponse = "saml"
	RequestAccessToTeamOriginResponseDsync             RequestAccessToTeamOriginResponse = "dsync"
)

func (e RequestAccessToTeamOriginResponse) ToPointer() *RequestAccessToTeamOriginResponse {
	return &e
}
func (e *RequestAccessToTeamOriginResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "import":
		fallthrough
	case "teams":
		fallthrough
	case "github":
		fallthrough
	case "gitlab":
		fallthrough
	case "bitbucket":
		fallthrough
	case "feedback":
		fallthrough
	case "organization-teams":
		fallthrough
	case "mail":
		fallthrough
	case "link":
		fallthrough
	case "saml":
		fallthrough
	case "dsync":
		*e = RequestAccessToTeamOriginResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RequestAccessToTeamOriginResponse: %v", v)
	}
}

type RequestAccessToTeamGitUserIDResponseType string

const (
	RequestAccessToTeamGitUserIDResponseTypeStr    RequestAccessToTeamGitUserIDResponseType = "str"
	RequestAccessToTeamGitUserIDResponseTypeNumber RequestAccessToTeamGitUserIDResponseType = "number"
)

type RequestAccessToTeamGitUserIDResponse struct {
	Str    *string  `queryParam:"inline"`
	Number *float64 `queryParam:"inline"`

	Type RequestAccessToTeamGitUserIDResponseType
}

func CreateRequestAccessToTeamGitUserIDResponseStr(str string) RequestAccessToTeamGitUserIDResponse {
	typ := RequestAccessToTeamGitUserIDResponseTypeStr

	return RequestAccessToTeamGitUserIDResponse{
		Str:  &str,
		Type: typ,
	}
}

func CreateRequestAccessToTeamGitUserIDResponseNumber(number float64) RequestAccessToTeamGitUserIDResponse {
	typ := RequestAccessToTeamGitUserIDResponseTypeNumber

	return RequestAccessToTeamGitUserIDResponse{
		Number: &number,
		Type:   typ,
	}
}

func (u *RequestAccessToTeamGitUserIDResponse) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = RequestAccessToTeamGitUserIDResponseTypeStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = RequestAccessToTeamGitUserIDResponseTypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for RequestAccessToTeamGitUserIDResponse", string(data))
}

func (u RequestAccessToTeamGitUserIDResponse) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type RequestAccessToTeamGitUserIDResponse: all fields are null")
}

type RequestAccessToTeamJoinedFromResponse struct {
	Origin           RequestAccessToTeamOriginResponse     `json:"origin"`
	CommitID         *string                               `json:"commitId,omitempty"`
	RepoID           *string                               `json:"repoId,omitempty"`
	RepoPath         *string                               `json:"repoPath,omitempty"`
	GitUserID        *RequestAccessToTeamGitUserIDResponse `json:"gitUserId,omitempty"`
	GitUserLogin     *string                               `json:"gitUserLogin,omitempty"`
	SsoUserID        *string                               `json:"ssoUserId,omitempty"`
	SsoConnectedAt   *float64                              `json:"ssoConnectedAt,omitempty"`
	IdpUserID        *string                               `json:"idpUserId,omitempty"`
	DsyncUserID      *string                               `json:"dsyncUserId,omitempty"`
	DsyncConnectedAt *float64                              `json:"dsyncConnectedAt,omitempty"`
}

func (o *RequestAccessToTeamJoinedFromResponse) GetOrigin() RequestAccessToTeamOriginResponse {
	if o == nil {
		return RequestAccessToTeamOriginResponse("")
	}
	return o.Origin
}

func (o *RequestAccessToTeamJoinedFromResponse) GetCommitID() *string {
	if o == nil {
		return nil
	}
	return o.CommitID
}

func (o *RequestAccessToTeamJoinedFromResponse) GetRepoID() *string {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *RequestAccessToTeamJoinedFromResponse) GetRepoPath() *string {
	if o == nil {
		return nil
	}
	return o.RepoPath
}

func (o *RequestAccessToTeamJoinedFromResponse) GetGitUserID() *RequestAccessToTeamGitUserIDResponse {
	if o == nil {
		return nil
	}
	return o.GitUserID
}

func (o *RequestAccessToTeamJoinedFromResponse) GetGitUserLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitUserLogin
}

func (o *RequestAccessToTeamJoinedFromResponse) GetSsoUserID() *string {
	if o == nil {
		return nil
	}
	return o.SsoUserID
}

func (o *RequestAccessToTeamJoinedFromResponse) GetSsoConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SsoConnectedAt
}

func (o *RequestAccessToTeamJoinedFromResponse) GetIdpUserID() *string {
	if o == nil {
		return nil
	}
	return o.IdpUserID
}

func (o *RequestAccessToTeamJoinedFromResponse) GetDsyncUserID() *string {
	if o == nil {
		return nil
	}
	return o.DsyncUserID
}

func (o *RequestAccessToTeamJoinedFromResponse) GetDsyncConnectedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DsyncConnectedAt
}

type RequestAccessToTeamGithub struct {
	Login *string `json:"login,omitempty"`
}

func (o *RequestAccessToTeamGithub) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

type RequestAccessToTeamGitlab struct {
	Login *string `json:"login,omitempty"`
}

func (o *RequestAccessToTeamGitlab) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

type RequestAccessToTeamBitbucket struct {
	Login *string `json:"login,omitempty"`
}

func (o *RequestAccessToTeamBitbucket) GetLogin() *string {
	if o == nil {
		return nil
	}
	return o.Login
}

// RequestAccessToTeamResponseBody - Successfuly requested access to the team.
type RequestAccessToTeamResponseBody struct {
	TeamSlug          string                                 `json:"teamSlug"`
	TeamName          string                                 `json:"teamName"`
	Confirmed         *bool                                  `json:"confirmed,omitempty"`
	JoinedFrom        *RequestAccessToTeamJoinedFromResponse `json:"joinedFrom,omitempty"`
	AccessRequestedAt *float64                               `json:"accessRequestedAt,omitempty"`
	Github            *RequestAccessToTeamGithub             `json:"github"`
	Gitlab            *RequestAccessToTeamGitlab             `json:"gitlab"`
	Bitbucket         *RequestAccessToTeamBitbucket          `json:"bitbucket"`
}

func (o *RequestAccessToTeamResponseBody) GetTeamSlug() string {
	if o == nil {
		return ""
	}
	return o.TeamSlug
}

func (o *RequestAccessToTeamResponseBody) GetTeamName() string {
	if o == nil {
		return ""
	}
	return o.TeamName
}

func (o *RequestAccessToTeamResponseBody) GetConfirmed() *bool {
	if o == nil {
		return nil
	}
	return o.Confirmed
}

func (o *RequestAccessToTeamResponseBody) GetJoinedFrom() *RequestAccessToTeamJoinedFromResponse {
	if o == nil {
		return nil
	}
	return o.JoinedFrom
}

func (o *RequestAccessToTeamResponseBody) GetAccessRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AccessRequestedAt
}

func (o *RequestAccessToTeamResponseBody) GetGithub() *RequestAccessToTeamGithub {
	if o == nil {
		return nil
	}
	return o.Github
}

func (o *RequestAccessToTeamResponseBody) GetGitlab() *RequestAccessToTeamGitlab {
	if o == nil {
		return nil
	}
	return o.Gitlab
}

func (o *RequestAccessToTeamResponseBody) GetBitbucket() *RequestAccessToTeamBitbucket {
	if o == nil {
		return nil
	}
	return o.Bitbucket
}

type RequestAccessToTeamResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Successfuly requested access to the team.
	Object *RequestAccessToTeamResponseBody
}

func (o *RequestAccessToTeamResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *RequestAccessToTeamResponse) GetObject() *RequestAccessToTeamResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
