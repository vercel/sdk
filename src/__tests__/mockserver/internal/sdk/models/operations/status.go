// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

type StatusRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *StatusRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *StatusRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

type ArtifactsStatus string

const (
	ArtifactsStatusDisabled  ArtifactsStatus = "disabled"
	ArtifactsStatusEnabled   ArtifactsStatus = "enabled"
	ArtifactsStatusOverLimit ArtifactsStatus = "over_limit"
	ArtifactsStatusPaused    ArtifactsStatus = "paused"
)

func (e ArtifactsStatus) ToPointer() *ArtifactsStatus {
	return &e
}
func (e *ArtifactsStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "enabled":
		fallthrough
	case "over_limit":
		fallthrough
	case "paused":
		*e = ArtifactsStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ArtifactsStatus: %v", v)
	}
}

type StatusResponseBody struct {
	Status ArtifactsStatus `json:"status"`
}

func (o *StatusResponseBody) GetStatus() ArtifactsStatus {
	if o == nil {
		return ArtifactsStatus("")
	}
	return o.Status
}

type StatusResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *StatusResponseBody
}

func (o *StatusResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *StatusResponse) GetObject() *StatusResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
