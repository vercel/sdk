// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

// SubmitInvoicePeriod - Subscription period for this billing cycle.
type SubmitInvoicePeriod struct {
	Start time.Time `json:"start"`
	End   time.Time `json:"end"`
}

func (s SubmitInvoicePeriod) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubmitInvoicePeriod) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubmitInvoicePeriod) GetStart() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.Start
}

func (o *SubmitInvoicePeriod) GetEnd() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.End
}

type SubmitInvoiceItem struct {
	// Partner's resource ID.
	ResourceID *string `json:"resourceId,omitempty"`
	// Partner's billing plan ID.
	BillingPlanID string `json:"billingPlanId"`
	// Start and end are only needed if different from the period's start/end.
	Start *time.Time `json:"start,omitempty"`
	// Start and end are only needed if different from the period's start/end.
	End     *time.Time `json:"end,omitempty"`
	Name    string     `json:"name"`
	Details *string    `json:"details,omitempty"`
	// Currency amount as a decimal string.
	Price    string  `json:"price"`
	Quantity float64 `json:"quantity"`
	Units    string  `json:"units"`
	// Currency amount as a decimal string.
	Total string `json:"total"`
}

func (s SubmitInvoiceItem) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubmitInvoiceItem) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubmitInvoiceItem) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *SubmitInvoiceItem) GetBillingPlanID() string {
	if o == nil {
		return ""
	}
	return o.BillingPlanID
}

func (o *SubmitInvoiceItem) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *SubmitInvoiceItem) GetEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *SubmitInvoiceItem) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SubmitInvoiceItem) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *SubmitInvoiceItem) GetPrice() string {
	if o == nil {
		return ""
	}
	return o.Price
}

func (o *SubmitInvoiceItem) GetQuantity() float64 {
	if o == nil {
		return 0.0
	}
	return o.Quantity
}

func (o *SubmitInvoiceItem) GetUnits() string {
	if o == nil {
		return ""
	}
	return o.Units
}

func (o *SubmitInvoiceItem) GetTotal() string {
	if o == nil {
		return ""
	}
	return o.Total
}

type SubmitInvoiceDiscount struct {
	// Partner's resource ID.
	ResourceID *string `json:"resourceId,omitempty"`
	// Partner's billing plan ID.
	BillingPlanID string `json:"billingPlanId"`
	// Start and end are only needed if different from the period's start/end.
	Start *time.Time `json:"start,omitempty"`
	// Start and end are only needed if different from the period's start/end.
	End     *time.Time `json:"end,omitempty"`
	Name    string     `json:"name"`
	Details *string    `json:"details,omitempty"`
	// Currency amount as a decimal string.
	Amount string `json:"amount"`
}

func (s SubmitInvoiceDiscount) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubmitInvoiceDiscount) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubmitInvoiceDiscount) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *SubmitInvoiceDiscount) GetBillingPlanID() string {
	if o == nil {
		return ""
	}
	return o.BillingPlanID
}

func (o *SubmitInvoiceDiscount) GetStart() *time.Time {
	if o == nil {
		return nil
	}
	return o.Start
}

func (o *SubmitInvoiceDiscount) GetEnd() *time.Time {
	if o == nil {
		return nil
	}
	return o.End
}

func (o *SubmitInvoiceDiscount) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *SubmitInvoiceDiscount) GetDetails() *string {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *SubmitInvoiceDiscount) GetAmount() string {
	if o == nil {
		return ""
	}
	return o.Amount
}

type SubmitInvoiceResult string

const (
	SubmitInvoiceResultPaid    SubmitInvoiceResult = "paid"
	SubmitInvoiceResultNotpaid SubmitInvoiceResult = "notpaid"
)

func (e SubmitInvoiceResult) ToPointer() *SubmitInvoiceResult {
	return &e
}
func (e *SubmitInvoiceResult) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "paid":
		fallthrough
	case "notpaid":
		*e = SubmitInvoiceResult(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SubmitInvoiceResult: %v", v)
	}
}

// Test mode
type Test struct {
	Validate *bool                `json:"validate,omitempty"`
	Result   *SubmitInvoiceResult `json:"result,omitempty"`
}

func (o *Test) GetValidate() *bool {
	if o == nil {
		return nil
	}
	return o.Validate
}

func (o *Test) GetResult() *SubmitInvoiceResult {
	if o == nil {
		return nil
	}
	return o.Result
}

type SubmitInvoiceRequestBody struct {
	ExternalID *string `json:"externalId,omitempty"`
	// Invoice date. Must be within the period's start and end.
	InvoiceDate time.Time `json:"invoiceDate"`
	// Additional memo for the invoice.
	Memo *string `json:"memo,omitempty"`
	// Subscription period for this billing cycle.
	Period    SubmitInvoicePeriod     `json:"period"`
	Items     []SubmitInvoiceItem     `json:"items"`
	Discounts []SubmitInvoiceDiscount `json:"discounts,omitempty"`
	// Test mode
	Test *Test `json:"test,omitempty"`
}

func (s SubmitInvoiceRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SubmitInvoiceRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SubmitInvoiceRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *SubmitInvoiceRequestBody) GetInvoiceDate() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.InvoiceDate
}

func (o *SubmitInvoiceRequestBody) GetMemo() *string {
	if o == nil {
		return nil
	}
	return o.Memo
}

func (o *SubmitInvoiceRequestBody) GetPeriod() SubmitInvoicePeriod {
	if o == nil {
		return SubmitInvoicePeriod{}
	}
	return o.Period
}

func (o *SubmitInvoiceRequestBody) GetItems() []SubmitInvoiceItem {
	if o == nil {
		return []SubmitInvoiceItem{}
	}
	return o.Items
}

func (o *SubmitInvoiceRequestBody) GetDiscounts() []SubmitInvoiceDiscount {
	if o == nil {
		return nil
	}
	return o.Discounts
}

func (o *SubmitInvoiceRequestBody) GetTest() *Test {
	if o == nil {
		return nil
	}
	return o.Test
}

type SubmitInvoiceRequest struct {
	IntegrationConfigurationID string                   `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	RequestBody                SubmitInvoiceRequestBody `request:"mediaType=application/json"`
}

func (o *SubmitInvoiceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *SubmitInvoiceRequest) GetRequestBody() SubmitInvoiceRequestBody {
	if o == nil {
		return SubmitInvoiceRequestBody{}
	}
	return o.RequestBody
}

type SubmitInvoiceResponseBody struct {
	InvoiceID        *string  `json:"invoiceId,omitempty"`
	Test             *bool    `json:"test,omitempty"`
	ValidationErrors []string `json:"validationErrors,omitempty"`
}

func (o *SubmitInvoiceResponseBody) GetInvoiceID() *string {
	if o == nil {
		return nil
	}
	return o.InvoiceID
}

func (o *SubmitInvoiceResponseBody) GetTest() *bool {
	if o == nil {
		return nil
	}
	return o.Test
}

func (o *SubmitInvoiceResponseBody) GetValidationErrors() []string {
	if o == nil {
		return nil
	}
	return o.ValidationErrors
}

type SubmitInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *SubmitInvoiceResponseBody
}

func (o *SubmitInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *SubmitInvoiceResponse) GetObject() *SubmitInvoiceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
