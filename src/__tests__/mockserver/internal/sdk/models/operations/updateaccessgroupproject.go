// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// UpdateAccessGroupProjectRoleRequest - The project role that will be added to this Access Group.
type UpdateAccessGroupProjectRoleRequest string

const (
	UpdateAccessGroupProjectRoleRequestAdmin            UpdateAccessGroupProjectRoleRequest = "ADMIN"
	UpdateAccessGroupProjectRoleRequestProjectViewer    UpdateAccessGroupProjectRoleRequest = "PROJECT_VIEWER"
	UpdateAccessGroupProjectRoleRequestProjectDeveloper UpdateAccessGroupProjectRoleRequest = "PROJECT_DEVELOPER"
)

func (e UpdateAccessGroupProjectRoleRequest) ToPointer() *UpdateAccessGroupProjectRoleRequest {
	return &e
}
func (e *UpdateAccessGroupProjectRoleRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_VIEWER":
		fallthrough
	case "PROJECT_DEVELOPER":
		*e = UpdateAccessGroupProjectRoleRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAccessGroupProjectRoleRequest: %v", v)
	}
}

type UpdateAccessGroupProjectRequestBody struct {
	// The project role that will be added to this Access Group.
	Role UpdateAccessGroupProjectRoleRequest `json:"role"`
}

func (o *UpdateAccessGroupProjectRequestBody) GetRole() UpdateAccessGroupProjectRoleRequest {
	if o == nil {
		return UpdateAccessGroupProjectRoleRequest("")
	}
	return o.Role
}

type UpdateAccessGroupProjectRequest struct {
	AccessGroupIDOrName string `pathParam:"style=simple,explode=false,name=accessGroupIdOrName"`
	ProjectID           string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateAccessGroupProjectRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateAccessGroupProjectRequest) GetAccessGroupIDOrName() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupIDOrName
}

func (o *UpdateAccessGroupProjectRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateAccessGroupProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateAccessGroupProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateAccessGroupProjectRequest) GetRequestBody() UpdateAccessGroupProjectRequestBody {
	if o == nil {
		return UpdateAccessGroupProjectRequestBody{}
	}
	return o.RequestBody
}

type UpdateAccessGroupProjectRoleResponse string

const (
	UpdateAccessGroupProjectRoleResponseAdmin            UpdateAccessGroupProjectRoleResponse = "ADMIN"
	UpdateAccessGroupProjectRoleResponseProjectDeveloper UpdateAccessGroupProjectRoleResponse = "PROJECT_DEVELOPER"
	UpdateAccessGroupProjectRoleResponseProjectViewer    UpdateAccessGroupProjectRoleResponse = "PROJECT_VIEWER"
)

func (e UpdateAccessGroupProjectRoleResponse) ToPointer() *UpdateAccessGroupProjectRoleResponse {
	return &e
}
func (e *UpdateAccessGroupProjectRoleResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ADMIN":
		fallthrough
	case "PROJECT_DEVELOPER":
		fallthrough
	case "PROJECT_VIEWER":
		*e = UpdateAccessGroupProjectRoleResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateAccessGroupProjectRoleResponse: %v", v)
	}
}

type UpdateAccessGroupProjectResponseBody struct {
	TeamID        string                               `json:"teamId"`
	AccessGroupID string                               `json:"accessGroupId"`
	ProjectID     string                               `json:"projectId"`
	Role          UpdateAccessGroupProjectRoleResponse `json:"role"`
	CreatedAt     string                               `json:"createdAt"`
	UpdatedAt     string                               `json:"updatedAt"`
}

func (o *UpdateAccessGroupProjectResponseBody) GetTeamID() string {
	if o == nil {
		return ""
	}
	return o.TeamID
}

func (o *UpdateAccessGroupProjectResponseBody) GetAccessGroupID() string {
	if o == nil {
		return ""
	}
	return o.AccessGroupID
}

func (o *UpdateAccessGroupProjectResponseBody) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateAccessGroupProjectResponseBody) GetRole() UpdateAccessGroupProjectRoleResponse {
	if o == nil {
		return UpdateAccessGroupProjectRoleResponse("")
	}
	return o.Role
}

func (o *UpdateAccessGroupProjectResponseBody) GetCreatedAt() string {
	if o == nil {
		return ""
	}
	return o.CreatedAt
}

func (o *UpdateAccessGroupProjectResponseBody) GetUpdatedAt() string {
	if o == nil {
		return ""
	}
	return o.UpdatedAt
}

type UpdateAccessGroupProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateAccessGroupProjectResponseBody
}

func (o *UpdateAccessGroupProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateAccessGroupProjectResponse) GetObject() *UpdateAccessGroupProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
