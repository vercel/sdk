// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// UpdateCheckStatusRequest - The current status of the check
type UpdateCheckStatusRequest string

const (
	UpdateCheckStatusRequestRunning   UpdateCheckStatusRequest = "running"
	UpdateCheckStatusRequestCompleted UpdateCheckStatusRequest = "completed"
)

func (e UpdateCheckStatusRequest) ToPointer() *UpdateCheckStatusRequest {
	return &e
}
func (e *UpdateCheckStatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "running":
		fallthrough
	case "completed":
		*e = UpdateCheckStatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckStatusRequest: %v", v)
	}
}

// ConclusionRequest - The result of the check being run
type ConclusionRequest string

const (
	ConclusionRequestCanceled  ConclusionRequest = "canceled"
	ConclusionRequestFailed    ConclusionRequest = "failed"
	ConclusionRequestNeutral   ConclusionRequest = "neutral"
	ConclusionRequestSucceeded ConclusionRequest = "succeeded"
	ConclusionRequestSkipped   ConclusionRequest = "skipped"
)

func (e ConclusionRequest) ToPointer() *ConclusionRequest {
	return &e
}
func (e *ConclusionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		*e = ConclusionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ConclusionRequest: %v", v)
	}
}

type FCPRequest struct {
	// First Contentful Paint value
	Value *float64 `json:"value"`
	// Previous First Contentful Paint value to display a delta
	PreviousValue *float64                 `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceRequest `json:"source"`
}

func (o *FCPRequest) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *FCPRequest) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *FCPRequest) GetSource() UpdateCheckSourceRequest {
	if o == nil {
		return UpdateCheckSourceRequest("")
	}
	return o.Source
}

type LCPRequest struct {
	// Largest Contentful Paint value
	Value *float64 `json:"value"`
	// Previous Largest Contentful Paint value to display a delta
	PreviousValue *float64                 `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceRequest `json:"source"`
}

func (o *LCPRequest) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *LCPRequest) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *LCPRequest) GetSource() UpdateCheckSourceRequest {
	if o == nil {
		return UpdateCheckSourceRequest("")
	}
	return o.Source
}

type UpdateCheckSourceRequest string

const (
	UpdateCheckSourceRequestWebVitals UpdateCheckSourceRequest = "web-vitals"
)

func (e UpdateCheckSourceRequest) ToPointer() *UpdateCheckSourceRequest {
	return &e
}
func (e *UpdateCheckSourceRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckSourceRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckSourceRequest: %v", v)
	}
}

type CLSRequest struct {
	// Cumulative Layout Shift value
	Value *float64 `json:"value"`
	// Previous Cumulative Layout Shift value to display a delta
	PreviousValue *float64                 `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceRequest `json:"source"`
}

func (o *CLSRequest) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *CLSRequest) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *CLSRequest) GetSource() UpdateCheckSourceRequest {
	if o == nil {
		return UpdateCheckSourceRequest("")
	}
	return o.Source
}

type TBTSource string

const (
	TBTSourceWebVitals TBTSource = "web-vitals"
)

func (e TBTSource) ToPointer() *TBTSource {
	return &e
}
func (e *TBTSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = TBTSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TBTSource: %v", v)
	}
}

type TBTRequest struct {
	// Total Blocking Time value
	Value *float64 `json:"value"`
	// Previous Total Blocking Time value to display a delta
	PreviousValue *float64  `json:"previousValue,omitempty"`
	Source        TBTSource `json:"source"`
}

func (o *TBTRequest) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *TBTRequest) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *TBTRequest) GetSource() TBTSource {
	if o == nil {
		return TBTSource("")
	}
	return o.Source
}

type VirtualExperienceScoreSource string

const (
	VirtualExperienceScoreSourceWebVitals VirtualExperienceScoreSource = "web-vitals"
)

func (e VirtualExperienceScoreSource) ToPointer() *VirtualExperienceScoreSource {
	return &e
}
func (e *VirtualExperienceScoreSource) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = VirtualExperienceScoreSource(v)
		return nil
	default:
		return fmt.Errorf("invalid value for VirtualExperienceScoreSource: %v", v)
	}
}

type VirtualExperienceScoreRequest struct {
	// The calculated Virtual Experience Score value, between 0 and 100
	Value *int64 `json:"value"`
	// A previous Virtual Experience Score value to display a delta, between 0 and 100
	PreviousValue *int64                       `json:"previousValue,omitempty"`
	Source        VirtualExperienceScoreSource `json:"source"`
}

func (o *VirtualExperienceScoreRequest) GetValue() *int64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *VirtualExperienceScoreRequest) GetPreviousValue() *int64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *VirtualExperienceScoreRequest) GetSource() VirtualExperienceScoreSource {
	if o == nil {
		return VirtualExperienceScoreSource("")
	}
	return o.Source
}

// MetricsRequest - Metrics about the page
type MetricsRequest struct {
	Fcp                    FCPRequest                     `json:"FCP"`
	Lcp                    LCPRequest                     `json:"LCP"`
	Cls                    CLSRequest                     `json:"CLS"`
	Tbt                    TBTRequest                     `json:"TBT"`
	VirtualExperienceScore *VirtualExperienceScoreRequest `json:"virtualExperienceScore,omitempty"`
}

func (o *MetricsRequest) GetFcp() FCPRequest {
	if o == nil {
		return FCPRequest{}
	}
	return o.Fcp
}

func (o *MetricsRequest) GetLcp() LCPRequest {
	if o == nil {
		return LCPRequest{}
	}
	return o.Lcp
}

func (o *MetricsRequest) GetCls() CLSRequest {
	if o == nil {
		return CLSRequest{}
	}
	return o.Cls
}

func (o *MetricsRequest) GetTbt() TBTRequest {
	if o == nil {
		return TBTRequest{}
	}
	return o.Tbt
}

func (o *MetricsRequest) GetVirtualExperienceScore() *VirtualExperienceScoreRequest {
	if o == nil {
		return nil
	}
	return o.VirtualExperienceScore
}

// OutputRequest - The results of the check Run
type OutputRequest struct {
	// Metrics about the page
	Metrics *MetricsRequest `json:"metrics,omitempty"`
}

func (o *OutputRequest) GetMetrics() *MetricsRequest {
	if o == nil {
		return nil
	}
	return o.Metrics
}

type UpdateCheckRequestBody struct {
	// The name of the check being created
	Name *string `json:"name,omitempty"`
	// Path of the page that is being checked
	Path *string `json:"path,omitempty"`
	// The current status of the check
	Status *UpdateCheckStatusRequest `json:"status,omitempty"`
	// The result of the check being run
	Conclusion *ConclusionRequest `json:"conclusion,omitempty"`
	// A URL a user may visit to see more information about the check
	DetailsURL *string `json:"detailsUrl,omitempty"`
	// The results of the check Run
	Output *OutputRequest `json:"output,omitempty"`
	// An identifier that can be used as an external reference
	ExternalID *string `json:"externalId,omitempty"`
}

func (o *UpdateCheckRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateCheckRequestBody) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *UpdateCheckRequestBody) GetStatus() *UpdateCheckStatusRequest {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateCheckRequestBody) GetConclusion() *ConclusionRequest {
	if o == nil {
		return nil
	}
	return o.Conclusion
}

func (o *UpdateCheckRequestBody) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *UpdateCheckRequestBody) GetOutput() *OutputRequest {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *UpdateCheckRequestBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

type UpdateCheckRequest struct {
	// The deployment to update the check for.
	DeploymentID string `pathParam:"style=simple,explode=false,name=deploymentId"`
	// The check being updated
	CheckID string `pathParam:"style=simple,explode=false,name=checkId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateCheckRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateCheckRequest) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *UpdateCheckRequest) GetCheckID() string {
	if o == nil {
		return ""
	}
	return o.CheckID
}

func (o *UpdateCheckRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateCheckRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateCheckRequest) GetRequestBody() UpdateCheckRequestBody {
	if o == nil {
		return UpdateCheckRequestBody{}
	}
	return o.RequestBody
}

type UpdateCheckStatusResponseBody string

const (
	UpdateCheckStatusResponseBodyRegistered UpdateCheckStatusResponseBody = "registered"
	UpdateCheckStatusResponseBodyRunning    UpdateCheckStatusResponseBody = "running"
	UpdateCheckStatusResponseBodyCompleted  UpdateCheckStatusResponseBody = "completed"
)

func (e UpdateCheckStatusResponseBody) ToPointer() *UpdateCheckStatusResponseBody {
	return &e
}
func (e *UpdateCheckStatusResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateCheckStatusResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckStatusResponseBody: %v", v)
	}
}

type UpdateCheckConclusionResponse string

const (
	UpdateCheckConclusionResponseCanceled  UpdateCheckConclusionResponse = "canceled"
	UpdateCheckConclusionResponseFailed    UpdateCheckConclusionResponse = "failed"
	UpdateCheckConclusionResponseNeutral   UpdateCheckConclusionResponse = "neutral"
	UpdateCheckConclusionResponseSucceeded UpdateCheckConclusionResponse = "succeeded"
	UpdateCheckConclusionResponseSkipped   UpdateCheckConclusionResponse = "skipped"
	UpdateCheckConclusionResponseStale     UpdateCheckConclusionResponse = "stale"
)

func (e UpdateCheckConclusionResponse) ToPointer() *UpdateCheckConclusionResponse {
	return &e
}
func (e *UpdateCheckConclusionResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "canceled":
		fallthrough
	case "failed":
		fallthrough
	case "neutral":
		fallthrough
	case "succeeded":
		fallthrough
	case "skipped":
		fallthrough
	case "stale":
		*e = UpdateCheckConclusionResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckConclusionResponse: %v", v)
	}
}

type UpdateCheckFCPResponse struct {
	Value         *float64                      `json:"value"`
	PreviousValue *float64                      `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceResponseBody `json:"source"`
}

func (o *UpdateCheckFCPResponse) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateCheckFCPResponse) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckFCPResponse) GetSource() UpdateCheckSourceResponseBody {
	if o == nil {
		return UpdateCheckSourceResponseBody("")
	}
	return o.Source
}

type UpdateCheckLCPResponse struct {
	Value         *float64                      `json:"value"`
	PreviousValue *float64                      `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceResponseBody `json:"source"`
}

func (o *UpdateCheckLCPResponse) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateCheckLCPResponse) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckLCPResponse) GetSource() UpdateCheckSourceResponseBody {
	if o == nil {
		return UpdateCheckSourceResponseBody("")
	}
	return o.Source
}

type UpdateCheckCLSResponse struct {
	Value         *float64                      `json:"value"`
	PreviousValue *float64                      `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceResponseBody `json:"source"`
}

func (o *UpdateCheckCLSResponse) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateCheckCLSResponse) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckCLSResponse) GetSource() UpdateCheckSourceResponseBody {
	if o == nil {
		return UpdateCheckSourceResponseBody("")
	}
	return o.Source
}

type UpdateCheckTBTResponse struct {
	Value         *float64                      `json:"value"`
	PreviousValue *float64                      `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceResponseBody `json:"source"`
}

func (o *UpdateCheckTBTResponse) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateCheckTBTResponse) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckTBTResponse) GetSource() UpdateCheckSourceResponseBody {
	if o == nil {
		return UpdateCheckSourceResponseBody("")
	}
	return o.Source
}

type UpdateCheckSourceResponseBody string

const (
	UpdateCheckSourceResponseBodyWebVitals UpdateCheckSourceResponseBody = "web-vitals"
)

func (e UpdateCheckSourceResponseBody) ToPointer() *UpdateCheckSourceResponseBody {
	return &e
}
func (e *UpdateCheckSourceResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "web-vitals":
		*e = UpdateCheckSourceResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCheckSourceResponseBody: %v", v)
	}
}

type UpdateCheckVirtualExperienceScoreResponse struct {
	Value         *float64                      `json:"value"`
	PreviousValue *float64                      `json:"previousValue,omitempty"`
	Source        UpdateCheckSourceResponseBody `json:"source"`
}

func (o *UpdateCheckVirtualExperienceScoreResponse) GetValue() *float64 {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateCheckVirtualExperienceScoreResponse) GetPreviousValue() *float64 {
	if o == nil {
		return nil
	}
	return o.PreviousValue
}

func (o *UpdateCheckVirtualExperienceScoreResponse) GetSource() UpdateCheckSourceResponseBody {
	if o == nil {
		return UpdateCheckSourceResponseBody("")
	}
	return o.Source
}

type UpdateCheckMetricsResponse struct {
	Fcp                    UpdateCheckFCPResponse                     `json:"FCP"`
	Lcp                    UpdateCheckLCPResponse                     `json:"LCP"`
	Cls                    UpdateCheckCLSResponse                     `json:"CLS"`
	Tbt                    UpdateCheckTBTResponse                     `json:"TBT"`
	VirtualExperienceScore *UpdateCheckVirtualExperienceScoreResponse `json:"virtualExperienceScore,omitempty"`
}

func (o *UpdateCheckMetricsResponse) GetFcp() UpdateCheckFCPResponse {
	if o == nil {
		return UpdateCheckFCPResponse{}
	}
	return o.Fcp
}

func (o *UpdateCheckMetricsResponse) GetLcp() UpdateCheckLCPResponse {
	if o == nil {
		return UpdateCheckLCPResponse{}
	}
	return o.Lcp
}

func (o *UpdateCheckMetricsResponse) GetCls() UpdateCheckCLSResponse {
	if o == nil {
		return UpdateCheckCLSResponse{}
	}
	return o.Cls
}

func (o *UpdateCheckMetricsResponse) GetTbt() UpdateCheckTBTResponse {
	if o == nil {
		return UpdateCheckTBTResponse{}
	}
	return o.Tbt
}

func (o *UpdateCheckMetricsResponse) GetVirtualExperienceScore() *UpdateCheckVirtualExperienceScoreResponse {
	if o == nil {
		return nil
	}
	return o.VirtualExperienceScore
}

type UpdateCheckOutputResponseBody struct {
	Metrics *UpdateCheckMetricsResponse `json:"metrics,omitempty"`
}

func (o *UpdateCheckOutputResponseBody) GetMetrics() *UpdateCheckMetricsResponse {
	if o == nil {
		return nil
	}
	return o.Metrics
}

type UpdateCheckResponseBody struct {
	ID            string                         `json:"id"`
	Name          string                         `json:"name"`
	Path          *string                        `json:"path,omitempty"`
	Status        UpdateCheckStatusResponseBody  `json:"status"`
	Conclusion    *UpdateCheckConclusionResponse `json:"conclusion,omitempty"`
	Blocking      bool                           `json:"blocking"`
	Output        *UpdateCheckOutputResponseBody `json:"output,omitempty"`
	DetailsURL    *string                        `json:"detailsUrl,omitempty"`
	IntegrationID string                         `json:"integrationId"`
	DeploymentID  string                         `json:"deploymentId"`
	ExternalID    *string                        `json:"externalId,omitempty"`
	CreatedAt     float64                        `json:"createdAt"`
	UpdatedAt     float64                        `json:"updatedAt"`
	StartedAt     *float64                       `json:"startedAt,omitempty"`
	CompletedAt   *float64                       `json:"completedAt,omitempty"`
	Rerequestable *bool                          `json:"rerequestable,omitempty"`
}

func (o *UpdateCheckResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCheckResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateCheckResponseBody) GetPath() *string {
	if o == nil {
		return nil
	}
	return o.Path
}

func (o *UpdateCheckResponseBody) GetStatus() UpdateCheckStatusResponseBody {
	if o == nil {
		return UpdateCheckStatusResponseBody("")
	}
	return o.Status
}

func (o *UpdateCheckResponseBody) GetConclusion() *UpdateCheckConclusionResponse {
	if o == nil {
		return nil
	}
	return o.Conclusion
}

func (o *UpdateCheckResponseBody) GetBlocking() bool {
	if o == nil {
		return false
	}
	return o.Blocking
}

func (o *UpdateCheckResponseBody) GetOutput() *UpdateCheckOutputResponseBody {
	if o == nil {
		return nil
	}
	return o.Output
}

func (o *UpdateCheckResponseBody) GetDetailsURL() *string {
	if o == nil {
		return nil
	}
	return o.DetailsURL
}

func (o *UpdateCheckResponseBody) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateCheckResponseBody) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *UpdateCheckResponseBody) GetExternalID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalID
}

func (o *UpdateCheckResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateCheckResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateCheckResponseBody) GetStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.StartedAt
}

func (o *UpdateCheckResponseBody) GetCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CompletedAt
}

func (o *UpdateCheckResponseBody) GetRerequestable() *bool {
	if o == nil {
		return nil
	}
	return o.Rerequestable
}

type UpdateCheckResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateCheckResponseBody
}

func (o *UpdateCheckResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateCheckResponse) GetObject() *UpdateCheckResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
