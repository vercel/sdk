// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// UpdateCustomEnvironmentTypeRequest - Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
type UpdateCustomEnvironmentTypeRequest string

const (
	UpdateCustomEnvironmentTypeRequestEquals     UpdateCustomEnvironmentTypeRequest = "equals"
	UpdateCustomEnvironmentTypeRequestStartsWith UpdateCustomEnvironmentTypeRequest = "startsWith"
	UpdateCustomEnvironmentTypeRequestEndsWith   UpdateCustomEnvironmentTypeRequest = "endsWith"
)

func (e UpdateCustomEnvironmentTypeRequest) ToPointer() *UpdateCustomEnvironmentTypeRequest {
	return &e
}
func (e *UpdateCustomEnvironmentTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "equals":
		fallthrough
	case "startsWith":
		fallthrough
	case "endsWith":
		*e = UpdateCustomEnvironmentTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomEnvironmentTypeRequest: %v", v)
	}
}

// UpdateCustomEnvironmentBranchMatcherRequest - How we want to determine a matching branch. This is optional.
type UpdateCustomEnvironmentBranchMatcherRequest struct {
	// Type of matcher. One of \"equals\", \"startsWith\", or \"endsWith\".
	Type UpdateCustomEnvironmentTypeRequest `json:"type"`
	// Git branch name or portion thereof.
	Pattern string `json:"pattern"`
}

func (o *UpdateCustomEnvironmentBranchMatcherRequest) GetType() UpdateCustomEnvironmentTypeRequest {
	if o == nil {
		return UpdateCustomEnvironmentTypeRequest("")
	}
	return o.Type
}

func (o *UpdateCustomEnvironmentBranchMatcherRequest) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateCustomEnvironmentRequestBody struct {
	// The slug of the custom environment.
	Slug *string `json:"slug,omitempty"`
	// Description of the custom environment. This is optional.
	Description *string `json:"description,omitempty"`
	// How we want to determine a matching branch. This is optional.
	BranchMatcher *UpdateCustomEnvironmentBranchMatcherRequest `json:"branchMatcher,omitempty"`
}

func (o *UpdateCustomEnvironmentRequestBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateCustomEnvironmentRequestBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateCustomEnvironmentRequestBody) GetBranchMatcher() *UpdateCustomEnvironmentBranchMatcherRequest {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

type UpdateCustomEnvironmentRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The unique custom environment identifier within the project
	EnvironmentSlugOrID string `pathParam:"style=simple,explode=false,name=environmentSlugOrId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UpdateCustomEnvironmentRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateCustomEnvironmentRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateCustomEnvironmentRequest) GetEnvironmentSlugOrID() string {
	if o == nil {
		return ""
	}
	return o.EnvironmentSlugOrID
}

func (o *UpdateCustomEnvironmentRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateCustomEnvironmentRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateCustomEnvironmentRequest) GetRequestBody() *UpdateCustomEnvironmentRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdateCustomEnvironmentTypeResponseBody - The type of environment (production, preview, or development)
type UpdateCustomEnvironmentTypeResponseBody string

const (
	UpdateCustomEnvironmentTypeResponseBodyProduction  UpdateCustomEnvironmentTypeResponseBody = "production"
	UpdateCustomEnvironmentTypeResponseBodyPreview     UpdateCustomEnvironmentTypeResponseBody = "preview"
	UpdateCustomEnvironmentTypeResponseBodyDevelopment UpdateCustomEnvironmentTypeResponseBody = "development"
)

func (e UpdateCustomEnvironmentTypeResponseBody) ToPointer() *UpdateCustomEnvironmentTypeResponseBody {
	return &e
}
func (e *UpdateCustomEnvironmentTypeResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateCustomEnvironmentTypeResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomEnvironmentTypeResponseBody: %v", v)
	}
}

// UpdateCustomEnvironmentBranchMatcherTypeResponseBody - The type of matching to perform
type UpdateCustomEnvironmentBranchMatcherTypeResponseBody string

const (
	UpdateCustomEnvironmentBranchMatcherTypeResponseBodyEndsWith   UpdateCustomEnvironmentBranchMatcherTypeResponseBody = "endsWith"
	UpdateCustomEnvironmentBranchMatcherTypeResponseBodyStartsWith UpdateCustomEnvironmentBranchMatcherTypeResponseBody = "startsWith"
	UpdateCustomEnvironmentBranchMatcherTypeResponseBodyEquals     UpdateCustomEnvironmentBranchMatcherTypeResponseBody = "equals"
)

func (e UpdateCustomEnvironmentBranchMatcherTypeResponseBody) ToPointer() *UpdateCustomEnvironmentBranchMatcherTypeResponseBody {
	return &e
}
func (e *UpdateCustomEnvironmentBranchMatcherTypeResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateCustomEnvironmentBranchMatcherTypeResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateCustomEnvironmentBranchMatcherTypeResponseBody: %v", v)
	}
}

// UpdateCustomEnvironmentBranchMatcherResponseBody - Configuration for matching git branches to this environment
type UpdateCustomEnvironmentBranchMatcherResponseBody struct {
	// The type of matching to perform
	Type UpdateCustomEnvironmentBranchMatcherTypeResponseBody `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *UpdateCustomEnvironmentBranchMatcherResponseBody) GetType() UpdateCustomEnvironmentBranchMatcherTypeResponseBody {
	if o == nil {
		return UpdateCustomEnvironmentBranchMatcherTypeResponseBody("")
	}
	return o.Type
}

func (o *UpdateCustomEnvironmentBranchMatcherResponseBody) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// UpdateCustomEnvironmentVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type UpdateCustomEnvironmentVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *UpdateCustomEnvironmentVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateCustomEnvironmentVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *UpdateCustomEnvironmentVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateCustomEnvironmentVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// UpdateCustomEnvironmentDomain - List of domains associated with this environment
type UpdateCustomEnvironmentDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []UpdateCustomEnvironmentVerification `json:"verification,omitempty"`
}

func (o *UpdateCustomEnvironmentDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateCustomEnvironmentDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *UpdateCustomEnvironmentDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateCustomEnvironmentDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *UpdateCustomEnvironmentDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *UpdateCustomEnvironmentDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateCustomEnvironmentDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *UpdateCustomEnvironmentDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateCustomEnvironmentDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateCustomEnvironmentDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *UpdateCustomEnvironmentDomain) GetVerification() []UpdateCustomEnvironmentVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// UpdateCustomEnvironmentResponseBody - Internal representation of a custom environment with all required properties
type UpdateCustomEnvironmentResponseBody struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type UpdateCustomEnvironmentTypeResponseBody `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *UpdateCustomEnvironmentBranchMatcherResponseBody `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []UpdateCustomEnvironmentDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *UpdateCustomEnvironmentResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateCustomEnvironmentResponseBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *UpdateCustomEnvironmentResponseBody) GetType() UpdateCustomEnvironmentTypeResponseBody {
	if o == nil {
		return UpdateCustomEnvironmentTypeResponseBody("")
	}
	return o.Type
}

func (o *UpdateCustomEnvironmentResponseBody) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateCustomEnvironmentResponseBody) GetBranchMatcher() *UpdateCustomEnvironmentBranchMatcherResponseBody {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateCustomEnvironmentResponseBody) GetDomains() []UpdateCustomEnvironmentDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *UpdateCustomEnvironmentResponseBody) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *UpdateCustomEnvironmentResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateCustomEnvironmentResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateCustomEnvironmentResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateCustomEnvironmentResponseBody
}

func (o *UpdateCustomEnvironmentResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateCustomEnvironmentResponse) GetObject() *UpdateCustomEnvironmentResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
