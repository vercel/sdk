// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateDrainProjects string

const (
	UpdateDrainProjectsSome UpdateDrainProjects = "some"
	UpdateDrainProjectsAll  UpdateDrainProjects = "all"
)

func (e UpdateDrainProjects) ToPointer() *UpdateDrainProjects {
	return &e
}
func (e *UpdateDrainProjects) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "some":
		fallthrough
	case "all":
		*e = UpdateDrainProjects(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainProjects: %v", v)
	}
}

type UpdateDrainFilterRequest3 struct {
	Type string `json:"type"`
	Text string `json:"text"`
}

func (u UpdateDrainFilterRequest3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterRequest3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterRequest3) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateDrainFilterRequest3) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type UpdateDrainProjectRequest struct {
	Ids []string `json:"ids,omitempty"`
}

func (u UpdateDrainProjectRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainProjectRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainProjectRequest) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type UpdateDrainLogRequest struct {
	Sources []string `json:"sources,omitempty"`
}

func (u UpdateDrainLogRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainLogRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainLogRequest) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type UpdateDrainDeploymentRequest struct {
	Environments []string `json:"environments,omitempty"`
}

func (u UpdateDrainDeploymentRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeploymentRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeploymentRequest) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type UpdateDrainFilterRequest2 struct {
	Type       string                        `json:"type"`
	Project    *UpdateDrainProjectRequest    `json:"project,omitempty"`
	Log        *UpdateDrainLogRequest        `json:"log,omitempty"`
	Deployment *UpdateDrainDeploymentRequest `json:"deployment,omitempty"`
}

func (u UpdateDrainFilterRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterRequest2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateDrainFilterRequest2) GetProject() *UpdateDrainProjectRequest {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateDrainFilterRequest2) GetLog() *UpdateDrainLogRequest {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *UpdateDrainFilterRequest2) GetDeployment() *UpdateDrainDeploymentRequest {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type UpdateDrainFilterRequestUnion2Type string

const (
	UpdateDrainFilterRequestUnion2TypeUpdateDrainFilterRequest2 UpdateDrainFilterRequestUnion2Type = "updateDrain_filter_request_2"
	UpdateDrainFilterRequestUnion2TypeUpdateDrainFilterRequest3 UpdateDrainFilterRequestUnion2Type = "updateDrain_filter_request_3"
)

type UpdateDrainFilterRequestUnion2 struct {
	UpdateDrainFilterRequest2 *UpdateDrainFilterRequest2 `queryParam:"inline"`
	UpdateDrainFilterRequest3 *UpdateDrainFilterRequest3 `queryParam:"inline"`

	Type UpdateDrainFilterRequestUnion2Type
}

func CreateUpdateDrainFilterRequestUnion2UpdateDrainFilterRequest2(updateDrainFilterRequest2 UpdateDrainFilterRequest2) UpdateDrainFilterRequestUnion2 {
	typ := UpdateDrainFilterRequestUnion2TypeUpdateDrainFilterRequest2

	return UpdateDrainFilterRequestUnion2{
		UpdateDrainFilterRequest2: &updateDrainFilterRequest2,
		Type:                      typ,
	}
}

func CreateUpdateDrainFilterRequestUnion2UpdateDrainFilterRequest3(updateDrainFilterRequest3 UpdateDrainFilterRequest3) UpdateDrainFilterRequestUnion2 {
	typ := UpdateDrainFilterRequestUnion2TypeUpdateDrainFilterRequest3

	return UpdateDrainFilterRequestUnion2{
		UpdateDrainFilterRequest3: &updateDrainFilterRequest3,
		Type:                      typ,
	}
}

func (u *UpdateDrainFilterRequestUnion2) UnmarshalJSON(data []byte) error {

	var updateDrainFilterRequest3 UpdateDrainFilterRequest3 = UpdateDrainFilterRequest3{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterRequest3, "", true, nil); err == nil {
		u.UpdateDrainFilterRequest3 = &updateDrainFilterRequest3
		u.Type = UpdateDrainFilterRequestUnion2TypeUpdateDrainFilterRequest3
		return nil
	}

	var updateDrainFilterRequest2 UpdateDrainFilterRequest2 = UpdateDrainFilterRequest2{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterRequest2, "", true, nil); err == nil {
		u.UpdateDrainFilterRequest2 = &updateDrainFilterRequest2
		u.Type = UpdateDrainFilterRequestUnion2TypeUpdateDrainFilterRequest2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainFilterRequestUnion2", string(data))
}

func (u UpdateDrainFilterRequestUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainFilterRequest2 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterRequest2, "", true)
	}

	if u.UpdateDrainFilterRequest3 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterRequest3, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainFilterRequestUnion2: all fields are null")
}

type UpdateDrainFilterRequest1 struct {
	Version string                         `json:"version"`
	Filter  UpdateDrainFilterRequestUnion2 `json:"filter"`
}

func (u UpdateDrainFilterRequest1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterRequest1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterRequest1) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

func (o *UpdateDrainFilterRequest1) GetFilter() UpdateDrainFilterRequestUnion2 {
	if o == nil {
		return UpdateDrainFilterRequestUnion2{}
	}
	return o.Filter
}

type UpdateDrainFilterRequestUnion1Type string

const (
	UpdateDrainFilterRequestUnion1TypeStr                       UpdateDrainFilterRequestUnion1Type = "str"
	UpdateDrainFilterRequestUnion1TypeUpdateDrainFilterRequest1 UpdateDrainFilterRequestUnion1Type = "updateDrain_filter_request_1"
)

type UpdateDrainFilterRequestUnion1 struct {
	Str                       *string                    `queryParam:"inline"`
	UpdateDrainFilterRequest1 *UpdateDrainFilterRequest1 `queryParam:"inline"`

	Type UpdateDrainFilterRequestUnion1Type
}

func CreateUpdateDrainFilterRequestUnion1Str(str string) UpdateDrainFilterRequestUnion1 {
	typ := UpdateDrainFilterRequestUnion1TypeStr

	return UpdateDrainFilterRequestUnion1{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateDrainFilterRequestUnion1UpdateDrainFilterRequest1(updateDrainFilterRequest1 UpdateDrainFilterRequest1) UpdateDrainFilterRequestUnion1 {
	typ := UpdateDrainFilterRequestUnion1TypeUpdateDrainFilterRequest1

	return UpdateDrainFilterRequestUnion1{
		UpdateDrainFilterRequest1: &updateDrainFilterRequest1,
		Type:                      typ,
	}
}

func (u *UpdateDrainFilterRequestUnion1) UnmarshalJSON(data []byte) error {

	var updateDrainFilterRequest1 UpdateDrainFilterRequest1 = UpdateDrainFilterRequest1{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterRequest1, "", true, nil); err == nil {
		u.UpdateDrainFilterRequest1 = &updateDrainFilterRequest1
		u.Type = UpdateDrainFilterRequestUnion1TypeUpdateDrainFilterRequest1
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateDrainFilterRequestUnion1TypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainFilterRequestUnion1", string(data))
}

func (u UpdateDrainFilterRequestUnion1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateDrainFilterRequest1 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterRequest1, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainFilterRequestUnion1: all fields are null")
}

type UpdateDrainSchemasRequest struct {
	Version string `json:"version"`
}

func (o *UpdateDrainSchemasRequest) GetVersion() string {
	if o == nil {
		return ""
	}
	return o.Version
}

type UpdateDrainDeliveryRequest3 struct {
	Type     string `json:"type"`
	Endpoint string `json:"endpoint"`
	Secret   string `json:"secret"`
}

func (u UpdateDrainDeliveryRequest3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryRequest3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryRequest3) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateDrainDeliveryRequest3) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryRequest3) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type UpdateDrainEndpointRequest struct {
	Traces string `json:"traces"`
}

func (u UpdateDrainEndpointRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainEndpointRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainEndpointRequest) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type UpdateDrainEndpointUnionType string

const (
	UpdateDrainEndpointUnionTypeUpdateDrainEndpointRequest UpdateDrainEndpointUnionType = "updateDrain_endpoint_request"
)

type UpdateDrainEndpointUnion struct {
	UpdateDrainEndpointRequest *UpdateDrainEndpointRequest `queryParam:"inline"`

	Type UpdateDrainEndpointUnionType
}

func CreateUpdateDrainEndpointUnionUpdateDrainEndpointRequest(updateDrainEndpointRequest UpdateDrainEndpointRequest) UpdateDrainEndpointUnion {
	typ := UpdateDrainEndpointUnionTypeUpdateDrainEndpointRequest

	return UpdateDrainEndpointUnion{
		UpdateDrainEndpointRequest: &updateDrainEndpointRequest,
		Type:                       typ,
	}
}

func (u *UpdateDrainEndpointUnion) UnmarshalJSON(data []byte) error {

	var updateDrainEndpointRequest UpdateDrainEndpointRequest = UpdateDrainEndpointRequest{}
	if err := utils.UnmarshalJSON(data, &updateDrainEndpointRequest, "", true, nil); err == nil {
		u.UpdateDrainEndpointRequest = &updateDrainEndpointRequest
		u.Type = UpdateDrainEndpointUnionTypeUpdateDrainEndpointRequest
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainEndpointUnion", string(data))
}

func (u UpdateDrainEndpointUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainEndpointRequest != nil {
		return utils.MarshalJSON(u.UpdateDrainEndpointRequest, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainEndpointUnion: all fields are null")
}

type UpdateDrainEncodingRequest2 string

const (
	UpdateDrainEncodingRequest2Proto UpdateDrainEncodingRequest2 = "proto"
	UpdateDrainEncodingRequest2JSON  UpdateDrainEncodingRequest2 = "json"
)

func (e UpdateDrainEncodingRequest2) ToPointer() *UpdateDrainEncodingRequest2 {
	return &e
}
func (e *UpdateDrainEncodingRequest2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "proto":
		fallthrough
	case "json":
		*e = UpdateDrainEncodingRequest2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEncodingRequest2: %v", v)
	}
}

type UpdateDrainDeliveryRequest2 struct {
	Type     string                      `json:"type"`
	Endpoint UpdateDrainEndpointUnion    `json:"endpoint"`
	Encoding UpdateDrainEncodingRequest2 `json:"encoding"`
	Headers  map[string]string           `json:"headers"`
	Secret   *string                     `json:"secret,omitempty"`
}

func (u UpdateDrainDeliveryRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryRequest2) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateDrainDeliveryRequest2) GetEndpoint() UpdateDrainEndpointUnion {
	if o == nil {
		return UpdateDrainEndpointUnion{}
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryRequest2) GetEncoding() UpdateDrainEncodingRequest2 {
	if o == nil {
		return UpdateDrainEncodingRequest2("")
	}
	return o.Encoding
}

func (o *UpdateDrainDeliveryRequest2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *UpdateDrainDeliveryRequest2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateDrainCompressionRequest string

const (
	UpdateDrainCompressionRequestGzip UpdateDrainCompressionRequest = "gzip"
	UpdateDrainCompressionRequestNone UpdateDrainCompressionRequest = "none"
)

func (e UpdateDrainCompressionRequest) ToPointer() *UpdateDrainCompressionRequest {
	return &e
}
func (e *UpdateDrainCompressionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = UpdateDrainCompressionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainCompressionRequest: %v", v)
	}
}

type UpdateDrainEncodingRequest1 string

const (
	UpdateDrainEncodingRequest1JSON   UpdateDrainEncodingRequest1 = "json"
	UpdateDrainEncodingRequest1Ndjson UpdateDrainEncodingRequest1 = "ndjson"
)

func (e UpdateDrainEncodingRequest1) ToPointer() *UpdateDrainEncodingRequest1 {
	return &e
}
func (e *UpdateDrainEncodingRequest1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = UpdateDrainEncodingRequest1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEncodingRequest1: %v", v)
	}
}

type UpdateDrainDeliveryRequest1 struct {
	Type        string                         `json:"type"`
	Endpoint    string                         `json:"endpoint"`
	Compression *UpdateDrainCompressionRequest `json:"compression,omitempty"`
	Encoding    UpdateDrainEncodingRequest1    `json:"encoding"`
	Headers     map[string]string              `json:"headers"`
	Secret      *string                        `json:"secret,omitempty"`
}

func (u UpdateDrainDeliveryRequest1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryRequest1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryRequest1) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateDrainDeliveryRequest1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryRequest1) GetCompression() *UpdateDrainCompressionRequest {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *UpdateDrainDeliveryRequest1) GetEncoding() UpdateDrainEncodingRequest1 {
	if o == nil {
		return UpdateDrainEncodingRequest1("")
	}
	return o.Encoding
}

func (o *UpdateDrainDeliveryRequest1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *UpdateDrainDeliveryRequest1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateDrainDeliveryRequestUnionType string

const (
	UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest1 UpdateDrainDeliveryRequestUnionType = "updateDrain_delivery_request_1"
	UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest2 UpdateDrainDeliveryRequestUnionType = "updateDrain_delivery_request_2"
	UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest3 UpdateDrainDeliveryRequestUnionType = "updateDrain_delivery_request_3"
)

type UpdateDrainDeliveryRequestUnion struct {
	UpdateDrainDeliveryRequest1 *UpdateDrainDeliveryRequest1 `queryParam:"inline"`
	UpdateDrainDeliveryRequest2 *UpdateDrainDeliveryRequest2 `queryParam:"inline"`
	UpdateDrainDeliveryRequest3 *UpdateDrainDeliveryRequest3 `queryParam:"inline"`

	Type UpdateDrainDeliveryRequestUnionType
}

func CreateUpdateDrainDeliveryRequestUnionUpdateDrainDeliveryRequest1(updateDrainDeliveryRequest1 UpdateDrainDeliveryRequest1) UpdateDrainDeliveryRequestUnion {
	typ := UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest1

	return UpdateDrainDeliveryRequestUnion{
		UpdateDrainDeliveryRequest1: &updateDrainDeliveryRequest1,
		Type:                        typ,
	}
}

func CreateUpdateDrainDeliveryRequestUnionUpdateDrainDeliveryRequest2(updateDrainDeliveryRequest2 UpdateDrainDeliveryRequest2) UpdateDrainDeliveryRequestUnion {
	typ := UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest2

	return UpdateDrainDeliveryRequestUnion{
		UpdateDrainDeliveryRequest2: &updateDrainDeliveryRequest2,
		Type:                        typ,
	}
}

func CreateUpdateDrainDeliveryRequestUnionUpdateDrainDeliveryRequest3(updateDrainDeliveryRequest3 UpdateDrainDeliveryRequest3) UpdateDrainDeliveryRequestUnion {
	typ := UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest3

	return UpdateDrainDeliveryRequestUnion{
		UpdateDrainDeliveryRequest3: &updateDrainDeliveryRequest3,
		Type:                        typ,
	}
}

func (u *UpdateDrainDeliveryRequestUnion) UnmarshalJSON(data []byte) error {

	var updateDrainDeliveryRequest1 UpdateDrainDeliveryRequest1 = UpdateDrainDeliveryRequest1{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryRequest1, "", true, nil); err == nil {
		u.UpdateDrainDeliveryRequest1 = &updateDrainDeliveryRequest1
		u.Type = UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest1
		return nil
	}

	var updateDrainDeliveryRequest2 UpdateDrainDeliveryRequest2 = UpdateDrainDeliveryRequest2{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryRequest2, "", true, nil); err == nil {
		u.UpdateDrainDeliveryRequest2 = &updateDrainDeliveryRequest2
		u.Type = UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest2
		return nil
	}

	var updateDrainDeliveryRequest3 UpdateDrainDeliveryRequest3 = UpdateDrainDeliveryRequest3{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryRequest3, "", true, nil); err == nil {
		u.UpdateDrainDeliveryRequest3 = &updateDrainDeliveryRequest3
		u.Type = UpdateDrainDeliveryRequestUnionTypeUpdateDrainDeliveryRequest3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainDeliveryRequestUnion", string(data))
}

func (u UpdateDrainDeliveryRequestUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainDeliveryRequest1 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryRequest1, "", true)
	}

	if u.UpdateDrainDeliveryRequest2 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryRequest2, "", true)
	}

	if u.UpdateDrainDeliveryRequest3 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryRequest3, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainDeliveryRequestUnion: all fields are null")
}

// UpdateDrainEnvRequest - Environment to apply sampling to
type UpdateDrainEnvRequest string

const (
	UpdateDrainEnvRequestProduction UpdateDrainEnvRequest = "production"
	UpdateDrainEnvRequestPreview    UpdateDrainEnvRequest = "preview"
)

func (e UpdateDrainEnvRequest) ToPointer() *UpdateDrainEnvRequest {
	return &e
}
func (e *UpdateDrainEnvRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = UpdateDrainEnvRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEnvRequest: %v", v)
	}
}

type UpdateDrainSamplingRequest struct {
	Type string `json:"type"`
	// Sampling rate from 0 to 1 (e.g., 0.1 for 10%)
	Rate float64 `json:"rate"`
	// Environment to apply sampling to
	Env *UpdateDrainEnvRequest `json:"env,omitempty"`
	// Request path prefix to apply the sampling rule to
	RequestPath *string `json:"requestPath,omitempty"`
}

func (o *UpdateDrainSamplingRequest) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateDrainSamplingRequest) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *UpdateDrainSamplingRequest) GetEnv() *UpdateDrainEnvRequest {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateDrainSamplingRequest) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type UpdateDrainTransform struct {
	ID string `json:"id"`
}

func (o *UpdateDrainTransform) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

type UpdateDrainStatusRequest string

const (
	UpdateDrainStatusRequestEnabled  UpdateDrainStatusRequest = "enabled"
	UpdateDrainStatusRequestDisabled UpdateDrainStatusRequest = "disabled"
)

func (e UpdateDrainStatusRequest) ToPointer() *UpdateDrainStatusRequest {
	return &e
}
func (e *UpdateDrainStatusRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = UpdateDrainStatusRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainStatusRequest: %v", v)
	}
}

type UpdateDrainSourceRequest4 struct {
	Kind *string `default:"self-served" json:"kind"`
}

func (u UpdateDrainSourceRequest4) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceRequest4) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceRequest4) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type UpdateDrainSourceRequest3 struct {
	Kind *string `default:"integration" json:"kind"`
}

func (u UpdateDrainSourceRequest3) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceRequest3) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceRequest3) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

type UpdateDrainSourceRequest2 struct {
	Kind       *string `default:"integration" json:"kind"`
	ResourceID string  `json:"resourceId"`
}

func (u UpdateDrainSourceRequest2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceRequest2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"resourceId"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceRequest2) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *UpdateDrainSourceRequest2) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type UpdateDrainSourceRequest1 struct {
	Kind               *string `default:"integration" json:"kind"`
	ExternalResourceID string  `json:"externalResourceId"`
}

func (u UpdateDrainSourceRequest1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceRequest1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"externalResourceId"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceRequest1) GetKind() *string {
	if o == nil {
		return nil
	}
	return o.Kind
}

func (o *UpdateDrainSourceRequest1) GetExternalResourceID() string {
	if o == nil {
		return ""
	}
	return o.ExternalResourceID
}

type UpdateDrainSourceRequestUnion2Type string

const (
	UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest1 UpdateDrainSourceRequestUnion2Type = "updateDrain_source_request_1"
	UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest2 UpdateDrainSourceRequestUnion2Type = "updateDrain_source_request_2"
	UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest3 UpdateDrainSourceRequestUnion2Type = "updateDrain_source_request_3"
)

type UpdateDrainSourceRequestUnion2 struct {
	UpdateDrainSourceRequest1 *UpdateDrainSourceRequest1 `queryParam:"inline"`
	UpdateDrainSourceRequest2 *UpdateDrainSourceRequest2 `queryParam:"inline"`
	UpdateDrainSourceRequest3 *UpdateDrainSourceRequest3 `queryParam:"inline"`

	Type UpdateDrainSourceRequestUnion2Type
}

func CreateUpdateDrainSourceRequestUnion2UpdateDrainSourceRequest1(updateDrainSourceRequest1 UpdateDrainSourceRequest1) UpdateDrainSourceRequestUnion2 {
	typ := UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest1

	return UpdateDrainSourceRequestUnion2{
		UpdateDrainSourceRequest1: &updateDrainSourceRequest1,
		Type:                      typ,
	}
}

func CreateUpdateDrainSourceRequestUnion2UpdateDrainSourceRequest2(updateDrainSourceRequest2 UpdateDrainSourceRequest2) UpdateDrainSourceRequestUnion2 {
	typ := UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest2

	return UpdateDrainSourceRequestUnion2{
		UpdateDrainSourceRequest2: &updateDrainSourceRequest2,
		Type:                      typ,
	}
}

func CreateUpdateDrainSourceRequestUnion2UpdateDrainSourceRequest3(updateDrainSourceRequest3 UpdateDrainSourceRequest3) UpdateDrainSourceRequestUnion2 {
	typ := UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest3

	return UpdateDrainSourceRequestUnion2{
		UpdateDrainSourceRequest3: &updateDrainSourceRequest3,
		Type:                      typ,
	}
}

func (u *UpdateDrainSourceRequestUnion2) UnmarshalJSON(data []byte) error {

	var updateDrainSourceRequest1 UpdateDrainSourceRequest1 = UpdateDrainSourceRequest1{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceRequest1, "", true, nil); err == nil {
		u.UpdateDrainSourceRequest1 = &updateDrainSourceRequest1
		u.Type = UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest1
		return nil
	}

	var updateDrainSourceRequest2 UpdateDrainSourceRequest2 = UpdateDrainSourceRequest2{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceRequest2, "", true, nil); err == nil {
		u.UpdateDrainSourceRequest2 = &updateDrainSourceRequest2
		u.Type = UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest2
		return nil
	}

	var updateDrainSourceRequest3 UpdateDrainSourceRequest3 = UpdateDrainSourceRequest3{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceRequest3, "", true, nil); err == nil {
		u.UpdateDrainSourceRequest3 = &updateDrainSourceRequest3
		u.Type = UpdateDrainSourceRequestUnion2TypeUpdateDrainSourceRequest3
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainSourceRequestUnion2", string(data))
}

func (u UpdateDrainSourceRequestUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainSourceRequest1 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceRequest1, "", true)
	}

	if u.UpdateDrainSourceRequest2 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceRequest2, "", true)
	}

	if u.UpdateDrainSourceRequest3 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceRequest3, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainSourceRequestUnion2: all fields are null")
}

type UpdateDrainSourceRequestUnion1Type string

const (
	UpdateDrainSourceRequestUnion1TypeUpdateDrainSourceRequestUnion2 UpdateDrainSourceRequestUnion1Type = "updateDrain_source_request_union_2"
	UpdateDrainSourceRequestUnion1TypeUpdateDrainSourceRequest4      UpdateDrainSourceRequestUnion1Type = "updateDrain_source_request_4"
)

type UpdateDrainSourceRequestUnion1 struct {
	UpdateDrainSourceRequestUnion2 *UpdateDrainSourceRequestUnion2 `queryParam:"inline"`
	UpdateDrainSourceRequest4      *UpdateDrainSourceRequest4      `queryParam:"inline"`

	Type UpdateDrainSourceRequestUnion1Type
}

func CreateUpdateDrainSourceRequestUnion1UpdateDrainSourceRequestUnion2(updateDrainSourceRequestUnion2 UpdateDrainSourceRequestUnion2) UpdateDrainSourceRequestUnion1 {
	typ := UpdateDrainSourceRequestUnion1TypeUpdateDrainSourceRequestUnion2

	return UpdateDrainSourceRequestUnion1{
		UpdateDrainSourceRequestUnion2: &updateDrainSourceRequestUnion2,
		Type:                           typ,
	}
}

func CreateUpdateDrainSourceRequestUnion1UpdateDrainSourceRequest4(updateDrainSourceRequest4 UpdateDrainSourceRequest4) UpdateDrainSourceRequestUnion1 {
	typ := UpdateDrainSourceRequestUnion1TypeUpdateDrainSourceRequest4

	return UpdateDrainSourceRequestUnion1{
		UpdateDrainSourceRequest4: &updateDrainSourceRequest4,
		Type:                      typ,
	}
}

func (u *UpdateDrainSourceRequestUnion1) UnmarshalJSON(data []byte) error {

	var updateDrainSourceRequestUnion2 UpdateDrainSourceRequestUnion2 = UpdateDrainSourceRequestUnion2{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceRequestUnion2, "", true, nil); err == nil {
		u.UpdateDrainSourceRequestUnion2 = &updateDrainSourceRequestUnion2
		u.Type = UpdateDrainSourceRequestUnion1TypeUpdateDrainSourceRequestUnion2
		return nil
	}

	var updateDrainSourceRequest4 UpdateDrainSourceRequest4 = UpdateDrainSourceRequest4{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceRequest4, "", true, nil); err == nil {
		u.UpdateDrainSourceRequest4 = &updateDrainSourceRequest4
		u.Type = UpdateDrainSourceRequestUnion1TypeUpdateDrainSourceRequest4
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainSourceRequestUnion1", string(data))
}

func (u UpdateDrainSourceRequestUnion1) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainSourceRequestUnion2 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceRequestUnion2, "", true)
	}

	if u.UpdateDrainSourceRequest4 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceRequest4, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainSourceRequestUnion1: all fields are null")
}

type UpdateDrainRequestBody struct {
	Name       *string                              `json:"name,omitempty"`
	Projects   *UpdateDrainProjects                 `json:"projects,omitempty"`
	ProjectIds []string                             `json:"projectIds,omitempty"`
	Filter     *UpdateDrainFilterRequestUnion1      `json:"filter,omitempty"`
	Schemas    map[string]UpdateDrainSchemasRequest `json:"schemas,omitempty"`
	Delivery   *UpdateDrainDeliveryRequestUnion     `json:"delivery,omitempty"`
	Sampling   []UpdateDrainSamplingRequest         `json:"sampling,omitempty"`
	Transforms []UpdateDrainTransform               `json:"transforms,omitempty"`
	Status     *UpdateDrainStatusRequest            `json:"status,omitempty"`
	Source     *UpdateDrainSourceRequestUnion1      `json:"source,omitempty"`
}

func (o *UpdateDrainRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateDrainRequestBody) GetProjects() *UpdateDrainProjects {
	if o == nil {
		return nil
	}
	return o.Projects
}

func (o *UpdateDrainRequestBody) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *UpdateDrainRequestBody) GetFilter() *UpdateDrainFilterRequestUnion1 {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *UpdateDrainRequestBody) GetSchemas() map[string]UpdateDrainSchemasRequest {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *UpdateDrainRequestBody) GetDelivery() *UpdateDrainDeliveryRequestUnion {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *UpdateDrainRequestBody) GetSampling() []UpdateDrainSamplingRequest {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *UpdateDrainRequestBody) GetTransforms() []UpdateDrainTransform {
	if o == nil {
		return nil
	}
	return o.Transforms
}

func (o *UpdateDrainRequestBody) GetStatus() *UpdateDrainStatusRequest {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateDrainRequestBody) GetSource() *UpdateDrainSourceRequestUnion1 {
	if o == nil {
		return nil
	}
	return o.Source
}

type UpdateDrainRequest struct {
	ID string `pathParam:"style=simple,explode=false,name=id"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                 `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UpdateDrainRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateDrainRequest) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateDrainRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateDrainRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateDrainRequest) GetRequestBody() *UpdateDrainRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateDrainCreatedFrom2 string

const (
	UpdateDrainCreatedFrom2SelfServed  UpdateDrainCreatedFrom2 = "self-served"
	UpdateDrainCreatedFrom2Integration UpdateDrainCreatedFrom2 = "integration"
)

func (e UpdateDrainCreatedFrom2) ToPointer() *UpdateDrainCreatedFrom2 {
	return &e
}
func (e *UpdateDrainCreatedFrom2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = UpdateDrainCreatedFrom2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainCreatedFrom2: %v", v)
	}
}

type UpdateDrainSchemasLog2 struct {
}

func (u UpdateDrainSchemasLog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSchemasLog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainTrace2 struct {
}

func (u UpdateDrainTrace2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainTrace2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainAnalytics2 struct {
}

func (u UpdateDrainAnalytics2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainAnalytics2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainSpeedInsights2 struct {
}

func (u UpdateDrainSpeedInsights2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSpeedInsights2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainSchemasResponse2 struct {
	Log           *UpdateDrainSchemasLog2    `json:"log,omitempty"`
	Trace         *UpdateDrainTrace2         `json:"trace,omitempty"`
	Analytics     *UpdateDrainAnalytics2     `json:"analytics,omitempty"`
	SpeedInsights *UpdateDrainSpeedInsights2 `json:"speed_insights,omitempty"`
}

func (u UpdateDrainSchemasResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSchemasResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSchemasResponse2) GetLog() *UpdateDrainSchemasLog2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *UpdateDrainSchemasResponse2) GetTrace() *UpdateDrainTrace2 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *UpdateDrainSchemasResponse2) GetAnalytics() *UpdateDrainAnalytics2 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateDrainSchemasResponse2) GetSpeedInsights() *UpdateDrainSpeedInsights2 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type UpdateDrainTypeInternal2 string

const (
	UpdateDrainTypeInternal2Internal UpdateDrainTypeInternal2 = "internal"
)

func (e UpdateDrainTypeInternal2) ToPointer() *UpdateDrainTypeInternal2 {
	return &e
}
func (e *UpdateDrainTypeInternal2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = UpdateDrainTypeInternal2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeInternal2: %v", v)
	}
}

type UpdateDrainTarget2 string

const (
	UpdateDrainTarget2VercelOtelTracesDb UpdateDrainTarget2 = "vercel-otel-traces-db"
)

func (e UpdateDrainTarget2) ToPointer() *UpdateDrainTarget2 {
	return &e
}
func (e *UpdateDrainTarget2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = UpdateDrainTarget2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTarget2: %v", v)
	}
}

type UpdateDrainDeliveryVercelOtelTracesDb2 struct {
	Type   UpdateDrainTypeInternal2 `json:"type"`
	Target UpdateDrainTarget2       `json:"target"`
}

func (u UpdateDrainDeliveryVercelOtelTracesDb2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryVercelOtelTracesDb2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryVercelOtelTracesDb2) GetType() UpdateDrainTypeInternal2 {
	if o == nil {
		return UpdateDrainTypeInternal2("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryVercelOtelTracesDb2) GetTarget() UpdateDrainTarget2 {
	if o == nil {
		return UpdateDrainTarget2("")
	}
	return o.Target
}

type UpdateDrainTypeClickhouse2 string

const (
	UpdateDrainTypeClickhouse2Clickhouse UpdateDrainTypeClickhouse2 = "clickhouse"
)

func (e UpdateDrainTypeClickhouse2) ToPointer() *UpdateDrainTypeClickhouse2 {
	return &e
}
func (e *UpdateDrainTypeClickhouse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = UpdateDrainTypeClickhouse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeClickhouse2: %v", v)
	}
}

type UpdateDrainDeliveryClickhouse2 struct {
	Type     UpdateDrainTypeClickhouse2 `json:"type"`
	Endpoint string                     `json:"endpoint"`
	Table    string                     `json:"table"`
}

func (u UpdateDrainDeliveryClickhouse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryClickhouse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryClickhouse2) GetType() UpdateDrainTypeClickhouse2 {
	if o == nil {
		return UpdateDrainTypeClickhouse2("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryClickhouse2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryClickhouse2) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type UpdateDrainTypeSyslog2 string

const (
	UpdateDrainTypeSyslog2Syslog UpdateDrainTypeSyslog2 = "syslog"
)

func (e UpdateDrainTypeSyslog2) ToPointer() *UpdateDrainTypeSyslog2 {
	return &e
}
func (e *UpdateDrainTypeSyslog2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = UpdateDrainTypeSyslog2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeSyslog2: %v", v)
	}
}

type UpdateDrainDeliverySyslog2 struct {
	Type     UpdateDrainTypeSyslog2 `json:"type"`
	Endpoint string                 `json:"endpoint"`
	Secret   string                 `json:"secret"`
}

func (u UpdateDrainDeliverySyslog2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliverySyslog2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliverySyslog2) GetType() UpdateDrainTypeSyslog2 {
	if o == nil {
		return UpdateDrainTypeSyslog2("")
	}
	return o.Type
}

func (o *UpdateDrainDeliverySyslog2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliverySyslog2) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type UpdateDrainTypeOtlphttp2 string

const (
	UpdateDrainTypeOtlphttp2Otlphttp UpdateDrainTypeOtlphttp2 = "otlphttp"
)

func (e UpdateDrainTypeOtlphttp2) ToPointer() *UpdateDrainTypeOtlphttp2 {
	return &e
}
func (e *UpdateDrainTypeOtlphttp2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = UpdateDrainTypeOtlphttp2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeOtlphttp2: %v", v)
	}
}

type UpdateDrainEndpointResponse2 struct {
	Traces string `json:"traces"`
}

func (u UpdateDrainEndpointResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainEndpointResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainEndpointResponse2) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type UpdateDrainEncodingResponse4 string

const (
	UpdateDrainEncodingResponse4JSON  UpdateDrainEncodingResponse4 = "json"
	UpdateDrainEncodingResponse4Proto UpdateDrainEncodingResponse4 = "proto"
)

func (e UpdateDrainEncodingResponse4) ToPointer() *UpdateDrainEncodingResponse4 {
	return &e
}
func (e *UpdateDrainEncodingResponse4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = UpdateDrainEncodingResponse4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEncodingResponse4: %v", v)
	}
}

type UpdateDrainDeliveryOtlphttp2 struct {
	Type     UpdateDrainTypeOtlphttp2     `json:"type"`
	Endpoint UpdateDrainEndpointResponse2 `json:"endpoint"`
	Encoding UpdateDrainEncodingResponse4 `json:"encoding"`
	Headers  map[string]string            `json:"headers"`
	Secret   *string                      `json:"secret,omitempty"`
}

func (u UpdateDrainDeliveryOtlphttp2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryOtlphttp2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryOtlphttp2) GetType() UpdateDrainTypeOtlphttp2 {
	if o == nil {
		return UpdateDrainTypeOtlphttp2("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryOtlphttp2) GetEndpoint() UpdateDrainEndpointResponse2 {
	if o == nil {
		return UpdateDrainEndpointResponse2{}
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryOtlphttp2) GetEncoding() UpdateDrainEncodingResponse4 {
	if o == nil {
		return UpdateDrainEncodingResponse4("")
	}
	return o.Encoding
}

func (o *UpdateDrainDeliveryOtlphttp2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *UpdateDrainDeliveryOtlphttp2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateDrainTypeHTTP2 string

const (
	UpdateDrainTypeHTTP2HTTP UpdateDrainTypeHTTP2 = "http"
)

func (e UpdateDrainTypeHTTP2) ToPointer() *UpdateDrainTypeHTTP2 {
	return &e
}
func (e *UpdateDrainTypeHTTP2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = UpdateDrainTypeHTTP2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeHTTP2: %v", v)
	}
}

type UpdateDrainEncodingResponse3 string

const (
	UpdateDrainEncodingResponse3JSON   UpdateDrainEncodingResponse3 = "json"
	UpdateDrainEncodingResponse3Ndjson UpdateDrainEncodingResponse3 = "ndjson"
)

func (e UpdateDrainEncodingResponse3) ToPointer() *UpdateDrainEncodingResponse3 {
	return &e
}
func (e *UpdateDrainEncodingResponse3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = UpdateDrainEncodingResponse3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEncodingResponse3: %v", v)
	}
}

type UpdateDrainCompressionResponse2 string

const (
	UpdateDrainCompressionResponse2Gzip UpdateDrainCompressionResponse2 = "gzip"
	UpdateDrainCompressionResponse2None UpdateDrainCompressionResponse2 = "none"
)

func (e UpdateDrainCompressionResponse2) ToPointer() *UpdateDrainCompressionResponse2 {
	return &e
}
func (e *UpdateDrainCompressionResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = UpdateDrainCompressionResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainCompressionResponse2: %v", v)
	}
}

type UpdateDrainDeliveryHTTP2 struct {
	Type        UpdateDrainTypeHTTP2             `json:"type"`
	Endpoint    string                           `json:"endpoint"`
	Encoding    UpdateDrainEncodingResponse3     `json:"encoding"`
	Compression *UpdateDrainCompressionResponse2 `json:"compression,omitempty"`
	Headers     map[string]string                `json:"headers"`
	Secret      *string                          `json:"secret,omitempty"`
}

func (u UpdateDrainDeliveryHTTP2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryHTTP2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryHTTP2) GetType() UpdateDrainTypeHTTP2 {
	if o == nil {
		return UpdateDrainTypeHTTP2("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryHTTP2) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryHTTP2) GetEncoding() UpdateDrainEncodingResponse3 {
	if o == nil {
		return UpdateDrainEncodingResponse3("")
	}
	return o.Encoding
}

func (o *UpdateDrainDeliveryHTTP2) GetCompression() *UpdateDrainCompressionResponse2 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *UpdateDrainDeliveryHTTP2) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *UpdateDrainDeliveryHTTP2) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateDrainDeliveryResponseUnion2Type string

const (
	UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryHTTP2               UpdateDrainDeliveryResponseUnion2Type = "updateDrain_delivery_HTTP_2"
	UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryOtlphttp2           UpdateDrainDeliveryResponseUnion2Type = "updateDrain_delivery_Otlphttp_2"
	UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliverySyslog2             UpdateDrainDeliveryResponseUnion2Type = "updateDrain_delivery_Syslog_2"
	UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryClickhouse2         UpdateDrainDeliveryResponseUnion2Type = "updateDrain_delivery_Clickhouse_2"
	UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryVercelOtelTracesDb2 UpdateDrainDeliveryResponseUnion2Type = "updateDrain_delivery_VercelOtelTracesDb_2"
)

type UpdateDrainDeliveryResponseUnion2 struct {
	UpdateDrainDeliveryHTTP2               *UpdateDrainDeliveryHTTP2               `queryParam:"inline"`
	UpdateDrainDeliveryOtlphttp2           *UpdateDrainDeliveryOtlphttp2           `queryParam:"inline"`
	UpdateDrainDeliverySyslog2             *UpdateDrainDeliverySyslog2             `queryParam:"inline"`
	UpdateDrainDeliveryClickhouse2         *UpdateDrainDeliveryClickhouse2         `queryParam:"inline"`
	UpdateDrainDeliveryVercelOtelTracesDb2 *UpdateDrainDeliveryVercelOtelTracesDb2 `queryParam:"inline"`

	Type UpdateDrainDeliveryResponseUnion2Type
}

func CreateUpdateDrainDeliveryResponseUnion2UpdateDrainDeliveryHTTP2(updateDrainDeliveryHTTP2 UpdateDrainDeliveryHTTP2) UpdateDrainDeliveryResponseUnion2 {
	typ := UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryHTTP2

	return UpdateDrainDeliveryResponseUnion2{
		UpdateDrainDeliveryHTTP2: &updateDrainDeliveryHTTP2,
		Type:                     typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion2UpdateDrainDeliveryOtlphttp2(updateDrainDeliveryOtlphttp2 UpdateDrainDeliveryOtlphttp2) UpdateDrainDeliveryResponseUnion2 {
	typ := UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryOtlphttp2

	return UpdateDrainDeliveryResponseUnion2{
		UpdateDrainDeliveryOtlphttp2: &updateDrainDeliveryOtlphttp2,
		Type:                         typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion2UpdateDrainDeliverySyslog2(updateDrainDeliverySyslog2 UpdateDrainDeliverySyslog2) UpdateDrainDeliveryResponseUnion2 {
	typ := UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliverySyslog2

	return UpdateDrainDeliveryResponseUnion2{
		UpdateDrainDeliverySyslog2: &updateDrainDeliverySyslog2,
		Type:                       typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion2UpdateDrainDeliveryClickhouse2(updateDrainDeliveryClickhouse2 UpdateDrainDeliveryClickhouse2) UpdateDrainDeliveryResponseUnion2 {
	typ := UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryClickhouse2

	return UpdateDrainDeliveryResponseUnion2{
		UpdateDrainDeliveryClickhouse2: &updateDrainDeliveryClickhouse2,
		Type:                           typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion2UpdateDrainDeliveryVercelOtelTracesDb2(updateDrainDeliveryVercelOtelTracesDb2 UpdateDrainDeliveryVercelOtelTracesDb2) UpdateDrainDeliveryResponseUnion2 {
	typ := UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryVercelOtelTracesDb2

	return UpdateDrainDeliveryResponseUnion2{
		UpdateDrainDeliveryVercelOtelTracesDb2: &updateDrainDeliveryVercelOtelTracesDb2,
		Type:                                   typ,
	}
}

func (u *UpdateDrainDeliveryResponseUnion2) UnmarshalJSON(data []byte) error {

	var updateDrainDeliveryHTTP2 UpdateDrainDeliveryHTTP2 = UpdateDrainDeliveryHTTP2{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryHTTP2, "", true, nil); err == nil {
		u.UpdateDrainDeliveryHTTP2 = &updateDrainDeliveryHTTP2
		u.Type = UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryHTTP2
		return nil
	}

	var updateDrainDeliveryOtlphttp2 UpdateDrainDeliveryOtlphttp2 = UpdateDrainDeliveryOtlphttp2{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryOtlphttp2, "", true, nil); err == nil {
		u.UpdateDrainDeliveryOtlphttp2 = &updateDrainDeliveryOtlphttp2
		u.Type = UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryOtlphttp2
		return nil
	}

	var updateDrainDeliverySyslog2 UpdateDrainDeliverySyslog2 = UpdateDrainDeliverySyslog2{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliverySyslog2, "", true, nil); err == nil {
		u.UpdateDrainDeliverySyslog2 = &updateDrainDeliverySyslog2
		u.Type = UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliverySyslog2
		return nil
	}

	var updateDrainDeliveryClickhouse2 UpdateDrainDeliveryClickhouse2 = UpdateDrainDeliveryClickhouse2{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryClickhouse2, "", true, nil); err == nil {
		u.UpdateDrainDeliveryClickhouse2 = &updateDrainDeliveryClickhouse2
		u.Type = UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryClickhouse2
		return nil
	}

	var updateDrainDeliveryVercelOtelTracesDb2 UpdateDrainDeliveryVercelOtelTracesDb2 = UpdateDrainDeliveryVercelOtelTracesDb2{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryVercelOtelTracesDb2, "", true, nil); err == nil {
		u.UpdateDrainDeliveryVercelOtelTracesDb2 = &updateDrainDeliveryVercelOtelTracesDb2
		u.Type = UpdateDrainDeliveryResponseUnion2TypeUpdateDrainDeliveryVercelOtelTracesDb2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainDeliveryResponseUnion2", string(data))
}

func (u UpdateDrainDeliveryResponseUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainDeliveryHTTP2 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryHTTP2, "", true)
	}

	if u.UpdateDrainDeliveryOtlphttp2 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryOtlphttp2, "", true)
	}

	if u.UpdateDrainDeliverySyslog2 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliverySyslog2, "", true)
	}

	if u.UpdateDrainDeliveryClickhouse2 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryClickhouse2, "", true)
	}

	if u.UpdateDrainDeliveryVercelOtelTracesDb2 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryVercelOtelTracesDb2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainDeliveryResponseUnion2: all fields are null")
}

type UpdateDrainTypeHeadSampling2 string

const (
	UpdateDrainTypeHeadSampling2HeadSampling UpdateDrainTypeHeadSampling2 = "head_sampling"
)

func (e UpdateDrainTypeHeadSampling2) ToPointer() *UpdateDrainTypeHeadSampling2 {
	return &e
}
func (e *UpdateDrainTypeHeadSampling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = UpdateDrainTypeHeadSampling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeHeadSampling2: %v", v)
	}
}

type UpdateDrainEnvHeadSampling2 string

const (
	UpdateDrainEnvHeadSampling2Production UpdateDrainEnvHeadSampling2 = "production"
	UpdateDrainEnvHeadSampling2Preview    UpdateDrainEnvHeadSampling2 = "preview"
)

func (e UpdateDrainEnvHeadSampling2) ToPointer() *UpdateDrainEnvHeadSampling2 {
	return &e
}
func (e *UpdateDrainEnvHeadSampling2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = UpdateDrainEnvHeadSampling2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEnvHeadSampling2: %v", v)
	}
}

type UpdateDrainSamplingResponse2 struct {
	Type        UpdateDrainTypeHeadSampling2 `json:"type"`
	Rate        float64                      `json:"rate"`
	Env         *UpdateDrainEnvHeadSampling2 `json:"env,omitempty"`
	RequestPath *string                      `json:"requestPath,omitempty"`
}

func (u UpdateDrainSamplingResponse2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSamplingResponse2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSamplingResponse2) GetType() UpdateDrainTypeHeadSampling2 {
	if o == nil {
		return UpdateDrainTypeHeadSampling2("")
	}
	return o.Type
}

func (o *UpdateDrainSamplingResponse2) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *UpdateDrainSamplingResponse2) GetEnv() *UpdateDrainEnvHeadSampling2 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateDrainSamplingResponse2) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type UpdateDrainResponseBodyStatus2 string

const (
	UpdateDrainResponseBodyStatus2Enabled  UpdateDrainResponseBodyStatus2 = "enabled"
	UpdateDrainResponseBodyStatus2Disabled UpdateDrainResponseBodyStatus2 = "disabled"
	UpdateDrainResponseBodyStatus2Errored  UpdateDrainResponseBodyStatus2 = "errored"
)

func (e UpdateDrainResponseBodyStatus2) ToPointer() *UpdateDrainResponseBodyStatus2 {
	return &e
}
func (e *UpdateDrainResponseBodyStatus2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = UpdateDrainResponseBodyStatus2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainResponseBodyStatus2: %v", v)
	}
}

type UpdateDrainDisabledReason2 string

const (
	UpdateDrainDisabledReason2DisabledByOwner      UpdateDrainDisabledReason2 = "disabled-by-owner"
	UpdateDrainDisabledReason2FeatureNotAvailable  UpdateDrainDisabledReason2 = "feature-not-available"
	UpdateDrainDisabledReason2AccountPlanDowngrade UpdateDrainDisabledReason2 = "account-plan-downgrade"
	UpdateDrainDisabledReason2DisabledByAdmin      UpdateDrainDisabledReason2 = "disabled-by-admin"
)

func (e UpdateDrainDisabledReason2) ToPointer() *UpdateDrainDisabledReason2 {
	return &e
}
func (e *UpdateDrainDisabledReason2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = UpdateDrainDisabledReason2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainDisabledReason2: %v", v)
	}
}

type UpdateDrainKindIntegration2 string

const (
	UpdateDrainKindIntegration2Integration UpdateDrainKindIntegration2 = "integration"
)

func (e UpdateDrainKindIntegration2) ToPointer() *UpdateDrainKindIntegration2 {
	return &e
}
func (e *UpdateDrainKindIntegration2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = UpdateDrainKindIntegration2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainKindIntegration2: %v", v)
	}
}

type UpdateDrainSourceIntegration2 struct {
	Kind                       UpdateDrainKindIntegration2 `json:"kind"`
	ResourceID                 *string                     `json:"resourceId,omitempty"`
	ExternalResourceID         *string                     `json:"externalResourceId,omitempty"`
	IntegrationID              string                      `json:"integrationId"`
	IntegrationConfigurationID string                      `json:"integrationConfigurationId"`
}

func (u UpdateDrainSourceIntegration2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceIntegration2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceIntegration2) GetKind() UpdateDrainKindIntegration2 {
	if o == nil {
		return UpdateDrainKindIntegration2("")
	}
	return o.Kind
}

func (o *UpdateDrainSourceIntegration2) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *UpdateDrainSourceIntegration2) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *UpdateDrainSourceIntegration2) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateDrainSourceIntegration2) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type UpdateDrainKindSelfServed2 string

const (
	UpdateDrainKindSelfServed2SelfServed UpdateDrainKindSelfServed2 = "self-served"
)

func (e UpdateDrainKindSelfServed2) ToPointer() *UpdateDrainKindSelfServed2 {
	return &e
}
func (e *UpdateDrainKindSelfServed2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = UpdateDrainKindSelfServed2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainKindSelfServed2: %v", v)
	}
}

type UpdateDrainSourceSelfServed2 struct {
	Kind UpdateDrainKindSelfServed2 `json:"kind"`
}

func (u UpdateDrainSourceSelfServed2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceSelfServed2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceSelfServed2) GetKind() UpdateDrainKindSelfServed2 {
	if o == nil {
		return UpdateDrainKindSelfServed2("")
	}
	return o.Kind
}

type UpdateDrainResponseBodySourceUnion2Type string

const (
	UpdateDrainResponseBodySourceUnion2TypeUpdateDrainSourceSelfServed2  UpdateDrainResponseBodySourceUnion2Type = "updateDrain_source_SelfServed_2"
	UpdateDrainResponseBodySourceUnion2TypeUpdateDrainSourceIntegration2 UpdateDrainResponseBodySourceUnion2Type = "updateDrain_source_Integration_2"
)

type UpdateDrainResponseBodySourceUnion2 struct {
	UpdateDrainSourceSelfServed2  *UpdateDrainSourceSelfServed2  `queryParam:"inline"`
	UpdateDrainSourceIntegration2 *UpdateDrainSourceIntegration2 `queryParam:"inline"`

	Type UpdateDrainResponseBodySourceUnion2Type
}

func CreateUpdateDrainResponseBodySourceUnion2UpdateDrainSourceSelfServed2(updateDrainSourceSelfServed2 UpdateDrainSourceSelfServed2) UpdateDrainResponseBodySourceUnion2 {
	typ := UpdateDrainResponseBodySourceUnion2TypeUpdateDrainSourceSelfServed2

	return UpdateDrainResponseBodySourceUnion2{
		UpdateDrainSourceSelfServed2: &updateDrainSourceSelfServed2,
		Type:                         typ,
	}
}

func CreateUpdateDrainResponseBodySourceUnion2UpdateDrainSourceIntegration2(updateDrainSourceIntegration2 UpdateDrainSourceIntegration2) UpdateDrainResponseBodySourceUnion2 {
	typ := UpdateDrainResponseBodySourceUnion2TypeUpdateDrainSourceIntegration2

	return UpdateDrainResponseBodySourceUnion2{
		UpdateDrainSourceIntegration2: &updateDrainSourceIntegration2,
		Type:                          typ,
	}
}

func (u *UpdateDrainResponseBodySourceUnion2) UnmarshalJSON(data []byte) error {

	var updateDrainSourceIntegration2 UpdateDrainSourceIntegration2 = UpdateDrainSourceIntegration2{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceIntegration2, "", true, nil); err == nil {
		u.UpdateDrainSourceIntegration2 = &updateDrainSourceIntegration2
		u.Type = UpdateDrainResponseBodySourceUnion2TypeUpdateDrainSourceIntegration2
		return nil
	}

	var updateDrainSourceSelfServed2 UpdateDrainSourceSelfServed2 = UpdateDrainSourceSelfServed2{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceSelfServed2, "", true, nil); err == nil {
		u.UpdateDrainSourceSelfServed2 = &updateDrainSourceSelfServed2
		u.Type = UpdateDrainResponseBodySourceUnion2TypeUpdateDrainSourceSelfServed2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainResponseBodySourceUnion2", string(data))
}

func (u UpdateDrainResponseBodySourceUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainSourceSelfServed2 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceSelfServed2, "", true)
	}

	if u.UpdateDrainSourceIntegration2 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceIntegration2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainResponseBodySourceUnion2: all fields are null")
}

type UpdateDrainVersionV22 string

const (
	UpdateDrainVersionV22V2 UpdateDrainVersionV22 = "v2"
)

func (e UpdateDrainVersionV22) ToPointer() *UpdateDrainVersionV22 {
	return &e
}
func (e *UpdateDrainVersionV22) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = UpdateDrainVersionV22(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainVersionV22: %v", v)
	}
}

type UpdateDrainTypeOdata2 string

const (
	UpdateDrainTypeOdata2Odata UpdateDrainTypeOdata2 = "odata"
)

func (e UpdateDrainTypeOdata2) ToPointer() *UpdateDrainTypeOdata2 {
	return &e
}
func (e *UpdateDrainTypeOdata2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = UpdateDrainTypeOdata2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeOdata2: %v", v)
	}
}

type UpdateDrainFilterOdata2 struct {
	Type UpdateDrainTypeOdata2 `json:"type"`
	Text string                `json:"text"`
}

func (u UpdateDrainFilterOdata2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterOdata2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterOdata2) GetType() UpdateDrainTypeOdata2 {
	if o == nil {
		return UpdateDrainTypeOdata2("")
	}
	return o.Type
}

func (o *UpdateDrainFilterOdata2) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type UpdateDrainTypeBasic2 string

const (
	UpdateDrainTypeBasic2Basic UpdateDrainTypeBasic2 = "basic"
)

func (e UpdateDrainTypeBasic2) ToPointer() *UpdateDrainTypeBasic2 {
	return &e
}
func (e *UpdateDrainTypeBasic2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = UpdateDrainTypeBasic2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeBasic2: %v", v)
	}
}

type UpdateDrainFilterV2Project2 struct {
	Ids []string `json:"ids,omitempty"`
}

func (u UpdateDrainFilterV2Project2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2Project2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2Project2) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type UpdateDrainFilterV2Log2 struct {
	Sources []string `json:"sources,omitempty"`
}

func (u UpdateDrainFilterV2Log2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2Log2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2Log2) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type UpdateDrainFilterV2Deployment2 struct {
	Environments []string `json:"environments,omitempty"`
}

func (u UpdateDrainFilterV2Deployment2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2Deployment2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2Deployment2) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type UpdateDrainFilterBasic2 struct {
	Type       UpdateDrainTypeBasic2           `json:"type"`
	Project    *UpdateDrainFilterV2Project2    `json:"project,omitempty"`
	Log        *UpdateDrainFilterV2Log2        `json:"log,omitempty"`
	Deployment *UpdateDrainFilterV2Deployment2 `json:"deployment,omitempty"`
}

func (u UpdateDrainFilterBasic2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterBasic2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterBasic2) GetType() UpdateDrainTypeBasic2 {
	if o == nil {
		return UpdateDrainTypeBasic2("")
	}
	return o.Type
}

func (o *UpdateDrainFilterBasic2) GetProject() *UpdateDrainFilterV2Project2 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateDrainFilterBasic2) GetLog() *UpdateDrainFilterV2Log2 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *UpdateDrainFilterBasic2) GetDeployment() *UpdateDrainFilterV2Deployment2 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type UpdateDrainFilterResponseUnion2Type string

const (
	UpdateDrainFilterResponseUnion2TypeUpdateDrainFilterBasic2 UpdateDrainFilterResponseUnion2Type = "updateDrain_filter_Basic_2"
	UpdateDrainFilterResponseUnion2TypeUpdateDrainFilterOdata2 UpdateDrainFilterResponseUnion2Type = "updateDrain_filter_Odata_2"
)

type UpdateDrainFilterResponseUnion2 struct {
	UpdateDrainFilterBasic2 *UpdateDrainFilterBasic2 `queryParam:"inline"`
	UpdateDrainFilterOdata2 *UpdateDrainFilterOdata2 `queryParam:"inline"`

	Type UpdateDrainFilterResponseUnion2Type
}

func CreateUpdateDrainFilterResponseUnion2UpdateDrainFilterBasic2(updateDrainFilterBasic2 UpdateDrainFilterBasic2) UpdateDrainFilterResponseUnion2 {
	typ := UpdateDrainFilterResponseUnion2TypeUpdateDrainFilterBasic2

	return UpdateDrainFilterResponseUnion2{
		UpdateDrainFilterBasic2: &updateDrainFilterBasic2,
		Type:                    typ,
	}
}

func CreateUpdateDrainFilterResponseUnion2UpdateDrainFilterOdata2(updateDrainFilterOdata2 UpdateDrainFilterOdata2) UpdateDrainFilterResponseUnion2 {
	typ := UpdateDrainFilterResponseUnion2TypeUpdateDrainFilterOdata2

	return UpdateDrainFilterResponseUnion2{
		UpdateDrainFilterOdata2: &updateDrainFilterOdata2,
		Type:                    typ,
	}
}

func (u *UpdateDrainFilterResponseUnion2) UnmarshalJSON(data []byte) error {

	var updateDrainFilterOdata2 UpdateDrainFilterOdata2 = UpdateDrainFilterOdata2{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterOdata2, "", true, nil); err == nil {
		u.UpdateDrainFilterOdata2 = &updateDrainFilterOdata2
		u.Type = UpdateDrainFilterResponseUnion2TypeUpdateDrainFilterOdata2
		return nil
	}

	var updateDrainFilterBasic2 UpdateDrainFilterBasic2 = UpdateDrainFilterBasic2{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterBasic2, "", true, nil); err == nil {
		u.UpdateDrainFilterBasic2 = &updateDrainFilterBasic2
		u.Type = UpdateDrainFilterResponseUnion2TypeUpdateDrainFilterBasic2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainFilterResponseUnion2", string(data))
}

func (u UpdateDrainFilterResponseUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainFilterBasic2 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterBasic2, "", true)
	}

	if u.UpdateDrainFilterOdata2 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterOdata2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainFilterResponseUnion2: all fields are null")
}

type UpdateDrainFilterV2V22 struct {
	Version UpdateDrainVersionV22           `json:"version"`
	Filter  UpdateDrainFilterResponseUnion2 `json:"filter"`
}

func (u UpdateDrainFilterV2V22) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2V22) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2V22) GetVersion() UpdateDrainVersionV22 {
	if o == nil {
		return UpdateDrainVersionV22("")
	}
	return o.Version
}

func (o *UpdateDrainFilterV2V22) GetFilter() UpdateDrainFilterResponseUnion2 {
	if o == nil {
		return UpdateDrainFilterResponseUnion2{}
	}
	return o.Filter
}

type UpdateDrainVersionV12 string

const (
	UpdateDrainVersionV12V1 UpdateDrainVersionV12 = "v1"
)

func (e UpdateDrainVersionV12) ToPointer() *UpdateDrainVersionV12 {
	return &e
}
func (e *UpdateDrainVersionV12) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = UpdateDrainVersionV12(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainVersionV12: %v", v)
	}
}

type UpdateDrainFilterV2V12 struct {
	Version UpdateDrainVersionV12 `json:"version"`
}

func (u UpdateDrainFilterV2V12) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2V12) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2V12) GetVersion() UpdateDrainVersionV12 {
	if o == nil {
		return UpdateDrainVersionV12("")
	}
	return o.Version
}

type UpdateDrainFilterV2Union2Type string

const (
	UpdateDrainFilterV2Union2TypeUpdateDrainFilterV2V12 UpdateDrainFilterV2Union2Type = "updateDrain_filterV2_V1_2"
	UpdateDrainFilterV2Union2TypeUpdateDrainFilterV2V22 UpdateDrainFilterV2Union2Type = "updateDrain_filterV2_V2_2"
)

type UpdateDrainFilterV2Union2 struct {
	UpdateDrainFilterV2V12 *UpdateDrainFilterV2V12 `queryParam:"inline"`
	UpdateDrainFilterV2V22 *UpdateDrainFilterV2V22 `queryParam:"inline"`

	Type UpdateDrainFilterV2Union2Type
}

func CreateUpdateDrainFilterV2Union2UpdateDrainFilterV2V12(updateDrainFilterV2V12 UpdateDrainFilterV2V12) UpdateDrainFilterV2Union2 {
	typ := UpdateDrainFilterV2Union2TypeUpdateDrainFilterV2V12

	return UpdateDrainFilterV2Union2{
		UpdateDrainFilterV2V12: &updateDrainFilterV2V12,
		Type:                   typ,
	}
}

func CreateUpdateDrainFilterV2Union2UpdateDrainFilterV2V22(updateDrainFilterV2V22 UpdateDrainFilterV2V22) UpdateDrainFilterV2Union2 {
	typ := UpdateDrainFilterV2Union2TypeUpdateDrainFilterV2V22

	return UpdateDrainFilterV2Union2{
		UpdateDrainFilterV2V22: &updateDrainFilterV2V22,
		Type:                   typ,
	}
}

func (u *UpdateDrainFilterV2Union2) UnmarshalJSON(data []byte) error {

	var updateDrainFilterV2V22 UpdateDrainFilterV2V22 = UpdateDrainFilterV2V22{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterV2V22, "", true, nil); err == nil {
		u.UpdateDrainFilterV2V22 = &updateDrainFilterV2V22
		u.Type = UpdateDrainFilterV2Union2TypeUpdateDrainFilterV2V22
		return nil
	}

	var updateDrainFilterV2V12 UpdateDrainFilterV2V12 = UpdateDrainFilterV2V12{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterV2V12, "", true, nil); err == nil {
		u.UpdateDrainFilterV2V12 = &updateDrainFilterV2V12
		u.Type = UpdateDrainFilterV2Union2TypeUpdateDrainFilterV2V12
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainFilterV2Union2", string(data))
}

func (u UpdateDrainFilterV2Union2) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainFilterV2V12 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterV2V12, "", true)
	}

	if u.UpdateDrainFilterV2V22 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterV2V22, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainFilterV2Union2: all fields are null")
}

type UpdateDrainFramework string

const (
	UpdateDrainFrameworkBlitzjs        UpdateDrainFramework = "blitzjs"
	UpdateDrainFrameworkNextjs         UpdateDrainFramework = "nextjs"
	UpdateDrainFrameworkGatsby         UpdateDrainFramework = "gatsby"
	UpdateDrainFrameworkRemix          UpdateDrainFramework = "remix"
	UpdateDrainFrameworkReactRouter    UpdateDrainFramework = "react-router"
	UpdateDrainFrameworkAstro          UpdateDrainFramework = "astro"
	UpdateDrainFrameworkHexo           UpdateDrainFramework = "hexo"
	UpdateDrainFrameworkEleventy       UpdateDrainFramework = "eleventy"
	UpdateDrainFrameworkDocusaurus2    UpdateDrainFramework = "docusaurus-2"
	UpdateDrainFrameworkDocusaurus     UpdateDrainFramework = "docusaurus"
	UpdateDrainFrameworkPreact         UpdateDrainFramework = "preact"
	UpdateDrainFrameworkSolidstart1    UpdateDrainFramework = "solidstart-1"
	UpdateDrainFrameworkSolidstart     UpdateDrainFramework = "solidstart"
	UpdateDrainFrameworkDojo           UpdateDrainFramework = "dojo"
	UpdateDrainFrameworkEmber          UpdateDrainFramework = "ember"
	UpdateDrainFrameworkVue            UpdateDrainFramework = "vue"
	UpdateDrainFrameworkScully         UpdateDrainFramework = "scully"
	UpdateDrainFrameworkIonicAngular   UpdateDrainFramework = "ionic-angular"
	UpdateDrainFrameworkAngular        UpdateDrainFramework = "angular"
	UpdateDrainFrameworkPolymer        UpdateDrainFramework = "polymer"
	UpdateDrainFrameworkSvelte         UpdateDrainFramework = "svelte"
	UpdateDrainFrameworkSveltekit      UpdateDrainFramework = "sveltekit"
	UpdateDrainFrameworkSveltekit1     UpdateDrainFramework = "sveltekit-1"
	UpdateDrainFrameworkIonicReact     UpdateDrainFramework = "ionic-react"
	UpdateDrainFrameworkCreateReactApp UpdateDrainFramework = "create-react-app"
	UpdateDrainFrameworkGridsome       UpdateDrainFramework = "gridsome"
	UpdateDrainFrameworkUmijs          UpdateDrainFramework = "umijs"
	UpdateDrainFrameworkSapper         UpdateDrainFramework = "sapper"
	UpdateDrainFrameworkSaber          UpdateDrainFramework = "saber"
	UpdateDrainFrameworkStencil        UpdateDrainFramework = "stencil"
	UpdateDrainFrameworkNuxtjs         UpdateDrainFramework = "nuxtjs"
	UpdateDrainFrameworkRedwoodjs      UpdateDrainFramework = "redwoodjs"
	UpdateDrainFrameworkHugo           UpdateDrainFramework = "hugo"
	UpdateDrainFrameworkJekyll         UpdateDrainFramework = "jekyll"
	UpdateDrainFrameworkBrunch         UpdateDrainFramework = "brunch"
	UpdateDrainFrameworkMiddleman      UpdateDrainFramework = "middleman"
	UpdateDrainFrameworkZola           UpdateDrainFramework = "zola"
	UpdateDrainFrameworkHydrogen       UpdateDrainFramework = "hydrogen"
	UpdateDrainFrameworkVite           UpdateDrainFramework = "vite"
	UpdateDrainFrameworkVitepress      UpdateDrainFramework = "vitepress"
	UpdateDrainFrameworkVuepress       UpdateDrainFramework = "vuepress"
	UpdateDrainFrameworkParcel         UpdateDrainFramework = "parcel"
	UpdateDrainFrameworkFastapi        UpdateDrainFramework = "fastapi"
	UpdateDrainFrameworkFlask          UpdateDrainFramework = "flask"
	UpdateDrainFrameworkFasthtml       UpdateDrainFramework = "fasthtml"
	UpdateDrainFrameworkSanityV3       UpdateDrainFramework = "sanity-v3"
	UpdateDrainFrameworkSanity         UpdateDrainFramework = "sanity"
	UpdateDrainFrameworkStorybook      UpdateDrainFramework = "storybook"
	UpdateDrainFrameworkNitro          UpdateDrainFramework = "nitro"
	UpdateDrainFrameworkHono           UpdateDrainFramework = "hono"
	UpdateDrainFrameworkExpress        UpdateDrainFramework = "express"
	UpdateDrainFrameworkH3             UpdateDrainFramework = "h3"
	UpdateDrainFrameworkNestjs         UpdateDrainFramework = "nestjs"
	UpdateDrainFrameworkXmcp           UpdateDrainFramework = "xmcp"
)

func (e UpdateDrainFramework) ToPointer() *UpdateDrainFramework {
	return &e
}
func (e *UpdateDrainFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fastapi":
		fallthrough
	case "flask":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		fallthrough
	case "nitro":
		fallthrough
	case "hono":
		fallthrough
	case "express":
		fallthrough
	case "h3":
		fallthrough
	case "nestjs":
		fallthrough
	case "xmcp":
		*e = UpdateDrainFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainFramework: %v", v)
	}
}

type UpdateDrainProjectsMetadatum struct {
	ID               string                `json:"id"`
	Name             string                `json:"name"`
	Framework        *UpdateDrainFramework `json:"framework,omitempty"`
	LatestDeployment *string               `json:"latestDeployment,omitempty"`
}

func (u UpdateDrainProjectsMetadatum) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainProjectsMetadatum) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"id", "name"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainProjectsMetadatum) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateDrainProjectsMetadatum) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateDrainProjectsMetadatum) GetFramework() *UpdateDrainFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateDrainProjectsMetadatum) GetLatestDeployment() *string {
	if o == nil {
		return nil
	}
	return o.LatestDeployment
}

type UpdateDrainResponseBody2 struct {
	ID                          string                              `json:"id"`
	OwnerID                     string                              `json:"ownerId"`
	Name                        string                              `json:"name"`
	CreatedAt                   float64                             `json:"createdAt"`
	CreatedFrom                 *UpdateDrainCreatedFrom2            `json:"createdFrom,omitempty"`
	UpdatedAt                   float64                             `json:"updatedAt"`
	ProjectIds                  []string                            `json:"projectIds,omitempty"`
	Schemas                     *UpdateDrainSchemasResponse2        `json:"schemas,omitempty"`
	Delivery                    *UpdateDrainDeliveryResponseUnion2  `json:"delivery,omitempty"`
	Sampling                    []UpdateDrainSamplingResponse2      `json:"sampling,omitempty"`
	TeamID                      *string                             `json:"teamId,omitempty"`
	Status                      *UpdateDrainResponseBodyStatus2     `json:"status,omitempty"`
	DisabledAt                  *float64                            `json:"disabledAt,omitempty"`
	DisabledReason              *UpdateDrainDisabledReason2         `json:"disabledReason,omitempty"`
	DisabledBy                  *string                             `json:"disabledBy,omitempty"`
	FirstErrorTimestamp         *float64                            `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID             *string                             `json:"configurationId,omitempty"`
	ClientID                    *string                             `json:"clientId,omitempty"`
	Source                      UpdateDrainResponseBodySourceUnion2 `json:"source"`
	Filter                      *string                             `json:"filter,omitempty"`
	FilterV2                    *UpdateDrainFilterV2Union2          `json:"filterV2,omitempty"`
	IntegrationIcon             *string                             `json:"integrationIcon,omitempty"`
	IntegrationConfigurationURI *string                             `json:"integrationConfigurationUri,omitempty"`
	IntegrationWebsite          *string                             `json:"integrationWebsite,omitempty"`
	ProjectsMetadata            []UpdateDrainProjectsMetadatum      `json:"projectsMetadata,omitempty"`
}

func (u UpdateDrainResponseBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainResponseBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainResponseBody2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateDrainResponseBody2) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateDrainResponseBody2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateDrainResponseBody2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateDrainResponseBody2) GetCreatedFrom() *UpdateDrainCreatedFrom2 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *UpdateDrainResponseBody2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateDrainResponseBody2) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *UpdateDrainResponseBody2) GetSchemas() *UpdateDrainSchemasResponse2 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *UpdateDrainResponseBody2) GetDelivery() *UpdateDrainDeliveryResponseUnion2 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *UpdateDrainResponseBody2) GetSampling() []UpdateDrainSamplingResponse2 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *UpdateDrainResponseBody2) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateDrainResponseBody2) GetStatus() *UpdateDrainResponseBodyStatus2 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateDrainResponseBody2) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateDrainResponseBody2) GetDisabledReason() *UpdateDrainDisabledReason2 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *UpdateDrainResponseBody2) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *UpdateDrainResponseBody2) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *UpdateDrainResponseBody2) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateDrainResponseBody2) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *UpdateDrainResponseBody2) GetSource() UpdateDrainResponseBodySourceUnion2 {
	if o == nil {
		return UpdateDrainResponseBodySourceUnion2{}
	}
	return o.Source
}

func (o *UpdateDrainResponseBody2) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *UpdateDrainResponseBody2) GetFilterV2() *UpdateDrainFilterV2Union2 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

func (o *UpdateDrainResponseBody2) GetIntegrationIcon() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationIcon
}

func (o *UpdateDrainResponseBody2) GetIntegrationConfigurationURI() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationURI
}

func (o *UpdateDrainResponseBody2) GetIntegrationWebsite() *string {
	if o == nil {
		return nil
	}
	return o.IntegrationWebsite
}

func (o *UpdateDrainResponseBody2) GetProjectsMetadata() []UpdateDrainProjectsMetadatum {
	if o == nil {
		return nil
	}
	return o.ProjectsMetadata
}

type UpdateDrainCreatedFrom1 string

const (
	UpdateDrainCreatedFrom1SelfServed  UpdateDrainCreatedFrom1 = "self-served"
	UpdateDrainCreatedFrom1Integration UpdateDrainCreatedFrom1 = "integration"
)

func (e UpdateDrainCreatedFrom1) ToPointer() *UpdateDrainCreatedFrom1 {
	return &e
}
func (e *UpdateDrainCreatedFrom1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		fallthrough
	case "integration":
		*e = UpdateDrainCreatedFrom1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainCreatedFrom1: %v", v)
	}
}

type UpdateDrainSchemasLog1 struct {
}

func (u UpdateDrainSchemasLog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSchemasLog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainTrace1 struct {
}

func (u UpdateDrainTrace1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainTrace1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainAnalytics1 struct {
}

func (u UpdateDrainAnalytics1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainAnalytics1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainSpeedInsights1 struct {
}

func (u UpdateDrainSpeedInsights1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSpeedInsights1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

type UpdateDrainSchemasResponse1 struct {
	Log           *UpdateDrainSchemasLog1    `json:"log,omitempty"`
	Trace         *UpdateDrainTrace1         `json:"trace,omitempty"`
	Analytics     *UpdateDrainAnalytics1     `json:"analytics,omitempty"`
	SpeedInsights *UpdateDrainSpeedInsights1 `json:"speed_insights,omitempty"`
}

func (u UpdateDrainSchemasResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSchemasResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSchemasResponse1) GetLog() *UpdateDrainSchemasLog1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *UpdateDrainSchemasResponse1) GetTrace() *UpdateDrainTrace1 {
	if o == nil {
		return nil
	}
	return o.Trace
}

func (o *UpdateDrainSchemasResponse1) GetAnalytics() *UpdateDrainAnalytics1 {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateDrainSchemasResponse1) GetSpeedInsights() *UpdateDrainSpeedInsights1 {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

type UpdateDrainTypeInternal1 string

const (
	UpdateDrainTypeInternal1Internal UpdateDrainTypeInternal1 = "internal"
)

func (e UpdateDrainTypeInternal1) ToPointer() *UpdateDrainTypeInternal1 {
	return &e
}
func (e *UpdateDrainTypeInternal1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "internal":
		*e = UpdateDrainTypeInternal1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeInternal1: %v", v)
	}
}

type UpdateDrainTarget1 string

const (
	UpdateDrainTarget1VercelOtelTracesDb UpdateDrainTarget1 = "vercel-otel-traces-db"
)

func (e UpdateDrainTarget1) ToPointer() *UpdateDrainTarget1 {
	return &e
}
func (e *UpdateDrainTarget1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "vercel-otel-traces-db":
		*e = UpdateDrainTarget1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTarget1: %v", v)
	}
}

type UpdateDrainDeliveryVercelOtelTracesDb1 struct {
	Type   UpdateDrainTypeInternal1 `json:"type"`
	Target UpdateDrainTarget1       `json:"target"`
}

func (u UpdateDrainDeliveryVercelOtelTracesDb1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryVercelOtelTracesDb1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "target"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryVercelOtelTracesDb1) GetType() UpdateDrainTypeInternal1 {
	if o == nil {
		return UpdateDrainTypeInternal1("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryVercelOtelTracesDb1) GetTarget() UpdateDrainTarget1 {
	if o == nil {
		return UpdateDrainTarget1("")
	}
	return o.Target
}

type UpdateDrainTypeClickhouse1 string

const (
	UpdateDrainTypeClickhouse1Clickhouse UpdateDrainTypeClickhouse1 = "clickhouse"
)

func (e UpdateDrainTypeClickhouse1) ToPointer() *UpdateDrainTypeClickhouse1 {
	return &e
}
func (e *UpdateDrainTypeClickhouse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "clickhouse":
		*e = UpdateDrainTypeClickhouse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeClickhouse1: %v", v)
	}
}

type UpdateDrainDeliveryClickhouse1 struct {
	Type     UpdateDrainTypeClickhouse1 `json:"type"`
	Endpoint string                     `json:"endpoint"`
	Table    string                     `json:"table"`
}

func (u UpdateDrainDeliveryClickhouse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryClickhouse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "table"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryClickhouse1) GetType() UpdateDrainTypeClickhouse1 {
	if o == nil {
		return UpdateDrainTypeClickhouse1("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryClickhouse1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryClickhouse1) GetTable() string {
	if o == nil {
		return ""
	}
	return o.Table
}

type UpdateDrainTypeSyslog1 string

const (
	UpdateDrainTypeSyslog1Syslog UpdateDrainTypeSyslog1 = "syslog"
)

func (e UpdateDrainTypeSyslog1) ToPointer() *UpdateDrainTypeSyslog1 {
	return &e
}
func (e *UpdateDrainTypeSyslog1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "syslog":
		*e = UpdateDrainTypeSyslog1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeSyslog1: %v", v)
	}
}

type UpdateDrainDeliverySyslog1 struct {
	Type     UpdateDrainTypeSyslog1 `json:"type"`
	Endpoint string                 `json:"endpoint"`
	Secret   string                 `json:"secret"`
}

func (u UpdateDrainDeliverySyslog1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliverySyslog1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "secret"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliverySyslog1) GetType() UpdateDrainTypeSyslog1 {
	if o == nil {
		return UpdateDrainTypeSyslog1("")
	}
	return o.Type
}

func (o *UpdateDrainDeliverySyslog1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliverySyslog1) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

type UpdateDrainTypeOtlphttp1 string

const (
	UpdateDrainTypeOtlphttp1Otlphttp UpdateDrainTypeOtlphttp1 = "otlphttp"
)

func (e UpdateDrainTypeOtlphttp1) ToPointer() *UpdateDrainTypeOtlphttp1 {
	return &e
}
func (e *UpdateDrainTypeOtlphttp1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "otlphttp":
		*e = UpdateDrainTypeOtlphttp1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeOtlphttp1: %v", v)
	}
}

type UpdateDrainEndpointResponse1 struct {
	Traces string `json:"traces"`
}

func (u UpdateDrainEndpointResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainEndpointResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"traces"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainEndpointResponse1) GetTraces() string {
	if o == nil {
		return ""
	}
	return o.Traces
}

type UpdateDrainEncodingResponse2 string

const (
	UpdateDrainEncodingResponse2JSON  UpdateDrainEncodingResponse2 = "json"
	UpdateDrainEncodingResponse2Proto UpdateDrainEncodingResponse2 = "proto"
)

func (e UpdateDrainEncodingResponse2) ToPointer() *UpdateDrainEncodingResponse2 {
	return &e
}
func (e *UpdateDrainEncodingResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "proto":
		*e = UpdateDrainEncodingResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEncodingResponse2: %v", v)
	}
}

type UpdateDrainDeliveryOtlphttp1 struct {
	Type     UpdateDrainTypeOtlphttp1     `json:"type"`
	Endpoint UpdateDrainEndpointResponse1 `json:"endpoint"`
	Encoding UpdateDrainEncodingResponse2 `json:"encoding"`
	Headers  map[string]string            `json:"headers"`
	Secret   *string                      `json:"secret,omitempty"`
}

func (u UpdateDrainDeliveryOtlphttp1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryOtlphttp1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryOtlphttp1) GetType() UpdateDrainTypeOtlphttp1 {
	if o == nil {
		return UpdateDrainTypeOtlphttp1("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryOtlphttp1) GetEndpoint() UpdateDrainEndpointResponse1 {
	if o == nil {
		return UpdateDrainEndpointResponse1{}
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryOtlphttp1) GetEncoding() UpdateDrainEncodingResponse2 {
	if o == nil {
		return UpdateDrainEncodingResponse2("")
	}
	return o.Encoding
}

func (o *UpdateDrainDeliveryOtlphttp1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *UpdateDrainDeliveryOtlphttp1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateDrainTypeHTTP1 string

const (
	UpdateDrainTypeHTTP1HTTP UpdateDrainTypeHTTP1 = "http"
)

func (e UpdateDrainTypeHTTP1) ToPointer() *UpdateDrainTypeHTTP1 {
	return &e
}
func (e *UpdateDrainTypeHTTP1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "http":
		*e = UpdateDrainTypeHTTP1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeHTTP1: %v", v)
	}
}

type UpdateDrainEncodingResponse1 string

const (
	UpdateDrainEncodingResponse1JSON   UpdateDrainEncodingResponse1 = "json"
	UpdateDrainEncodingResponse1Ndjson UpdateDrainEncodingResponse1 = "ndjson"
)

func (e UpdateDrainEncodingResponse1) ToPointer() *UpdateDrainEncodingResponse1 {
	return &e
}
func (e *UpdateDrainEncodingResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "json":
		fallthrough
	case "ndjson":
		*e = UpdateDrainEncodingResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEncodingResponse1: %v", v)
	}
}

type UpdateDrainCompressionResponse1 string

const (
	UpdateDrainCompressionResponse1Gzip UpdateDrainCompressionResponse1 = "gzip"
	UpdateDrainCompressionResponse1None UpdateDrainCompressionResponse1 = "none"
)

func (e UpdateDrainCompressionResponse1) ToPointer() *UpdateDrainCompressionResponse1 {
	return &e
}
func (e *UpdateDrainCompressionResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gzip":
		fallthrough
	case "none":
		*e = UpdateDrainCompressionResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainCompressionResponse1: %v", v)
	}
}

type UpdateDrainDeliveryHTTP1 struct {
	Type        UpdateDrainTypeHTTP1             `json:"type"`
	Endpoint    string                           `json:"endpoint"`
	Encoding    UpdateDrainEncodingResponse1     `json:"encoding"`
	Compression *UpdateDrainCompressionResponse1 `json:"compression,omitempty"`
	Headers     map[string]string                `json:"headers"`
	Secret      *string                          `json:"secret,omitempty"`
}

func (u UpdateDrainDeliveryHTTP1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainDeliveryHTTP1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "endpoint", "encoding", "headers"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainDeliveryHTTP1) GetType() UpdateDrainTypeHTTP1 {
	if o == nil {
		return UpdateDrainTypeHTTP1("")
	}
	return o.Type
}

func (o *UpdateDrainDeliveryHTTP1) GetEndpoint() string {
	if o == nil {
		return ""
	}
	return o.Endpoint
}

func (o *UpdateDrainDeliveryHTTP1) GetEncoding() UpdateDrainEncodingResponse1 {
	if o == nil {
		return UpdateDrainEncodingResponse1("")
	}
	return o.Encoding
}

func (o *UpdateDrainDeliveryHTTP1) GetCompression() *UpdateDrainCompressionResponse1 {
	if o == nil {
		return nil
	}
	return o.Compression
}

func (o *UpdateDrainDeliveryHTTP1) GetHeaders() map[string]string {
	if o == nil {
		return map[string]string{}
	}
	return o.Headers
}

func (o *UpdateDrainDeliveryHTTP1) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateDrainDeliveryResponseUnion1Type string

const (
	UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryHTTP1               UpdateDrainDeliveryResponseUnion1Type = "updateDrain_delivery_HTTP_1"
	UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryOtlphttp1           UpdateDrainDeliveryResponseUnion1Type = "updateDrain_delivery_Otlphttp_1"
	UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliverySyslog1             UpdateDrainDeliveryResponseUnion1Type = "updateDrain_delivery_Syslog_1"
	UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryClickhouse1         UpdateDrainDeliveryResponseUnion1Type = "updateDrain_delivery_Clickhouse_1"
	UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryVercelOtelTracesDb1 UpdateDrainDeliveryResponseUnion1Type = "updateDrain_delivery_VercelOtelTracesDb_1"
)

type UpdateDrainDeliveryResponseUnion1 struct {
	UpdateDrainDeliveryHTTP1               *UpdateDrainDeliveryHTTP1               `queryParam:"inline"`
	UpdateDrainDeliveryOtlphttp1           *UpdateDrainDeliveryOtlphttp1           `queryParam:"inline"`
	UpdateDrainDeliverySyslog1             *UpdateDrainDeliverySyslog1             `queryParam:"inline"`
	UpdateDrainDeliveryClickhouse1         *UpdateDrainDeliveryClickhouse1         `queryParam:"inline"`
	UpdateDrainDeliveryVercelOtelTracesDb1 *UpdateDrainDeliveryVercelOtelTracesDb1 `queryParam:"inline"`

	Type UpdateDrainDeliveryResponseUnion1Type
}

func CreateUpdateDrainDeliveryResponseUnion1UpdateDrainDeliveryHTTP1(updateDrainDeliveryHTTP1 UpdateDrainDeliveryHTTP1) UpdateDrainDeliveryResponseUnion1 {
	typ := UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryHTTP1

	return UpdateDrainDeliveryResponseUnion1{
		UpdateDrainDeliveryHTTP1: &updateDrainDeliveryHTTP1,
		Type:                     typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion1UpdateDrainDeliveryOtlphttp1(updateDrainDeliveryOtlphttp1 UpdateDrainDeliveryOtlphttp1) UpdateDrainDeliveryResponseUnion1 {
	typ := UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryOtlphttp1

	return UpdateDrainDeliveryResponseUnion1{
		UpdateDrainDeliveryOtlphttp1: &updateDrainDeliveryOtlphttp1,
		Type:                         typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion1UpdateDrainDeliverySyslog1(updateDrainDeliverySyslog1 UpdateDrainDeliverySyslog1) UpdateDrainDeliveryResponseUnion1 {
	typ := UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliverySyslog1

	return UpdateDrainDeliveryResponseUnion1{
		UpdateDrainDeliverySyslog1: &updateDrainDeliverySyslog1,
		Type:                       typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion1UpdateDrainDeliveryClickhouse1(updateDrainDeliveryClickhouse1 UpdateDrainDeliveryClickhouse1) UpdateDrainDeliveryResponseUnion1 {
	typ := UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryClickhouse1

	return UpdateDrainDeliveryResponseUnion1{
		UpdateDrainDeliveryClickhouse1: &updateDrainDeliveryClickhouse1,
		Type:                           typ,
	}
}

func CreateUpdateDrainDeliveryResponseUnion1UpdateDrainDeliveryVercelOtelTracesDb1(updateDrainDeliveryVercelOtelTracesDb1 UpdateDrainDeliveryVercelOtelTracesDb1) UpdateDrainDeliveryResponseUnion1 {
	typ := UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryVercelOtelTracesDb1

	return UpdateDrainDeliveryResponseUnion1{
		UpdateDrainDeliveryVercelOtelTracesDb1: &updateDrainDeliveryVercelOtelTracesDb1,
		Type:                                   typ,
	}
}

func (u *UpdateDrainDeliveryResponseUnion1) UnmarshalJSON(data []byte) error {

	var updateDrainDeliveryHTTP1 UpdateDrainDeliveryHTTP1 = UpdateDrainDeliveryHTTP1{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryHTTP1, "", true, nil); err == nil {
		u.UpdateDrainDeliveryHTTP1 = &updateDrainDeliveryHTTP1
		u.Type = UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryHTTP1
		return nil
	}

	var updateDrainDeliveryOtlphttp1 UpdateDrainDeliveryOtlphttp1 = UpdateDrainDeliveryOtlphttp1{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryOtlphttp1, "", true, nil); err == nil {
		u.UpdateDrainDeliveryOtlphttp1 = &updateDrainDeliveryOtlphttp1
		u.Type = UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryOtlphttp1
		return nil
	}

	var updateDrainDeliverySyslog1 UpdateDrainDeliverySyslog1 = UpdateDrainDeliverySyslog1{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliverySyslog1, "", true, nil); err == nil {
		u.UpdateDrainDeliverySyslog1 = &updateDrainDeliverySyslog1
		u.Type = UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliverySyslog1
		return nil
	}

	var updateDrainDeliveryClickhouse1 UpdateDrainDeliveryClickhouse1 = UpdateDrainDeliveryClickhouse1{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryClickhouse1, "", true, nil); err == nil {
		u.UpdateDrainDeliveryClickhouse1 = &updateDrainDeliveryClickhouse1
		u.Type = UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryClickhouse1
		return nil
	}

	var updateDrainDeliveryVercelOtelTracesDb1 UpdateDrainDeliveryVercelOtelTracesDb1 = UpdateDrainDeliveryVercelOtelTracesDb1{}
	if err := utils.UnmarshalJSON(data, &updateDrainDeliveryVercelOtelTracesDb1, "", true, nil); err == nil {
		u.UpdateDrainDeliveryVercelOtelTracesDb1 = &updateDrainDeliveryVercelOtelTracesDb1
		u.Type = UpdateDrainDeliveryResponseUnion1TypeUpdateDrainDeliveryVercelOtelTracesDb1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainDeliveryResponseUnion1", string(data))
}

func (u UpdateDrainDeliveryResponseUnion1) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainDeliveryHTTP1 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryHTTP1, "", true)
	}

	if u.UpdateDrainDeliveryOtlphttp1 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryOtlphttp1, "", true)
	}

	if u.UpdateDrainDeliverySyslog1 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliverySyslog1, "", true)
	}

	if u.UpdateDrainDeliveryClickhouse1 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryClickhouse1, "", true)
	}

	if u.UpdateDrainDeliveryVercelOtelTracesDb1 != nil {
		return utils.MarshalJSON(u.UpdateDrainDeliveryVercelOtelTracesDb1, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainDeliveryResponseUnion1: all fields are null")
}

type UpdateDrainTypeHeadSampling1 string

const (
	UpdateDrainTypeHeadSampling1HeadSampling UpdateDrainTypeHeadSampling1 = "head_sampling"
)

func (e UpdateDrainTypeHeadSampling1) ToPointer() *UpdateDrainTypeHeadSampling1 {
	return &e
}
func (e *UpdateDrainTypeHeadSampling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "head_sampling":
		*e = UpdateDrainTypeHeadSampling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeHeadSampling1: %v", v)
	}
}

type UpdateDrainEnvHeadSampling1 string

const (
	UpdateDrainEnvHeadSampling1Production UpdateDrainEnvHeadSampling1 = "production"
	UpdateDrainEnvHeadSampling1Preview    UpdateDrainEnvHeadSampling1 = "preview"
)

func (e UpdateDrainEnvHeadSampling1) ToPointer() *UpdateDrainEnvHeadSampling1 {
	return &e
}
func (e *UpdateDrainEnvHeadSampling1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = UpdateDrainEnvHeadSampling1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainEnvHeadSampling1: %v", v)
	}
}

type UpdateDrainSamplingResponse1 struct {
	Type        UpdateDrainTypeHeadSampling1 `json:"type"`
	Rate        float64                      `json:"rate"`
	Env         *UpdateDrainEnvHeadSampling1 `json:"env,omitempty"`
	RequestPath *string                      `json:"requestPath,omitempty"`
}

func (u UpdateDrainSamplingResponse1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSamplingResponse1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "rate"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSamplingResponse1) GetType() UpdateDrainTypeHeadSampling1 {
	if o == nil {
		return UpdateDrainTypeHeadSampling1("")
	}
	return o.Type
}

func (o *UpdateDrainSamplingResponse1) GetRate() float64 {
	if o == nil {
		return 0.0
	}
	return o.Rate
}

func (o *UpdateDrainSamplingResponse1) GetEnv() *UpdateDrainEnvHeadSampling1 {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateDrainSamplingResponse1) GetRequestPath() *string {
	if o == nil {
		return nil
	}
	return o.RequestPath
}

type UpdateDrainResponseBodyStatus1 string

const (
	UpdateDrainResponseBodyStatus1Enabled  UpdateDrainResponseBodyStatus1 = "enabled"
	UpdateDrainResponseBodyStatus1Disabled UpdateDrainResponseBodyStatus1 = "disabled"
	UpdateDrainResponseBodyStatus1Errored  UpdateDrainResponseBodyStatus1 = "errored"
)

func (e UpdateDrainResponseBodyStatus1) ToPointer() *UpdateDrainResponseBodyStatus1 {
	return &e
}
func (e *UpdateDrainResponseBodyStatus1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		fallthrough
	case "errored":
		*e = UpdateDrainResponseBodyStatus1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainResponseBodyStatus1: %v", v)
	}
}

type UpdateDrainDisabledReason1 string

const (
	UpdateDrainDisabledReason1DisabledByOwner      UpdateDrainDisabledReason1 = "disabled-by-owner"
	UpdateDrainDisabledReason1FeatureNotAvailable  UpdateDrainDisabledReason1 = "feature-not-available"
	UpdateDrainDisabledReason1AccountPlanDowngrade UpdateDrainDisabledReason1 = "account-plan-downgrade"
	UpdateDrainDisabledReason1DisabledByAdmin      UpdateDrainDisabledReason1 = "disabled-by-admin"
)

func (e UpdateDrainDisabledReason1) ToPointer() *UpdateDrainDisabledReason1 {
	return &e
}
func (e *UpdateDrainDisabledReason1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled-by-owner":
		fallthrough
	case "feature-not-available":
		fallthrough
	case "account-plan-downgrade":
		fallthrough
	case "disabled-by-admin":
		*e = UpdateDrainDisabledReason1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainDisabledReason1: %v", v)
	}
}

type UpdateDrainKindIntegration1 string

const (
	UpdateDrainKindIntegration1Integration UpdateDrainKindIntegration1 = "integration"
)

func (e UpdateDrainKindIntegration1) ToPointer() *UpdateDrainKindIntegration1 {
	return &e
}
func (e *UpdateDrainKindIntegration1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration":
		*e = UpdateDrainKindIntegration1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainKindIntegration1: %v", v)
	}
}

type UpdateDrainSourceIntegration1 struct {
	Kind                       UpdateDrainKindIntegration1 `json:"kind"`
	ResourceID                 *string                     `json:"resourceId,omitempty"`
	ExternalResourceID         *string                     `json:"externalResourceId,omitempty"`
	IntegrationID              string                      `json:"integrationId"`
	IntegrationConfigurationID string                      `json:"integrationConfigurationId"`
}

func (u UpdateDrainSourceIntegration1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceIntegration1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"kind", "integrationId", "integrationConfigurationId"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceIntegration1) GetKind() UpdateDrainKindIntegration1 {
	if o == nil {
		return UpdateDrainKindIntegration1("")
	}
	return o.Kind
}

func (o *UpdateDrainSourceIntegration1) GetResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ResourceID
}

func (o *UpdateDrainSourceIntegration1) GetExternalResourceID() *string {
	if o == nil {
		return nil
	}
	return o.ExternalResourceID
}

func (o *UpdateDrainSourceIntegration1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateDrainSourceIntegration1) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type UpdateDrainKindSelfServed1 string

const (
	UpdateDrainKindSelfServed1SelfServed UpdateDrainKindSelfServed1 = "self-served"
)

func (e UpdateDrainKindSelfServed1) ToPointer() *UpdateDrainKindSelfServed1 {
	return &e
}
func (e *UpdateDrainKindSelfServed1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "self-served":
		*e = UpdateDrainKindSelfServed1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainKindSelfServed1: %v", v)
	}
}

type UpdateDrainSourceSelfServed1 struct {
	Kind UpdateDrainKindSelfServed1 `json:"kind"`
}

func (u UpdateDrainSourceSelfServed1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainSourceSelfServed1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"kind"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainSourceSelfServed1) GetKind() UpdateDrainKindSelfServed1 {
	if o == nil {
		return UpdateDrainKindSelfServed1("")
	}
	return o.Kind
}

type UpdateDrainResponseBodySourceUnion1Type string

const (
	UpdateDrainResponseBodySourceUnion1TypeUpdateDrainSourceSelfServed1  UpdateDrainResponseBodySourceUnion1Type = "updateDrain_source_SelfServed_1"
	UpdateDrainResponseBodySourceUnion1TypeUpdateDrainSourceIntegration1 UpdateDrainResponseBodySourceUnion1Type = "updateDrain_source_Integration_1"
)

type UpdateDrainResponseBodySourceUnion1 struct {
	UpdateDrainSourceSelfServed1  *UpdateDrainSourceSelfServed1  `queryParam:"inline"`
	UpdateDrainSourceIntegration1 *UpdateDrainSourceIntegration1 `queryParam:"inline"`

	Type UpdateDrainResponseBodySourceUnion1Type
}

func CreateUpdateDrainResponseBodySourceUnion1UpdateDrainSourceSelfServed1(updateDrainSourceSelfServed1 UpdateDrainSourceSelfServed1) UpdateDrainResponseBodySourceUnion1 {
	typ := UpdateDrainResponseBodySourceUnion1TypeUpdateDrainSourceSelfServed1

	return UpdateDrainResponseBodySourceUnion1{
		UpdateDrainSourceSelfServed1: &updateDrainSourceSelfServed1,
		Type:                         typ,
	}
}

func CreateUpdateDrainResponseBodySourceUnion1UpdateDrainSourceIntegration1(updateDrainSourceIntegration1 UpdateDrainSourceIntegration1) UpdateDrainResponseBodySourceUnion1 {
	typ := UpdateDrainResponseBodySourceUnion1TypeUpdateDrainSourceIntegration1

	return UpdateDrainResponseBodySourceUnion1{
		UpdateDrainSourceIntegration1: &updateDrainSourceIntegration1,
		Type:                          typ,
	}
}

func (u *UpdateDrainResponseBodySourceUnion1) UnmarshalJSON(data []byte) error {

	var updateDrainSourceIntegration1 UpdateDrainSourceIntegration1 = UpdateDrainSourceIntegration1{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceIntegration1, "", true, nil); err == nil {
		u.UpdateDrainSourceIntegration1 = &updateDrainSourceIntegration1
		u.Type = UpdateDrainResponseBodySourceUnion1TypeUpdateDrainSourceIntegration1
		return nil
	}

	var updateDrainSourceSelfServed1 UpdateDrainSourceSelfServed1 = UpdateDrainSourceSelfServed1{}
	if err := utils.UnmarshalJSON(data, &updateDrainSourceSelfServed1, "", true, nil); err == nil {
		u.UpdateDrainSourceSelfServed1 = &updateDrainSourceSelfServed1
		u.Type = UpdateDrainResponseBodySourceUnion1TypeUpdateDrainSourceSelfServed1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainResponseBodySourceUnion1", string(data))
}

func (u UpdateDrainResponseBodySourceUnion1) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainSourceSelfServed1 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceSelfServed1, "", true)
	}

	if u.UpdateDrainSourceIntegration1 != nil {
		return utils.MarshalJSON(u.UpdateDrainSourceIntegration1, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainResponseBodySourceUnion1: all fields are null")
}

type UpdateDrainVersionV21 string

const (
	UpdateDrainVersionV21V2 UpdateDrainVersionV21 = "v2"
)

func (e UpdateDrainVersionV21) ToPointer() *UpdateDrainVersionV21 {
	return &e
}
func (e *UpdateDrainVersionV21) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v2":
		*e = UpdateDrainVersionV21(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainVersionV21: %v", v)
	}
}

type UpdateDrainTypeOdata1 string

const (
	UpdateDrainTypeOdata1Odata UpdateDrainTypeOdata1 = "odata"
)

func (e UpdateDrainTypeOdata1) ToPointer() *UpdateDrainTypeOdata1 {
	return &e
}
func (e *UpdateDrainTypeOdata1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "odata":
		*e = UpdateDrainTypeOdata1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeOdata1: %v", v)
	}
}

type UpdateDrainFilterOdata1 struct {
	Type UpdateDrainTypeOdata1 `json:"type"`
	Text string                `json:"text"`
}

func (u UpdateDrainFilterOdata1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterOdata1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type", "text"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterOdata1) GetType() UpdateDrainTypeOdata1 {
	if o == nil {
		return UpdateDrainTypeOdata1("")
	}
	return o.Type
}

func (o *UpdateDrainFilterOdata1) GetText() string {
	if o == nil {
		return ""
	}
	return o.Text
}

type UpdateDrainTypeBasic1 string

const (
	UpdateDrainTypeBasic1Basic UpdateDrainTypeBasic1 = "basic"
)

func (e UpdateDrainTypeBasic1) ToPointer() *UpdateDrainTypeBasic1 {
	return &e
}
func (e *UpdateDrainTypeBasic1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "basic":
		*e = UpdateDrainTypeBasic1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainTypeBasic1: %v", v)
	}
}

type UpdateDrainFilterV2Project1 struct {
	Ids []string `json:"ids,omitempty"`
}

func (u UpdateDrainFilterV2Project1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2Project1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2Project1) GetIds() []string {
	if o == nil {
		return nil
	}
	return o.Ids
}

type UpdateDrainFilterV2Log1 struct {
	Sources []string `json:"sources,omitempty"`
}

func (u UpdateDrainFilterV2Log1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2Log1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2Log1) GetSources() []string {
	if o == nil {
		return nil
	}
	return o.Sources
}

type UpdateDrainFilterV2Deployment1 struct {
	Environments []string `json:"environments,omitempty"`
}

func (u UpdateDrainFilterV2Deployment1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2Deployment1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2Deployment1) GetEnvironments() []string {
	if o == nil {
		return nil
	}
	return o.Environments
}

type UpdateDrainFilterBasic1 struct {
	Type       UpdateDrainTypeBasic1           `json:"type"`
	Project    *UpdateDrainFilterV2Project1    `json:"project,omitempty"`
	Log        *UpdateDrainFilterV2Log1        `json:"log,omitempty"`
	Deployment *UpdateDrainFilterV2Deployment1 `json:"deployment,omitempty"`
}

func (u UpdateDrainFilterBasic1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterBasic1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"type"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterBasic1) GetType() UpdateDrainTypeBasic1 {
	if o == nil {
		return UpdateDrainTypeBasic1("")
	}
	return o.Type
}

func (o *UpdateDrainFilterBasic1) GetProject() *UpdateDrainFilterV2Project1 {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateDrainFilterBasic1) GetLog() *UpdateDrainFilterV2Log1 {
	if o == nil {
		return nil
	}
	return o.Log
}

func (o *UpdateDrainFilterBasic1) GetDeployment() *UpdateDrainFilterV2Deployment1 {
	if o == nil {
		return nil
	}
	return o.Deployment
}

type UpdateDrainFilterResponseUnion1Type string

const (
	UpdateDrainFilterResponseUnion1TypeUpdateDrainFilterBasic1 UpdateDrainFilterResponseUnion1Type = "updateDrain_filter_Basic_1"
	UpdateDrainFilterResponseUnion1TypeUpdateDrainFilterOdata1 UpdateDrainFilterResponseUnion1Type = "updateDrain_filter_Odata_1"
)

type UpdateDrainFilterResponseUnion1 struct {
	UpdateDrainFilterBasic1 *UpdateDrainFilterBasic1 `queryParam:"inline"`
	UpdateDrainFilterOdata1 *UpdateDrainFilterOdata1 `queryParam:"inline"`

	Type UpdateDrainFilterResponseUnion1Type
}

func CreateUpdateDrainFilterResponseUnion1UpdateDrainFilterBasic1(updateDrainFilterBasic1 UpdateDrainFilterBasic1) UpdateDrainFilterResponseUnion1 {
	typ := UpdateDrainFilterResponseUnion1TypeUpdateDrainFilterBasic1

	return UpdateDrainFilterResponseUnion1{
		UpdateDrainFilterBasic1: &updateDrainFilterBasic1,
		Type:                    typ,
	}
}

func CreateUpdateDrainFilterResponseUnion1UpdateDrainFilterOdata1(updateDrainFilterOdata1 UpdateDrainFilterOdata1) UpdateDrainFilterResponseUnion1 {
	typ := UpdateDrainFilterResponseUnion1TypeUpdateDrainFilterOdata1

	return UpdateDrainFilterResponseUnion1{
		UpdateDrainFilterOdata1: &updateDrainFilterOdata1,
		Type:                    typ,
	}
}

func (u *UpdateDrainFilterResponseUnion1) UnmarshalJSON(data []byte) error {

	var updateDrainFilterOdata1 UpdateDrainFilterOdata1 = UpdateDrainFilterOdata1{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterOdata1, "", true, nil); err == nil {
		u.UpdateDrainFilterOdata1 = &updateDrainFilterOdata1
		u.Type = UpdateDrainFilterResponseUnion1TypeUpdateDrainFilterOdata1
		return nil
	}

	var updateDrainFilterBasic1 UpdateDrainFilterBasic1 = UpdateDrainFilterBasic1{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterBasic1, "", true, nil); err == nil {
		u.UpdateDrainFilterBasic1 = &updateDrainFilterBasic1
		u.Type = UpdateDrainFilterResponseUnion1TypeUpdateDrainFilterBasic1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainFilterResponseUnion1", string(data))
}

func (u UpdateDrainFilterResponseUnion1) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainFilterBasic1 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterBasic1, "", true)
	}

	if u.UpdateDrainFilterOdata1 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterOdata1, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainFilterResponseUnion1: all fields are null")
}

type UpdateDrainFilterV2V21 struct {
	Version UpdateDrainVersionV21           `json:"version"`
	Filter  UpdateDrainFilterResponseUnion1 `json:"filter"`
}

func (u UpdateDrainFilterV2V21) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2V21) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"version", "filter"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2V21) GetVersion() UpdateDrainVersionV21 {
	if o == nil {
		return UpdateDrainVersionV21("")
	}
	return o.Version
}

func (o *UpdateDrainFilterV2V21) GetFilter() UpdateDrainFilterResponseUnion1 {
	if o == nil {
		return UpdateDrainFilterResponseUnion1{}
	}
	return o.Filter
}

type UpdateDrainVersionV11 string

const (
	UpdateDrainVersionV11V1 UpdateDrainVersionV11 = "v1"
)

func (e UpdateDrainVersionV11) ToPointer() *UpdateDrainVersionV11 {
	return &e
}
func (e *UpdateDrainVersionV11) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "v1":
		*e = UpdateDrainVersionV11(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateDrainVersionV11: %v", v)
	}
}

type UpdateDrainFilterV2V11 struct {
	Version UpdateDrainVersionV11 `json:"version"`
}

func (u UpdateDrainFilterV2V11) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainFilterV2V11) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"version"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainFilterV2V11) GetVersion() UpdateDrainVersionV11 {
	if o == nil {
		return UpdateDrainVersionV11("")
	}
	return o.Version
}

type UpdateDrainFilterV2Union1Type string

const (
	UpdateDrainFilterV2Union1TypeUpdateDrainFilterV2V11 UpdateDrainFilterV2Union1Type = "updateDrain_filterV2_V1_1"
	UpdateDrainFilterV2Union1TypeUpdateDrainFilterV2V21 UpdateDrainFilterV2Union1Type = "updateDrain_filterV2_V2_1"
)

type UpdateDrainFilterV2Union1 struct {
	UpdateDrainFilterV2V11 *UpdateDrainFilterV2V11 `queryParam:"inline"`
	UpdateDrainFilterV2V21 *UpdateDrainFilterV2V21 `queryParam:"inline"`

	Type UpdateDrainFilterV2Union1Type
}

func CreateUpdateDrainFilterV2Union1UpdateDrainFilterV2V11(updateDrainFilterV2V11 UpdateDrainFilterV2V11) UpdateDrainFilterV2Union1 {
	typ := UpdateDrainFilterV2Union1TypeUpdateDrainFilterV2V11

	return UpdateDrainFilterV2Union1{
		UpdateDrainFilterV2V11: &updateDrainFilterV2V11,
		Type:                   typ,
	}
}

func CreateUpdateDrainFilterV2Union1UpdateDrainFilterV2V21(updateDrainFilterV2V21 UpdateDrainFilterV2V21) UpdateDrainFilterV2Union1 {
	typ := UpdateDrainFilterV2Union1TypeUpdateDrainFilterV2V21

	return UpdateDrainFilterV2Union1{
		UpdateDrainFilterV2V21: &updateDrainFilterV2V21,
		Type:                   typ,
	}
}

func (u *UpdateDrainFilterV2Union1) UnmarshalJSON(data []byte) error {

	var updateDrainFilterV2V21 UpdateDrainFilterV2V21 = UpdateDrainFilterV2V21{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterV2V21, "", true, nil); err == nil {
		u.UpdateDrainFilterV2V21 = &updateDrainFilterV2V21
		u.Type = UpdateDrainFilterV2Union1TypeUpdateDrainFilterV2V21
		return nil
	}

	var updateDrainFilterV2V11 UpdateDrainFilterV2V11 = UpdateDrainFilterV2V11{}
	if err := utils.UnmarshalJSON(data, &updateDrainFilterV2V11, "", true, nil); err == nil {
		u.UpdateDrainFilterV2V11 = &updateDrainFilterV2V11
		u.Type = UpdateDrainFilterV2Union1TypeUpdateDrainFilterV2V11
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainFilterV2Union1", string(data))
}

func (u UpdateDrainFilterV2Union1) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainFilterV2V11 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterV2V11, "", true)
	}

	if u.UpdateDrainFilterV2V21 != nil {
		return utils.MarshalJSON(u.UpdateDrainFilterV2V21, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainFilterV2Union1: all fields are null")
}

type UpdateDrainResponseBody1 struct {
	ID                  string                              `json:"id"`
	OwnerID             string                              `json:"ownerId"`
	Name                string                              `json:"name"`
	CreatedAt           float64                             `json:"createdAt"`
	CreatedFrom         *UpdateDrainCreatedFrom1            `json:"createdFrom,omitempty"`
	UpdatedAt           float64                             `json:"updatedAt"`
	ProjectIds          []string                            `json:"projectIds,omitempty"`
	Schemas             *UpdateDrainSchemasResponse1        `json:"schemas,omitempty"`
	Delivery            *UpdateDrainDeliveryResponseUnion1  `json:"delivery,omitempty"`
	Sampling            []UpdateDrainSamplingResponse1      `json:"sampling,omitempty"`
	TeamID              *string                             `json:"teamId,omitempty"`
	Status              *UpdateDrainResponseBodyStatus1     `json:"status,omitempty"`
	DisabledAt          *float64                            `json:"disabledAt,omitempty"`
	DisabledReason      *UpdateDrainDisabledReason1         `json:"disabledReason,omitempty"`
	DisabledBy          *string                             `json:"disabledBy,omitempty"`
	FirstErrorTimestamp *float64                            `json:"firstErrorTimestamp,omitempty"`
	ConfigurationID     *string                             `json:"configurationId,omitempty"`
	ClientID            *string                             `json:"clientId,omitempty"`
	Source              UpdateDrainResponseBodySourceUnion1 `json:"source"`
	Filter              *string                             `json:"filter,omitempty"`
	FilterV2            *UpdateDrainFilterV2Union1          `json:"filterV2,omitempty"`
}

func (u UpdateDrainResponseBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateDrainResponseBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"id", "ownerId", "name", "createdAt", "updatedAt", "source"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateDrainResponseBody1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateDrainResponseBody1) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateDrainResponseBody1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateDrainResponseBody1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateDrainResponseBody1) GetCreatedFrom() *UpdateDrainCreatedFrom1 {
	if o == nil {
		return nil
	}
	return o.CreatedFrom
}

func (o *UpdateDrainResponseBody1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateDrainResponseBody1) GetProjectIds() []string {
	if o == nil {
		return nil
	}
	return o.ProjectIds
}

func (o *UpdateDrainResponseBody1) GetSchemas() *UpdateDrainSchemasResponse1 {
	if o == nil {
		return nil
	}
	return o.Schemas
}

func (o *UpdateDrainResponseBody1) GetDelivery() *UpdateDrainDeliveryResponseUnion1 {
	if o == nil {
		return nil
	}
	return o.Delivery
}

func (o *UpdateDrainResponseBody1) GetSampling() []UpdateDrainSamplingResponse1 {
	if o == nil {
		return nil
	}
	return o.Sampling
}

func (o *UpdateDrainResponseBody1) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateDrainResponseBody1) GetStatus() *UpdateDrainResponseBodyStatus1 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateDrainResponseBody1) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateDrainResponseBody1) GetDisabledReason() *UpdateDrainDisabledReason1 {
	if o == nil {
		return nil
	}
	return o.DisabledReason
}

func (o *UpdateDrainResponseBody1) GetDisabledBy() *string {
	if o == nil {
		return nil
	}
	return o.DisabledBy
}

func (o *UpdateDrainResponseBody1) GetFirstErrorTimestamp() *float64 {
	if o == nil {
		return nil
	}
	return o.FirstErrorTimestamp
}

func (o *UpdateDrainResponseBody1) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateDrainResponseBody1) GetClientID() *string {
	if o == nil {
		return nil
	}
	return o.ClientID
}

func (o *UpdateDrainResponseBody1) GetSource() UpdateDrainResponseBodySourceUnion1 {
	if o == nil {
		return UpdateDrainResponseBodySourceUnion1{}
	}
	return o.Source
}

func (o *UpdateDrainResponseBody1) GetFilter() *string {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *UpdateDrainResponseBody1) GetFilterV2() *UpdateDrainFilterV2Union1 {
	if o == nil {
		return nil
	}
	return o.FilterV2
}

type UpdateDrainResponseBodyType string

const (
	UpdateDrainResponseBodyTypeUpdateDrainResponseBody1 UpdateDrainResponseBodyType = "updateDrain_ResponseBody_1"
	UpdateDrainResponseBodyTypeUpdateDrainResponseBody2 UpdateDrainResponseBodyType = "updateDrain_ResponseBody_2"
)

type UpdateDrainResponseBody struct {
	UpdateDrainResponseBody1 *UpdateDrainResponseBody1 `queryParam:"inline"`
	UpdateDrainResponseBody2 *UpdateDrainResponseBody2 `queryParam:"inline"`

	Type UpdateDrainResponseBodyType
}

func CreateUpdateDrainResponseBodyUpdateDrainResponseBody1(updateDrainResponseBody1 UpdateDrainResponseBody1) UpdateDrainResponseBody {
	typ := UpdateDrainResponseBodyTypeUpdateDrainResponseBody1

	return UpdateDrainResponseBody{
		UpdateDrainResponseBody1: &updateDrainResponseBody1,
		Type:                     typ,
	}
}

func CreateUpdateDrainResponseBodyUpdateDrainResponseBody2(updateDrainResponseBody2 UpdateDrainResponseBody2) UpdateDrainResponseBody {
	typ := UpdateDrainResponseBodyTypeUpdateDrainResponseBody2

	return UpdateDrainResponseBody{
		UpdateDrainResponseBody2: &updateDrainResponseBody2,
		Type:                     typ,
	}
}

func (u *UpdateDrainResponseBody) UnmarshalJSON(data []byte) error {

	var updateDrainResponseBody1 UpdateDrainResponseBody1 = UpdateDrainResponseBody1{}
	if err := utils.UnmarshalJSON(data, &updateDrainResponseBody1, "", true, nil); err == nil {
		u.UpdateDrainResponseBody1 = &updateDrainResponseBody1
		u.Type = UpdateDrainResponseBodyTypeUpdateDrainResponseBody1
		return nil
	}

	var updateDrainResponseBody2 UpdateDrainResponseBody2 = UpdateDrainResponseBody2{}
	if err := utils.UnmarshalJSON(data, &updateDrainResponseBody2, "", true, nil); err == nil {
		u.UpdateDrainResponseBody2 = &updateDrainResponseBody2
		u.Type = UpdateDrainResponseBodyTypeUpdateDrainResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateDrainResponseBody", string(data))
}

func (u UpdateDrainResponseBody) MarshalJSON() ([]byte, error) {
	if u.UpdateDrainResponseBody1 != nil {
		return utils.MarshalJSON(u.UpdateDrainResponseBody1, "", true)
	}

	if u.UpdateDrainResponseBody2 != nil {
		return utils.MarshalJSON(u.UpdateDrainResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateDrainResponseBody: all fields are null")
}

type UpdateDrainResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *UpdateDrainResponseBody
}

func (o *UpdateDrainResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateDrainResponse) GetOneOf() *UpdateDrainResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
