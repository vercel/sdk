// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateEdgeConfigRequestBody struct {
	Slug string `json:"slug"`
}

func (o *UpdateEdgeConfigRequestBody) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

type UpdateEdgeConfigRequest struct {
	EdgeConfigID string `pathParam:"style=simple,explode=false,name=edgeConfigId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateEdgeConfigRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateEdgeConfigRequest) GetEdgeConfigID() string {
	if o == nil {
		return ""
	}
	return o.EdgeConfigID
}

func (o *UpdateEdgeConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateEdgeConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateEdgeConfigRequest) GetRequestBody() UpdateEdgeConfigRequestBody {
	if o == nil {
		return UpdateEdgeConfigRequestBody{}
	}
	return o.RequestBody
}

// UpdateEdgeConfigTransfer - Keeps track of the current state of the Edge Config while it gets transferred.
type UpdateEdgeConfigTransfer struct {
	FromAccountID string   `json:"fromAccountId"`
	StartedAt     float64  `json:"startedAt"`
	DoneAt        *float64 `json:"doneAt"`
}

func (o *UpdateEdgeConfigTransfer) GetFromAccountID() string {
	if o == nil {
		return ""
	}
	return o.FromAccountID
}

func (o *UpdateEdgeConfigTransfer) GetStartedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.StartedAt
}

func (o *UpdateEdgeConfigTransfer) GetDoneAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DoneAt
}

type UpdateEdgeConfigSchema struct {
}

type UpdateEdgeConfigTypeExperimentation string

const (
	UpdateEdgeConfigTypeExperimentationExperimentation UpdateEdgeConfigTypeExperimentation = "experimentation"
)

func (e UpdateEdgeConfigTypeExperimentation) ToPointer() *UpdateEdgeConfigTypeExperimentation {
	return &e
}
func (e *UpdateEdgeConfigTypeExperimentation) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "experimentation":
		*e = UpdateEdgeConfigTypeExperimentation(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateEdgeConfigTypeExperimentation: %v", v)
	}
}

type UpdateEdgeConfigPurposeExperimentation struct {
	Type       UpdateEdgeConfigTypeExperimentation `json:"type"`
	ResourceID string                              `json:"resourceId"`
}

func (o *UpdateEdgeConfigPurposeExperimentation) GetType() UpdateEdgeConfigTypeExperimentation {
	if o == nil {
		return UpdateEdgeConfigTypeExperimentation("")
	}
	return o.Type
}

func (o *UpdateEdgeConfigPurposeExperimentation) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

type UpdateEdgeConfigTypeFlags string

const (
	UpdateEdgeConfigTypeFlagsFlags UpdateEdgeConfigTypeFlags = "flags"
)

func (e UpdateEdgeConfigTypeFlags) ToPointer() *UpdateEdgeConfigTypeFlags {
	return &e
}
func (e *UpdateEdgeConfigTypeFlags) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags":
		*e = UpdateEdgeConfigTypeFlags(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateEdgeConfigTypeFlags: %v", v)
	}
}

type UpdateEdgeConfigPurposeFlags struct {
	Type      UpdateEdgeConfigTypeFlags `json:"type"`
	ProjectID string                    `json:"projectId"`
}

func (o *UpdateEdgeConfigPurposeFlags) GetType() UpdateEdgeConfigTypeFlags {
	if o == nil {
		return UpdateEdgeConfigTypeFlags("")
	}
	return o.Type
}

func (o *UpdateEdgeConfigPurposeFlags) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateEdgeConfigPurposeUnionType string

const (
	UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurposeFlags           UpdateEdgeConfigPurposeUnionType = "updateEdgeConfig_purpose_Flags"
	UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurposeExperimentation UpdateEdgeConfigPurposeUnionType = "updateEdgeConfig_purpose_Experimentation"
)

type UpdateEdgeConfigPurposeUnion struct {
	UpdateEdgeConfigPurposeFlags           *UpdateEdgeConfigPurposeFlags           `queryParam:"inline"`
	UpdateEdgeConfigPurposeExperimentation *UpdateEdgeConfigPurposeExperimentation `queryParam:"inline"`

	Type UpdateEdgeConfigPurposeUnionType
}

func CreateUpdateEdgeConfigPurposeUnionUpdateEdgeConfigPurposeFlags(updateEdgeConfigPurposeFlags UpdateEdgeConfigPurposeFlags) UpdateEdgeConfigPurposeUnion {
	typ := UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurposeFlags

	return UpdateEdgeConfigPurposeUnion{
		UpdateEdgeConfigPurposeFlags: &updateEdgeConfigPurposeFlags,
		Type:                         typ,
	}
}

func CreateUpdateEdgeConfigPurposeUnionUpdateEdgeConfigPurposeExperimentation(updateEdgeConfigPurposeExperimentation UpdateEdgeConfigPurposeExperimentation) UpdateEdgeConfigPurposeUnion {
	typ := UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurposeExperimentation

	return UpdateEdgeConfigPurposeUnion{
		UpdateEdgeConfigPurposeExperimentation: &updateEdgeConfigPurposeExperimentation,
		Type:                                   typ,
	}
}

func (u *UpdateEdgeConfigPurposeUnion) UnmarshalJSON(data []byte) error {

	var updateEdgeConfigPurposeFlags UpdateEdgeConfigPurposeFlags = UpdateEdgeConfigPurposeFlags{}
	if err := utils.UnmarshalJSON(data, &updateEdgeConfigPurposeFlags, "", true, true); err == nil {
		u.UpdateEdgeConfigPurposeFlags = &updateEdgeConfigPurposeFlags
		u.Type = UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurposeFlags
		return nil
	}

	var updateEdgeConfigPurposeExperimentation UpdateEdgeConfigPurposeExperimentation = UpdateEdgeConfigPurposeExperimentation{}
	if err := utils.UnmarshalJSON(data, &updateEdgeConfigPurposeExperimentation, "", true, true); err == nil {
		u.UpdateEdgeConfigPurposeExperimentation = &updateEdgeConfigPurposeExperimentation
		u.Type = UpdateEdgeConfigPurposeUnionTypeUpdateEdgeConfigPurposeExperimentation
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateEdgeConfigPurposeUnion", string(data))
}

func (u UpdateEdgeConfigPurposeUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateEdgeConfigPurposeFlags != nil {
		return utils.MarshalJSON(u.UpdateEdgeConfigPurposeFlags, "", true)
	}

	if u.UpdateEdgeConfigPurposeExperimentation != nil {
		return utils.MarshalJSON(u.UpdateEdgeConfigPurposeExperimentation, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateEdgeConfigPurposeUnion: all fields are null")
}

// UpdateEdgeConfigResponseBody - An Edge Config
type UpdateEdgeConfigResponseBody struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	ID        *string  `json:"id,omitempty"`
	// Name for the Edge Config Names are not unique. Must start with an alphabetic character and can contain only alphanumeric characters and underscores).
	Slug    *string `json:"slug,omitempty"`
	OwnerID *string `json:"ownerId,omitempty"`
	Digest  *string `json:"digest,omitempty"`
	// Keeps track of the current state of the Edge Config while it gets transferred.
	Transfer    *UpdateEdgeConfigTransfer     `json:"transfer,omitempty"`
	Schema      *UpdateEdgeConfigSchema       `json:"schema,omitempty"`
	Purpose     *UpdateEdgeConfigPurposeUnion `json:"purpose,omitempty"`
	SizeInBytes float64                       `json:"sizeInBytes"`
	ItemCount   float64                       `json:"itemCount"`
}

func (o *UpdateEdgeConfigResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateEdgeConfigResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateEdgeConfigResponseBody) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateEdgeConfigResponseBody) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateEdgeConfigResponseBody) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *UpdateEdgeConfigResponseBody) GetDigest() *string {
	if o == nil {
		return nil
	}
	return o.Digest
}

func (o *UpdateEdgeConfigResponseBody) GetTransfer() *UpdateEdgeConfigTransfer {
	if o == nil {
		return nil
	}
	return o.Transfer
}

func (o *UpdateEdgeConfigResponseBody) GetSchema() *UpdateEdgeConfigSchema {
	if o == nil {
		return nil
	}
	return o.Schema
}

func (o *UpdateEdgeConfigResponseBody) GetPurpose() *UpdateEdgeConfigPurposeUnion {
	if o == nil {
		return nil
	}
	return o.Purpose
}

func (o *UpdateEdgeConfigResponseBody) GetSizeInBytes() float64 {
	if o == nil {
		return 0.0
	}
	return o.SizeInBytes
}

func (o *UpdateEdgeConfigResponseBody) GetItemCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ItemCount
}

type UpdateEdgeConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateEdgeConfigResponseBody
}

func (o *UpdateEdgeConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateEdgeConfigResponse) GetObject() *UpdateEdgeConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
