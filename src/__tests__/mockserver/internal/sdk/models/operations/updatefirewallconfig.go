// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type ValueActionEnum5 string

const (
	ValueActionEnum5Log       ValueActionEnum5 = "log"
	ValueActionEnum5Challenge ValueActionEnum5 = "challenge"
	ValueActionEnum5Deny      ValueActionEnum5 = "deny"
)

func (e ValueActionEnum5) ToPointer() *ValueActionEnum5 {
	return &e
}
func (e *ValueActionEnum5) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		*e = ValueActionEnum5(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueActionEnum5: %v", v)
	}
}

type UpdateFirewallConfigValue7 struct {
	Active bool              `json:"active"`
	Action *ValueActionEnum5 `json:"action,omitempty"`
}

func (o *UpdateFirewallConfigValue7) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateFirewallConfigValue7) GetAction() *ValueActionEnum5 {
	if o == nil {
		return nil
	}
	return o.Action
}

// UpdateFirewallConfigRequestBody - Update a managed rule group
type UpdateFirewallConfigRequestBody struct {
	Action string                                `json:"action"`
	ID     string                                `json:"id"`
	Value  map[string]UpdateFirewallConfigValue7 `json:"value"`
}

func (o *UpdateFirewallConfigRequestBody) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *UpdateFirewallConfigRequestBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateFirewallConfigRequestBody) GetValue() map[string]UpdateFirewallConfigValue7 {
	if o == nil {
		return map[string]UpdateFirewallConfigValue7{}
	}
	return o.Value
}

type ActionManagedRulesUpdate string

const (
	ActionManagedRulesUpdateManagedRulesUpdate ActionManagedRulesUpdate = "managedRules.update"
)

func (e ActionManagedRulesUpdate) ToPointer() *ActionManagedRulesUpdate {
	return &e
}
func (e *ActionManagedRulesUpdate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "managedRules.update":
		*e = ActionManagedRulesUpdate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionManagedRulesUpdate: %v", v)
	}
}

type ValueActionEnum4 string

const (
	ValueActionEnum4Log       ValueActionEnum4 = "log"
	ValueActionEnum4Challenge ValueActionEnum4 = "challenge"
	ValueActionEnum4Deny      ValueActionEnum4 = "deny"
)

func (e ValueActionEnum4) ToPointer() *ValueActionEnum4 {
	return &e
}
func (e *ValueActionEnum4) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		*e = ValueActionEnum4(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueActionEnum4: %v", v)
	}
}

type UpdateFirewallConfigValue6 struct {
	Action *ValueActionEnum4 `json:"action,omitempty"`
	Active bool              `json:"active"`
}

func (o *UpdateFirewallConfigValue6) GetAction() *ValueActionEnum4 {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *UpdateFirewallConfigValue6) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

// ManagedRulesUpdate - Update a managed ruleset
type ManagedRulesUpdate struct {
	Action ActionManagedRulesUpdate   `json:"action"`
	ID     string                     `json:"id"`
	Value  UpdateFirewallConfigValue6 `json:"value"`
}

func (o *ManagedRulesUpdate) GetAction() ActionManagedRulesUpdate {
	if o == nil {
		return ActionManagedRulesUpdate("")
	}
	return o.Action
}

func (o *ManagedRulesUpdate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *ManagedRulesUpdate) GetValue() UpdateFirewallConfigValue6 {
	if o == nil {
		return UpdateFirewallConfigValue6{}
	}
	return o.Value
}

type ActionIPRemove string

const (
	ActionIPRemoveIPRemove ActionIPRemove = "ip.remove"
)

func (e ActionIPRemove) ToPointer() *ActionIPRemove {
	return &e
}
func (e *ActionIPRemove) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip.remove":
		*e = ActionIPRemove(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionIPRemove: %v", v)
	}
}

// IPRemove - Remove an IPBlocking rule
type IPRemove struct {
	Action ActionIPRemove `json:"action"`
	ID     string         `json:"id"`
	Value  any            `json:"value,omitempty"`
}

func (o *IPRemove) GetAction() ActionIPRemove {
	if o == nil {
		return ActionIPRemove("")
	}
	return o.Action
}

func (o *IPRemove) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *IPRemove) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type ActionIPUpdate string

const (
	ActionIPUpdateIPUpdate ActionIPUpdate = "ip.update"
)

func (e ActionIPUpdate) ToPointer() *ActionIPUpdate {
	return &e
}
func (e *ActionIPUpdate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip.update":
		*e = ActionIPUpdate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionIPUpdate: %v", v)
	}
}

type ValueActionEnum3 string

const (
	ValueActionEnum3Deny      ValueActionEnum3 = "deny"
	ValueActionEnum3Challenge ValueActionEnum3 = "challenge"
	ValueActionEnum3Log       ValueActionEnum3 = "log"
	ValueActionEnum3Bypass    ValueActionEnum3 = "bypass"
)

func (e ValueActionEnum3) ToPointer() *ValueActionEnum3 {
	return &e
}
func (e *ValueActionEnum3) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		*e = ValueActionEnum3(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueActionEnum3: %v", v)
	}
}

type UpdateFirewallConfigValue5 struct {
	Hostname string           `json:"hostname"`
	IP       string           `json:"ip"`
	Notes    *string          `json:"notes,omitempty"`
	Action   ValueActionEnum3 `json:"action"`
}

func (o *UpdateFirewallConfigValue5) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *UpdateFirewallConfigValue5) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *UpdateFirewallConfigValue5) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *UpdateFirewallConfigValue5) GetAction() ValueActionEnum3 {
	if o == nil {
		return ValueActionEnum3("")
	}
	return o.Action
}

// IPUpdate - Update an IP Blocking rule
type IPUpdate struct {
	Action ActionIPUpdate             `json:"action"`
	ID     string                     `json:"id"`
	Value  UpdateFirewallConfigValue5 `json:"value"`
}

func (o *IPUpdate) GetAction() ActionIPUpdate {
	if o == nil {
		return ActionIPUpdate("")
	}
	return o.Action
}

func (o *IPUpdate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *IPUpdate) GetValue() UpdateFirewallConfigValue5 {
	if o == nil {
		return UpdateFirewallConfigValue5{}
	}
	return o.Value
}

type ActionIPInsert string

const (
	ActionIPInsertIPInsert ActionIPInsert = "ip.insert"
)

func (e ActionIPInsert) ToPointer() *ActionIPInsert {
	return &e
}
func (e *ActionIPInsert) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ip.insert":
		*e = ActionIPInsert(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionIPInsert: %v", v)
	}
}

type ValueActionEnum2 string

const (
	ValueActionEnum2Deny      ValueActionEnum2 = "deny"
	ValueActionEnum2Challenge ValueActionEnum2 = "challenge"
	ValueActionEnum2Log       ValueActionEnum2 = "log"
	ValueActionEnum2Bypass    ValueActionEnum2 = "bypass"
)

func (e ValueActionEnum2) ToPointer() *ValueActionEnum2 {
	return &e
}
func (e *ValueActionEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		*e = ValueActionEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueActionEnum2: %v", v)
	}
}

type UpdateFirewallConfigValue4 struct {
	Hostname string           `json:"hostname"`
	IP       string           `json:"ip"`
	Notes    *string          `json:"notes,omitempty"`
	Action   ValueActionEnum2 `json:"action"`
}

func (o *UpdateFirewallConfigValue4) GetHostname() string {
	if o == nil {
		return ""
	}
	return o.Hostname
}

func (o *UpdateFirewallConfigValue4) GetIP() string {
	if o == nil {
		return ""
	}
	return o.IP
}

func (o *UpdateFirewallConfigValue4) GetNotes() *string {
	if o == nil {
		return nil
	}
	return o.Notes
}

func (o *UpdateFirewallConfigValue4) GetAction() ValueActionEnum2 {
	if o == nil {
		return ValueActionEnum2("")
	}
	return o.Action
}

// IPInsert - Add an IP Blocking rule
type IPInsert struct {
	Action ActionIPInsert             `json:"action"`
	ID     any                        `json:"id,omitempty"`
	Value  UpdateFirewallConfigValue4 `json:"value"`
}

func (o *IPInsert) GetAction() ActionIPInsert {
	if o == nil {
		return ActionIPInsert("")
	}
	return o.Action
}

func (o *IPInsert) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *IPInsert) GetValue() UpdateFirewallConfigValue4 {
	if o == nil {
		return UpdateFirewallConfigValue4{}
	}
	return o.Value
}

type ActionCrsDisable string

const (
	ActionCrsDisableCrsDisable ActionCrsDisable = "crs.disable"
)

func (e ActionCrsDisable) ToPointer() *ActionCrsDisable {
	return &e
}
func (e *ActionCrsDisable) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crs.disable":
		*e = ActionCrsDisable(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionCrsDisable: %v", v)
	}
}

// CrsDisable - Disable a managed rule
type CrsDisable struct {
	Action ActionCrsDisable `json:"action"`
	ID     any              `json:"id,omitempty"`
	Value  any              `json:"value,omitempty"`
}

func (o *CrsDisable) GetAction() ActionCrsDisable {
	if o == nil {
		return ActionCrsDisable("")
	}
	return o.Action
}

func (o *CrsDisable) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *CrsDisable) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type ActionCrsUpdate string

const (
	ActionCrsUpdateCrsUpdate ActionCrsUpdate = "crs.update"
)

func (e ActionCrsUpdate) ToPointer() *ActionCrsUpdate {
	return &e
}
func (e *ActionCrsUpdate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "crs.update":
		*e = ActionCrsUpdate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionCrsUpdate: %v", v)
	}
}

type ID string

const (
	IDSd   ID = "sd"
	IDMa   ID = "ma"
	IDLfi  ID = "lfi"
	IDRfi  ID = "rfi"
	IDRce  ID = "rce"
	IDPhp  ID = "php"
	IDGen  ID = "gen"
	IDXSS  ID = "xss"
	IDSqli ID = "sqli"
	IDSf   ID = "sf"
	IDJava ID = "java"
)

func (e ID) ToPointer() *ID {
	return &e
}
func (e *ID) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "sd":
		fallthrough
	case "ma":
		fallthrough
	case "lfi":
		fallthrough
	case "rfi":
		fallthrough
	case "rce":
		fallthrough
	case "php":
		fallthrough
	case "gen":
		fallthrough
	case "xss":
		fallthrough
	case "sqli":
		fallthrough
	case "sf":
		fallthrough
	case "java":
		*e = ID(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ID: %v", v)
	}
}

type ValueActionEnum1 string

const (
	ValueActionEnum1Deny ValueActionEnum1 = "deny"
	ValueActionEnum1Log  ValueActionEnum1 = "log"
)

func (e ValueActionEnum1) ToPointer() *ValueActionEnum1 {
	return &e
}
func (e *ValueActionEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "log":
		*e = ValueActionEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueActionEnum1: %v", v)
	}
}

type UpdateFirewallConfigValue3 struct {
	Active bool             `json:"active"`
	Action ValueActionEnum1 `json:"action"`
}

func (o *UpdateFirewallConfigValue3) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateFirewallConfigValue3) GetAction() ValueActionEnum1 {
	if o == nil {
		return ValueActionEnum1("")
	}
	return o.Action
}

// CrsUpdate - Enable a managed rule
type CrsUpdate struct {
	Action ActionCrsUpdate            `json:"action"`
	ID     ID                         `json:"id"`
	Value  UpdateFirewallConfigValue3 `json:"value"`
}

func (o *CrsUpdate) GetAction() ActionCrsUpdate {
	if o == nil {
		return ActionCrsUpdate("")
	}
	return o.Action
}

func (o *CrsUpdate) GetID() ID {
	if o == nil {
		return ID("")
	}
	return o.ID
}

func (o *CrsUpdate) GetValue() UpdateFirewallConfigValue3 {
	if o == nil {
		return UpdateFirewallConfigValue3{}
	}
	return o.Value
}

type ActionRulesPriority string

const (
	ActionRulesPriorityRulesPriority ActionRulesPriority = "rules.priority"
)

func (e ActionRulesPriority) ToPointer() *ActionRulesPriority {
	return &e
}
func (e *ActionRulesPriority) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.priority":
		*e = ActionRulesPriority(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionRulesPriority: %v", v)
	}
}

// RulesPriority - Reorder a custom rule
type RulesPriority struct {
	Action ActionRulesPriority `json:"action"`
	ID     string              `json:"id"`
	Value  float64             `json:"value"`
}

func (o *RulesPriority) GetAction() ActionRulesPriority {
	if o == nil {
		return ActionRulesPriority("")
	}
	return o.Action
}

func (o *RulesPriority) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RulesPriority) GetValue() float64 {
	if o == nil {
		return 0.0
	}
	return o.Value
}

type ActionRulesRemove string

const (
	ActionRulesRemoveRulesRemove ActionRulesRemove = "rules.remove"
)

func (e ActionRulesRemove) ToPointer() *ActionRulesRemove {
	return &e
}
func (e *ActionRulesRemove) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.remove":
		*e = ActionRulesRemove(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionRulesRemove: %v", v)
	}
}

// RulesRemove - Remove a custom rule
type RulesRemove struct {
	Action ActionRulesRemove `json:"action"`
	ID     string            `json:"id"`
	Value  any               `json:"value,omitempty"`
}

func (o *RulesRemove) GetAction() ActionRulesRemove {
	if o == nil {
		return ActionRulesRemove("")
	}
	return o.Action
}

func (o *RulesRemove) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RulesRemove) GetValue() any {
	if o == nil {
		return nil
	}
	return o.Value
}

type ActionRulesUpdate string

const (
	ActionRulesUpdateRulesUpdate ActionRulesUpdate = "rules.update"
)

func (e ActionRulesUpdate) ToPointer() *ActionRulesUpdate {
	return &e
}
func (e *ActionRulesUpdate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.update":
		*e = ActionRulesUpdate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionRulesUpdate: %v", v)
	}
}

type UpdateFirewallConfigType2 string

const (
	UpdateFirewallConfigType2Host             UpdateFirewallConfigType2 = "host"
	UpdateFirewallConfigType2Path             UpdateFirewallConfigType2 = "path"
	UpdateFirewallConfigType2Method           UpdateFirewallConfigType2 = "method"
	UpdateFirewallConfigType2Header           UpdateFirewallConfigType2 = "header"
	UpdateFirewallConfigType2Query            UpdateFirewallConfigType2 = "query"
	UpdateFirewallConfigType2Cookie           UpdateFirewallConfigType2 = "cookie"
	UpdateFirewallConfigType2TargetPath       UpdateFirewallConfigType2 = "target_path"
	UpdateFirewallConfigType2RawPath          UpdateFirewallConfigType2 = "raw_path"
	UpdateFirewallConfigType2IPAddress        UpdateFirewallConfigType2 = "ip_address"
	UpdateFirewallConfigType2Region           UpdateFirewallConfigType2 = "region"
	UpdateFirewallConfigType2Protocol         UpdateFirewallConfigType2 = "protocol"
	UpdateFirewallConfigType2Scheme           UpdateFirewallConfigType2 = "scheme"
	UpdateFirewallConfigType2Environment      UpdateFirewallConfigType2 = "environment"
	UpdateFirewallConfigType2UserAgent        UpdateFirewallConfigType2 = "user_agent"
	UpdateFirewallConfigType2GeoContinent     UpdateFirewallConfigType2 = "geo_continent"
	UpdateFirewallConfigType2GeoCountry       UpdateFirewallConfigType2 = "geo_country"
	UpdateFirewallConfigType2GeoCountryRegion UpdateFirewallConfigType2 = "geo_country_region"
	UpdateFirewallConfigType2GeoCity          UpdateFirewallConfigType2 = "geo_city"
	UpdateFirewallConfigType2GeoAsNumber      UpdateFirewallConfigType2 = "geo_as_number"
	UpdateFirewallConfigType2Ja4Digest        UpdateFirewallConfigType2 = "ja4_digest"
	UpdateFirewallConfigType2Ja3Digest        UpdateFirewallConfigType2 = "ja3_digest"
	UpdateFirewallConfigType2RateLimitAPIID   UpdateFirewallConfigType2 = "rate_limit_api_id"
)

func (e UpdateFirewallConfigType2) ToPointer() *UpdateFirewallConfigType2 {
	return &e
}
func (e *UpdateFirewallConfigType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "region":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = UpdateFirewallConfigType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigType2: %v", v)
	}
}

type UpdateFirewallConfigOp2 string

const (
	UpdateFirewallConfigOp2Re   UpdateFirewallConfigOp2 = "re"
	UpdateFirewallConfigOp2Eq   UpdateFirewallConfigOp2 = "eq"
	UpdateFirewallConfigOp2Neq  UpdateFirewallConfigOp2 = "neq"
	UpdateFirewallConfigOp2Ex   UpdateFirewallConfigOp2 = "ex"
	UpdateFirewallConfigOp2Nex  UpdateFirewallConfigOp2 = "nex"
	UpdateFirewallConfigOp2Inc  UpdateFirewallConfigOp2 = "inc"
	UpdateFirewallConfigOp2Ninc UpdateFirewallConfigOp2 = "ninc"
	UpdateFirewallConfigOp2Pre  UpdateFirewallConfigOp2 = "pre"
	UpdateFirewallConfigOp2Suf  UpdateFirewallConfigOp2 = "suf"
	UpdateFirewallConfigOp2Sub  UpdateFirewallConfigOp2 = "sub"
	UpdateFirewallConfigOp2Gt   UpdateFirewallConfigOp2 = "gt"
	UpdateFirewallConfigOp2Gte  UpdateFirewallConfigOp2 = "gte"
	UpdateFirewallConfigOp2Lt   UpdateFirewallConfigOp2 = "lt"
	UpdateFirewallConfigOp2Lte  UpdateFirewallConfigOp2 = "lte"
)

func (e UpdateFirewallConfigOp2) ToPointer() *UpdateFirewallConfigOp2 {
	return &e
}
func (e *UpdateFirewallConfigOp2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "ex":
		fallthrough
	case "nex":
		fallthrough
	case "inc":
		fallthrough
	case "ninc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		*e = UpdateFirewallConfigOp2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigOp2: %v", v)
	}
}

type UpdateFirewallConfigConditionValue2Type string

const (
	UpdateFirewallConfigConditionValue2TypeStr        UpdateFirewallConfigConditionValue2Type = "str"
	UpdateFirewallConfigConditionValue2TypeArrayOfStr UpdateFirewallConfigConditionValue2Type = "arrayOfStr"
	UpdateFirewallConfigConditionValue2TypeNumber     UpdateFirewallConfigConditionValue2Type = "number"
)

type UpdateFirewallConfigConditionValue2 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`
	Number     *float64 `queryParam:"inline"`

	Type UpdateFirewallConfigConditionValue2Type
}

func CreateUpdateFirewallConfigConditionValue2Str(str string) UpdateFirewallConfigConditionValue2 {
	typ := UpdateFirewallConfigConditionValue2TypeStr

	return UpdateFirewallConfigConditionValue2{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateFirewallConfigConditionValue2ArrayOfStr(arrayOfStr []string) UpdateFirewallConfigConditionValue2 {
	typ := UpdateFirewallConfigConditionValue2TypeArrayOfStr

	return UpdateFirewallConfigConditionValue2{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateUpdateFirewallConfigConditionValue2Number(number float64) UpdateFirewallConfigConditionValue2 {
	typ := UpdateFirewallConfigConditionValue2TypeNumber

	return UpdateFirewallConfigConditionValue2{
		Number: &number,
		Type:   typ,
	}
}

func (u *UpdateFirewallConfigConditionValue2) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateFirewallConfigConditionValue2TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateFirewallConfigConditionValue2TypeArrayOfStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateFirewallConfigConditionValue2TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigConditionValue2", string(data))
}

func (u UpdateFirewallConfigConditionValue2) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigConditionValue2: all fields are null")
}

type UpdateFirewallConfigCondition2 struct {
	Type  UpdateFirewallConfigType2            `json:"type"`
	Op    UpdateFirewallConfigOp2              `json:"op"`
	Neg   *bool                                `json:"neg,omitempty"`
	Key   *string                              `json:"key,omitempty"`
	Value *UpdateFirewallConfigConditionValue2 `json:"value,omitempty"`
}

func (o *UpdateFirewallConfigCondition2) GetType() UpdateFirewallConfigType2 {
	if o == nil {
		return UpdateFirewallConfigType2("")
	}
	return o.Type
}

func (o *UpdateFirewallConfigCondition2) GetOp() UpdateFirewallConfigOp2 {
	if o == nil {
		return UpdateFirewallConfigOp2("")
	}
	return o.Op
}

func (o *UpdateFirewallConfigCondition2) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *UpdateFirewallConfigCondition2) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateFirewallConfigCondition2) GetValue() *UpdateFirewallConfigConditionValue2 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateFirewallConfigConditionGroup2 struct {
	Conditions []UpdateFirewallConfigCondition2 `json:"conditions"`
}

func (o *UpdateFirewallConfigConditionGroup2) GetConditions() []UpdateFirewallConfigCondition2 {
	if o == nil {
		return []UpdateFirewallConfigCondition2{}
	}
	return o.Conditions
}

type ValueMitigateActionEnum2 string

const (
	ValueMitigateActionEnum2Log       ValueMitigateActionEnum2 = "log"
	ValueMitigateActionEnum2Challenge ValueMitigateActionEnum2 = "challenge"
	ValueMitigateActionEnum2Deny      ValueMitigateActionEnum2 = "deny"
	ValueMitigateActionEnum2Bypass    ValueMitigateActionEnum2 = "bypass"
	ValueMitigateActionEnum2RateLimit ValueMitigateActionEnum2 = "rate_limit"
	ValueMitigateActionEnum2Redirect  ValueMitigateActionEnum2 = "redirect"
)

func (e ValueMitigateActionEnum2) ToPointer() *ValueMitigateActionEnum2 {
	return &e
}
func (e *ValueMitigateActionEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = ValueMitigateActionEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueMitigateActionEnum2: %v", v)
	}
}

type UpdateFirewallConfigAlgo2 string

const (
	UpdateFirewallConfigAlgo2FixedWindow UpdateFirewallConfigAlgo2 = "fixed_window"
	UpdateFirewallConfigAlgo2TokenBucket UpdateFirewallConfigAlgo2 = "token_bucket"
)

func (e UpdateFirewallConfigAlgo2) ToPointer() *UpdateFirewallConfigAlgo2 {
	return &e
}
func (e *UpdateFirewallConfigAlgo2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateFirewallConfigAlgo2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigAlgo2: %v", v)
	}
}

type RateLimitActionValueEnum2 string

const (
	RateLimitActionValueEnum2Log       RateLimitActionValueEnum2 = "log"
	RateLimitActionValueEnum2Challenge RateLimitActionValueEnum2 = "challenge"
	RateLimitActionValueEnum2Deny      RateLimitActionValueEnum2 = "deny"
	RateLimitActionValueEnum2RateLimit RateLimitActionValueEnum2 = "rate_limit"
)

func (e RateLimitActionValueEnum2) ToPointer() *RateLimitActionValueEnum2 {
	return &e
}
func (e *RateLimitActionValueEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "rate_limit":
		*e = RateLimitActionValueEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitActionValueEnum2: %v", v)
	}
}

type ValueActionUnion2Type string

const (
	ValueActionUnion2TypeRateLimitActionValueEnum2 ValueActionUnion2Type = "rateLimit_action_value_enum_2"
	ValueActionUnion2TypeAny                       ValueActionUnion2Type = "any"
)

type ValueActionUnion2 struct {
	RateLimitActionValueEnum2 *RateLimitActionValueEnum2 `queryParam:"inline"`
	Any                       any                        `queryParam:"inline"`

	Type ValueActionUnion2Type
}

func CreateValueActionUnion2RateLimitActionValueEnum2(rateLimitActionValueEnum2 RateLimitActionValueEnum2) ValueActionUnion2 {
	typ := ValueActionUnion2TypeRateLimitActionValueEnum2

	return ValueActionUnion2{
		RateLimitActionValueEnum2: &rateLimitActionValueEnum2,
		Type:                      typ,
	}
}

func CreateValueActionUnion2Any(anyT any) ValueActionUnion2 {
	typ := ValueActionUnion2TypeAny

	return ValueActionUnion2{
		Any:  anyT,
		Type: typ,
	}
}

func (u *ValueActionUnion2) UnmarshalJSON(data []byte) error {

	var rateLimitActionValueEnum2 RateLimitActionValueEnum2 = RateLimitActionValueEnum2("")
	if err := utils.UnmarshalJSON(data, &rateLimitActionValueEnum2, "", true, true); err == nil {
		u.RateLimitActionValueEnum2 = &rateLimitActionValueEnum2
		u.Type = ValueActionUnion2TypeRateLimitActionValueEnum2
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = ValueActionUnion2TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ValueActionUnion2", string(data))
}

func (u ValueActionUnion2) MarshalJSON() ([]byte, error) {
	if u.RateLimitActionValueEnum2 != nil {
		return utils.MarshalJSON(u.RateLimitActionValueEnum2, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type ValueActionUnion2: all fields are null")
}

type UpdateFirewallConfigRateLimit2 struct {
	Algo   UpdateFirewallConfigAlgo2 `json:"algo"`
	Window float64                   `json:"window"`
	Limit  float64                   `json:"limit"`
	Keys   []string                  `json:"keys"`
	Action *ValueActionUnion2        `json:"action,omitempty"`
}

func (o *UpdateFirewallConfigRateLimit2) GetAlgo() UpdateFirewallConfigAlgo2 {
	if o == nil {
		return UpdateFirewallConfigAlgo2("")
	}
	return o.Algo
}

func (o *UpdateFirewallConfigRateLimit2) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *UpdateFirewallConfigRateLimit2) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateFirewallConfigRateLimit2) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *UpdateFirewallConfigRateLimit2) GetAction() *ValueActionUnion2 {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateFirewallConfigRateLimitUnion2Type string

const (
	UpdateFirewallConfigRateLimitUnion2TypeUpdateFirewallConfigRateLimit2 UpdateFirewallConfigRateLimitUnion2Type = "updateFirewallConfig_rateLimit_2"
	UpdateFirewallConfigRateLimitUnion2TypeAny                            UpdateFirewallConfigRateLimitUnion2Type = "any"
)

type UpdateFirewallConfigRateLimitUnion2 struct {
	UpdateFirewallConfigRateLimit2 *UpdateFirewallConfigRateLimit2 `queryParam:"inline"`
	Any                            any                             `queryParam:"inline"`

	Type UpdateFirewallConfigRateLimitUnion2Type
}

func CreateUpdateFirewallConfigRateLimitUnion2UpdateFirewallConfigRateLimit2(updateFirewallConfigRateLimit2 UpdateFirewallConfigRateLimit2) UpdateFirewallConfigRateLimitUnion2 {
	typ := UpdateFirewallConfigRateLimitUnion2TypeUpdateFirewallConfigRateLimit2

	return UpdateFirewallConfigRateLimitUnion2{
		UpdateFirewallConfigRateLimit2: &updateFirewallConfigRateLimit2,
		Type:                           typ,
	}
}

func CreateUpdateFirewallConfigRateLimitUnion2Any(anyT any) UpdateFirewallConfigRateLimitUnion2 {
	typ := UpdateFirewallConfigRateLimitUnion2TypeAny

	return UpdateFirewallConfigRateLimitUnion2{
		Any:  anyT,
		Type: typ,
	}
}

func (u *UpdateFirewallConfigRateLimitUnion2) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRateLimit2 UpdateFirewallConfigRateLimit2 = UpdateFirewallConfigRateLimit2{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRateLimit2, "", true, true); err == nil {
		u.UpdateFirewallConfigRateLimit2 = &updateFirewallConfigRateLimit2
		u.Type = UpdateFirewallConfigRateLimitUnion2TypeUpdateFirewallConfigRateLimit2
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = UpdateFirewallConfigRateLimitUnion2TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRateLimitUnion2", string(data))
}

func (u UpdateFirewallConfigRateLimitUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRateLimit2 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRateLimit2, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRateLimitUnion2: all fields are null")
}

type UpdateFirewallConfigRedirect2 struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *UpdateFirewallConfigRedirect2) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *UpdateFirewallConfigRedirect2) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type UpdateFirewallConfigRedirectUnion2Type string

const (
	UpdateFirewallConfigRedirectUnion2TypeUpdateFirewallConfigRedirect2 UpdateFirewallConfigRedirectUnion2Type = "updateFirewallConfig_redirect_2"
	UpdateFirewallConfigRedirectUnion2TypeAny                           UpdateFirewallConfigRedirectUnion2Type = "any"
)

type UpdateFirewallConfigRedirectUnion2 struct {
	UpdateFirewallConfigRedirect2 *UpdateFirewallConfigRedirect2 `queryParam:"inline"`
	Any                           any                            `queryParam:"inline"`

	Type UpdateFirewallConfigRedirectUnion2Type
}

func CreateUpdateFirewallConfigRedirectUnion2UpdateFirewallConfigRedirect2(updateFirewallConfigRedirect2 UpdateFirewallConfigRedirect2) UpdateFirewallConfigRedirectUnion2 {
	typ := UpdateFirewallConfigRedirectUnion2TypeUpdateFirewallConfigRedirect2

	return UpdateFirewallConfigRedirectUnion2{
		UpdateFirewallConfigRedirect2: &updateFirewallConfigRedirect2,
		Type:                          typ,
	}
}

func CreateUpdateFirewallConfigRedirectUnion2Any(anyT any) UpdateFirewallConfigRedirectUnion2 {
	typ := UpdateFirewallConfigRedirectUnion2TypeAny

	return UpdateFirewallConfigRedirectUnion2{
		Any:  anyT,
		Type: typ,
	}
}

func (u *UpdateFirewallConfigRedirectUnion2) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRedirect2 UpdateFirewallConfigRedirect2 = UpdateFirewallConfigRedirect2{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRedirect2, "", true, true); err == nil {
		u.UpdateFirewallConfigRedirect2 = &updateFirewallConfigRedirect2
		u.Type = UpdateFirewallConfigRedirectUnion2TypeUpdateFirewallConfigRedirect2
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = UpdateFirewallConfigRedirectUnion2TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRedirectUnion2", string(data))
}

func (u UpdateFirewallConfigRedirectUnion2) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRedirect2 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRedirect2, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRedirectUnion2: all fields are null")
}

type UpdateFirewallConfigMitigate2 struct {
	Action         ValueMitigateActionEnum2             `json:"action"`
	RateLimit      *UpdateFirewallConfigRateLimitUnion2 `json:"rateLimit,omitempty"`
	Redirect       *UpdateFirewallConfigRedirectUnion2  `json:"redirect,omitempty"`
	ActionDuration *string                              `json:"actionDuration,omitempty"`
	BypassSystem   *bool                                `json:"bypassSystem,omitempty"`
}

func (o *UpdateFirewallConfigMitigate2) GetAction() ValueMitigateActionEnum2 {
	if o == nil {
		return ValueMitigateActionEnum2("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigMitigate2) GetRateLimit() *UpdateFirewallConfigRateLimitUnion2 {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateFirewallConfigMitigate2) GetRedirect() *UpdateFirewallConfigRedirectUnion2 {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *UpdateFirewallConfigMitigate2) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *UpdateFirewallConfigMitigate2) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type ValueAction2 struct {
	Mitigate *UpdateFirewallConfigMitigate2 `json:"mitigate,omitempty"`
}

func (o *ValueAction2) GetMitigate() *UpdateFirewallConfigMitigate2 {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type UpdateFirewallConfigValue2 struct {
	Name           string                                `json:"name"`
	Description    *string                               `json:"description,omitempty"`
	Active         bool                                  `json:"active"`
	ConditionGroup []UpdateFirewallConfigConditionGroup2 `json:"conditionGroup"`
	Action         ValueAction2                          `json:"action"`
}

func (o *UpdateFirewallConfigValue2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateFirewallConfigValue2) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateFirewallConfigValue2) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateFirewallConfigValue2) GetConditionGroup() []UpdateFirewallConfigConditionGroup2 {
	if o == nil {
		return []UpdateFirewallConfigConditionGroup2{}
	}
	return o.ConditionGroup
}

func (o *UpdateFirewallConfigValue2) GetAction() ValueAction2 {
	if o == nil {
		return ValueAction2{}
	}
	return o.Action
}

// RulesUpdate - Update a custom rule
type RulesUpdate struct {
	Action ActionRulesUpdate          `json:"action"`
	ID     string                     `json:"id"`
	Value  UpdateFirewallConfigValue2 `json:"value"`
}

func (o *RulesUpdate) GetAction() ActionRulesUpdate {
	if o == nil {
		return ActionRulesUpdate("")
	}
	return o.Action
}

func (o *RulesUpdate) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *RulesUpdate) GetValue() UpdateFirewallConfigValue2 {
	if o == nil {
		return UpdateFirewallConfigValue2{}
	}
	return o.Value
}

type ActionRulesInsert string

const (
	ActionRulesInsertRulesInsert ActionRulesInsert = "rules.insert"
)

func (e ActionRulesInsert) ToPointer() *ActionRulesInsert {
	return &e
}
func (e *ActionRulesInsert) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "rules.insert":
		*e = ActionRulesInsert(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionRulesInsert: %v", v)
	}
}

type UpdateFirewallConfigType1 string

const (
	UpdateFirewallConfigType1Host             UpdateFirewallConfigType1 = "host"
	UpdateFirewallConfigType1Path             UpdateFirewallConfigType1 = "path"
	UpdateFirewallConfigType1Method           UpdateFirewallConfigType1 = "method"
	UpdateFirewallConfigType1Header           UpdateFirewallConfigType1 = "header"
	UpdateFirewallConfigType1Query            UpdateFirewallConfigType1 = "query"
	UpdateFirewallConfigType1Cookie           UpdateFirewallConfigType1 = "cookie"
	UpdateFirewallConfigType1TargetPath       UpdateFirewallConfigType1 = "target_path"
	UpdateFirewallConfigType1RawPath          UpdateFirewallConfigType1 = "raw_path"
	UpdateFirewallConfigType1IPAddress        UpdateFirewallConfigType1 = "ip_address"
	UpdateFirewallConfigType1Region           UpdateFirewallConfigType1 = "region"
	UpdateFirewallConfigType1Protocol         UpdateFirewallConfigType1 = "protocol"
	UpdateFirewallConfigType1Scheme           UpdateFirewallConfigType1 = "scheme"
	UpdateFirewallConfigType1Environment      UpdateFirewallConfigType1 = "environment"
	UpdateFirewallConfigType1UserAgent        UpdateFirewallConfigType1 = "user_agent"
	UpdateFirewallConfigType1GeoContinent     UpdateFirewallConfigType1 = "geo_continent"
	UpdateFirewallConfigType1GeoCountry       UpdateFirewallConfigType1 = "geo_country"
	UpdateFirewallConfigType1GeoCountryRegion UpdateFirewallConfigType1 = "geo_country_region"
	UpdateFirewallConfigType1GeoCity          UpdateFirewallConfigType1 = "geo_city"
	UpdateFirewallConfigType1GeoAsNumber      UpdateFirewallConfigType1 = "geo_as_number"
	UpdateFirewallConfigType1Ja4Digest        UpdateFirewallConfigType1 = "ja4_digest"
	UpdateFirewallConfigType1Ja3Digest        UpdateFirewallConfigType1 = "ja3_digest"
	UpdateFirewallConfigType1RateLimitAPIID   UpdateFirewallConfigType1 = "rate_limit_api_id"
)

func (e UpdateFirewallConfigType1) ToPointer() *UpdateFirewallConfigType1 {
	return &e
}
func (e *UpdateFirewallConfigType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "host":
		fallthrough
	case "path":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "query":
		fallthrough
	case "cookie":
		fallthrough
	case "target_path":
		fallthrough
	case "raw_path":
		fallthrough
	case "ip_address":
		fallthrough
	case "region":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "user_agent":
		fallthrough
	case "geo_continent":
		fallthrough
	case "geo_country":
		fallthrough
	case "geo_country_region":
		fallthrough
	case "geo_city":
		fallthrough
	case "geo_as_number":
		fallthrough
	case "ja4_digest":
		fallthrough
	case "ja3_digest":
		fallthrough
	case "rate_limit_api_id":
		*e = UpdateFirewallConfigType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigType1: %v", v)
	}
}

type UpdateFirewallConfigOp1 string

const (
	UpdateFirewallConfigOp1Re   UpdateFirewallConfigOp1 = "re"
	UpdateFirewallConfigOp1Eq   UpdateFirewallConfigOp1 = "eq"
	UpdateFirewallConfigOp1Neq  UpdateFirewallConfigOp1 = "neq"
	UpdateFirewallConfigOp1Ex   UpdateFirewallConfigOp1 = "ex"
	UpdateFirewallConfigOp1Nex  UpdateFirewallConfigOp1 = "nex"
	UpdateFirewallConfigOp1Inc  UpdateFirewallConfigOp1 = "inc"
	UpdateFirewallConfigOp1Ninc UpdateFirewallConfigOp1 = "ninc"
	UpdateFirewallConfigOp1Pre  UpdateFirewallConfigOp1 = "pre"
	UpdateFirewallConfigOp1Suf  UpdateFirewallConfigOp1 = "suf"
	UpdateFirewallConfigOp1Sub  UpdateFirewallConfigOp1 = "sub"
	UpdateFirewallConfigOp1Gt   UpdateFirewallConfigOp1 = "gt"
	UpdateFirewallConfigOp1Gte  UpdateFirewallConfigOp1 = "gte"
	UpdateFirewallConfigOp1Lt   UpdateFirewallConfigOp1 = "lt"
	UpdateFirewallConfigOp1Lte  UpdateFirewallConfigOp1 = "lte"
)

func (e UpdateFirewallConfigOp1) ToPointer() *UpdateFirewallConfigOp1 {
	return &e
}
func (e *UpdateFirewallConfigOp1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "re":
		fallthrough
	case "eq":
		fallthrough
	case "neq":
		fallthrough
	case "ex":
		fallthrough
	case "nex":
		fallthrough
	case "inc":
		fallthrough
	case "ninc":
		fallthrough
	case "pre":
		fallthrough
	case "suf":
		fallthrough
	case "sub":
		fallthrough
	case "gt":
		fallthrough
	case "gte":
		fallthrough
	case "lt":
		fallthrough
	case "lte":
		*e = UpdateFirewallConfigOp1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigOp1: %v", v)
	}
}

type UpdateFirewallConfigConditionValue1Type string

const (
	UpdateFirewallConfigConditionValue1TypeStr        UpdateFirewallConfigConditionValue1Type = "str"
	UpdateFirewallConfigConditionValue1TypeArrayOfStr UpdateFirewallConfigConditionValue1Type = "arrayOfStr"
	UpdateFirewallConfigConditionValue1TypeNumber     UpdateFirewallConfigConditionValue1Type = "number"
)

type UpdateFirewallConfigConditionValue1 struct {
	Str        *string  `queryParam:"inline"`
	ArrayOfStr []string `queryParam:"inline"`
	Number     *float64 `queryParam:"inline"`

	Type UpdateFirewallConfigConditionValue1Type
}

func CreateUpdateFirewallConfigConditionValue1Str(str string) UpdateFirewallConfigConditionValue1 {
	typ := UpdateFirewallConfigConditionValue1TypeStr

	return UpdateFirewallConfigConditionValue1{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateFirewallConfigConditionValue1ArrayOfStr(arrayOfStr []string) UpdateFirewallConfigConditionValue1 {
	typ := UpdateFirewallConfigConditionValue1TypeArrayOfStr

	return UpdateFirewallConfigConditionValue1{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateUpdateFirewallConfigConditionValue1Number(number float64) UpdateFirewallConfigConditionValue1 {
	typ := UpdateFirewallConfigConditionValue1TypeNumber

	return UpdateFirewallConfigConditionValue1{
		Number: &number,
		Type:   typ,
	}
}

func (u *UpdateFirewallConfigConditionValue1) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateFirewallConfigConditionValue1TypeStr
		return nil
	}

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateFirewallConfigConditionValue1TypeArrayOfStr
		return nil
	}

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateFirewallConfigConditionValue1TypeNumber
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigConditionValue1", string(data))
}

func (u UpdateFirewallConfigConditionValue1) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigConditionValue1: all fields are null")
}

type UpdateFirewallConfigCondition1 struct {
	Type  UpdateFirewallConfigType1            `json:"type"`
	Op    UpdateFirewallConfigOp1              `json:"op"`
	Neg   *bool                                `json:"neg,omitempty"`
	Key   *string                              `json:"key,omitempty"`
	Value *UpdateFirewallConfigConditionValue1 `json:"value,omitempty"`
}

func (o *UpdateFirewallConfigCondition1) GetType() UpdateFirewallConfigType1 {
	if o == nil {
		return UpdateFirewallConfigType1("")
	}
	return o.Type
}

func (o *UpdateFirewallConfigCondition1) GetOp() UpdateFirewallConfigOp1 {
	if o == nil {
		return UpdateFirewallConfigOp1("")
	}
	return o.Op
}

func (o *UpdateFirewallConfigCondition1) GetNeg() *bool {
	if o == nil {
		return nil
	}
	return o.Neg
}

func (o *UpdateFirewallConfigCondition1) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateFirewallConfigCondition1) GetValue() *UpdateFirewallConfigConditionValue1 {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateFirewallConfigConditionGroup1 struct {
	Conditions []UpdateFirewallConfigCondition1 `json:"conditions"`
}

func (o *UpdateFirewallConfigConditionGroup1) GetConditions() []UpdateFirewallConfigCondition1 {
	if o == nil {
		return []UpdateFirewallConfigCondition1{}
	}
	return o.Conditions
}

type ValueMitigateActionEnum1 string

const (
	ValueMitigateActionEnum1Log       ValueMitigateActionEnum1 = "log"
	ValueMitigateActionEnum1Challenge ValueMitigateActionEnum1 = "challenge"
	ValueMitigateActionEnum1Deny      ValueMitigateActionEnum1 = "deny"
	ValueMitigateActionEnum1Bypass    ValueMitigateActionEnum1 = "bypass"
	ValueMitigateActionEnum1RateLimit ValueMitigateActionEnum1 = "rate_limit"
	ValueMitigateActionEnum1Redirect  ValueMitigateActionEnum1 = "redirect"
)

func (e ValueMitigateActionEnum1) ToPointer() *ValueMitigateActionEnum1 {
	return &e
}
func (e *ValueMitigateActionEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = ValueMitigateActionEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueMitigateActionEnum1: %v", v)
	}
}

type UpdateFirewallConfigAlgo1 string

const (
	UpdateFirewallConfigAlgo1FixedWindow UpdateFirewallConfigAlgo1 = "fixed_window"
	UpdateFirewallConfigAlgo1TokenBucket UpdateFirewallConfigAlgo1 = "token_bucket"
)

func (e UpdateFirewallConfigAlgo1) ToPointer() *UpdateFirewallConfigAlgo1 {
	return &e
}
func (e *UpdateFirewallConfigAlgo1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateFirewallConfigAlgo1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateFirewallConfigAlgo1: %v", v)
	}
}

type RateLimitActionValueEnum1 string

const (
	RateLimitActionValueEnum1Log       RateLimitActionValueEnum1 = "log"
	RateLimitActionValueEnum1Challenge RateLimitActionValueEnum1 = "challenge"
	RateLimitActionValueEnum1Deny      RateLimitActionValueEnum1 = "deny"
	RateLimitActionValueEnum1RateLimit RateLimitActionValueEnum1 = "rate_limit"
)

func (e RateLimitActionValueEnum1) ToPointer() *RateLimitActionValueEnum1 {
	return &e
}
func (e *RateLimitActionValueEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "log":
		fallthrough
	case "challenge":
		fallthrough
	case "deny":
		fallthrough
	case "rate_limit":
		*e = RateLimitActionValueEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RateLimitActionValueEnum1: %v", v)
	}
}

type ValueActionUnion1Type string

const (
	ValueActionUnion1TypeRateLimitActionValueEnum1 ValueActionUnion1Type = "rateLimit_action_value_enum_1"
	ValueActionUnion1TypeAny                       ValueActionUnion1Type = "any"
)

type ValueActionUnion1 struct {
	RateLimitActionValueEnum1 *RateLimitActionValueEnum1 `queryParam:"inline"`
	Any                       any                        `queryParam:"inline"`

	Type ValueActionUnion1Type
}

func CreateValueActionUnion1RateLimitActionValueEnum1(rateLimitActionValueEnum1 RateLimitActionValueEnum1) ValueActionUnion1 {
	typ := ValueActionUnion1TypeRateLimitActionValueEnum1

	return ValueActionUnion1{
		RateLimitActionValueEnum1: &rateLimitActionValueEnum1,
		Type:                      typ,
	}
}

func CreateValueActionUnion1Any(anyT any) ValueActionUnion1 {
	typ := ValueActionUnion1TypeAny

	return ValueActionUnion1{
		Any:  anyT,
		Type: typ,
	}
}

func (u *ValueActionUnion1) UnmarshalJSON(data []byte) error {

	var rateLimitActionValueEnum1 RateLimitActionValueEnum1 = RateLimitActionValueEnum1("")
	if err := utils.UnmarshalJSON(data, &rateLimitActionValueEnum1, "", true, true); err == nil {
		u.RateLimitActionValueEnum1 = &rateLimitActionValueEnum1
		u.Type = ValueActionUnion1TypeRateLimitActionValueEnum1
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = ValueActionUnion1TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ValueActionUnion1", string(data))
}

func (u ValueActionUnion1) MarshalJSON() ([]byte, error) {
	if u.RateLimitActionValueEnum1 != nil {
		return utils.MarshalJSON(u.RateLimitActionValueEnum1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type ValueActionUnion1: all fields are null")
}

type UpdateFirewallConfigRateLimit1 struct {
	Algo   UpdateFirewallConfigAlgo1 `json:"algo"`
	Window float64                   `json:"window"`
	Limit  float64                   `json:"limit"`
	Keys   []string                  `json:"keys"`
	Action *ValueActionUnion1        `json:"action,omitempty"`
}

func (o *UpdateFirewallConfigRateLimit1) GetAlgo() UpdateFirewallConfigAlgo1 {
	if o == nil {
		return UpdateFirewallConfigAlgo1("")
	}
	return o.Algo
}

func (o *UpdateFirewallConfigRateLimit1) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *UpdateFirewallConfigRateLimit1) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateFirewallConfigRateLimit1) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

func (o *UpdateFirewallConfigRateLimit1) GetAction() *ValueActionUnion1 {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateFirewallConfigRateLimitUnion1Type string

const (
	UpdateFirewallConfigRateLimitUnion1TypeUpdateFirewallConfigRateLimit1 UpdateFirewallConfigRateLimitUnion1Type = "updateFirewallConfig_rateLimit_1"
	UpdateFirewallConfigRateLimitUnion1TypeAny                            UpdateFirewallConfigRateLimitUnion1Type = "any"
)

type UpdateFirewallConfigRateLimitUnion1 struct {
	UpdateFirewallConfigRateLimit1 *UpdateFirewallConfigRateLimit1 `queryParam:"inline"`
	Any                            any                             `queryParam:"inline"`

	Type UpdateFirewallConfigRateLimitUnion1Type
}

func CreateUpdateFirewallConfigRateLimitUnion1UpdateFirewallConfigRateLimit1(updateFirewallConfigRateLimit1 UpdateFirewallConfigRateLimit1) UpdateFirewallConfigRateLimitUnion1 {
	typ := UpdateFirewallConfigRateLimitUnion1TypeUpdateFirewallConfigRateLimit1

	return UpdateFirewallConfigRateLimitUnion1{
		UpdateFirewallConfigRateLimit1: &updateFirewallConfigRateLimit1,
		Type:                           typ,
	}
}

func CreateUpdateFirewallConfigRateLimitUnion1Any(anyT any) UpdateFirewallConfigRateLimitUnion1 {
	typ := UpdateFirewallConfigRateLimitUnion1TypeAny

	return UpdateFirewallConfigRateLimitUnion1{
		Any:  anyT,
		Type: typ,
	}
}

func (u *UpdateFirewallConfigRateLimitUnion1) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRateLimit1 UpdateFirewallConfigRateLimit1 = UpdateFirewallConfigRateLimit1{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRateLimit1, "", true, true); err == nil {
		u.UpdateFirewallConfigRateLimit1 = &updateFirewallConfigRateLimit1
		u.Type = UpdateFirewallConfigRateLimitUnion1TypeUpdateFirewallConfigRateLimit1
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = UpdateFirewallConfigRateLimitUnion1TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRateLimitUnion1", string(data))
}

func (u UpdateFirewallConfigRateLimitUnion1) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRateLimit1 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRateLimit1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRateLimitUnion1: all fields are null")
}

type UpdateFirewallConfigRedirect1 struct {
	Location  string `json:"location"`
	Permanent bool   `json:"permanent"`
}

func (o *UpdateFirewallConfigRedirect1) GetLocation() string {
	if o == nil {
		return ""
	}
	return o.Location
}

func (o *UpdateFirewallConfigRedirect1) GetPermanent() bool {
	if o == nil {
		return false
	}
	return o.Permanent
}

type UpdateFirewallConfigRedirectUnion1Type string

const (
	UpdateFirewallConfigRedirectUnion1TypeUpdateFirewallConfigRedirect1 UpdateFirewallConfigRedirectUnion1Type = "updateFirewallConfig_redirect_1"
	UpdateFirewallConfigRedirectUnion1TypeAny                           UpdateFirewallConfigRedirectUnion1Type = "any"
)

type UpdateFirewallConfigRedirectUnion1 struct {
	UpdateFirewallConfigRedirect1 *UpdateFirewallConfigRedirect1 `queryParam:"inline"`
	Any                           any                            `queryParam:"inline"`

	Type UpdateFirewallConfigRedirectUnion1Type
}

func CreateUpdateFirewallConfigRedirectUnion1UpdateFirewallConfigRedirect1(updateFirewallConfigRedirect1 UpdateFirewallConfigRedirect1) UpdateFirewallConfigRedirectUnion1 {
	typ := UpdateFirewallConfigRedirectUnion1TypeUpdateFirewallConfigRedirect1

	return UpdateFirewallConfigRedirectUnion1{
		UpdateFirewallConfigRedirect1: &updateFirewallConfigRedirect1,
		Type:                          typ,
	}
}

func CreateUpdateFirewallConfigRedirectUnion1Any(anyT any) UpdateFirewallConfigRedirectUnion1 {
	typ := UpdateFirewallConfigRedirectUnion1TypeAny

	return UpdateFirewallConfigRedirectUnion1{
		Any:  anyT,
		Type: typ,
	}
}

func (u *UpdateFirewallConfigRedirectUnion1) UnmarshalJSON(data []byte) error {

	var updateFirewallConfigRedirect1 UpdateFirewallConfigRedirect1 = UpdateFirewallConfigRedirect1{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRedirect1, "", true, true); err == nil {
		u.UpdateFirewallConfigRedirect1 = &updateFirewallConfigRedirect1
		u.Type = UpdateFirewallConfigRedirectUnion1TypeUpdateFirewallConfigRedirect1
		return nil
	}

	var anyVar any = nil
	if err := utils.UnmarshalJSON(data, &anyVar, "", true, true); err == nil {
		u.Any = anyVar
		u.Type = UpdateFirewallConfigRedirectUnion1TypeAny
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRedirectUnion1", string(data))
}

func (u UpdateFirewallConfigRedirectUnion1) MarshalJSON() ([]byte, error) {
	if u.UpdateFirewallConfigRedirect1 != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRedirect1, "", true)
	}

	if u.Any != nil {
		return utils.MarshalJSON(u.Any, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRedirectUnion1: all fields are null")
}

type UpdateFirewallConfigMitigate1 struct {
	Action         ValueMitigateActionEnum1             `json:"action"`
	RateLimit      *UpdateFirewallConfigRateLimitUnion1 `json:"rateLimit,omitempty"`
	Redirect       *UpdateFirewallConfigRedirectUnion1  `json:"redirect,omitempty"`
	ActionDuration *string                              `json:"actionDuration,omitempty"`
	BypassSystem   *bool                                `json:"bypassSystem,omitempty"`
}

func (o *UpdateFirewallConfigMitigate1) GetAction() ValueMitigateActionEnum1 {
	if o == nil {
		return ValueMitigateActionEnum1("")
	}
	return o.Action
}

func (o *UpdateFirewallConfigMitigate1) GetRateLimit() *UpdateFirewallConfigRateLimitUnion1 {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateFirewallConfigMitigate1) GetRedirect() *UpdateFirewallConfigRedirectUnion1 {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *UpdateFirewallConfigMitigate1) GetActionDuration() *string {
	if o == nil {
		return nil
	}
	return o.ActionDuration
}

func (o *UpdateFirewallConfigMitigate1) GetBypassSystem() *bool {
	if o == nil {
		return nil
	}
	return o.BypassSystem
}

type ValueAction1 struct {
	Mitigate *UpdateFirewallConfigMitigate1 `json:"mitigate,omitempty"`
}

func (o *ValueAction1) GetMitigate() *UpdateFirewallConfigMitigate1 {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type UpdateFirewallConfigValue1 struct {
	Name           string                                `json:"name"`
	Description    *string                               `json:"description,omitempty"`
	Active         bool                                  `json:"active"`
	ConditionGroup []UpdateFirewallConfigConditionGroup1 `json:"conditionGroup"`
	Action         ValueAction1                          `json:"action"`
}

func (o *UpdateFirewallConfigValue1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateFirewallConfigValue1) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateFirewallConfigValue1) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateFirewallConfigValue1) GetConditionGroup() []UpdateFirewallConfigConditionGroup1 {
	if o == nil {
		return []UpdateFirewallConfigConditionGroup1{}
	}
	return o.ConditionGroup
}

func (o *UpdateFirewallConfigValue1) GetAction() ValueAction1 {
	if o == nil {
		return ValueAction1{}
	}
	return o.Action
}

// RulesInsert - Add a custom rule
type RulesInsert struct {
	Action ActionRulesInsert          `json:"action"`
	ID     any                        `json:"id,omitempty"`
	Value  UpdateFirewallConfigValue1 `json:"value"`
}

func (o *RulesInsert) GetAction() ActionRulesInsert {
	if o == nil {
		return ActionRulesInsert("")
	}
	return o.Action
}

func (o *RulesInsert) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *RulesInsert) GetValue() UpdateFirewallConfigValue1 {
	if o == nil {
		return UpdateFirewallConfigValue1{}
	}
	return o.Value
}

type ActionFirewallEnabled string

const (
	ActionFirewallEnabledFirewallEnabled ActionFirewallEnabled = "firewallEnabled"
)

func (e ActionFirewallEnabled) ToPointer() *ActionFirewallEnabled {
	return &e
}
func (e *ActionFirewallEnabled) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "firewallEnabled":
		*e = ActionFirewallEnabled(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ActionFirewallEnabled: %v", v)
	}
}

// FirewallEnabled - Enable Firewall
type FirewallEnabled struct {
	Action ActionFirewallEnabled `json:"action"`
	ID     any                   `json:"id,omitempty"`
	Value  bool                  `json:"value"`
}

func (o *FirewallEnabled) GetAction() ActionFirewallEnabled {
	if o == nil {
		return ActionFirewallEnabled("")
	}
	return o.Action
}

func (o *FirewallEnabled) GetID() any {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *FirewallEnabled) GetValue() bool {
	if o == nil {
		return false
	}
	return o.Value
}

type UpdateFirewallConfigRequestBodyUnionType string

const (
	UpdateFirewallConfigRequestBodyUnionTypeFirewallEnabled                 UpdateFirewallConfigRequestBodyUnionType = "FirewallEnabled"
	UpdateFirewallConfigRequestBodyUnionTypeRulesInsert                     UpdateFirewallConfigRequestBodyUnionType = "RulesInsert"
	UpdateFirewallConfigRequestBodyUnionTypeRulesUpdate                     UpdateFirewallConfigRequestBodyUnionType = "RulesUpdate"
	UpdateFirewallConfigRequestBodyUnionTypeRulesRemove                     UpdateFirewallConfigRequestBodyUnionType = "RulesRemove"
	UpdateFirewallConfigRequestBodyUnionTypeRulesPriority                   UpdateFirewallConfigRequestBodyUnionType = "RulesPriority"
	UpdateFirewallConfigRequestBodyUnionTypeCrsUpdate                       UpdateFirewallConfigRequestBodyUnionType = "CrsUpdate"
	UpdateFirewallConfigRequestBodyUnionTypeCrsDisable                      UpdateFirewallConfigRequestBodyUnionType = "CrsDisable"
	UpdateFirewallConfigRequestBodyUnionTypeIPInsert                        UpdateFirewallConfigRequestBodyUnionType = "IPInsert"
	UpdateFirewallConfigRequestBodyUnionTypeIPUpdate                        UpdateFirewallConfigRequestBodyUnionType = "IPUpdate"
	UpdateFirewallConfigRequestBodyUnionTypeIPRemove                        UpdateFirewallConfigRequestBodyUnionType = "IPRemove"
	UpdateFirewallConfigRequestBodyUnionTypeManagedRulesUpdate              UpdateFirewallConfigRequestBodyUnionType = "ManagedRulesUpdate"
	UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody UpdateFirewallConfigRequestBodyUnionType = "updateFirewallConfig_RequestBody"
)

type UpdateFirewallConfigRequestBodyUnion struct {
	FirewallEnabled                 *FirewallEnabled                 `queryParam:"inline"`
	RulesInsert                     *RulesInsert                     `queryParam:"inline"`
	RulesUpdate                     *RulesUpdate                     `queryParam:"inline"`
	RulesRemove                     *RulesRemove                     `queryParam:"inline"`
	RulesPriority                   *RulesPriority                   `queryParam:"inline"`
	CrsUpdate                       *CrsUpdate                       `queryParam:"inline"`
	CrsDisable                      *CrsDisable                      `queryParam:"inline"`
	IPInsert                        *IPInsert                        `queryParam:"inline"`
	IPUpdate                        *IPUpdate                        `queryParam:"inline"`
	IPRemove                        *IPRemove                        `queryParam:"inline"`
	ManagedRulesUpdate              *ManagedRulesUpdate              `queryParam:"inline"`
	UpdateFirewallConfigRequestBody *UpdateFirewallConfigRequestBody `queryParam:"inline"`

	Type UpdateFirewallConfigRequestBodyUnionType
}

func CreateUpdateFirewallConfigRequestBodyUnionFirewallEnabled(firewallEnabled FirewallEnabled) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeFirewallEnabled

	return UpdateFirewallConfigRequestBodyUnion{
		FirewallEnabled: &firewallEnabled,
		Type:            typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionRulesInsert(rulesInsert RulesInsert) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRulesInsert

	return UpdateFirewallConfigRequestBodyUnion{
		RulesInsert: &rulesInsert,
		Type:        typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionRulesUpdate(rulesUpdate RulesUpdate) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRulesUpdate

	return UpdateFirewallConfigRequestBodyUnion{
		RulesUpdate: &rulesUpdate,
		Type:        typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionRulesRemove(rulesRemove RulesRemove) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRulesRemove

	return UpdateFirewallConfigRequestBodyUnion{
		RulesRemove: &rulesRemove,
		Type:        typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionRulesPriority(rulesPriority RulesPriority) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeRulesPriority

	return UpdateFirewallConfigRequestBodyUnion{
		RulesPriority: &rulesPriority,
		Type:          typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionCrsUpdate(crsUpdate CrsUpdate) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeCrsUpdate

	return UpdateFirewallConfigRequestBodyUnion{
		CrsUpdate: &crsUpdate,
		Type:      typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionCrsDisable(crsDisable CrsDisable) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeCrsDisable

	return UpdateFirewallConfigRequestBodyUnion{
		CrsDisable: &crsDisable,
		Type:       typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionIPInsert(ipInsert IPInsert) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeIPInsert

	return UpdateFirewallConfigRequestBodyUnion{
		IPInsert: &ipInsert,
		Type:     typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionIPUpdate(ipUpdate IPUpdate) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeIPUpdate

	return UpdateFirewallConfigRequestBodyUnion{
		IPUpdate: &ipUpdate,
		Type:     typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionIPRemove(ipRemove IPRemove) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeIPRemove

	return UpdateFirewallConfigRequestBodyUnion{
		IPRemove: &ipRemove,
		Type:     typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionManagedRulesUpdate(managedRulesUpdate ManagedRulesUpdate) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeManagedRulesUpdate

	return UpdateFirewallConfigRequestBodyUnion{
		ManagedRulesUpdate: &managedRulesUpdate,
		Type:               typ,
	}
}

func CreateUpdateFirewallConfigRequestBodyUnionUpdateFirewallConfigRequestBody(updateFirewallConfigRequestBody UpdateFirewallConfigRequestBody) UpdateFirewallConfigRequestBodyUnion {
	typ := UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody

	return UpdateFirewallConfigRequestBodyUnion{
		UpdateFirewallConfigRequestBody: &updateFirewallConfigRequestBody,
		Type:                            typ,
	}
}

func (u *UpdateFirewallConfigRequestBodyUnion) UnmarshalJSON(data []byte) error {

	var firewallEnabled FirewallEnabled = FirewallEnabled{}
	if err := utils.UnmarshalJSON(data, &firewallEnabled, "", true, true); err == nil {
		u.FirewallEnabled = &firewallEnabled
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeFirewallEnabled
		return nil
	}

	var rulesInsert RulesInsert = RulesInsert{}
	if err := utils.UnmarshalJSON(data, &rulesInsert, "", true, true); err == nil {
		u.RulesInsert = &rulesInsert
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRulesInsert
		return nil
	}

	var rulesUpdate RulesUpdate = RulesUpdate{}
	if err := utils.UnmarshalJSON(data, &rulesUpdate, "", true, true); err == nil {
		u.RulesUpdate = &rulesUpdate
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRulesUpdate
		return nil
	}

	var rulesRemove RulesRemove = RulesRemove{}
	if err := utils.UnmarshalJSON(data, &rulesRemove, "", true, true); err == nil {
		u.RulesRemove = &rulesRemove
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRulesRemove
		return nil
	}

	var rulesPriority RulesPriority = RulesPriority{}
	if err := utils.UnmarshalJSON(data, &rulesPriority, "", true, true); err == nil {
		u.RulesPriority = &rulesPriority
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeRulesPriority
		return nil
	}

	var crsUpdate CrsUpdate = CrsUpdate{}
	if err := utils.UnmarshalJSON(data, &crsUpdate, "", true, true); err == nil {
		u.CrsUpdate = &crsUpdate
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeCrsUpdate
		return nil
	}

	var crsDisable CrsDisable = CrsDisable{}
	if err := utils.UnmarshalJSON(data, &crsDisable, "", true, true); err == nil {
		u.CrsDisable = &crsDisable
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeCrsDisable
		return nil
	}

	var ipInsert IPInsert = IPInsert{}
	if err := utils.UnmarshalJSON(data, &ipInsert, "", true, true); err == nil {
		u.IPInsert = &ipInsert
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeIPInsert
		return nil
	}

	var ipUpdate IPUpdate = IPUpdate{}
	if err := utils.UnmarshalJSON(data, &ipUpdate, "", true, true); err == nil {
		u.IPUpdate = &ipUpdate
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeIPUpdate
		return nil
	}

	var ipRemove IPRemove = IPRemove{}
	if err := utils.UnmarshalJSON(data, &ipRemove, "", true, true); err == nil {
		u.IPRemove = &ipRemove
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeIPRemove
		return nil
	}

	var managedRulesUpdate ManagedRulesUpdate = ManagedRulesUpdate{}
	if err := utils.UnmarshalJSON(data, &managedRulesUpdate, "", true, true); err == nil {
		u.ManagedRulesUpdate = &managedRulesUpdate
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeManagedRulesUpdate
		return nil
	}

	var updateFirewallConfigRequestBody UpdateFirewallConfigRequestBody = UpdateFirewallConfigRequestBody{}
	if err := utils.UnmarshalJSON(data, &updateFirewallConfigRequestBody, "", true, true); err == nil {
		u.UpdateFirewallConfigRequestBody = &updateFirewallConfigRequestBody
		u.Type = UpdateFirewallConfigRequestBodyUnionTypeUpdateFirewallConfigRequestBody
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateFirewallConfigRequestBodyUnion", string(data))
}

func (u UpdateFirewallConfigRequestBodyUnion) MarshalJSON() ([]byte, error) {
	if u.FirewallEnabled != nil {
		return utils.MarshalJSON(u.FirewallEnabled, "", true)
	}

	if u.RulesInsert != nil {
		return utils.MarshalJSON(u.RulesInsert, "", true)
	}

	if u.RulesUpdate != nil {
		return utils.MarshalJSON(u.RulesUpdate, "", true)
	}

	if u.RulesRemove != nil {
		return utils.MarshalJSON(u.RulesRemove, "", true)
	}

	if u.RulesPriority != nil {
		return utils.MarshalJSON(u.RulesPriority, "", true)
	}

	if u.CrsUpdate != nil {
		return utils.MarshalJSON(u.CrsUpdate, "", true)
	}

	if u.CrsDisable != nil {
		return utils.MarshalJSON(u.CrsDisable, "", true)
	}

	if u.IPInsert != nil {
		return utils.MarshalJSON(u.IPInsert, "", true)
	}

	if u.IPUpdate != nil {
		return utils.MarshalJSON(u.IPUpdate, "", true)
	}

	if u.IPRemove != nil {
		return utils.MarshalJSON(u.IPRemove, "", true)
	}

	if u.ManagedRulesUpdate != nil {
		return utils.MarshalJSON(u.ManagedRulesUpdate, "", true)
	}

	if u.UpdateFirewallConfigRequestBody != nil {
		return utils.MarshalJSON(u.UpdateFirewallConfigRequestBody, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateFirewallConfigRequestBodyUnion: all fields are null")
}

type UpdateFirewallConfigRequest struct {
	ProjectID string `queryParam:"style=form,explode=true,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                              `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateFirewallConfigRequestBodyUnion `request:"mediaType=application/json"`
}

func (o *UpdateFirewallConfigRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateFirewallConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateFirewallConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateFirewallConfigRequest) GetRequestBody() UpdateFirewallConfigRequestBodyUnion {
	if o == nil {
		return UpdateFirewallConfigRequestBodyUnion{}
	}
	return o.RequestBody
}

type UpdateFirewallConfigResponseBody struct {
}

type UpdateFirewallConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateFirewallConfigResponseBody
}

func (o *UpdateFirewallConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateFirewallConfigResponse) GetObject() *UpdateFirewallConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
