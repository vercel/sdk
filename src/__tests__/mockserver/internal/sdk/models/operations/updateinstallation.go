// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateInstallationType string

const (
	UpdateInstallationTypePrepayment   UpdateInstallationType = "prepayment"
	UpdateInstallationTypeSubscription UpdateInstallationType = "subscription"
)

func (e UpdateInstallationType) ToPointer() *UpdateInstallationType {
	return &e
}
func (e *UpdateInstallationType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prepayment":
		fallthrough
	case "subscription":
		*e = UpdateInstallationType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInstallationType: %v", v)
	}
}

type UpdateInstallationDetail struct {
	Label string  `json:"label"`
	Value *string `json:"value,omitempty"`
}

func (o *UpdateInstallationDetail) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UpdateInstallationDetail) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateInstallationHighlightedDetail struct {
	Label string  `json:"label"`
	Value *string `json:"value,omitempty"`
}

func (o *UpdateInstallationHighlightedDetail) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UpdateInstallationHighlightedDetail) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateInstallationBillingPlan struct {
	ID                    string                                `json:"id"`
	Type                  UpdateInstallationType                `json:"type"`
	Name                  string                                `json:"name"`
	Description           *string                               `json:"description,omitempty"`
	PaymentMethodRequired *bool                                 `json:"paymentMethodRequired,omitempty"`
	Cost                  *string                               `json:"cost,omitempty"`
	Details               []UpdateInstallationDetail            `json:"details,omitempty"`
	HighlightedDetails    []UpdateInstallationHighlightedDetail `json:"highlightedDetails,omitempty"`
	EffectiveDate         *string                               `json:"effectiveDate,omitempty"`
	AdditionalProperties  map[string]any                        `additionalProperties:"true" json:"-"`
}

func (u UpdateInstallationBillingPlan) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateInstallationBillingPlan) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"id", "type", "name"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateInstallationBillingPlan) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateInstallationBillingPlan) GetType() UpdateInstallationType {
	if o == nil {
		return UpdateInstallationType("")
	}
	return o.Type
}

func (o *UpdateInstallationBillingPlan) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateInstallationBillingPlan) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateInstallationBillingPlan) GetPaymentMethodRequired() *bool {
	if o == nil {
		return nil
	}
	return o.PaymentMethodRequired
}

func (o *UpdateInstallationBillingPlan) GetCost() *string {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *UpdateInstallationBillingPlan) GetDetails() []UpdateInstallationDetail {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *UpdateInstallationBillingPlan) GetHighlightedDetails() []UpdateInstallationHighlightedDetail {
	if o == nil {
		return nil
	}
	return o.HighlightedDetails
}

func (o *UpdateInstallationBillingPlan) GetEffectiveDate() *string {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *UpdateInstallationBillingPlan) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type UpdateInstallationLevel string

const (
	UpdateInstallationLevelInfo  UpdateInstallationLevel = "info"
	UpdateInstallationLevelWarn  UpdateInstallationLevel = "warn"
	UpdateInstallationLevelError UpdateInstallationLevel = "error"
)

func (e UpdateInstallationLevel) ToPointer() *UpdateInstallationLevel {
	return &e
}
func (e *UpdateInstallationLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		*e = UpdateInstallationLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInstallationLevel: %v", v)
	}
}

type UpdateInstallationNotification struct {
	Level   UpdateInstallationLevel `json:"level"`
	Title   string                  `json:"title"`
	Message *string                 `json:"message,omitempty"`
	Href    *string                 `json:"href,omitempty"`
}

func (o *UpdateInstallationNotification) GetLevel() UpdateInstallationLevel {
	if o == nil {
		return UpdateInstallationLevel("")
	}
	return o.Level
}

func (o *UpdateInstallationNotification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateInstallationNotification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *UpdateInstallationNotification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

type UpdateInstallationRequestBody struct {
	BillingPlan  *UpdateInstallationBillingPlan  `json:"billingPlan,omitempty"`
	Notification *UpdateInstallationNotification `json:"notification,omitempty"`
}

func (o *UpdateInstallationRequestBody) GetBillingPlan() *UpdateInstallationBillingPlan {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateInstallationRequestBody) GetNotification() *UpdateInstallationNotification {
	if o == nil {
		return nil
	}
	return o.Notification
}

type UpdateInstallationRequest struct {
	IntegrationConfigurationID string                         `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	RequestBody                *UpdateInstallationRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateInstallationRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *UpdateInstallationRequest) GetRequestBody() *UpdateInstallationRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateInstallationResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateInstallationResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
