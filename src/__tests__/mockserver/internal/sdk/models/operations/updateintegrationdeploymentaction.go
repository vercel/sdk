// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateIntegrationDeploymentActionStatus string

const (
	UpdateIntegrationDeploymentActionStatusRunning   UpdateIntegrationDeploymentActionStatus = "running"
	UpdateIntegrationDeploymentActionStatusSucceeded UpdateIntegrationDeploymentActionStatus = "succeeded"
	UpdateIntegrationDeploymentActionStatusFailed    UpdateIntegrationDeploymentActionStatus = "failed"
)

func (e UpdateIntegrationDeploymentActionStatus) ToPointer() *UpdateIntegrationDeploymentActionStatus {
	return &e
}
func (e *UpdateIntegrationDeploymentActionStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "running":
		fallthrough
	case "succeeded":
		fallthrough
	case "failed":
		*e = UpdateIntegrationDeploymentActionStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateIntegrationDeploymentActionStatus: %v", v)
	}
}

type UpdateIntegrationDeploymentActionSecret struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

func (o *UpdateIntegrationDeploymentActionSecret) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateIntegrationDeploymentActionSecret) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type Outcome struct {
	Kind    string                                    `json:"kind"`
	Secrets []UpdateIntegrationDeploymentActionSecret `json:"secrets"`
}

func (o *Outcome) GetKind() string {
	if o == nil {
		return ""
	}
	return o.Kind
}

func (o *Outcome) GetSecrets() []UpdateIntegrationDeploymentActionSecret {
	if o == nil {
		return []UpdateIntegrationDeploymentActionSecret{}
	}
	return o.Secrets
}

type OutcomeUnionType string

const (
	OutcomeUnionTypeOutcome OutcomeUnionType = "outcome"
)

type OutcomeUnion struct {
	Outcome *Outcome `queryParam:"inline"`

	Type OutcomeUnionType
}

func CreateOutcomeUnionOutcome(outcome Outcome) OutcomeUnion {
	typ := OutcomeUnionTypeOutcome

	return OutcomeUnion{
		Outcome: &outcome,
		Type:    typ,
	}
}

func (u *OutcomeUnion) UnmarshalJSON(data []byte) error {

	var outcome Outcome = Outcome{}
	if err := utils.UnmarshalJSON(data, &outcome, "", true, true); err == nil {
		u.Outcome = &outcome
		u.Type = OutcomeUnionTypeOutcome
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for OutcomeUnion", string(data))
}

func (u OutcomeUnion) MarshalJSON() ([]byte, error) {
	if u.Outcome != nil {
		return utils.MarshalJSON(u.Outcome, "", true)
	}

	return nil, errors.New("could not marshal union type OutcomeUnion: all fields are null")
}

type UpdateIntegrationDeploymentActionRequestBody struct {
	Status     *UpdateIntegrationDeploymentActionStatus `json:"status,omitempty"`
	StatusText *string                                  `json:"statusText,omitempty"`
	Outcomes   []OutcomeUnion                           `json:"outcomes,omitempty"`
}

func (o *UpdateIntegrationDeploymentActionRequestBody) GetStatus() *UpdateIntegrationDeploymentActionStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateIntegrationDeploymentActionRequestBody) GetStatusText() *string {
	if o == nil {
		return nil
	}
	return o.StatusText
}

func (o *UpdateIntegrationDeploymentActionRequestBody) GetOutcomes() []OutcomeUnion {
	if o == nil {
		return nil
	}
	return o.Outcomes
}

type UpdateIntegrationDeploymentActionRequest struct {
	DeploymentID               string                                        `pathParam:"style=simple,explode=false,name=deploymentId"`
	IntegrationConfigurationID string                                        `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	ResourceID                 string                                        `pathParam:"style=simple,explode=false,name=resourceId"`
	Action                     string                                        `pathParam:"style=simple,explode=false,name=action"`
	RequestBody                *UpdateIntegrationDeploymentActionRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateIntegrationDeploymentActionRequest) GetDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.DeploymentID
}

func (o *UpdateIntegrationDeploymentActionRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *UpdateIntegrationDeploymentActionRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *UpdateIntegrationDeploymentActionRequest) GetAction() string {
	if o == nil {
		return ""
	}
	return o.Action
}

func (o *UpdateIntegrationDeploymentActionRequest) GetRequestBody() *UpdateIntegrationDeploymentActionRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateIntegrationDeploymentActionResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateIntegrationDeploymentActionResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
