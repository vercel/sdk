// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateInvoiceAction string

const (
	UpdateInvoiceActionRefund UpdateInvoiceAction = "refund"
)

func (e UpdateInvoiceAction) ToPointer() *UpdateInvoiceAction {
	return &e
}
func (e *UpdateInvoiceAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "refund":
		*e = UpdateInvoiceAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateInvoiceAction: %v", v)
	}
}

type Refund struct {
	Action UpdateInvoiceAction `json:"action"`
	// Refund reason.
	Reason string `json:"reason"`
	// The total amount to be refunded. Must be less than or equal to the total amount of the invoice.
	Total string `json:"total"`
}

func (r Refund) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(r, "", false)
}

func (r *Refund) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &r, "", false, []string{"action", "reason", "total"}); err != nil {
		return err
	}
	return nil
}

func (o *Refund) GetAction() UpdateInvoiceAction {
	if o == nil {
		return UpdateInvoiceAction("")
	}
	return o.Action
}

func (o *Refund) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

func (o *Refund) GetTotal() string {
	if o == nil {
		return ""
	}
	return o.Total
}

type UpdateInvoiceRequestBodyType string

const (
	UpdateInvoiceRequestBodyTypeRefund UpdateInvoiceRequestBodyType = "Refund"
)

type UpdateInvoiceRequestBody struct {
	Refund *Refund `queryParam:"inline"`

	Type UpdateInvoiceRequestBodyType
}

func CreateUpdateInvoiceRequestBodyRefund(refund Refund) UpdateInvoiceRequestBody {
	typ := UpdateInvoiceRequestBodyTypeRefund

	return UpdateInvoiceRequestBody{
		Refund: &refund,
		Type:   typ,
	}
}

func (u *UpdateInvoiceRequestBody) UnmarshalJSON(data []byte) error {

	var refund Refund = Refund{}
	if err := utils.UnmarshalJSON(data, &refund, "", true, nil); err == nil {
		u.Refund = &refund
		u.Type = UpdateInvoiceRequestBodyTypeRefund
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateInvoiceRequestBody", string(data))
}

func (u UpdateInvoiceRequestBody) MarshalJSON() ([]byte, error) {
	if u.Refund != nil {
		return utils.MarshalJSON(u.Refund, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateInvoiceRequestBody: all fields are null")
}

type UpdateInvoiceRequest struct {
	IntegrationConfigurationID string                   `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	InvoiceID                  string                   `pathParam:"style=simple,explode=false,name=invoiceId"`
	RequestBody                UpdateInvoiceRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateInvoiceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *UpdateInvoiceRequest) GetInvoiceID() string {
	if o == nil {
		return ""
	}
	return o.InvoiceID
}

func (o *UpdateInvoiceRequest) GetRequestBody() UpdateInvoiceRequestBody {
	if o == nil {
		return UpdateInvoiceRequestBody{}
	}
	return o.RequestBody
}

type UpdateInvoiceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
}

func (o *UpdateInvoiceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}
