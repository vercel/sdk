// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// UpdateProjectFrameworkRequest - The framework that is being used for this project. When `null` is used no framework is selected
type UpdateProjectFrameworkRequest string

const (
	UpdateProjectFrameworkRequestBlitzjs        UpdateProjectFrameworkRequest = "blitzjs"
	UpdateProjectFrameworkRequestNextjs         UpdateProjectFrameworkRequest = "nextjs"
	UpdateProjectFrameworkRequestGatsby         UpdateProjectFrameworkRequest = "gatsby"
	UpdateProjectFrameworkRequestRemix          UpdateProjectFrameworkRequest = "remix"
	UpdateProjectFrameworkRequestReactRouter    UpdateProjectFrameworkRequest = "react-router"
	UpdateProjectFrameworkRequestAstro          UpdateProjectFrameworkRequest = "astro"
	UpdateProjectFrameworkRequestHexo           UpdateProjectFrameworkRequest = "hexo"
	UpdateProjectFrameworkRequestEleventy       UpdateProjectFrameworkRequest = "eleventy"
	UpdateProjectFrameworkRequestDocusaurus2    UpdateProjectFrameworkRequest = "docusaurus-2"
	UpdateProjectFrameworkRequestDocusaurus     UpdateProjectFrameworkRequest = "docusaurus"
	UpdateProjectFrameworkRequestPreact         UpdateProjectFrameworkRequest = "preact"
	UpdateProjectFrameworkRequestSolidstart1    UpdateProjectFrameworkRequest = "solidstart-1"
	UpdateProjectFrameworkRequestSolidstart     UpdateProjectFrameworkRequest = "solidstart"
	UpdateProjectFrameworkRequestDojo           UpdateProjectFrameworkRequest = "dojo"
	UpdateProjectFrameworkRequestEmber          UpdateProjectFrameworkRequest = "ember"
	UpdateProjectFrameworkRequestVue            UpdateProjectFrameworkRequest = "vue"
	UpdateProjectFrameworkRequestScully         UpdateProjectFrameworkRequest = "scully"
	UpdateProjectFrameworkRequestIonicAngular   UpdateProjectFrameworkRequest = "ionic-angular"
	UpdateProjectFrameworkRequestAngular        UpdateProjectFrameworkRequest = "angular"
	UpdateProjectFrameworkRequestPolymer        UpdateProjectFrameworkRequest = "polymer"
	UpdateProjectFrameworkRequestSvelte         UpdateProjectFrameworkRequest = "svelte"
	UpdateProjectFrameworkRequestSveltekit      UpdateProjectFrameworkRequest = "sveltekit"
	UpdateProjectFrameworkRequestSveltekit1     UpdateProjectFrameworkRequest = "sveltekit-1"
	UpdateProjectFrameworkRequestIonicReact     UpdateProjectFrameworkRequest = "ionic-react"
	UpdateProjectFrameworkRequestCreateReactApp UpdateProjectFrameworkRequest = "create-react-app"
	UpdateProjectFrameworkRequestGridsome       UpdateProjectFrameworkRequest = "gridsome"
	UpdateProjectFrameworkRequestUmijs          UpdateProjectFrameworkRequest = "umijs"
	UpdateProjectFrameworkRequestSapper         UpdateProjectFrameworkRequest = "sapper"
	UpdateProjectFrameworkRequestSaber          UpdateProjectFrameworkRequest = "saber"
	UpdateProjectFrameworkRequestStencil        UpdateProjectFrameworkRequest = "stencil"
	UpdateProjectFrameworkRequestNuxtjs         UpdateProjectFrameworkRequest = "nuxtjs"
	UpdateProjectFrameworkRequestRedwoodjs      UpdateProjectFrameworkRequest = "redwoodjs"
	UpdateProjectFrameworkRequestHugo           UpdateProjectFrameworkRequest = "hugo"
	UpdateProjectFrameworkRequestJekyll         UpdateProjectFrameworkRequest = "jekyll"
	UpdateProjectFrameworkRequestBrunch         UpdateProjectFrameworkRequest = "brunch"
	UpdateProjectFrameworkRequestMiddleman      UpdateProjectFrameworkRequest = "middleman"
	UpdateProjectFrameworkRequestZola           UpdateProjectFrameworkRequest = "zola"
	UpdateProjectFrameworkRequestHydrogen       UpdateProjectFrameworkRequest = "hydrogen"
	UpdateProjectFrameworkRequestVite           UpdateProjectFrameworkRequest = "vite"
	UpdateProjectFrameworkRequestVitepress      UpdateProjectFrameworkRequest = "vitepress"
	UpdateProjectFrameworkRequestVuepress       UpdateProjectFrameworkRequest = "vuepress"
	UpdateProjectFrameworkRequestParcel         UpdateProjectFrameworkRequest = "parcel"
	UpdateProjectFrameworkRequestFasthtml       UpdateProjectFrameworkRequest = "fasthtml"
	UpdateProjectFrameworkRequestSanityV3       UpdateProjectFrameworkRequest = "sanity-v3"
	UpdateProjectFrameworkRequestSanity         UpdateProjectFrameworkRequest = "sanity"
	UpdateProjectFrameworkRequestStorybook      UpdateProjectFrameworkRequest = "storybook"
)

func (e UpdateProjectFrameworkRequest) ToPointer() *UpdateProjectFrameworkRequest {
	return &e
}
func (e *UpdateProjectFrameworkRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectFrameworkRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFrameworkRequest: %v", v)
	}
}

type UpdateProjectNodeVersionRequest string

const (
	UpdateProjectNodeVersionRequestTwentyTwoDotX UpdateProjectNodeVersionRequest = "22.x"
	UpdateProjectNodeVersionRequestTwentyDotX    UpdateProjectNodeVersionRequest = "20.x"
	UpdateProjectNodeVersionRequestEighteenDotX  UpdateProjectNodeVersionRequest = "18.x"
	UpdateProjectNodeVersionRequestSixteenDotX   UpdateProjectNodeVersionRequest = "16.x"
	UpdateProjectNodeVersionRequestFourteenDotX  UpdateProjectNodeVersionRequest = "14.x"
	UpdateProjectNodeVersionRequestTwelveDotX    UpdateProjectNodeVersionRequest = "12.x"
	UpdateProjectNodeVersionRequestTenDotX       UpdateProjectNodeVersionRequest = "10.x"
)

func (e UpdateProjectNodeVersionRequest) ToPointer() *UpdateProjectNodeVersionRequest {
	return &e
}
func (e *UpdateProjectNodeVersionRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		*e = UpdateProjectNodeVersionRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectNodeVersionRequest: %v", v)
	}
}

type UpdateProjectBuildMachineTypeRequest string

const (
	UpdateProjectBuildMachineTypeRequestEnhanced UpdateProjectBuildMachineTypeRequest = "enhanced"
	UpdateProjectBuildMachineTypeRequestTurbo    UpdateProjectBuildMachineTypeRequest = "turbo"
)

func (e UpdateProjectBuildMachineTypeRequest) ToPointer() *UpdateProjectBuildMachineTypeRequest {
	return &e
}
func (e *UpdateProjectBuildMachineTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = UpdateProjectBuildMachineTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectBuildMachineTypeRequest: %v", v)
	}
}

type UpdateProjectFunctionDefaultMemoryTypeRequest string

const (
	UpdateProjectFunctionDefaultMemoryTypeRequestStandardLegacy UpdateProjectFunctionDefaultMemoryTypeRequest = "standard_legacy"
	UpdateProjectFunctionDefaultMemoryTypeRequestStandard       UpdateProjectFunctionDefaultMemoryTypeRequest = "standard"
	UpdateProjectFunctionDefaultMemoryTypeRequestPerformance    UpdateProjectFunctionDefaultMemoryTypeRequest = "performance"
)

func (e UpdateProjectFunctionDefaultMemoryTypeRequest) ToPointer() *UpdateProjectFunctionDefaultMemoryTypeRequest {
	return &e
}
func (e *UpdateProjectFunctionDefaultMemoryTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectFunctionDefaultMemoryTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFunctionDefaultMemoryTypeRequest: %v", v)
	}
}

// UpdateProjectResourceConfigRequest - Specifies resource override configuration for the project
type UpdateProjectResourceConfigRequest struct {
	BuildMachineType *UpdateProjectBuildMachineTypeRequest `json:"buildMachineType,omitempty"`
	Fluid            *bool                                 `json:"fluid,omitempty"`
	// The regions to deploy Vercel Functions to for this project
	FunctionDefaultRegions    []string                                       `json:"functionDefaultRegions,omitempty"`
	FunctionDefaultTimeout    *float64                                       `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType *UpdateProjectFunctionDefaultMemoryTypeRequest `json:"functionDefaultMemoryType,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	FunctionZeroConfigFailover *bool `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool `json:"elasticConcurrencyEnabled,omitempty"`
}

func (o *UpdateProjectResourceConfigRequest) GetBuildMachineType() *UpdateProjectBuildMachineTypeRequest {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

func (o *UpdateProjectResourceConfigRequest) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectResourceConfigRequest) GetFunctionDefaultRegions() []string {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectResourceConfigRequest) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectResourceConfigRequest) GetFunctionDefaultMemoryType() *UpdateProjectFunctionDefaultMemoryTypeRequest {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectResourceConfigRequest) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectResourceConfigRequest) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

// UpdateProjectIssuerModeRequest - team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
type UpdateProjectIssuerModeRequest string

const (
	UpdateProjectIssuerModeRequestTeam   UpdateProjectIssuerModeRequest = "team"
	UpdateProjectIssuerModeRequestGlobal UpdateProjectIssuerModeRequest = "global"
)

func (e UpdateProjectIssuerModeRequest) ToPointer() *UpdateProjectIssuerModeRequest {
	return &e
}
func (e *UpdateProjectIssuerModeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = UpdateProjectIssuerModeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectIssuerModeRequest: %v", v)
	}
}

// UpdateProjectOidcTokenConfigRequest - OpenID Connect JSON Web Token generation configuration.
type UpdateProjectOidcTokenConfigRequest struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	Enabled *bool `default:"true" json:"enabled"`
	// team: `https://oidc.vercel.com/[team_slug]` global: `https://oidc.vercel.com`
	IssuerMode *UpdateProjectIssuerModeRequest `default:"team" json:"issuerMode"`
}

func (u UpdateProjectOidcTokenConfigRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateProjectOidcTokenConfigRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *UpdateProjectOidcTokenConfigRequest) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateProjectOidcTokenConfigRequest) GetIssuerMode() *UpdateProjectIssuerModeRequest {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

// PasswordProtectionDeploymentType - Specify if the password will apply to every Deployment Target or just Preview
type PasswordProtectionDeploymentType string

const (
	PasswordProtectionDeploymentTypeAll                              PasswordProtectionDeploymentType = "all"
	PasswordProtectionDeploymentTypePreview                          PasswordProtectionDeploymentType = "preview"
	PasswordProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews PasswordProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e PasswordProtectionDeploymentType) ToPointer() *PasswordProtectionDeploymentType {
	return &e
}
func (e *PasswordProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = PasswordProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PasswordProtectionDeploymentType: %v", v)
	}
}

// PasswordProtectionRequest - Allows to protect project deployments with a password
type PasswordProtectionRequest struct {
	// Specify if the password will apply to every Deployment Target or just Preview
	DeploymentType PasswordProtectionDeploymentType `json:"deploymentType"`
	// The password that will be used to protect Project Deployments
	Password *string `json:"password,omitempty"`
}

func (o *PasswordProtectionRequest) GetDeploymentType() PasswordProtectionDeploymentType {
	if o == nil {
		return PasswordProtectionDeploymentType("")
	}
	return o.DeploymentType
}

func (o *PasswordProtectionRequest) GetPassword() *string {
	if o == nil {
		return nil
	}
	return o.Password
}

// SsoProtectionDeploymentTypeRequest - Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
type SsoProtectionDeploymentTypeRequest string

const (
	SsoProtectionDeploymentTypeRequestAll                              SsoProtectionDeploymentTypeRequest = "all"
	SsoProtectionDeploymentTypeRequestPreview                          SsoProtectionDeploymentTypeRequest = "preview"
	SsoProtectionDeploymentTypeRequestProdDeploymentUrlsAndAllPreviews SsoProtectionDeploymentTypeRequest = "prod_deployment_urls_and_all_previews"
)

func (e SsoProtectionDeploymentTypeRequest) ToPointer() *SsoProtectionDeploymentTypeRequest {
	return &e
}
func (e *SsoProtectionDeploymentTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = SsoProtectionDeploymentTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SsoProtectionDeploymentTypeRequest: %v", v)
	}
}

// SsoProtectionRequest - Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
type SsoProtectionRequest struct {
	// Specify if the Vercel Authentication (SSO Protection) will apply to every Deployment Target or just Preview
	DeploymentType *SsoProtectionDeploymentTypeRequest `default:"preview" json:"deploymentType"`
}

func (s SsoProtectionRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SsoProtectionRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SsoProtectionRequest) GetDeploymentType() *SsoProtectionDeploymentTypeRequest {
	if o == nil {
		return nil
	}
	return o.DeploymentType
}

// TrustedIpsDeploymentTypeRequest - Specify if the Trusted IPs will apply to every Deployment Target or just Preview
type TrustedIpsDeploymentTypeRequest string

const (
	TrustedIpsDeploymentTypeRequestAll                              TrustedIpsDeploymentTypeRequest = "all"
	TrustedIpsDeploymentTypeRequestPreview                          TrustedIpsDeploymentTypeRequest = "preview"
	TrustedIpsDeploymentTypeRequestProduction                       TrustedIpsDeploymentTypeRequest = "production"
	TrustedIpsDeploymentTypeRequestProdDeploymentUrlsAndAllPreviews TrustedIpsDeploymentTypeRequest = "prod_deployment_urls_and_all_previews"
)

func (e TrustedIpsDeploymentTypeRequest) ToPointer() *TrustedIpsDeploymentTypeRequest {
	return &e
}
func (e *TrustedIpsDeploymentTypeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "preview":
		fallthrough
	case "production":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = TrustedIpsDeploymentTypeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TrustedIpsDeploymentTypeRequest: %v", v)
	}
}

type AddressRequest struct {
	// The IP addresses that are allowlisted. Supports IPv4 addresses and CIDR notations. IPv6 is not supported
	Value string `json:"value"`
	// An optional note explaining what the IP address or subnet is used for
	Note *string `json:"note,omitempty"`
}

func (o *AddressRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *AddressRequest) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

// ProtectionModeRequest - exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
type ProtectionModeRequest string

const (
	ProtectionModeRequestExclusive  ProtectionModeRequest = "exclusive"
	ProtectionModeRequestAdditional ProtectionModeRequest = "additional"
)

func (e ProtectionModeRequest) ToPointer() *ProtectionModeRequest {
	return &e
}
func (e *ProtectionModeRequest) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "exclusive":
		fallthrough
	case "additional":
		*e = ProtectionModeRequest(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ProtectionModeRequest: %v", v)
	}
}

// TrustedIpsRequest - Restricts access to deployments based on the incoming request IP address
type TrustedIpsRequest struct {
	// Specify if the Trusted IPs will apply to every Deployment Target or just Preview
	DeploymentType TrustedIpsDeploymentTypeRequest `json:"deploymentType"`
	Addresses      []AddressRequest                `json:"addresses"`
	// exclusive: ip match is enough to bypass deployment protection (regardless of other settings). additional: ip must match + any other protection should be also provided (password, vercel auth, shareable link, automation bypass header, automation bypass query param)
	ProtectionMode ProtectionModeRequest `json:"protectionMode"`
}

func (o *TrustedIpsRequest) GetDeploymentType() TrustedIpsDeploymentTypeRequest {
	if o == nil {
		return TrustedIpsDeploymentTypeRequest("")
	}
	return o.DeploymentType
}

func (o *TrustedIpsRequest) GetAddresses() []AddressRequest {
	if o == nil {
		return []AddressRequest{}
	}
	return o.Addresses
}

func (o *TrustedIpsRequest) GetProtectionMode() ProtectionModeRequest {
	if o == nil {
		return ProtectionModeRequest("")
	}
	return o.ProtectionMode
}

type PathRequest struct {
	// The regex path that should not be protected by Deployment Protection
	Value string `json:"value"`
}

func (o *PathRequest) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// OptionsAllowlistRequest - Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
type OptionsAllowlistRequest struct {
	Paths []PathRequest `json:"paths"`
}

func (o *OptionsAllowlistRequest) GetPaths() []PathRequest {
	if o == nil {
		return []PathRequest{}
	}
	return o.Paths
}

type ConnectConfigurationRequest struct {
	// The ID of the environment
	EnvID string `json:"envId"`
	// The ID of the Secure Compute network
	ConnectConfigurationID string `json:"connectConfigurationId"`
	// Whether the configuration should be passive, meaning builds will not run there and only passive Serverless Functions will be deployed
	Passive bool `json:"passive"`
	// Flag saying if project builds should use Secure Compute
	BuildsEnabled bool `json:"buildsEnabled"`
}

func (o *ConnectConfigurationRequest) GetEnvID() string {
	if o == nil {
		return ""
	}
	return o.EnvID
}

func (o *ConnectConfigurationRequest) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *ConnectConfigurationRequest) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *ConnectConfigurationRequest) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

type ConnectConfigurationType string

const (
	ConnectConfigurationTypeConnectConfigurationRequest ConnectConfigurationType = "connectConfiguration_request"
)

type ConnectConfiguration struct {
	ConnectConfigurationRequest *ConnectConfigurationRequest `queryParam:"inline"`

	Type ConnectConfigurationType
}

func CreateConnectConfigurationConnectConfigurationRequest(connectConfigurationRequest ConnectConfigurationRequest) ConnectConfiguration {
	typ := ConnectConfigurationTypeConnectConfigurationRequest

	return ConnectConfiguration{
		ConnectConfigurationRequest: &connectConfigurationRequest,
		Type:                        typ,
	}
}

func (u *ConnectConfiguration) UnmarshalJSON(data []byte) error {

	var connectConfigurationRequest ConnectConfigurationRequest = ConnectConfigurationRequest{}
	if err := utils.UnmarshalJSON(data, &connectConfigurationRequest, "", true, true); err == nil {
		u.ConnectConfigurationRequest = &connectConfigurationRequest
		u.Type = ConnectConfigurationTypeConnectConfigurationRequest
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for ConnectConfiguration", string(data))
}

func (u ConnectConfiguration) MarshalJSON() ([]byte, error) {
	if u.ConnectConfigurationRequest != nil {
		return utils.MarshalJSON(u.ConnectConfigurationRequest, "", true)
	}

	return nil, errors.New("could not marshal union type ConnectConfiguration: all fields are null")
}

type UpdateProjectRequestBody struct {
	AutoExposeSystemEnvs             *bool   `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains          *bool   `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	// The build command for this project. When `null` is used this value will be automatically detected
	BuildCommand                *string `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep *string `json:"commandForIgnoringBuildStep,omitempty"`
	// Specifies whether customer support can see git source for a deployment
	CustomerSupportCodeVisibility *bool `json:"customerSupportCodeVisibility,omitempty"`
	// The dev command for this project. When `null` is used this value will be automatically detected
	DevCommand       *string `json:"devCommand,omitempty"`
	DirectoryListing *bool   `json:"directoryListing,omitempty"`
	// The framework that is being used for this project. When `null` is used no framework is selected
	Framework *UpdateProjectFrameworkRequest `json:"framework,omitempty"`
	// Specifies whether PRs from Git forks should require a team member's authorization before it can be deployed
	GitForkProtection *bool `json:"gitForkProtection,omitempty"`
	// Specifies whether Git LFS is enabled for this project.
	GitLFS *bool `json:"gitLFS,omitempty"`
	// The install command for this project. When `null` is used this value will be automatically detected
	InstallCommand *string `json:"installCommand,omitempty"`
	// The desired name for the project
	Name        *string                          `json:"name,omitempty"`
	NodeVersion *UpdateProjectNodeVersionRequest `json:"nodeVersion,omitempty"`
	// The output directory of the project. When `null` is used this value will be automatically detected
	OutputDirectory *string `json:"outputDirectory,omitempty"`
	// Specifies whether preview deployments are disabled for this project.
	PreviewDeploymentsDisabled *bool `json:"previewDeploymentsDisabled,omitempty"`
	// Specifies whether the source code and logs of the deployments for this project should be public or not
	PublicSource *bool `json:"publicSource,omitempty"`
	// Specifies resource override configuration for the project
	ResourceConfig *UpdateProjectResourceConfigRequest `json:"resourceConfig,omitempty"`
	// The name of a directory or relative path to the source code of your project. When `null` is used it will default to the project root
	RootDirectory *string `json:"rootDirectory,omitempty"`
	// The region to deploy Serverless Functions in this project
	ServerlessFunctionRegion *string `json:"serverlessFunctionRegion,omitempty"`
	// Specifies whether Zero Config Failover is enabled for this project.
	ServerlessFunctionZeroConfigFailover *bool `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	// Deployments created before this absolute datetime have Skew Protection disabled. Value is in milliseconds since epoch to match \"createdAt\" fields.
	SkewProtectionBoundaryAt *int64 `json:"skewProtectionBoundaryAt,omitempty"`
	// Deployments created before this rolling window have Skew Protection disabled. Value is in seconds to match \"revalidate\" fields.
	SkewProtectionMaxAge *int64 `json:"skewProtectionMaxAge,omitempty"`
	// Opts-out of the message prompting a CLI user to connect a Git repository in `vercel link`.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	SkipGitConnectDuringLink *bool `json:"skipGitConnectDuringLink,omitempty"`
	// Indicates if there are source files outside of the root directory
	SourceFilesOutsideRootDirectory *bool `json:"sourceFilesOutsideRootDirectory,omitempty"`
	// Opt-in to preview toolbar on the project level
	EnablePreviewFeedback *bool `json:"enablePreviewFeedback,omitempty"`
	// Opt-in to production toolbar on the project level
	EnableProductionFeedback *bool `json:"enableProductionFeedback,omitempty"`
	// Opt-in to skip deployments when there are no changes to the root directory and its dependencies
	EnableAffectedProjectsDeployments *bool `json:"enableAffectedProjectsDeployments,omitempty"`
	// OpenID Connect JSON Web Token generation configuration.
	OidcTokenConfig *UpdateProjectOidcTokenConfigRequest `json:"oidcTokenConfig,omitempty"`
	// Allows to protect project deployments with a password
	PasswordProtection *PasswordProtectionRequest `json:"passwordProtection,omitempty"`
	// Ensures visitors to your Preview Deployments are logged into Vercel and have a minimum of Viewer access on your team
	SsoProtection *SsoProtectionRequest `json:"ssoProtection,omitempty"`
	// Restricts access to deployments based on the incoming request IP address
	TrustedIps *TrustedIpsRequest `json:"trustedIps,omitempty"`
	// Specify a list of paths that should not be protected by Deployment Protection to enable Cors preflight requests
	OptionsAllowlist *OptionsAllowlistRequest `json:"optionsAllowlist,omitempty"`
	// The list of connections from project environment to Secure Compute network
	ConnectConfigurations []ConnectConfiguration `json:"connectConfigurations,omitempty"`
}

func (o *UpdateProjectRequestBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectRequestBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectRequestBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectRequestBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectRequestBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectRequestBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectRequestBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectRequestBody) GetDirectoryListing() *bool {
	if o == nil {
		return nil
	}
	return o.DirectoryListing
}

func (o *UpdateProjectRequestBody) GetFramework() *UpdateProjectFrameworkRequest {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectRequestBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectRequestBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectRequestBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectRequestBody) GetNodeVersion() *UpdateProjectNodeVersionRequest {
	if o == nil {
		return nil
	}
	return o.NodeVersion
}

func (o *UpdateProjectRequestBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectRequestBody) GetPreviewDeploymentsDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentsDisabled
}

func (o *UpdateProjectRequestBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectRequestBody) GetResourceConfig() *UpdateProjectResourceConfigRequest {
	if o == nil {
		return nil
	}
	return o.ResourceConfig
}

func (o *UpdateProjectRequestBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectRequestBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectRequestBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectRequestBody) GetSkewProtectionBoundaryAt() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectRequestBody) GetSkewProtectionMaxAge() *int64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectRequestBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectRequestBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectRequestBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectRequestBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *UpdateProjectRequestBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *UpdateProjectRequestBody) GetOidcTokenConfig() *UpdateProjectOidcTokenConfigRequest {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectRequestBody) GetPasswordProtection() *PasswordProtectionRequest {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectRequestBody) GetSsoProtection() *SsoProtectionRequest {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectRequestBody) GetTrustedIps() *TrustedIpsRequest {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectRequestBody) GetOptionsAllowlist() *OptionsAllowlistRequest {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectRequestBody) GetConnectConfigurations() []ConnectConfiguration {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurations
}

type UpdateProjectRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateProjectRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateProjectRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectRequest) GetRequestBody() UpdateProjectRequestBody {
	if o == nil {
		return UpdateProjectRequestBody{}
	}
	return o.RequestBody
}

type UpdateProjectAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *UpdateProjectAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *UpdateProjectAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateProjectAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *UpdateProjectAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type UpdateProjectSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *UpdateProjectSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type UpdateProjectEnvIDEnum string

const (
	UpdateProjectEnvIDEnumProduction UpdateProjectEnvIDEnum = "production"
	UpdateProjectEnvIDEnumPreview    UpdateProjectEnvIDEnum = "preview"
)

func (e UpdateProjectEnvIDEnum) ToPointer() *UpdateProjectEnvIDEnum {
	return &e
}
func (e *UpdateProjectEnvIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = UpdateProjectEnvIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectEnvIDEnum: %v", v)
	}
}

type UpdateProjectEnvIDUnionType string

const (
	UpdateProjectEnvIDUnionTypeStr                    UpdateProjectEnvIDUnionType = "str"
	UpdateProjectEnvIDUnionTypeUpdateProjectEnvIDEnum UpdateProjectEnvIDUnionType = "updateProject_envId_enum"
)

type UpdateProjectEnvIDUnion struct {
	Str                    *string                 `queryParam:"inline"`
	UpdateProjectEnvIDEnum *UpdateProjectEnvIDEnum `queryParam:"inline"`

	Type UpdateProjectEnvIDUnionType
}

func CreateUpdateProjectEnvIDUnionStr(str string) UpdateProjectEnvIDUnion {
	typ := UpdateProjectEnvIDUnionTypeStr

	return UpdateProjectEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectEnvIDUnionUpdateProjectEnvIDEnum(updateProjectEnvIDEnum UpdateProjectEnvIDEnum) UpdateProjectEnvIDUnion {
	typ := UpdateProjectEnvIDUnionTypeUpdateProjectEnvIDEnum

	return UpdateProjectEnvIDUnion{
		UpdateProjectEnvIDEnum: &updateProjectEnvIDEnum,
		Type:                   typ,
	}
}

func (u *UpdateProjectEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectEnvIDUnionTypeStr
		return nil
	}

	var updateProjectEnvIDEnum UpdateProjectEnvIDEnum = UpdateProjectEnvIDEnum("")
	if err := utils.UnmarshalJSON(data, &updateProjectEnvIDEnum, "", true, true); err == nil {
		u.UpdateProjectEnvIDEnum = &updateProjectEnvIDEnum
		u.Type = UpdateProjectEnvIDUnionTypeUpdateProjectEnvIDEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectEnvIDUnion", string(data))
}

func (u UpdateProjectEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectEnvIDEnum != nil {
		return utils.MarshalJSON(u.UpdateProjectEnvIDEnum, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectEnvIDUnion: all fields are null")
}

type UpdateProjectAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *UpdateProjectAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *UpdateProjectAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type UpdateProjectConnectConfigurationResponse struct {
	EnvID                  UpdateProjectEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                  `json:"connectConfigurationId"`
	Passive                bool                    `json:"passive"`
	BuildsEnabled          bool                    `json:"buildsEnabled"`
	Aws                    *UpdateProjectAws       `json:"aws,omitempty"`
	CreatedAt              float64                 `json:"createdAt"`
	UpdatedAt              float64                 `json:"updatedAt"`
}

func (o *UpdateProjectConnectConfigurationResponse) GetEnvID() UpdateProjectEnvIDUnion {
	if o == nil {
		return UpdateProjectEnvIDUnion{}
	}
	return o.EnvID
}

func (o *UpdateProjectConnectConfigurationResponse) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectConnectConfigurationResponse) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *UpdateProjectConnectConfigurationResponse) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *UpdateProjectConnectConfigurationResponse) GetAws() *UpdateProjectAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *UpdateProjectConnectConfigurationResponse) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectConnectConfigurationResponse) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateProjectDefinition struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *UpdateProjectDefinition) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *UpdateProjectDefinition) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *UpdateProjectDefinition) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type UpdateProjectCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                   `json:"deploymentId"`
	Definitions  []UpdateProjectDefinition `json:"definitions"`
}

func (o *UpdateProjectCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *UpdateProjectCrons) GetDefinitions() []UpdateProjectDefinition {
	if o == nil {
		return []UpdateProjectDefinition{}
	}
	return o.Definitions
}

type UpdateProjectDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *UpdateProjectDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *UpdateProjectDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *UpdateProjectDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type UpdateProjectDeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *UpdateProjectDeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *UpdateProjectDeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type UpdateProjectTargetEnum string

const (
	UpdateProjectTargetEnumProduction  UpdateProjectTargetEnum = "production"
	UpdateProjectTargetEnumPreview     UpdateProjectTargetEnum = "preview"
	UpdateProjectTargetEnumDevelopment UpdateProjectTargetEnum = "development"
)

func (e UpdateProjectTargetEnum) ToPointer() *UpdateProjectTargetEnum {
	return &e
}
func (e *UpdateProjectTargetEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectTargetEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTargetEnum: %v", v)
	}
}

type UpdateProjectTargetUnionType string

const (
	UpdateProjectTargetUnionTypeArrayOfStr              UpdateProjectTargetUnionType = "arrayOfStr"
	UpdateProjectTargetUnionTypeUpdateProjectTargetEnum UpdateProjectTargetUnionType = "updateProject_target_enum"
)

type UpdateProjectTargetUnion struct {
	ArrayOfStr              []string                 `queryParam:"inline"`
	UpdateProjectTargetEnum *UpdateProjectTargetEnum `queryParam:"inline"`

	Type UpdateProjectTargetUnionType
}

func CreateUpdateProjectTargetUnionArrayOfStr(arrayOfStr []string) UpdateProjectTargetUnion {
	typ := UpdateProjectTargetUnionTypeArrayOfStr

	return UpdateProjectTargetUnion{
		ArrayOfStr: arrayOfStr,
		Type:       typ,
	}
}

func CreateUpdateProjectTargetUnionUpdateProjectTargetEnum(updateProjectTargetEnum UpdateProjectTargetEnum) UpdateProjectTargetUnion {
	typ := UpdateProjectTargetUnionTypeUpdateProjectTargetEnum

	return UpdateProjectTargetUnion{
		UpdateProjectTargetEnum: &updateProjectTargetEnum,
		Type:                    typ,
	}
}

func (u *UpdateProjectTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfStr []string = []string{}
	if err := utils.UnmarshalJSON(data, &arrayOfStr, "", true, true); err == nil {
		u.ArrayOfStr = arrayOfStr
		u.Type = UpdateProjectTargetUnionTypeArrayOfStr
		return nil
	}

	var updateProjectTargetEnum UpdateProjectTargetEnum = UpdateProjectTargetEnum("")
	if err := utils.UnmarshalJSON(data, &updateProjectTargetEnum, "", true, true); err == nil {
		u.UpdateProjectTargetEnum = &updateProjectTargetEnum
		u.Type = UpdateProjectTargetUnionTypeUpdateProjectTargetEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTargetUnion", string(data))
}

func (u UpdateProjectTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfStr != nil {
		return utils.MarshalJSON(u.ArrayOfStr, "", true)
	}

	if u.UpdateProjectTargetEnum != nil {
		return utils.MarshalJSON(u.UpdateProjectTargetEnum, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTargetUnion: all fields are null")
}

type UpdateProjectEnvType string

const (
	UpdateProjectEnvTypeSystem    UpdateProjectEnvType = "system"
	UpdateProjectEnvTypeEncrypted UpdateProjectEnvType = "encrypted"
	UpdateProjectEnvTypePlain     UpdateProjectEnvType = "plain"
	UpdateProjectEnvTypeSensitive UpdateProjectEnvType = "sensitive"
	UpdateProjectEnvTypeSecret    UpdateProjectEnvType = "secret"
)

func (e UpdateProjectEnvType) ToPointer() *UpdateProjectEnvType {
	return &e
}
func (e *UpdateProjectEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		fallthrough
	case "secret":
		*e = UpdateProjectEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectEnvType: %v", v)
	}
}

type UpdateProjectTypeFlagsConnectionString string

const (
	UpdateProjectTypeFlagsConnectionStringFlagsConnectionString UpdateProjectTypeFlagsConnectionString = "flags-connection-string"
)

func (e UpdateProjectTypeFlagsConnectionString) ToPointer() *UpdateProjectTypeFlagsConnectionString {
	return &e
}
func (e *UpdateProjectTypeFlagsConnectionString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = UpdateProjectTypeFlagsConnectionString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeFlagsConnectionString: %v", v)
	}
}

type UpdateProjectContentHintFlagsConnectionString struct {
	Type      UpdateProjectTypeFlagsConnectionString `json:"type"`
	ProjectID string                                 `json:"projectId"`
}

func (o *UpdateProjectContentHintFlagsConnectionString) GetType() UpdateProjectTypeFlagsConnectionString {
	if o == nil {
		return UpdateProjectTypeFlagsConnectionString("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintFlagsConnectionString) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateProjectTypeIntegrationStoreSecret string

const (
	UpdateProjectTypeIntegrationStoreSecretIntegrationStoreSecret UpdateProjectTypeIntegrationStoreSecret = "integration-store-secret"
)

func (e UpdateProjectTypeIntegrationStoreSecret) ToPointer() *UpdateProjectTypeIntegrationStoreSecret {
	return &e
}
func (e *UpdateProjectTypeIntegrationStoreSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = UpdateProjectTypeIntegrationStoreSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeIntegrationStoreSecret: %v", v)
	}
}

type UpdateProjectContentHintIntegrationStoreSecret struct {
	Type                       UpdateProjectTypeIntegrationStoreSecret `json:"type"`
	StoreID                    string                                  `json:"storeId"`
	IntegrationID              string                                  `json:"integrationId"`
	IntegrationProductID       string                                  `json:"integrationProductId"`
	IntegrationConfigurationID string                                  `json:"integrationConfigurationId"`
}

func (o *UpdateProjectContentHintIntegrationStoreSecret) GetType() UpdateProjectTypeIntegrationStoreSecret {
	if o == nil {
		return UpdateProjectTypeIntegrationStoreSecret("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintIntegrationStoreSecret) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectContentHintIntegrationStoreSecret) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateProjectContentHintIntegrationStoreSecret) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *UpdateProjectContentHintIntegrationStoreSecret) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type UpdateProjectTypePostgresURLNoSsl string

const (
	UpdateProjectTypePostgresURLNoSslPostgresURLNoSsl UpdateProjectTypePostgresURLNoSsl = "postgres-url-no-ssl"
)

func (e UpdateProjectTypePostgresURLNoSsl) ToPointer() *UpdateProjectTypePostgresURLNoSsl {
	return &e
}
func (e *UpdateProjectTypePostgresURLNoSsl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = UpdateProjectTypePostgresURLNoSsl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresURLNoSsl: %v", v)
	}
}

type UpdateProjectContentHintPostgresURLNoSsl struct {
	Type    UpdateProjectTypePostgresURLNoSsl `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresURLNoSsl) GetType() UpdateProjectTypePostgresURLNoSsl {
	if o == nil {
		return UpdateProjectTypePostgresURLNoSsl("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresURLNoSsl) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresDatabase string

const (
	UpdateProjectTypePostgresDatabasePostgresDatabase UpdateProjectTypePostgresDatabase = "postgres-database"
)

func (e UpdateProjectTypePostgresDatabase) ToPointer() *UpdateProjectTypePostgresDatabase {
	return &e
}
func (e *UpdateProjectTypePostgresDatabase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectTypePostgresDatabase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresDatabase: %v", v)
	}
}

type UpdateProjectContentHintPostgresDatabase struct {
	Type    UpdateProjectTypePostgresDatabase `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresDatabase) GetType() UpdateProjectTypePostgresDatabase {
	if o == nil {
		return UpdateProjectTypePostgresDatabase("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresDatabase) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresPassword string

const (
	UpdateProjectTypePostgresPasswordPostgresPassword UpdateProjectTypePostgresPassword = "postgres-password"
)

func (e UpdateProjectTypePostgresPassword) ToPointer() *UpdateProjectTypePostgresPassword {
	return &e
}
func (e *UpdateProjectTypePostgresPassword) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectTypePostgresPassword(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresPassword: %v", v)
	}
}

type UpdateProjectContentHintPostgresPassword struct {
	Type    UpdateProjectTypePostgresPassword `json:"type"`
	StoreID string                            `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresPassword) GetType() UpdateProjectTypePostgresPassword {
	if o == nil {
		return UpdateProjectTypePostgresPassword("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresPassword) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresHost string

const (
	UpdateProjectTypePostgresHostPostgresHost UpdateProjectTypePostgresHost = "postgres-host"
)

func (e UpdateProjectTypePostgresHost) ToPointer() *UpdateProjectTypePostgresHost {
	return &e
}
func (e *UpdateProjectTypePostgresHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectTypePostgresHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresHost: %v", v)
	}
}

type UpdateProjectContentHintPostgresHost struct {
	Type    UpdateProjectTypePostgresHost `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresHost) GetType() UpdateProjectTypePostgresHost {
	if o == nil {
		return UpdateProjectTypePostgresHost("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresHost) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresUser string

const (
	UpdateProjectTypePostgresUserPostgresUser UpdateProjectTypePostgresUser = "postgres-user"
)

func (e UpdateProjectTypePostgresUser) ToPointer() *UpdateProjectTypePostgresUser {
	return &e
}
func (e *UpdateProjectTypePostgresUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectTypePostgresUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresUser: %v", v)
	}
}

type UpdateProjectContentHintPostgresUser struct {
	Type    UpdateProjectTypePostgresUser `json:"type"`
	StoreID string                        `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresUser) GetType() UpdateProjectTypePostgresUser {
	if o == nil {
		return UpdateProjectTypePostgresUser("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresUser) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresPrismaURL string

const (
	UpdateProjectTypePostgresPrismaURLPostgresPrismaURL UpdateProjectTypePostgresPrismaURL = "postgres-prisma-url"
)

func (e UpdateProjectTypePostgresPrismaURL) ToPointer() *UpdateProjectTypePostgresPrismaURL {
	return &e
}
func (e *UpdateProjectTypePostgresPrismaURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectTypePostgresPrismaURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresPrismaURL: %v", v)
	}
}

type UpdateProjectContentHintPostgresPrismaURL struct {
	Type    UpdateProjectTypePostgresPrismaURL `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresPrismaURL) GetType() UpdateProjectTypePostgresPrismaURL {
	if o == nil {
		return UpdateProjectTypePostgresPrismaURL("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresPrismaURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresURLNonPooling string

const (
	UpdateProjectTypePostgresURLNonPoolingPostgresURLNonPooling UpdateProjectTypePostgresURLNonPooling = "postgres-url-non-pooling"
)

func (e UpdateProjectTypePostgresURLNonPooling) ToPointer() *UpdateProjectTypePostgresURLNonPooling {
	return &e
}
func (e *UpdateProjectTypePostgresURLNonPooling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectTypePostgresURLNonPooling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresURLNonPooling: %v", v)
	}
}

type UpdateProjectContentHintPostgresURLNonPooling struct {
	Type    UpdateProjectTypePostgresURLNonPooling `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresURLNonPooling) GetType() UpdateProjectTypePostgresURLNonPooling {
	if o == nil {
		return UpdateProjectTypePostgresURLNonPooling("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresURLNonPooling) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypePostgresURL string

const (
	UpdateProjectTypePostgresURLPostgresURL UpdateProjectTypePostgresURL = "postgres-url"
)

func (e UpdateProjectTypePostgresURL) ToPointer() *UpdateProjectTypePostgresURL {
	return &e
}
func (e *UpdateProjectTypePostgresURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectTypePostgresURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypePostgresURL: %v", v)
	}
}

type UpdateProjectContentHintPostgresURL struct {
	Type    UpdateProjectTypePostgresURL `json:"type"`
	StoreID string                       `json:"storeId"`
}

func (o *UpdateProjectContentHintPostgresURL) GetType() UpdateProjectTypePostgresURL {
	if o == nil {
		return UpdateProjectTypePostgresURL("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintPostgresURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypeBlobReadWriteToken string

const (
	UpdateProjectTypeBlobReadWriteTokenBlobReadWriteToken UpdateProjectTypeBlobReadWriteToken = "blob-read-write-token"
)

func (e UpdateProjectTypeBlobReadWriteToken) ToPointer() *UpdateProjectTypeBlobReadWriteToken {
	return &e
}
func (e *UpdateProjectTypeBlobReadWriteToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectTypeBlobReadWriteToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeBlobReadWriteToken: %v", v)
	}
}

type UpdateProjectContentHintBlobReadWriteToken struct {
	Type    UpdateProjectTypeBlobReadWriteToken `json:"type"`
	StoreID string                              `json:"storeId"`
}

func (o *UpdateProjectContentHintBlobReadWriteToken) GetType() UpdateProjectTypeBlobReadWriteToken {
	if o == nil {
		return UpdateProjectTypeBlobReadWriteToken("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintBlobReadWriteToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypeRedisRestAPIReadOnlyToken string

const (
	UpdateProjectTypeRedisRestAPIReadOnlyTokenRedisRestAPIReadOnlyToken UpdateProjectTypeRedisRestAPIReadOnlyToken = "redis-rest-api-read-only-token"
)

func (e UpdateProjectTypeRedisRestAPIReadOnlyToken) ToPointer() *UpdateProjectTypeRedisRestAPIReadOnlyToken {
	return &e
}
func (e *UpdateProjectTypeRedisRestAPIReadOnlyToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectTypeRedisRestAPIReadOnlyToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeRedisRestAPIReadOnlyToken: %v", v)
	}
}

type UpdateProjectContentHintRedisRestAPIReadOnlyToken struct {
	Type    UpdateProjectTypeRedisRestAPIReadOnlyToken `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *UpdateProjectContentHintRedisRestAPIReadOnlyToken) GetType() UpdateProjectTypeRedisRestAPIReadOnlyToken {
	if o == nil {
		return UpdateProjectTypeRedisRestAPIReadOnlyToken("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintRedisRestAPIReadOnlyToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypeRedisRestAPIToken string

const (
	UpdateProjectTypeRedisRestAPITokenRedisRestAPIToken UpdateProjectTypeRedisRestAPIToken = "redis-rest-api-token"
)

func (e UpdateProjectTypeRedisRestAPIToken) ToPointer() *UpdateProjectTypeRedisRestAPIToken {
	return &e
}
func (e *UpdateProjectTypeRedisRestAPIToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectTypeRedisRestAPIToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeRedisRestAPIToken: %v", v)
	}
}

type UpdateProjectContentHintRedisRestAPIToken struct {
	Type    UpdateProjectTypeRedisRestAPIToken `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *UpdateProjectContentHintRedisRestAPIToken) GetType() UpdateProjectTypeRedisRestAPIToken {
	if o == nil {
		return UpdateProjectTypeRedisRestAPIToken("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintRedisRestAPIToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypeRedisRestAPIURL string

const (
	UpdateProjectTypeRedisRestAPIURLRedisRestAPIURL UpdateProjectTypeRedisRestAPIURL = "redis-rest-api-url"
)

func (e UpdateProjectTypeRedisRestAPIURL) ToPointer() *UpdateProjectTypeRedisRestAPIURL {
	return &e
}
func (e *UpdateProjectTypeRedisRestAPIURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectTypeRedisRestAPIURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeRedisRestAPIURL: %v", v)
	}
}

type UpdateProjectContentHintRedisRestAPIURL struct {
	Type    UpdateProjectTypeRedisRestAPIURL `json:"type"`
	StoreID string                           `json:"storeId"`
}

func (o *UpdateProjectContentHintRedisRestAPIURL) GetType() UpdateProjectTypeRedisRestAPIURL {
	if o == nil {
		return UpdateProjectTypeRedisRestAPIURL("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintRedisRestAPIURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectTypeRedisURL string

const (
	UpdateProjectTypeRedisURLRedisURL UpdateProjectTypeRedisURL = "redis-url"
)

func (e UpdateProjectTypeRedisURL) ToPointer() *UpdateProjectTypeRedisURL {
	return &e
}
func (e *UpdateProjectTypeRedisURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectTypeRedisURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeRedisURL: %v", v)
	}
}

type UpdateProjectContentHintRedisURL struct {
	Type    UpdateProjectTypeRedisURL `json:"type"`
	StoreID string                    `json:"storeId"`
}

func (o *UpdateProjectContentHintRedisURL) GetType() UpdateProjectTypeRedisURL {
	if o == nil {
		return UpdateProjectTypeRedisURL("")
	}
	return o.Type
}

func (o *UpdateProjectContentHintRedisURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectContentHintUnionType string

const (
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisURL                  UpdateProjectContentHintUnionType = "updateProject_contentHint_RedisURL"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIURL           UpdateProjectContentHintUnionType = "updateProject_contentHint_RedisRestAPIURL"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIToken         UpdateProjectContentHintUnionType = "updateProject_contentHint_RedisRestAPIToken"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIReadOnlyToken UpdateProjectContentHintUnionType = "updateProject_contentHint_RedisRestAPIReadOnlyToken"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintBlobReadWriteToken        UpdateProjectContentHintUnionType = "updateProject_contentHint_BlobReadWriteToken"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURL               UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresURL"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURLNonPooling     UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresURLNonPooling"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresPrismaURL         UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresPrismaURL"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresUser              UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresUser"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresHost              UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresHost"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresPassword          UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresPassword"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresDatabase          UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresDatabase"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURLNoSsl          UpdateProjectContentHintUnionType = "updateProject_contentHint_PostgresURLNoSsl"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintIntegrationStoreSecret    UpdateProjectContentHintUnionType = "updateProject_contentHint_IntegrationStoreSecret"
	UpdateProjectContentHintUnionTypeUpdateProjectContentHintFlagsConnectionString     UpdateProjectContentHintUnionType = "updateProject_contentHint_FlagsConnectionString"
)

type UpdateProjectContentHintUnion struct {
	UpdateProjectContentHintRedisURL                  *UpdateProjectContentHintRedisURL                  `queryParam:"inline"`
	UpdateProjectContentHintRedisRestAPIURL           *UpdateProjectContentHintRedisRestAPIURL           `queryParam:"inline"`
	UpdateProjectContentHintRedisRestAPIToken         *UpdateProjectContentHintRedisRestAPIToken         `queryParam:"inline"`
	UpdateProjectContentHintRedisRestAPIReadOnlyToken *UpdateProjectContentHintRedisRestAPIReadOnlyToken `queryParam:"inline"`
	UpdateProjectContentHintBlobReadWriteToken        *UpdateProjectContentHintBlobReadWriteToken        `queryParam:"inline"`
	UpdateProjectContentHintPostgresURL               *UpdateProjectContentHintPostgresURL               `queryParam:"inline"`
	UpdateProjectContentHintPostgresURLNonPooling     *UpdateProjectContentHintPostgresURLNonPooling     `queryParam:"inline"`
	UpdateProjectContentHintPostgresPrismaURL         *UpdateProjectContentHintPostgresPrismaURL         `queryParam:"inline"`
	UpdateProjectContentHintPostgresUser              *UpdateProjectContentHintPostgresUser              `queryParam:"inline"`
	UpdateProjectContentHintPostgresHost              *UpdateProjectContentHintPostgresHost              `queryParam:"inline"`
	UpdateProjectContentHintPostgresPassword          *UpdateProjectContentHintPostgresPassword          `queryParam:"inline"`
	UpdateProjectContentHintPostgresDatabase          *UpdateProjectContentHintPostgresDatabase          `queryParam:"inline"`
	UpdateProjectContentHintPostgresURLNoSsl          *UpdateProjectContentHintPostgresURLNoSsl          `queryParam:"inline"`
	UpdateProjectContentHintIntegrationStoreSecret    *UpdateProjectContentHintIntegrationStoreSecret    `queryParam:"inline"`
	UpdateProjectContentHintFlagsConnectionString     *UpdateProjectContentHintFlagsConnectionString     `queryParam:"inline"`

	Type UpdateProjectContentHintUnionType
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintRedisURL(updateProjectContentHintRedisURL UpdateProjectContentHintRedisURL) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisURL

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintRedisURL: &updateProjectContentHintRedisURL,
		Type:                             typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintRedisRestAPIURL(updateProjectContentHintRedisRestAPIURL UpdateProjectContentHintRedisRestAPIURL) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIURL

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintRedisRestAPIURL: &updateProjectContentHintRedisRestAPIURL,
		Type:                                    typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintRedisRestAPIToken(updateProjectContentHintRedisRestAPIToken UpdateProjectContentHintRedisRestAPIToken) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIToken

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintRedisRestAPIToken: &updateProjectContentHintRedisRestAPIToken,
		Type: typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintRedisRestAPIReadOnlyToken(updateProjectContentHintRedisRestAPIReadOnlyToken UpdateProjectContentHintRedisRestAPIReadOnlyToken) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIReadOnlyToken

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintRedisRestAPIReadOnlyToken: &updateProjectContentHintRedisRestAPIReadOnlyToken,
		Type: typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintBlobReadWriteToken(updateProjectContentHintBlobReadWriteToken UpdateProjectContentHintBlobReadWriteToken) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintBlobReadWriteToken

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintBlobReadWriteToken: &updateProjectContentHintBlobReadWriteToken,
		Type: typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresURL(updateProjectContentHintPostgresURL UpdateProjectContentHintPostgresURL) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURL

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresURL: &updateProjectContentHintPostgresURL,
		Type:                                typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresURLNonPooling(updateProjectContentHintPostgresURLNonPooling UpdateProjectContentHintPostgresURLNonPooling) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURLNonPooling

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresURLNonPooling: &updateProjectContentHintPostgresURLNonPooling,
		Type: typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresPrismaURL(updateProjectContentHintPostgresPrismaURL UpdateProjectContentHintPostgresPrismaURL) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresPrismaURL

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresPrismaURL: &updateProjectContentHintPostgresPrismaURL,
		Type: typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresUser(updateProjectContentHintPostgresUser UpdateProjectContentHintPostgresUser) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresUser

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresUser: &updateProjectContentHintPostgresUser,
		Type:                                 typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresHost(updateProjectContentHintPostgresHost UpdateProjectContentHintPostgresHost) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresHost

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresHost: &updateProjectContentHintPostgresHost,
		Type:                                 typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresPassword(updateProjectContentHintPostgresPassword UpdateProjectContentHintPostgresPassword) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresPassword

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresPassword: &updateProjectContentHintPostgresPassword,
		Type:                                     typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresDatabase(updateProjectContentHintPostgresDatabase UpdateProjectContentHintPostgresDatabase) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresDatabase

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresDatabase: &updateProjectContentHintPostgresDatabase,
		Type:                                     typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintPostgresURLNoSsl(updateProjectContentHintPostgresURLNoSsl UpdateProjectContentHintPostgresURLNoSsl) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURLNoSsl

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintPostgresURLNoSsl: &updateProjectContentHintPostgresURLNoSsl,
		Type:                                     typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintIntegrationStoreSecret(updateProjectContentHintIntegrationStoreSecret UpdateProjectContentHintIntegrationStoreSecret) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintIntegrationStoreSecret

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintIntegrationStoreSecret: &updateProjectContentHintIntegrationStoreSecret,
		Type: typ,
	}
}

func CreateUpdateProjectContentHintUnionUpdateProjectContentHintFlagsConnectionString(updateProjectContentHintFlagsConnectionString UpdateProjectContentHintFlagsConnectionString) UpdateProjectContentHintUnion {
	typ := UpdateProjectContentHintUnionTypeUpdateProjectContentHintFlagsConnectionString

	return UpdateProjectContentHintUnion{
		UpdateProjectContentHintFlagsConnectionString: &updateProjectContentHintFlagsConnectionString,
		Type: typ,
	}
}

func (u *UpdateProjectContentHintUnion) UnmarshalJSON(data []byte) error {

	var updateProjectContentHintPostgresURLNonPooling UpdateProjectContentHintPostgresURLNonPooling = UpdateProjectContentHintPostgresURLNonPooling{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresURLNonPooling, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresURLNonPooling = &updateProjectContentHintPostgresURLNonPooling
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURLNonPooling
		return nil
	}

	var updateProjectContentHintPostgresPassword UpdateProjectContentHintPostgresPassword = UpdateProjectContentHintPostgresPassword{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresPassword, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresPassword = &updateProjectContentHintPostgresPassword
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresPassword
		return nil
	}

	var updateProjectContentHintRedisRestAPIToken UpdateProjectContentHintRedisRestAPIToken = UpdateProjectContentHintRedisRestAPIToken{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintRedisRestAPIToken, "", true, true); err == nil {
		u.UpdateProjectContentHintRedisRestAPIToken = &updateProjectContentHintRedisRestAPIToken
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIToken
		return nil
	}

	var updateProjectContentHintRedisRestAPIReadOnlyToken UpdateProjectContentHintRedisRestAPIReadOnlyToken = UpdateProjectContentHintRedisRestAPIReadOnlyToken{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintRedisRestAPIReadOnlyToken, "", true, true); err == nil {
		u.UpdateProjectContentHintRedisRestAPIReadOnlyToken = &updateProjectContentHintRedisRestAPIReadOnlyToken
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIReadOnlyToken
		return nil
	}

	var updateProjectContentHintBlobReadWriteToken UpdateProjectContentHintBlobReadWriteToken = UpdateProjectContentHintBlobReadWriteToken{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintBlobReadWriteToken, "", true, true); err == nil {
		u.UpdateProjectContentHintBlobReadWriteToken = &updateProjectContentHintBlobReadWriteToken
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintBlobReadWriteToken
		return nil
	}

	var updateProjectContentHintPostgresURL UpdateProjectContentHintPostgresURL = UpdateProjectContentHintPostgresURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresURL, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresURL = &updateProjectContentHintPostgresURL
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURL
		return nil
	}

	var updateProjectContentHintRedisRestAPIURL UpdateProjectContentHintRedisRestAPIURL = UpdateProjectContentHintRedisRestAPIURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintRedisRestAPIURL, "", true, true); err == nil {
		u.UpdateProjectContentHintRedisRestAPIURL = &updateProjectContentHintRedisRestAPIURL
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisRestAPIURL
		return nil
	}

	var updateProjectContentHintPostgresUser UpdateProjectContentHintPostgresUser = UpdateProjectContentHintPostgresUser{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresUser, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresUser = &updateProjectContentHintPostgresUser
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresUser
		return nil
	}

	var updateProjectContentHintRedisURL UpdateProjectContentHintRedisURL = UpdateProjectContentHintRedisURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintRedisURL, "", true, true); err == nil {
		u.UpdateProjectContentHintRedisURL = &updateProjectContentHintRedisURL
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintRedisURL
		return nil
	}

	var updateProjectContentHintPostgresHost UpdateProjectContentHintPostgresHost = UpdateProjectContentHintPostgresHost{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresHost, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresHost = &updateProjectContentHintPostgresHost
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresHost
		return nil
	}

	var updateProjectContentHintPostgresPrismaURL UpdateProjectContentHintPostgresPrismaURL = UpdateProjectContentHintPostgresPrismaURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresPrismaURL, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresPrismaURL = &updateProjectContentHintPostgresPrismaURL
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresPrismaURL
		return nil
	}

	var updateProjectContentHintPostgresDatabase UpdateProjectContentHintPostgresDatabase = UpdateProjectContentHintPostgresDatabase{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresDatabase, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresDatabase = &updateProjectContentHintPostgresDatabase
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresDatabase
		return nil
	}

	var updateProjectContentHintPostgresURLNoSsl UpdateProjectContentHintPostgresURLNoSsl = UpdateProjectContentHintPostgresURLNoSsl{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintPostgresURLNoSsl, "", true, true); err == nil {
		u.UpdateProjectContentHintPostgresURLNoSsl = &updateProjectContentHintPostgresURLNoSsl
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintPostgresURLNoSsl
		return nil
	}

	var updateProjectContentHintFlagsConnectionString UpdateProjectContentHintFlagsConnectionString = UpdateProjectContentHintFlagsConnectionString{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintFlagsConnectionString, "", true, true); err == nil {
		u.UpdateProjectContentHintFlagsConnectionString = &updateProjectContentHintFlagsConnectionString
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintFlagsConnectionString
		return nil
	}

	var updateProjectContentHintIntegrationStoreSecret UpdateProjectContentHintIntegrationStoreSecret = UpdateProjectContentHintIntegrationStoreSecret{}
	if err := utils.UnmarshalJSON(data, &updateProjectContentHintIntegrationStoreSecret, "", true, true); err == nil {
		u.UpdateProjectContentHintIntegrationStoreSecret = &updateProjectContentHintIntegrationStoreSecret
		u.Type = UpdateProjectContentHintUnionTypeUpdateProjectContentHintIntegrationStoreSecret
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectContentHintUnion", string(data))
}

func (u UpdateProjectContentHintUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectContentHintRedisURL != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintRedisURL, "", true)
	}

	if u.UpdateProjectContentHintRedisRestAPIURL != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintRedisRestAPIURL, "", true)
	}

	if u.UpdateProjectContentHintRedisRestAPIToken != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintRedisRestAPIToken, "", true)
	}

	if u.UpdateProjectContentHintRedisRestAPIReadOnlyToken != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintRedisRestAPIReadOnlyToken, "", true)
	}

	if u.UpdateProjectContentHintBlobReadWriteToken != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintBlobReadWriteToken, "", true)
	}

	if u.UpdateProjectContentHintPostgresURL != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresURL, "", true)
	}

	if u.UpdateProjectContentHintPostgresURLNonPooling != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresURLNonPooling, "", true)
	}

	if u.UpdateProjectContentHintPostgresPrismaURL != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresPrismaURL, "", true)
	}

	if u.UpdateProjectContentHintPostgresUser != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresUser, "", true)
	}

	if u.UpdateProjectContentHintPostgresHost != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresHost, "", true)
	}

	if u.UpdateProjectContentHintPostgresPassword != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresPassword, "", true)
	}

	if u.UpdateProjectContentHintPostgresDatabase != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresDatabase, "", true)
	}

	if u.UpdateProjectContentHintPostgresURLNoSsl != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintPostgresURLNoSsl, "", true)
	}

	if u.UpdateProjectContentHintIntegrationStoreSecret != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintIntegrationStoreSecret, "", true)
	}

	if u.UpdateProjectContentHintFlagsConnectionString != nil {
		return utils.MarshalJSON(u.UpdateProjectContentHintFlagsConnectionString, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectContentHintUnion: all fields are null")
}

type UpdateProjectTypeFlagsSecret string

const (
	UpdateProjectTypeFlagsSecretFlagsSecret UpdateProjectTypeFlagsSecret = "flags-secret"
)

func (e UpdateProjectTypeFlagsSecret) ToPointer() *UpdateProjectTypeFlagsSecret {
	return &e
}
func (e *UpdateProjectTypeFlagsSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = UpdateProjectTypeFlagsSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeFlagsSecret: %v", v)
	}
}

// UpdateProjectInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type UpdateProjectInternalContentHint struct {
	Type UpdateProjectTypeFlagsSecret `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *UpdateProjectInternalContentHint) GetType() UpdateProjectTypeFlagsSecret {
	if o == nil {
		return UpdateProjectTypeFlagsSecret("")
	}
	return o.Type
}

func (o *UpdateProjectInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type UpdateProjectEnv struct {
	Target *UpdateProjectTargetUnion `json:"target,omitempty"`
	Type   UpdateProjectEnvType      `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                        `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                          `json:"decrypted,omitempty"`
	Value             string                         `json:"value"`
	VsmValue          *string                        `json:"vsmValue,omitempty"`
	ID                *string                        `json:"id,omitempty"`
	Key               string                         `json:"key"`
	ConfigurationID   *string                        `json:"configurationId,omitempty"`
	CreatedAt         *float64                       `json:"createdAt,omitempty"`
	UpdatedAt         *float64                       `json:"updatedAt,omitempty"`
	CreatedBy         *string                        `json:"createdBy,omitempty"`
	UpdatedBy         *string                        `json:"updatedBy,omitempty"`
	GitBranch         *string                        `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                        `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                        `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *UpdateProjectContentHintUnion `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *UpdateProjectInternalContentHint `json:"internalContentHint,omitempty"`
	Comment              *string                           `json:"comment,omitempty"`
	CustomEnvironmentIds []string                          `json:"customEnvironmentIds,omitempty"`
}

func (o *UpdateProjectEnv) GetTarget() *UpdateProjectTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectEnv) GetType() UpdateProjectEnvType {
	if o == nil {
		return UpdateProjectEnvType("")
	}
	return o.Type
}

func (o *UpdateProjectEnv) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *UpdateProjectEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *UpdateProjectEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectEnv) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *UpdateProjectEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UpdateProjectEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateProjectEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UpdateProjectEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UpdateProjectEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *UpdateProjectEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *UpdateProjectEnv) GetContentHint() *UpdateProjectContentHintUnion {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *UpdateProjectEnv) GetInternalContentHint() *UpdateProjectInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *UpdateProjectEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateProjectEnv) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

// UpdateProjectCustomEnvironmentType - The type of environment (production, preview, or development)
type UpdateProjectCustomEnvironmentType string

const (
	UpdateProjectCustomEnvironmentTypeProduction  UpdateProjectCustomEnvironmentType = "production"
	UpdateProjectCustomEnvironmentTypePreview     UpdateProjectCustomEnvironmentType = "preview"
	UpdateProjectCustomEnvironmentTypeDevelopment UpdateProjectCustomEnvironmentType = "development"
)

func (e UpdateProjectCustomEnvironmentType) ToPointer() *UpdateProjectCustomEnvironmentType {
	return &e
}
func (e *UpdateProjectCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectCustomEnvironmentType: %v", v)
	}
}

// UpdateProjectCustomEnvironmentBranchMatcherType - The type of matching to perform
type UpdateProjectCustomEnvironmentBranchMatcherType string

const (
	UpdateProjectCustomEnvironmentBranchMatcherTypeEndsWith   UpdateProjectCustomEnvironmentBranchMatcherType = "endsWith"
	UpdateProjectCustomEnvironmentBranchMatcherTypeStartsWith UpdateProjectCustomEnvironmentBranchMatcherType = "startsWith"
	UpdateProjectCustomEnvironmentBranchMatcherTypeEquals     UpdateProjectCustomEnvironmentBranchMatcherType = "equals"
)

func (e UpdateProjectCustomEnvironmentBranchMatcherType) ToPointer() *UpdateProjectCustomEnvironmentBranchMatcherType {
	return &e
}
func (e *UpdateProjectCustomEnvironmentBranchMatcherType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectCustomEnvironmentBranchMatcherType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectCustomEnvironmentBranchMatcherType: %v", v)
	}
}

// UpdateProjectCustomEnvironmentBranchMatcher - Configuration for matching git branches to this environment
type UpdateProjectCustomEnvironmentBranchMatcher struct {
	// The type of matching to perform
	Type UpdateProjectCustomEnvironmentBranchMatcherType `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *UpdateProjectCustomEnvironmentBranchMatcher) GetType() UpdateProjectCustomEnvironmentBranchMatcherType {
	if o == nil {
		return UpdateProjectCustomEnvironmentBranchMatcherType("")
	}
	return o.Type
}

func (o *UpdateProjectCustomEnvironmentBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// UpdateProjectVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type UpdateProjectVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *UpdateProjectVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateProjectVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *UpdateProjectVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// UpdateProjectDomain - List of domains associated with this environment
type UpdateProjectDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []UpdateProjectVerification `json:"verification,omitempty"`
}

func (o *UpdateProjectDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *UpdateProjectDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *UpdateProjectDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *UpdateProjectDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *UpdateProjectDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *UpdateProjectDomain) GetVerification() []UpdateProjectVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// UpdateProjectCustomEnvironment - Internal representation of a custom environment with all required properties
type UpdateProjectCustomEnvironment struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type UpdateProjectCustomEnvironmentType `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *UpdateProjectCustomEnvironmentBranchMatcher `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []UpdateProjectDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *UpdateProjectCustomEnvironment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectCustomEnvironment) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *UpdateProjectCustomEnvironment) GetType() UpdateProjectCustomEnvironmentType {
	if o == nil {
		return UpdateProjectCustomEnvironmentType("")
	}
	return o.Type
}

func (o *UpdateProjectCustomEnvironment) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateProjectCustomEnvironment) GetBranchMatcher() *UpdateProjectCustomEnvironmentBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectCustomEnvironment) GetDomains() []UpdateProjectDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *UpdateProjectCustomEnvironment) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *UpdateProjectCustomEnvironment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectCustomEnvironment) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateProjectFrameworkResponseBody string

const (
	UpdateProjectFrameworkResponseBodyBlitzjs        UpdateProjectFrameworkResponseBody = "blitzjs"
	UpdateProjectFrameworkResponseBodyNextjs         UpdateProjectFrameworkResponseBody = "nextjs"
	UpdateProjectFrameworkResponseBodyGatsby         UpdateProjectFrameworkResponseBody = "gatsby"
	UpdateProjectFrameworkResponseBodyRemix          UpdateProjectFrameworkResponseBody = "remix"
	UpdateProjectFrameworkResponseBodyReactRouter    UpdateProjectFrameworkResponseBody = "react-router"
	UpdateProjectFrameworkResponseBodyAstro          UpdateProjectFrameworkResponseBody = "astro"
	UpdateProjectFrameworkResponseBodyHexo           UpdateProjectFrameworkResponseBody = "hexo"
	UpdateProjectFrameworkResponseBodyEleventy       UpdateProjectFrameworkResponseBody = "eleventy"
	UpdateProjectFrameworkResponseBodyDocusaurus2    UpdateProjectFrameworkResponseBody = "docusaurus-2"
	UpdateProjectFrameworkResponseBodyDocusaurus     UpdateProjectFrameworkResponseBody = "docusaurus"
	UpdateProjectFrameworkResponseBodyPreact         UpdateProjectFrameworkResponseBody = "preact"
	UpdateProjectFrameworkResponseBodySolidstart1    UpdateProjectFrameworkResponseBody = "solidstart-1"
	UpdateProjectFrameworkResponseBodySolidstart     UpdateProjectFrameworkResponseBody = "solidstart"
	UpdateProjectFrameworkResponseBodyDojo           UpdateProjectFrameworkResponseBody = "dojo"
	UpdateProjectFrameworkResponseBodyEmber          UpdateProjectFrameworkResponseBody = "ember"
	UpdateProjectFrameworkResponseBodyVue            UpdateProjectFrameworkResponseBody = "vue"
	UpdateProjectFrameworkResponseBodyScully         UpdateProjectFrameworkResponseBody = "scully"
	UpdateProjectFrameworkResponseBodyIonicAngular   UpdateProjectFrameworkResponseBody = "ionic-angular"
	UpdateProjectFrameworkResponseBodyAngular        UpdateProjectFrameworkResponseBody = "angular"
	UpdateProjectFrameworkResponseBodyPolymer        UpdateProjectFrameworkResponseBody = "polymer"
	UpdateProjectFrameworkResponseBodySvelte         UpdateProjectFrameworkResponseBody = "svelte"
	UpdateProjectFrameworkResponseBodySveltekit      UpdateProjectFrameworkResponseBody = "sveltekit"
	UpdateProjectFrameworkResponseBodySveltekit1     UpdateProjectFrameworkResponseBody = "sveltekit-1"
	UpdateProjectFrameworkResponseBodyIonicReact     UpdateProjectFrameworkResponseBody = "ionic-react"
	UpdateProjectFrameworkResponseBodyCreateReactApp UpdateProjectFrameworkResponseBody = "create-react-app"
	UpdateProjectFrameworkResponseBodyGridsome       UpdateProjectFrameworkResponseBody = "gridsome"
	UpdateProjectFrameworkResponseBodyUmijs          UpdateProjectFrameworkResponseBody = "umijs"
	UpdateProjectFrameworkResponseBodySapper         UpdateProjectFrameworkResponseBody = "sapper"
	UpdateProjectFrameworkResponseBodySaber          UpdateProjectFrameworkResponseBody = "saber"
	UpdateProjectFrameworkResponseBodyStencil        UpdateProjectFrameworkResponseBody = "stencil"
	UpdateProjectFrameworkResponseBodyNuxtjs         UpdateProjectFrameworkResponseBody = "nuxtjs"
	UpdateProjectFrameworkResponseBodyRedwoodjs      UpdateProjectFrameworkResponseBody = "redwoodjs"
	UpdateProjectFrameworkResponseBodyHugo           UpdateProjectFrameworkResponseBody = "hugo"
	UpdateProjectFrameworkResponseBodyJekyll         UpdateProjectFrameworkResponseBody = "jekyll"
	UpdateProjectFrameworkResponseBodyBrunch         UpdateProjectFrameworkResponseBody = "brunch"
	UpdateProjectFrameworkResponseBodyMiddleman      UpdateProjectFrameworkResponseBody = "middleman"
	UpdateProjectFrameworkResponseBodyZola           UpdateProjectFrameworkResponseBody = "zola"
	UpdateProjectFrameworkResponseBodyHydrogen       UpdateProjectFrameworkResponseBody = "hydrogen"
	UpdateProjectFrameworkResponseBodyVite           UpdateProjectFrameworkResponseBody = "vite"
	UpdateProjectFrameworkResponseBodyVitepress      UpdateProjectFrameworkResponseBody = "vitepress"
	UpdateProjectFrameworkResponseBodyVuepress       UpdateProjectFrameworkResponseBody = "vuepress"
	UpdateProjectFrameworkResponseBodyParcel         UpdateProjectFrameworkResponseBody = "parcel"
	UpdateProjectFrameworkResponseBodyFasthtml       UpdateProjectFrameworkResponseBody = "fasthtml"
	UpdateProjectFrameworkResponseBodySanityV3       UpdateProjectFrameworkResponseBody = "sanity-v3"
	UpdateProjectFrameworkResponseBodySanity         UpdateProjectFrameworkResponseBody = "sanity"
	UpdateProjectFrameworkResponseBodyStorybook      UpdateProjectFrameworkResponseBody = "storybook"
)

func (e UpdateProjectFrameworkResponseBody) ToPointer() *UpdateProjectFrameworkResponseBody {
	return &e
}
func (e *UpdateProjectFrameworkResponseBody) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectFrameworkResponseBody(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFrameworkResponseBody: %v", v)
	}
}

type UpdateProjectIPBucket struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *UpdateProjectIPBucket) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *UpdateProjectIPBucket) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type UpdateProjectLatestDeployment struct {
	ID                     string                             `json:"id"`
	Alias                  []string                           `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                            `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                           `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                           `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectBuild               `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                              `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                            `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                            `json:"createdAt"`
	CreatedIn              string                             `json:"createdIn"`
	Creator                *UpdateProjectCreator              `json:"creator"`
	DeletedAt              *float64                           `json:"deletedAt,omitempty"`
	DeploymentHostname     string                             `json:"deploymentHostname"`
	Forced                 *bool                              `json:"forced,omitempty"`
	Name                   string                             `json:"name"`
	Meta                   map[string]string                  `json:"meta,omitempty"`
	MonorepoManager        *string                            `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectPlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                       `json:"previewCommentsEnabled,omitempty"`
	Private                bool                        `json:"private"`
	ReadyAt                *float64                    `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                    `json:"requestedAt,omitempty"`
	Target                 *string                     `json:"target,omitempty"`
	TeamID                 *string                     `json:"teamId,omitempty"`
	Type                   UpdateProjectTypeLambdas    `json:"type"`
	URL                    string                      `json:"url"`
	UserID                 string                      `json:"userId"`
	WithCache              *bool                       `json:"withCache,omitempty"`
}

func (o *UpdateProjectLatestDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectLatestDeployment) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectLatestDeployment) GetAliasAssigned() *UpdateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectLatestDeployment) GetAliasError() *UpdateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectLatestDeployment) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectLatestDeployment) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectLatestDeployment) GetBranchMatcher() *UpdateProjectBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectLatestDeployment) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectLatestDeployment) GetBuilds() []UpdateProjectBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectLatestDeployment) GetChecksConclusion() *UpdateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectLatestDeployment) GetChecksState() *UpdateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectLatestDeployment) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectLatestDeployment) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectLatestDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectLatestDeployment) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectLatestDeployment) GetCreator() *UpdateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectLatestDeployment) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *UpdateProjectLatestDeployment) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectLatestDeployment) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectLatestDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectLatestDeployment) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectLatestDeployment) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectLatestDeployment) GetOidcTokenClaims() *UpdateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectLatestDeployment) GetPlan() UpdateProjectPlan {
	if o == nil {
		return UpdateProjectPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectLatestDeployment) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectLatestDeployment) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectLatestDeployment) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectLatestDeployment) GetReadyState() UpdateProjectReadyState {
	if o == nil {
		return UpdateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectLatestDeployment) GetReadySubstate() *UpdateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectLatestDeployment) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectLatestDeployment) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectLatestDeployment) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectLatestDeployment) GetType() UpdateProjectTypeLambdas {
	if o == nil {
		return UpdateProjectTypeLambdas("")
	}
	return o.Type
}

func (o *UpdateProjectLatestDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectLatestDeployment) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectLatestDeployment) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectTypeGithubCustomHost string

const (
	UpdateProjectTypeGithubCustomHostGithubCustomHost UpdateProjectTypeGithubCustomHost = "github-custom-host"
)

func (e UpdateProjectTypeGithubCustomHost) ToPointer() *UpdateProjectTypeGithubCustomHost {
	return &e
}
func (e *UpdateProjectTypeGithubCustomHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = UpdateProjectTypeGithubCustomHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeGithubCustomHost: %v", v)
	}
}

type UpdateProjectDeployHook4 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDeployHook4) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDeployHook4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDeployHook4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDeployHook4) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDeployHook4) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLinkGithubCustomHost struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                           `json:"repoOwnerId,omitempty"`
	Repo             *string                            `json:"repo,omitempty"`
	RepoID           *float64                           `json:"repoId,omitempty"`
	Type             *UpdateProjectTypeGithubCustomHost `json:"type,omitempty"`
	Host             *string                            `json:"host,omitempty"`
	CreatedAt        *float64                           `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDeployHook4         `json:"deployHooks"`
	GitCredentialID  *string                            `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                           `json:"updatedAt,omitempty"`
	Sourceless       *bool                              `json:"sourceless,omitempty"`
	ProductionBranch *string                            `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLinkGithubCustomHost) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectLinkGithubCustomHost) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *UpdateProjectLinkGithubCustomHost) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectLinkGithubCustomHost) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectLinkGithubCustomHost) GetType() *UpdateProjectTypeGithubCustomHost {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLinkGithubCustomHost) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *UpdateProjectLinkGithubCustomHost) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkGithubCustomHost) GetDeployHooks() []UpdateProjectDeployHook4 {
	if o == nil {
		return []UpdateProjectDeployHook4{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLinkGithubCustomHost) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLinkGithubCustomHost) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLinkGithubCustomHost) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLinkGithubCustomHost) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectTypeBitbucket string

const (
	UpdateProjectTypeBitbucketBitbucket UpdateProjectTypeBitbucket = "bitbucket"
)

func (e UpdateProjectTypeBitbucket) ToPointer() *UpdateProjectTypeBitbucket {
	return &e
}
func (e *UpdateProjectTypeBitbucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectTypeBitbucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeBitbucket: %v", v)
	}
}

type UpdateProjectDeployHook3 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDeployHook3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDeployHook3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDeployHook3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDeployHook3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDeployHook3) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLinkBitbucket struct {
	Name             *string                     `json:"name,omitempty"`
	Slug             *string                     `json:"slug,omitempty"`
	Owner            *string                     `json:"owner,omitempty"`
	Type             *UpdateProjectTypeBitbucket `json:"type,omitempty"`
	UUID             *string                     `json:"uuid,omitempty"`
	WorkspaceUUID    *string                     `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                    `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDeployHook3  `json:"deployHooks"`
	GitCredentialID  *string                     `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                    `json:"updatedAt,omitempty"`
	Sourceless       *bool                       `json:"sourceless,omitempty"`
	ProductionBranch *string                     `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLinkBitbucket) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectLinkBitbucket) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectLinkBitbucket) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateProjectLinkBitbucket) GetType() *UpdateProjectTypeBitbucket {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLinkBitbucket) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *UpdateProjectLinkBitbucket) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *UpdateProjectLinkBitbucket) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkBitbucket) GetDeployHooks() []UpdateProjectDeployHook3 {
	if o == nil {
		return []UpdateProjectDeployHook3{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLinkBitbucket) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLinkBitbucket) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLinkBitbucket) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLinkBitbucket) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectTypeGitlab string

const (
	UpdateProjectTypeGitlabGitlab UpdateProjectTypeGitlab = "gitlab"
)

func (e UpdateProjectTypeGitlab) ToPointer() *UpdateProjectTypeGitlab {
	return &e
}
func (e *UpdateProjectTypeGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectTypeGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeGitlab: %v", v)
	}
}

type UpdateProjectDeployHook2 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDeployHook2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDeployHook2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDeployHook2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDeployHook2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDeployHook2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLinkGitlab struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                   `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                    `json:"projectUrl,omitempty"`
	Type             *UpdateProjectTypeGitlab   `json:"type,omitempty"`
	CreatedAt        *float64                   `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDeployHook2 `json:"deployHooks"`
	GitCredentialID  *string                    `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                   `json:"updatedAt,omitempty"`
	Sourceless       *bool                      `json:"sourceless,omitempty"`
	ProductionBranch *string                    `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLinkGitlab) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectLinkGitlab) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *UpdateProjectLinkGitlab) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *UpdateProjectLinkGitlab) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *UpdateProjectLinkGitlab) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *UpdateProjectLinkGitlab) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *UpdateProjectLinkGitlab) GetType() *UpdateProjectTypeGitlab {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLinkGitlab) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkGitlab) GetDeployHooks() []UpdateProjectDeployHook2 {
	if o == nil {
		return []UpdateProjectDeployHook2{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLinkGitlab) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLinkGitlab) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLinkGitlab) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLinkGitlab) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectTypeGithub string

const (
	UpdateProjectTypeGithubGithub UpdateProjectTypeGithub = "github"
)

func (e UpdateProjectTypeGithub) ToPointer() *UpdateProjectTypeGithub {
	return &e
}
func (e *UpdateProjectTypeGithub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectTypeGithub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeGithub: %v", v)
	}
}

type UpdateProjectDeployHook1 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDeployHook1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDeployHook1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDeployHook1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDeployHook1) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDeployHook1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectLinkGithub struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                   `json:"repoOwnerId,omitempty"`
	Repo             *string                    `json:"repo,omitempty"`
	RepoID           *float64                   `json:"repoId,omitempty"`
	Type             *UpdateProjectTypeGithub   `json:"type,omitempty"`
	CreatedAt        *float64                   `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDeployHook1 `json:"deployHooks"`
	GitCredentialID  *string                    `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                   `json:"updatedAt,omitempty"`
	Sourceless       *bool                      `json:"sourceless,omitempty"`
	ProductionBranch *string                    `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectLinkGithub) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectLinkGithub) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *UpdateProjectLinkGithub) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectLinkGithub) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectLinkGithub) GetType() *UpdateProjectTypeGithub {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectLinkGithub) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectLinkGithub) GetDeployHooks() []UpdateProjectDeployHook1 {
	if o == nil {
		return []UpdateProjectDeployHook1{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectLinkGithub) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectLinkGithub) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectLinkGithub) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectLinkGithub) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectLinkUnionType string

const (
	UpdateProjectLinkUnionTypeUpdateProjectLinkGithub           UpdateProjectLinkUnionType = "updateProject_link_Github"
	UpdateProjectLinkUnionTypeUpdateProjectLinkGitlab           UpdateProjectLinkUnionType = "updateProject_link_Gitlab"
	UpdateProjectLinkUnionTypeUpdateProjectLinkBitbucket        UpdateProjectLinkUnionType = "updateProject_link_Bitbucket"
	UpdateProjectLinkUnionTypeUpdateProjectLinkGithubCustomHost UpdateProjectLinkUnionType = "updateProject_link_GithubCustomHost"
)

type UpdateProjectLinkUnion struct {
	UpdateProjectLinkGithub           *UpdateProjectLinkGithub           `queryParam:"inline"`
	UpdateProjectLinkGitlab           *UpdateProjectLinkGitlab           `queryParam:"inline"`
	UpdateProjectLinkBitbucket        *UpdateProjectLinkBitbucket        `queryParam:"inline"`
	UpdateProjectLinkGithubCustomHost *UpdateProjectLinkGithubCustomHost `queryParam:"inline"`

	Type UpdateProjectLinkUnionType
}

func CreateUpdateProjectLinkUnionUpdateProjectLinkGithub(updateProjectLinkGithub UpdateProjectLinkGithub) UpdateProjectLinkUnion {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLinkGithub

	return UpdateProjectLinkUnion{
		UpdateProjectLinkGithub: &updateProjectLinkGithub,
		Type:                    typ,
	}
}

func CreateUpdateProjectLinkUnionUpdateProjectLinkGitlab(updateProjectLinkGitlab UpdateProjectLinkGitlab) UpdateProjectLinkUnion {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLinkGitlab

	return UpdateProjectLinkUnion{
		UpdateProjectLinkGitlab: &updateProjectLinkGitlab,
		Type:                    typ,
	}
}

func CreateUpdateProjectLinkUnionUpdateProjectLinkBitbucket(updateProjectLinkBitbucket UpdateProjectLinkBitbucket) UpdateProjectLinkUnion {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLinkBitbucket

	return UpdateProjectLinkUnion{
		UpdateProjectLinkBitbucket: &updateProjectLinkBitbucket,
		Type:                       typ,
	}
}

func CreateUpdateProjectLinkUnionUpdateProjectLinkGithubCustomHost(updateProjectLinkGithubCustomHost UpdateProjectLinkGithubCustomHost) UpdateProjectLinkUnion {
	typ := UpdateProjectLinkUnionTypeUpdateProjectLinkGithubCustomHost

	return UpdateProjectLinkUnion{
		UpdateProjectLinkGithubCustomHost: &updateProjectLinkGithubCustomHost,
		Type:                              typ,
	}
}

func (u *UpdateProjectLinkUnion) UnmarshalJSON(data []byte) error {

	var updateProjectLinkGithub UpdateProjectLinkGithub = UpdateProjectLinkGithub{}
	if err := utils.UnmarshalJSON(data, &updateProjectLinkGithub, "", true, true); err == nil {
		u.UpdateProjectLinkGithub = &updateProjectLinkGithub
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLinkGithub
		return nil
	}

	var updateProjectLinkBitbucket UpdateProjectLinkBitbucket = UpdateProjectLinkBitbucket{}
	if err := utils.UnmarshalJSON(data, &updateProjectLinkBitbucket, "", true, true); err == nil {
		u.UpdateProjectLinkBitbucket = &updateProjectLinkBitbucket
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLinkBitbucket
		return nil
	}

	var updateProjectLinkGithubCustomHost UpdateProjectLinkGithubCustomHost = UpdateProjectLinkGithubCustomHost{}
	if err := utils.UnmarshalJSON(data, &updateProjectLinkGithubCustomHost, "", true, true); err == nil {
		u.UpdateProjectLinkGithubCustomHost = &updateProjectLinkGithubCustomHost
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLinkGithubCustomHost
		return nil
	}

	var updateProjectLinkGitlab UpdateProjectLinkGitlab = UpdateProjectLinkGitlab{}
	if err := utils.UnmarshalJSON(data, &updateProjectLinkGitlab, "", true, true); err == nil {
		u.UpdateProjectLinkGitlab = &updateProjectLinkGitlab
		u.Type = UpdateProjectLinkUnionTypeUpdateProjectLinkGitlab
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectLinkUnion", string(data))
}

func (u UpdateProjectLinkUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectLinkGithub != nil {
		return utils.MarshalJSON(u.UpdateProjectLinkGithub, "", true)
	}

	if u.UpdateProjectLinkGitlab != nil {
		return utils.MarshalJSON(u.UpdateProjectLinkGitlab, "", true)
	}

	if u.UpdateProjectLinkBitbucket != nil {
		return utils.MarshalJSON(u.UpdateProjectLinkBitbucket, "", true)
	}

	if u.UpdateProjectLinkGithubCustomHost != nil {
		return utils.MarshalJSON(u.UpdateProjectLinkGithubCustomHost, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectLinkUnion: all fields are null")
}

type UpdateProjectMicrofrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *UpdateProjectMicrofrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectMicrofrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *UpdateProjectMicrofrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type UpdateProjectMicrofrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *UpdateProjectMicrofrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *UpdateProjectMicrofrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateProjectMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *UpdateProjectMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *UpdateProjectMicrofrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type UpdateProjectMicrofrontendsUnionType string

const (
	UpdateProjectMicrofrontendsUnionTypeUpdateProjectMicrofrontends1 UpdateProjectMicrofrontendsUnionType = "updateProject_microfrontends_1"
	UpdateProjectMicrofrontendsUnionTypeUpdateProjectMicrofrontends2 UpdateProjectMicrofrontendsUnionType = "updateProject_microfrontends_2"
)

type UpdateProjectMicrofrontendsUnion struct {
	UpdateProjectMicrofrontends1 *UpdateProjectMicrofrontends1 `queryParam:"inline"`
	UpdateProjectMicrofrontends2 *UpdateProjectMicrofrontends2 `queryParam:"inline"`

	Type UpdateProjectMicrofrontendsUnionType
}

func CreateUpdateProjectMicrofrontendsUnionUpdateProjectMicrofrontends1(updateProjectMicrofrontends1 UpdateProjectMicrofrontends1) UpdateProjectMicrofrontendsUnion {
	typ := UpdateProjectMicrofrontendsUnionTypeUpdateProjectMicrofrontends1

	return UpdateProjectMicrofrontendsUnion{
		UpdateProjectMicrofrontends1: &updateProjectMicrofrontends1,
		Type:                         typ,
	}
}

func CreateUpdateProjectMicrofrontendsUnionUpdateProjectMicrofrontends2(updateProjectMicrofrontends2 UpdateProjectMicrofrontends2) UpdateProjectMicrofrontendsUnion {
	typ := UpdateProjectMicrofrontendsUnionTypeUpdateProjectMicrofrontends2

	return UpdateProjectMicrofrontendsUnion{
		UpdateProjectMicrofrontends2: &updateProjectMicrofrontends2,
		Type:                         typ,
	}
}

func (u *UpdateProjectMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var updateProjectMicrofrontends2 UpdateProjectMicrofrontends2 = UpdateProjectMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &updateProjectMicrofrontends2, "", true, true); err == nil {
		u.UpdateProjectMicrofrontends2 = &updateProjectMicrofrontends2
		u.Type = UpdateProjectMicrofrontendsUnionTypeUpdateProjectMicrofrontends2
		return nil
	}

	var updateProjectMicrofrontends1 UpdateProjectMicrofrontends1 = UpdateProjectMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &updateProjectMicrofrontends1, "", true, true); err == nil {
		u.UpdateProjectMicrofrontends1 = &updateProjectMicrofrontends1
		u.Type = UpdateProjectMicrofrontendsUnionTypeUpdateProjectMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectMicrofrontendsUnion", string(data))
}

func (u UpdateProjectMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectMicrofrontends1 != nil {
		return utils.MarshalJSON(u.UpdateProjectMicrofrontends1, "", true)
	}

	if u.UpdateProjectMicrofrontends2 != nil {
		return utils.MarshalJSON(u.UpdateProjectMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectMicrofrontendsUnion: all fields are null")
}

type UpdateProjectNodeVersionResponse string

const (
	UpdateProjectNodeVersionResponseTwentyTwoDotX  UpdateProjectNodeVersionResponse = "22.x"
	UpdateProjectNodeVersionResponseTwentyDotX     UpdateProjectNodeVersionResponse = "20.x"
	UpdateProjectNodeVersionResponseEighteenDotX   UpdateProjectNodeVersionResponse = "18.x"
	UpdateProjectNodeVersionResponseSixteenDotX    UpdateProjectNodeVersionResponse = "16.x"
	UpdateProjectNodeVersionResponseFourteenDotX   UpdateProjectNodeVersionResponse = "14.x"
	UpdateProjectNodeVersionResponseTwelveDotX     UpdateProjectNodeVersionResponse = "12.x"
	UpdateProjectNodeVersionResponseTenDotX        UpdateProjectNodeVersionResponse = "10.x"
	UpdateProjectNodeVersionResponseEightDot10DotX UpdateProjectNodeVersionResponse = "8.10.x"
)

func (e UpdateProjectNodeVersionResponse) ToPointer() *UpdateProjectNodeVersionResponse {
	return &e
}
func (e *UpdateProjectNodeVersionResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = UpdateProjectNodeVersionResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectNodeVersionResponse: %v", v)
	}
}

type UpdateProjectPathResponse struct {
	Value string `json:"value"`
}

func (o *UpdateProjectPathResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectOptionsAllowlistResponse struct {
	Paths []UpdateProjectPathResponse `json:"paths"`
}

func (o *UpdateProjectOptionsAllowlistResponse) GetPaths() []UpdateProjectPathResponse {
	if o == nil {
		return []UpdateProjectPathResponse{}
	}
	return o.Paths
}

type UpdateProjectPasswordProtectionResponse struct {
}

type UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse string

const (
	UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponseStandardLegacy UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse = "standard_legacy"
	UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponseStandard       UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse = "standard"
	UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponsePerformance    UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse = "performance"
)

func (e UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse) ToPointer() *UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse {
	return &e
}
func (e *UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse: %v", v)
	}
}

type UpdateProjectResourceConfigBuildMachineTypeResponse string

const (
	UpdateProjectResourceConfigBuildMachineTypeResponseEnhanced UpdateProjectResourceConfigBuildMachineTypeResponse = "enhanced"
	UpdateProjectResourceConfigBuildMachineTypeResponseTurbo    UpdateProjectResourceConfigBuildMachineTypeResponse = "turbo"
)

func (e UpdateProjectResourceConfigBuildMachineTypeResponse) ToPointer() *UpdateProjectResourceConfigBuildMachineTypeResponse {
	return &e
}
func (e *UpdateProjectResourceConfigBuildMachineTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = UpdateProjectResourceConfigBuildMachineTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectResourceConfigBuildMachineTypeResponse: %v", v)
	}
}

type UpdateProjectResourceConfigResponse struct {
	Fluid                      *bool                                                         `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                      `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                      `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                         `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                         `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *UpdateProjectResourceConfigBuildMachineTypeResponse          `json:"buildMachineType,omitempty"`
}

func (o *UpdateProjectResourceConfigResponse) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectResourceConfigResponse) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectResourceConfigResponse) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectResourceConfigResponse) GetFunctionDefaultMemoryType() *UpdateProjectResourceConfigFunctionDefaultMemoryTypeResponse {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectResourceConfigResponse) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectResourceConfigResponse) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *UpdateProjectResourceConfigResponse) GetBuildMachineType() *UpdateProjectResourceConfigBuildMachineTypeResponse {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

// UpdateProjectRollbackDescription - Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
type UpdateProjectRollbackDescription struct {
	// The user who rolled back the project.
	UserID string `json:"userId"`
	// The username of the user who rolled back the project.
	Username string `json:"username"`
	// User-supplied explanation of why they rolled back the project. Limited to 250 characters.
	Description string `json:"description"`
	// Timestamp of when the rollback was requested.
	CreatedAt float64 `json:"createdAt"`
}

func (o *UpdateProjectRollbackDescription) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectRollbackDescription) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *UpdateProjectRollbackDescription) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdateProjectRollbackDescription) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// UpdateProjectStage - An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
type UpdateProjectStage struct {
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval *bool `json:"requireApproval,omitempty"`
	// Duration in minutes for automatic advancement to the next stage
	Duration *float64 `json:"duration,omitempty"`
}

func (o *UpdateProjectStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *UpdateProjectStage) GetRequireApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireApproval
}

func (o *UpdateProjectStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

// UpdateProjectRollingRelease - Project-level rolling release configuration that defines how deployments should be gradually rolled out
type UpdateProjectRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// An array of all the stages required during a deployment release. Each stage defines a target percentage and advancement rules. The final stage must always have targetPercentage: 100.
	Stages []UpdateProjectStage `json:"stages,omitempty"`
	// Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
	CanaryResponseHeader *bool `json:"canaryResponseHeader,omitempty"`
}

func (o *UpdateProjectRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *UpdateProjectRollingRelease) GetStages() []UpdateProjectStage {
	if o == nil {
		return nil
	}
	return o.Stages
}

func (o *UpdateProjectRollingRelease) GetCanaryResponseHeader() *bool {
	if o == nil {
		return nil
	}
	return o.CanaryResponseHeader
}

type UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType string

const (
	UpdateProjectDefaultResourceConfigFunctionDefaultMemoryTypeStandardLegacy UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType = "standard_legacy"
	UpdateProjectDefaultResourceConfigFunctionDefaultMemoryTypeStandard       UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType = "standard"
	UpdateProjectDefaultResourceConfigFunctionDefaultMemoryTypePerformance    UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType = "performance"
)

func (e UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType) ToPointer() *UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType {
	return &e
}
func (e *UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType: %v", v)
	}
}

type UpdateProjectDefaultResourceConfigBuildMachineType string

const (
	UpdateProjectDefaultResourceConfigBuildMachineTypeEnhanced UpdateProjectDefaultResourceConfigBuildMachineType = "enhanced"
	UpdateProjectDefaultResourceConfigBuildMachineTypeTurbo    UpdateProjectDefaultResourceConfigBuildMachineType = "turbo"
)

func (e UpdateProjectDefaultResourceConfigBuildMachineType) ToPointer() *UpdateProjectDefaultResourceConfigBuildMachineType {
	return &e
}
func (e *UpdateProjectDefaultResourceConfigBuildMachineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = UpdateProjectDefaultResourceConfigBuildMachineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDefaultResourceConfigBuildMachineType: %v", v)
	}
}

type UpdateProjectDefaultResourceConfig struct {
	Fluid                      *bool                                                        `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                     `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                     `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                        `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                        `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *UpdateProjectDefaultResourceConfigBuildMachineType          `json:"buildMachineType,omitempty"`
}

func (o *UpdateProjectDefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionDefaultMemoryType() *UpdateProjectDefaultResourceConfigFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectDefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectDefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *UpdateProjectDefaultResourceConfig) GetBuildMachineType() *UpdateProjectDefaultResourceConfigBuildMachineType {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

type UpdateProjectSsoProtectionDeploymentTypeResponse string

const (
	UpdateProjectSsoProtectionDeploymentTypeResponsePreview                          UpdateProjectSsoProtectionDeploymentTypeResponse = "preview"
	UpdateProjectSsoProtectionDeploymentTypeResponseAll                              UpdateProjectSsoProtectionDeploymentTypeResponse = "all"
	UpdateProjectSsoProtectionDeploymentTypeResponseProdDeploymentUrlsAndAllPreviews UpdateProjectSsoProtectionDeploymentTypeResponse = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectSsoProtectionDeploymentTypeResponse) ToPointer() *UpdateProjectSsoProtectionDeploymentTypeResponse {
	return &e
}
func (e *UpdateProjectSsoProtectionDeploymentTypeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectSsoProtectionDeploymentTypeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectSsoProtectionDeploymentTypeResponse: %v", v)
	}
}

type UpdateProjectSsoProtectionResponse struct {
	DeploymentType UpdateProjectSsoProtectionDeploymentTypeResponse `json:"deploymentType"`
}

func (o *UpdateProjectSsoProtectionResponse) GetDeploymentType() UpdateProjectSsoProtectionDeploymentTypeResponse {
	if o == nil {
		return UpdateProjectSsoProtectionDeploymentTypeResponse("")
	}
	return o.DeploymentType
}

type UpdateProjectAliasAssignedType string

const (
	UpdateProjectAliasAssignedTypeNumber  UpdateProjectAliasAssignedType = "number"
	UpdateProjectAliasAssignedTypeBoolean UpdateProjectAliasAssignedType = "boolean"
)

type UpdateProjectAliasAssigned struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type UpdateProjectAliasAssignedType
}

func CreateUpdateProjectAliasAssignedNumber(number float64) UpdateProjectAliasAssigned {
	typ := UpdateProjectAliasAssignedTypeNumber

	return UpdateProjectAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectAliasAssignedBoolean(boolean bool) UpdateProjectAliasAssigned {
	typ := UpdateProjectAliasAssignedTypeBoolean

	return UpdateProjectAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectAliasAssigned", string(data))
}

func (u UpdateProjectAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectAliasAssigned: all fields are null")
}

type UpdateProjectAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// UpdateProjectBranchMatcherTypeLambdas - The type of matching to perform
type UpdateProjectBranchMatcherTypeLambdas string

const (
	UpdateProjectBranchMatcherTypeLambdasEndsWith   UpdateProjectBranchMatcherTypeLambdas = "endsWith"
	UpdateProjectBranchMatcherTypeLambdasStartsWith UpdateProjectBranchMatcherTypeLambdas = "startsWith"
	UpdateProjectBranchMatcherTypeLambdasEquals     UpdateProjectBranchMatcherTypeLambdas = "equals"
)

func (e UpdateProjectBranchMatcherTypeLambdas) ToPointer() *UpdateProjectBranchMatcherTypeLambdas {
	return &e
}
func (e *UpdateProjectBranchMatcherTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectBranchMatcherTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectBranchMatcherTypeLambdas: %v", v)
	}
}

type UpdateProjectBranchMatcherLambdas struct {
	// The type of matching to perform
	Type UpdateProjectBranchMatcherTypeLambdas `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *UpdateProjectBranchMatcherLambdas) GetType() UpdateProjectBranchMatcherTypeLambdas {
	if o == nil {
		return UpdateProjectBranchMatcherTypeLambdas("")
	}
	return o.Type
}

func (o *UpdateProjectBranchMatcherLambdas) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateProjectBuild struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *UpdateProjectBuild) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *UpdateProjectBuild) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectBuild) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type UpdateProjectChecksConclusion string

const (
	UpdateProjectChecksConclusionSucceeded UpdateProjectChecksConclusion = "succeeded"
	UpdateProjectChecksConclusionFailed    UpdateProjectChecksConclusion = "failed"
	UpdateProjectChecksConclusionSkipped   UpdateProjectChecksConclusion = "skipped"
	UpdateProjectChecksConclusionCanceled  UpdateProjectChecksConclusion = "canceled"
)

func (e UpdateProjectChecksConclusion) ToPointer() *UpdateProjectChecksConclusion {
	return &e
}
func (e *UpdateProjectChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectChecksConclusion: %v", v)
	}
}

type UpdateProjectChecksState string

const (
	UpdateProjectChecksStateRegistered UpdateProjectChecksState = "registered"
	UpdateProjectChecksStateRunning    UpdateProjectChecksState = "running"
	UpdateProjectChecksStateCompleted  UpdateProjectChecksState = "completed"
)

func (e UpdateProjectChecksState) ToPointer() *UpdateProjectChecksState {
	return &e
}
func (e *UpdateProjectChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectChecksState: %v", v)
	}
}

type UpdateProjectCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *UpdateProjectOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *UpdateProjectOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *UpdateProjectOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *UpdateProjectOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *UpdateProjectOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *UpdateProjectOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateProjectOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *UpdateProjectOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type UpdateProjectPlan string

const (
	UpdateProjectPlanPro        UpdateProjectPlan = "pro"
	UpdateProjectPlanEnterprise UpdateProjectPlan = "enterprise"
	UpdateProjectPlanHobby      UpdateProjectPlan = "hobby"
)

func (e UpdateProjectPlan) ToPointer() *UpdateProjectPlan {
	return &e
}
func (e *UpdateProjectPlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectPlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectPlan: %v", v)
	}
}

type UpdateProjectReadyState string

const (
	UpdateProjectReadyStateBuilding     UpdateProjectReadyState = "BUILDING"
	UpdateProjectReadyStateError        UpdateProjectReadyState = "ERROR"
	UpdateProjectReadyStateInitializing UpdateProjectReadyState = "INITIALIZING"
	UpdateProjectReadyStateQueued       UpdateProjectReadyState = "QUEUED"
	UpdateProjectReadyStateReady        UpdateProjectReadyState = "READY"
	UpdateProjectReadyStateCanceled     UpdateProjectReadyState = "CANCELED"
)

func (e UpdateProjectReadyState) ToPointer() *UpdateProjectReadyState {
	return &e
}
func (e *UpdateProjectReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectReadyState: %v", v)
	}
}

type UpdateProjectReadySubstate string

const (
	UpdateProjectReadySubstateStaged   UpdateProjectReadySubstate = "STAGED"
	UpdateProjectReadySubstateRolling  UpdateProjectReadySubstate = "ROLLING"
	UpdateProjectReadySubstatePromoted UpdateProjectReadySubstate = "PROMOTED"
)

func (e UpdateProjectReadySubstate) ToPointer() *UpdateProjectReadySubstate {
	return &e
}
func (e *UpdateProjectReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectReadySubstate: %v", v)
	}
}

type UpdateProjectTypeLambdas string

const (
	UpdateProjectTypeLambdasLambdas UpdateProjectTypeLambdas = "LAMBDAS"
)

func (e UpdateProjectTypeLambdas) ToPointer() *UpdateProjectTypeLambdas {
	return &e
}
func (e *UpdateProjectTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTypeLambdas: %v", v)
	}
}

type UpdateProjectTargets struct {
	ID                     string                             `json:"id"`
	Alias                  []string                           `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                            `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                           `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                           `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectBuild               `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                              `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                            `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                            `json:"createdAt"`
	CreatedIn              string                             `json:"createdIn"`
	Creator                *UpdateProjectCreator              `json:"creator"`
	DeletedAt              *float64                           `json:"deletedAt,omitempty"`
	DeploymentHostname     string                             `json:"deploymentHostname"`
	Forced                 *bool                              `json:"forced,omitempty"`
	Name                   string                             `json:"name"`
	Meta                   map[string]string                  `json:"meta,omitempty"`
	MonorepoManager        *string                            `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectPlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                       `json:"previewCommentsEnabled,omitempty"`
	Private                bool                        `json:"private"`
	ReadyAt                *float64                    `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                    `json:"requestedAt,omitempty"`
	Target                 *string                     `json:"target,omitempty"`
	TeamID                 *string                     `json:"teamId,omitempty"`
	Type                   UpdateProjectTypeLambdas    `json:"type"`
	URL                    string                      `json:"url"`
	UserID                 string                      `json:"userId"`
	WithCache              *bool                       `json:"withCache,omitempty"`
}

func (o *UpdateProjectTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectTargets) GetAliasAssigned() *UpdateProjectAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectTargets) GetAliasError() *UpdateProjectAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectTargets) GetBranchMatcher() *UpdateProjectBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectTargets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectTargets) GetBuilds() []UpdateProjectBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectTargets) GetChecksConclusion() *UpdateProjectChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectTargets) GetChecksState() *UpdateProjectChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectTargets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectTargets) GetCreator() *UpdateProjectCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectTargets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *UpdateProjectTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectTargets) GetOidcTokenClaims() *UpdateProjectOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectTargets) GetPlan() UpdateProjectPlan {
	if o == nil {
		return UpdateProjectPlan("")
	}
	return o.Plan
}

func (o *UpdateProjectTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectTargets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectTargets) GetReadyState() UpdateProjectReadyState {
	if o == nil {
		return UpdateProjectReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectTargets) GetReadySubstate() *UpdateProjectReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectTargets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectTargets) GetType() UpdateProjectTypeLambdas {
	if o == nil {
		return UpdateProjectTypeLambdas("")
	}
	return o.Type
}

func (o *UpdateProjectTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectPermissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	ObservabilityNotebook                    []components.ACLAction `json:"observabilityNotebook,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	VercelAppInstallation                    []components.ACLAction `json:"vercelAppInstallation,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMemberMfaStatus                      []components.ACLAction `json:"teamMemberMfaStatus,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	VercelRun                                []components.ACLAction `json:"vercelRun,omitempty"`
	VercelRunExec                            []components.ACLAction `json:"vercelRunExec,omitempty"`
	APIKey                                   []components.ACLAction `json:"apiKey,omitempty"`
	APIKeyOwnedBySelf                        []components.ACLAction `json:"apiKeyOwnedBySelf,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	BuildMachine                             []components.ACLAction `json:"buildMachine,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	EdgeCacheNamespace                       []components.ACLAction `json:"edgeCacheNamespace,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	OnDemandBuild                            []components.ACLAction `json:"onDemandBuild,omitempty"`
	OnDemandConcurrency                      []components.ACLAction `json:"onDemandConcurrency,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectCheck                             []components.ACLAction `json:"projectCheck,omitempty"`
	ProjectCheckRun                          []components.ACLAction `json:"projectCheckRun,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *UpdateProjectPermissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateProjectPermissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *UpdateProjectPermissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *UpdateProjectPermissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *UpdateProjectPermissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *UpdateProjectPermissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *UpdateProjectPermissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *UpdateProjectPermissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *UpdateProjectPermissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *UpdateProjectPermissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *UpdateProjectPermissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdateProjectPermissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *UpdateProjectPermissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *UpdateProjectPermissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *UpdateProjectPermissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *UpdateProjectPermissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateProjectPermissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *UpdateProjectPermissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *UpdateProjectPermissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UpdateProjectPermissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *UpdateProjectPermissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *UpdateProjectPermissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *UpdateProjectPermissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *UpdateProjectPermissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UpdateProjectPermissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *UpdateProjectPermissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *UpdateProjectPermissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *UpdateProjectPermissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *UpdateProjectPermissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *UpdateProjectPermissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *UpdateProjectPermissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *UpdateProjectPermissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *UpdateProjectPermissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *UpdateProjectPermissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *UpdateProjectPermissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *UpdateProjectPermissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateProjectPermissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *UpdateProjectPermissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *UpdateProjectPermissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *UpdateProjectPermissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *UpdateProjectPermissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *UpdateProjectPermissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *UpdateProjectPermissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *UpdateProjectPermissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateProjectPermissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *UpdateProjectPermissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *UpdateProjectPermissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *UpdateProjectPermissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *UpdateProjectPermissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *UpdateProjectPermissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *UpdateProjectPermissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *UpdateProjectPermissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *UpdateProjectPermissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *UpdateProjectPermissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *UpdateProjectPermissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *UpdateProjectPermissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *UpdateProjectPermissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *UpdateProjectPermissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *UpdateProjectPermissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *UpdateProjectPermissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *UpdateProjectPermissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *UpdateProjectPermissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UpdateProjectPermissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *UpdateProjectPermissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *UpdateProjectPermissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *UpdateProjectPermissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *UpdateProjectPermissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *UpdateProjectPermissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *UpdateProjectPermissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *UpdateProjectPermissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *UpdateProjectPermissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *UpdateProjectPermissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *UpdateProjectPermissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *UpdateProjectPermissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *UpdateProjectPermissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *UpdateProjectPermissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *UpdateProjectPermissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *UpdateProjectPermissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *UpdateProjectPermissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *UpdateProjectPermissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *UpdateProjectPermissions) GetObservabilityNotebook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityNotebook
}

func (o *UpdateProjectPermissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *UpdateProjectPermissions) GetVercelAppInstallation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelAppInstallation
}

func (o *UpdateProjectPermissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *UpdateProjectPermissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectPermissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UpdateProjectPermissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *UpdateProjectPermissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *UpdateProjectPermissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *UpdateProjectPermissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *UpdateProjectPermissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *UpdateProjectPermissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *UpdateProjectPermissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *UpdateProjectPermissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateProjectPermissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *UpdateProjectPermissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *UpdateProjectPermissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *UpdateProjectPermissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *UpdateProjectPermissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *UpdateProjectPermissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *UpdateProjectPermissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *UpdateProjectPermissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *UpdateProjectPermissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *UpdateProjectPermissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *UpdateProjectPermissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *UpdateProjectPermissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *UpdateProjectPermissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *UpdateProjectPermissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *UpdateProjectPermissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *UpdateProjectPermissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *UpdateProjectPermissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *UpdateProjectPermissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *UpdateProjectPermissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *UpdateProjectPermissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *UpdateProjectPermissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *UpdateProjectPermissions) GetTeamMemberMfaStatus() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMemberMfaStatus
}

func (o *UpdateProjectPermissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *UpdateProjectPermissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *UpdateProjectPermissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *UpdateProjectPermissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UpdateProjectPermissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *UpdateProjectPermissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *UpdateProjectPermissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *UpdateProjectPermissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *UpdateProjectPermissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *UpdateProjectPermissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *UpdateProjectPermissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *UpdateProjectPermissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *UpdateProjectPermissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *UpdateProjectPermissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *UpdateProjectPermissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *UpdateProjectPermissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *UpdateProjectPermissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *UpdateProjectPermissions) GetVercelRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRun
}

func (o *UpdateProjectPermissions) GetVercelRunExec() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRunExec
}

func (o *UpdateProjectPermissions) GetAPIKey() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *UpdateProjectPermissions) GetAPIKeyOwnedBySelf() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKeyOwnedBySelf
}

func (o *UpdateProjectPermissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *UpdateProjectPermissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *UpdateProjectPermissions) GetBuildMachine() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

func (o *UpdateProjectPermissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *UpdateProjectPermissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *UpdateProjectPermissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *UpdateProjectPermissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *UpdateProjectPermissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *UpdateProjectPermissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *UpdateProjectPermissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *UpdateProjectPermissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *UpdateProjectPermissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *UpdateProjectPermissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *UpdateProjectPermissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *UpdateProjectPermissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *UpdateProjectPermissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *UpdateProjectPermissions) GetEdgeCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeCacheNamespace
}

func (o *UpdateProjectPermissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *UpdateProjectPermissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *UpdateProjectPermissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *UpdateProjectPermissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectPermissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectPermissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *UpdateProjectPermissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *UpdateProjectPermissions) GetOnDemandBuild() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandBuild
}

func (o *UpdateProjectPermissions) GetOnDemandConcurrency() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandConcurrency
}

func (o *UpdateProjectPermissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateProjectPermissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *UpdateProjectPermissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *UpdateProjectPermissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *UpdateProjectPermissions) GetProjectCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheck
}

func (o *UpdateProjectPermissions) GetProjectCheckRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheckRun
}

func (o *UpdateProjectPermissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *UpdateProjectPermissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *UpdateProjectPermissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *UpdateProjectPermissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *UpdateProjectPermissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *UpdateProjectPermissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *UpdateProjectPermissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *UpdateProjectPermissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *UpdateProjectPermissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectPermissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *UpdateProjectPermissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *UpdateProjectPermissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *UpdateProjectPermissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *UpdateProjectPermissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *UpdateProjectPermissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *UpdateProjectPermissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *UpdateProjectPermissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *UpdateProjectPermissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *UpdateProjectPermissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *UpdateProjectPermissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *UpdateProjectPermissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *UpdateProjectPermissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *UpdateProjectPermissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *UpdateProjectPermissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *UpdateProjectPermissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *UpdateProjectPermissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *UpdateProjectPermissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *UpdateProjectPermissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectPermissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectPermissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectPermissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *UpdateProjectPermissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type UpdateProjectLastRollbackTarget struct {
}

type UpdateProjectJobStatus string

const (
	UpdateProjectJobStatusSucceeded  UpdateProjectJobStatus = "succeeded"
	UpdateProjectJobStatusFailed     UpdateProjectJobStatus = "failed"
	UpdateProjectJobStatusSkipped    UpdateProjectJobStatus = "skipped"
	UpdateProjectJobStatusPending    UpdateProjectJobStatus = "pending"
	UpdateProjectJobStatusInProgress UpdateProjectJobStatus = "in-progress"
)

func (e UpdateProjectJobStatus) ToPointer() *UpdateProjectJobStatus {
	return &e
}
func (e *UpdateProjectJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectJobStatus: %v", v)
	}
}

type UpdateProjectLastAliasRequestType string

const (
	UpdateProjectLastAliasRequestTypePromote  UpdateProjectLastAliasRequestType = "promote"
	UpdateProjectLastAliasRequestTypeRollback UpdateProjectLastAliasRequestType = "rollback"
)

func (e UpdateProjectLastAliasRequestType) ToPointer() *UpdateProjectLastAliasRequestType {
	return &e
}
func (e *UpdateProjectLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectLastAliasRequestType: %v", v)
	}
}

type UpdateProjectLastAliasRequest struct {
	FromDeploymentID string `json:"fromDeploymentId"`
	ToDeploymentID   string `json:"toDeploymentId"`
	// If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
	FromRollingReleaseID *string                           `json:"fromRollingReleaseId,omitempty"`
	JobStatus            UpdateProjectJobStatus            `json:"jobStatus"`
	RequestedAt          float64                           `json:"requestedAt"`
	Type                 UpdateProjectLastAliasRequestType `json:"type"`
}

func (o *UpdateProjectLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *UpdateProjectLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *UpdateProjectLastAliasRequest) GetFromRollingReleaseID() *string {
	if o == nil {
		return nil
	}
	return o.FromRollingReleaseID
}

func (o *UpdateProjectLastAliasRequest) GetJobStatus() UpdateProjectJobStatus {
	if o == nil {
		return UpdateProjectJobStatus("")
	}
	return o.JobStatus
}

func (o *UpdateProjectLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *UpdateProjectLastAliasRequest) GetType() UpdateProjectLastAliasRequestType {
	if o == nil {
		return UpdateProjectLastAliasRequestType("")
	}
	return o.Type
}

type UpdateProjectScopeAutomationBypass string

const (
	UpdateProjectScopeAutomationBypassAutomationBypass UpdateProjectScopeAutomationBypass = "automation-bypass"
)

func (e UpdateProjectScopeAutomationBypass) ToPointer() *UpdateProjectScopeAutomationBypass {
	return &e
}
func (e *UpdateProjectScopeAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectScopeAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectScopeAutomationBypass: %v", v)
	}
}

type UpdateProjectProtectionBypassAutomationBypass struct {
	CreatedAt float64                            `json:"createdAt"`
	CreatedBy string                             `json:"createdBy"`
	Scope     UpdateProjectScopeAutomationBypass `json:"scope"`
}

func (o *UpdateProjectProtectionBypassAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypassAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypassAutomationBypass) GetScope() UpdateProjectScopeAutomationBypass {
	if o == nil {
		return UpdateProjectScopeAutomationBypass("")
	}
	return o.Scope
}

type UpdateProjectScopeIntegrationAutomationBypass string

const (
	UpdateProjectScopeIntegrationAutomationBypassIntegrationAutomationBypass UpdateProjectScopeIntegrationAutomationBypass = "integration-automation-bypass"
)

func (e UpdateProjectScopeIntegrationAutomationBypass) ToPointer() *UpdateProjectScopeIntegrationAutomationBypass {
	return &e
}
func (e *UpdateProjectScopeIntegrationAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-automation-bypass":
		*e = UpdateProjectScopeIntegrationAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectScopeIntegrationAutomationBypass: %v", v)
	}
}

type UpdateProjectProtectionBypassIntegrationAutomationBypass struct {
	CreatedAt       float64                                       `json:"createdAt"`
	CreatedBy       string                                        `json:"createdBy"`
	Scope           UpdateProjectScopeIntegrationAutomationBypass `json:"scope"`
	IntegrationID   string                                        `json:"integrationId"`
	ConfigurationID string                                        `json:"configurationId"`
}

func (o *UpdateProjectProtectionBypassIntegrationAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypassIntegrationAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypassIntegrationAutomationBypass) GetScope() UpdateProjectScopeIntegrationAutomationBypass {
	if o == nil {
		return UpdateProjectScopeIntegrationAutomationBypass("")
	}
	return o.Scope
}

func (o *UpdateProjectProtectionBypassIntegrationAutomationBypass) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateProjectProtectionBypassIntegrationAutomationBypass) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

type UpdateProjectProtectionBypassUnionType string

const (
	UpdateProjectProtectionBypassUnionTypeUpdateProjectProtectionBypassIntegrationAutomationBypass UpdateProjectProtectionBypassUnionType = "updateProject_protectionBypass_IntegrationAutomationBypass"
	UpdateProjectProtectionBypassUnionTypeUpdateProjectProtectionBypassAutomationBypass            UpdateProjectProtectionBypassUnionType = "updateProject_protectionBypass_AutomationBypass"
)

type UpdateProjectProtectionBypassUnion struct {
	UpdateProjectProtectionBypassIntegrationAutomationBypass *UpdateProjectProtectionBypassIntegrationAutomationBypass `queryParam:"inline"`
	UpdateProjectProtectionBypassAutomationBypass            *UpdateProjectProtectionBypassAutomationBypass            `queryParam:"inline"`

	Type UpdateProjectProtectionBypassUnionType
}

func CreateUpdateProjectProtectionBypassUnionUpdateProjectProtectionBypassIntegrationAutomationBypass(updateProjectProtectionBypassIntegrationAutomationBypass UpdateProjectProtectionBypassIntegrationAutomationBypass) UpdateProjectProtectionBypassUnion {
	typ := UpdateProjectProtectionBypassUnionTypeUpdateProjectProtectionBypassIntegrationAutomationBypass

	return UpdateProjectProtectionBypassUnion{
		UpdateProjectProtectionBypassIntegrationAutomationBypass: &updateProjectProtectionBypassIntegrationAutomationBypass,
		Type: typ,
	}
}

func CreateUpdateProjectProtectionBypassUnionUpdateProjectProtectionBypassAutomationBypass(updateProjectProtectionBypassAutomationBypass UpdateProjectProtectionBypassAutomationBypass) UpdateProjectProtectionBypassUnion {
	typ := UpdateProjectProtectionBypassUnionTypeUpdateProjectProtectionBypassAutomationBypass

	return UpdateProjectProtectionBypassUnion{
		UpdateProjectProtectionBypassAutomationBypass: &updateProjectProtectionBypassAutomationBypass,
		Type: typ,
	}
}

func (u *UpdateProjectProtectionBypassUnion) UnmarshalJSON(data []byte) error {

	var updateProjectProtectionBypassAutomationBypass UpdateProjectProtectionBypassAutomationBypass = UpdateProjectProtectionBypassAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &updateProjectProtectionBypassAutomationBypass, "", true, true); err == nil {
		u.UpdateProjectProtectionBypassAutomationBypass = &updateProjectProtectionBypassAutomationBypass
		u.Type = UpdateProjectProtectionBypassUnionTypeUpdateProjectProtectionBypassAutomationBypass
		return nil
	}

	var updateProjectProtectionBypassIntegrationAutomationBypass UpdateProjectProtectionBypassIntegrationAutomationBypass = UpdateProjectProtectionBypassIntegrationAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &updateProjectProtectionBypassIntegrationAutomationBypass, "", true, true); err == nil {
		u.UpdateProjectProtectionBypassIntegrationAutomationBypass = &updateProjectProtectionBypassIntegrationAutomationBypass
		u.Type = UpdateProjectProtectionBypassUnionTypeUpdateProjectProtectionBypassIntegrationAutomationBypass
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectProtectionBypassUnion", string(data))
}

func (u UpdateProjectProtectionBypassUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectProtectionBypassIntegrationAutomationBypass != nil {
		return utils.MarshalJSON(u.UpdateProjectProtectionBypassIntegrationAutomationBypass, "", true)
	}

	if u.UpdateProjectProtectionBypassAutomationBypass != nil {
		return utils.MarshalJSON(u.UpdateProjectProtectionBypassAutomationBypass, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectProtectionBypassUnion: all fields are null")
}

type UpdateProjectTrustedIpsDeploymentTypeResponse2 string

const (
	UpdateProjectTrustedIpsDeploymentTypeResponse2Production                       UpdateProjectTrustedIpsDeploymentTypeResponse2 = "production"
	UpdateProjectTrustedIpsDeploymentTypeResponse2Preview                          UpdateProjectTrustedIpsDeploymentTypeResponse2 = "preview"
	UpdateProjectTrustedIpsDeploymentTypeResponse2All                              UpdateProjectTrustedIpsDeploymentTypeResponse2 = "all"
	UpdateProjectTrustedIpsDeploymentTypeResponse2ProdDeploymentUrlsAndAllPreviews UpdateProjectTrustedIpsDeploymentTypeResponse2 = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectTrustedIpsDeploymentTypeResponse2) ToPointer() *UpdateProjectTrustedIpsDeploymentTypeResponse2 {
	return &e
}
func (e *UpdateProjectTrustedIpsDeploymentTypeResponse2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectTrustedIpsDeploymentTypeResponse2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTrustedIpsDeploymentTypeResponse2: %v", v)
	}
}

type UpdateProjectTrustedIpsResponse2 struct {
	DeploymentType UpdateProjectTrustedIpsDeploymentTypeResponse2 `json:"deploymentType"`
}

func (o *UpdateProjectTrustedIpsResponse2) GetDeploymentType() UpdateProjectTrustedIpsDeploymentTypeResponse2 {
	if o == nil {
		return UpdateProjectTrustedIpsDeploymentTypeResponse2("")
	}
	return o.DeploymentType
}

type UpdateProjectTrustedIpsDeploymentTypeResponse1 string

const (
	UpdateProjectTrustedIpsDeploymentTypeResponse1Production                       UpdateProjectTrustedIpsDeploymentTypeResponse1 = "production"
	UpdateProjectTrustedIpsDeploymentTypeResponse1Preview                          UpdateProjectTrustedIpsDeploymentTypeResponse1 = "preview"
	UpdateProjectTrustedIpsDeploymentTypeResponse1All                              UpdateProjectTrustedIpsDeploymentTypeResponse1 = "all"
	UpdateProjectTrustedIpsDeploymentTypeResponse1ProdDeploymentUrlsAndAllPreviews UpdateProjectTrustedIpsDeploymentTypeResponse1 = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectTrustedIpsDeploymentTypeResponse1) ToPointer() *UpdateProjectTrustedIpsDeploymentTypeResponse1 {
	return &e
}
func (e *UpdateProjectTrustedIpsDeploymentTypeResponse1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectTrustedIpsDeploymentTypeResponse1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTrustedIpsDeploymentTypeResponse1: %v", v)
	}
}

type UpdateProjectAddressResponse struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *UpdateProjectAddressResponse) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectAddressResponse) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type UpdateProjectProtectionModeResponse string

const (
	UpdateProjectProtectionModeResponseAdditional UpdateProjectProtectionModeResponse = "additional"
	UpdateProjectProtectionModeResponseExclusive  UpdateProjectProtectionModeResponse = "exclusive"
)

func (e UpdateProjectProtectionModeResponse) ToPointer() *UpdateProjectProtectionModeResponse {
	return &e
}
func (e *UpdateProjectProtectionModeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectProtectionModeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProtectionModeResponse: %v", v)
	}
}

type UpdateProjectTrustedIpsResponse1 struct {
	DeploymentType UpdateProjectTrustedIpsDeploymentTypeResponse1 `json:"deploymentType"`
	Addresses      []UpdateProjectAddressResponse                 `json:"addresses"`
	ProtectionMode UpdateProjectProtectionModeResponse            `json:"protectionMode"`
}

func (o *UpdateProjectTrustedIpsResponse1) GetDeploymentType() UpdateProjectTrustedIpsDeploymentTypeResponse1 {
	if o == nil {
		return UpdateProjectTrustedIpsDeploymentTypeResponse1("")
	}
	return o.DeploymentType
}

func (o *UpdateProjectTrustedIpsResponse1) GetAddresses() []UpdateProjectAddressResponse {
	if o == nil {
		return []UpdateProjectAddressResponse{}
	}
	return o.Addresses
}

func (o *UpdateProjectTrustedIpsResponse1) GetProtectionMode() UpdateProjectProtectionModeResponse {
	if o == nil {
		return UpdateProjectProtectionModeResponse("")
	}
	return o.ProtectionMode
}

type UpdateProjectTrustedIpsUnionType string

const (
	UpdateProjectTrustedIpsUnionTypeUpdateProjectTrustedIpsResponse1 UpdateProjectTrustedIpsUnionType = "updateProject_trustedIps_response_1"
	UpdateProjectTrustedIpsUnionTypeUpdateProjectTrustedIpsResponse2 UpdateProjectTrustedIpsUnionType = "updateProject_trustedIps_response_2"
)

type UpdateProjectTrustedIpsUnion struct {
	UpdateProjectTrustedIpsResponse1 *UpdateProjectTrustedIpsResponse1 `queryParam:"inline"`
	UpdateProjectTrustedIpsResponse2 *UpdateProjectTrustedIpsResponse2 `queryParam:"inline"`

	Type UpdateProjectTrustedIpsUnionType
}

func CreateUpdateProjectTrustedIpsUnionUpdateProjectTrustedIpsResponse1(updateProjectTrustedIpsResponse1 UpdateProjectTrustedIpsResponse1) UpdateProjectTrustedIpsUnion {
	typ := UpdateProjectTrustedIpsUnionTypeUpdateProjectTrustedIpsResponse1

	return UpdateProjectTrustedIpsUnion{
		UpdateProjectTrustedIpsResponse1: &updateProjectTrustedIpsResponse1,
		Type:                             typ,
	}
}

func CreateUpdateProjectTrustedIpsUnionUpdateProjectTrustedIpsResponse2(updateProjectTrustedIpsResponse2 UpdateProjectTrustedIpsResponse2) UpdateProjectTrustedIpsUnion {
	typ := UpdateProjectTrustedIpsUnionTypeUpdateProjectTrustedIpsResponse2

	return UpdateProjectTrustedIpsUnion{
		UpdateProjectTrustedIpsResponse2: &updateProjectTrustedIpsResponse2,
		Type:                             typ,
	}
}

func (u *UpdateProjectTrustedIpsUnion) UnmarshalJSON(data []byte) error {

	var updateProjectTrustedIpsResponse2 UpdateProjectTrustedIpsResponse2 = UpdateProjectTrustedIpsResponse2{}
	if err := utils.UnmarshalJSON(data, &updateProjectTrustedIpsResponse2, "", true, true); err == nil {
		u.UpdateProjectTrustedIpsResponse2 = &updateProjectTrustedIpsResponse2
		u.Type = UpdateProjectTrustedIpsUnionTypeUpdateProjectTrustedIpsResponse2
		return nil
	}

	var updateProjectTrustedIpsResponse1 UpdateProjectTrustedIpsResponse1 = UpdateProjectTrustedIpsResponse1{}
	if err := utils.UnmarshalJSON(data, &updateProjectTrustedIpsResponse1, "", true, true); err == nil {
		u.UpdateProjectTrustedIpsResponse1 = &updateProjectTrustedIpsResponse1
		u.Type = UpdateProjectTrustedIpsUnionTypeUpdateProjectTrustedIpsResponse1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectTrustedIpsUnion", string(data))
}

func (u UpdateProjectTrustedIpsUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectTrustedIpsResponse1 != nil {
		return utils.MarshalJSON(u.UpdateProjectTrustedIpsResponse1, "", true)
	}

	if u.UpdateProjectTrustedIpsResponse2 != nil {
		return utils.MarshalJSON(u.UpdateProjectTrustedIpsResponse2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectTrustedIpsUnion: all fields are null")
}

type UpdateProjectGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *UpdateProjectGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *UpdateProjectGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// UpdateProjectCreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type UpdateProjectCreateDeployments string

const (
	UpdateProjectCreateDeploymentsEnabled  UpdateProjectCreateDeployments = "enabled"
	UpdateProjectCreateDeploymentsDisabled UpdateProjectCreateDeployments = "disabled"
)

func (e UpdateProjectCreateDeployments) ToPointer() *UpdateProjectCreateDeployments {
	return &e
}
func (e *UpdateProjectCreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = UpdateProjectCreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectCreateDeployments: %v", v)
	}
}

type UpdateProjectGitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments UpdateProjectCreateDeployments `json:"createDeployments"`
}

func (o *UpdateProjectGitProviderOptions) GetCreateDeployments() UpdateProjectCreateDeployments {
	if o == nil {
		return UpdateProjectCreateDeployments("")
	}
	return o.CreateDeployments
}

type UpdateProjectWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *UpdateProjectWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type UpdateProjectSrc struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectSrc) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectSrc) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectSrc) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectSrc) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectSrc) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectSrc) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectSrc) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectSrc) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectSrc) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectSrc) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectSrc) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectSrcUnionType string

const (
	UpdateProjectSrcUnionTypeStr              UpdateProjectSrcUnionType = "str"
	UpdateProjectSrcUnionTypeUpdateProjectSrc UpdateProjectSrcUnionType = "updateProject_src"
)

type UpdateProjectSrcUnion struct {
	Str              *string           `queryParam:"inline"`
	UpdateProjectSrc *UpdateProjectSrc `queryParam:"inline"`

	Type UpdateProjectSrcUnionType
}

func CreateUpdateProjectSrcUnionStr(str string) UpdateProjectSrcUnion {
	typ := UpdateProjectSrcUnionTypeStr

	return UpdateProjectSrcUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectSrcUnionUpdateProjectSrc(updateProjectSrc UpdateProjectSrc) UpdateProjectSrcUnion {
	typ := UpdateProjectSrcUnionTypeUpdateProjectSrc

	return UpdateProjectSrcUnion{
		UpdateProjectSrc: &updateProjectSrc,
		Type:             typ,
	}
}

func (u *UpdateProjectSrcUnion) UnmarshalJSON(data []byte) error {

	var updateProjectSrc UpdateProjectSrc = UpdateProjectSrc{}
	if err := utils.UnmarshalJSON(data, &updateProjectSrc, "", true, true); err == nil {
		u.UpdateProjectSrc = &updateProjectSrc
		u.Type = UpdateProjectSrcUnionTypeUpdateProjectSrc
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectSrcUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectSrcUnion", string(data))
}

func (u UpdateProjectSrcUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectSrc != nil {
		return utils.MarshalJSON(u.UpdateProjectSrc, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectSrcUnion: all fields are null")
}

type UpdateProjectHasType string

const (
	UpdateProjectHasTypePath               UpdateProjectHasType = "path"
	UpdateProjectHasTypeHost               UpdateProjectHasType = "host"
	UpdateProjectHasTypeMethod             UpdateProjectHasType = "method"
	UpdateProjectHasTypeHeader             UpdateProjectHasType = "header"
	UpdateProjectHasTypeCookie             UpdateProjectHasType = "cookie"
	UpdateProjectHasTypeQuery              UpdateProjectHasType = "query"
	UpdateProjectHasTypeIPAddress          UpdateProjectHasType = "ip_address"
	UpdateProjectHasTypeProtocol           UpdateProjectHasType = "protocol"
	UpdateProjectHasTypeScheme             UpdateProjectHasType = "scheme"
	UpdateProjectHasTypeEnvironment        UpdateProjectHasType = "environment"
	UpdateProjectHasTypeRegion             UpdateProjectHasType = "region"
	UpdateProjectHasTypeInitialRequestPath UpdateProjectHasType = "initial_request_path"
)

func (e UpdateProjectHasType) ToPointer() *UpdateProjectHasType {
	return &e
}
func (e *UpdateProjectHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectHasType: %v", v)
	}
}

type UpdateProjectValueHas struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectValueHas) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectValueHas) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectValueHas) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectValueHas) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectValueHas) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectValueHas) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectValueHas) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectValueHas) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectValueHas) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectValueHas) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectValueHas) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectHasValueUnionType string

const (
	UpdateProjectHasValueUnionTypeStr                   UpdateProjectHasValueUnionType = "str"
	UpdateProjectHasValueUnionTypeUpdateProjectValueHas UpdateProjectHasValueUnionType = "updateProject_value_has"
)

type UpdateProjectHasValueUnion struct {
	Str                   *string                `queryParam:"inline"`
	UpdateProjectValueHas *UpdateProjectValueHas `queryParam:"inline"`

	Type UpdateProjectHasValueUnionType
}

func CreateUpdateProjectHasValueUnionStr(str string) UpdateProjectHasValueUnion {
	typ := UpdateProjectHasValueUnionTypeStr

	return UpdateProjectHasValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectHasValueUnionUpdateProjectValueHas(updateProjectValueHas UpdateProjectValueHas) UpdateProjectHasValueUnion {
	typ := UpdateProjectHasValueUnionTypeUpdateProjectValueHas

	return UpdateProjectHasValueUnion{
		UpdateProjectValueHas: &updateProjectValueHas,
		Type:                  typ,
	}
}

func (u *UpdateProjectHasValueUnion) UnmarshalJSON(data []byte) error {

	var updateProjectValueHas UpdateProjectValueHas = UpdateProjectValueHas{}
	if err := utils.UnmarshalJSON(data, &updateProjectValueHas, "", true, true); err == nil {
		u.UpdateProjectValueHas = &updateProjectValueHas
		u.Type = UpdateProjectHasValueUnionTypeUpdateProjectValueHas
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectHasValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectHasValueUnion", string(data))
}

func (u UpdateProjectHasValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectValueHas != nil {
		return utils.MarshalJSON(u.UpdateProjectValueHas, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectHasValueUnion: all fields are null")
}

type UpdateProjectHas struct {
	Type  UpdateProjectHasType        `json:"type"`
	Key   *string                     `json:"key,omitempty"`
	Value *UpdateProjectHasValueUnion `json:"value,omitempty"`
}

func (o *UpdateProjectHas) GetType() UpdateProjectHasType {
	if o == nil {
		return UpdateProjectHasType("")
	}
	return o.Type
}

func (o *UpdateProjectHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectHas) GetValue() *UpdateProjectHasValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectMissingType string

const (
	UpdateProjectMissingTypePath               UpdateProjectMissingType = "path"
	UpdateProjectMissingTypeHost               UpdateProjectMissingType = "host"
	UpdateProjectMissingTypeMethod             UpdateProjectMissingType = "method"
	UpdateProjectMissingTypeHeader             UpdateProjectMissingType = "header"
	UpdateProjectMissingTypeCookie             UpdateProjectMissingType = "cookie"
	UpdateProjectMissingTypeQuery              UpdateProjectMissingType = "query"
	UpdateProjectMissingTypeIPAddress          UpdateProjectMissingType = "ip_address"
	UpdateProjectMissingTypeProtocol           UpdateProjectMissingType = "protocol"
	UpdateProjectMissingTypeScheme             UpdateProjectMissingType = "scheme"
	UpdateProjectMissingTypeEnvironment        UpdateProjectMissingType = "environment"
	UpdateProjectMissingTypeRegion             UpdateProjectMissingType = "region"
	UpdateProjectMissingTypeInitialRequestPath UpdateProjectMissingType = "initial_request_path"
)

func (e UpdateProjectMissingType) ToPointer() *UpdateProjectMissingType {
	return &e
}
func (e *UpdateProjectMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectMissingType: %v", v)
	}
}

type UpdateProjectValueMissing struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectValueMissing) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectValueMissing) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectValueMissing) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectValueMissing) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectValueMissing) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectValueMissing) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectValueMissing) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectValueMissing) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectValueMissing) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectValueMissing) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectValueMissing) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectMissingValueUnionType string

const (
	UpdateProjectMissingValueUnionTypeStr                       UpdateProjectMissingValueUnionType = "str"
	UpdateProjectMissingValueUnionTypeUpdateProjectValueMissing UpdateProjectMissingValueUnionType = "updateProject_value_missing"
)

type UpdateProjectMissingValueUnion struct {
	Str                       *string                    `queryParam:"inline"`
	UpdateProjectValueMissing *UpdateProjectValueMissing `queryParam:"inline"`

	Type UpdateProjectMissingValueUnionType
}

func CreateUpdateProjectMissingValueUnionStr(str string) UpdateProjectMissingValueUnion {
	typ := UpdateProjectMissingValueUnionTypeStr

	return UpdateProjectMissingValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectMissingValueUnionUpdateProjectValueMissing(updateProjectValueMissing UpdateProjectValueMissing) UpdateProjectMissingValueUnion {
	typ := UpdateProjectMissingValueUnionTypeUpdateProjectValueMissing

	return UpdateProjectMissingValueUnion{
		UpdateProjectValueMissing: &updateProjectValueMissing,
		Type:                      typ,
	}
}

func (u *UpdateProjectMissingValueUnion) UnmarshalJSON(data []byte) error {

	var updateProjectValueMissing UpdateProjectValueMissing = UpdateProjectValueMissing{}
	if err := utils.UnmarshalJSON(data, &updateProjectValueMissing, "", true, true); err == nil {
		u.UpdateProjectValueMissing = &updateProjectValueMissing
		u.Type = UpdateProjectMissingValueUnionTypeUpdateProjectValueMissing
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectMissingValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectMissingValueUnion", string(data))
}

func (u UpdateProjectMissingValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectValueMissing != nil {
		return utils.MarshalJSON(u.UpdateProjectValueMissing, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectMissingValueUnion: all fields are null")
}

type UpdateProjectMissing struct {
	Type  UpdateProjectMissingType        `json:"type"`
	Key   *string                         `json:"key,omitempty"`
	Value *UpdateProjectMissingValueUnion `json:"value,omitempty"`
}

func (o *UpdateProjectMissing) GetType() UpdateProjectMissingType {
	if o == nil {
		return UpdateProjectMissingType("")
	}
	return o.Type
}

func (o *UpdateProjectMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectMissing) GetValue() *UpdateProjectMissingValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectHandle string

const (
	UpdateProjectHandleInit     UpdateProjectHandle = "init"
	UpdateProjectHandleFinalize UpdateProjectHandle = "finalize"
)

func (e UpdateProjectHandle) ToPointer() *UpdateProjectHandle {
	return &e
}
func (e *UpdateProjectHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = UpdateProjectHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectHandle: %v", v)
	}
}

type UpdateProjectFirewallRouteAction string

const (
	UpdateProjectFirewallRouteActionDeny      UpdateProjectFirewallRouteAction = "deny"
	UpdateProjectFirewallRouteActionChallenge UpdateProjectFirewallRouteAction = "challenge"
	UpdateProjectFirewallRouteActionLog       UpdateProjectFirewallRouteAction = "log"
	UpdateProjectFirewallRouteActionBypass    UpdateProjectFirewallRouteAction = "bypass"
	UpdateProjectFirewallRouteActionRateLimit UpdateProjectFirewallRouteAction = "rate_limit"
	UpdateProjectFirewallRouteActionRedirect  UpdateProjectFirewallRouteAction = "redirect"
)

func (e UpdateProjectFirewallRouteAction) ToPointer() *UpdateProjectFirewallRouteAction {
	return &e
}
func (e *UpdateProjectFirewallRouteAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = UpdateProjectFirewallRouteAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectFirewallRouteAction: %v", v)
	}
}

type UpdateProjectAlgo string

const (
	UpdateProjectAlgoFixedWindow UpdateProjectAlgo = "fixed_window"
	UpdateProjectAlgoTokenBucket UpdateProjectAlgo = "token_bucket"
)

func (e UpdateProjectAlgo) ToPointer() *UpdateProjectAlgo {
	return &e
}
func (e *UpdateProjectAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateProjectAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectAlgo: %v", v)
	}
}

type UpdateProjectErl struct {
	Algo   UpdateProjectAlgo `json:"algo"`
	Window float64           `json:"window"`
	Limit  float64           `json:"limit"`
	Keys   []string          `json:"keys"`
}

func (o *UpdateProjectErl) GetAlgo() UpdateProjectAlgo {
	if o == nil {
		return UpdateProjectAlgo("")
	}
	return o.Algo
}

func (o *UpdateProjectErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *UpdateProjectErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateProjectErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type UpdateProjectMitigate struct {
	Action UpdateProjectFirewallRouteAction `json:"action"`
	RuleID string                           `json:"rule_id"`
	TTL    *float64                         `json:"ttl,omitempty"`
	Erl    *UpdateProjectErl                `json:"erl,omitempty"`
}

func (o *UpdateProjectMitigate) GetAction() UpdateProjectFirewallRouteAction {
	if o == nil {
		return UpdateProjectFirewallRouteAction("")
	}
	return o.Action
}

func (o *UpdateProjectMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *UpdateProjectMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateProjectMitigate) GetErl() *UpdateProjectErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type UpdateProjectFirewallRoute struct {
	Src      *UpdateProjectSrcUnion `json:"src,omitempty"`
	Has      []UpdateProjectHas     `json:"has,omitempty"`
	Missing  []UpdateProjectMissing `json:"missing,omitempty"`
	Dest     *string                `json:"dest,omitempty"`
	Status   *float64               `json:"status,omitempty"`
	Handle   *UpdateProjectHandle   `json:"handle,omitempty"`
	Mitigate *UpdateProjectMitigate `json:"mitigate,omitempty"`
}

func (o *UpdateProjectFirewallRoute) GetSrc() *UpdateProjectSrcUnion {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectFirewallRoute) GetHas() []UpdateProjectHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *UpdateProjectFirewallRoute) GetMissing() []UpdateProjectMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *UpdateProjectFirewallRoute) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectFirewallRoute) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateProjectFirewallRoute) GetHandle() *UpdateProjectHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *UpdateProjectFirewallRoute) GetMitigate() *UpdateProjectMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type UpdateProjectBotFilterAction string

const (
	UpdateProjectBotFilterActionDeny      UpdateProjectBotFilterAction = "deny"
	UpdateProjectBotFilterActionChallenge UpdateProjectBotFilterAction = "challenge"
	UpdateProjectBotFilterActionLog       UpdateProjectBotFilterAction = "log"
)

func (e UpdateProjectBotFilterAction) ToPointer() *UpdateProjectBotFilterAction {
	return &e
}
func (e *UpdateProjectBotFilterAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectBotFilterAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectBotFilterAction: %v", v)
	}
}

type UpdateProjectBotFilter struct {
	Active bool                          `json:"active"`
	Action *UpdateProjectBotFilterAction `json:"action,omitempty"`
}

func (o *UpdateProjectBotFilter) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectBotFilter) GetAction() *UpdateProjectBotFilterAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectAiBotsAction string

const (
	UpdateProjectAiBotsActionDeny      UpdateProjectAiBotsAction = "deny"
	UpdateProjectAiBotsActionChallenge UpdateProjectAiBotsAction = "challenge"
	UpdateProjectAiBotsActionLog       UpdateProjectAiBotsAction = "log"
)

func (e UpdateProjectAiBotsAction) ToPointer() *UpdateProjectAiBotsAction {
	return &e
}
func (e *UpdateProjectAiBotsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectAiBotsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectAiBotsAction: %v", v)
	}
}

type UpdateProjectAiBots struct {
	Active bool                       `json:"active"`
	Action *UpdateProjectAiBotsAction `json:"action,omitempty"`
}

func (o *UpdateProjectAiBots) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectAiBots) GetAction() *UpdateProjectAiBotsAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectOwaspAction string

const (
	UpdateProjectOwaspActionDeny      UpdateProjectOwaspAction = "deny"
	UpdateProjectOwaspActionChallenge UpdateProjectOwaspAction = "challenge"
	UpdateProjectOwaspActionLog       UpdateProjectOwaspAction = "log"
)

func (e UpdateProjectOwaspAction) ToPointer() *UpdateProjectOwaspAction {
	return &e
}
func (e *UpdateProjectOwaspAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectOwaspAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectOwaspAction: %v", v)
	}
}

type UpdateProjectOwasp struct {
	Active bool                      `json:"active"`
	Action *UpdateProjectOwaspAction `json:"action,omitempty"`
}

func (o *UpdateProjectOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectOwasp) GetAction() *UpdateProjectOwaspAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectManagedRules struct {
	BotFilter UpdateProjectBotFilter `json:"bot_filter"`
	AiBots    UpdateProjectAiBots    `json:"ai_bots"`
	Owasp     UpdateProjectOwasp     `json:"owasp"`
}

func (o *UpdateProjectManagedRules) GetBotFilter() UpdateProjectBotFilter {
	if o == nil {
		return UpdateProjectBotFilter{}
	}
	return o.BotFilter
}

func (o *UpdateProjectManagedRules) GetAiBots() UpdateProjectAiBots {
	if o == nil {
		return UpdateProjectAiBots{}
	}
	return o.AiBots
}

func (o *UpdateProjectManagedRules) GetOwasp() UpdateProjectOwasp {
	if o == nil {
		return UpdateProjectOwasp{}
	}
	return o.Owasp
}

type UpdateProjectSecurity struct {
	AttackModeEnabled      *bool                        `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                     `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                        `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                     `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                     `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                     `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []UpdateProjectFirewallRoute `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                        `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                        `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                        `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                     `json:"firewallBypassIps,omitempty"`
	ManagedRules           *UpdateProjectManagedRules   `json:"managedRules,omitempty"`
}

func (o *UpdateProjectSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *UpdateProjectSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *UpdateProjectSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *UpdateProjectSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *UpdateProjectSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *UpdateProjectSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *UpdateProjectSecurity) GetFirewallRoutes() []UpdateProjectFirewallRoute {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *UpdateProjectSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *UpdateProjectSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *UpdateProjectSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *UpdateProjectSecurity) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *UpdateProjectSecurity) GetManagedRules() *UpdateProjectManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// UpdateProjectIssuerModeResponse - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type UpdateProjectIssuerModeResponse string

const (
	UpdateProjectIssuerModeResponseTeam   UpdateProjectIssuerModeResponse = "team"
	UpdateProjectIssuerModeResponseGlobal UpdateProjectIssuerModeResponse = "global"
)

func (e UpdateProjectIssuerModeResponse) ToPointer() *UpdateProjectIssuerModeResponse {
	return &e
}
func (e *UpdateProjectIssuerModeResponse) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = UpdateProjectIssuerModeResponse(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectIssuerModeResponse: %v", v)
	}
}

type UpdateProjectOidcTokenConfigResponse struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	Enabled *bool `json:"enabled,omitempty"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *UpdateProjectIssuerModeResponse `json:"issuerMode,omitempty"`
}

func (o *UpdateProjectOidcTokenConfigResponse) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateProjectOidcTokenConfigResponse) GetIssuerMode() *UpdateProjectIssuerModeResponse {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type UpdateProjectTier string

const (
	UpdateProjectTierStandard UpdateProjectTier = "standard"
	UpdateProjectTierAdvanced UpdateProjectTier = "advanced"
	UpdateProjectTierCritical UpdateProjectTier = "critical"
)

func (e UpdateProjectTier) ToPointer() *UpdateProjectTier {
	return &e
}
func (e *UpdateProjectTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = UpdateProjectTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectTier: %v", v)
	}
}

type UpdateProjectFeatures struct {
	WebAnalytics *bool `json:"webAnalytics,omitempty"`
}

func (o *UpdateProjectFeatures) GetWebAnalytics() *bool {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

// UpdateProjectResponseBody - The project was successfully updated
type UpdateProjectResponseBody struct {
	AccountID                        string                                      `json:"accountId"`
	Analytics                        *UpdateProjectAnalytics                     `json:"analytics,omitempty"`
	SpeedInsights                    *UpdateProjectSpeedInsights                 `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs             *bool                                       `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains          *bool                                       `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                     `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                     *string                                     `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                     `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurations            []UpdateProjectConnectConfigurationResponse `json:"connectConfigurations,omitempty"`
	ConnectConfigurationID           *string                                     `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled             *bool                                       `json:"connectBuildsEnabled,omitempty"`
	PassiveConnectConfigurationID    *string                                     `json:"passiveConnectConfigurationId,omitempty"`
	CreatedAt                        *float64                                    `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility    *bool                                       `json:"customerSupportCodeVisibility,omitempty"`
	Crons                            *UpdateProjectCrons                         `json:"crons,omitempty"`
	DataCache                        *UpdateProjectDataCache                     `json:"dataCache,omitempty"`
	DeploymentExpiration             *UpdateProjectDeploymentExpiration          `json:"deploymentExpiration,omitempty"`
	DevCommand                       *string                                     `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                        `json:"directoryListing"`
	InstallCommand                   *string                                     `json:"installCommand,omitempty"`
	Env                              []UpdateProjectEnv                          `json:"env,omitempty"`
	CustomEnvironments               []UpdateProjectCustomEnvironment            `json:"customEnvironments,omitempty"`
	Framework                        *UpdateProjectFrameworkResponseBody         `json:"framework,omitempty"`
	GitForkProtection                *bool                                       `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                       `json:"gitLFS,omitempty"`
	ID                               string                                      `json:"id"`
	IPBuckets                        []UpdateProjectIPBucket                     `json:"ipBuckets,omitempty"`
	LatestDeployments                []UpdateProjectLatestDeployment             `json:"latestDeployments,omitempty"`
	Link                             *UpdateProjectLinkUnion                     `json:"link,omitempty"`
	Microfrontends                   *UpdateProjectMicrofrontendsUnion           `json:"microfrontends,omitempty"`
	Name                             string                                      `json:"name"`
	NodeVersion                      UpdateProjectNodeVersionResponse            `json:"nodeVersion"`
	OptionsAllowlist                 *UpdateProjectOptionsAllowlistResponse      `json:"optionsAllowlist,omitempty"`
	OutputDirectory                  *string                                     `json:"outputDirectory,omitempty"`
	PasswordProtection               *UpdateProjectPasswordProtectionResponse    `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane    *bool                                       `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                     *bool                                       `json:"publicSource,omitempty"`
	ResourceConfig                   UpdateProjectResourceConfigResponse         `json:"resourceConfig"`
	// Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
	RollbackDescription *UpdateProjectRollbackDescription `json:"rollbackDescription,omitempty"`
	// Project-level rolling release configuration that defines how deployments should be gradually rolled out
	RollingRelease                       *UpdateProjectRollingRelease                  `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                UpdateProjectDefaultResourceConfig            `json:"defaultResourceConfig"`
	RootDirectory                        *string                                       `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                       `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                         `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                      `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                      `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                         `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                         `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                         `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *UpdateProjectSsoProtectionResponse           `json:"ssoProtection,omitempty"`
	Targets                              map[string]*UpdateProjectTargets              `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                      `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                      `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                       `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                       `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                      `json:"updatedAt,omitempty"`
	Live                                 *bool                                         `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                         `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                         `json:"enableProductionFeedback,omitempty"`
	Permissions                          *UpdateProjectPermissions                     `json:"permissions,omitempty"`
	LastRollbackTarget                   *UpdateProjectLastRollbackTarget              `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *UpdateProjectLastAliasRequest                `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]UpdateProjectProtectionBypassUnion `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                         `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *UpdateProjectTrustedIpsUnion                 `json:"trustedIps,omitempty"`
	GitComments                          *UpdateProjectGitComments                     `json:"gitComments,omitempty"`
	GitProviderOptions                   *UpdateProjectGitProviderOptions              `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                         `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                       `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *UpdateProjectWebAnalytics                    `json:"webAnalytics,omitempty"`
	Security                             *UpdateProjectSecurity                        `json:"security,omitempty"`
	OidcTokenConfig                      *UpdateProjectOidcTokenConfigResponse         `json:"oidcTokenConfig,omitempty"`
	Tier                                 *UpdateProjectTier                            `json:"tier,omitempty"`
	Features                             *UpdateProjectFeatures                        `json:"features,omitempty"`
}

func (o *UpdateProjectResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectResponseBody) GetAnalytics() *UpdateProjectAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectResponseBody) GetSpeedInsights() *UpdateProjectSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *UpdateProjectResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectResponseBody) GetConnectConfigurations() []UpdateProjectConnectConfigurationResponse {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurations
}

func (o *UpdateProjectResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *UpdateProjectResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectResponseBody) GetCrons() *UpdateProjectCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectResponseBody) GetDataCache() *UpdateProjectDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectResponseBody) GetDeploymentExpiration() *UpdateProjectDeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *UpdateProjectResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectResponseBody) GetEnv() []UpdateProjectEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectResponseBody) GetCustomEnvironments() []UpdateProjectCustomEnvironment {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *UpdateProjectResponseBody) GetFramework() *UpdateProjectFrameworkResponseBody {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectResponseBody) GetIPBuckets() []UpdateProjectIPBucket {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *UpdateProjectResponseBody) GetLatestDeployments() []UpdateProjectLatestDeployment {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectResponseBody) GetLink() *UpdateProjectLinkUnion {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectResponseBody) GetMicrofrontends() *UpdateProjectMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *UpdateProjectResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectResponseBody) GetNodeVersion() UpdateProjectNodeVersionResponse {
	if o == nil {
		return UpdateProjectNodeVersionResponse("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectResponseBody) GetOptionsAllowlist() *UpdateProjectOptionsAllowlistResponse {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectResponseBody) GetPasswordProtection() *UpdateProjectPasswordProtectionResponse {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectResponseBody) GetResourceConfig() UpdateProjectResourceConfigResponse {
	if o == nil {
		return UpdateProjectResourceConfigResponse{}
	}
	return o.ResourceConfig
}

func (o *UpdateProjectResponseBody) GetRollbackDescription() *UpdateProjectRollbackDescription {
	if o == nil {
		return nil
	}
	return o.RollbackDescription
}

func (o *UpdateProjectResponseBody) GetRollingRelease() *UpdateProjectRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *UpdateProjectResponseBody) GetDefaultResourceConfig() UpdateProjectDefaultResourceConfig {
	if o == nil {
		return UpdateProjectDefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *UpdateProjectResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectResponseBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *UpdateProjectResponseBody) GetSsoProtection() *UpdateProjectSsoProtectionResponse {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectResponseBody) GetTargets() map[string]*UpdateProjectTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectResponseBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *UpdateProjectResponseBody) GetPermissions() *UpdateProjectPermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectResponseBody) GetLastRollbackTarget() *UpdateProjectLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectResponseBody) GetLastAliasRequest() *UpdateProjectLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectResponseBody) GetProtectionBypass() map[string]UpdateProjectProtectionBypassUnion {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectResponseBody) GetTrustedIps() *UpdateProjectTrustedIpsUnion {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectResponseBody) GetGitComments() *UpdateProjectGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectResponseBody) GetGitProviderOptions() *UpdateProjectGitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *UpdateProjectResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *UpdateProjectResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *UpdateProjectResponseBody) GetWebAnalytics() *UpdateProjectWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectResponseBody) GetSecurity() *UpdateProjectSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *UpdateProjectResponseBody) GetOidcTokenConfig() *UpdateProjectOidcTokenConfigResponse {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectResponseBody) GetTier() *UpdateProjectTier {
	if o == nil {
		return nil
	}
	return o.Tier
}

func (o *UpdateProjectResponseBody) GetFeatures() *UpdateProjectFeatures {
	if o == nil {
		return nil
	}
	return o.Features
}

type UpdateProjectResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The project was successfully updated
	Object *UpdateProjectResponseBody
}

func (o *UpdateProjectResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectResponse) GetObject() *UpdateProjectResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
