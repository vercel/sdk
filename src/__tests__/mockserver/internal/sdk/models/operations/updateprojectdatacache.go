// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateProjectDataCacheRequestBody struct {
	// Enable or disable data cache for the project - default: false
	Disabled *bool `json:"disabled,omitempty"`
}

func (o *UpdateProjectDataCacheRequestBody) GetDisabled() *bool {
	if o == nil {
		return nil
	}
	return o.Disabled
}

type UpdateProjectDataCacheRequest struct {
	// The unique project identifier
	ProjectID string `pathParam:"style=simple,explode=false,name=projectId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                           `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateProjectDataCacheRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectDataCacheRequest) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCacheRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectDataCacheRequest) GetRequestBody() UpdateProjectDataCacheRequestBody {
	if o == nil {
		return UpdateProjectDataCacheRequestBody{}
	}
	return o.RequestBody
}

type UpdateProjectDataCacheAnalytics struct {
	ID                  string   `json:"id"`
	CanceledAt          *float64 `json:"canceledAt,omitempty"`
	DisabledAt          float64  `json:"disabledAt"`
	EnabledAt           float64  `json:"enabledAt"`
	PaidAt              *float64 `json:"paidAt,omitempty"`
	SampleRatePercent   *float64 `json:"sampleRatePercent,omitempty"`
	SpendLimitInDollars *float64 `json:"spendLimitInDollars,omitempty"`
}

func (o *UpdateProjectDataCacheAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCacheAnalytics) GetDisabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheAnalytics) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheAnalytics) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

func (o *UpdateProjectDataCacheAnalytics) GetSampleRatePercent() *float64 {
	if o == nil {
		return nil
	}
	return o.SampleRatePercent
}

func (o *UpdateProjectDataCacheAnalytics) GetSpendLimitInDollars() *float64 {
	if o == nil {
		return nil
	}
	return o.SpendLimitInDollars
}

type UpdateProjectDataCacheSpeedInsights struct {
	ID         string   `json:"id"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
	PaidAt     *float64 `json:"paidAt,omitempty"`
}

func (o *UpdateProjectDataCacheSpeedInsights) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheSpeedInsights) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheSpeedInsights) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheSpeedInsights) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCacheSpeedInsights) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

func (o *UpdateProjectDataCacheSpeedInsights) GetPaidAt() *float64 {
	if o == nil {
		return nil
	}
	return o.PaidAt
}

type UpdateProjectDataCacheEnvIDEnum string

const (
	UpdateProjectDataCacheEnvIDEnumProduction UpdateProjectDataCacheEnvIDEnum = "production"
	UpdateProjectDataCacheEnvIDEnumPreview    UpdateProjectDataCacheEnvIDEnum = "preview"
)

func (e UpdateProjectDataCacheEnvIDEnum) ToPointer() *UpdateProjectDataCacheEnvIDEnum {
	return &e
}
func (e *UpdateProjectDataCacheEnvIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		*e = UpdateProjectDataCacheEnvIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheEnvIDEnum: %v", v)
	}
}

type UpdateProjectDataCacheEnvIDUnionType string

const (
	UpdateProjectDataCacheEnvIDUnionTypeStr                             UpdateProjectDataCacheEnvIDUnionType = "str"
	UpdateProjectDataCacheEnvIDUnionTypeUpdateProjectDataCacheEnvIDEnum UpdateProjectDataCacheEnvIDUnionType = "updateProjectDataCache_envId_enum"
)

type UpdateProjectDataCacheEnvIDUnion struct {
	Str                             *string                          `queryParam:"inline"`
	UpdateProjectDataCacheEnvIDEnum *UpdateProjectDataCacheEnvIDEnum `queryParam:"inline"`

	Type UpdateProjectDataCacheEnvIDUnionType
}

func CreateUpdateProjectDataCacheEnvIDUnionStr(str string) UpdateProjectDataCacheEnvIDUnion {
	typ := UpdateProjectDataCacheEnvIDUnionTypeStr

	return UpdateProjectDataCacheEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheEnvIDUnionUpdateProjectDataCacheEnvIDEnum(updateProjectDataCacheEnvIDEnum UpdateProjectDataCacheEnvIDEnum) UpdateProjectDataCacheEnvIDUnion {
	typ := UpdateProjectDataCacheEnvIDUnionTypeUpdateProjectDataCacheEnvIDEnum

	return UpdateProjectDataCacheEnvIDUnion{
		UpdateProjectDataCacheEnvIDEnum: &updateProjectDataCacheEnvIDEnum,
		Type:                            typ,
	}
}

func (u *UpdateProjectDataCacheEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheEnvIDUnionTypeStr
		return nil
	}

	var updateProjectDataCacheEnvIDEnum UpdateProjectDataCacheEnvIDEnum = UpdateProjectDataCacheEnvIDEnum("")
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheEnvIDEnum, "", true, true); err == nil {
		u.UpdateProjectDataCacheEnvIDEnum = &updateProjectDataCacheEnvIDEnum
		u.Type = UpdateProjectDataCacheEnvIDUnionTypeUpdateProjectDataCacheEnvIDEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheEnvIDUnion", string(data))
}

func (u UpdateProjectDataCacheEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheEnvIDEnum != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheEnvIDEnum, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheEnvIDUnion: all fields are null")
}

type UpdateProjectDataCacheAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *UpdateProjectDataCacheAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *UpdateProjectDataCacheAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type UpdateProjectDataCacheConnectConfiguration struct {
	EnvID                  UpdateProjectDataCacheEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                           `json:"connectConfigurationId"`
	Passive                bool                             `json:"passive"`
	BuildsEnabled          bool                             `json:"buildsEnabled"`
	Aws                    *UpdateProjectDataCacheAws       `json:"aws,omitempty"`
	CreatedAt              float64                          `json:"createdAt"`
	UpdatedAt              float64                          `json:"updatedAt"`
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetEnvID() UpdateProjectDataCacheEnvIDUnion {
	if o == nil {
		return UpdateProjectDataCacheEnvIDUnion{}
	}
	return o.EnvID
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetAws() *UpdateProjectDataCacheAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheConnectConfiguration) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateProjectDataCacheDefinition struct {
	// The hostname that should be used.
	Host string `json:"host"`
	// The path that should be called for the cronjob.
	Path string `json:"path"`
	// The cron expression.
	Schedule string `json:"schedule"`
}

func (o *UpdateProjectDataCacheDefinition) GetHost() string {
	if o == nil {
		return ""
	}
	return o.Host
}

func (o *UpdateProjectDataCacheDefinition) GetPath() string {
	if o == nil {
		return ""
	}
	return o.Path
}

func (o *UpdateProjectDataCacheDefinition) GetSchedule() string {
	if o == nil {
		return ""
	}
	return o.Schedule
}

type UpdateProjectDataCacheCrons struct {
	// The time the feature was enabled for this project. Note: It enables automatically with the first Deployment that outputs cronjobs.
	EnabledAt float64 `json:"enabledAt"`
	// The time the feature was disabled for this project.
	DisabledAt *float64 `json:"disabledAt"`
	UpdatedAt  float64  `json:"updatedAt"`
	// The ID of the Deployment from which the definitions originated.
	DeploymentID *string                            `json:"deploymentId"`
	Definitions  []UpdateProjectDataCacheDefinition `json:"definitions"`
}

func (o *UpdateProjectDataCacheCrons) GetEnabledAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheCrons) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheCrons) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheCrons) GetDeploymentID() *string {
	if o == nil {
		return nil
	}
	return o.DeploymentID
}

func (o *UpdateProjectDataCacheCrons) GetDefinitions() []UpdateProjectDataCacheDefinition {
	if o == nil {
		return []UpdateProjectDataCacheDefinition{}
	}
	return o.Definitions
}

type UpdateProjectDataCacheDataCache struct {
	UserDisabled     bool     `json:"userDisabled"`
	StorageSizeBytes *float64 `json:"storageSizeBytes,omitempty"`
	Unlimited        *bool    `json:"unlimited,omitempty"`
}

func (o *UpdateProjectDataCacheDataCache) GetUserDisabled() bool {
	if o == nil {
		return false
	}
	return o.UserDisabled
}

func (o *UpdateProjectDataCacheDataCache) GetStorageSizeBytes() *float64 {
	if o == nil {
		return nil
	}
	return o.StorageSizeBytes
}

func (o *UpdateProjectDataCacheDataCache) GetUnlimited() *bool {
	if o == nil {
		return nil
	}
	return o.Unlimited
}

type UpdateProjectDataCacheDeploymentExpiration struct {
	ExpirationDays           *float64 `json:"expirationDays,omitempty"`
	ExpirationDaysProduction *float64 `json:"expirationDaysProduction,omitempty"`
	ExpirationDaysCanceled   *float64 `json:"expirationDaysCanceled,omitempty"`
	ExpirationDaysErrored    *float64 `json:"expirationDaysErrored,omitempty"`
	DeploymentsToKeep        *float64 `json:"deploymentsToKeep,omitempty"`
}

func (o *UpdateProjectDataCacheDeploymentExpiration) GetExpirationDays() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDays
}

func (o *UpdateProjectDataCacheDeploymentExpiration) GetExpirationDaysProduction() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysProduction
}

func (o *UpdateProjectDataCacheDeploymentExpiration) GetExpirationDaysCanceled() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysCanceled
}

func (o *UpdateProjectDataCacheDeploymentExpiration) GetExpirationDaysErrored() *float64 {
	if o == nil {
		return nil
	}
	return o.ExpirationDaysErrored
}

func (o *UpdateProjectDataCacheDeploymentExpiration) GetDeploymentsToKeep() *float64 {
	if o == nil {
		return nil
	}
	return o.DeploymentsToKeep
}

type UpdateProjectDataCacheTargetEnum2 string

const (
	UpdateProjectDataCacheTargetEnum2Production  UpdateProjectDataCacheTargetEnum2 = "production"
	UpdateProjectDataCacheTargetEnum2Preview     UpdateProjectDataCacheTargetEnum2 = "preview"
	UpdateProjectDataCacheTargetEnum2Development UpdateProjectDataCacheTargetEnum2 = "development"
)

func (e UpdateProjectDataCacheTargetEnum2) ToPointer() *UpdateProjectDataCacheTargetEnum2 {
	return &e
}
func (e *UpdateProjectDataCacheTargetEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheTargetEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTargetEnum2: %v", v)
	}
}

type UpdateProjectDataCacheTargetEnum1 string

const (
	UpdateProjectDataCacheTargetEnum1Production  UpdateProjectDataCacheTargetEnum1 = "production"
	UpdateProjectDataCacheTargetEnum1Preview     UpdateProjectDataCacheTargetEnum1 = "preview"
	UpdateProjectDataCacheTargetEnum1Development UpdateProjectDataCacheTargetEnum1 = "development"
)

func (e UpdateProjectDataCacheTargetEnum1) ToPointer() *UpdateProjectDataCacheTargetEnum1 {
	return &e
}
func (e *UpdateProjectDataCacheTargetEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheTargetEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTargetEnum1: %v", v)
	}
}

type UpdateProjectDataCacheTargetUnionType string

const (
	UpdateProjectDataCacheTargetUnionTypeArrayOfUpdateProjectDataCacheTargetEnum1 UpdateProjectDataCacheTargetUnionType = "arrayOfUpdateProjectDataCacheTargetEnum1"
	UpdateProjectDataCacheTargetUnionTypeUpdateProjectDataCacheTargetEnum2        UpdateProjectDataCacheTargetUnionType = "updateProjectDataCache_target_enum_2"
)

type UpdateProjectDataCacheTargetUnion struct {
	ArrayOfUpdateProjectDataCacheTargetEnum1 []UpdateProjectDataCacheTargetEnum1 `queryParam:"inline"`
	UpdateProjectDataCacheTargetEnum2        *UpdateProjectDataCacheTargetEnum2  `queryParam:"inline"`

	Type UpdateProjectDataCacheTargetUnionType
}

func CreateUpdateProjectDataCacheTargetUnionArrayOfUpdateProjectDataCacheTargetEnum1(arrayOfUpdateProjectDataCacheTargetEnum1 []UpdateProjectDataCacheTargetEnum1) UpdateProjectDataCacheTargetUnion {
	typ := UpdateProjectDataCacheTargetUnionTypeArrayOfUpdateProjectDataCacheTargetEnum1

	return UpdateProjectDataCacheTargetUnion{
		ArrayOfUpdateProjectDataCacheTargetEnum1: arrayOfUpdateProjectDataCacheTargetEnum1,
		Type:                                     typ,
	}
}

func CreateUpdateProjectDataCacheTargetUnionUpdateProjectDataCacheTargetEnum2(updateProjectDataCacheTargetEnum2 UpdateProjectDataCacheTargetEnum2) UpdateProjectDataCacheTargetUnion {
	typ := UpdateProjectDataCacheTargetUnionTypeUpdateProjectDataCacheTargetEnum2

	return UpdateProjectDataCacheTargetUnion{
		UpdateProjectDataCacheTargetEnum2: &updateProjectDataCacheTargetEnum2,
		Type:                              typ,
	}
}

func (u *UpdateProjectDataCacheTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfUpdateProjectDataCacheTargetEnum1 []UpdateProjectDataCacheTargetEnum1 = []UpdateProjectDataCacheTargetEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfUpdateProjectDataCacheTargetEnum1, "", true, true); err == nil {
		u.ArrayOfUpdateProjectDataCacheTargetEnum1 = arrayOfUpdateProjectDataCacheTargetEnum1
		u.Type = UpdateProjectDataCacheTargetUnionTypeArrayOfUpdateProjectDataCacheTargetEnum1
		return nil
	}

	var updateProjectDataCacheTargetEnum2 UpdateProjectDataCacheTargetEnum2 = UpdateProjectDataCacheTargetEnum2("")
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheTargetEnum2, "", true, true); err == nil {
		u.UpdateProjectDataCacheTargetEnum2 = &updateProjectDataCacheTargetEnum2
		u.Type = UpdateProjectDataCacheTargetUnionTypeUpdateProjectDataCacheTargetEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTargetUnion", string(data))
}

func (u UpdateProjectDataCacheTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfUpdateProjectDataCacheTargetEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfUpdateProjectDataCacheTargetEnum1, "", true)
	}

	if u.UpdateProjectDataCacheTargetEnum2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheTargetEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTargetUnion: all fields are null")
}

type UpdateProjectDataCacheEnvType string

const (
	UpdateProjectDataCacheEnvTypeSecret    UpdateProjectDataCacheEnvType = "secret"
	UpdateProjectDataCacheEnvTypeSystem    UpdateProjectDataCacheEnvType = "system"
	UpdateProjectDataCacheEnvTypeEncrypted UpdateProjectDataCacheEnvType = "encrypted"
	UpdateProjectDataCacheEnvTypePlain     UpdateProjectDataCacheEnvType = "plain"
	UpdateProjectDataCacheEnvTypeSensitive UpdateProjectDataCacheEnvType = "sensitive"
)

func (e UpdateProjectDataCacheEnvType) ToPointer() *UpdateProjectDataCacheEnvType {
	return &e
}
func (e *UpdateProjectDataCacheEnvType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "secret":
		fallthrough
	case "system":
		fallthrough
	case "encrypted":
		fallthrough
	case "plain":
		fallthrough
	case "sensitive":
		*e = UpdateProjectDataCacheEnvType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheEnvType: %v", v)
	}
}

type UpdateProjectDataCacheTypeFlagsConnectionString string

const (
	UpdateProjectDataCacheTypeFlagsConnectionStringFlagsConnectionString UpdateProjectDataCacheTypeFlagsConnectionString = "flags-connection-string"
)

func (e UpdateProjectDataCacheTypeFlagsConnectionString) ToPointer() *UpdateProjectDataCacheTypeFlagsConnectionString {
	return &e
}
func (e *UpdateProjectDataCacheTypeFlagsConnectionString) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-connection-string":
		*e = UpdateProjectDataCacheTypeFlagsConnectionString(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeFlagsConnectionString: %v", v)
	}
}

type UpdateProjectDataCacheContentHintFlagsConnectionString struct {
	Type      UpdateProjectDataCacheTypeFlagsConnectionString `json:"type"`
	ProjectID string                                          `json:"projectId"`
}

func (o *UpdateProjectDataCacheContentHintFlagsConnectionString) GetType() UpdateProjectDataCacheTypeFlagsConnectionString {
	if o == nil {
		return UpdateProjectDataCacheTypeFlagsConnectionString("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintFlagsConnectionString) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

type UpdateProjectDataCacheTypeIntegrationStoreSecret string

const (
	UpdateProjectDataCacheTypeIntegrationStoreSecretIntegrationStoreSecret UpdateProjectDataCacheTypeIntegrationStoreSecret = "integration-store-secret"
)

func (e UpdateProjectDataCacheTypeIntegrationStoreSecret) ToPointer() *UpdateProjectDataCacheTypeIntegrationStoreSecret {
	return &e
}
func (e *UpdateProjectDataCacheTypeIntegrationStoreSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-store-secret":
		*e = UpdateProjectDataCacheTypeIntegrationStoreSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeIntegrationStoreSecret: %v", v)
	}
}

type UpdateProjectDataCacheContentHintIntegrationStoreSecret struct {
	Type                       UpdateProjectDataCacheTypeIntegrationStoreSecret `json:"type"`
	StoreID                    string                                           `json:"storeId"`
	IntegrationID              string                                           `json:"integrationId"`
	IntegrationProductID       string                                           `json:"integrationProductId"`
	IntegrationConfigurationID string                                           `json:"integrationConfigurationId"`
}

func (o *UpdateProjectDataCacheContentHintIntegrationStoreSecret) GetType() UpdateProjectDataCacheTypeIntegrationStoreSecret {
	if o == nil {
		return UpdateProjectDataCacheTypeIntegrationStoreSecret("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintIntegrationStoreSecret) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

func (o *UpdateProjectDataCacheContentHintIntegrationStoreSecret) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateProjectDataCacheContentHintIntegrationStoreSecret) GetIntegrationProductID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationProductID
}

func (o *UpdateProjectDataCacheContentHintIntegrationStoreSecret) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

type UpdateProjectDataCacheTypePostgresURLNoSsl string

const (
	UpdateProjectDataCacheTypePostgresURLNoSslPostgresURLNoSsl UpdateProjectDataCacheTypePostgresURLNoSsl = "postgres-url-no-ssl"
)

func (e UpdateProjectDataCacheTypePostgresURLNoSsl) ToPointer() *UpdateProjectDataCacheTypePostgresURLNoSsl {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresURLNoSsl) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-no-ssl":
		*e = UpdateProjectDataCacheTypePostgresURLNoSsl(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresURLNoSsl: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresURLNoSsl struct {
	Type    UpdateProjectDataCacheTypePostgresURLNoSsl `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresURLNoSsl) GetType() UpdateProjectDataCacheTypePostgresURLNoSsl {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresURLNoSsl("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresURLNoSsl) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresDatabase string

const (
	UpdateProjectDataCacheTypePostgresDatabasePostgresDatabase UpdateProjectDataCacheTypePostgresDatabase = "postgres-database"
)

func (e UpdateProjectDataCacheTypePostgresDatabase) ToPointer() *UpdateProjectDataCacheTypePostgresDatabase {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresDatabase) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-database":
		*e = UpdateProjectDataCacheTypePostgresDatabase(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresDatabase: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresDatabase struct {
	Type    UpdateProjectDataCacheTypePostgresDatabase `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresDatabase) GetType() UpdateProjectDataCacheTypePostgresDatabase {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresDatabase("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresDatabase) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresPassword string

const (
	UpdateProjectDataCacheTypePostgresPasswordPostgresPassword UpdateProjectDataCacheTypePostgresPassword = "postgres-password"
)

func (e UpdateProjectDataCacheTypePostgresPassword) ToPointer() *UpdateProjectDataCacheTypePostgresPassword {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresPassword) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-password":
		*e = UpdateProjectDataCacheTypePostgresPassword(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresPassword: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresPassword struct {
	Type    UpdateProjectDataCacheTypePostgresPassword `json:"type"`
	StoreID string                                     `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresPassword) GetType() UpdateProjectDataCacheTypePostgresPassword {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresPassword("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresPassword) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresHost string

const (
	UpdateProjectDataCacheTypePostgresHostPostgresHost UpdateProjectDataCacheTypePostgresHost = "postgres-host"
)

func (e UpdateProjectDataCacheTypePostgresHost) ToPointer() *UpdateProjectDataCacheTypePostgresHost {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-host":
		*e = UpdateProjectDataCacheTypePostgresHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresHost: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresHost struct {
	Type    UpdateProjectDataCacheTypePostgresHost `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresHost) GetType() UpdateProjectDataCacheTypePostgresHost {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresHost("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresHost) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresUser string

const (
	UpdateProjectDataCacheTypePostgresUserPostgresUser UpdateProjectDataCacheTypePostgresUser = "postgres-user"
)

func (e UpdateProjectDataCacheTypePostgresUser) ToPointer() *UpdateProjectDataCacheTypePostgresUser {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresUser) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-user":
		*e = UpdateProjectDataCacheTypePostgresUser(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresUser: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresUser struct {
	Type    UpdateProjectDataCacheTypePostgresUser `json:"type"`
	StoreID string                                 `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresUser) GetType() UpdateProjectDataCacheTypePostgresUser {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresUser("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresUser) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresPrismaURL string

const (
	UpdateProjectDataCacheTypePostgresPrismaURLPostgresPrismaURL UpdateProjectDataCacheTypePostgresPrismaURL = "postgres-prisma-url"
)

func (e UpdateProjectDataCacheTypePostgresPrismaURL) ToPointer() *UpdateProjectDataCacheTypePostgresPrismaURL {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresPrismaURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-prisma-url":
		*e = UpdateProjectDataCacheTypePostgresPrismaURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresPrismaURL: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresPrismaURL struct {
	Type    UpdateProjectDataCacheTypePostgresPrismaURL `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresPrismaURL) GetType() UpdateProjectDataCacheTypePostgresPrismaURL {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresPrismaURL("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresPrismaURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresURLNonPooling string

const (
	UpdateProjectDataCacheTypePostgresURLNonPoolingPostgresURLNonPooling UpdateProjectDataCacheTypePostgresURLNonPooling = "postgres-url-non-pooling"
)

func (e UpdateProjectDataCacheTypePostgresURLNonPooling) ToPointer() *UpdateProjectDataCacheTypePostgresURLNonPooling {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresURLNonPooling) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url-non-pooling":
		*e = UpdateProjectDataCacheTypePostgresURLNonPooling(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresURLNonPooling: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresURLNonPooling struct {
	Type    UpdateProjectDataCacheTypePostgresURLNonPooling `json:"type"`
	StoreID string                                          `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresURLNonPooling) GetType() UpdateProjectDataCacheTypePostgresURLNonPooling {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresURLNonPooling("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresURLNonPooling) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypePostgresURL string

const (
	UpdateProjectDataCacheTypePostgresURLPostgresURL UpdateProjectDataCacheTypePostgresURL = "postgres-url"
)

func (e UpdateProjectDataCacheTypePostgresURL) ToPointer() *UpdateProjectDataCacheTypePostgresURL {
	return &e
}
func (e *UpdateProjectDataCacheTypePostgresURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "postgres-url":
		*e = UpdateProjectDataCacheTypePostgresURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypePostgresURL: %v", v)
	}
}

type UpdateProjectDataCacheContentHintPostgresURL struct {
	Type    UpdateProjectDataCacheTypePostgresURL `json:"type"`
	StoreID string                                `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintPostgresURL) GetType() UpdateProjectDataCacheTypePostgresURL {
	if o == nil {
		return UpdateProjectDataCacheTypePostgresURL("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintPostgresURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypeBlobReadWriteToken string

const (
	UpdateProjectDataCacheTypeBlobReadWriteTokenBlobReadWriteToken UpdateProjectDataCacheTypeBlobReadWriteToken = "blob-read-write-token"
)

func (e UpdateProjectDataCacheTypeBlobReadWriteToken) ToPointer() *UpdateProjectDataCacheTypeBlobReadWriteToken {
	return &e
}
func (e *UpdateProjectDataCacheTypeBlobReadWriteToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blob-read-write-token":
		*e = UpdateProjectDataCacheTypeBlobReadWriteToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeBlobReadWriteToken: %v", v)
	}
}

type UpdateProjectDataCacheContentHintBlobReadWriteToken struct {
	Type    UpdateProjectDataCacheTypeBlobReadWriteToken `json:"type"`
	StoreID string                                       `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintBlobReadWriteToken) GetType() UpdateProjectDataCacheTypeBlobReadWriteToken {
	if o == nil {
		return UpdateProjectDataCacheTypeBlobReadWriteToken("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintBlobReadWriteToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken string

const (
	UpdateProjectDataCacheTypeRedisRestAPIReadOnlyTokenRedisRestAPIReadOnlyToken UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken = "redis-rest-api-read-only-token"
)

func (e UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken) ToPointer() *UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken {
	return &e
}
func (e *UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-read-only-token":
		*e = UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken: %v", v)
	}
}

type UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken struct {
	Type    UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken `json:"type"`
	StoreID string                                              `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken) GetType() UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken {
	if o == nil {
		return UpdateProjectDataCacheTypeRedisRestAPIReadOnlyToken("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypeRedisRestAPIToken string

const (
	UpdateProjectDataCacheTypeRedisRestAPITokenRedisRestAPIToken UpdateProjectDataCacheTypeRedisRestAPIToken = "redis-rest-api-token"
)

func (e UpdateProjectDataCacheTypeRedisRestAPIToken) ToPointer() *UpdateProjectDataCacheTypeRedisRestAPIToken {
	return &e
}
func (e *UpdateProjectDataCacheTypeRedisRestAPIToken) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-token":
		*e = UpdateProjectDataCacheTypeRedisRestAPIToken(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeRedisRestAPIToken: %v", v)
	}
}

type UpdateProjectDataCacheContentHintRedisRestAPIToken struct {
	Type    UpdateProjectDataCacheTypeRedisRestAPIToken `json:"type"`
	StoreID string                                      `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintRedisRestAPIToken) GetType() UpdateProjectDataCacheTypeRedisRestAPIToken {
	if o == nil {
		return UpdateProjectDataCacheTypeRedisRestAPIToken("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintRedisRestAPIToken) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypeRedisRestAPIURL string

const (
	UpdateProjectDataCacheTypeRedisRestAPIURLRedisRestAPIURL UpdateProjectDataCacheTypeRedisRestAPIURL = "redis-rest-api-url"
)

func (e UpdateProjectDataCacheTypeRedisRestAPIURL) ToPointer() *UpdateProjectDataCacheTypeRedisRestAPIURL {
	return &e
}
func (e *UpdateProjectDataCacheTypeRedisRestAPIURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-rest-api-url":
		*e = UpdateProjectDataCacheTypeRedisRestAPIURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeRedisRestAPIURL: %v", v)
	}
}

type UpdateProjectDataCacheContentHintRedisRestAPIURL struct {
	Type    UpdateProjectDataCacheTypeRedisRestAPIURL `json:"type"`
	StoreID string                                    `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintRedisRestAPIURL) GetType() UpdateProjectDataCacheTypeRedisRestAPIURL {
	if o == nil {
		return UpdateProjectDataCacheTypeRedisRestAPIURL("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintRedisRestAPIURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheTypeRedisURL string

const (
	UpdateProjectDataCacheTypeRedisURLRedisURL UpdateProjectDataCacheTypeRedisURL = "redis-url"
)

func (e UpdateProjectDataCacheTypeRedisURL) ToPointer() *UpdateProjectDataCacheTypeRedisURL {
	return &e
}
func (e *UpdateProjectDataCacheTypeRedisURL) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "redis-url":
		*e = UpdateProjectDataCacheTypeRedisURL(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeRedisURL: %v", v)
	}
}

type UpdateProjectDataCacheContentHintRedisURL struct {
	Type    UpdateProjectDataCacheTypeRedisURL `json:"type"`
	StoreID string                             `json:"storeId"`
}

func (o *UpdateProjectDataCacheContentHintRedisURL) GetType() UpdateProjectDataCacheTypeRedisURL {
	if o == nil {
		return UpdateProjectDataCacheTypeRedisURL("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheContentHintRedisURL) GetStoreID() string {
	if o == nil {
		return ""
	}
	return o.StoreID
}

type UpdateProjectDataCacheContentHintUnionType string

const (
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisURL                  UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_RedisURL"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIURL           UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_RedisRestAPIURL"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIToken         UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_RedisRestAPIToken"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_RedisRestAPIReadOnlyToken"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintBlobReadWriteToken        UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_BlobReadWriteToken"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURL               UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresURL"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURLNonPooling     UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresURLNonPooling"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresPrismaURL         UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresPrismaURL"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresUser              UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresUser"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresHost              UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresHost"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresPassword          UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresPassword"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresDatabase          UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresDatabase"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURLNoSsl          UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_PostgresURLNoSsl"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintIntegrationStoreSecret    UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_IntegrationStoreSecret"
	UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintFlagsConnectionString     UpdateProjectDataCacheContentHintUnionType = "updateProjectDataCache_contentHint_FlagsConnectionString"
)

type UpdateProjectDataCacheContentHintUnion struct {
	UpdateProjectDataCacheContentHintRedisURL                  *UpdateProjectDataCacheContentHintRedisURL                  `queryParam:"inline"`
	UpdateProjectDataCacheContentHintRedisRestAPIURL           *UpdateProjectDataCacheContentHintRedisRestAPIURL           `queryParam:"inline"`
	UpdateProjectDataCacheContentHintRedisRestAPIToken         *UpdateProjectDataCacheContentHintRedisRestAPIToken         `queryParam:"inline"`
	UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken *UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken `queryParam:"inline"`
	UpdateProjectDataCacheContentHintBlobReadWriteToken        *UpdateProjectDataCacheContentHintBlobReadWriteToken        `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresURL               *UpdateProjectDataCacheContentHintPostgresURL               `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresURLNonPooling     *UpdateProjectDataCacheContentHintPostgresURLNonPooling     `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresPrismaURL         *UpdateProjectDataCacheContentHintPostgresPrismaURL         `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresUser              *UpdateProjectDataCacheContentHintPostgresUser              `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresHost              *UpdateProjectDataCacheContentHintPostgresHost              `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresPassword          *UpdateProjectDataCacheContentHintPostgresPassword          `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresDatabase          *UpdateProjectDataCacheContentHintPostgresDatabase          `queryParam:"inline"`
	UpdateProjectDataCacheContentHintPostgresURLNoSsl          *UpdateProjectDataCacheContentHintPostgresURLNoSsl          `queryParam:"inline"`
	UpdateProjectDataCacheContentHintIntegrationStoreSecret    *UpdateProjectDataCacheContentHintIntegrationStoreSecret    `queryParam:"inline"`
	UpdateProjectDataCacheContentHintFlagsConnectionString     *UpdateProjectDataCacheContentHintFlagsConnectionString     `queryParam:"inline"`

	Type UpdateProjectDataCacheContentHintUnionType
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintRedisURL(updateProjectDataCacheContentHintRedisURL UpdateProjectDataCacheContentHintRedisURL) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisURL

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintRedisURL: &updateProjectDataCacheContentHintRedisURL,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintRedisRestAPIURL(updateProjectDataCacheContentHintRedisRestAPIURL UpdateProjectDataCacheContentHintRedisRestAPIURL) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIURL

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintRedisRestAPIURL: &updateProjectDataCacheContentHintRedisRestAPIURL,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintRedisRestAPIToken(updateProjectDataCacheContentHintRedisRestAPIToken UpdateProjectDataCacheContentHintRedisRestAPIToken) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIToken

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintRedisRestAPIToken: &updateProjectDataCacheContentHintRedisRestAPIToken,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken(updateProjectDataCacheContentHintRedisRestAPIReadOnlyToken UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken: &updateProjectDataCacheContentHintRedisRestAPIReadOnlyToken,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintBlobReadWriteToken(updateProjectDataCacheContentHintBlobReadWriteToken UpdateProjectDataCacheContentHintBlobReadWriteToken) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintBlobReadWriteToken

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintBlobReadWriteToken: &updateProjectDataCacheContentHintBlobReadWriteToken,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresURL(updateProjectDataCacheContentHintPostgresURL UpdateProjectDataCacheContentHintPostgresURL) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURL

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresURL: &updateProjectDataCacheContentHintPostgresURL,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresURLNonPooling(updateProjectDataCacheContentHintPostgresURLNonPooling UpdateProjectDataCacheContentHintPostgresURLNonPooling) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURLNonPooling

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresURLNonPooling: &updateProjectDataCacheContentHintPostgresURLNonPooling,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresPrismaURL(updateProjectDataCacheContentHintPostgresPrismaURL UpdateProjectDataCacheContentHintPostgresPrismaURL) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresPrismaURL

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresPrismaURL: &updateProjectDataCacheContentHintPostgresPrismaURL,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresUser(updateProjectDataCacheContentHintPostgresUser UpdateProjectDataCacheContentHintPostgresUser) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresUser

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresUser: &updateProjectDataCacheContentHintPostgresUser,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresHost(updateProjectDataCacheContentHintPostgresHost UpdateProjectDataCacheContentHintPostgresHost) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresHost

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresHost: &updateProjectDataCacheContentHintPostgresHost,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresPassword(updateProjectDataCacheContentHintPostgresPassword UpdateProjectDataCacheContentHintPostgresPassword) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresPassword

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresPassword: &updateProjectDataCacheContentHintPostgresPassword,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresDatabase(updateProjectDataCacheContentHintPostgresDatabase UpdateProjectDataCacheContentHintPostgresDatabase) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresDatabase

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresDatabase: &updateProjectDataCacheContentHintPostgresDatabase,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintPostgresURLNoSsl(updateProjectDataCacheContentHintPostgresURLNoSsl UpdateProjectDataCacheContentHintPostgresURLNoSsl) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURLNoSsl

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintPostgresURLNoSsl: &updateProjectDataCacheContentHintPostgresURLNoSsl,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintIntegrationStoreSecret(updateProjectDataCacheContentHintIntegrationStoreSecret UpdateProjectDataCacheContentHintIntegrationStoreSecret) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintIntegrationStoreSecret

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintIntegrationStoreSecret: &updateProjectDataCacheContentHintIntegrationStoreSecret,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheContentHintUnionUpdateProjectDataCacheContentHintFlagsConnectionString(updateProjectDataCacheContentHintFlagsConnectionString UpdateProjectDataCacheContentHintFlagsConnectionString) UpdateProjectDataCacheContentHintUnion {
	typ := UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintFlagsConnectionString

	return UpdateProjectDataCacheContentHintUnion{
		UpdateProjectDataCacheContentHintFlagsConnectionString: &updateProjectDataCacheContentHintFlagsConnectionString,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheContentHintUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheContentHintPostgresURLNonPooling UpdateProjectDataCacheContentHintPostgresURLNonPooling = UpdateProjectDataCacheContentHintPostgresURLNonPooling{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresURLNonPooling, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresURLNonPooling = &updateProjectDataCacheContentHintPostgresURLNonPooling
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURLNonPooling
		return nil
	}

	var updateProjectDataCacheContentHintPostgresPassword UpdateProjectDataCacheContentHintPostgresPassword = UpdateProjectDataCacheContentHintPostgresPassword{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresPassword, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresPassword = &updateProjectDataCacheContentHintPostgresPassword
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresPassword
		return nil
	}

	var updateProjectDataCacheContentHintRedisRestAPIToken UpdateProjectDataCacheContentHintRedisRestAPIToken = UpdateProjectDataCacheContentHintRedisRestAPIToken{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintRedisRestAPIToken, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintRedisRestAPIToken = &updateProjectDataCacheContentHintRedisRestAPIToken
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIToken
		return nil
	}

	var updateProjectDataCacheContentHintRedisRestAPIReadOnlyToken UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken = UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintRedisRestAPIReadOnlyToken, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken = &updateProjectDataCacheContentHintRedisRestAPIReadOnlyToken
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken
		return nil
	}

	var updateProjectDataCacheContentHintBlobReadWriteToken UpdateProjectDataCacheContentHintBlobReadWriteToken = UpdateProjectDataCacheContentHintBlobReadWriteToken{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintBlobReadWriteToken, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintBlobReadWriteToken = &updateProjectDataCacheContentHintBlobReadWriteToken
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintBlobReadWriteToken
		return nil
	}

	var updateProjectDataCacheContentHintPostgresURL UpdateProjectDataCacheContentHintPostgresURL = UpdateProjectDataCacheContentHintPostgresURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresURL, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresURL = &updateProjectDataCacheContentHintPostgresURL
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURL
		return nil
	}

	var updateProjectDataCacheContentHintRedisRestAPIURL UpdateProjectDataCacheContentHintRedisRestAPIURL = UpdateProjectDataCacheContentHintRedisRestAPIURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintRedisRestAPIURL, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintRedisRestAPIURL = &updateProjectDataCacheContentHintRedisRestAPIURL
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisRestAPIURL
		return nil
	}

	var updateProjectDataCacheContentHintPostgresUser UpdateProjectDataCacheContentHintPostgresUser = UpdateProjectDataCacheContentHintPostgresUser{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresUser, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresUser = &updateProjectDataCacheContentHintPostgresUser
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresUser
		return nil
	}

	var updateProjectDataCacheContentHintRedisURL UpdateProjectDataCacheContentHintRedisURL = UpdateProjectDataCacheContentHintRedisURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintRedisURL, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintRedisURL = &updateProjectDataCacheContentHintRedisURL
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintRedisURL
		return nil
	}

	var updateProjectDataCacheContentHintPostgresHost UpdateProjectDataCacheContentHintPostgresHost = UpdateProjectDataCacheContentHintPostgresHost{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresHost, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresHost = &updateProjectDataCacheContentHintPostgresHost
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresHost
		return nil
	}

	var updateProjectDataCacheContentHintPostgresPrismaURL UpdateProjectDataCacheContentHintPostgresPrismaURL = UpdateProjectDataCacheContentHintPostgresPrismaURL{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresPrismaURL, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresPrismaURL = &updateProjectDataCacheContentHintPostgresPrismaURL
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresPrismaURL
		return nil
	}

	var updateProjectDataCacheContentHintPostgresDatabase UpdateProjectDataCacheContentHintPostgresDatabase = UpdateProjectDataCacheContentHintPostgresDatabase{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresDatabase, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresDatabase = &updateProjectDataCacheContentHintPostgresDatabase
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresDatabase
		return nil
	}

	var updateProjectDataCacheContentHintPostgresURLNoSsl UpdateProjectDataCacheContentHintPostgresURLNoSsl = UpdateProjectDataCacheContentHintPostgresURLNoSsl{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintPostgresURLNoSsl, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintPostgresURLNoSsl = &updateProjectDataCacheContentHintPostgresURLNoSsl
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintPostgresURLNoSsl
		return nil
	}

	var updateProjectDataCacheContentHintFlagsConnectionString UpdateProjectDataCacheContentHintFlagsConnectionString = UpdateProjectDataCacheContentHintFlagsConnectionString{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintFlagsConnectionString, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintFlagsConnectionString = &updateProjectDataCacheContentHintFlagsConnectionString
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintFlagsConnectionString
		return nil
	}

	var updateProjectDataCacheContentHintIntegrationStoreSecret UpdateProjectDataCacheContentHintIntegrationStoreSecret = UpdateProjectDataCacheContentHintIntegrationStoreSecret{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheContentHintIntegrationStoreSecret, "", true, true); err == nil {
		u.UpdateProjectDataCacheContentHintIntegrationStoreSecret = &updateProjectDataCacheContentHintIntegrationStoreSecret
		u.Type = UpdateProjectDataCacheContentHintUnionTypeUpdateProjectDataCacheContentHintIntegrationStoreSecret
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheContentHintUnion", string(data))
}

func (u UpdateProjectDataCacheContentHintUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheContentHintRedisURL != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintRedisURL, "", true)
	}

	if u.UpdateProjectDataCacheContentHintRedisRestAPIURL != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintRedisRestAPIURL, "", true)
	}

	if u.UpdateProjectDataCacheContentHintRedisRestAPIToken != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintRedisRestAPIToken, "", true)
	}

	if u.UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintRedisRestAPIReadOnlyToken, "", true)
	}

	if u.UpdateProjectDataCacheContentHintBlobReadWriteToken != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintBlobReadWriteToken, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresURL != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresURL, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresURLNonPooling != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresURLNonPooling, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresPrismaURL != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresPrismaURL, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresUser != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresUser, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresHost != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresHost, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresPassword != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresPassword, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresDatabase != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresDatabase, "", true)
	}

	if u.UpdateProjectDataCacheContentHintPostgresURLNoSsl != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintPostgresURLNoSsl, "", true)
	}

	if u.UpdateProjectDataCacheContentHintIntegrationStoreSecret != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintIntegrationStoreSecret, "", true)
	}

	if u.UpdateProjectDataCacheContentHintFlagsConnectionString != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheContentHintFlagsConnectionString, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheContentHintUnion: all fields are null")
}

type UpdateProjectDataCacheTypeFlagsSecret string

const (
	UpdateProjectDataCacheTypeFlagsSecretFlagsSecret UpdateProjectDataCacheTypeFlagsSecret = "flags-secret"
)

func (e UpdateProjectDataCacheTypeFlagsSecret) ToPointer() *UpdateProjectDataCacheTypeFlagsSecret {
	return &e
}
func (e *UpdateProjectDataCacheTypeFlagsSecret) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "flags-secret":
		*e = UpdateProjectDataCacheTypeFlagsSecret(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeFlagsSecret: %v", v)
	}
}

// UpdateProjectDataCacheInternalContentHint - Similar to `contentHints`, but should not be exposed to the user.
type UpdateProjectDataCacheInternalContentHint struct {
	Type UpdateProjectDataCacheTypeFlagsSecret `json:"type"`
	// Contains the `value` of the env variable, encrypted with a special key to make decryption possible in the subscriber Lambda.
	EncryptedValue string `json:"encryptedValue"`
}

func (o *UpdateProjectDataCacheInternalContentHint) GetType() UpdateProjectDataCacheTypeFlagsSecret {
	if o == nil {
		return UpdateProjectDataCacheTypeFlagsSecret("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheInternalContentHint) GetEncryptedValue() string {
	if o == nil {
		return ""
	}
	return o.EncryptedValue
}

type UpdateProjectDataCacheEnv struct {
	Target *UpdateProjectDataCacheTargetUnion `json:"target,omitempty"`
	Type   UpdateProjectDataCacheEnvType      `json:"type"`
	// This is used to identiy variables that have been migrated from type secret to sensitive.
	SunsetSecretID    *string                                 `json:"sunsetSecretId,omitempty"`
	Decrypted         *bool                                   `json:"decrypted,omitempty"`
	Value             string                                  `json:"value"`
	VsmValue          *string                                 `json:"vsmValue,omitempty"`
	ID                *string                                 `json:"id,omitempty"`
	Key               string                                  `json:"key"`
	ConfigurationID   *string                                 `json:"configurationId,omitempty"`
	CreatedAt         *float64                                `json:"createdAt,omitempty"`
	UpdatedAt         *float64                                `json:"updatedAt,omitempty"`
	CreatedBy         *string                                 `json:"createdBy,omitempty"`
	UpdatedBy         *string                                 `json:"updatedBy,omitempty"`
	GitBranch         *string                                 `json:"gitBranch,omitempty"`
	EdgeConfigID      *string                                 `json:"edgeConfigId,omitempty"`
	EdgeConfigTokenID *string                                 `json:"edgeConfigTokenId,omitempty"`
	ContentHint       *UpdateProjectDataCacheContentHintUnion `json:"contentHint,omitempty"`
	// Similar to `contentHints`, but should not be exposed to the user.
	InternalContentHint  *UpdateProjectDataCacheInternalContentHint `json:"internalContentHint,omitempty"`
	Comment              *string                                    `json:"comment,omitempty"`
	CustomEnvironmentIds []string                                   `json:"customEnvironmentIds,omitempty"`
}

func (o *UpdateProjectDataCacheEnv) GetTarget() *UpdateProjectDataCacheTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCacheEnv) GetType() UpdateProjectDataCacheEnvType {
	if o == nil {
		return UpdateProjectDataCacheEnvType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheEnv) GetSunsetSecretID() *string {
	if o == nil {
		return nil
	}
	return o.SunsetSecretID
}

func (o *UpdateProjectDataCacheEnv) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *UpdateProjectDataCacheEnv) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectDataCacheEnv) GetVsmValue() *string {
	if o == nil {
		return nil
	}
	return o.VsmValue
}

func (o *UpdateProjectDataCacheEnv) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *UpdateProjectDataCacheEnv) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UpdateProjectDataCacheEnv) GetConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConfigurationID
}

func (o *UpdateProjectDataCacheEnv) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheEnv) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheEnv) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCacheEnv) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *UpdateProjectDataCacheEnv) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectDataCacheEnv) GetEdgeConfigID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigID
}

func (o *UpdateProjectDataCacheEnv) GetEdgeConfigTokenID() *string {
	if o == nil {
		return nil
	}
	return o.EdgeConfigTokenID
}

func (o *UpdateProjectDataCacheEnv) GetContentHint() *UpdateProjectDataCacheContentHintUnion {
	if o == nil {
		return nil
	}
	return o.ContentHint
}

func (o *UpdateProjectDataCacheEnv) GetInternalContentHint() *UpdateProjectDataCacheInternalContentHint {
	if o == nil {
		return nil
	}
	return o.InternalContentHint
}

func (o *UpdateProjectDataCacheEnv) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *UpdateProjectDataCacheEnv) GetCustomEnvironmentIds() []string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentIds
}

// UpdateProjectDataCacheCustomEnvironmentType - The type of environment (production, preview, or development)
type UpdateProjectDataCacheCustomEnvironmentType string

const (
	UpdateProjectDataCacheCustomEnvironmentTypeProduction  UpdateProjectDataCacheCustomEnvironmentType = "production"
	UpdateProjectDataCacheCustomEnvironmentTypePreview     UpdateProjectDataCacheCustomEnvironmentType = "preview"
	UpdateProjectDataCacheCustomEnvironmentTypeDevelopment UpdateProjectDataCacheCustomEnvironmentType = "development"
)

func (e UpdateProjectDataCacheCustomEnvironmentType) ToPointer() *UpdateProjectDataCacheCustomEnvironmentType {
	return &e
}
func (e *UpdateProjectDataCacheCustomEnvironmentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateProjectDataCacheCustomEnvironmentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheCustomEnvironmentType: %v", v)
	}
}

// UpdateProjectDataCacheCustomEnvironmentBranchMatcherType - The type of matching to perform
type UpdateProjectDataCacheCustomEnvironmentBranchMatcherType string

const (
	UpdateProjectDataCacheCustomEnvironmentBranchMatcherTypeEndsWith   UpdateProjectDataCacheCustomEnvironmentBranchMatcherType = "endsWith"
	UpdateProjectDataCacheCustomEnvironmentBranchMatcherTypeStartsWith UpdateProjectDataCacheCustomEnvironmentBranchMatcherType = "startsWith"
	UpdateProjectDataCacheCustomEnvironmentBranchMatcherTypeEquals     UpdateProjectDataCacheCustomEnvironmentBranchMatcherType = "equals"
)

func (e UpdateProjectDataCacheCustomEnvironmentBranchMatcherType) ToPointer() *UpdateProjectDataCacheCustomEnvironmentBranchMatcherType {
	return &e
}
func (e *UpdateProjectDataCacheCustomEnvironmentBranchMatcherType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectDataCacheCustomEnvironmentBranchMatcherType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheCustomEnvironmentBranchMatcherType: %v", v)
	}
}

// UpdateProjectDataCacheCustomEnvironmentBranchMatcher - Configuration for matching git branches to this environment
type UpdateProjectDataCacheCustomEnvironmentBranchMatcher struct {
	// The type of matching to perform
	Type UpdateProjectDataCacheCustomEnvironmentBranchMatcherType `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *UpdateProjectDataCacheCustomEnvironmentBranchMatcher) GetType() UpdateProjectDataCacheCustomEnvironmentBranchMatcherType {
	if o == nil {
		return UpdateProjectDataCacheCustomEnvironmentBranchMatcherType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheCustomEnvironmentBranchMatcher) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

// UpdateProjectDataCacheVerification - A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
type UpdateProjectDataCacheVerification struct {
	Type   string `json:"type"`
	Domain string `json:"domain"`
	Value  string `json:"value"`
	Reason string `json:"reason"`
}

func (o *UpdateProjectDataCacheVerification) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *UpdateProjectDataCacheVerification) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *UpdateProjectDataCacheVerification) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectDataCacheVerification) GetReason() string {
	if o == nil {
		return ""
	}
	return o.Reason
}

// UpdateProjectDataCacheDomain - List of domains associated with this environment
type UpdateProjectDataCacheDomain struct {
	Name                string   `json:"name"`
	ApexName            string   `json:"apexName"`
	ProjectID           string   `json:"projectId"`
	Redirect            *string  `json:"redirect,omitempty"`
	RedirectStatusCode  *float64 `json:"redirectStatusCode,omitempty"`
	GitBranch           *string  `json:"gitBranch,omitempty"`
	CustomEnvironmentID *string  `json:"customEnvironmentId,omitempty"`
	UpdatedAt           *float64 `json:"updatedAt,omitempty"`
	CreatedAt           *float64 `json:"createdAt,omitempty"`
	// `true` if the domain is verified for use with the project. If `false` it will not be used as an alias on this project until the challenge in `verification` is completed.
	Verified bool `json:"verified"`
	// A list of verification challenges, one of which must be completed to verify the domain for use on the project. After the challenge is complete `POST /projects/:idOrName/domains/:domain/verify` to verify the domain. Possible challenges: - If `verification.type = TXT` the `verification.domain` will be checked for a TXT record matching `verification.value`.
	Verification []UpdateProjectDataCacheVerification `json:"verification,omitempty"`
}

func (o *UpdateProjectDataCacheDomain) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheDomain) GetApexName() string {
	if o == nil {
		return ""
	}
	return o.ApexName
}

func (o *UpdateProjectDataCacheDomain) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheDomain) GetRedirect() *string {
	if o == nil {
		return nil
	}
	return o.Redirect
}

func (o *UpdateProjectDataCacheDomain) GetRedirectStatusCode() *float64 {
	if o == nil {
		return nil
	}
	return o.RedirectStatusCode
}

func (o *UpdateProjectDataCacheDomain) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateProjectDataCacheDomain) GetCustomEnvironmentID() *string {
	if o == nil {
		return nil
	}
	return o.CustomEnvironmentID
}

func (o *UpdateProjectDataCacheDomain) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheDomain) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheDomain) GetVerified() bool {
	if o == nil {
		return false
	}
	return o.Verified
}

func (o *UpdateProjectDataCacheDomain) GetVerification() []UpdateProjectDataCacheVerification {
	if o == nil {
		return nil
	}
	return o.Verification
}

// UpdateProjectDataCacheCustomEnvironment - Internal representation of a custom environment with all required properties
type UpdateProjectDataCacheCustomEnvironment struct {
	// Unique identifier for the custom environment (format: env_*)
	ID string `json:"id"`
	// URL-friendly name of the environment
	Slug string `json:"slug"`
	// The type of environment (production, preview, or development)
	Type UpdateProjectDataCacheCustomEnvironmentType `json:"type"`
	// Optional description of the environment's purpose
	Description *string `json:"description,omitempty"`
	// Configuration for matching git branches to this environment
	BranchMatcher *UpdateProjectDataCacheCustomEnvironmentBranchMatcher `json:"branchMatcher,omitempty"`
	// List of domains associated with this environment
	Domains []UpdateProjectDataCacheDomain `json:"domains,omitempty"`
	// List of aliases for the current deployment
	CurrentDeploymentAliases []string `json:"currentDeploymentAliases,omitempty"`
	// Timestamp when the environment was created
	CreatedAt float64 `json:"createdAt"`
	// Timestamp when the environment was last updated
	UpdatedAt float64 `json:"updatedAt"`
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetType() UpdateProjectDataCacheCustomEnvironmentType {
	if o == nil {
		return UpdateProjectDataCacheCustomEnvironmentType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetBranchMatcher() *UpdateProjectDataCacheCustomEnvironmentBranchMatcher {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetDomains() []UpdateProjectDataCacheDomain {
	if o == nil {
		return nil
	}
	return o.Domains
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetCurrentDeploymentAliases() []string {
	if o == nil {
		return nil
	}
	return o.CurrentDeploymentAliases
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheCustomEnvironment) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateProjectDataCacheFramework string

const (
	UpdateProjectDataCacheFrameworkBlitzjs        UpdateProjectDataCacheFramework = "blitzjs"
	UpdateProjectDataCacheFrameworkNextjs         UpdateProjectDataCacheFramework = "nextjs"
	UpdateProjectDataCacheFrameworkGatsby         UpdateProjectDataCacheFramework = "gatsby"
	UpdateProjectDataCacheFrameworkRemix          UpdateProjectDataCacheFramework = "remix"
	UpdateProjectDataCacheFrameworkReactRouter    UpdateProjectDataCacheFramework = "react-router"
	UpdateProjectDataCacheFrameworkAstro          UpdateProjectDataCacheFramework = "astro"
	UpdateProjectDataCacheFrameworkHexo           UpdateProjectDataCacheFramework = "hexo"
	UpdateProjectDataCacheFrameworkEleventy       UpdateProjectDataCacheFramework = "eleventy"
	UpdateProjectDataCacheFrameworkDocusaurus2    UpdateProjectDataCacheFramework = "docusaurus-2"
	UpdateProjectDataCacheFrameworkDocusaurus     UpdateProjectDataCacheFramework = "docusaurus"
	UpdateProjectDataCacheFrameworkPreact         UpdateProjectDataCacheFramework = "preact"
	UpdateProjectDataCacheFrameworkSolidstart1    UpdateProjectDataCacheFramework = "solidstart-1"
	UpdateProjectDataCacheFrameworkSolidstart     UpdateProjectDataCacheFramework = "solidstart"
	UpdateProjectDataCacheFrameworkDojo           UpdateProjectDataCacheFramework = "dojo"
	UpdateProjectDataCacheFrameworkEmber          UpdateProjectDataCacheFramework = "ember"
	UpdateProjectDataCacheFrameworkVue            UpdateProjectDataCacheFramework = "vue"
	UpdateProjectDataCacheFrameworkScully         UpdateProjectDataCacheFramework = "scully"
	UpdateProjectDataCacheFrameworkIonicAngular   UpdateProjectDataCacheFramework = "ionic-angular"
	UpdateProjectDataCacheFrameworkAngular        UpdateProjectDataCacheFramework = "angular"
	UpdateProjectDataCacheFrameworkPolymer        UpdateProjectDataCacheFramework = "polymer"
	UpdateProjectDataCacheFrameworkSvelte         UpdateProjectDataCacheFramework = "svelte"
	UpdateProjectDataCacheFrameworkSveltekit      UpdateProjectDataCacheFramework = "sveltekit"
	UpdateProjectDataCacheFrameworkSveltekit1     UpdateProjectDataCacheFramework = "sveltekit-1"
	UpdateProjectDataCacheFrameworkIonicReact     UpdateProjectDataCacheFramework = "ionic-react"
	UpdateProjectDataCacheFrameworkCreateReactApp UpdateProjectDataCacheFramework = "create-react-app"
	UpdateProjectDataCacheFrameworkGridsome       UpdateProjectDataCacheFramework = "gridsome"
	UpdateProjectDataCacheFrameworkUmijs          UpdateProjectDataCacheFramework = "umijs"
	UpdateProjectDataCacheFrameworkSapper         UpdateProjectDataCacheFramework = "sapper"
	UpdateProjectDataCacheFrameworkSaber          UpdateProjectDataCacheFramework = "saber"
	UpdateProjectDataCacheFrameworkStencil        UpdateProjectDataCacheFramework = "stencil"
	UpdateProjectDataCacheFrameworkNuxtjs         UpdateProjectDataCacheFramework = "nuxtjs"
	UpdateProjectDataCacheFrameworkRedwoodjs      UpdateProjectDataCacheFramework = "redwoodjs"
	UpdateProjectDataCacheFrameworkHugo           UpdateProjectDataCacheFramework = "hugo"
	UpdateProjectDataCacheFrameworkJekyll         UpdateProjectDataCacheFramework = "jekyll"
	UpdateProjectDataCacheFrameworkBrunch         UpdateProjectDataCacheFramework = "brunch"
	UpdateProjectDataCacheFrameworkMiddleman      UpdateProjectDataCacheFramework = "middleman"
	UpdateProjectDataCacheFrameworkZola           UpdateProjectDataCacheFramework = "zola"
	UpdateProjectDataCacheFrameworkHydrogen       UpdateProjectDataCacheFramework = "hydrogen"
	UpdateProjectDataCacheFrameworkVite           UpdateProjectDataCacheFramework = "vite"
	UpdateProjectDataCacheFrameworkVitepress      UpdateProjectDataCacheFramework = "vitepress"
	UpdateProjectDataCacheFrameworkVuepress       UpdateProjectDataCacheFramework = "vuepress"
	UpdateProjectDataCacheFrameworkParcel         UpdateProjectDataCacheFramework = "parcel"
	UpdateProjectDataCacheFrameworkFasthtml       UpdateProjectDataCacheFramework = "fasthtml"
	UpdateProjectDataCacheFrameworkSanityV3       UpdateProjectDataCacheFramework = "sanity-v3"
	UpdateProjectDataCacheFrameworkSanity         UpdateProjectDataCacheFramework = "sanity"
	UpdateProjectDataCacheFrameworkStorybook      UpdateProjectDataCacheFramework = "storybook"
)

func (e UpdateProjectDataCacheFramework) ToPointer() *UpdateProjectDataCacheFramework {
	return &e
}
func (e *UpdateProjectDataCacheFramework) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "blitzjs":
		fallthrough
	case "nextjs":
		fallthrough
	case "gatsby":
		fallthrough
	case "remix":
		fallthrough
	case "react-router":
		fallthrough
	case "astro":
		fallthrough
	case "hexo":
		fallthrough
	case "eleventy":
		fallthrough
	case "docusaurus-2":
		fallthrough
	case "docusaurus":
		fallthrough
	case "preact":
		fallthrough
	case "solidstart-1":
		fallthrough
	case "solidstart":
		fallthrough
	case "dojo":
		fallthrough
	case "ember":
		fallthrough
	case "vue":
		fallthrough
	case "scully":
		fallthrough
	case "ionic-angular":
		fallthrough
	case "angular":
		fallthrough
	case "polymer":
		fallthrough
	case "svelte":
		fallthrough
	case "sveltekit":
		fallthrough
	case "sveltekit-1":
		fallthrough
	case "ionic-react":
		fallthrough
	case "create-react-app":
		fallthrough
	case "gridsome":
		fallthrough
	case "umijs":
		fallthrough
	case "sapper":
		fallthrough
	case "saber":
		fallthrough
	case "stencil":
		fallthrough
	case "nuxtjs":
		fallthrough
	case "redwoodjs":
		fallthrough
	case "hugo":
		fallthrough
	case "jekyll":
		fallthrough
	case "brunch":
		fallthrough
	case "middleman":
		fallthrough
	case "zola":
		fallthrough
	case "hydrogen":
		fallthrough
	case "vite":
		fallthrough
	case "vitepress":
		fallthrough
	case "vuepress":
		fallthrough
	case "parcel":
		fallthrough
	case "fasthtml":
		fallthrough
	case "sanity-v3":
		fallthrough
	case "sanity":
		fallthrough
	case "storybook":
		*e = UpdateProjectDataCacheFramework(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheFramework: %v", v)
	}
}

type UpdateProjectDataCacheIPBucket struct {
	Bucket       string   `json:"bucket"`
	SupportUntil *float64 `json:"supportUntil,omitempty"`
}

func (o *UpdateProjectDataCacheIPBucket) GetBucket() string {
	if o == nil {
		return ""
	}
	return o.Bucket
}

func (o *UpdateProjectDataCacheIPBucket) GetSupportUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.SupportUntil
}

type UpdateProjectDataCacheLatestDeployment struct {
	ID                     string                                      `json:"id"`
	Alias                  []string                                    `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCacheAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCacheAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                                     `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                    `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectDataCacheBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                                    `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCacheBuild               `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCacheChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCacheChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                       `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                     `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                     `json:"createdAt"`
	CreatedIn              string                                      `json:"createdIn"`
	Creator                *UpdateProjectDataCacheCreator              `json:"creator"`
	DeletedAt              *float64                                    `json:"deletedAt,omitempty"`
	DeploymentHostname     string                                      `json:"deploymentHostname"`
	Forced                 *bool                                       `json:"forced,omitempty"`
	Name                   string                                      `json:"name"`
	Meta                   map[string]string                           `json:"meta,omitempty"`
	MonorepoManager        *string                                     `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectDataCacheOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectDataCachePlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                 `json:"private"`
	ReadyAt                *float64                             `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCacheReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCacheReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                             `json:"requestedAt,omitempty"`
	Target                 *string                              `json:"target,omitempty"`
	TeamID                 *string                              `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCacheTypeLambdas    `json:"type"`
	URL                    string                               `json:"url"`
	UserID                 string                               `json:"userId"`
	WithCache              *bool                                `json:"withCache,omitempty"`
}

func (o *UpdateProjectDataCacheLatestDeployment) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheLatestDeployment) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectDataCacheLatestDeployment) GetAliasAssigned() *UpdateProjectDataCacheAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectDataCacheLatestDeployment) GetAliasError() *UpdateProjectDataCacheAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectDataCacheLatestDeployment) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectDataCacheLatestDeployment) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectDataCacheLatestDeployment) GetBranchMatcher() *UpdateProjectDataCacheBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectDataCacheLatestDeployment) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectDataCacheLatestDeployment) GetBuilds() []UpdateProjectDataCacheBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectDataCacheLatestDeployment) GetChecksConclusion() *UpdateProjectDataCacheChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectDataCacheLatestDeployment) GetChecksState() *UpdateProjectDataCacheChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectDataCacheLatestDeployment) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCacheLatestDeployment) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheLatestDeployment) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLatestDeployment) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectDataCacheLatestDeployment) GetCreator() *UpdateProjectDataCacheCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectDataCacheLatestDeployment) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *UpdateProjectDataCacheLatestDeployment) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectDataCacheLatestDeployment) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectDataCacheLatestDeployment) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheLatestDeployment) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectDataCacheLatestDeployment) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectDataCacheLatestDeployment) GetOidcTokenClaims() *UpdateProjectDataCacheOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectDataCacheLatestDeployment) GetPlan() UpdateProjectDataCachePlan {
	if o == nil {
		return UpdateProjectDataCachePlan("")
	}
	return o.Plan
}

func (o *UpdateProjectDataCacheLatestDeployment) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectDataCacheLatestDeployment) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectDataCacheLatestDeployment) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectDataCacheLatestDeployment) GetReadyState() UpdateProjectDataCacheReadyState {
	if o == nil {
		return UpdateProjectDataCacheReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectDataCacheLatestDeployment) GetReadySubstate() *UpdateProjectDataCacheReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectDataCacheLatestDeployment) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCacheLatestDeployment) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCacheLatestDeployment) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCacheLatestDeployment) GetType() UpdateProjectDataCacheTypeLambdas {
	if o == nil {
		return UpdateProjectDataCacheTypeLambdas("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheLatestDeployment) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectDataCacheLatestDeployment) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectDataCacheLatestDeployment) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectDataCacheTypeGithubCustomHost string

const (
	UpdateProjectDataCacheTypeGithubCustomHostGithubCustomHost UpdateProjectDataCacheTypeGithubCustomHost = "github-custom-host"
)

func (e UpdateProjectDataCacheTypeGithubCustomHost) ToPointer() *UpdateProjectDataCacheTypeGithubCustomHost {
	return &e
}
func (e *UpdateProjectDataCacheTypeGithubCustomHost) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github-custom-host":
		*e = UpdateProjectDataCacheTypeGithubCustomHost(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeGithubCustomHost: %v", v)
	}
}

type UpdateProjectDataCacheDeployHook4 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheDeployHook4) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheDeployHook4) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheDeployHook4) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheDeployHook4) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheDeployHook4) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheLinkGithubCustomHost struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                                    `json:"repoOwnerId,omitempty"`
	Repo             *string                                     `json:"repo,omitempty"`
	RepoID           *float64                                    `json:"repoId,omitempty"`
	Type             *UpdateProjectDataCacheTypeGithubCustomHost `json:"type,omitempty"`
	Host             *string                                     `json:"host,omitempty"`
	CreatedAt        *float64                                    `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheDeployHook4         `json:"deployHooks"`
	GitCredentialID  *string                                     `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                                    `json:"updatedAt,omitempty"`
	Sourceless       *bool                                       `json:"sourceless,omitempty"`
	ProductionBranch *string                                     `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetType() *UpdateProjectDataCacheTypeGithubCustomHost {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetHost() *string {
	if o == nil {
		return nil
	}
	return o.Host
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetDeployHooks() []UpdateProjectDataCacheDeployHook4 {
	if o == nil {
		return []UpdateProjectDataCacheDeployHook4{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCacheLinkGithubCustomHost) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectDataCacheTypeBitbucket string

const (
	UpdateProjectDataCacheTypeBitbucketBitbucket UpdateProjectDataCacheTypeBitbucket = "bitbucket"
)

func (e UpdateProjectDataCacheTypeBitbucket) ToPointer() *UpdateProjectDataCacheTypeBitbucket {
	return &e
}
func (e *UpdateProjectDataCacheTypeBitbucket) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "bitbucket":
		*e = UpdateProjectDataCacheTypeBitbucket(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeBitbucket: %v", v)
	}
}

type UpdateProjectDataCacheDeployHook3 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheDeployHook3) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheDeployHook3) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheDeployHook3) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheDeployHook3) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheDeployHook3) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheLinkBitbucket struct {
	Name             *string                              `json:"name,omitempty"`
	Slug             *string                              `json:"slug,omitempty"`
	Owner            *string                              `json:"owner,omitempty"`
	Type             *UpdateProjectDataCacheTypeBitbucket `json:"type,omitempty"`
	UUID             *string                              `json:"uuid,omitempty"`
	WorkspaceUUID    *string                              `json:"workspaceUuid,omitempty"`
	CreatedAt        *float64                             `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheDeployHook3  `json:"deployHooks"`
	GitCredentialID  *string                              `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                             `json:"updatedAt,omitempty"`
	Sourceless       *bool                                `json:"sourceless,omitempty"`
	ProductionBranch *string                              `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetOwner() *string {
	if o == nil {
		return nil
	}
	return o.Owner
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetType() *UpdateProjectDataCacheTypeBitbucket {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetUUID() *string {
	if o == nil {
		return nil
	}
	return o.UUID
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetWorkspaceUUID() *string {
	if o == nil {
		return nil
	}
	return o.WorkspaceUUID
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetDeployHooks() []UpdateProjectDataCacheDeployHook3 {
	if o == nil {
		return []UpdateProjectDataCacheDeployHook3{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCacheLinkBitbucket) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectDataCacheTypeGitlab string

const (
	UpdateProjectDataCacheTypeGitlabGitlab UpdateProjectDataCacheTypeGitlab = "gitlab"
)

func (e UpdateProjectDataCacheTypeGitlab) ToPointer() *UpdateProjectDataCacheTypeGitlab {
	return &e
}
func (e *UpdateProjectDataCacheTypeGitlab) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "gitlab":
		*e = UpdateProjectDataCacheTypeGitlab(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeGitlab: %v", v)
	}
}

type UpdateProjectDataCacheDeployHook2 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheDeployHook2) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheDeployHook2) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheDeployHook2) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheDeployHook2) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheDeployHook2) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheLinkGitlab struct {
	ProjectID                *string `json:"projectId,omitempty"`
	ProjectName              *string `json:"projectName,omitempty"`
	ProjectNameWithNamespace *string `json:"projectNameWithNamespace,omitempty"`
	ProjectNamespace         *string `json:"projectNamespace,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes. This is the id of the top level group that a namespace belongs to. Gitlab supports group nesting (up to 20 levels).
	ProjectOwnerID   *float64                            `json:"projectOwnerId,omitempty"`
	ProjectURL       *string                             `json:"projectUrl,omitempty"`
	Type             *UpdateProjectDataCacheTypeGitlab   `json:"type,omitempty"`
	CreatedAt        *float64                            `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheDeployHook2 `json:"deployHooks"`
	GitCredentialID  *string                             `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                            `json:"updatedAt,omitempty"`
	Sourceless       *bool                               `json:"sourceless,omitempty"`
	ProductionBranch *string                             `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProjectID() *string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProjectName() *string {
	if o == nil {
		return nil
	}
	return o.ProjectName
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProjectNameWithNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNameWithNamespace
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProjectNamespace() *string {
	if o == nil {
		return nil
	}
	return o.ProjectNamespace
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProjectOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.ProjectOwnerID
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProjectURL() *string {
	if o == nil {
		return nil
	}
	return o.ProjectURL
}

func (o *UpdateProjectDataCacheLinkGitlab) GetType() *UpdateProjectDataCacheTypeGitlab {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCacheLinkGitlab) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLinkGitlab) GetDeployHooks() []UpdateProjectDataCacheDeployHook2 {
	if o == nil {
		return []UpdateProjectDataCacheDeployHook2{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCacheLinkGitlab) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCacheLinkGitlab) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheLinkGitlab) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCacheLinkGitlab) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectDataCacheTypeGithub string

const (
	UpdateProjectDataCacheTypeGithubGithub UpdateProjectDataCacheTypeGithub = "github"
)

func (e UpdateProjectDataCacheTypeGithub) ToPointer() *UpdateProjectDataCacheTypeGithub {
	return &e
}
func (e *UpdateProjectDataCacheTypeGithub) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "github":
		*e = UpdateProjectDataCacheTypeGithub(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeGithub: %v", v)
	}
}

type UpdateProjectDataCacheDeployHook1 struct {
	CreatedAt *float64 `json:"createdAt,omitempty"`
	ID        string   `json:"id"`
	Name      string   `json:"name"`
	Ref       string   `json:"ref"`
	URL       string   `json:"url"`
}

func (o *UpdateProjectDataCacheDeployHook1) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheDeployHook1) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheDeployHook1) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheDeployHook1) GetRef() string {
	if o == nil {
		return ""
	}
	return o.Ref
}

func (o *UpdateProjectDataCacheDeployHook1) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

type UpdateProjectDataCacheLinkGithub struct {
	Org *string `json:"org,omitempty"`
	// A new field, should be included in all new project links, is being added just in time when a deployment is created. This is needed for Protected Git scopes.
	RepoOwnerID      *float64                            `json:"repoOwnerId,omitempty"`
	Repo             *string                             `json:"repo,omitempty"`
	RepoID           *float64                            `json:"repoId,omitempty"`
	Type             *UpdateProjectDataCacheTypeGithub   `json:"type,omitempty"`
	CreatedAt        *float64                            `json:"createdAt,omitempty"`
	DeployHooks      []UpdateProjectDataCacheDeployHook1 `json:"deployHooks"`
	GitCredentialID  *string                             `json:"gitCredentialId,omitempty"`
	UpdatedAt        *float64                            `json:"updatedAt,omitempty"`
	Sourceless       *bool                               `json:"sourceless,omitempty"`
	ProductionBranch *string                             `json:"productionBranch,omitempty"`
}

func (o *UpdateProjectDataCacheLinkGithub) GetOrg() *string {
	if o == nil {
		return nil
	}
	return o.Org
}

func (o *UpdateProjectDataCacheLinkGithub) GetRepoOwnerID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoOwnerID
}

func (o *UpdateProjectDataCacheLinkGithub) GetRepo() *string {
	if o == nil {
		return nil
	}
	return o.Repo
}

func (o *UpdateProjectDataCacheLinkGithub) GetRepoID() *float64 {
	if o == nil {
		return nil
	}
	return o.RepoID
}

func (o *UpdateProjectDataCacheLinkGithub) GetType() *UpdateProjectDataCacheTypeGithub {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateProjectDataCacheLinkGithub) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheLinkGithub) GetDeployHooks() []UpdateProjectDataCacheDeployHook1 {
	if o == nil {
		return []UpdateProjectDataCacheDeployHook1{}
	}
	return o.DeployHooks
}

func (o *UpdateProjectDataCacheLinkGithub) GetGitCredentialID() *string {
	if o == nil {
		return nil
	}
	return o.GitCredentialID
}

func (o *UpdateProjectDataCacheLinkGithub) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheLinkGithub) GetSourceless() *bool {
	if o == nil {
		return nil
	}
	return o.Sourceless
}

func (o *UpdateProjectDataCacheLinkGithub) GetProductionBranch() *string {
	if o == nil {
		return nil
	}
	return o.ProductionBranch
}

type UpdateProjectDataCacheLinkUnionType string

const (
	UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGithub           UpdateProjectDataCacheLinkUnionType = "updateProjectDataCache_link_Github"
	UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGitlab           UpdateProjectDataCacheLinkUnionType = "updateProjectDataCache_link_Gitlab"
	UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkBitbucket        UpdateProjectDataCacheLinkUnionType = "updateProjectDataCache_link_Bitbucket"
	UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGithubCustomHost UpdateProjectDataCacheLinkUnionType = "updateProjectDataCache_link_GithubCustomHost"
)

type UpdateProjectDataCacheLinkUnion struct {
	UpdateProjectDataCacheLinkGithub           *UpdateProjectDataCacheLinkGithub           `queryParam:"inline"`
	UpdateProjectDataCacheLinkGitlab           *UpdateProjectDataCacheLinkGitlab           `queryParam:"inline"`
	UpdateProjectDataCacheLinkBitbucket        *UpdateProjectDataCacheLinkBitbucket        `queryParam:"inline"`
	UpdateProjectDataCacheLinkGithubCustomHost *UpdateProjectDataCacheLinkGithubCustomHost `queryParam:"inline"`

	Type UpdateProjectDataCacheLinkUnionType
}

func CreateUpdateProjectDataCacheLinkUnionUpdateProjectDataCacheLinkGithub(updateProjectDataCacheLinkGithub UpdateProjectDataCacheLinkGithub) UpdateProjectDataCacheLinkUnion {
	typ := UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGithub

	return UpdateProjectDataCacheLinkUnion{
		UpdateProjectDataCacheLinkGithub: &updateProjectDataCacheLinkGithub,
		Type:                             typ,
	}
}

func CreateUpdateProjectDataCacheLinkUnionUpdateProjectDataCacheLinkGitlab(updateProjectDataCacheLinkGitlab UpdateProjectDataCacheLinkGitlab) UpdateProjectDataCacheLinkUnion {
	typ := UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGitlab

	return UpdateProjectDataCacheLinkUnion{
		UpdateProjectDataCacheLinkGitlab: &updateProjectDataCacheLinkGitlab,
		Type:                             typ,
	}
}

func CreateUpdateProjectDataCacheLinkUnionUpdateProjectDataCacheLinkBitbucket(updateProjectDataCacheLinkBitbucket UpdateProjectDataCacheLinkBitbucket) UpdateProjectDataCacheLinkUnion {
	typ := UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkBitbucket

	return UpdateProjectDataCacheLinkUnion{
		UpdateProjectDataCacheLinkBitbucket: &updateProjectDataCacheLinkBitbucket,
		Type:                                typ,
	}
}

func CreateUpdateProjectDataCacheLinkUnionUpdateProjectDataCacheLinkGithubCustomHost(updateProjectDataCacheLinkGithubCustomHost UpdateProjectDataCacheLinkGithubCustomHost) UpdateProjectDataCacheLinkUnion {
	typ := UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGithubCustomHost

	return UpdateProjectDataCacheLinkUnion{
		UpdateProjectDataCacheLinkGithubCustomHost: &updateProjectDataCacheLinkGithubCustomHost,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheLinkUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheLinkGithub UpdateProjectDataCacheLinkGithub = UpdateProjectDataCacheLinkGithub{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheLinkGithub, "", true, true); err == nil {
		u.UpdateProjectDataCacheLinkGithub = &updateProjectDataCacheLinkGithub
		u.Type = UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGithub
		return nil
	}

	var updateProjectDataCacheLinkBitbucket UpdateProjectDataCacheLinkBitbucket = UpdateProjectDataCacheLinkBitbucket{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheLinkBitbucket, "", true, true); err == nil {
		u.UpdateProjectDataCacheLinkBitbucket = &updateProjectDataCacheLinkBitbucket
		u.Type = UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkBitbucket
		return nil
	}

	var updateProjectDataCacheLinkGithubCustomHost UpdateProjectDataCacheLinkGithubCustomHost = UpdateProjectDataCacheLinkGithubCustomHost{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheLinkGithubCustomHost, "", true, true); err == nil {
		u.UpdateProjectDataCacheLinkGithubCustomHost = &updateProjectDataCacheLinkGithubCustomHost
		u.Type = UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGithubCustomHost
		return nil
	}

	var updateProjectDataCacheLinkGitlab UpdateProjectDataCacheLinkGitlab = UpdateProjectDataCacheLinkGitlab{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheLinkGitlab, "", true, true); err == nil {
		u.UpdateProjectDataCacheLinkGitlab = &updateProjectDataCacheLinkGitlab
		u.Type = UpdateProjectDataCacheLinkUnionTypeUpdateProjectDataCacheLinkGitlab
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheLinkUnion", string(data))
}

func (u UpdateProjectDataCacheLinkUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheLinkGithub != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheLinkGithub, "", true)
	}

	if u.UpdateProjectDataCacheLinkGitlab != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheLinkGitlab, "", true)
	}

	if u.UpdateProjectDataCacheLinkBitbucket != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheLinkBitbucket, "", true)
	}

	if u.UpdateProjectDataCacheLinkGithubCustomHost != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheLinkGithubCustomHost, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheLinkUnion: all fields are null")
}

type UpdateProjectDataCacheMicrofrontends2 struct {
	UpdatedAt float64 `json:"updatedAt"`
	GroupIds  []any   `json:"groupIds"`
	Enabled   bool    `json:"enabled"`
}

func (o *UpdateProjectDataCacheMicrofrontends2) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheMicrofrontends2) GetGroupIds() []any {
	if o == nil {
		return []any{}
	}
	return o.GroupIds
}

func (o *UpdateProjectDataCacheMicrofrontends2) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

type UpdateProjectDataCacheMicrofrontends1 struct {
	// Timestamp when the microfrontends settings were last updated.
	UpdatedAt float64 `json:"updatedAt"`
	// The group IDs of microfrontends that this project belongs to. Each microfrontend project must belong to a microfrontends group that is the set of microfrontends that are used together.
	GroupIds []string `json:"groupIds"`
	// Whether microfrontends are enabled for this project.
	Enabled bool `json:"enabled"`
	// Whether this project is the default application for the microfrontends group. The default application is the one that is used as the top level shell for the microfrontends group and hosts the other microfrontends.
	IsDefaultApp *bool `json:"isDefaultApp,omitempty"`
	// A path that is used to take screenshots and as the default path in preview links when a domain for this microfrontend is shown in the UI. Includes the leading slash, e.g. `/docs`
	DefaultRoute *string `json:"defaultRoute,omitempty"`
	// Whether observability data should be routed to this microfrontend project or a root project.
	RouteObservabilityToThisProject *bool `json:"routeObservabilityToThisProject,omitempty"`
}

func (o *UpdateProjectDataCacheMicrofrontends1) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheMicrofrontends1) GetGroupIds() []string {
	if o == nil {
		return []string{}
	}
	return o.GroupIds
}

func (o *UpdateProjectDataCacheMicrofrontends1) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *UpdateProjectDataCacheMicrofrontends1) GetIsDefaultApp() *bool {
	if o == nil {
		return nil
	}
	return o.IsDefaultApp
}

func (o *UpdateProjectDataCacheMicrofrontends1) GetDefaultRoute() *string {
	if o == nil {
		return nil
	}
	return o.DefaultRoute
}

func (o *UpdateProjectDataCacheMicrofrontends1) GetRouteObservabilityToThisProject() *bool {
	if o == nil {
		return nil
	}
	return o.RouteObservabilityToThisProject
}

type UpdateProjectDataCacheMicrofrontendsUnionType string

const (
	UpdateProjectDataCacheMicrofrontendsUnionTypeUpdateProjectDataCacheMicrofrontends1 UpdateProjectDataCacheMicrofrontendsUnionType = "updateProjectDataCache_microfrontends_1"
	UpdateProjectDataCacheMicrofrontendsUnionTypeUpdateProjectDataCacheMicrofrontends2 UpdateProjectDataCacheMicrofrontendsUnionType = "updateProjectDataCache_microfrontends_2"
)

type UpdateProjectDataCacheMicrofrontendsUnion struct {
	UpdateProjectDataCacheMicrofrontends1 *UpdateProjectDataCacheMicrofrontends1 `queryParam:"inline"`
	UpdateProjectDataCacheMicrofrontends2 *UpdateProjectDataCacheMicrofrontends2 `queryParam:"inline"`

	Type UpdateProjectDataCacheMicrofrontendsUnionType
}

func CreateUpdateProjectDataCacheMicrofrontendsUnionUpdateProjectDataCacheMicrofrontends1(updateProjectDataCacheMicrofrontends1 UpdateProjectDataCacheMicrofrontends1) UpdateProjectDataCacheMicrofrontendsUnion {
	typ := UpdateProjectDataCacheMicrofrontendsUnionTypeUpdateProjectDataCacheMicrofrontends1

	return UpdateProjectDataCacheMicrofrontendsUnion{
		UpdateProjectDataCacheMicrofrontends1: &updateProjectDataCacheMicrofrontends1,
		Type:                                  typ,
	}
}

func CreateUpdateProjectDataCacheMicrofrontendsUnionUpdateProjectDataCacheMicrofrontends2(updateProjectDataCacheMicrofrontends2 UpdateProjectDataCacheMicrofrontends2) UpdateProjectDataCacheMicrofrontendsUnion {
	typ := UpdateProjectDataCacheMicrofrontendsUnionTypeUpdateProjectDataCacheMicrofrontends2

	return UpdateProjectDataCacheMicrofrontendsUnion{
		UpdateProjectDataCacheMicrofrontends2: &updateProjectDataCacheMicrofrontends2,
		Type:                                  typ,
	}
}

func (u *UpdateProjectDataCacheMicrofrontendsUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheMicrofrontends2 UpdateProjectDataCacheMicrofrontends2 = UpdateProjectDataCacheMicrofrontends2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheMicrofrontends2, "", true, true); err == nil {
		u.UpdateProjectDataCacheMicrofrontends2 = &updateProjectDataCacheMicrofrontends2
		u.Type = UpdateProjectDataCacheMicrofrontendsUnionTypeUpdateProjectDataCacheMicrofrontends2
		return nil
	}

	var updateProjectDataCacheMicrofrontends1 UpdateProjectDataCacheMicrofrontends1 = UpdateProjectDataCacheMicrofrontends1{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheMicrofrontends1, "", true, true); err == nil {
		u.UpdateProjectDataCacheMicrofrontends1 = &updateProjectDataCacheMicrofrontends1
		u.Type = UpdateProjectDataCacheMicrofrontendsUnionTypeUpdateProjectDataCacheMicrofrontends1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheMicrofrontendsUnion", string(data))
}

func (u UpdateProjectDataCacheMicrofrontendsUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheMicrofrontends1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheMicrofrontends1, "", true)
	}

	if u.UpdateProjectDataCacheMicrofrontends2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheMicrofrontends2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheMicrofrontendsUnion: all fields are null")
}

type UpdateProjectDataCacheNodeVersion string

const (
	UpdateProjectDataCacheNodeVersionTwentyTwoDotX  UpdateProjectDataCacheNodeVersion = "22.x"
	UpdateProjectDataCacheNodeVersionTwentyDotX     UpdateProjectDataCacheNodeVersion = "20.x"
	UpdateProjectDataCacheNodeVersionEighteenDotX   UpdateProjectDataCacheNodeVersion = "18.x"
	UpdateProjectDataCacheNodeVersionSixteenDotX    UpdateProjectDataCacheNodeVersion = "16.x"
	UpdateProjectDataCacheNodeVersionFourteenDotX   UpdateProjectDataCacheNodeVersion = "14.x"
	UpdateProjectDataCacheNodeVersionTwelveDotX     UpdateProjectDataCacheNodeVersion = "12.x"
	UpdateProjectDataCacheNodeVersionTenDotX        UpdateProjectDataCacheNodeVersion = "10.x"
	UpdateProjectDataCacheNodeVersionEightDot10DotX UpdateProjectDataCacheNodeVersion = "8.10.x"
)

func (e UpdateProjectDataCacheNodeVersion) ToPointer() *UpdateProjectDataCacheNodeVersion {
	return &e
}
func (e *UpdateProjectDataCacheNodeVersion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "22.x":
		fallthrough
	case "20.x":
		fallthrough
	case "18.x":
		fallthrough
	case "16.x":
		fallthrough
	case "14.x":
		fallthrough
	case "12.x":
		fallthrough
	case "10.x":
		fallthrough
	case "8.10.x":
		*e = UpdateProjectDataCacheNodeVersion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheNodeVersion: %v", v)
	}
}

type UpdateProjectDataCachePath struct {
	Value string `json:"value"`
}

func (o *UpdateProjectDataCachePath) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

type UpdateProjectDataCacheOptionsAllowlist struct {
	Paths []UpdateProjectDataCachePath `json:"paths"`
}

func (o *UpdateProjectDataCacheOptionsAllowlist) GetPaths() []UpdateProjectDataCachePath {
	if o == nil {
		return []UpdateProjectDataCachePath{}
	}
	return o.Paths
}

type UpdateProjectDataCachePasswordProtection struct {
}

type UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType string

const (
	UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryTypeStandardLegacy UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType = "standard_legacy"
	UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryTypeStandard       UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType = "standard"
	UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryTypePerformance    UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType = "performance"
)

func (e UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType) ToPointer() *UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType {
	return &e
}
func (e *UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType: %v", v)
	}
}

type UpdateProjectDataCacheResourceConfigBuildMachineType string

const (
	UpdateProjectDataCacheResourceConfigBuildMachineTypeEnhanced UpdateProjectDataCacheResourceConfigBuildMachineType = "enhanced"
	UpdateProjectDataCacheResourceConfigBuildMachineTypeTurbo    UpdateProjectDataCacheResourceConfigBuildMachineType = "turbo"
)

func (e UpdateProjectDataCacheResourceConfigBuildMachineType) ToPointer() *UpdateProjectDataCacheResourceConfigBuildMachineType {
	return &e
}
func (e *UpdateProjectDataCacheResourceConfigBuildMachineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = UpdateProjectDataCacheResourceConfigBuildMachineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheResourceConfigBuildMachineType: %v", v)
	}
}

type UpdateProjectDataCacheResourceConfig struct {
	Fluid                      *bool                                                          `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                       `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                       `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                          `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                          `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *UpdateProjectDataCacheResourceConfigBuildMachineType          `json:"buildMachineType,omitempty"`
}

func (o *UpdateProjectDataCacheResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectDataCacheResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectDataCacheResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectDataCacheResourceConfig) GetFunctionDefaultMemoryType() *UpdateProjectDataCacheResourceConfigFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectDataCacheResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectDataCacheResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *UpdateProjectDataCacheResourceConfig) GetBuildMachineType() *UpdateProjectDataCacheResourceConfigBuildMachineType {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

// UpdateProjectDataCacheRollbackDescription - Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
type UpdateProjectDataCacheRollbackDescription struct {
	// The user who rolled back the project.
	UserID string `json:"userId"`
	// The username of the user who rolled back the project.
	Username string `json:"username"`
	// User-supplied explanation of why they rolled back the project. Limited to 250 characters.
	Description string `json:"description"`
	// Timestamp of when the rollback was requested.
	CreatedAt float64 `json:"createdAt"`
}

func (o *UpdateProjectDataCacheRollbackDescription) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectDataCacheRollbackDescription) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

func (o *UpdateProjectDataCacheRollbackDescription) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *UpdateProjectDataCacheRollbackDescription) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

// UpdateProjectDataCacheStage - An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
type UpdateProjectDataCacheStage struct {
	// The percentage of traffic to serve to the new deployment
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires approval to proceed.
	RequireApproval *bool `json:"requireApproval,omitempty"`
	// duration is the total time to serve a stage, at the given targetPercentage.
	Duration *float64 `json:"duration,omitempty"`
}

func (o *UpdateProjectDataCacheStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *UpdateProjectDataCacheStage) GetRequireApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireApproval
}

func (o *UpdateProjectDataCacheStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

type UpdateProjectDataCacheRollingRelease struct {
	// The environment that the release targets, currently only supports production. Adding in case we want to configure with alias groups or custom environments.
	Target string `json:"target"`
	// An array of all the stages required during a deployment release. each stage requires an approval before advancing to the next stage.
	Stages []UpdateProjectDataCacheStage `json:"stages,omitempty"`
	// Whether the request served by a canary deployment should return a header indicating a canary was served. Defaults to `false` when omitted.
	CanaryResponseHeader *bool `json:"canaryResponseHeader,omitempty"`
}

func (o *UpdateProjectDataCacheRollingRelease) GetTarget() string {
	if o == nil {
		return ""
	}
	return o.Target
}

func (o *UpdateProjectDataCacheRollingRelease) GetStages() []UpdateProjectDataCacheStage {
	if o == nil {
		return nil
	}
	return o.Stages
}

func (o *UpdateProjectDataCacheRollingRelease) GetCanaryResponseHeader() *bool {
	if o == nil {
		return nil
	}
	return o.CanaryResponseHeader
}

type UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType string

const (
	UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryTypeStandardLegacy UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType = "standard_legacy"
	UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryTypeStandard       UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType = "standard"
	UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryTypePerformance    UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType = "performance"
)

func (e UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType) ToPointer() *UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType {
	return &e
}
func (e *UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard_legacy":
		fallthrough
	case "standard":
		fallthrough
	case "performance":
		*e = UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType: %v", v)
	}
}

type UpdateProjectDataCacheDefaultResourceConfigBuildMachineType string

const (
	UpdateProjectDataCacheDefaultResourceConfigBuildMachineTypeEnhanced UpdateProjectDataCacheDefaultResourceConfigBuildMachineType = "enhanced"
	UpdateProjectDataCacheDefaultResourceConfigBuildMachineTypeTurbo    UpdateProjectDataCacheDefaultResourceConfigBuildMachineType = "turbo"
)

func (e UpdateProjectDataCacheDefaultResourceConfigBuildMachineType) ToPointer() *UpdateProjectDataCacheDefaultResourceConfigBuildMachineType {
	return &e
}
func (e *UpdateProjectDataCacheDefaultResourceConfigBuildMachineType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enhanced":
		fallthrough
	case "turbo":
		*e = UpdateProjectDataCacheDefaultResourceConfigBuildMachineType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheDefaultResourceConfigBuildMachineType: %v", v)
	}
}

type UpdateProjectDataCacheDefaultResourceConfig struct {
	Fluid                      *bool                                                                 `json:"fluid,omitempty"`
	FunctionDefaultRegions     []string                                                              `json:"functionDefaultRegions"`
	FunctionDefaultTimeout     *float64                                                              `json:"functionDefaultTimeout,omitempty"`
	FunctionDefaultMemoryType  *UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType `json:"functionDefaultMemoryType,omitempty"`
	FunctionZeroConfigFailover *bool                                                                 `json:"functionZeroConfigFailover,omitempty"`
	ElasticConcurrencyEnabled  *bool                                                                 `json:"elasticConcurrencyEnabled,omitempty"`
	BuildMachineType           *UpdateProjectDataCacheDefaultResourceConfigBuildMachineType          `json:"buildMachineType,omitempty"`
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetFluid() *bool {
	if o == nil {
		return nil
	}
	return o.Fluid
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetFunctionDefaultRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.FunctionDefaultRegions
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetFunctionDefaultTimeout() *float64 {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultTimeout
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetFunctionDefaultMemoryType() *UpdateProjectDataCacheDefaultResourceConfigFunctionDefaultMemoryType {
	if o == nil {
		return nil
	}
	return o.FunctionDefaultMemoryType
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.FunctionZeroConfigFailover
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetElasticConcurrencyEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ElasticConcurrencyEnabled
}

func (o *UpdateProjectDataCacheDefaultResourceConfig) GetBuildMachineType() *UpdateProjectDataCacheDefaultResourceConfigBuildMachineType {
	if o == nil {
		return nil
	}
	return o.BuildMachineType
}

type UpdateProjectDataCacheSsoProtectionDeploymentType string

const (
	UpdateProjectDataCacheSsoProtectionDeploymentTypePreview                          UpdateProjectDataCacheSsoProtectionDeploymentType = "preview"
	UpdateProjectDataCacheSsoProtectionDeploymentTypeAll                              UpdateProjectDataCacheSsoProtectionDeploymentType = "all"
	UpdateProjectDataCacheSsoProtectionDeploymentTypeProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheSsoProtectionDeploymentType = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDataCacheSsoProtectionDeploymentType) ToPointer() *UpdateProjectDataCacheSsoProtectionDeploymentType {
	return &e
}
func (e *UpdateProjectDataCacheSsoProtectionDeploymentType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDataCacheSsoProtectionDeploymentType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheSsoProtectionDeploymentType: %v", v)
	}
}

type UpdateProjectDataCacheSsoProtection struct {
	DeploymentType UpdateProjectDataCacheSsoProtectionDeploymentType `json:"deploymentType"`
}

func (o *UpdateProjectDataCacheSsoProtection) GetDeploymentType() UpdateProjectDataCacheSsoProtectionDeploymentType {
	if o == nil {
		return UpdateProjectDataCacheSsoProtectionDeploymentType("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCacheAliasAssignedType string

const (
	UpdateProjectDataCacheAliasAssignedTypeNumber  UpdateProjectDataCacheAliasAssignedType = "number"
	UpdateProjectDataCacheAliasAssignedTypeBoolean UpdateProjectDataCacheAliasAssignedType = "boolean"
)

type UpdateProjectDataCacheAliasAssigned struct {
	Number  *float64 `queryParam:"inline"`
	Boolean *bool    `queryParam:"inline"`

	Type UpdateProjectDataCacheAliasAssignedType
}

func CreateUpdateProjectDataCacheAliasAssignedNumber(number float64) UpdateProjectDataCacheAliasAssigned {
	typ := UpdateProjectDataCacheAliasAssignedTypeNumber

	return UpdateProjectDataCacheAliasAssigned{
		Number: &number,
		Type:   typ,
	}
}

func CreateUpdateProjectDataCacheAliasAssignedBoolean(boolean bool) UpdateProjectDataCacheAliasAssigned {
	typ := UpdateProjectDataCacheAliasAssignedTypeBoolean

	return UpdateProjectDataCacheAliasAssigned{
		Boolean: &boolean,
		Type:    typ,
	}
}

func (u *UpdateProjectDataCacheAliasAssigned) UnmarshalJSON(data []byte) error {

	var number float64 = float64(0)
	if err := utils.UnmarshalJSON(data, &number, "", true, true); err == nil {
		u.Number = &number
		u.Type = UpdateProjectDataCacheAliasAssignedTypeNumber
		return nil
	}

	var boolean bool = false
	if err := utils.UnmarshalJSON(data, &boolean, "", true, true); err == nil {
		u.Boolean = &boolean
		u.Type = UpdateProjectDataCacheAliasAssignedTypeBoolean
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheAliasAssigned", string(data))
}

func (u UpdateProjectDataCacheAliasAssigned) MarshalJSON() ([]byte, error) {
	if u.Number != nil {
		return utils.MarshalJSON(u.Number, "", true)
	}

	if u.Boolean != nil {
		return utils.MarshalJSON(u.Boolean, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheAliasAssigned: all fields are null")
}

type UpdateProjectDataCacheAliasError struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

func (o *UpdateProjectDataCacheAliasError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateProjectDataCacheAliasError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

// UpdateProjectDataCacheBranchMatcherTypeLambdas - The type of matching to perform
type UpdateProjectDataCacheBranchMatcherTypeLambdas string

const (
	UpdateProjectDataCacheBranchMatcherTypeLambdasEndsWith   UpdateProjectDataCacheBranchMatcherTypeLambdas = "endsWith"
	UpdateProjectDataCacheBranchMatcherTypeLambdasStartsWith UpdateProjectDataCacheBranchMatcherTypeLambdas = "startsWith"
	UpdateProjectDataCacheBranchMatcherTypeLambdasEquals     UpdateProjectDataCacheBranchMatcherTypeLambdas = "equals"
)

func (e UpdateProjectDataCacheBranchMatcherTypeLambdas) ToPointer() *UpdateProjectDataCacheBranchMatcherTypeLambdas {
	return &e
}
func (e *UpdateProjectDataCacheBranchMatcherTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "endsWith":
		fallthrough
	case "startsWith":
		fallthrough
	case "equals":
		*e = UpdateProjectDataCacheBranchMatcherTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheBranchMatcherTypeLambdas: %v", v)
	}
}

type UpdateProjectDataCacheBranchMatcherLambdas struct {
	// The type of matching to perform
	Type UpdateProjectDataCacheBranchMatcherTypeLambdas `json:"type"`
	// The pattern to match against branch names
	Pattern string `json:"pattern"`
}

func (o *UpdateProjectDataCacheBranchMatcherLambdas) GetType() UpdateProjectDataCacheBranchMatcherTypeLambdas {
	if o == nil {
		return UpdateProjectDataCacheBranchMatcherTypeLambdas("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheBranchMatcherLambdas) GetPattern() string {
	if o == nil {
		return ""
	}
	return o.Pattern
}

type UpdateProjectDataCacheBuild struct {
	Use  string  `json:"use"`
	Src  *string `json:"src,omitempty"`
	Dest *string `json:"dest,omitempty"`
}

func (o *UpdateProjectDataCacheBuild) GetUse() string {
	if o == nil {
		return ""
	}
	return o.Use
}

func (o *UpdateProjectDataCacheBuild) GetSrc() *string {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCacheBuild) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

type UpdateProjectDataCacheChecksConclusion string

const (
	UpdateProjectDataCacheChecksConclusionSucceeded UpdateProjectDataCacheChecksConclusion = "succeeded"
	UpdateProjectDataCacheChecksConclusionFailed    UpdateProjectDataCacheChecksConclusion = "failed"
	UpdateProjectDataCacheChecksConclusionSkipped   UpdateProjectDataCacheChecksConclusion = "skipped"
	UpdateProjectDataCacheChecksConclusionCanceled  UpdateProjectDataCacheChecksConclusion = "canceled"
)

func (e UpdateProjectDataCacheChecksConclusion) ToPointer() *UpdateProjectDataCacheChecksConclusion {
	return &e
}
func (e *UpdateProjectDataCacheChecksConclusion) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "canceled":
		*e = UpdateProjectDataCacheChecksConclusion(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheChecksConclusion: %v", v)
	}
}

type UpdateProjectDataCacheChecksState string

const (
	UpdateProjectDataCacheChecksStateRegistered UpdateProjectDataCacheChecksState = "registered"
	UpdateProjectDataCacheChecksStateRunning    UpdateProjectDataCacheChecksState = "running"
	UpdateProjectDataCacheChecksStateCompleted  UpdateProjectDataCacheChecksState = "completed"
)

func (e UpdateProjectDataCacheChecksState) ToPointer() *UpdateProjectDataCacheChecksState {
	return &e
}
func (e *UpdateProjectDataCacheChecksState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "registered":
		fallthrough
	case "running":
		fallthrough
	case "completed":
		*e = UpdateProjectDataCacheChecksState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheChecksState: %v", v)
	}
}

type UpdateProjectDataCacheCreator struct {
	Email       string  `json:"email"`
	GithubLogin *string `json:"githubLogin,omitempty"`
	GitlabLogin *string `json:"gitlabLogin,omitempty"`
	UID         string  `json:"uid"`
	Username    string  `json:"username"`
}

func (o *UpdateProjectDataCacheCreator) GetEmail() string {
	if o == nil {
		return ""
	}
	return o.Email
}

func (o *UpdateProjectDataCacheCreator) GetGithubLogin() *string {
	if o == nil {
		return nil
	}
	return o.GithubLogin
}

func (o *UpdateProjectDataCacheCreator) GetGitlabLogin() *string {
	if o == nil {
		return nil
	}
	return o.GitlabLogin
}

func (o *UpdateProjectDataCacheCreator) GetUID() string {
	if o == nil {
		return ""
	}
	return o.UID
}

func (o *UpdateProjectDataCacheCreator) GetUsername() string {
	if o == nil {
		return ""
	}
	return o.Username
}

type UpdateProjectDataCacheOidcTokenClaims struct {
	Iss         string `json:"iss"`
	Sub         string `json:"sub"`
	Scope       string `json:"scope"`
	Aud         string `json:"aud"`
	Owner       string `json:"owner"`
	OwnerID     string `json:"owner_id"`
	Project     string `json:"project"`
	ProjectID   string `json:"project_id"`
	Environment string `json:"environment"`
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetIss() string {
	if o == nil {
		return ""
	}
	return o.Iss
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetSub() string {
	if o == nil {
		return ""
	}
	return o.Sub
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetScope() string {
	if o == nil {
		return ""
	}
	return o.Scope
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetAud() string {
	if o == nil {
		return ""
	}
	return o.Aud
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetOwner() string {
	if o == nil {
		return ""
	}
	return o.Owner
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetOwnerID() string {
	if o == nil {
		return ""
	}
	return o.OwnerID
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetProject() string {
	if o == nil {
		return ""
	}
	return o.Project
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetProjectID() string {
	if o == nil {
		return ""
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCacheOidcTokenClaims) GetEnvironment() string {
	if o == nil {
		return ""
	}
	return o.Environment
}

type UpdateProjectDataCachePlan string

const (
	UpdateProjectDataCachePlanPro        UpdateProjectDataCachePlan = "pro"
	UpdateProjectDataCachePlanEnterprise UpdateProjectDataCachePlan = "enterprise"
	UpdateProjectDataCachePlanHobby      UpdateProjectDataCachePlan = "hobby"
)

func (e UpdateProjectDataCachePlan) ToPointer() *UpdateProjectDataCachePlan {
	return &e
}
func (e *UpdateProjectDataCachePlan) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pro":
		fallthrough
	case "enterprise":
		fallthrough
	case "hobby":
		*e = UpdateProjectDataCachePlan(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCachePlan: %v", v)
	}
}

type UpdateProjectDataCacheReadyState string

const (
	UpdateProjectDataCacheReadyStateBuilding     UpdateProjectDataCacheReadyState = "BUILDING"
	UpdateProjectDataCacheReadyStateError        UpdateProjectDataCacheReadyState = "ERROR"
	UpdateProjectDataCacheReadyStateInitializing UpdateProjectDataCacheReadyState = "INITIALIZING"
	UpdateProjectDataCacheReadyStateQueued       UpdateProjectDataCacheReadyState = "QUEUED"
	UpdateProjectDataCacheReadyStateReady        UpdateProjectDataCacheReadyState = "READY"
	UpdateProjectDataCacheReadyStateCanceled     UpdateProjectDataCacheReadyState = "CANCELED"
)

func (e UpdateProjectDataCacheReadyState) ToPointer() *UpdateProjectDataCacheReadyState {
	return &e
}
func (e *UpdateProjectDataCacheReadyState) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "BUILDING":
		fallthrough
	case "ERROR":
		fallthrough
	case "INITIALIZING":
		fallthrough
	case "QUEUED":
		fallthrough
	case "READY":
		fallthrough
	case "CANCELED":
		*e = UpdateProjectDataCacheReadyState(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheReadyState: %v", v)
	}
}

type UpdateProjectDataCacheReadySubstate string

const (
	UpdateProjectDataCacheReadySubstateStaged   UpdateProjectDataCacheReadySubstate = "STAGED"
	UpdateProjectDataCacheReadySubstateRolling  UpdateProjectDataCacheReadySubstate = "ROLLING"
	UpdateProjectDataCacheReadySubstatePromoted UpdateProjectDataCacheReadySubstate = "PROMOTED"
)

func (e UpdateProjectDataCacheReadySubstate) ToPointer() *UpdateProjectDataCacheReadySubstate {
	return &e
}
func (e *UpdateProjectDataCacheReadySubstate) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "STAGED":
		fallthrough
	case "ROLLING":
		fallthrough
	case "PROMOTED":
		*e = UpdateProjectDataCacheReadySubstate(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheReadySubstate: %v", v)
	}
}

type UpdateProjectDataCacheTypeLambdas string

const (
	UpdateProjectDataCacheTypeLambdasLambdas UpdateProjectDataCacheTypeLambdas = "LAMBDAS"
)

func (e UpdateProjectDataCacheTypeLambdas) ToPointer() *UpdateProjectDataCacheTypeLambdas {
	return &e
}
func (e *UpdateProjectDataCacheTypeLambdas) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "LAMBDAS":
		*e = UpdateProjectDataCacheTypeLambdas(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTypeLambdas: %v", v)
	}
}

type UpdateProjectDataCacheTargets struct {
	ID                     string                                      `json:"id"`
	Alias                  []string                                    `json:"alias,omitempty"`
	AliasAssigned          *UpdateProjectDataCacheAliasAssigned        `json:"aliasAssigned,omitempty"`
	AliasError             *UpdateProjectDataCacheAliasError           `json:"aliasError,omitempty"`
	AliasFinal             *string                                     `json:"aliasFinal,omitempty"`
	AutomaticAliases       []string                                    `json:"automaticAliases,omitempty"`
	BranchMatcher          *UpdateProjectDataCacheBranchMatcherLambdas `json:"branchMatcher,omitempty"`
	BuildingAt             *float64                                    `json:"buildingAt,omitempty"`
	Builds                 []UpdateProjectDataCacheBuild               `json:"builds,omitempty"`
	ChecksConclusion       *UpdateProjectDataCacheChecksConclusion     `json:"checksConclusion,omitempty"`
	ChecksState            *UpdateProjectDataCacheChecksState          `json:"checksState,omitempty"`
	ConnectBuildsEnabled   *bool                                       `json:"connectBuildsEnabled,omitempty"`
	ConnectConfigurationID *string                                     `json:"connectConfigurationId,omitempty"`
	CreatedAt              float64                                     `json:"createdAt"`
	CreatedIn              string                                      `json:"createdIn"`
	Creator                *UpdateProjectDataCacheCreator              `json:"creator"`
	DeletedAt              *float64                                    `json:"deletedAt,omitempty"`
	DeploymentHostname     string                                      `json:"deploymentHostname"`
	Forced                 *bool                                       `json:"forced,omitempty"`
	Name                   string                                      `json:"name"`
	Meta                   map[string]string                           `json:"meta,omitempty"`
	MonorepoManager        *string                                     `json:"monorepoManager,omitempty"`
	OidcTokenClaims        *UpdateProjectDataCacheOidcTokenClaims      `json:"oidcTokenClaims,omitempty"`
	Plan                   UpdateProjectDataCachePlan                  `json:"plan"`
	// Whether or not preview comments are enabled for the deployment
	PreviewCommentsEnabled *bool                                `json:"previewCommentsEnabled,omitempty"`
	Private                bool                                 `json:"private"`
	ReadyAt                *float64                             `json:"readyAt,omitempty"`
	ReadyState             UpdateProjectDataCacheReadyState     `json:"readyState"`
	ReadySubstate          *UpdateProjectDataCacheReadySubstate `json:"readySubstate,omitempty"`
	RequestedAt            *float64                             `json:"requestedAt,omitempty"`
	Target                 *string                              `json:"target,omitempty"`
	TeamID                 *string                              `json:"teamId,omitempty"`
	Type                   UpdateProjectDataCacheTypeLambdas    `json:"type"`
	URL                    string                               `json:"url"`
	UserID                 string                               `json:"userId"`
	WithCache              *bool                                `json:"withCache,omitempty"`
}

func (o *UpdateProjectDataCacheTargets) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheTargets) GetAlias() []string {
	if o == nil {
		return nil
	}
	return o.Alias
}

func (o *UpdateProjectDataCacheTargets) GetAliasAssigned() *UpdateProjectDataCacheAliasAssigned {
	if o == nil {
		return nil
	}
	return o.AliasAssigned
}

func (o *UpdateProjectDataCacheTargets) GetAliasError() *UpdateProjectDataCacheAliasError {
	if o == nil {
		return nil
	}
	return o.AliasError
}

func (o *UpdateProjectDataCacheTargets) GetAliasFinal() *string {
	if o == nil {
		return nil
	}
	return o.AliasFinal
}

func (o *UpdateProjectDataCacheTargets) GetAutomaticAliases() []string {
	if o == nil {
		return nil
	}
	return o.AutomaticAliases
}

func (o *UpdateProjectDataCacheTargets) GetBranchMatcher() *UpdateProjectDataCacheBranchMatcherLambdas {
	if o == nil {
		return nil
	}
	return o.BranchMatcher
}

func (o *UpdateProjectDataCacheTargets) GetBuildingAt() *float64 {
	if o == nil {
		return nil
	}
	return o.BuildingAt
}

func (o *UpdateProjectDataCacheTargets) GetBuilds() []UpdateProjectDataCacheBuild {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateProjectDataCacheTargets) GetChecksConclusion() *UpdateProjectDataCacheChecksConclusion {
	if o == nil {
		return nil
	}
	return o.ChecksConclusion
}

func (o *UpdateProjectDataCacheTargets) GetChecksState() *UpdateProjectDataCacheChecksState {
	if o == nil {
		return nil
	}
	return o.ChecksState
}

func (o *UpdateProjectDataCacheTargets) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCacheTargets) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheTargets) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheTargets) GetCreatedIn() string {
	if o == nil {
		return ""
	}
	return o.CreatedIn
}

func (o *UpdateProjectDataCacheTargets) GetCreator() *UpdateProjectDataCacheCreator {
	if o == nil {
		return nil
	}
	return o.Creator
}

func (o *UpdateProjectDataCacheTargets) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *UpdateProjectDataCacheTargets) GetDeploymentHostname() string {
	if o == nil {
		return ""
	}
	return o.DeploymentHostname
}

func (o *UpdateProjectDataCacheTargets) GetForced() *bool {
	if o == nil {
		return nil
	}
	return o.Forced
}

func (o *UpdateProjectDataCacheTargets) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheTargets) GetMeta() map[string]string {
	if o == nil {
		return nil
	}
	return o.Meta
}

func (o *UpdateProjectDataCacheTargets) GetMonorepoManager() *string {
	if o == nil {
		return nil
	}
	return o.MonorepoManager
}

func (o *UpdateProjectDataCacheTargets) GetOidcTokenClaims() *UpdateProjectDataCacheOidcTokenClaims {
	if o == nil {
		return nil
	}
	return o.OidcTokenClaims
}

func (o *UpdateProjectDataCacheTargets) GetPlan() UpdateProjectDataCachePlan {
	if o == nil {
		return UpdateProjectDataCachePlan("")
	}
	return o.Plan
}

func (o *UpdateProjectDataCacheTargets) GetPreviewCommentsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.PreviewCommentsEnabled
}

func (o *UpdateProjectDataCacheTargets) GetPrivate() bool {
	if o == nil {
		return false
	}
	return o.Private
}

func (o *UpdateProjectDataCacheTargets) GetReadyAt() *float64 {
	if o == nil {
		return nil
	}
	return o.ReadyAt
}

func (o *UpdateProjectDataCacheTargets) GetReadyState() UpdateProjectDataCacheReadyState {
	if o == nil {
		return UpdateProjectDataCacheReadyState("")
	}
	return o.ReadyState
}

func (o *UpdateProjectDataCacheTargets) GetReadySubstate() *UpdateProjectDataCacheReadySubstate {
	if o == nil {
		return nil
	}
	return o.ReadySubstate
}

func (o *UpdateProjectDataCacheTargets) GetRequestedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCacheTargets) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateProjectDataCacheTargets) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectDataCacheTargets) GetType() UpdateProjectDataCacheTypeLambdas {
	if o == nil {
		return UpdateProjectDataCacheTypeLambdas("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheTargets) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *UpdateProjectDataCacheTargets) GetUserID() string {
	if o == nil {
		return ""
	}
	return o.UserID
}

func (o *UpdateProjectDataCacheTargets) GetWithCache() *bool {
	if o == nil {
		return nil
	}
	return o.WithCache
}

type UpdateProjectDataCachePermissions struct {
	User                                     []components.ACLAction `json:"user,omitempty"`
	UserConnection                           []components.ACLAction `json:"userConnection,omitempty"`
	UserSudo                                 []components.ACLAction `json:"userSudo,omitempty"`
	WebAuthn                                 []components.ACLAction `json:"webAuthn,omitempty"`
	Oauth2Connection                         []components.ACLAction `json:"oauth2Connection,omitempty"`
	AccessGroup                              []components.ACLAction `json:"accessGroup,omitempty"`
	AliasGlobal                              []components.ACLAction `json:"aliasGlobal,omitempty"`
	AnalyticsSampling                        []components.ACLAction `json:"analyticsSampling,omitempty"`
	AnalyticsUsage                           []components.ACLAction `json:"analyticsUsage,omitempty"`
	AuditLog                                 []components.ACLAction `json:"auditLog,omitempty"`
	BillingAddress                           []components.ACLAction `json:"billingAddress,omitempty"`
	BillingInformation                       []components.ACLAction `json:"billingInformation,omitempty"`
	BillingInvoice                           []components.ACLAction `json:"billingInvoice,omitempty"`
	BillingInvoiceEmailRecipient             []components.ACLAction `json:"billingInvoiceEmailRecipient,omitempty"`
	BillingInvoiceLanguage                   []components.ACLAction `json:"billingInvoiceLanguage,omitempty"`
	BillingPlan                              []components.ACLAction `json:"billingPlan,omitempty"`
	BillingPurchaseOrder                     []components.ACLAction `json:"billingPurchaseOrder,omitempty"`
	BillingTaxID                             []components.ACLAction `json:"billingTaxId,omitempty"`
	Blob                                     []components.ACLAction `json:"blob,omitempty"`
	Budget                                   []components.ACLAction `json:"budget,omitempty"`
	CacheArtifact                            []components.ACLAction `json:"cacheArtifact,omitempty"`
	CacheArtifactUsageEvent                  []components.ACLAction `json:"cacheArtifactUsageEvent,omitempty"`
	CodeChecks                               []components.ACLAction `json:"codeChecks,omitempty"`
	ConcurrentBuilds                         []components.ACLAction `json:"concurrentBuilds,omitempty"`
	Connect                                  []components.ACLAction `json:"connect,omitempty"`
	ConnectConfiguration                     []components.ACLAction `json:"connectConfiguration,omitempty"`
	Domain                                   []components.ACLAction `json:"domain,omitempty"`
	DomainAcceptDelegation                   []components.ACLAction `json:"domainAcceptDelegation,omitempty"`
	DomainAuthCodes                          []components.ACLAction `json:"domainAuthCodes,omitempty"`
	DomainCertificate                        []components.ACLAction `json:"domainCertificate,omitempty"`
	DomainCheckConfig                        []components.ACLAction `json:"domainCheckConfig,omitempty"`
	DomainMove                               []components.ACLAction `json:"domainMove,omitempty"`
	DomainPurchase                           []components.ACLAction `json:"domainPurchase,omitempty"`
	DomainRecord                             []components.ACLAction `json:"domainRecord,omitempty"`
	DomainTransferIn                         []components.ACLAction `json:"domainTransferIn,omitempty"`
	Event                                    []components.ACLAction `json:"event,omitempty"`
	OwnEvent                                 []components.ACLAction `json:"ownEvent,omitempty"`
	SensitiveEnvironmentVariablePolicy       []components.ACLAction `json:"sensitiveEnvironmentVariablePolicy,omitempty"`
	FileUpload                               []components.ACLAction `json:"fileUpload,omitempty"`
	FlagsExplorerSubscription                []components.ACLAction `json:"flagsExplorerSubscription,omitempty"`
	GitRepository                            []components.ACLAction `json:"gitRepository,omitempty"`
	IPBlocking                               []components.ACLAction `json:"ipBlocking,omitempty"`
	ImageOptimizationNewPrice                []components.ACLAction `json:"imageOptimizationNewPrice,omitempty"`
	Integration                              []components.ACLAction `json:"integration,omitempty"`
	IntegrationAccount                       []components.ACLAction `json:"integrationAccount,omitempty"`
	IntegrationConfiguration                 []components.ACLAction `json:"integrationConfiguration,omitempty"`
	IntegrationConfigurationTransfer         []components.ACLAction `json:"integrationConfigurationTransfer,omitempty"`
	IntegrationConfigurationProjects         []components.ACLAction `json:"integrationConfigurationProjects,omitempty"`
	IntegrationVercelConfigurationOverride   []components.ACLAction `json:"integrationVercelConfigurationOverride,omitempty"`
	IntegrationConfigurationRole             []components.ACLAction `json:"integrationConfigurationRole,omitempty"`
	IntegrationSSOSession                    []components.ACLAction `json:"integrationSSOSession,omitempty"`
	IntegrationResource                      []components.ACLAction `json:"integrationResource,omitempty"`
	IntegrationEvent                         []components.ACLAction `json:"integrationEvent,omitempty"`
	IntegrationResourceSecrets               []components.ACLAction `json:"integrationResourceSecrets,omitempty"`
	IntegrationDeploymentAction              []components.ACLAction `json:"integrationDeploymentAction,omitempty"`
	MarketplaceInstallationMember            []components.ACLAction `json:"marketplaceInstallationMember,omitempty"`
	MarketplaceBillingData                   []components.ACLAction `json:"marketplaceBillingData,omitempty"`
	MarketplaceInvoice                       []components.ACLAction `json:"marketplaceInvoice,omitempty"`
	MarketplaceExperimentationItem           []components.ACLAction `json:"marketplaceExperimentationItem,omitempty"`
	MarketplaceExperimentationEdgeConfigData []components.ACLAction `json:"marketplaceExperimentationEdgeConfigData,omitempty"`
	JobGlobal                                []components.ACLAction `json:"jobGlobal,omitempty"`
	Drain                                    []components.ACLAction `json:"drain,omitempty"`
	LogDrain                                 []components.ACLAction `json:"logDrain,omitempty"`
	Monitoring                               []components.ACLAction `json:"Monitoring,omitempty"`
	MonitoringSettings                       []components.ACLAction `json:"monitoringSettings,omitempty"`
	MonitoringQuery                          []components.ACLAction `json:"monitoringQuery,omitempty"`
	MonitoringChart                          []components.ACLAction `json:"monitoringChart,omitempty"`
	MonitoringAlert                          []components.ACLAction `json:"monitoringAlert,omitempty"`
	NotificationDeploymentFailed             []components.ACLAction `json:"notificationDeploymentFailed,omitempty"`
	NotificationDomainConfiguration          []components.ACLAction `json:"notificationDomainConfiguration,omitempty"`
	NotificationDomainExpire                 []components.ACLAction `json:"notificationDomainExpire,omitempty"`
	NotificationDomainMoved                  []components.ACLAction `json:"notificationDomainMoved,omitempty"`
	NotificationDomainPurchase               []components.ACLAction `json:"notificationDomainPurchase,omitempty"`
	NotificationDomainRenewal                []components.ACLAction `json:"notificationDomainRenewal,omitempty"`
	NotificationDomainTransfer               []components.ACLAction `json:"notificationDomainTransfer,omitempty"`
	NotificationDomainUnverified             []components.ACLAction `json:"notificationDomainUnverified,omitempty"`
	NotificationMonitoringAlert              []components.ACLAction `json:"NotificationMonitoringAlert,omitempty"`
	NotificationPaymentFailed                []components.ACLAction `json:"notificationPaymentFailed,omitempty"`
	NotificationUsageAlert                   []components.ACLAction `json:"notificationUsageAlert,omitempty"`
	NotificationCustomerBudget               []components.ACLAction `json:"notificationCustomerBudget,omitempty"`
	NotificationStatementOfReasons           []components.ACLAction `json:"notificationStatementOfReasons,omitempty"`
	ObservabilityConfiguration               []components.ACLAction `json:"observabilityConfiguration,omitempty"`
	ObservabilityNotebook                    []components.ACLAction `json:"observabilityNotebook,omitempty"`
	OpenTelemetryEndpoint                    []components.ACLAction `json:"openTelemetryEndpoint,omitempty"`
	VercelAppInstallation                    []components.ACLAction `json:"vercelAppInstallation,omitempty"`
	PaymentMethod                            []components.ACLAction `json:"paymentMethod,omitempty"`
	Permissions                              []components.ACLAction `json:"permissions,omitempty"`
	Postgres                                 []components.ACLAction `json:"postgres,omitempty"`
	PreviewDeploymentSuffix                  []components.ACLAction `json:"previewDeploymentSuffix,omitempty"`
	ProTrialOnboarding                       []components.ACLAction `json:"proTrialOnboarding,omitempty"`
	SharedEnvVars                            []components.ACLAction `json:"sharedEnvVars,omitempty"`
	SharedEnvVarsProduction                  []components.ACLAction `json:"sharedEnvVarsProduction,omitempty"`
	Space                                    []components.ACLAction `json:"space,omitempty"`
	SpaceRun                                 []components.ACLAction `json:"spaceRun,omitempty"`
	PasswordProtectionInvoiceItem            []components.ACLAction `json:"passwordProtectionInvoiceItem,omitempty"`
	RateLimit                                []components.ACLAction `json:"rateLimit,omitempty"`
	Redis                                    []components.ACLAction `json:"redis,omitempty"`
	Repository                               []components.ACLAction `json:"repository,omitempty"`
	RemoteCaching                            []components.ACLAction `json:"remoteCaching,omitempty"`
	SamlConfig                               []components.ACLAction `json:"samlConfig,omitempty"`
	Secret                                   []components.ACLAction `json:"secret,omitempty"`
	RedisStoreTokenSet                       []components.ACLAction `json:"redisStoreTokenSet,omitempty"`
	BlobStoreTokenSet                        []components.ACLAction `json:"blobStoreTokenSet,omitempty"`
	PostgresStoreTokenSet                    []components.ACLAction `json:"postgresStoreTokenSet,omitempty"`
	IntegrationStoreTokenSet                 []components.ACLAction `json:"integrationStoreTokenSet,omitempty"`
	IntegrationResourceReplCommand           []components.ACLAction `json:"integrationResourceReplCommand,omitempty"`
	StoreTransfer                            []components.ACLAction `json:"storeTransfer,omitempty"`
	SupportCase                              []components.ACLAction `json:"supportCase,omitempty"`
	SupportCaseComment                       []components.ACLAction `json:"supportCaseComment,omitempty"`
	DataCacheBillingSettings                 []components.ACLAction `json:"dataCacheBillingSettings,omitempty"`
	Team                                     []components.ACLAction `json:"team,omitempty"`
	TeamAccessRequest                        []components.ACLAction `json:"teamAccessRequest,omitempty"`
	TeamFellowMembership                     []components.ACLAction `json:"teamFellowMembership,omitempty"`
	TeamGitExclusivity                       []components.ACLAction `json:"teamGitExclusivity,omitempty"`
	TeamInvite                               []components.ACLAction `json:"teamInvite,omitempty"`
	TeamInviteCode                           []components.ACLAction `json:"teamInviteCode,omitempty"`
	TeamJoin                                 []components.ACLAction `json:"teamJoin,omitempty"`
	TeamMemberMfaStatus                      []components.ACLAction `json:"teamMemberMfaStatus,omitempty"`
	TeamMicrofrontends                       []components.ACLAction `json:"teamMicrofrontends,omitempty"`
	TeamOwnMembership                        []components.ACLAction `json:"teamOwnMembership,omitempty"`
	TeamOwnMembershipDisconnectSAML          []components.ACLAction `json:"teamOwnMembershipDisconnectSAML,omitempty"`
	Token                                    []components.ACLAction `json:"token,omitempty"`
	Usage                                    []components.ACLAction `json:"usage,omitempty"`
	UsageCycle                               []components.ACLAction `json:"usageCycle,omitempty"`
	VpcPeeringConnection                     []components.ACLAction `json:"vpcPeeringConnection,omitempty"`
	WebAnalyticsPlan                         []components.ACLAction `json:"webAnalyticsPlan,omitempty"`
	EdgeConfig                               []components.ACLAction `json:"edgeConfig,omitempty"`
	EdgeConfigItem                           []components.ACLAction `json:"edgeConfigItem,omitempty"`
	EdgeConfigSchema                         []components.ACLAction `json:"edgeConfigSchema,omitempty"`
	EdgeConfigToken                          []components.ACLAction `json:"edgeConfigToken,omitempty"`
	Webhook                                  []components.ACLAction `json:"webhook,omitempty"`
	WebhookEvent                             []components.ACLAction `json:"webhook-event,omitempty"`
	EndpointVerification                     []components.ACLAction `json:"endpointVerification,omitempty"`
	ProjectTransferIn                        []components.ACLAction `json:"projectTransferIn,omitempty"`
	Oauth2Application                        []components.ACLAction `json:"oauth2Application,omitempty"`
	VercelRun                                []components.ACLAction `json:"vercelRun,omitempty"`
	VercelRunExec                            []components.ACLAction `json:"vercelRunExec,omitempty"`
	APIKey                                   []components.ACLAction `json:"apiKey,omitempty"`
	APIKeyOwnedBySelf                        []components.ACLAction `json:"apiKeyOwnedBySelf,omitempty"`
	AliasProject                             []components.ACLAction `json:"aliasProject,omitempty"`
	AliasProtectionBypass                    []components.ACLAction `json:"aliasProtectionBypass,omitempty"`
	BuildMachine                             []components.ACLAction `json:"buildMachine,omitempty"`
	ProductionAliasProtectionBypass          []components.ACLAction `json:"productionAliasProtectionBypass,omitempty"`
	ConnectConfigurationLink                 []components.ACLAction `json:"connectConfigurationLink,omitempty"`
	DataCacheNamespace                       []components.ACLAction `json:"dataCacheNamespace,omitempty"`
	Deployment                               []components.ACLAction `json:"deployment,omitempty"`
	DeploymentCheck                          []components.ACLAction `json:"deploymentCheck,omitempty"`
	DeploymentCheckPreview                   []components.ACLAction `json:"deploymentCheckPreview,omitempty"`
	DeploymentCheckReRunFromProductionBranch []components.ACLAction `json:"deploymentCheckReRunFromProductionBranch,omitempty"`
	DeploymentProductionGit                  []components.ACLAction `json:"deploymentProductionGit,omitempty"`
	DeploymentV0                             []components.ACLAction `json:"deploymentV0,omitempty"`
	DeploymentPreview                        []components.ACLAction `json:"deploymentPreview,omitempty"`
	DeploymentPrivate                        []components.ACLAction `json:"deploymentPrivate,omitempty"`
	DeploymentPromote                        []components.ACLAction `json:"deploymentPromote,omitempty"`
	DeploymentRollback                       []components.ACLAction `json:"deploymentRollback,omitempty"`
	EdgeCacheNamespace                       []components.ACLAction `json:"edgeCacheNamespace,omitempty"`
	Environments                             []components.ACLAction `json:"environments,omitempty"`
	Logs                                     []components.ACLAction `json:"logs,omitempty"`
	LogsPreset                               []components.ACLAction `json:"logsPreset,omitempty"`
	PasswordProtection                       []components.ACLAction `json:"passwordProtection,omitempty"`
	OptionsAllowlist                         []components.ACLAction `json:"optionsAllowlist,omitempty"`
	Job                                      []components.ACLAction `json:"job,omitempty"`
	ObservabilityData                        []components.ACLAction `json:"observabilityData,omitempty"`
	OnDemandBuild                            []components.ACLAction `json:"onDemandBuild,omitempty"`
	OnDemandConcurrency                      []components.ACLAction `json:"onDemandConcurrency,omitempty"`
	Project                                  []components.ACLAction `json:"project,omitempty"`
	ProjectFromV0                            []components.ACLAction `json:"projectFromV0,omitempty"`
	ProjectAccessGroup                       []components.ACLAction `json:"projectAccessGroup,omitempty"`
	ProjectAnalyticsSampling                 []components.ACLAction `json:"projectAnalyticsSampling,omitempty"`
	ProjectCheck                             []components.ACLAction `json:"projectCheck,omitempty"`
	ProjectCheckRun                          []components.ACLAction `json:"projectCheckRun,omitempty"`
	ProjectDeploymentHook                    []components.ACLAction `json:"projectDeploymentHook,omitempty"`
	ProjectDomain                            []components.ACLAction `json:"projectDomain,omitempty"`
	ProjectDomainMove                        []components.ACLAction `json:"projectDomainMove,omitempty"`
	ProjectDomainCheckConfig                 []components.ACLAction `json:"projectDomainCheckConfig,omitempty"`
	ProjectEnvVars                           []components.ACLAction `json:"projectEnvVars,omitempty"`
	ProjectEnvVarsProduction                 []components.ACLAction `json:"projectEnvVarsProduction,omitempty"`
	ProjectEnvVarsUnownedByIntegration       []components.ACLAction `json:"projectEnvVarsUnownedByIntegration,omitempty"`
	ProjectFlags                             []components.ACLAction `json:"projectFlags,omitempty"`
	ProjectID                                []components.ACLAction `json:"projectId,omitempty"`
	ProjectIntegrationConfiguration          []components.ACLAction `json:"projectIntegrationConfiguration,omitempty"`
	ProjectLink                              []components.ACLAction `json:"projectLink,omitempty"`
	ProjectMember                            []components.ACLAction `json:"projectMember,omitempty"`
	ProjectMonitoring                        []components.ACLAction `json:"projectMonitoring,omitempty"`
	ProjectPermissions                       []components.ACLAction `json:"projectPermissions,omitempty"`
	ProjectProductionBranch                  []components.ACLAction `json:"projectProductionBranch,omitempty"`
	ProjectTransfer                          []components.ACLAction `json:"projectTransfer,omitempty"`
	ProjectTransferOut                       []components.ACLAction `json:"projectTransferOut,omitempty"`
	ProjectProtectionBypass                  []components.ACLAction `json:"projectProtectionBypass,omitempty"`
	ProjectUsage                             []components.ACLAction `json:"projectUsage,omitempty"`
	ProjectAnalyticsUsage                    []components.ACLAction `json:"projectAnalyticsUsage,omitempty"`
	ProjectSupportCase                       []components.ACLAction `json:"projectSupportCase,omitempty"`
	ProjectSupportCaseComment                []components.ACLAction `json:"projectSupportCaseComment,omitempty"`
	ProjectDeploymentExpiration              []components.ACLAction `json:"projectDeploymentExpiration,omitempty"`
	ProjectRollingRelease                    []components.ACLAction `json:"projectRollingRelease,omitempty"`
	ProjectTier                              []components.ACLAction `json:"projectTier,omitempty"`
	SeawallConfig                            []components.ACLAction `json:"seawallConfig,omitempty"`
	SkewProtection                           []components.ACLAction `json:"skewProtection,omitempty"`
	Analytics                                []components.ACLAction `json:"analytics,omitempty"`
	TrustedIps                               []components.ACLAction `json:"trustedIps,omitempty"`
	WebAnalytics                             []components.ACLAction `json:"webAnalytics,omitempty"`
	SharedEnvVarConnection                   []components.ACLAction `json:"sharedEnvVarConnection,omitempty"`
	Sonar                                    []components.ACLAction `json:"sonar,omitempty"`
}

func (o *UpdateProjectDataCachePermissions) GetUser() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.User
}

func (o *UpdateProjectDataCachePermissions) GetUserConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserConnection
}

func (o *UpdateProjectDataCachePermissions) GetUserSudo() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UserSudo
}

func (o *UpdateProjectDataCachePermissions) GetWebAuthn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAuthn
}

func (o *UpdateProjectDataCachePermissions) GetOauth2Connection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Connection
}

func (o *UpdateProjectDataCachePermissions) GetAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AccessGroup
}

func (o *UpdateProjectDataCachePermissions) GetAliasGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasGlobal
}

func (o *UpdateProjectDataCachePermissions) GetAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsSampling
}

func (o *UpdateProjectDataCachePermissions) GetAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AnalyticsUsage
}

func (o *UpdateProjectDataCachePermissions) GetAuditLog() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AuditLog
}

func (o *UpdateProjectDataCachePermissions) GetBillingAddress() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *UpdateProjectDataCachePermissions) GetBillingInformation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInformation
}

func (o *UpdateProjectDataCachePermissions) GetBillingInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoice
}

func (o *UpdateProjectDataCachePermissions) GetBillingInvoiceEmailRecipient() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceEmailRecipient
}

func (o *UpdateProjectDataCachePermissions) GetBillingInvoiceLanguage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingInvoiceLanguage
}

func (o *UpdateProjectDataCachePermissions) GetBillingPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateProjectDataCachePermissions) GetBillingPurchaseOrder() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingPurchaseOrder
}

func (o *UpdateProjectDataCachePermissions) GetBillingTaxID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BillingTaxID
}

func (o *UpdateProjectDataCachePermissions) GetBlob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Blob
}

func (o *UpdateProjectDataCachePermissions) GetBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Budget
}

func (o *UpdateProjectDataCachePermissions) GetCacheArtifact() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifact
}

func (o *UpdateProjectDataCachePermissions) GetCacheArtifactUsageEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CacheArtifactUsageEvent
}

func (o *UpdateProjectDataCachePermissions) GetCodeChecks() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.CodeChecks
}

func (o *UpdateProjectDataCachePermissions) GetConcurrentBuilds() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConcurrentBuilds
}

func (o *UpdateProjectDataCachePermissions) GetConnect() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Connect
}

func (o *UpdateProjectDataCachePermissions) GetConnectConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Domain
}

func (o *UpdateProjectDataCachePermissions) GetDomainAcceptDelegation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAcceptDelegation
}

func (o *UpdateProjectDataCachePermissions) GetDomainAuthCodes() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainAuthCodes
}

func (o *UpdateProjectDataCachePermissions) GetDomainCertificate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCertificate
}

func (o *UpdateProjectDataCachePermissions) GetDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainCheckConfig
}

func (o *UpdateProjectDataCachePermissions) GetDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainMove
}

func (o *UpdateProjectDataCachePermissions) GetDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainPurchase
}

func (o *UpdateProjectDataCachePermissions) GetDomainRecord() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainRecord
}

func (o *UpdateProjectDataCachePermissions) GetDomainTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DomainTransferIn
}

func (o *UpdateProjectDataCachePermissions) GetEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Event
}

func (o *UpdateProjectDataCachePermissions) GetOwnEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OwnEvent
}

func (o *UpdateProjectDataCachePermissions) GetSensitiveEnvironmentVariablePolicy() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SensitiveEnvironmentVariablePolicy
}

func (o *UpdateProjectDataCachePermissions) GetFileUpload() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FileUpload
}

func (o *UpdateProjectDataCachePermissions) GetFlagsExplorerSubscription() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.FlagsExplorerSubscription
}

func (o *UpdateProjectDataCachePermissions) GetGitRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.GitRepository
}

func (o *UpdateProjectDataCachePermissions) GetIPBlocking() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IPBlocking
}

func (o *UpdateProjectDataCachePermissions) GetImageOptimizationNewPrice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ImageOptimizationNewPrice
}

func (o *UpdateProjectDataCachePermissions) GetIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Integration
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationAccount() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationAccount
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfigurationTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationTransfer
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfigurationProjects() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationProjects
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationVercelConfigurationOverride() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationVercelConfigurationOverride
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationConfigurationRole() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationConfigurationRole
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationSSOSession() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationSSOSession
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationResource() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResource
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationEvent
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationResourceSecrets() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceSecrets
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationDeploymentAction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationDeploymentAction
}

func (o *UpdateProjectDataCachePermissions) GetMarketplaceInstallationMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInstallationMember
}

func (o *UpdateProjectDataCachePermissions) GetMarketplaceBillingData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceBillingData
}

func (o *UpdateProjectDataCachePermissions) GetMarketplaceInvoice() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceInvoice
}

func (o *UpdateProjectDataCachePermissions) GetMarketplaceExperimentationItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationItem
}

func (o *UpdateProjectDataCachePermissions) GetMarketplaceExperimentationEdgeConfigData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MarketplaceExperimentationEdgeConfigData
}

func (o *UpdateProjectDataCachePermissions) GetJobGlobal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.JobGlobal
}

func (o *UpdateProjectDataCachePermissions) GetDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Drain
}

func (o *UpdateProjectDataCachePermissions) GetLogDrain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogDrain
}

func (o *UpdateProjectDataCachePermissions) GetMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Monitoring
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringSettings
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringQuery() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringQuery
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringChart() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringChart
}

func (o *UpdateProjectDataCachePermissions) GetMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.MonitoringAlert
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDeploymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDeploymentFailed
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainExpire() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainExpire
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainMoved() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainMoved
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainPurchase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainPurchase
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainRenewal() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainRenewal
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainTransfer
}

func (o *UpdateProjectDataCachePermissions) GetNotificationDomainUnverified() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationDomainUnverified
}

func (o *UpdateProjectDataCachePermissions) GetNotificationMonitoringAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationMonitoringAlert
}

func (o *UpdateProjectDataCachePermissions) GetNotificationPaymentFailed() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationPaymentFailed
}

func (o *UpdateProjectDataCachePermissions) GetNotificationUsageAlert() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationUsageAlert
}

func (o *UpdateProjectDataCachePermissions) GetNotificationCustomerBudget() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationCustomerBudget
}

func (o *UpdateProjectDataCachePermissions) GetNotificationStatementOfReasons() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.NotificationStatementOfReasons
}

func (o *UpdateProjectDataCachePermissions) GetObservabilityConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetObservabilityNotebook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityNotebook
}

func (o *UpdateProjectDataCachePermissions) GetOpenTelemetryEndpoint() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OpenTelemetryEndpoint
}

func (o *UpdateProjectDataCachePermissions) GetVercelAppInstallation() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelAppInstallation
}

func (o *UpdateProjectDataCachePermissions) GetPaymentMethod() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PaymentMethod
}

func (o *UpdateProjectDataCachePermissions) GetPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCachePermissions) GetPostgres() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Postgres
}

func (o *UpdateProjectDataCachePermissions) GetPreviewDeploymentSuffix() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PreviewDeploymentSuffix
}

func (o *UpdateProjectDataCachePermissions) GetProTrialOnboarding() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProTrialOnboarding
}

func (o *UpdateProjectDataCachePermissions) GetSharedEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVars
}

func (o *UpdateProjectDataCachePermissions) GetSharedEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarsProduction
}

func (o *UpdateProjectDataCachePermissions) GetSpace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Space
}

func (o *UpdateProjectDataCachePermissions) GetSpaceRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SpaceRun
}

func (o *UpdateProjectDataCachePermissions) GetPasswordProtectionInvoiceItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtectionInvoiceItem
}

func (o *UpdateProjectDataCachePermissions) GetRateLimit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RateLimit
}

func (o *UpdateProjectDataCachePermissions) GetRedis() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Redis
}

func (o *UpdateProjectDataCachePermissions) GetRepository() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Repository
}

func (o *UpdateProjectDataCachePermissions) GetRemoteCaching() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RemoteCaching
}

func (o *UpdateProjectDataCachePermissions) GetSamlConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SamlConfig
}

func (o *UpdateProjectDataCachePermissions) GetSecret() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Secret
}

func (o *UpdateProjectDataCachePermissions) GetRedisStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.RedisStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetBlobStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BlobStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetPostgresStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PostgresStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationStoreTokenSet() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationStoreTokenSet
}

func (o *UpdateProjectDataCachePermissions) GetIntegrationResourceReplCommand() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.IntegrationResourceReplCommand
}

func (o *UpdateProjectDataCachePermissions) GetStoreTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.StoreTransfer
}

func (o *UpdateProjectDataCachePermissions) GetSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCase
}

func (o *UpdateProjectDataCachePermissions) GetSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SupportCaseComment
}

func (o *UpdateProjectDataCachePermissions) GetDataCacheBillingSettings() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheBillingSettings
}

func (o *UpdateProjectDataCachePermissions) GetTeam() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Team
}

func (o *UpdateProjectDataCachePermissions) GetTeamAccessRequest() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamAccessRequest
}

func (o *UpdateProjectDataCachePermissions) GetTeamFellowMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamFellowMembership
}

func (o *UpdateProjectDataCachePermissions) GetTeamGitExclusivity() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamGitExclusivity
}

func (o *UpdateProjectDataCachePermissions) GetTeamInvite() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInvite
}

func (o *UpdateProjectDataCachePermissions) GetTeamInviteCode() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamInviteCode
}

func (o *UpdateProjectDataCachePermissions) GetTeamJoin() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamJoin
}

func (o *UpdateProjectDataCachePermissions) GetTeamMemberMfaStatus() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMemberMfaStatus
}

func (o *UpdateProjectDataCachePermissions) GetTeamMicrofrontends() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamMicrofrontends
}

func (o *UpdateProjectDataCachePermissions) GetTeamOwnMembership() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembership
}

func (o *UpdateProjectDataCachePermissions) GetTeamOwnMembershipDisconnectSAML() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TeamOwnMembershipDisconnectSAML
}

func (o *UpdateProjectDataCachePermissions) GetToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Token
}

func (o *UpdateProjectDataCachePermissions) GetUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Usage
}

func (o *UpdateProjectDataCachePermissions) GetUsageCycle() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.UsageCycle
}

func (o *UpdateProjectDataCachePermissions) GetVpcPeeringConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VpcPeeringConnection
}

func (o *UpdateProjectDataCachePermissions) GetWebAnalyticsPlan() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalyticsPlan
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfig
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfigItem() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigItem
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfigSchema() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigSchema
}

func (o *UpdateProjectDataCachePermissions) GetEdgeConfigToken() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeConfigToken
}

func (o *UpdateProjectDataCachePermissions) GetWebhook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Webhook
}

func (o *UpdateProjectDataCachePermissions) GetWebhookEvent() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebhookEvent
}

func (o *UpdateProjectDataCachePermissions) GetEndpointVerification() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EndpointVerification
}

func (o *UpdateProjectDataCachePermissions) GetProjectTransferIn() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferIn
}

func (o *UpdateProjectDataCachePermissions) GetOauth2Application() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Oauth2Application
}

func (o *UpdateProjectDataCachePermissions) GetVercelRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRun
}

func (o *UpdateProjectDataCachePermissions) GetVercelRunExec() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.VercelRunExec
}

func (o *UpdateProjectDataCachePermissions) GetAPIKey() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKey
}

func (o *UpdateProjectDataCachePermissions) GetAPIKeyOwnedBySelf() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.APIKeyOwnedBySelf
}

func (o *UpdateProjectDataCachePermissions) GetAliasProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProject
}

func (o *UpdateProjectDataCachePermissions) GetAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.AliasProtectionBypass
}

func (o *UpdateProjectDataCachePermissions) GetBuildMachine() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.BuildMachine
}

func (o *UpdateProjectDataCachePermissions) GetProductionAliasProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProductionAliasProtectionBypass
}

func (o *UpdateProjectDataCachePermissions) GetConnectConfigurationLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationLink
}

func (o *UpdateProjectDataCachePermissions) GetDataCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DataCacheNamespace
}

func (o *UpdateProjectDataCachePermissions) GetDeployment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Deployment
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheck
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentCheckPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckPreview
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentCheckReRunFromProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentCheckReRunFromProductionBranch
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentProductionGit() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentProductionGit
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentV0
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentPreview() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPreview
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentPrivate() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPrivate
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentPromote() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentPromote
}

func (o *UpdateProjectDataCachePermissions) GetDeploymentRollback() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.DeploymentRollback
}

func (o *UpdateProjectDataCachePermissions) GetEdgeCacheNamespace() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.EdgeCacheNamespace
}

func (o *UpdateProjectDataCachePermissions) GetEnvironments() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Environments
}

func (o *UpdateProjectDataCachePermissions) GetLogs() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Logs
}

func (o *UpdateProjectDataCachePermissions) GetLogsPreset() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.LogsPreset
}

func (o *UpdateProjectDataCachePermissions) GetPasswordProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCachePermissions) GetOptionsAllowlist() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectDataCachePermissions) GetJob() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Job
}

func (o *UpdateProjectDataCachePermissions) GetObservabilityData() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ObservabilityData
}

func (o *UpdateProjectDataCachePermissions) GetOnDemandBuild() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandBuild
}

func (o *UpdateProjectDataCachePermissions) GetOnDemandConcurrency() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.OnDemandConcurrency
}

func (o *UpdateProjectDataCachePermissions) GetProject() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Project
}

func (o *UpdateProjectDataCachePermissions) GetProjectFromV0() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFromV0
}

func (o *UpdateProjectDataCachePermissions) GetProjectAccessGroup() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAccessGroup
}

func (o *UpdateProjectDataCachePermissions) GetProjectAnalyticsSampling() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsSampling
}

func (o *UpdateProjectDataCachePermissions) GetProjectCheck() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheck
}

func (o *UpdateProjectDataCachePermissions) GetProjectCheckRun() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectCheckRun
}

func (o *UpdateProjectDataCachePermissions) GetProjectDeploymentHook() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentHook
}

func (o *UpdateProjectDataCachePermissions) GetProjectDomain() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomain
}

func (o *UpdateProjectDataCachePermissions) GetProjectDomainMove() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainMove
}

func (o *UpdateProjectDataCachePermissions) GetProjectDomainCheckConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDomainCheckConfig
}

func (o *UpdateProjectDataCachePermissions) GetProjectEnvVars() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVars
}

func (o *UpdateProjectDataCachePermissions) GetProjectEnvVarsProduction() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsProduction
}

func (o *UpdateProjectDataCachePermissions) GetProjectEnvVarsUnownedByIntegration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectEnvVarsUnownedByIntegration
}

func (o *UpdateProjectDataCachePermissions) GetProjectFlags() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectFlags
}

func (o *UpdateProjectDataCachePermissions) GetProjectID() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *UpdateProjectDataCachePermissions) GetProjectIntegrationConfiguration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectIntegrationConfiguration
}

func (o *UpdateProjectDataCachePermissions) GetProjectLink() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectLink
}

func (o *UpdateProjectDataCachePermissions) GetProjectMember() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMember
}

func (o *UpdateProjectDataCachePermissions) GetProjectMonitoring() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectMonitoring
}

func (o *UpdateProjectDataCachePermissions) GetProjectPermissions() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectPermissions
}

func (o *UpdateProjectDataCachePermissions) GetProjectProductionBranch() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProductionBranch
}

func (o *UpdateProjectDataCachePermissions) GetProjectTransfer() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransfer
}

func (o *UpdateProjectDataCachePermissions) GetProjectTransferOut() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTransferOut
}

func (o *UpdateProjectDataCachePermissions) GetProjectProtectionBypass() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectProtectionBypass
}

func (o *UpdateProjectDataCachePermissions) GetProjectUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectUsage
}

func (o *UpdateProjectDataCachePermissions) GetProjectAnalyticsUsage() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectAnalyticsUsage
}

func (o *UpdateProjectDataCachePermissions) GetProjectSupportCase() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCase
}

func (o *UpdateProjectDataCachePermissions) GetProjectSupportCaseComment() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectSupportCaseComment
}

func (o *UpdateProjectDataCachePermissions) GetProjectDeploymentExpiration() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectDeploymentExpiration
}

func (o *UpdateProjectDataCachePermissions) GetProjectRollingRelease() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectRollingRelease
}

func (o *UpdateProjectDataCachePermissions) GetProjectTier() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.ProjectTier
}

func (o *UpdateProjectDataCachePermissions) GetSeawallConfig() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SeawallConfig
}

func (o *UpdateProjectDataCachePermissions) GetSkewProtection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SkewProtection
}

func (o *UpdateProjectDataCachePermissions) GetAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCachePermissions) GetTrustedIps() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCachePermissions) GetWebAnalytics() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectDataCachePermissions) GetSharedEnvVarConnection() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.SharedEnvVarConnection
}

func (o *UpdateProjectDataCachePermissions) GetSonar() []components.ACLAction {
	if o == nil {
		return nil
	}
	return o.Sonar
}

type UpdateProjectDataCacheLastRollbackTarget struct {
}

type UpdateProjectDataCacheJobStatus string

const (
	UpdateProjectDataCacheJobStatusSucceeded  UpdateProjectDataCacheJobStatus = "succeeded"
	UpdateProjectDataCacheJobStatusFailed     UpdateProjectDataCacheJobStatus = "failed"
	UpdateProjectDataCacheJobStatusSkipped    UpdateProjectDataCacheJobStatus = "skipped"
	UpdateProjectDataCacheJobStatusPending    UpdateProjectDataCacheJobStatus = "pending"
	UpdateProjectDataCacheJobStatusInProgress UpdateProjectDataCacheJobStatus = "in-progress"
)

func (e UpdateProjectDataCacheJobStatus) ToPointer() *UpdateProjectDataCacheJobStatus {
	return &e
}
func (e *UpdateProjectDataCacheJobStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "succeeded":
		fallthrough
	case "failed":
		fallthrough
	case "skipped":
		fallthrough
	case "pending":
		fallthrough
	case "in-progress":
		*e = UpdateProjectDataCacheJobStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheJobStatus: %v", v)
	}
}

type UpdateProjectDataCacheLastAliasRequestType string

const (
	UpdateProjectDataCacheLastAliasRequestTypePromote  UpdateProjectDataCacheLastAliasRequestType = "promote"
	UpdateProjectDataCacheLastAliasRequestTypeRollback UpdateProjectDataCacheLastAliasRequestType = "rollback"
)

func (e UpdateProjectDataCacheLastAliasRequestType) ToPointer() *UpdateProjectDataCacheLastAliasRequestType {
	return &e
}
func (e *UpdateProjectDataCacheLastAliasRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "promote":
		fallthrough
	case "rollback":
		*e = UpdateProjectDataCacheLastAliasRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheLastAliasRequestType: %v", v)
	}
}

type UpdateProjectDataCacheLastAliasRequest struct {
	FromDeploymentID string `json:"fromDeploymentId"`
	ToDeploymentID   string `json:"toDeploymentId"`
	// If rolling back from a rolling release, fromDeploymentId captures the "base" of that rolling release, and fromRollingReleaseId captures the "target" of that rolling release.
	FromRollingReleaseID *string                                    `json:"fromRollingReleaseId,omitempty"`
	JobStatus            UpdateProjectDataCacheJobStatus            `json:"jobStatus"`
	RequestedAt          float64                                    `json:"requestedAt"`
	Type                 UpdateProjectDataCacheLastAliasRequestType `json:"type"`
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetFromDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.FromDeploymentID
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetToDeploymentID() string {
	if o == nil {
		return ""
	}
	return o.ToDeploymentID
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetFromRollingReleaseID() *string {
	if o == nil {
		return nil
	}
	return o.FromRollingReleaseID
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetJobStatus() UpdateProjectDataCacheJobStatus {
	if o == nil {
		return UpdateProjectDataCacheJobStatus("")
	}
	return o.JobStatus
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetRequestedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.RequestedAt
}

func (o *UpdateProjectDataCacheLastAliasRequest) GetType() UpdateProjectDataCacheLastAliasRequestType {
	if o == nil {
		return UpdateProjectDataCacheLastAliasRequestType("")
	}
	return o.Type
}

type UpdateProjectDataCacheScopeAutomationBypass string

const (
	UpdateProjectDataCacheScopeAutomationBypassAutomationBypass UpdateProjectDataCacheScopeAutomationBypass = "automation-bypass"
)

func (e UpdateProjectDataCacheScopeAutomationBypass) ToPointer() *UpdateProjectDataCacheScopeAutomationBypass {
	return &e
}
func (e *UpdateProjectDataCacheScopeAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectDataCacheScopeAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheScopeAutomationBypass: %v", v)
	}
}

type UpdateProjectDataCacheProtectionBypassAutomationBypass struct {
	CreatedAt float64                                     `json:"createdAt"`
	CreatedBy string                                      `json:"createdBy"`
	Scope     UpdateProjectDataCacheScopeAutomationBypass `json:"scope"`
}

func (o *UpdateProjectDataCacheProtectionBypassAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheProtectionBypassAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCacheProtectionBypassAutomationBypass) GetScope() UpdateProjectDataCacheScopeAutomationBypass {
	if o == nil {
		return UpdateProjectDataCacheScopeAutomationBypass("")
	}
	return o.Scope
}

type UpdateProjectDataCacheScopeIntegrationAutomationBypass string

const (
	UpdateProjectDataCacheScopeIntegrationAutomationBypassIntegrationAutomationBypass UpdateProjectDataCacheScopeIntegrationAutomationBypass = "integration-automation-bypass"
)

func (e UpdateProjectDataCacheScopeIntegrationAutomationBypass) ToPointer() *UpdateProjectDataCacheScopeIntegrationAutomationBypass {
	return &e
}
func (e *UpdateProjectDataCacheScopeIntegrationAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-automation-bypass":
		*e = UpdateProjectDataCacheScopeIntegrationAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheScopeIntegrationAutomationBypass: %v", v)
	}
}

type UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass struct {
	CreatedAt       float64                                                `json:"createdAt"`
	CreatedBy       string                                                 `json:"createdBy"`
	Scope           UpdateProjectDataCacheScopeIntegrationAutomationBypass `json:"scope"`
	IntegrationID   string                                                 `json:"integrationId"`
	ConfigurationID string                                                 `json:"configurationId"`
}

func (o *UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass) GetScope() UpdateProjectDataCacheScopeIntegrationAutomationBypass {
	if o == nil {
		return UpdateProjectDataCacheScopeIntegrationAutomationBypass("")
	}
	return o.Scope
}

func (o *UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

type UpdateProjectDataCacheProtectionBypassUnionType string

const (
	UpdateProjectDataCacheProtectionBypassUnionTypeUpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass UpdateProjectDataCacheProtectionBypassUnionType = "updateProjectDataCache_protectionBypass_IntegrationAutomationBypass"
	UpdateProjectDataCacheProtectionBypassUnionTypeUpdateProjectDataCacheProtectionBypassAutomationBypass            UpdateProjectDataCacheProtectionBypassUnionType = "updateProjectDataCache_protectionBypass_AutomationBypass"
)

type UpdateProjectDataCacheProtectionBypassUnion struct {
	UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass *UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass `queryParam:"inline"`
	UpdateProjectDataCacheProtectionBypassAutomationBypass            *UpdateProjectDataCacheProtectionBypassAutomationBypass            `queryParam:"inline"`

	Type UpdateProjectDataCacheProtectionBypassUnionType
}

func CreateUpdateProjectDataCacheProtectionBypassUnionUpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass(updateProjectDataCacheProtectionBypassIntegrationAutomationBypass UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass) UpdateProjectDataCacheProtectionBypassUnion {
	typ := UpdateProjectDataCacheProtectionBypassUnionTypeUpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass

	return UpdateProjectDataCacheProtectionBypassUnion{
		UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass: &updateProjectDataCacheProtectionBypassIntegrationAutomationBypass,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheProtectionBypassUnionUpdateProjectDataCacheProtectionBypassAutomationBypass(updateProjectDataCacheProtectionBypassAutomationBypass UpdateProjectDataCacheProtectionBypassAutomationBypass) UpdateProjectDataCacheProtectionBypassUnion {
	typ := UpdateProjectDataCacheProtectionBypassUnionTypeUpdateProjectDataCacheProtectionBypassAutomationBypass

	return UpdateProjectDataCacheProtectionBypassUnion{
		UpdateProjectDataCacheProtectionBypassAutomationBypass: &updateProjectDataCacheProtectionBypassAutomationBypass,
		Type: typ,
	}
}

func (u *UpdateProjectDataCacheProtectionBypassUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheProtectionBypassAutomationBypass UpdateProjectDataCacheProtectionBypassAutomationBypass = UpdateProjectDataCacheProtectionBypassAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProtectionBypassAutomationBypass, "", true, true); err == nil {
		u.UpdateProjectDataCacheProtectionBypassAutomationBypass = &updateProjectDataCacheProtectionBypassAutomationBypass
		u.Type = UpdateProjectDataCacheProtectionBypassUnionTypeUpdateProjectDataCacheProtectionBypassAutomationBypass
		return nil
	}

	var updateProjectDataCacheProtectionBypassIntegrationAutomationBypass UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass = UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheProtectionBypassIntegrationAutomationBypass, "", true, true); err == nil {
		u.UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass = &updateProjectDataCacheProtectionBypassIntegrationAutomationBypass
		u.Type = UpdateProjectDataCacheProtectionBypassUnionTypeUpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheProtectionBypassUnion", string(data))
}

func (u UpdateProjectDataCacheProtectionBypassUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProtectionBypassIntegrationAutomationBypass, "", true)
	}

	if u.UpdateProjectDataCacheProtectionBypassAutomationBypass != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheProtectionBypassAutomationBypass, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheProtectionBypassUnion: all fields are null")
}

type UpdateProjectDataCacheTrustedIpsDeploymentType2 string

const (
	UpdateProjectDataCacheTrustedIpsDeploymentType2Production                       UpdateProjectDataCacheTrustedIpsDeploymentType2 = "production"
	UpdateProjectDataCacheTrustedIpsDeploymentType2Preview                          UpdateProjectDataCacheTrustedIpsDeploymentType2 = "preview"
	UpdateProjectDataCacheTrustedIpsDeploymentType2All                              UpdateProjectDataCacheTrustedIpsDeploymentType2 = "all"
	UpdateProjectDataCacheTrustedIpsDeploymentType2ProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheTrustedIpsDeploymentType2 = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDataCacheTrustedIpsDeploymentType2) ToPointer() *UpdateProjectDataCacheTrustedIpsDeploymentType2 {
	return &e
}
func (e *UpdateProjectDataCacheTrustedIpsDeploymentType2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDataCacheTrustedIpsDeploymentType2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTrustedIpsDeploymentType2: %v", v)
	}
}

type UpdateProjectDataCacheTrustedIps2 struct {
	DeploymentType UpdateProjectDataCacheTrustedIpsDeploymentType2 `json:"deploymentType"`
}

func (o *UpdateProjectDataCacheTrustedIps2) GetDeploymentType() UpdateProjectDataCacheTrustedIpsDeploymentType2 {
	if o == nil {
		return UpdateProjectDataCacheTrustedIpsDeploymentType2("")
	}
	return o.DeploymentType
}

type UpdateProjectDataCacheTrustedIpsDeploymentType1 string

const (
	UpdateProjectDataCacheTrustedIpsDeploymentType1Production                       UpdateProjectDataCacheTrustedIpsDeploymentType1 = "production"
	UpdateProjectDataCacheTrustedIpsDeploymentType1Preview                          UpdateProjectDataCacheTrustedIpsDeploymentType1 = "preview"
	UpdateProjectDataCacheTrustedIpsDeploymentType1All                              UpdateProjectDataCacheTrustedIpsDeploymentType1 = "all"
	UpdateProjectDataCacheTrustedIpsDeploymentType1ProdDeploymentUrlsAndAllPreviews UpdateProjectDataCacheTrustedIpsDeploymentType1 = "prod_deployment_urls_and_all_previews"
)

func (e UpdateProjectDataCacheTrustedIpsDeploymentType1) ToPointer() *UpdateProjectDataCacheTrustedIpsDeploymentType1 {
	return &e
}
func (e *UpdateProjectDataCacheTrustedIpsDeploymentType1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "all":
		fallthrough
	case "prod_deployment_urls_and_all_previews":
		*e = UpdateProjectDataCacheTrustedIpsDeploymentType1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTrustedIpsDeploymentType1: %v", v)
	}
}

type UpdateProjectDataCacheAddress struct {
	Value string  `json:"value"`
	Note  *string `json:"note,omitempty"`
}

func (o *UpdateProjectDataCacheAddress) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateProjectDataCacheAddress) GetNote() *string {
	if o == nil {
		return nil
	}
	return o.Note
}

type UpdateProjectDataCacheProtectionMode string

const (
	UpdateProjectDataCacheProtectionModeAdditional UpdateProjectDataCacheProtectionMode = "additional"
	UpdateProjectDataCacheProtectionModeExclusive  UpdateProjectDataCacheProtectionMode = "exclusive"
)

func (e UpdateProjectDataCacheProtectionMode) ToPointer() *UpdateProjectDataCacheProtectionMode {
	return &e
}
func (e *UpdateProjectDataCacheProtectionMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "additional":
		fallthrough
	case "exclusive":
		*e = UpdateProjectDataCacheProtectionMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheProtectionMode: %v", v)
	}
}

type UpdateProjectDataCacheTrustedIps1 struct {
	DeploymentType UpdateProjectDataCacheTrustedIpsDeploymentType1 `json:"deploymentType"`
	Addresses      []UpdateProjectDataCacheAddress                 `json:"addresses"`
	ProtectionMode UpdateProjectDataCacheProtectionMode            `json:"protectionMode"`
}

func (o *UpdateProjectDataCacheTrustedIps1) GetDeploymentType() UpdateProjectDataCacheTrustedIpsDeploymentType1 {
	if o == nil {
		return UpdateProjectDataCacheTrustedIpsDeploymentType1("")
	}
	return o.DeploymentType
}

func (o *UpdateProjectDataCacheTrustedIps1) GetAddresses() []UpdateProjectDataCacheAddress {
	if o == nil {
		return []UpdateProjectDataCacheAddress{}
	}
	return o.Addresses
}

func (o *UpdateProjectDataCacheTrustedIps1) GetProtectionMode() UpdateProjectDataCacheProtectionMode {
	if o == nil {
		return UpdateProjectDataCacheProtectionMode("")
	}
	return o.ProtectionMode
}

type UpdateProjectDataCacheTrustedIpsUnionType string

const (
	UpdateProjectDataCacheTrustedIpsUnionTypeUpdateProjectDataCacheTrustedIps1 UpdateProjectDataCacheTrustedIpsUnionType = "updateProjectDataCache_trustedIps_1"
	UpdateProjectDataCacheTrustedIpsUnionTypeUpdateProjectDataCacheTrustedIps2 UpdateProjectDataCacheTrustedIpsUnionType = "updateProjectDataCache_trustedIps_2"
)

type UpdateProjectDataCacheTrustedIpsUnion struct {
	UpdateProjectDataCacheTrustedIps1 *UpdateProjectDataCacheTrustedIps1 `queryParam:"inline"`
	UpdateProjectDataCacheTrustedIps2 *UpdateProjectDataCacheTrustedIps2 `queryParam:"inline"`

	Type UpdateProjectDataCacheTrustedIpsUnionType
}

func CreateUpdateProjectDataCacheTrustedIpsUnionUpdateProjectDataCacheTrustedIps1(updateProjectDataCacheTrustedIps1 UpdateProjectDataCacheTrustedIps1) UpdateProjectDataCacheTrustedIpsUnion {
	typ := UpdateProjectDataCacheTrustedIpsUnionTypeUpdateProjectDataCacheTrustedIps1

	return UpdateProjectDataCacheTrustedIpsUnion{
		UpdateProjectDataCacheTrustedIps1: &updateProjectDataCacheTrustedIps1,
		Type:                              typ,
	}
}

func CreateUpdateProjectDataCacheTrustedIpsUnionUpdateProjectDataCacheTrustedIps2(updateProjectDataCacheTrustedIps2 UpdateProjectDataCacheTrustedIps2) UpdateProjectDataCacheTrustedIpsUnion {
	typ := UpdateProjectDataCacheTrustedIpsUnionTypeUpdateProjectDataCacheTrustedIps2

	return UpdateProjectDataCacheTrustedIpsUnion{
		UpdateProjectDataCacheTrustedIps2: &updateProjectDataCacheTrustedIps2,
		Type:                              typ,
	}
}

func (u *UpdateProjectDataCacheTrustedIpsUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheTrustedIps2 UpdateProjectDataCacheTrustedIps2 = UpdateProjectDataCacheTrustedIps2{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheTrustedIps2, "", true, true); err == nil {
		u.UpdateProjectDataCacheTrustedIps2 = &updateProjectDataCacheTrustedIps2
		u.Type = UpdateProjectDataCacheTrustedIpsUnionTypeUpdateProjectDataCacheTrustedIps2
		return nil
	}

	var updateProjectDataCacheTrustedIps1 UpdateProjectDataCacheTrustedIps1 = UpdateProjectDataCacheTrustedIps1{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheTrustedIps1, "", true, true); err == nil {
		u.UpdateProjectDataCacheTrustedIps1 = &updateProjectDataCacheTrustedIps1
		u.Type = UpdateProjectDataCacheTrustedIpsUnionTypeUpdateProjectDataCacheTrustedIps1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheTrustedIpsUnion", string(data))
}

func (u UpdateProjectDataCacheTrustedIpsUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectDataCacheTrustedIps1 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheTrustedIps1, "", true)
	}

	if u.UpdateProjectDataCacheTrustedIps2 != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheTrustedIps2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheTrustedIpsUnion: all fields are null")
}

type UpdateProjectDataCacheGitComments struct {
	// Whether the Vercel bot should comment on PRs
	OnPullRequest bool `json:"onPullRequest"`
	// Whether the Vercel bot should comment on commits
	OnCommit bool `json:"onCommit"`
}

func (o *UpdateProjectDataCacheGitComments) GetOnPullRequest() bool {
	if o == nil {
		return false
	}
	return o.OnPullRequest
}

func (o *UpdateProjectDataCacheGitComments) GetOnCommit() bool {
	if o == nil {
		return false
	}
	return o.OnCommit
}

// UpdateProjectDataCacheCreateDeployments - Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
type UpdateProjectDataCacheCreateDeployments string

const (
	UpdateProjectDataCacheCreateDeploymentsEnabled  UpdateProjectDataCacheCreateDeployments = "enabled"
	UpdateProjectDataCacheCreateDeploymentsDisabled UpdateProjectDataCacheCreateDeployments = "disabled"
)

func (e UpdateProjectDataCacheCreateDeployments) ToPointer() *UpdateProjectDataCacheCreateDeployments {
	return &e
}
func (e *UpdateProjectDataCacheCreateDeployments) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "enabled":
		fallthrough
	case "disabled":
		*e = UpdateProjectDataCacheCreateDeployments(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheCreateDeployments: %v", v)
	}
}

type UpdateProjectDataCacheGitProviderOptions struct {
	// Whether the Vercel bot should automatically create GitHub deployments https://docs.github.com/en/rest/deployments/deployments#about-deployments NOTE: repository-dispatch events should be used instead
	CreateDeployments UpdateProjectDataCacheCreateDeployments `json:"createDeployments"`
}

func (o *UpdateProjectDataCacheGitProviderOptions) GetCreateDeployments() UpdateProjectDataCacheCreateDeployments {
	if o == nil {
		return UpdateProjectDataCacheCreateDeployments("")
	}
	return o.CreateDeployments
}

type UpdateProjectDataCacheWebAnalytics struct {
	ID         string   `json:"id"`
	DisabledAt *float64 `json:"disabledAt,omitempty"`
	CanceledAt *float64 `json:"canceledAt,omitempty"`
	EnabledAt  *float64 `json:"enabledAt,omitempty"`
	HasData    *bool    `json:"hasData,omitempty"`
}

func (o *UpdateProjectDataCacheWebAnalytics) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheWebAnalytics) GetDisabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DisabledAt
}

func (o *UpdateProjectDataCacheWebAnalytics) GetCanceledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CanceledAt
}

func (o *UpdateProjectDataCacheWebAnalytics) GetEnabledAt() *float64 {
	if o == nil {
		return nil
	}
	return o.EnabledAt
}

func (o *UpdateProjectDataCacheWebAnalytics) GetHasData() *bool {
	if o == nil {
		return nil
	}
	return o.HasData
}

type UpdateProjectDataCacheSrc struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectDataCacheSrc) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheSrc) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheSrc) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheSrc) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheSrc) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheSrc) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheSrc) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectDataCacheSrc) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheSrc) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheSrc) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheSrc) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectDataCacheSrcUnionType string

const (
	UpdateProjectDataCacheSrcUnionTypeStr                       UpdateProjectDataCacheSrcUnionType = "str"
	UpdateProjectDataCacheSrcUnionTypeUpdateProjectDataCacheSrc UpdateProjectDataCacheSrcUnionType = "updateProjectDataCache_src"
)

type UpdateProjectDataCacheSrcUnion struct {
	Str                       *string                    `queryParam:"inline"`
	UpdateProjectDataCacheSrc *UpdateProjectDataCacheSrc `queryParam:"inline"`

	Type UpdateProjectDataCacheSrcUnionType
}

func CreateUpdateProjectDataCacheSrcUnionStr(str string) UpdateProjectDataCacheSrcUnion {
	typ := UpdateProjectDataCacheSrcUnionTypeStr

	return UpdateProjectDataCacheSrcUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheSrcUnionUpdateProjectDataCacheSrc(updateProjectDataCacheSrc UpdateProjectDataCacheSrc) UpdateProjectDataCacheSrcUnion {
	typ := UpdateProjectDataCacheSrcUnionTypeUpdateProjectDataCacheSrc

	return UpdateProjectDataCacheSrcUnion{
		UpdateProjectDataCacheSrc: &updateProjectDataCacheSrc,
		Type:                      typ,
	}
}

func (u *UpdateProjectDataCacheSrcUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheSrc UpdateProjectDataCacheSrc = UpdateProjectDataCacheSrc{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheSrc, "", true, true); err == nil {
		u.UpdateProjectDataCacheSrc = &updateProjectDataCacheSrc
		u.Type = UpdateProjectDataCacheSrcUnionTypeUpdateProjectDataCacheSrc
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheSrcUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheSrcUnion", string(data))
}

func (u UpdateProjectDataCacheSrcUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheSrc != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheSrc, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheSrcUnion: all fields are null")
}

type UpdateProjectDataCacheHasType string

const (
	UpdateProjectDataCacheHasTypePath               UpdateProjectDataCacheHasType = "path"
	UpdateProjectDataCacheHasTypeHost               UpdateProjectDataCacheHasType = "host"
	UpdateProjectDataCacheHasTypeMethod             UpdateProjectDataCacheHasType = "method"
	UpdateProjectDataCacheHasTypeHeader             UpdateProjectDataCacheHasType = "header"
	UpdateProjectDataCacheHasTypeCookie             UpdateProjectDataCacheHasType = "cookie"
	UpdateProjectDataCacheHasTypeQuery              UpdateProjectDataCacheHasType = "query"
	UpdateProjectDataCacheHasTypeIPAddress          UpdateProjectDataCacheHasType = "ip_address"
	UpdateProjectDataCacheHasTypeProtocol           UpdateProjectDataCacheHasType = "protocol"
	UpdateProjectDataCacheHasTypeScheme             UpdateProjectDataCacheHasType = "scheme"
	UpdateProjectDataCacheHasTypeEnvironment        UpdateProjectDataCacheHasType = "environment"
	UpdateProjectDataCacheHasTypeRegion             UpdateProjectDataCacheHasType = "region"
	UpdateProjectDataCacheHasTypeInitialRequestPath UpdateProjectDataCacheHasType = "initial_request_path"
)

func (e UpdateProjectDataCacheHasType) ToPointer() *UpdateProjectDataCacheHasType {
	return &e
}
func (e *UpdateProjectDataCacheHasType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectDataCacheHasType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheHasType: %v", v)
	}
}

type UpdateProjectDataCacheValueHas struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectDataCacheValueHas) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheValueHas) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheValueHas) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheValueHas) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheValueHas) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheValueHas) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheValueHas) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectDataCacheValueHas) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheValueHas) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheValueHas) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheValueHas) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectDataCacheHasValueUnionType string

const (
	UpdateProjectDataCacheHasValueUnionTypeStr                            UpdateProjectDataCacheHasValueUnionType = "str"
	UpdateProjectDataCacheHasValueUnionTypeUpdateProjectDataCacheValueHas UpdateProjectDataCacheHasValueUnionType = "updateProjectDataCache_value_has"
)

type UpdateProjectDataCacheHasValueUnion struct {
	Str                            *string                         `queryParam:"inline"`
	UpdateProjectDataCacheValueHas *UpdateProjectDataCacheValueHas `queryParam:"inline"`

	Type UpdateProjectDataCacheHasValueUnionType
}

func CreateUpdateProjectDataCacheHasValueUnionStr(str string) UpdateProjectDataCacheHasValueUnion {
	typ := UpdateProjectDataCacheHasValueUnionTypeStr

	return UpdateProjectDataCacheHasValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheHasValueUnionUpdateProjectDataCacheValueHas(updateProjectDataCacheValueHas UpdateProjectDataCacheValueHas) UpdateProjectDataCacheHasValueUnion {
	typ := UpdateProjectDataCacheHasValueUnionTypeUpdateProjectDataCacheValueHas

	return UpdateProjectDataCacheHasValueUnion{
		UpdateProjectDataCacheValueHas: &updateProjectDataCacheValueHas,
		Type:                           typ,
	}
}

func (u *UpdateProjectDataCacheHasValueUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheValueHas UpdateProjectDataCacheValueHas = UpdateProjectDataCacheValueHas{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheValueHas, "", true, true); err == nil {
		u.UpdateProjectDataCacheValueHas = &updateProjectDataCacheValueHas
		u.Type = UpdateProjectDataCacheHasValueUnionTypeUpdateProjectDataCacheValueHas
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheHasValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheHasValueUnion", string(data))
}

func (u UpdateProjectDataCacheHasValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheValueHas != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheValueHas, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheHasValueUnion: all fields are null")
}

type UpdateProjectDataCacheHas struct {
	Type  UpdateProjectDataCacheHasType        `json:"type"`
	Key   *string                              `json:"key,omitempty"`
	Value *UpdateProjectDataCacheHasValueUnion `json:"value,omitempty"`
}

func (o *UpdateProjectDataCacheHas) GetType() UpdateProjectDataCacheHasType {
	if o == nil {
		return UpdateProjectDataCacheHasType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheHas) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectDataCacheHas) GetValue() *UpdateProjectDataCacheHasValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectDataCacheMissingType string

const (
	UpdateProjectDataCacheMissingTypePath               UpdateProjectDataCacheMissingType = "path"
	UpdateProjectDataCacheMissingTypeHost               UpdateProjectDataCacheMissingType = "host"
	UpdateProjectDataCacheMissingTypeMethod             UpdateProjectDataCacheMissingType = "method"
	UpdateProjectDataCacheMissingTypeHeader             UpdateProjectDataCacheMissingType = "header"
	UpdateProjectDataCacheMissingTypeCookie             UpdateProjectDataCacheMissingType = "cookie"
	UpdateProjectDataCacheMissingTypeQuery              UpdateProjectDataCacheMissingType = "query"
	UpdateProjectDataCacheMissingTypeIPAddress          UpdateProjectDataCacheMissingType = "ip_address"
	UpdateProjectDataCacheMissingTypeProtocol           UpdateProjectDataCacheMissingType = "protocol"
	UpdateProjectDataCacheMissingTypeScheme             UpdateProjectDataCacheMissingType = "scheme"
	UpdateProjectDataCacheMissingTypeEnvironment        UpdateProjectDataCacheMissingType = "environment"
	UpdateProjectDataCacheMissingTypeRegion             UpdateProjectDataCacheMissingType = "region"
	UpdateProjectDataCacheMissingTypeInitialRequestPath UpdateProjectDataCacheMissingType = "initial_request_path"
)

func (e UpdateProjectDataCacheMissingType) ToPointer() *UpdateProjectDataCacheMissingType {
	return &e
}
func (e *UpdateProjectDataCacheMissingType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "path":
		fallthrough
	case "host":
		fallthrough
	case "method":
		fallthrough
	case "header":
		fallthrough
	case "cookie":
		fallthrough
	case "query":
		fallthrough
	case "ip_address":
		fallthrough
	case "protocol":
		fallthrough
	case "scheme":
		fallthrough
	case "environment":
		fallthrough
	case "region":
		fallthrough
	case "initial_request_path":
		*e = UpdateProjectDataCacheMissingType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheMissingType: %v", v)
	}
}

type UpdateProjectDataCacheValueMissing struct {
	Re   *string  `json:"re,omitempty"`
	Eq   *string  `json:"eq,omitempty"`
	Neq  *string  `json:"neq,omitempty"`
	Inc  []string `json:"inc,omitempty"`
	Ninc []string `json:"ninc,omitempty"`
	Pre  *string  `json:"pre,omitempty"`
	Suf  *string  `json:"suf,omitempty"`
	Gt   *float64 `json:"gt,omitempty"`
	Gte  *float64 `json:"gte,omitempty"`
	Lt   *float64 `json:"lt,omitempty"`
	Lte  *float64 `json:"lte,omitempty"`
}

func (o *UpdateProjectDataCacheValueMissing) GetRe() *string {
	if o == nil {
		return nil
	}
	return o.Re
}

func (o *UpdateProjectDataCacheValueMissing) GetEq() *string {
	if o == nil {
		return nil
	}
	return o.Eq
}

func (o *UpdateProjectDataCacheValueMissing) GetNeq() *string {
	if o == nil {
		return nil
	}
	return o.Neq
}

func (o *UpdateProjectDataCacheValueMissing) GetInc() []string {
	if o == nil {
		return nil
	}
	return o.Inc
}

func (o *UpdateProjectDataCacheValueMissing) GetNinc() []string {
	if o == nil {
		return nil
	}
	return o.Ninc
}

func (o *UpdateProjectDataCacheValueMissing) GetPre() *string {
	if o == nil {
		return nil
	}
	return o.Pre
}

func (o *UpdateProjectDataCacheValueMissing) GetSuf() *string {
	if o == nil {
		return nil
	}
	return o.Suf
}

func (o *UpdateProjectDataCacheValueMissing) GetGt() *float64 {
	if o == nil {
		return nil
	}
	return o.Gt
}

func (o *UpdateProjectDataCacheValueMissing) GetGte() *float64 {
	if o == nil {
		return nil
	}
	return o.Gte
}

func (o *UpdateProjectDataCacheValueMissing) GetLt() *float64 {
	if o == nil {
		return nil
	}
	return o.Lt
}

func (o *UpdateProjectDataCacheValueMissing) GetLte() *float64 {
	if o == nil {
		return nil
	}
	return o.Lte
}

type UpdateProjectDataCacheMissingValueUnionType string

const (
	UpdateProjectDataCacheMissingValueUnionTypeStr                                UpdateProjectDataCacheMissingValueUnionType = "str"
	UpdateProjectDataCacheMissingValueUnionTypeUpdateProjectDataCacheValueMissing UpdateProjectDataCacheMissingValueUnionType = "updateProjectDataCache_value_missing"
)

type UpdateProjectDataCacheMissingValueUnion struct {
	Str                                *string                             `queryParam:"inline"`
	UpdateProjectDataCacheValueMissing *UpdateProjectDataCacheValueMissing `queryParam:"inline"`

	Type UpdateProjectDataCacheMissingValueUnionType
}

func CreateUpdateProjectDataCacheMissingValueUnionStr(str string) UpdateProjectDataCacheMissingValueUnion {
	typ := UpdateProjectDataCacheMissingValueUnionTypeStr

	return UpdateProjectDataCacheMissingValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateProjectDataCacheMissingValueUnionUpdateProjectDataCacheValueMissing(updateProjectDataCacheValueMissing UpdateProjectDataCacheValueMissing) UpdateProjectDataCacheMissingValueUnion {
	typ := UpdateProjectDataCacheMissingValueUnionTypeUpdateProjectDataCacheValueMissing

	return UpdateProjectDataCacheMissingValueUnion{
		UpdateProjectDataCacheValueMissing: &updateProjectDataCacheValueMissing,
		Type:                               typ,
	}
}

func (u *UpdateProjectDataCacheMissingValueUnion) UnmarshalJSON(data []byte) error {

	var updateProjectDataCacheValueMissing UpdateProjectDataCacheValueMissing = UpdateProjectDataCacheValueMissing{}
	if err := utils.UnmarshalJSON(data, &updateProjectDataCacheValueMissing, "", true, true); err == nil {
		u.UpdateProjectDataCacheValueMissing = &updateProjectDataCacheValueMissing
		u.Type = UpdateProjectDataCacheMissingValueUnionTypeUpdateProjectDataCacheValueMissing
		return nil
	}

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = &str
		u.Type = UpdateProjectDataCacheMissingValueUnionTypeStr
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectDataCacheMissingValueUnion", string(data))
}

func (u UpdateProjectDataCacheMissingValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateProjectDataCacheValueMissing != nil {
		return utils.MarshalJSON(u.UpdateProjectDataCacheValueMissing, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectDataCacheMissingValueUnion: all fields are null")
}

type UpdateProjectDataCacheMissing struct {
	Type  UpdateProjectDataCacheMissingType        `json:"type"`
	Key   *string                                  `json:"key,omitempty"`
	Value *UpdateProjectDataCacheMissingValueUnion `json:"value,omitempty"`
}

func (o *UpdateProjectDataCacheMissing) GetType() UpdateProjectDataCacheMissingType {
	if o == nil {
		return UpdateProjectDataCacheMissingType("")
	}
	return o.Type
}

func (o *UpdateProjectDataCacheMissing) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateProjectDataCacheMissing) GetValue() *UpdateProjectDataCacheMissingValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateProjectDataCacheHandle string

const (
	UpdateProjectDataCacheHandleInit     UpdateProjectDataCacheHandle = "init"
	UpdateProjectDataCacheHandleFinalize UpdateProjectDataCacheHandle = "finalize"
)

func (e UpdateProjectDataCacheHandle) ToPointer() *UpdateProjectDataCacheHandle {
	return &e
}
func (e *UpdateProjectDataCacheHandle) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "init":
		fallthrough
	case "finalize":
		*e = UpdateProjectDataCacheHandle(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheHandle: %v", v)
	}
}

type UpdateProjectDataCacheFirewallRouteAction string

const (
	UpdateProjectDataCacheFirewallRouteActionDeny      UpdateProjectDataCacheFirewallRouteAction = "deny"
	UpdateProjectDataCacheFirewallRouteActionChallenge UpdateProjectDataCacheFirewallRouteAction = "challenge"
	UpdateProjectDataCacheFirewallRouteActionLog       UpdateProjectDataCacheFirewallRouteAction = "log"
	UpdateProjectDataCacheFirewallRouteActionBypass    UpdateProjectDataCacheFirewallRouteAction = "bypass"
	UpdateProjectDataCacheFirewallRouteActionRateLimit UpdateProjectDataCacheFirewallRouteAction = "rate_limit"
	UpdateProjectDataCacheFirewallRouteActionRedirect  UpdateProjectDataCacheFirewallRouteAction = "redirect"
)

func (e UpdateProjectDataCacheFirewallRouteAction) ToPointer() *UpdateProjectDataCacheFirewallRouteAction {
	return &e
}
func (e *UpdateProjectDataCacheFirewallRouteAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		fallthrough
	case "bypass":
		fallthrough
	case "rate_limit":
		fallthrough
	case "redirect":
		*e = UpdateProjectDataCacheFirewallRouteAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheFirewallRouteAction: %v", v)
	}
}

type UpdateProjectDataCacheAlgo string

const (
	UpdateProjectDataCacheAlgoFixedWindow UpdateProjectDataCacheAlgo = "fixed_window"
	UpdateProjectDataCacheAlgoTokenBucket UpdateProjectDataCacheAlgo = "token_bucket"
)

func (e UpdateProjectDataCacheAlgo) ToPointer() *UpdateProjectDataCacheAlgo {
	return &e
}
func (e *UpdateProjectDataCacheAlgo) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "fixed_window":
		fallthrough
	case "token_bucket":
		*e = UpdateProjectDataCacheAlgo(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheAlgo: %v", v)
	}
}

type UpdateProjectDataCacheErl struct {
	Algo   UpdateProjectDataCacheAlgo `json:"algo"`
	Window float64                    `json:"window"`
	Limit  float64                    `json:"limit"`
	Keys   []string                   `json:"keys"`
}

func (o *UpdateProjectDataCacheErl) GetAlgo() UpdateProjectDataCacheAlgo {
	if o == nil {
		return UpdateProjectDataCacheAlgo("")
	}
	return o.Algo
}

func (o *UpdateProjectDataCacheErl) GetWindow() float64 {
	if o == nil {
		return 0.0
	}
	return o.Window
}

func (o *UpdateProjectDataCacheErl) GetLimit() float64 {
	if o == nil {
		return 0.0
	}
	return o.Limit
}

func (o *UpdateProjectDataCacheErl) GetKeys() []string {
	if o == nil {
		return []string{}
	}
	return o.Keys
}

type UpdateProjectDataCacheMitigate struct {
	Action UpdateProjectDataCacheFirewallRouteAction `json:"action"`
	RuleID string                                    `json:"rule_id"`
	TTL    *float64                                  `json:"ttl,omitempty"`
	Erl    *UpdateProjectDataCacheErl                `json:"erl,omitempty"`
}

func (o *UpdateProjectDataCacheMitigate) GetAction() UpdateProjectDataCacheFirewallRouteAction {
	if o == nil {
		return UpdateProjectDataCacheFirewallRouteAction("")
	}
	return o.Action
}

func (o *UpdateProjectDataCacheMitigate) GetRuleID() string {
	if o == nil {
		return ""
	}
	return o.RuleID
}

func (o *UpdateProjectDataCacheMitigate) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateProjectDataCacheMitigate) GetErl() *UpdateProjectDataCacheErl {
	if o == nil {
		return nil
	}
	return o.Erl
}

type UpdateProjectDataCacheFirewallRoute struct {
	Src      *UpdateProjectDataCacheSrcUnion `json:"src,omitempty"`
	Has      []UpdateProjectDataCacheHas     `json:"has,omitempty"`
	Missing  []UpdateProjectDataCacheMissing `json:"missing,omitempty"`
	Dest     *string                         `json:"dest,omitempty"`
	Status   *float64                        `json:"status,omitempty"`
	Handle   *UpdateProjectDataCacheHandle   `json:"handle,omitempty"`
	Mitigate *UpdateProjectDataCacheMitigate `json:"mitigate,omitempty"`
}

func (o *UpdateProjectDataCacheFirewallRoute) GetSrc() *UpdateProjectDataCacheSrcUnion {
	if o == nil {
		return nil
	}
	return o.Src
}

func (o *UpdateProjectDataCacheFirewallRoute) GetHas() []UpdateProjectDataCacheHas {
	if o == nil {
		return nil
	}
	return o.Has
}

func (o *UpdateProjectDataCacheFirewallRoute) GetMissing() []UpdateProjectDataCacheMissing {
	if o == nil {
		return nil
	}
	return o.Missing
}

func (o *UpdateProjectDataCacheFirewallRoute) GetDest() *string {
	if o == nil {
		return nil
	}
	return o.Dest
}

func (o *UpdateProjectDataCacheFirewallRoute) GetStatus() *float64 {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateProjectDataCacheFirewallRoute) GetHandle() *UpdateProjectDataCacheHandle {
	if o == nil {
		return nil
	}
	return o.Handle
}

func (o *UpdateProjectDataCacheFirewallRoute) GetMitigate() *UpdateProjectDataCacheMitigate {
	if o == nil {
		return nil
	}
	return o.Mitigate
}

type UpdateProjectDataCacheBotFilterAction string

const (
	UpdateProjectDataCacheBotFilterActionDeny      UpdateProjectDataCacheBotFilterAction = "deny"
	UpdateProjectDataCacheBotFilterActionChallenge UpdateProjectDataCacheBotFilterAction = "challenge"
	UpdateProjectDataCacheBotFilterActionLog       UpdateProjectDataCacheBotFilterAction = "log"
)

func (e UpdateProjectDataCacheBotFilterAction) ToPointer() *UpdateProjectDataCacheBotFilterAction {
	return &e
}
func (e *UpdateProjectDataCacheBotFilterAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectDataCacheBotFilterAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheBotFilterAction: %v", v)
	}
}

type UpdateProjectDataCacheBotFilter struct {
	Active bool                                   `json:"active"`
	Action *UpdateProjectDataCacheBotFilterAction `json:"action,omitempty"`
}

func (o *UpdateProjectDataCacheBotFilter) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectDataCacheBotFilter) GetAction() *UpdateProjectDataCacheBotFilterAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectDataCacheAiBotsAction string

const (
	UpdateProjectDataCacheAiBotsActionDeny      UpdateProjectDataCacheAiBotsAction = "deny"
	UpdateProjectDataCacheAiBotsActionChallenge UpdateProjectDataCacheAiBotsAction = "challenge"
	UpdateProjectDataCacheAiBotsActionLog       UpdateProjectDataCacheAiBotsAction = "log"
)

func (e UpdateProjectDataCacheAiBotsAction) ToPointer() *UpdateProjectDataCacheAiBotsAction {
	return &e
}
func (e *UpdateProjectDataCacheAiBotsAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectDataCacheAiBotsAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheAiBotsAction: %v", v)
	}
}

type UpdateProjectDataCacheAiBots struct {
	Active bool                                `json:"active"`
	Action *UpdateProjectDataCacheAiBotsAction `json:"action,omitempty"`
}

func (o *UpdateProjectDataCacheAiBots) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectDataCacheAiBots) GetAction() *UpdateProjectDataCacheAiBotsAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectDataCacheOwaspAction string

const (
	UpdateProjectDataCacheOwaspActionDeny      UpdateProjectDataCacheOwaspAction = "deny"
	UpdateProjectDataCacheOwaspActionChallenge UpdateProjectDataCacheOwaspAction = "challenge"
	UpdateProjectDataCacheOwaspActionLog       UpdateProjectDataCacheOwaspAction = "log"
)

func (e UpdateProjectDataCacheOwaspAction) ToPointer() *UpdateProjectDataCacheOwaspAction {
	return &e
}
func (e *UpdateProjectDataCacheOwaspAction) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "deny":
		fallthrough
	case "challenge":
		fallthrough
	case "log":
		*e = UpdateProjectDataCacheOwaspAction(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheOwaspAction: %v", v)
	}
}

type UpdateProjectDataCacheOwasp struct {
	Active bool                               `json:"active"`
	Action *UpdateProjectDataCacheOwaspAction `json:"action,omitempty"`
}

func (o *UpdateProjectDataCacheOwasp) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *UpdateProjectDataCacheOwasp) GetAction() *UpdateProjectDataCacheOwaspAction {
	if o == nil {
		return nil
	}
	return o.Action
}

type UpdateProjectDataCacheManagedRules struct {
	BotFilter UpdateProjectDataCacheBotFilter `json:"bot_filter"`
	AiBots    UpdateProjectDataCacheAiBots    `json:"ai_bots"`
	Owasp     UpdateProjectDataCacheOwasp     `json:"owasp"`
}

func (o *UpdateProjectDataCacheManagedRules) GetBotFilter() UpdateProjectDataCacheBotFilter {
	if o == nil {
		return UpdateProjectDataCacheBotFilter{}
	}
	return o.BotFilter
}

func (o *UpdateProjectDataCacheManagedRules) GetAiBots() UpdateProjectDataCacheAiBots {
	if o == nil {
		return UpdateProjectDataCacheAiBots{}
	}
	return o.AiBots
}

func (o *UpdateProjectDataCacheManagedRules) GetOwasp() UpdateProjectDataCacheOwasp {
	if o == nil {
		return UpdateProjectDataCacheOwasp{}
	}
	return o.Owasp
}

type UpdateProjectDataCacheSecurity struct {
	AttackModeEnabled      *bool                                 `json:"attackModeEnabled,omitempty"`
	AttackModeUpdatedAt    *float64                              `json:"attackModeUpdatedAt,omitempty"`
	FirewallEnabled        *bool                                 `json:"firewallEnabled,omitempty"`
	FirewallUpdatedAt      *float64                              `json:"firewallUpdatedAt,omitempty"`
	AttackModeActiveUntil  *float64                              `json:"attackModeActiveUntil,omitempty"`
	FirewallConfigVersion  *float64                              `json:"firewallConfigVersion,omitempty"`
	FirewallRoutes         []UpdateProjectDataCacheFirewallRoute `json:"firewallRoutes,omitempty"`
	FirewallSeawallEnabled *bool                                 `json:"firewallSeawallEnabled,omitempty"`
	Ja3Enabled             *bool                                 `json:"ja3Enabled,omitempty"`
	Ja4Enabled             *bool                                 `json:"ja4Enabled,omitempty"`
	FirewallBypassIps      []string                              `json:"firewallBypassIps,omitempty"`
	ManagedRules           *UpdateProjectDataCacheManagedRules   `json:"managedRules,omitempty"`
}

func (o *UpdateProjectDataCacheSecurity) GetAttackModeEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.AttackModeEnabled
}

func (o *UpdateProjectDataCacheSecurity) GetAttackModeUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeUpdatedAt
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallEnabled
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallUpdatedAt
}

func (o *UpdateProjectDataCacheSecurity) GetAttackModeActiveUntil() *float64 {
	if o == nil {
		return nil
	}
	return o.AttackModeActiveUntil
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallConfigVersion() *float64 {
	if o == nil {
		return nil
	}
	return o.FirewallConfigVersion
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallRoutes() []UpdateProjectDataCacheFirewallRoute {
	if o == nil {
		return nil
	}
	return o.FirewallRoutes
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallSeawallEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.FirewallSeawallEnabled
}

func (o *UpdateProjectDataCacheSecurity) GetJa3Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja3Enabled
}

func (o *UpdateProjectDataCacheSecurity) GetJa4Enabled() *bool {
	if o == nil {
		return nil
	}
	return o.Ja4Enabled
}

func (o *UpdateProjectDataCacheSecurity) GetFirewallBypassIps() []string {
	if o == nil {
		return nil
	}
	return o.FirewallBypassIps
}

func (o *UpdateProjectDataCacheSecurity) GetManagedRules() *UpdateProjectDataCacheManagedRules {
	if o == nil {
		return nil
	}
	return o.ManagedRules
}

// UpdateProjectDataCacheIssuerMode - - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
type UpdateProjectDataCacheIssuerMode string

const (
	UpdateProjectDataCacheIssuerModeTeam   UpdateProjectDataCacheIssuerMode = "team"
	UpdateProjectDataCacheIssuerModeGlobal UpdateProjectDataCacheIssuerMode = "global"
)

func (e UpdateProjectDataCacheIssuerMode) ToPointer() *UpdateProjectDataCacheIssuerMode {
	return &e
}
func (e *UpdateProjectDataCacheIssuerMode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "team":
		fallthrough
	case "global":
		*e = UpdateProjectDataCacheIssuerMode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheIssuerMode: %v", v)
	}
}

type UpdateProjectDataCacheOidcTokenConfig struct {
	// Whether or not to generate OpenID Connect JSON Web Tokens.
	Enabled *bool `json:"enabled,omitempty"`
	// - team: `https://oidc.vercel.com/[team_slug]` - global: `https://oidc.vercel.com`
	IssuerMode *UpdateProjectDataCacheIssuerMode `json:"issuerMode,omitempty"`
}

func (o *UpdateProjectDataCacheOidcTokenConfig) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *UpdateProjectDataCacheOidcTokenConfig) GetIssuerMode() *UpdateProjectDataCacheIssuerMode {
	if o == nil {
		return nil
	}
	return o.IssuerMode
}

type UpdateProjectDataCacheTier string

const (
	UpdateProjectDataCacheTierStandard UpdateProjectDataCacheTier = "standard"
	UpdateProjectDataCacheTierAdvanced UpdateProjectDataCacheTier = "advanced"
	UpdateProjectDataCacheTierCritical UpdateProjectDataCacheTier = "critical"
)

func (e UpdateProjectDataCacheTier) ToPointer() *UpdateProjectDataCacheTier {
	return &e
}
func (e *UpdateProjectDataCacheTier) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "standard":
		fallthrough
	case "advanced":
		fallthrough
	case "critical":
		*e = UpdateProjectDataCacheTier(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectDataCacheTier: %v", v)
	}
}

type UpdateProjectDataCacheFeatures struct {
	WebAnalytics *bool `json:"webAnalytics,omitempty"`
}

func (o *UpdateProjectDataCacheFeatures) GetWebAnalytics() *bool {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

type UpdateProjectDataCacheResponseBody struct {
	AccountID                        string                                       `json:"accountId"`
	Analytics                        *UpdateProjectDataCacheAnalytics             `json:"analytics,omitempty"`
	SpeedInsights                    *UpdateProjectDataCacheSpeedInsights         `json:"speedInsights,omitempty"`
	AutoExposeSystemEnvs             *bool                                        `json:"autoExposeSystemEnvs,omitempty"`
	AutoAssignCustomDomains          *bool                                        `json:"autoAssignCustomDomains,omitempty"`
	AutoAssignCustomDomainsUpdatedBy *string                                      `json:"autoAssignCustomDomainsUpdatedBy,omitempty"`
	BuildCommand                     *string                                      `json:"buildCommand,omitempty"`
	CommandForIgnoringBuildStep      *string                                      `json:"commandForIgnoringBuildStep,omitempty"`
	ConnectConfigurations            []UpdateProjectDataCacheConnectConfiguration `json:"connectConfigurations,omitempty"`
	ConnectConfigurationID           *string                                      `json:"connectConfigurationId,omitempty"`
	ConnectBuildsEnabled             *bool                                        `json:"connectBuildsEnabled,omitempty"`
	PassiveConnectConfigurationID    *string                                      `json:"passiveConnectConfigurationId,omitempty"`
	CreatedAt                        *float64                                     `json:"createdAt,omitempty"`
	CustomerSupportCodeVisibility    *bool                                        `json:"customerSupportCodeVisibility,omitempty"`
	Crons                            *UpdateProjectDataCacheCrons                 `json:"crons,omitempty"`
	DataCache                        *UpdateProjectDataCacheDataCache             `json:"dataCache,omitempty"`
	DeploymentExpiration             *UpdateProjectDataCacheDeploymentExpiration  `json:"deploymentExpiration,omitempty"`
	DevCommand                       *string                                      `json:"devCommand,omitempty"`
	DirectoryListing                 bool                                         `json:"directoryListing"`
	InstallCommand                   *string                                      `json:"installCommand,omitempty"`
	Env                              []UpdateProjectDataCacheEnv                  `json:"env,omitempty"`
	CustomEnvironments               []UpdateProjectDataCacheCustomEnvironment    `json:"customEnvironments,omitempty"`
	Framework                        *UpdateProjectDataCacheFramework             `json:"framework,omitempty"`
	GitForkProtection                *bool                                        `json:"gitForkProtection,omitempty"`
	GitLFS                           *bool                                        `json:"gitLFS,omitempty"`
	ID                               string                                       `json:"id"`
	IPBuckets                        []UpdateProjectDataCacheIPBucket             `json:"ipBuckets,omitempty"`
	LatestDeployments                []UpdateProjectDataCacheLatestDeployment     `json:"latestDeployments,omitempty"`
	Link                             *UpdateProjectDataCacheLinkUnion             `json:"link,omitempty"`
	Microfrontends                   *UpdateProjectDataCacheMicrofrontendsUnion   `json:"microfrontends,omitempty"`
	Name                             string                                       `json:"name"`
	NodeVersion                      UpdateProjectDataCacheNodeVersion            `json:"nodeVersion"`
	OptionsAllowlist                 *UpdateProjectDataCacheOptionsAllowlist      `json:"optionsAllowlist,omitempty"`
	OutputDirectory                  *string                                      `json:"outputDirectory,omitempty"`
	PasswordProtection               *UpdateProjectDataCachePasswordProtection    `json:"passwordProtection,omitempty"`
	ProductionDeploymentsFastLane    *bool                                        `json:"productionDeploymentsFastLane,omitempty"`
	PublicSource                     *bool                                        `json:"publicSource,omitempty"`
	ResourceConfig                   UpdateProjectDataCacheResourceConfig         `json:"resourceConfig"`
	// Description of why a project was rolled back, and by whom. Note that lastAliasRequest contains the from/to details of the rollback.
	RollbackDescription                  *UpdateProjectDataCacheRollbackDescription             `json:"rollbackDescription,omitempty"`
	RollingRelease                       *UpdateProjectDataCacheRollingRelease                  `json:"rollingRelease,omitempty"`
	DefaultResourceConfig                UpdateProjectDataCacheDefaultResourceConfig            `json:"defaultResourceConfig"`
	RootDirectory                        *string                                                `json:"rootDirectory,omitempty"`
	ServerlessFunctionRegion             *string                                                `json:"serverlessFunctionRegion,omitempty"`
	ServerlessFunctionZeroConfigFailover *bool                                                  `json:"serverlessFunctionZeroConfigFailover,omitempty"`
	SkewProtectionBoundaryAt             *float64                                               `json:"skewProtectionBoundaryAt,omitempty"`
	SkewProtectionMaxAge                 *float64                                               `json:"skewProtectionMaxAge,omitempty"`
	SkipGitConnectDuringLink             *bool                                                  `json:"skipGitConnectDuringLink,omitempty"`
	SourceFilesOutsideRootDirectory      *bool                                                  `json:"sourceFilesOutsideRootDirectory,omitempty"`
	EnableAffectedProjectsDeployments    *bool                                                  `json:"enableAffectedProjectsDeployments,omitempty"`
	SsoProtection                        *UpdateProjectDataCacheSsoProtection                   `json:"ssoProtection,omitempty"`
	Targets                              map[string]*UpdateProjectDataCacheTargets              `json:"targets,omitempty"`
	TransferCompletedAt                  *float64                                               `json:"transferCompletedAt,omitempty"`
	TransferStartedAt                    *float64                                               `json:"transferStartedAt,omitempty"`
	TransferToAccountID                  *string                                                `json:"transferToAccountId,omitempty"`
	TransferredFromAccountID             *string                                                `json:"transferredFromAccountId,omitempty"`
	UpdatedAt                            *float64                                               `json:"updatedAt,omitempty"`
	Live                                 *bool                                                  `json:"live,omitempty"`
	EnablePreviewFeedback                *bool                                                  `json:"enablePreviewFeedback,omitempty"`
	EnableProductionFeedback             *bool                                                  `json:"enableProductionFeedback,omitempty"`
	Permissions                          *UpdateProjectDataCachePermissions                     `json:"permissions,omitempty"`
	LastRollbackTarget                   *UpdateProjectDataCacheLastRollbackTarget              `json:"lastRollbackTarget,omitempty"`
	LastAliasRequest                     *UpdateProjectDataCacheLastAliasRequest                `json:"lastAliasRequest,omitempty"`
	ProtectionBypass                     map[string]UpdateProjectDataCacheProtectionBypassUnion `json:"protectionBypass,omitempty"`
	HasActiveBranches                    *bool                                                  `json:"hasActiveBranches,omitempty"`
	TrustedIps                           *UpdateProjectDataCacheTrustedIpsUnion                 `json:"trustedIps,omitempty"`
	GitComments                          *UpdateProjectDataCacheGitComments                     `json:"gitComments,omitempty"`
	GitProviderOptions                   *UpdateProjectDataCacheGitProviderOptions              `json:"gitProviderOptions,omitempty"`
	Paused                               *bool                                                  `json:"paused,omitempty"`
	ConcurrencyBucketName                *string                                                `json:"concurrencyBucketName,omitempty"`
	WebAnalytics                         *UpdateProjectDataCacheWebAnalytics                    `json:"webAnalytics,omitempty"`
	Security                             *UpdateProjectDataCacheSecurity                        `json:"security,omitempty"`
	OidcTokenConfig                      *UpdateProjectDataCacheOidcTokenConfig                 `json:"oidcTokenConfig,omitempty"`
	Tier                                 *UpdateProjectDataCacheTier                            `json:"tier,omitempty"`
	Features                             *UpdateProjectDataCacheFeatures                        `json:"features,omitempty"`
}

func (o *UpdateProjectDataCacheResponseBody) GetAccountID() string {
	if o == nil {
		return ""
	}
	return o.AccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetAnalytics() *UpdateProjectDataCacheAnalytics {
	if o == nil {
		return nil
	}
	return o.Analytics
}

func (o *UpdateProjectDataCacheResponseBody) GetSpeedInsights() *UpdateProjectDataCacheSpeedInsights {
	if o == nil {
		return nil
	}
	return o.SpeedInsights
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoExposeSystemEnvs() *bool {
	if o == nil {
		return nil
	}
	return o.AutoExposeSystemEnvs
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoAssignCustomDomains() *bool {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomains
}

func (o *UpdateProjectDataCacheResponseBody) GetAutoAssignCustomDomainsUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.AutoAssignCustomDomainsUpdatedBy
}

func (o *UpdateProjectDataCacheResponseBody) GetBuildCommand() *string {
	if o == nil {
		return nil
	}
	return o.BuildCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetCommandForIgnoringBuildStep() *string {
	if o == nil {
		return nil
	}
	return o.CommandForIgnoringBuildStep
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectConfigurations() []UpdateProjectDataCacheConnectConfiguration {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurations
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.ConnectConfigurationID
}

func (o *UpdateProjectDataCacheResponseBody) GetConnectBuildsEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.ConnectBuildsEnabled
}

func (o *UpdateProjectDataCacheResponseBody) GetPassiveConnectConfigurationID() *string {
	if o == nil {
		return nil
	}
	return o.PassiveConnectConfigurationID
}

func (o *UpdateProjectDataCacheResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetCustomerSupportCodeVisibility() *bool {
	if o == nil {
		return nil
	}
	return o.CustomerSupportCodeVisibility
}

func (o *UpdateProjectDataCacheResponseBody) GetCrons() *UpdateProjectDataCacheCrons {
	if o == nil {
		return nil
	}
	return o.Crons
}

func (o *UpdateProjectDataCacheResponseBody) GetDataCache() *UpdateProjectDataCacheDataCache {
	if o == nil {
		return nil
	}
	return o.DataCache
}

func (o *UpdateProjectDataCacheResponseBody) GetDeploymentExpiration() *UpdateProjectDataCacheDeploymentExpiration {
	if o == nil {
		return nil
	}
	return o.DeploymentExpiration
}

func (o *UpdateProjectDataCacheResponseBody) GetDevCommand() *string {
	if o == nil {
		return nil
	}
	return o.DevCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetDirectoryListing() bool {
	if o == nil {
		return false
	}
	return o.DirectoryListing
}

func (o *UpdateProjectDataCacheResponseBody) GetInstallCommand() *string {
	if o == nil {
		return nil
	}
	return o.InstallCommand
}

func (o *UpdateProjectDataCacheResponseBody) GetEnv() []UpdateProjectDataCacheEnv {
	if o == nil {
		return nil
	}
	return o.Env
}

func (o *UpdateProjectDataCacheResponseBody) GetCustomEnvironments() []UpdateProjectDataCacheCustomEnvironment {
	if o == nil {
		return nil
	}
	return o.CustomEnvironments
}

func (o *UpdateProjectDataCacheResponseBody) GetFramework() *UpdateProjectDataCacheFramework {
	if o == nil {
		return nil
	}
	return o.Framework
}

func (o *UpdateProjectDataCacheResponseBody) GetGitForkProtection() *bool {
	if o == nil {
		return nil
	}
	return o.GitForkProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetGitLFS() *bool {
	if o == nil {
		return nil
	}
	return o.GitLFS
}

func (o *UpdateProjectDataCacheResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateProjectDataCacheResponseBody) GetIPBuckets() []UpdateProjectDataCacheIPBucket {
	if o == nil {
		return nil
	}
	return o.IPBuckets
}

func (o *UpdateProjectDataCacheResponseBody) GetLatestDeployments() []UpdateProjectDataCacheLatestDeployment {
	if o == nil {
		return nil
	}
	return o.LatestDeployments
}

func (o *UpdateProjectDataCacheResponseBody) GetLink() *UpdateProjectDataCacheLinkUnion {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateProjectDataCacheResponseBody) GetMicrofrontends() *UpdateProjectDataCacheMicrofrontendsUnion {
	if o == nil {
		return nil
	}
	return o.Microfrontends
}

func (o *UpdateProjectDataCacheResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateProjectDataCacheResponseBody) GetNodeVersion() UpdateProjectDataCacheNodeVersion {
	if o == nil {
		return UpdateProjectDataCacheNodeVersion("")
	}
	return o.NodeVersion
}

func (o *UpdateProjectDataCacheResponseBody) GetOptionsAllowlist() *UpdateProjectDataCacheOptionsAllowlist {
	if o == nil {
		return nil
	}
	return o.OptionsAllowlist
}

func (o *UpdateProjectDataCacheResponseBody) GetOutputDirectory() *string {
	if o == nil {
		return nil
	}
	return o.OutputDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetPasswordProtection() *UpdateProjectDataCachePasswordProtection {
	if o == nil {
		return nil
	}
	return o.PasswordProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetProductionDeploymentsFastLane() *bool {
	if o == nil {
		return nil
	}
	return o.ProductionDeploymentsFastLane
}

func (o *UpdateProjectDataCacheResponseBody) GetPublicSource() *bool {
	if o == nil {
		return nil
	}
	return o.PublicSource
}

func (o *UpdateProjectDataCacheResponseBody) GetResourceConfig() UpdateProjectDataCacheResourceConfig {
	if o == nil {
		return UpdateProjectDataCacheResourceConfig{}
	}
	return o.ResourceConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetRollbackDescription() *UpdateProjectDataCacheRollbackDescription {
	if o == nil {
		return nil
	}
	return o.RollbackDescription
}

func (o *UpdateProjectDataCacheResponseBody) GetRollingRelease() *UpdateProjectDataCacheRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

func (o *UpdateProjectDataCacheResponseBody) GetDefaultResourceConfig() UpdateProjectDataCacheDefaultResourceConfig {
	if o == nil {
		return UpdateProjectDataCacheDefaultResourceConfig{}
	}
	return o.DefaultResourceConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetRootDirectory() *string {
	if o == nil {
		return nil
	}
	return o.RootDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetServerlessFunctionRegion() *string {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionRegion
}

func (o *UpdateProjectDataCacheResponseBody) GetServerlessFunctionZeroConfigFailover() *bool {
	if o == nil {
		return nil
	}
	return o.ServerlessFunctionZeroConfigFailover
}

func (o *UpdateProjectDataCacheResponseBody) GetSkewProtectionBoundaryAt() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionBoundaryAt
}

func (o *UpdateProjectDataCacheResponseBody) GetSkewProtectionMaxAge() *float64 {
	if o == nil {
		return nil
	}
	return o.SkewProtectionMaxAge
}

func (o *UpdateProjectDataCacheResponseBody) GetSkipGitConnectDuringLink() *bool {
	if o == nil {
		return nil
	}
	return o.SkipGitConnectDuringLink
}

func (o *UpdateProjectDataCacheResponseBody) GetSourceFilesOutsideRootDirectory() *bool {
	if o == nil {
		return nil
	}
	return o.SourceFilesOutsideRootDirectory
}

func (o *UpdateProjectDataCacheResponseBody) GetEnableAffectedProjectsDeployments() *bool {
	if o == nil {
		return nil
	}
	return o.EnableAffectedProjectsDeployments
}

func (o *UpdateProjectDataCacheResponseBody) GetSsoProtection() *UpdateProjectDataCacheSsoProtection {
	if o == nil {
		return nil
	}
	return o.SsoProtection
}

func (o *UpdateProjectDataCacheResponseBody) GetTargets() map[string]*UpdateProjectDataCacheTargets {
	if o == nil {
		return nil
	}
	return o.Targets
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferCompletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferCompletedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferStartedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.TransferStartedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferToAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferToAccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetTransferredFromAccountID() *string {
	if o == nil {
		return nil
	}
	return o.TransferredFromAccountID
}

func (o *UpdateProjectDataCacheResponseBody) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *UpdateProjectDataCacheResponseBody) GetLive() *bool {
	if o == nil {
		return nil
	}
	return o.Live
}

func (o *UpdateProjectDataCacheResponseBody) GetEnablePreviewFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnablePreviewFeedback
}

func (o *UpdateProjectDataCacheResponseBody) GetEnableProductionFeedback() *bool {
	if o == nil {
		return nil
	}
	return o.EnableProductionFeedback
}

func (o *UpdateProjectDataCacheResponseBody) GetPermissions() *UpdateProjectDataCachePermissions {
	if o == nil {
		return nil
	}
	return o.Permissions
}

func (o *UpdateProjectDataCacheResponseBody) GetLastRollbackTarget() *UpdateProjectDataCacheLastRollbackTarget {
	if o == nil {
		return nil
	}
	return o.LastRollbackTarget
}

func (o *UpdateProjectDataCacheResponseBody) GetLastAliasRequest() *UpdateProjectDataCacheLastAliasRequest {
	if o == nil {
		return nil
	}
	return o.LastAliasRequest
}

func (o *UpdateProjectDataCacheResponseBody) GetProtectionBypass() map[string]UpdateProjectDataCacheProtectionBypassUnion {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

func (o *UpdateProjectDataCacheResponseBody) GetHasActiveBranches() *bool {
	if o == nil {
		return nil
	}
	return o.HasActiveBranches
}

func (o *UpdateProjectDataCacheResponseBody) GetTrustedIps() *UpdateProjectDataCacheTrustedIpsUnion {
	if o == nil {
		return nil
	}
	return o.TrustedIps
}

func (o *UpdateProjectDataCacheResponseBody) GetGitComments() *UpdateProjectDataCacheGitComments {
	if o == nil {
		return nil
	}
	return o.GitComments
}

func (o *UpdateProjectDataCacheResponseBody) GetGitProviderOptions() *UpdateProjectDataCacheGitProviderOptions {
	if o == nil {
		return nil
	}
	return o.GitProviderOptions
}

func (o *UpdateProjectDataCacheResponseBody) GetPaused() *bool {
	if o == nil {
		return nil
	}
	return o.Paused
}

func (o *UpdateProjectDataCacheResponseBody) GetConcurrencyBucketName() *string {
	if o == nil {
		return nil
	}
	return o.ConcurrencyBucketName
}

func (o *UpdateProjectDataCacheResponseBody) GetWebAnalytics() *UpdateProjectDataCacheWebAnalytics {
	if o == nil {
		return nil
	}
	return o.WebAnalytics
}

func (o *UpdateProjectDataCacheResponseBody) GetSecurity() *UpdateProjectDataCacheSecurity {
	if o == nil {
		return nil
	}
	return o.Security
}

func (o *UpdateProjectDataCacheResponseBody) GetOidcTokenConfig() *UpdateProjectDataCacheOidcTokenConfig {
	if o == nil {
		return nil
	}
	return o.OidcTokenConfig
}

func (o *UpdateProjectDataCacheResponseBody) GetTier() *UpdateProjectDataCacheTier {
	if o == nil {
		return nil
	}
	return o.Tier
}

func (o *UpdateProjectDataCacheResponseBody) GetFeatures() *UpdateProjectDataCacheFeatures {
	if o == nil {
		return nil
	}
	return o.Features
}

type UpdateProjectDataCacheResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateProjectDataCacheResponseBody
}

func (o *UpdateProjectDataCacheResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectDataCacheResponse) GetObject() *UpdateProjectDataCacheResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
