// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// Revoke - Optional instructions for revoking and regenerating a automation bypass
type Revoke struct {
	// Automation bypass to revoked
	Secret string `json:"secret"`
	// Whether or not a new automation bypass should be created after the provided secret is revoked
	Regenerate bool `json:"regenerate"`
}

func (o *Revoke) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *Revoke) GetRegenerate() bool {
	if o == nil {
		return false
	}
	return o.Regenerate
}

// Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.
type Generate struct {
	// Optional value of the secret to generate, don't send it for oauth2 tokens
	Secret *string `json:"secret,omitempty"`
}

func (o *Generate) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateProjectProtectionBypassRequestBody struct {
	// Optional instructions for revoking and regenerating a automation bypass
	Revoke *Revoke `json:"revoke,omitempty"`
	// Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.
	Generate *Generate `json:"generate,omitempty"`
}

func (o *UpdateProjectProtectionBypassRequestBody) GetRevoke() *Revoke {
	if o == nil {
		return nil
	}
	return o.Revoke
}

func (o *UpdateProjectProtectionBypassRequestBody) GetGenerate() *Generate {
	if o == nil {
		return nil
	}
	return o.Generate
}

type UpdateProjectProtectionBypassRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateProjectProtectionBypassRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectProtectionBypassRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateProjectProtectionBypassRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectProtectionBypassRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectProtectionBypassRequest) GetRequestBody() UpdateProjectProtectionBypassRequestBody {
	if o == nil {
		return UpdateProjectProtectionBypassRequestBody{}
	}
	return o.RequestBody
}

type UpdateProjectProtectionBypassProtectionBypassProjectsScope string

const (
	UpdateProjectProtectionBypassProtectionBypassProjectsScopeAutomationBypass UpdateProjectProtectionBypassProtectionBypassProjectsScope = "automation-bypass"
)

func (e UpdateProjectProtectionBypassProtectionBypassProjectsScope) ToPointer() *UpdateProjectProtectionBypassProtectionBypassProjectsScope {
	return &e
}
func (e *UpdateProjectProtectionBypassProtectionBypassProjectsScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectProtectionBypassProtectionBypassProjectsScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProtectionBypassProtectionBypassProjectsScope: %v", v)
	}
}

type UpdateProjectProtectionBypassProtectionBypass2 struct {
	CreatedAt float64                                                    `json:"createdAt"`
	CreatedBy string                                                     `json:"createdBy"`
	Scope     UpdateProjectProtectionBypassProtectionBypassProjectsScope `json:"scope"`
}

func (o *UpdateProjectProtectionBypassProtectionBypass2) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypassProtectionBypass2) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypassProtectionBypass2) GetScope() UpdateProjectProtectionBypassProtectionBypassProjectsScope {
	if o == nil {
		return UpdateProjectProtectionBypassProtectionBypassProjectsScope("")
	}
	return o.Scope
}

type UpdateProjectProtectionBypassProtectionBypassScope string

const (
	UpdateProjectProtectionBypassProtectionBypassScopeIntegrationAutomationBypass UpdateProjectProtectionBypassProtectionBypassScope = "integration-automation-bypass"
)

func (e UpdateProjectProtectionBypassProtectionBypassScope) ToPointer() *UpdateProjectProtectionBypassProtectionBypassScope {
	return &e
}
func (e *UpdateProjectProtectionBypassProtectionBypassScope) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-automation-bypass":
		*e = UpdateProjectProtectionBypassProtectionBypassScope(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProtectionBypassProtectionBypassScope: %v", v)
	}
}

type UpdateProjectProtectionBypassProtectionBypass1 struct {
	CreatedAt     float64                                            `json:"createdAt"`
	CreatedBy     string                                             `json:"createdBy"`
	Scope         UpdateProjectProtectionBypassProtectionBypassScope `json:"scope"`
	IntegrationID string                                             `json:"integrationId"`
}

func (o *UpdateProjectProtectionBypassProtectionBypass1) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypassProtectionBypass1) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypassProtectionBypass1) GetScope() UpdateProjectProtectionBypassProtectionBypassScope {
	if o == nil {
		return UpdateProjectProtectionBypassProtectionBypassScope("")
	}
	return o.Scope
}

func (o *UpdateProjectProtectionBypassProtectionBypass1) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

type UpdateProjectProtectionBypassProtectionBypassType string

const (
	UpdateProjectProtectionBypassProtectionBypassTypeUpdateProjectProtectionBypassProtectionBypass1 UpdateProjectProtectionBypassProtectionBypassType = "updateProjectProtectionBypass_protectionBypass_1"
	UpdateProjectProtectionBypassProtectionBypassTypeUpdateProjectProtectionBypassProtectionBypass2 UpdateProjectProtectionBypassProtectionBypassType = "updateProjectProtectionBypass_protectionBypass_2"
)

type UpdateProjectProtectionBypassProtectionBypass struct {
	UpdateProjectProtectionBypassProtectionBypass1 *UpdateProjectProtectionBypassProtectionBypass1
	UpdateProjectProtectionBypassProtectionBypass2 *UpdateProjectProtectionBypassProtectionBypass2

	Type UpdateProjectProtectionBypassProtectionBypassType
}

func CreateUpdateProjectProtectionBypassProtectionBypassUpdateProjectProtectionBypassProtectionBypass1(updateProjectProtectionBypassProtectionBypass1 UpdateProjectProtectionBypassProtectionBypass1) UpdateProjectProtectionBypassProtectionBypass {
	typ := UpdateProjectProtectionBypassProtectionBypassTypeUpdateProjectProtectionBypassProtectionBypass1

	return UpdateProjectProtectionBypassProtectionBypass{
		UpdateProjectProtectionBypassProtectionBypass1: &updateProjectProtectionBypassProtectionBypass1,
		Type: typ,
	}
}

func CreateUpdateProjectProtectionBypassProtectionBypassUpdateProjectProtectionBypassProtectionBypass2(updateProjectProtectionBypassProtectionBypass2 UpdateProjectProtectionBypassProtectionBypass2) UpdateProjectProtectionBypassProtectionBypass {
	typ := UpdateProjectProtectionBypassProtectionBypassTypeUpdateProjectProtectionBypassProtectionBypass2

	return UpdateProjectProtectionBypassProtectionBypass{
		UpdateProjectProtectionBypassProtectionBypass2: &updateProjectProtectionBypassProtectionBypass2,
		Type: typ,
	}
}

func (u *UpdateProjectProtectionBypassProtectionBypass) UnmarshalJSON(data []byte) error {

	var updateProjectProtectionBypassProtectionBypass2 UpdateProjectProtectionBypassProtectionBypass2 = UpdateProjectProtectionBypassProtectionBypass2{}
	if err := utils.UnmarshalJSON(data, &updateProjectProtectionBypassProtectionBypass2, "", true, true); err == nil {
		u.UpdateProjectProtectionBypassProtectionBypass2 = &updateProjectProtectionBypassProtectionBypass2
		u.Type = UpdateProjectProtectionBypassProtectionBypassTypeUpdateProjectProtectionBypassProtectionBypass2
		return nil
	}

	var updateProjectProtectionBypassProtectionBypass1 UpdateProjectProtectionBypassProtectionBypass1 = UpdateProjectProtectionBypassProtectionBypass1{}
	if err := utils.UnmarshalJSON(data, &updateProjectProtectionBypassProtectionBypass1, "", true, true); err == nil {
		u.UpdateProjectProtectionBypassProtectionBypass1 = &updateProjectProtectionBypassProtectionBypass1
		u.Type = UpdateProjectProtectionBypassProtectionBypassTypeUpdateProjectProtectionBypassProtectionBypass1
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectProtectionBypassProtectionBypass", string(data))
}

func (u UpdateProjectProtectionBypassProtectionBypass) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectProtectionBypassProtectionBypass1 != nil {
		return utils.MarshalJSON(u.UpdateProjectProtectionBypassProtectionBypass1, "", true)
	}

	if u.UpdateProjectProtectionBypassProtectionBypass2 != nil {
		return utils.MarshalJSON(u.UpdateProjectProtectionBypassProtectionBypass2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectProtectionBypassProtectionBypass: all fields are null")
}

type UpdateProjectProtectionBypassResponseBody struct {
	ProtectionBypass map[string]UpdateProjectProtectionBypassProtectionBypass `json:"protectionBypass,omitempty"`
}

func (o *UpdateProjectProtectionBypassResponseBody) GetProtectionBypass() map[string]UpdateProjectProtectionBypassProtectionBypass {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

type UpdateProjectProtectionBypassResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateProjectProtectionBypassResponseBody
}

func (o *UpdateProjectProtectionBypassResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectProtectionBypassResponse) GetObject() *UpdateProjectProtectionBypassResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
