// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

// UpdateProjectProtectionBypassRevoke - Optional instructions for revoking and regenerating a automation bypass
type UpdateProjectProtectionBypassRevoke struct {
	// Automation bypass to revoked
	Secret string `json:"secret"`
	// Whether or not a new automation bypass should be created after the provided secret is revoked
	Regenerate bool `json:"regenerate"`
}

func (o *UpdateProjectProtectionBypassRevoke) GetSecret() string {
	if o == nil {
		return ""
	}
	return o.Secret
}

func (o *UpdateProjectProtectionBypassRevoke) GetRegenerate() bool {
	if o == nil {
		return false
	}
	return o.Regenerate
}

// Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.
type Generate struct {
	// Optional value of the secret to generate, don't send it for oauth2 tokens
	Secret *string `json:"secret,omitempty"`
}

func (o *Generate) GetSecret() *string {
	if o == nil {
		return nil
	}
	return o.Secret
}

type UpdateProjectProtectionBypassRequestBody struct {
	// Optional instructions for revoking and regenerating a automation bypass
	Revoke *UpdateProjectProtectionBypassRevoke `json:"revoke,omitempty"`
	// Generate a new secret. If neither generate or revoke are provided, a new random secret will be generated.
	Generate *Generate `json:"generate,omitempty"`
}

func (o *UpdateProjectProtectionBypassRequestBody) GetRevoke() *UpdateProjectProtectionBypassRevoke {
	if o == nil {
		return nil
	}
	return o.Revoke
}

func (o *UpdateProjectProtectionBypassRequestBody) GetGenerate() *Generate {
	if o == nil {
		return nil
	}
	return o.Generate
}

type UpdateProjectProtectionBypassRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                                  `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateProjectProtectionBypassRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateProjectProtectionBypassRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateProjectProtectionBypassRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateProjectProtectionBypassRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateProjectProtectionBypassRequest) GetRequestBody() UpdateProjectProtectionBypassRequestBody {
	if o == nil {
		return UpdateProjectProtectionBypassRequestBody{}
	}
	return o.RequestBody
}

type UpdateProjectProtectionBypassScopeAutomationBypass string

const (
	UpdateProjectProtectionBypassScopeAutomationBypassAutomationBypass UpdateProjectProtectionBypassScopeAutomationBypass = "automation-bypass"
)

func (e UpdateProjectProtectionBypassScopeAutomationBypass) ToPointer() *UpdateProjectProtectionBypassScopeAutomationBypass {
	return &e
}
func (e *UpdateProjectProtectionBypassScopeAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "automation-bypass":
		*e = UpdateProjectProtectionBypassScopeAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProtectionBypassScopeAutomationBypass: %v", v)
	}
}

type UpdateProjectProtectionBypassProtectionBypassAutomationBypass struct {
	CreatedAt float64                                            `json:"createdAt"`
	CreatedBy string                                             `json:"createdBy"`
	Scope     UpdateProjectProtectionBypassScopeAutomationBypass `json:"scope"`
}

func (o *UpdateProjectProtectionBypassProtectionBypassAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypassProtectionBypassAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypassProtectionBypassAutomationBypass) GetScope() UpdateProjectProtectionBypassScopeAutomationBypass {
	if o == nil {
		return UpdateProjectProtectionBypassScopeAutomationBypass("")
	}
	return o.Scope
}

type UpdateProjectProtectionBypassScopeIntegrationAutomationBypass string

const (
	UpdateProjectProtectionBypassScopeIntegrationAutomationBypassIntegrationAutomationBypass UpdateProjectProtectionBypassScopeIntegrationAutomationBypass = "integration-automation-bypass"
)

func (e UpdateProjectProtectionBypassScopeIntegrationAutomationBypass) ToPointer() *UpdateProjectProtectionBypassScopeIntegrationAutomationBypass {
	return &e
}
func (e *UpdateProjectProtectionBypassScopeIntegrationAutomationBypass) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "integration-automation-bypass":
		*e = UpdateProjectProtectionBypassScopeIntegrationAutomationBypass(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateProjectProtectionBypassScopeIntegrationAutomationBypass: %v", v)
	}
}

type UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass struct {
	CreatedAt       float64                                                       `json:"createdAt"`
	CreatedBy       string                                                        `json:"createdBy"`
	Scope           UpdateProjectProtectionBypassScopeIntegrationAutomationBypass `json:"scope"`
	IntegrationID   string                                                        `json:"integrationId"`
	ConfigurationID string                                                        `json:"configurationId"`
}

func (o *UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass) GetCreatedBy() string {
	if o == nil {
		return ""
	}
	return o.CreatedBy
}

func (o *UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass) GetScope() UpdateProjectProtectionBypassScopeIntegrationAutomationBypass {
	if o == nil {
		return UpdateProjectProtectionBypassScopeIntegrationAutomationBypass("")
	}
	return o.Scope
}

func (o *UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass) GetIntegrationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationID
}

func (o *UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass) GetConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConfigurationID
}

type UpdateProjectProtectionBypassProtectionBypassUnionType string

const (
	UpdateProjectProtectionBypassProtectionBypassUnionTypeUpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass UpdateProjectProtectionBypassProtectionBypassUnionType = "updateProjectProtectionBypass_protectionBypass_IntegrationAutomationBypass"
	UpdateProjectProtectionBypassProtectionBypassUnionTypeUpdateProjectProtectionBypassProtectionBypassAutomationBypass            UpdateProjectProtectionBypassProtectionBypassUnionType = "updateProjectProtectionBypass_protectionBypass_AutomationBypass"
)

type UpdateProjectProtectionBypassProtectionBypassUnion struct {
	UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass *UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass `queryParam:"inline"`
	UpdateProjectProtectionBypassProtectionBypassAutomationBypass            *UpdateProjectProtectionBypassProtectionBypassAutomationBypass            `queryParam:"inline"`

	Type UpdateProjectProtectionBypassProtectionBypassUnionType
}

func CreateUpdateProjectProtectionBypassProtectionBypassUnionUpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass(updateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass) UpdateProjectProtectionBypassProtectionBypassUnion {
	typ := UpdateProjectProtectionBypassProtectionBypassUnionTypeUpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass

	return UpdateProjectProtectionBypassProtectionBypassUnion{
		UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass: &updateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass,
		Type: typ,
	}
}

func CreateUpdateProjectProtectionBypassProtectionBypassUnionUpdateProjectProtectionBypassProtectionBypassAutomationBypass(updateProjectProtectionBypassProtectionBypassAutomationBypass UpdateProjectProtectionBypassProtectionBypassAutomationBypass) UpdateProjectProtectionBypassProtectionBypassUnion {
	typ := UpdateProjectProtectionBypassProtectionBypassUnionTypeUpdateProjectProtectionBypassProtectionBypassAutomationBypass

	return UpdateProjectProtectionBypassProtectionBypassUnion{
		UpdateProjectProtectionBypassProtectionBypassAutomationBypass: &updateProjectProtectionBypassProtectionBypassAutomationBypass,
		Type: typ,
	}
}

func (u *UpdateProjectProtectionBypassProtectionBypassUnion) UnmarshalJSON(data []byte) error {

	var updateProjectProtectionBypassProtectionBypassAutomationBypass UpdateProjectProtectionBypassProtectionBypassAutomationBypass = UpdateProjectProtectionBypassProtectionBypassAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &updateProjectProtectionBypassProtectionBypassAutomationBypass, "", true, true); err == nil {
		u.UpdateProjectProtectionBypassProtectionBypassAutomationBypass = &updateProjectProtectionBypassProtectionBypassAutomationBypass
		u.Type = UpdateProjectProtectionBypassProtectionBypassUnionTypeUpdateProjectProtectionBypassProtectionBypassAutomationBypass
		return nil
	}

	var updateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass = UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass{}
	if err := utils.UnmarshalJSON(data, &updateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass, "", true, true); err == nil {
		u.UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass = &updateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass
		u.Type = UpdateProjectProtectionBypassProtectionBypassUnionTypeUpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateProjectProtectionBypassProtectionBypassUnion", string(data))
}

func (u UpdateProjectProtectionBypassProtectionBypassUnion) MarshalJSON() ([]byte, error) {
	if u.UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass != nil {
		return utils.MarshalJSON(u.UpdateProjectProtectionBypassProtectionBypassIntegrationAutomationBypass, "", true)
	}

	if u.UpdateProjectProtectionBypassProtectionBypassAutomationBypass != nil {
		return utils.MarshalJSON(u.UpdateProjectProtectionBypassProtectionBypassAutomationBypass, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateProjectProtectionBypassProtectionBypassUnion: all fields are null")
}

type UpdateProjectProtectionBypassResponseBody struct {
	ProtectionBypass map[string]UpdateProjectProtectionBypassProtectionBypassUnion `json:"protectionBypass,omitempty"`
}

func (o *UpdateProjectProtectionBypassResponseBody) GetProtectionBypass() map[string]UpdateProjectProtectionBypassProtectionBypassUnion {
	if o == nil {
		return nil
	}
	return o.ProtectionBypass
}

type UpdateProjectProtectionBypassResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateProjectProtectionBypassResponseBody
}

func (o *UpdateProjectProtectionBypassResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateProjectProtectionBypassResponse) GetObject() *UpdateProjectProtectionBypassResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
