// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
)

// UpdateRecordType - The type of the DNS record
type UpdateRecordType string

const (
	UpdateRecordTypeA     UpdateRecordType = "A"
	UpdateRecordTypeAaaa  UpdateRecordType = "AAAA"
	UpdateRecordTypeAlias UpdateRecordType = "ALIAS"
	UpdateRecordTypeCaa   UpdateRecordType = "CAA"
	UpdateRecordTypeCname UpdateRecordType = "CNAME"
	UpdateRecordTypeHTTPS UpdateRecordType = "HTTPS"
	UpdateRecordTypeMx    UpdateRecordType = "MX"
	UpdateRecordTypeSrv   UpdateRecordType = "SRV"
	UpdateRecordTypeTxt   UpdateRecordType = "TXT"
	UpdateRecordTypeNs    UpdateRecordType = "NS"
)

func (e UpdateRecordType) ToPointer() *UpdateRecordType {
	return &e
}
func (e *UpdateRecordType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = UpdateRecordType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRecordType: %v", v)
	}
}

type Srv struct {
	Target   *string `json:"target"`
	Weight   *int64  `json:"weight"`
	Port     *int64  `json:"port"`
	Priority *int64  `json:"priority"`
}

func (o *Srv) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Srv) GetWeight() *int64 {
	if o == nil {
		return nil
	}
	return o.Weight
}

func (o *Srv) GetPort() *int64 {
	if o == nil {
		return nil
	}
	return o.Port
}

func (o *Srv) GetPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

type HTTPS struct {
	Priority *int64  `json:"priority"`
	Target   *string `json:"target"`
	Params   *string `json:"params,omitempty"`
}

func (o *HTTPS) GetPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.Priority
}

func (o *HTTPS) GetTarget() *string {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *HTTPS) GetParams() *string {
	if o == nil {
		return nil
	}
	return o.Params
}

type UpdateRecordRequestBody struct {
	// The name of the DNS record
	Name *string `json:"name,omitempty"`
	// The value of the DNS record
	Value *string `json:"value,omitempty"`
	// The type of the DNS record
	Type *UpdateRecordType `json:"type,omitempty"`
	// The Time to live (TTL) value of the DNS record
	TTL *int64 `json:"ttl,omitempty"`
	// The MX priority value of the DNS record
	MxPriority *int64 `json:"mxPriority,omitempty"`
	Srv        *Srv   `json:"srv,omitempty"`
	HTTPS      *HTTPS `json:"https,omitempty"`
	// A comment to add context on what this DNS record is for
	Comment *string `json:"comment,omitempty"`
}

func (o *UpdateRecordRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateRecordRequestBody) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateRecordRequestBody) GetType() *UpdateRecordType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *UpdateRecordRequestBody) GetTTL() *int64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateRecordRequestBody) GetMxPriority() *int64 {
	if o == nil {
		return nil
	}
	return o.MxPriority
}

func (o *UpdateRecordRequestBody) GetSrv() *Srv {
	if o == nil {
		return nil
	}
	return o.Srv
}

func (o *UpdateRecordRequestBody) GetHTTPS() *HTTPS {
	if o == nil {
		return nil
	}
	return o.HTTPS
}

func (o *UpdateRecordRequestBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type UpdateRecordRequest struct {
	// The id of the DNS record
	RecordID string `pathParam:"style=simple,explode=false,name=recordId"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                 `queryParam:"style=form,explode=true,name=slug"`
	RequestBody UpdateRecordRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateRecordRequest) GetRecordID() string {
	if o == nil {
		return ""
	}
	return o.RecordID
}

func (o *UpdateRecordRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateRecordRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateRecordRequest) GetRequestBody() UpdateRecordRequestBody {
	if o == nil {
		return UpdateRecordRequestBody{}
	}
	return o.RequestBody
}

type RecordType string

const (
	RecordTypeA     RecordType = "A"
	RecordTypeAaaa  RecordType = "AAAA"
	RecordTypeAlias RecordType = "ALIAS"
	RecordTypeCaa   RecordType = "CAA"
	RecordTypeCname RecordType = "CNAME"
	RecordTypeHTTPS RecordType = "HTTPS"
	RecordTypeMx    RecordType = "MX"
	RecordTypeSrv   RecordType = "SRV"
	RecordTypeTxt   RecordType = "TXT"
	RecordTypeNs    RecordType = "NS"
)

func (e RecordType) ToPointer() *RecordType {
	return &e
}
func (e *RecordType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "A":
		fallthrough
	case "AAAA":
		fallthrough
	case "ALIAS":
		fallthrough
	case "CAA":
		fallthrough
	case "CNAME":
		fallthrough
	case "HTTPS":
		fallthrough
	case "MX":
		fallthrough
	case "SRV":
		fallthrough
	case "TXT":
		fallthrough
	case "NS":
		*e = RecordType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for RecordType: %v", v)
	}
}

type UpdateRecordDNSType string

const (
	UpdateRecordDNSTypeRecord    UpdateRecordDNSType = "record"
	UpdateRecordDNSTypeRecordSys UpdateRecordDNSType = "record-sys"
)

func (e UpdateRecordDNSType) ToPointer() *UpdateRecordDNSType {
	return &e
}
func (e *UpdateRecordDNSType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "record":
		fallthrough
	case "record-sys":
		*e = UpdateRecordDNSType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateRecordDNSType: %v", v)
	}
}

type UpdateRecordResponseBody struct {
	CreatedAt  *float64            `json:"createdAt,omitempty"`
	Creator    string              `json:"creator"`
	Domain     string              `json:"domain"`
	ID         string              `json:"id"`
	Name       string              `json:"name"`
	RecordType RecordType          `json:"recordType"`
	TTL        *float64            `json:"ttl,omitempty"`
	Type       UpdateRecordDNSType `json:"type"`
	Value      string              `json:"value"`
	Comment    *string             `json:"comment,omitempty"`
}

func (o *UpdateRecordResponseBody) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *UpdateRecordResponseBody) GetCreator() string {
	if o == nil {
		return ""
	}
	return o.Creator
}

func (o *UpdateRecordResponseBody) GetDomain() string {
	if o == nil {
		return ""
	}
	return o.Domain
}

func (o *UpdateRecordResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateRecordResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateRecordResponseBody) GetRecordType() RecordType {
	if o == nil {
		return RecordType("")
	}
	return o.RecordType
}

func (o *UpdateRecordResponseBody) GetTTL() *float64 {
	if o == nil {
		return nil
	}
	return o.TTL
}

func (o *UpdateRecordResponseBody) GetType() UpdateRecordDNSType {
	if o == nil {
		return UpdateRecordDNSType("")
	}
	return o.Type
}

func (o *UpdateRecordResponseBody) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateRecordResponseBody) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type UpdateRecordResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateRecordResponseBody
}

func (o *UpdateRecordResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateRecordResponse) GetObject() *UpdateRecordResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
