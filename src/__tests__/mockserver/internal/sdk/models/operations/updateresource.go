// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateResourceOwnership string

const (
	UpdateResourceOwnershipOwned   UpdateResourceOwnership = "owned"
	UpdateResourceOwnershipLinked  UpdateResourceOwnership = "linked"
	UpdateResourceOwnershipSandbox UpdateResourceOwnership = "sandbox"
)

func (e UpdateResourceOwnership) ToPointer() *UpdateResourceOwnership {
	return &e
}
func (e *UpdateResourceOwnership) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "owned":
		fallthrough
	case "linked":
		fallthrough
	case "sandbox":
		*e = UpdateResourceOwnership(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateResourceOwnership: %v", v)
	}
}

type UpdateResourceStatus string

const (
	UpdateResourceStatusReady       UpdateResourceStatus = "ready"
	UpdateResourceStatusPending     UpdateResourceStatus = "pending"
	UpdateResourceStatusOnboarding  UpdateResourceStatus = "onboarding"
	UpdateResourceStatusSuspended   UpdateResourceStatus = "suspended"
	UpdateResourceStatusResumed     UpdateResourceStatus = "resumed"
	UpdateResourceStatusUninstalled UpdateResourceStatus = "uninstalled"
	UpdateResourceStatusError       UpdateResourceStatus = "error"
)

func (e UpdateResourceStatus) ToPointer() *UpdateResourceStatus {
	return &e
}
func (e *UpdateResourceStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ready":
		fallthrough
	case "pending":
		fallthrough
	case "onboarding":
		fallthrough
	case "suspended":
		fallthrough
	case "resumed":
		fallthrough
	case "uninstalled":
		fallthrough
	case "error":
		*e = UpdateResourceStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateResourceStatus: %v", v)
	}
}

type UpdateResourceType string

const (
	UpdateResourceTypePrepayment   UpdateResourceType = "prepayment"
	UpdateResourceTypeSubscription UpdateResourceType = "subscription"
)

func (e UpdateResourceType) ToPointer() *UpdateResourceType {
	return &e
}
func (e *UpdateResourceType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "prepayment":
		fallthrough
	case "subscription":
		*e = UpdateResourceType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateResourceType: %v", v)
	}
}

type UpdateResourceDetail struct {
	Label string  `json:"label"`
	Value *string `json:"value,omitempty"`
}

func (o *UpdateResourceDetail) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UpdateResourceDetail) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateResourceHighlightedDetail struct {
	Label string  `json:"label"`
	Value *string `json:"value,omitempty"`
}

func (o *UpdateResourceHighlightedDetail) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *UpdateResourceHighlightedDetail) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

type UpdateResourceBillingPlan struct {
	ID                    string                            `json:"id"`
	Type                  UpdateResourceType                `json:"type"`
	Name                  string                            `json:"name"`
	Description           *string                           `json:"description,omitempty"`
	PaymentMethodRequired *bool                             `json:"paymentMethodRequired,omitempty"`
	Cost                  *string                           `json:"cost,omitempty"`
	Details               []UpdateResourceDetail            `json:"details,omitempty"`
	HighlightedDetails    []UpdateResourceHighlightedDetail `json:"highlightedDetails,omitempty"`
	EffectiveDate         *string                           `json:"effectiveDate,omitempty"`
	AdditionalProperties  map[string]any                    `additionalProperties:"true" json:"-"`
}

func (u UpdateResourceBillingPlan) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateResourceBillingPlan) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"id", "type", "name"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateResourceBillingPlan) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UpdateResourceBillingPlan) GetType() UpdateResourceType {
	if o == nil {
		return UpdateResourceType("")
	}
	return o.Type
}

func (o *UpdateResourceBillingPlan) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateResourceBillingPlan) GetDescription() *string {
	if o == nil {
		return nil
	}
	return o.Description
}

func (o *UpdateResourceBillingPlan) GetPaymentMethodRequired() *bool {
	if o == nil {
		return nil
	}
	return o.PaymentMethodRequired
}

func (o *UpdateResourceBillingPlan) GetCost() *string {
	if o == nil {
		return nil
	}
	return o.Cost
}

func (o *UpdateResourceBillingPlan) GetDetails() []UpdateResourceDetail {
	if o == nil {
		return nil
	}
	return o.Details
}

func (o *UpdateResourceBillingPlan) GetHighlightedDetails() []UpdateResourceHighlightedDetail {
	if o == nil {
		return nil
	}
	return o.HighlightedDetails
}

func (o *UpdateResourceBillingPlan) GetEffectiveDate() *string {
	if o == nil {
		return nil
	}
	return o.EffectiveDate
}

func (o *UpdateResourceBillingPlan) GetAdditionalProperties() map[string]any {
	if o == nil {
		return nil
	}
	return o.AdditionalProperties
}

type UpdateResourceLevel string

const (
	UpdateResourceLevelInfo  UpdateResourceLevel = "info"
	UpdateResourceLevelWarn  UpdateResourceLevel = "warn"
	UpdateResourceLevelError UpdateResourceLevel = "error"
)

func (e UpdateResourceLevel) ToPointer() *UpdateResourceLevel {
	return &e
}
func (e *UpdateResourceLevel) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "info":
		fallthrough
	case "warn":
		fallthrough
	case "error":
		*e = UpdateResourceLevel(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateResourceLevel: %v", v)
	}
}

type UpdateResourceNotification struct {
	Level   UpdateResourceLevel `json:"level"`
	Title   string              `json:"title"`
	Message *string             `json:"message,omitempty"`
	Href    *string             `json:"href,omitempty"`
}

func (o *UpdateResourceNotification) GetLevel() UpdateResourceLevel {
	if o == nil {
		return UpdateResourceLevel("")
	}
	return o.Level
}

func (o *UpdateResourceNotification) GetTitle() string {
	if o == nil {
		return ""
	}
	return o.Title
}

func (o *UpdateResourceNotification) GetMessage() *string {
	if o == nil {
		return nil
	}
	return o.Message
}

func (o *UpdateResourceNotification) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

// UpdateResourceEnvironmentOverrides - A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
type UpdateResourceEnvironmentOverrides struct {
	// Value used for development environment.
	Development *string `json:"development,omitempty"`
	// Value used for preview environment.
	Preview *string `json:"preview,omitempty"`
	// Value used for production environment.
	Production *string `json:"production,omitempty"`
}

func (o *UpdateResourceEnvironmentOverrides) GetDevelopment() *string {
	if o == nil {
		return nil
	}
	return o.Development
}

func (o *UpdateResourceEnvironmentOverrides) GetPreview() *string {
	if o == nil {
		return nil
	}
	return o.Preview
}

func (o *UpdateResourceEnvironmentOverrides) GetProduction() *string {
	if o == nil {
		return nil
	}
	return o.Production
}

type UpdateResourceSecret struct {
	Name   string  `json:"name"`
	Value  string  `json:"value"`
	Prefix *string `json:"prefix,omitempty"`
	// A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
	EnvironmentOverrides *UpdateResourceEnvironmentOverrides `json:"environmentOverrides,omitempty"`
}

func (o *UpdateResourceSecret) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *UpdateResourceSecret) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

func (o *UpdateResourceSecret) GetPrefix() *string {
	if o == nil {
		return nil
	}
	return o.Prefix
}

func (o *UpdateResourceSecret) GetEnvironmentOverrides() *UpdateResourceEnvironmentOverrides {
	if o == nil {
		return nil
	}
	return o.EnvironmentOverrides
}

type UpdateResourceRequestBody struct {
	Ownership    *UpdateResourceOwnership    `json:"ownership,omitempty"`
	Name         *string                     `json:"name,omitempty"`
	Status       *UpdateResourceStatus       `json:"status,omitempty"`
	Metadata     map[string]any              `json:"metadata,omitempty"`
	BillingPlan  *UpdateResourceBillingPlan  `json:"billingPlan,omitempty"`
	Notification *UpdateResourceNotification `json:"notification,omitempty"`
	Extras       map[string]any              `json:"extras,omitempty"`
	Secrets      []UpdateResourceSecret      `json:"secrets,omitempty"`
}

func (o *UpdateResourceRequestBody) GetOwnership() *UpdateResourceOwnership {
	if o == nil {
		return nil
	}
	return o.Ownership
}

func (o *UpdateResourceRequestBody) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *UpdateResourceRequestBody) GetStatus() *UpdateResourceStatus {
	if o == nil {
		return nil
	}
	return o.Status
}

func (o *UpdateResourceRequestBody) GetMetadata() map[string]any {
	if o == nil {
		return nil
	}
	return o.Metadata
}

func (o *UpdateResourceRequestBody) GetBillingPlan() *UpdateResourceBillingPlan {
	if o == nil {
		return nil
	}
	return o.BillingPlan
}

func (o *UpdateResourceRequestBody) GetNotification() *UpdateResourceNotification {
	if o == nil {
		return nil
	}
	return o.Notification
}

func (o *UpdateResourceRequestBody) GetExtras() map[string]any {
	if o == nil {
		return nil
	}
	return o.Extras
}

func (o *UpdateResourceRequestBody) GetSecrets() []UpdateResourceSecret {
	if o == nil {
		return nil
	}
	return o.Secrets
}

type UpdateResourceRequest struct {
	IntegrationConfigurationID string                     `pathParam:"style=simple,explode=false,name=integrationConfigurationId"`
	ResourceID                 string                     `pathParam:"style=simple,explode=false,name=resourceId"`
	RequestBody                *UpdateResourceRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateResourceRequest) GetIntegrationConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.IntegrationConfigurationID
}

func (o *UpdateResourceRequest) GetResourceID() string {
	if o == nil {
		return ""
	}
	return o.ResourceID
}

func (o *UpdateResourceRequest) GetRequestBody() *UpdateResourceRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateResourceResponseBody struct {
	Name string `json:"name"`
}

func (o *UpdateResourceResponseBody) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

type UpdateResourceResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateResourceResponseBody
}

func (o *UpdateResourceResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateResourceResponse) GetObject() *UpdateResourceResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
