// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateRollingReleaseConfigRequest struct {
	// Project ID or project name (URL-encoded)
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (o *UpdateRollingReleaseConfigRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateRollingReleaseConfigRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateRollingReleaseConfigRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// UpdateRollingReleaseConfigStage - A stage object configured for a rolling release once a new deployment is triggered the first stage will be read in the proxy for first time visitors, and if a RNG < targetPercentage then it will serve the new deployment. Upon approval the next stage will be read, etc.
type UpdateRollingReleaseConfigStage struct {
	// The percentage of traffic to serve to the canary deployment (0-100)
	TargetPercentage float64 `json:"targetPercentage"`
	// Whether or not this stage requires manual approval to proceed
	RequireApproval *bool `json:"requireApproval,omitempty"`
	// Duration in minutes for automatic advancement to the next stage
	Duration *float64 `json:"duration,omitempty"`
}

func (o *UpdateRollingReleaseConfigStage) GetTargetPercentage() float64 {
	if o == nil {
		return 0.0
	}
	return o.TargetPercentage
}

func (o *UpdateRollingReleaseConfigStage) GetRequireApproval() *bool {
	if o == nil {
		return nil
	}
	return o.RequireApproval
}

func (o *UpdateRollingReleaseConfigStage) GetDuration() *float64 {
	if o == nil {
		return nil
	}
	return o.Duration
}

type UpdateRollingReleaseConfigRollingRelease struct {
	Stages []UpdateRollingReleaseConfigStage `json:"stages,omitempty"`
}

func (o *UpdateRollingReleaseConfigRollingRelease) GetStages() []UpdateRollingReleaseConfigStage {
	if o == nil {
		return nil
	}
	return o.Stages
}

type UpdateRollingReleaseConfigResponseBody2 struct {
	RollingRelease *UpdateRollingReleaseConfigRollingRelease `json:"rollingRelease"`
}

func (o *UpdateRollingReleaseConfigResponseBody2) GetRollingRelease() *UpdateRollingReleaseConfigRollingRelease {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

type UpdateRollingReleaseConfigResponseBody1 struct {
	RollingRelease any `json:"rollingRelease"`
}

func (o *UpdateRollingReleaseConfigResponseBody1) GetRollingRelease() any {
	if o == nil {
		return nil
	}
	return o.RollingRelease
}

type UpdateRollingReleaseConfigResponseBodyType string

const (
	UpdateRollingReleaseConfigResponseBodyTypeUpdateRollingReleaseConfigResponseBody1 UpdateRollingReleaseConfigResponseBodyType = "updateRollingReleaseConfig_ResponseBody_1"
	UpdateRollingReleaseConfigResponseBodyTypeUpdateRollingReleaseConfigResponseBody2 UpdateRollingReleaseConfigResponseBodyType = "updateRollingReleaseConfig_ResponseBody_2"
)

type UpdateRollingReleaseConfigResponseBody struct {
	UpdateRollingReleaseConfigResponseBody1 *UpdateRollingReleaseConfigResponseBody1 `queryParam:"inline"`
	UpdateRollingReleaseConfigResponseBody2 *UpdateRollingReleaseConfigResponseBody2 `queryParam:"inline"`

	Type UpdateRollingReleaseConfigResponseBodyType
}

func CreateUpdateRollingReleaseConfigResponseBodyUpdateRollingReleaseConfigResponseBody1(updateRollingReleaseConfigResponseBody1 UpdateRollingReleaseConfigResponseBody1) UpdateRollingReleaseConfigResponseBody {
	typ := UpdateRollingReleaseConfigResponseBodyTypeUpdateRollingReleaseConfigResponseBody1

	return UpdateRollingReleaseConfigResponseBody{
		UpdateRollingReleaseConfigResponseBody1: &updateRollingReleaseConfigResponseBody1,
		Type:                                    typ,
	}
}

func CreateUpdateRollingReleaseConfigResponseBodyUpdateRollingReleaseConfigResponseBody2(updateRollingReleaseConfigResponseBody2 UpdateRollingReleaseConfigResponseBody2) UpdateRollingReleaseConfigResponseBody {
	typ := UpdateRollingReleaseConfigResponseBodyTypeUpdateRollingReleaseConfigResponseBody2

	return UpdateRollingReleaseConfigResponseBody{
		UpdateRollingReleaseConfigResponseBody2: &updateRollingReleaseConfigResponseBody2,
		Type:                                    typ,
	}
}

func (u *UpdateRollingReleaseConfigResponseBody) UnmarshalJSON(data []byte) error {

	var updateRollingReleaseConfigResponseBody1 UpdateRollingReleaseConfigResponseBody1 = UpdateRollingReleaseConfigResponseBody1{}
	if err := utils.UnmarshalJSON(data, &updateRollingReleaseConfigResponseBody1, "", true, true); err == nil {
		u.UpdateRollingReleaseConfigResponseBody1 = &updateRollingReleaseConfigResponseBody1
		u.Type = UpdateRollingReleaseConfigResponseBodyTypeUpdateRollingReleaseConfigResponseBody1
		return nil
	}

	var updateRollingReleaseConfigResponseBody2 UpdateRollingReleaseConfigResponseBody2 = UpdateRollingReleaseConfigResponseBody2{}
	if err := utils.UnmarshalJSON(data, &updateRollingReleaseConfigResponseBody2, "", true, true); err == nil {
		u.UpdateRollingReleaseConfigResponseBody2 = &updateRollingReleaseConfigResponseBody2
		u.Type = UpdateRollingReleaseConfigResponseBodyTypeUpdateRollingReleaseConfigResponseBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateRollingReleaseConfigResponseBody", string(data))
}

func (u UpdateRollingReleaseConfigResponseBody) MarshalJSON() ([]byte, error) {
	if u.UpdateRollingReleaseConfigResponseBody1 != nil {
		return utils.MarshalJSON(u.UpdateRollingReleaseConfigResponseBody1, "", true)
	}

	if u.UpdateRollingReleaseConfigResponseBody2 != nil {
		return utils.MarshalJSON(u.UpdateRollingReleaseConfigResponseBody2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateRollingReleaseConfigResponseBody: all fields are null")
}

type UpdateRollingReleaseConfigResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	OneOf    *UpdateRollingReleaseConfigResponseBody
}

func (o *UpdateRollingReleaseConfigResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateRollingReleaseConfigResponse) GetOneOf() *UpdateRollingReleaseConfigResponseBody {
	if o == nil {
		return nil
	}
	return o.OneOf
}
