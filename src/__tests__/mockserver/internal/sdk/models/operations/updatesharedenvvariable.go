// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
	"time"
)

type UpdatesTarget string

const (
	UpdatesTargetProduction  UpdatesTarget = "production"
	UpdatesTargetPreview     UpdatesTarget = "preview"
	UpdatesTargetDevelopment UpdatesTarget = "development"
)

func (e UpdatesTarget) ToPointer() *UpdatesTarget {
	return &e
}
func (e *UpdatesTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdatesTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatesTarget: %v", v)
	}
}

// ProjectIDUpdates - Incrementally update project associations without specifying the full list
type ProjectIDUpdates struct {
	// Project IDs to add to this environment variable
	Link []string `json:"link,omitempty"`
	// Project IDs to remove from this environment variable
	Unlink []string `json:"unlink,omitempty"`
}

func (o *ProjectIDUpdates) GetLink() []string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *ProjectIDUpdates) GetUnlink() []string {
	if o == nil {
		return nil
	}
	return o.Unlink
}

// UpdatesType - The new type of the Shared Environment Variable
type UpdatesType string

const (
	UpdatesTypeEncrypted UpdatesType = "encrypted"
	UpdatesTypeSensitive UpdatesType = "sensitive"
)

func (e UpdatesType) ToPointer() *UpdatesType {
	return &e
}
func (e *UpdatesType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		*e = UpdatesType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatesType: %v", v)
	}
}

type Updates struct {
	// The name of the Shared Environment Variable
	Key *string `json:"key,omitempty"`
	// The value of the Shared Environment Variable
	Value *string `json:"value,omitempty"`
	// The target environment of the Shared Environment Variable
	Target []UpdatesTarget `json:"target,omitempty"`
	// Associate a Shared Environment Variable to projects.
	ProjectID []string `json:"projectId,omitempty"`
	// Incrementally update project associations without specifying the full list
	ProjectIDUpdates *ProjectIDUpdates `json:"projectIdUpdates,omitempty"`
	// The new type of the Shared Environment Variable
	Type *UpdatesType `json:"type,omitempty"`
	// A comment to add context on what this Shared Environment Variable is for
	Comment *string `json:"comment,omitempty"`
}

func (o *Updates) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Updates) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Updates) GetTarget() []UpdatesTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Updates) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Updates) GetProjectIDUpdates() *ProjectIDUpdates {
	if o == nil {
		return nil
	}
	return o.ProjectIDUpdates
}

func (o *Updates) GetType() *UpdatesType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Updates) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

type UpdateSharedEnvVariableRequestBody struct {
	Updates map[string]Updates `json:"updates"`
}

func (o *UpdateSharedEnvVariableRequestBody) GetUpdates() map[string]Updates {
	if o == nil {
		return map[string]Updates{}
	}
	return o.Updates
}

type UpdateSharedEnvVariableRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UpdateSharedEnvVariableRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateSharedEnvVariableRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateSharedEnvVariableRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateSharedEnvVariableRequest) GetRequestBody() *UpdateSharedEnvVariableRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UpdatedType - The type of this cosmos doc instance, if blank, assume secret.
type UpdatedType string

const (
	UpdatedTypeEncrypted UpdatedType = "encrypted"
	UpdatedTypeSensitive UpdatedType = "sensitive"
	UpdatedTypeSystem    UpdatedType = "system"
	UpdatedTypePlain     UpdatedType = "plain"
)

func (e UpdatedType) ToPointer() *UpdatedType {
	return &e
}
func (e *UpdatedType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "encrypted":
		fallthrough
	case "sensitive":
		fallthrough
	case "system":
		fallthrough
	case "plain":
		*e = UpdatedType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatedType: %v", v)
	}
}

// UpdatedTarget - environments this env variable targets
type UpdatedTarget string

const (
	UpdatedTargetProduction  UpdatedTarget = "production"
	UpdatedTargetPreview     UpdatedTarget = "preview"
	UpdatedTargetDevelopment UpdatedTarget = "development"
)

func (e UpdatedTarget) ToPointer() *UpdatedTarget {
	return &e
}
func (e *UpdatedTarget) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdatedTarget(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdatedTarget: %v", v)
	}
}

type Updated struct {
	// The date when the Shared Env Var was created.
	Created *time.Time `json:"created,omitempty"`
	// The name of the Shared Env Var.
	Key *string `json:"key,omitempty"`
	// The unique identifier of the owner (team) the Shared Env Var was created for.
	OwnerID *string `json:"ownerId,omitempty"`
	// The unique identifier of the Shared Env Var.
	ID *string `json:"id,omitempty"`
	// The unique identifier of the user who created the Shared Env Var.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The unique identifier of the user who deleted the Shared Env Var.
	DeletedBy *string `json:"deletedBy,omitempty"`
	// The unique identifier of the user who last updated the Shared Env Var.
	UpdatedBy *string `json:"updatedBy,omitempty"`
	// Timestamp for when the Shared Env Var was created.
	CreatedAt *float64 `json:"createdAt,omitempty"`
	// Timestamp for when the Shared Env Var was (soft) deleted.
	DeletedAt *float64 `json:"deletedAt,omitempty"`
	// Timestamp for when the Shared Env Var was last updated.
	UpdatedAt *float64 `json:"updatedAt,omitempty"`
	// The value of the Shared Env Var.
	Value *string `json:"value,omitempty"`
	// The unique identifiers of the projects which the Shared Env Var is linked to.
	ProjectID []string `json:"projectId,omitempty"`
	// The type of this cosmos doc instance, if blank, assume secret.
	Type *UpdatedType `json:"type,omitempty"`
	// environments this env variable targets
	Target []UpdatedTarget `json:"target,omitempty"`
	// whether or not this env varible applies to custom environments
	ApplyToAllCustomEnvironments *bool `json:"applyToAllCustomEnvironments,omitempty"`
	// whether or not this env variable is decrypted
	Decrypted *bool `json:"decrypted,omitempty"`
	// A user provided comment that describes what this Shared Env Var is for.
	Comment *string `json:"comment,omitempty"`
	// The last editor full name or username.
	LastEditedByDisplayName *string `json:"lastEditedByDisplayName,omitempty"`
}

func (u Updated) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *Updated) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (o *Updated) GetCreated() *time.Time {
	if o == nil {
		return nil
	}
	return o.Created
}

func (o *Updated) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *Updated) GetOwnerID() *string {
	if o == nil {
		return nil
	}
	return o.OwnerID
}

func (o *Updated) GetID() *string {
	if o == nil {
		return nil
	}
	return o.ID
}

func (o *Updated) GetCreatedBy() *string {
	if o == nil {
		return nil
	}
	return o.CreatedBy
}

func (o *Updated) GetDeletedBy() *string {
	if o == nil {
		return nil
	}
	return o.DeletedBy
}

func (o *Updated) GetUpdatedBy() *string {
	if o == nil {
		return nil
	}
	return o.UpdatedBy
}

func (o *Updated) GetCreatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.CreatedAt
}

func (o *Updated) GetDeletedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.DeletedAt
}

func (o *Updated) GetUpdatedAt() *float64 {
	if o == nil {
		return nil
	}
	return o.UpdatedAt
}

func (o *Updated) GetValue() *string {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *Updated) GetProjectID() []string {
	if o == nil {
		return nil
	}
	return o.ProjectID
}

func (o *Updated) GetType() *UpdatedType {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *Updated) GetTarget() []UpdatedTarget {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *Updated) GetApplyToAllCustomEnvironments() *bool {
	if o == nil {
		return nil
	}
	return o.ApplyToAllCustomEnvironments
}

func (o *Updated) GetDecrypted() *bool {
	if o == nil {
		return nil
	}
	return o.Decrypted
}

func (o *Updated) GetComment() *string {
	if o == nil {
		return nil
	}
	return o.Comment
}

func (o *Updated) GetLastEditedByDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.LastEditedByDisplayName
}

type UpdateSharedEnvVariableValueEnum string

const (
	UpdateSharedEnvVariableValueEnumProduction  UpdateSharedEnvVariableValueEnum = "production"
	UpdateSharedEnvVariableValueEnumPreview     UpdateSharedEnvVariableValueEnum = "preview"
	UpdateSharedEnvVariableValueEnumDevelopment UpdateSharedEnvVariableValueEnum = "development"
)

func (e UpdateSharedEnvVariableValueEnum) ToPointer() *UpdateSharedEnvVariableValueEnum {
	return &e
}
func (e *UpdateSharedEnvVariableValueEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateSharedEnvVariableValueEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSharedEnvVariableValueEnum: %v", v)
	}
}

type UpdateSharedEnvVariableValueUnionType string

const (
	UpdateSharedEnvVariableValueUnionTypeStr                                     UpdateSharedEnvVariableValueUnionType = "str"
	UpdateSharedEnvVariableValueUnionTypeArrayOfUpdateSharedEnvVariableValueEnum UpdateSharedEnvVariableValueUnionType = "arrayOfUpdateSharedEnvVariableValueEnum"
)

type UpdateSharedEnvVariableValueUnion struct {
	Str                                     *string                            `queryParam:"inline"`
	ArrayOfUpdateSharedEnvVariableValueEnum []UpdateSharedEnvVariableValueEnum `queryParam:"inline"`

	Type UpdateSharedEnvVariableValueUnionType
}

func CreateUpdateSharedEnvVariableValueUnionStr(str string) UpdateSharedEnvVariableValueUnion {
	typ := UpdateSharedEnvVariableValueUnionTypeStr

	return UpdateSharedEnvVariableValueUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateSharedEnvVariableValueUnionArrayOfUpdateSharedEnvVariableValueEnum(arrayOfUpdateSharedEnvVariableValueEnum []UpdateSharedEnvVariableValueEnum) UpdateSharedEnvVariableValueUnion {
	typ := UpdateSharedEnvVariableValueUnionTypeArrayOfUpdateSharedEnvVariableValueEnum

	return UpdateSharedEnvVariableValueUnion{
		ArrayOfUpdateSharedEnvVariableValueEnum: arrayOfUpdateSharedEnvVariableValueEnum,
		Type:                                    typ,
	}
}

func (u *UpdateSharedEnvVariableValueUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateSharedEnvVariableValueUnionTypeStr
		return nil
	}

	var arrayOfUpdateSharedEnvVariableValueEnum []UpdateSharedEnvVariableValueEnum = []UpdateSharedEnvVariableValueEnum{}
	if err := utils.UnmarshalJSON(data, &arrayOfUpdateSharedEnvVariableValueEnum, "", true, nil); err == nil {
		u.ArrayOfUpdateSharedEnvVariableValueEnum = arrayOfUpdateSharedEnvVariableValueEnum
		u.Type = UpdateSharedEnvVariableValueUnionTypeArrayOfUpdateSharedEnvVariableValueEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateSharedEnvVariableValueUnion", string(data))
}

func (u UpdateSharedEnvVariableValueUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.ArrayOfUpdateSharedEnvVariableValueEnum != nil {
		return utils.MarshalJSON(u.ArrayOfUpdateSharedEnvVariableValueEnum, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateSharedEnvVariableValueUnion: all fields are null")
}

type UpdateSharedEnvVariableTargetErrorEnum2 string

const (
	UpdateSharedEnvVariableTargetErrorEnum2Production  UpdateSharedEnvVariableTargetErrorEnum2 = "production"
	UpdateSharedEnvVariableTargetErrorEnum2Preview     UpdateSharedEnvVariableTargetErrorEnum2 = "preview"
	UpdateSharedEnvVariableTargetErrorEnum2Development UpdateSharedEnvVariableTargetErrorEnum2 = "development"
)

func (e UpdateSharedEnvVariableTargetErrorEnum2) ToPointer() *UpdateSharedEnvVariableTargetErrorEnum2 {
	return &e
}
func (e *UpdateSharedEnvVariableTargetErrorEnum2) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateSharedEnvVariableTargetErrorEnum2(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSharedEnvVariableTargetErrorEnum2: %v", v)
	}
}

type UpdateSharedEnvVariableTargetErrorEnum1 string

const (
	UpdateSharedEnvVariableTargetErrorEnum1Production  UpdateSharedEnvVariableTargetErrorEnum1 = "production"
	UpdateSharedEnvVariableTargetErrorEnum1Preview     UpdateSharedEnvVariableTargetErrorEnum1 = "preview"
	UpdateSharedEnvVariableTargetErrorEnum1Development UpdateSharedEnvVariableTargetErrorEnum1 = "development"
)

func (e UpdateSharedEnvVariableTargetErrorEnum1) ToPointer() *UpdateSharedEnvVariableTargetErrorEnum1 {
	return &e
}
func (e *UpdateSharedEnvVariableTargetErrorEnum1) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "production":
		fallthrough
	case "preview":
		fallthrough
	case "development":
		*e = UpdateSharedEnvVariableTargetErrorEnum1(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateSharedEnvVariableTargetErrorEnum1: %v", v)
	}
}

type UpdateSharedEnvVariableTargetUnionType string

const (
	UpdateSharedEnvVariableTargetUnionTypeArrayOfUpdateSharedEnvVariableTargetErrorEnum1 UpdateSharedEnvVariableTargetUnionType = "arrayOfUpdateSharedEnvVariableTargetErrorEnum1"
	UpdateSharedEnvVariableTargetUnionTypeUpdateSharedEnvVariableTargetErrorEnum2        UpdateSharedEnvVariableTargetUnionType = "updateSharedEnvVariable_target_error_enum_2"
)

type UpdateSharedEnvVariableTargetUnion struct {
	ArrayOfUpdateSharedEnvVariableTargetErrorEnum1 []UpdateSharedEnvVariableTargetErrorEnum1 `queryParam:"inline"`
	UpdateSharedEnvVariableTargetErrorEnum2        *UpdateSharedEnvVariableTargetErrorEnum2  `queryParam:"inline"`

	Type UpdateSharedEnvVariableTargetUnionType
}

func CreateUpdateSharedEnvVariableTargetUnionArrayOfUpdateSharedEnvVariableTargetErrorEnum1(arrayOfUpdateSharedEnvVariableTargetErrorEnum1 []UpdateSharedEnvVariableTargetErrorEnum1) UpdateSharedEnvVariableTargetUnion {
	typ := UpdateSharedEnvVariableTargetUnionTypeArrayOfUpdateSharedEnvVariableTargetErrorEnum1

	return UpdateSharedEnvVariableTargetUnion{
		ArrayOfUpdateSharedEnvVariableTargetErrorEnum1: arrayOfUpdateSharedEnvVariableTargetErrorEnum1,
		Type: typ,
	}
}

func CreateUpdateSharedEnvVariableTargetUnionUpdateSharedEnvVariableTargetErrorEnum2(updateSharedEnvVariableTargetErrorEnum2 UpdateSharedEnvVariableTargetErrorEnum2) UpdateSharedEnvVariableTargetUnion {
	typ := UpdateSharedEnvVariableTargetUnionTypeUpdateSharedEnvVariableTargetErrorEnum2

	return UpdateSharedEnvVariableTargetUnion{
		UpdateSharedEnvVariableTargetErrorEnum2: &updateSharedEnvVariableTargetErrorEnum2,
		Type:                                    typ,
	}
}

func (u *UpdateSharedEnvVariableTargetUnion) UnmarshalJSON(data []byte) error {

	var arrayOfUpdateSharedEnvVariableTargetErrorEnum1 []UpdateSharedEnvVariableTargetErrorEnum1 = []UpdateSharedEnvVariableTargetErrorEnum1{}
	if err := utils.UnmarshalJSON(data, &arrayOfUpdateSharedEnvVariableTargetErrorEnum1, "", true, nil); err == nil {
		u.ArrayOfUpdateSharedEnvVariableTargetErrorEnum1 = arrayOfUpdateSharedEnvVariableTargetErrorEnum1
		u.Type = UpdateSharedEnvVariableTargetUnionTypeArrayOfUpdateSharedEnvVariableTargetErrorEnum1
		return nil
	}

	var updateSharedEnvVariableTargetErrorEnum2 UpdateSharedEnvVariableTargetErrorEnum2 = UpdateSharedEnvVariableTargetErrorEnum2("")
	if err := utils.UnmarshalJSON(data, &updateSharedEnvVariableTargetErrorEnum2, "", true, nil); err == nil {
		u.UpdateSharedEnvVariableTargetErrorEnum2 = &updateSharedEnvVariableTargetErrorEnum2
		u.Type = UpdateSharedEnvVariableTargetUnionTypeUpdateSharedEnvVariableTargetErrorEnum2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateSharedEnvVariableTargetUnion", string(data))
}

func (u UpdateSharedEnvVariableTargetUnion) MarshalJSON() ([]byte, error) {
	if u.ArrayOfUpdateSharedEnvVariableTargetErrorEnum1 != nil {
		return utils.MarshalJSON(u.ArrayOfUpdateSharedEnvVariableTargetErrorEnum1, "", true)
	}

	if u.UpdateSharedEnvVariableTargetErrorEnum2 != nil {
		return utils.MarshalJSON(u.UpdateSharedEnvVariableTargetErrorEnum2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateSharedEnvVariableTargetUnion: all fields are null")
}

type UpdateSharedEnvVariableError struct {
	Code      string                              `json:"code"`
	Message   string                              `json:"message"`
	Key       *string                             `json:"key,omitempty"`
	EnvVarID  *string                             `json:"envVarId,omitempty"`
	EnvVarKey *string                             `json:"envVarKey,omitempty"`
	Action    *string                             `json:"action,omitempty"`
	Link      *string                             `json:"link,omitempty"`
	Value     *UpdateSharedEnvVariableValueUnion  `json:"value,omitempty"`
	GitBranch *string                             `json:"gitBranch,omitempty"`
	Target    *UpdateSharedEnvVariableTargetUnion `json:"target,omitempty"`
	Project   *string                             `json:"project,omitempty"`
}

func (o *UpdateSharedEnvVariableError) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *UpdateSharedEnvVariableError) GetMessage() string {
	if o == nil {
		return ""
	}
	return o.Message
}

func (o *UpdateSharedEnvVariableError) GetKey() *string {
	if o == nil {
		return nil
	}
	return o.Key
}

func (o *UpdateSharedEnvVariableError) GetEnvVarID() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarID
}

func (o *UpdateSharedEnvVariableError) GetEnvVarKey() *string {
	if o == nil {
		return nil
	}
	return o.EnvVarKey
}

func (o *UpdateSharedEnvVariableError) GetAction() *string {
	if o == nil {
		return nil
	}
	return o.Action
}

func (o *UpdateSharedEnvVariableError) GetLink() *string {
	if o == nil {
		return nil
	}
	return o.Link
}

func (o *UpdateSharedEnvVariableError) GetValue() *UpdateSharedEnvVariableValueUnion {
	if o == nil {
		return nil
	}
	return o.Value
}

func (o *UpdateSharedEnvVariableError) GetGitBranch() *string {
	if o == nil {
		return nil
	}
	return o.GitBranch
}

func (o *UpdateSharedEnvVariableError) GetTarget() *UpdateSharedEnvVariableTargetUnion {
	if o == nil {
		return nil
	}
	return o.Target
}

func (o *UpdateSharedEnvVariableError) GetProject() *string {
	if o == nil {
		return nil
	}
	return o.Project
}

type UpdateSharedEnvVariableFailed struct {
	Error UpdateSharedEnvVariableError `json:"error"`
}

func (o *UpdateSharedEnvVariableFailed) GetError() UpdateSharedEnvVariableError {
	if o == nil {
		return UpdateSharedEnvVariableError{}
	}
	return o.Error
}

type UpdateSharedEnvVariableResponseBody struct {
	Updated []Updated                       `json:"updated"`
	Failed  []UpdateSharedEnvVariableFailed `json:"failed"`
}

func (o *UpdateSharedEnvVariableResponseBody) GetUpdated() []Updated {
	if o == nil {
		return []Updated{}
	}
	return o.Updated
}

func (o *UpdateSharedEnvVariableResponseBody) GetFailed() []UpdateSharedEnvVariableFailed {
	if o == nil {
		return []UpdateSharedEnvVariableFailed{}
	}
	return o.Failed
}

type UpdateSharedEnvVariableResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UpdateSharedEnvVariableResponseBody
}

func (o *UpdateSharedEnvVariableResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateSharedEnvVariableResponse) GetObject() *UpdateSharedEnvVariableResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
