// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type UpdateStaticIpsRequestBody2 struct {
	// Whether to use Static IPs for builds.
	Builds  *bool    `json:"builds,omitempty"`
	Regions []string `json:"regions"`
}

func (u UpdateStaticIpsRequestBody2) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateStaticIpsRequestBody2) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"regions"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateStaticIpsRequestBody2) GetBuilds() *bool {
	if o == nil {
		return nil
	}
	return o.Builds
}

func (o *UpdateStaticIpsRequestBody2) GetRegions() []string {
	if o == nil {
		return []string{}
	}
	return o.Regions
}

type UpdateStaticIpsRequestBody1 struct {
	// Whether to use Static IPs for builds.
	Builds  bool     `json:"builds"`
	Regions []string `json:"regions,omitempty"`
}

func (u UpdateStaticIpsRequestBody1) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(u, "", false)
}

func (u *UpdateStaticIpsRequestBody1) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &u, "", false, []string{"builds"}); err != nil {
		return err
	}
	return nil
}

func (o *UpdateStaticIpsRequestBody1) GetBuilds() bool {
	if o == nil {
		return false
	}
	return o.Builds
}

func (o *UpdateStaticIpsRequestBody1) GetRegions() []string {
	if o == nil {
		return nil
	}
	return o.Regions
}

type UpdateStaticIpsRequestBodyType string

const (
	UpdateStaticIpsRequestBodyTypeUpdateStaticIpsRequestBody1 UpdateStaticIpsRequestBodyType = "updateStaticIps_RequestBody_1"
	UpdateStaticIpsRequestBodyTypeUpdateStaticIpsRequestBody2 UpdateStaticIpsRequestBodyType = "updateStaticIps_RequestBody_2"
)

type UpdateStaticIpsRequestBody struct {
	UpdateStaticIpsRequestBody1 *UpdateStaticIpsRequestBody1 `queryParam:"inline"`
	UpdateStaticIpsRequestBody2 *UpdateStaticIpsRequestBody2 `queryParam:"inline"`

	Type UpdateStaticIpsRequestBodyType
}

func CreateUpdateStaticIpsRequestBodyUpdateStaticIpsRequestBody1(updateStaticIpsRequestBody1 UpdateStaticIpsRequestBody1) UpdateStaticIpsRequestBody {
	typ := UpdateStaticIpsRequestBodyTypeUpdateStaticIpsRequestBody1

	return UpdateStaticIpsRequestBody{
		UpdateStaticIpsRequestBody1: &updateStaticIpsRequestBody1,
		Type:                        typ,
	}
}

func CreateUpdateStaticIpsRequestBodyUpdateStaticIpsRequestBody2(updateStaticIpsRequestBody2 UpdateStaticIpsRequestBody2) UpdateStaticIpsRequestBody {
	typ := UpdateStaticIpsRequestBodyTypeUpdateStaticIpsRequestBody2

	return UpdateStaticIpsRequestBody{
		UpdateStaticIpsRequestBody2: &updateStaticIpsRequestBody2,
		Type:                        typ,
	}
}

func (u *UpdateStaticIpsRequestBody) UnmarshalJSON(data []byte) error {

	var updateStaticIpsRequestBody1 UpdateStaticIpsRequestBody1 = UpdateStaticIpsRequestBody1{}
	if err := utils.UnmarshalJSON(data, &updateStaticIpsRequestBody1, "", true, nil); err == nil {
		u.UpdateStaticIpsRequestBody1 = &updateStaticIpsRequestBody1
		u.Type = UpdateStaticIpsRequestBodyTypeUpdateStaticIpsRequestBody1
		return nil
	}

	var updateStaticIpsRequestBody2 UpdateStaticIpsRequestBody2 = UpdateStaticIpsRequestBody2{}
	if err := utils.UnmarshalJSON(data, &updateStaticIpsRequestBody2, "", true, nil); err == nil {
		u.UpdateStaticIpsRequestBody2 = &updateStaticIpsRequestBody2
		u.Type = UpdateStaticIpsRequestBodyTypeUpdateStaticIpsRequestBody2
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateStaticIpsRequestBody", string(data))
}

func (u UpdateStaticIpsRequestBody) MarshalJSON() ([]byte, error) {
	if u.UpdateStaticIpsRequestBody1 != nil {
		return utils.MarshalJSON(u.UpdateStaticIpsRequestBody1, "", true)
	}

	if u.UpdateStaticIpsRequestBody2 != nil {
		return utils.MarshalJSON(u.UpdateStaticIpsRequestBody2, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateStaticIpsRequestBody: all fields are null")
}

type UpdateStaticIpsRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                     `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UpdateStaticIpsRequestBody `request:"mediaType=application/json"`
}

func (o *UpdateStaticIpsRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UpdateStaticIpsRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UpdateStaticIpsRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UpdateStaticIpsRequest) GetRequestBody() *UpdateStaticIpsRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UpdateStaticIpsEnvIDEnum string

const (
	UpdateStaticIpsEnvIDEnumPreview    UpdateStaticIpsEnvIDEnum = "preview"
	UpdateStaticIpsEnvIDEnumProduction UpdateStaticIpsEnvIDEnum = "production"
)

func (e UpdateStaticIpsEnvIDEnum) ToPointer() *UpdateStaticIpsEnvIDEnum {
	return &e
}
func (e *UpdateStaticIpsEnvIDEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "preview":
		fallthrough
	case "production":
		*e = UpdateStaticIpsEnvIDEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for UpdateStaticIpsEnvIDEnum: %v", v)
	}
}

type UpdateStaticIpsEnvIDUnionType string

const (
	UpdateStaticIpsEnvIDUnionTypeStr                      UpdateStaticIpsEnvIDUnionType = "str"
	UpdateStaticIpsEnvIDUnionTypeUpdateStaticIpsEnvIDEnum UpdateStaticIpsEnvIDUnionType = "updateStaticIps_envId_enum"
)

type UpdateStaticIpsEnvIDUnion struct {
	Str                      *string                   `queryParam:"inline"`
	UpdateStaticIpsEnvIDEnum *UpdateStaticIpsEnvIDEnum `queryParam:"inline"`

	Type UpdateStaticIpsEnvIDUnionType
}

func CreateUpdateStaticIpsEnvIDUnionStr(str string) UpdateStaticIpsEnvIDUnion {
	typ := UpdateStaticIpsEnvIDUnionTypeStr

	return UpdateStaticIpsEnvIDUnion{
		Str:  &str,
		Type: typ,
	}
}

func CreateUpdateStaticIpsEnvIDUnionUpdateStaticIpsEnvIDEnum(updateStaticIpsEnvIDEnum UpdateStaticIpsEnvIDEnum) UpdateStaticIpsEnvIDUnion {
	typ := UpdateStaticIpsEnvIDUnionTypeUpdateStaticIpsEnvIDEnum

	return UpdateStaticIpsEnvIDUnion{
		UpdateStaticIpsEnvIDEnum: &updateStaticIpsEnvIDEnum,
		Type:                     typ,
	}
}

func (u *UpdateStaticIpsEnvIDUnion) UnmarshalJSON(data []byte) error {

	var str string = ""
	if err := utils.UnmarshalJSON(data, &str, "", true, nil); err == nil {
		u.Str = &str
		u.Type = UpdateStaticIpsEnvIDUnionTypeStr
		return nil
	}

	var updateStaticIpsEnvIDEnum UpdateStaticIpsEnvIDEnum = UpdateStaticIpsEnvIDEnum("")
	if err := utils.UnmarshalJSON(data, &updateStaticIpsEnvIDEnum, "", true, nil); err == nil {
		u.UpdateStaticIpsEnvIDEnum = &updateStaticIpsEnvIDEnum
		u.Type = UpdateStaticIpsEnvIDUnionTypeUpdateStaticIpsEnvIDEnum
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for UpdateStaticIpsEnvIDUnion", string(data))
}

func (u UpdateStaticIpsEnvIDUnion) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	if u.UpdateStaticIpsEnvIDEnum != nil {
		return utils.MarshalJSON(u.UpdateStaticIpsEnvIDEnum, "", true)
	}

	return nil, errors.New("could not marshal union type UpdateStaticIpsEnvIDUnion: all fields are null")
}

type UpdateStaticIpsAws struct {
	SubnetIds       []string `json:"subnetIds"`
	SecurityGroupID string   `json:"securityGroupId"`
}

func (o *UpdateStaticIpsAws) GetSubnetIds() []string {
	if o == nil {
		return []string{}
	}
	return o.SubnetIds
}

func (o *UpdateStaticIpsAws) GetSecurityGroupID() string {
	if o == nil {
		return ""
	}
	return o.SecurityGroupID
}

type UpdateStaticIpsResponseBody struct {
	EnvID                  UpdateStaticIpsEnvIDUnion `json:"envId"`
	ConnectConfigurationID string                    `json:"connectConfigurationId"`
	Dc                     *string                   `json:"dc,omitempty"`
	Passive                bool                      `json:"passive"`
	BuildsEnabled          bool                      `json:"buildsEnabled"`
	Aws                    *UpdateStaticIpsAws       `json:"aws,omitempty"`
	CreatedAt              float64                   `json:"createdAt"`
	UpdatedAt              float64                   `json:"updatedAt"`
}

func (o *UpdateStaticIpsResponseBody) GetEnvID() UpdateStaticIpsEnvIDUnion {
	if o == nil {
		return UpdateStaticIpsEnvIDUnion{}
	}
	return o.EnvID
}

func (o *UpdateStaticIpsResponseBody) GetConnectConfigurationID() string {
	if o == nil {
		return ""
	}
	return o.ConnectConfigurationID
}

func (o *UpdateStaticIpsResponseBody) GetDc() *string {
	if o == nil {
		return nil
	}
	return o.Dc
}

func (o *UpdateStaticIpsResponseBody) GetPassive() bool {
	if o == nil {
		return false
	}
	return o.Passive
}

func (o *UpdateStaticIpsResponseBody) GetBuildsEnabled() bool {
	if o == nil {
		return false
	}
	return o.BuildsEnabled
}

func (o *UpdateStaticIpsResponseBody) GetAws() *UpdateStaticIpsAws {
	if o == nil {
		return nil
	}
	return o.Aws
}

func (o *UpdateStaticIpsResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UpdateStaticIpsResponseBody) GetUpdatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.UpdatedAt
}

type UpdateStaticIpsResponse struct {
	HTTPMeta       components.HTTPMetadata `json:"-"`
	ResponseBodies []UpdateStaticIpsResponseBody
}

func (o *UpdateStaticIpsResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UpdateStaticIpsResponse) GetResponseBodies() []UpdateStaticIpsResponseBody {
	if o == nil {
		return nil
	}
	return o.ResponseBodies
}
