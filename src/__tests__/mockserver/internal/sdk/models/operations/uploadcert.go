// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type UploadCertRequestBody struct {
	// The certificate authority
	Ca string `json:"ca"`
	// The certificate key
	Key string `json:"key"`
	// The certificate
	Cert string `json:"cert"`
	// Skip validation of the certificate
	SkipValidation *bool `json:"skipValidation,omitempty"`
}

func (o *UploadCertRequestBody) GetCa() string {
	if o == nil {
		return ""
	}
	return o.Ca
}

func (o *UploadCertRequestBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UploadCertRequestBody) GetCert() string {
	if o == nil {
		return ""
	}
	return o.Cert
}

func (o *UploadCertRequestBody) GetSkipValidation() *bool {
	if o == nil {
		return nil
	}
	return o.SkipValidation
}

type UploadCertRequest struct {
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UploadCertRequestBody `request:"mediaType=application/json"`
}

func (o *UploadCertRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UploadCertRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UploadCertRequest) GetRequestBody() *UploadCertRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

type UploadCertResponseBody struct {
	ID        string   `json:"id"`
	CreatedAt float64  `json:"createdAt"`
	ExpiresAt float64  `json:"expiresAt"`
	AutoRenew bool     `json:"autoRenew"`
	Cns       []string `json:"cns"`
}

func (o *UploadCertResponseBody) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *UploadCertResponseBody) GetCreatedAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.CreatedAt
}

func (o *UploadCertResponseBody) GetExpiresAt() float64 {
	if o == nil {
		return 0.0
	}
	return o.ExpiresAt
}

func (o *UploadCertResponseBody) GetAutoRenew() bool {
	if o == nil {
		return false
	}
	return o.AutoRenew
}

func (o *UploadCertResponseBody) GetCns() []string {
	if o == nil {
		return []string{}
	}
	return o.Cns
}

type UploadCertResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	Object   *UploadCertResponseBody
}

func (o *UploadCertResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UploadCertResponse) GetObject() *UploadCertResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
