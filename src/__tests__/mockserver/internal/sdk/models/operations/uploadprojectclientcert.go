// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"mockserver/internal/sdk/models/components"
)

type UploadProjectClientCertRequestBody struct {
	// The client certificate in PEM format
	Cert string `json:"cert"`
	// The private key in PEM format
	Key string `json:"key"`
	// The certificate authority in PEM format
	Ca string `json:"ca"`
	// The origin this certificate should be used for. If not specified, the certificate will be project-wide.
	Origin *string `json:"origin,omitempty"`
	// Skip validation of the certificate
	SkipValidation *bool `json:"skipValidation,omitempty"`
}

func (o *UploadProjectClientCertRequestBody) GetCert() string {
	if o == nil {
		return ""
	}
	return o.Cert
}

func (o *UploadProjectClientCertRequestBody) GetKey() string {
	if o == nil {
		return ""
	}
	return o.Key
}

func (o *UploadProjectClientCertRequestBody) GetCa() string {
	if o == nil {
		return ""
	}
	return o.Ca
}

func (o *UploadProjectClientCertRequestBody) GetOrigin() *string {
	if o == nil {
		return nil
	}
	return o.Origin
}

func (o *UploadProjectClientCertRequestBody) GetSkipValidation() *bool {
	if o == nil {
		return nil
	}
	return o.SkipValidation
}

type UploadProjectClientCertRequest struct {
	// The unique project identifier or the project name
	IDOrName string `pathParam:"style=simple,explode=false,name=idOrName"`
	// The Team identifier to perform the request on behalf of.
	TeamID *string `queryParam:"style=form,explode=true,name=teamId"`
	// The Team slug to perform the request on behalf of.
	Slug        *string                             `queryParam:"style=form,explode=true,name=slug"`
	RequestBody *UploadProjectClientCertRequestBody `request:"mediaType=application/json"`
}

func (o *UploadProjectClientCertRequest) GetIDOrName() string {
	if o == nil {
		return ""
	}
	return o.IDOrName
}

func (o *UploadProjectClientCertRequest) GetTeamID() *string {
	if o == nil {
		return nil
	}
	return o.TeamID
}

func (o *UploadProjectClientCertRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

func (o *UploadProjectClientCertRequest) GetRequestBody() *UploadProjectClientCertRequestBody {
	if o == nil {
		return nil
	}
	return o.RequestBody
}

// UploadProjectClientCertResponseBody - Client certificate uploaded successfully
type UploadProjectClientCertResponseBody struct {
	Updated bool   `json:"updated"`
	Origin  string `json:"origin"`
	CertID  string `json:"certId"`
}

func (o *UploadProjectClientCertResponseBody) GetUpdated() bool {
	if o == nil {
		return false
	}
	return o.Updated
}

func (o *UploadProjectClientCertResponseBody) GetOrigin() string {
	if o == nil {
		return ""
	}
	return o.Origin
}

func (o *UploadProjectClientCertResponseBody) GetCertID() string {
	if o == nil {
		return ""
	}
	return o.CertID
}

type UploadProjectClientCertResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// Client certificate uploaded successfully
	Object *UploadProjectClientCertResponseBody
}

func (o *UploadProjectClientCertResponse) GetHTTPMeta() components.HTTPMetadata {
	if o == nil {
		return components.HTTPMetadata{}
	}
	return o.HTTPMeta
}

func (o *UploadProjectClientCertResponse) GetObject() *UploadProjectClientCertResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
