// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetContactInfoSchemaBadRequestType string

const (
	GetContactInfoSchemaBadRequestTypeBadRequestError    GetContactInfoSchemaBadRequestType = "BadRequest_error"
	GetContactInfoSchemaBadRequestTypeHTTPAPIDecodeError GetContactInfoSchemaBadRequestType = "HttpApiDecodeError"
)

// GetContactInfoSchemaBadRequest - There was something wrong with the request
type GetContactInfoSchemaBadRequest struct {
	BadRequestError    *BadRequestError    `queryParam:"inline"`
	HTTPAPIDecodeError *HTTPAPIDecodeError `queryParam:"inline"`

	Type GetContactInfoSchemaBadRequestType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &GetContactInfoSchemaBadRequest{}

func CreateGetContactInfoSchemaBadRequestBadRequestError(badRequestError BadRequestError) GetContactInfoSchemaBadRequest {
	typ := GetContactInfoSchemaBadRequestTypeBadRequestError

	return GetContactInfoSchemaBadRequest{
		BadRequestError: &badRequestError,
		Type:            typ,
	}
}

func CreateGetContactInfoSchemaBadRequestHTTPAPIDecodeError(httpAPIDecodeError HTTPAPIDecodeError) GetContactInfoSchemaBadRequest {
	typ := GetContactInfoSchemaBadRequestTypeHTTPAPIDecodeError

	return GetContactInfoSchemaBadRequest{
		HTTPAPIDecodeError: &httpAPIDecodeError,
		Type:               typ,
	}
}

func (u *GetContactInfoSchemaBadRequest) UnmarshalJSON(data []byte) error {

	var badRequestError BadRequestError = BadRequestError{}
	if err := utils.UnmarshalJSON(data, &badRequestError, "", true, nil); err == nil {
		u.BadRequestError = &badRequestError
		u.Type = GetContactInfoSchemaBadRequestTypeBadRequestError
		return nil
	}

	var httpAPIDecodeError HTTPAPIDecodeError = HTTPAPIDecodeError{}
	if err := utils.UnmarshalJSON(data, &httpAPIDecodeError, "", true, nil); err == nil {
		u.HTTPAPIDecodeError = &httpAPIDecodeError
		u.Type = GetContactInfoSchemaBadRequestTypeHTTPAPIDecodeError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetContactInfoSchemaBadRequest", string(data))
}

func (u GetContactInfoSchemaBadRequest) MarshalJSON() ([]byte, error) {
	if u.BadRequestError != nil {
		return utils.MarshalJSON(u.BadRequestError, "", true)
	}

	if u.HTTPAPIDecodeError != nil {
		return utils.MarshalJSON(u.HTTPAPIDecodeError, "", true)
	}

	return nil, errors.New("could not marshal union type GetContactInfoSchemaBadRequest: all fields are null")
}

func (u GetContactInfoSchemaBadRequest) Error() string {
	switch u.Type {
	case GetContactInfoSchemaBadRequestTypeBadRequestError:
		data, _ := json.Marshal(u.BadRequestError)
		return string(data)
	case GetContactInfoSchemaBadRequestTypeHTTPAPIDecodeError:
		data, _ := json.Marshal(u.HTTPAPIDecodeError)
		return string(data)
	default:
		return "unknown error"
	}
}
