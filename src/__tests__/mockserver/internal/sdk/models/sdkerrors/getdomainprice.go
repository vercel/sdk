// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetDomainPriceBadRequestType string

const (
	GetDomainPriceBadRequestTypeHTTPAPIDecodeError   GetDomainPriceBadRequestType = "HttpApiDecodeError"
	GetDomainPriceBadRequestTypeTldNotSupportedError GetDomainPriceBadRequestType = "TldNotSupported_error"
	GetDomainPriceBadRequestTypeBadRequestError      GetDomainPriceBadRequestType = "BadRequest_error"
)

// GetDomainPriceBadRequest - There was something wrong with the request
type GetDomainPriceBadRequest struct {
	HTTPAPIDecodeError   *HTTPAPIDecodeError   `queryParam:"inline"`
	TldNotSupportedError *TldNotSupportedError `queryParam:"inline"`
	BadRequestError      *BadRequestError      `queryParam:"inline"`

	Type GetDomainPriceBadRequestType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &GetDomainPriceBadRequest{}

func CreateGetDomainPriceBadRequestHTTPAPIDecodeError(httpAPIDecodeError HTTPAPIDecodeError) GetDomainPriceBadRequest {
	typ := GetDomainPriceBadRequestTypeHTTPAPIDecodeError

	return GetDomainPriceBadRequest{
		HTTPAPIDecodeError: &httpAPIDecodeError,
		Type:               typ,
	}
}

func CreateGetDomainPriceBadRequestTldNotSupportedError(tldNotSupportedError TldNotSupportedError) GetDomainPriceBadRequest {
	typ := GetDomainPriceBadRequestTypeTldNotSupportedError

	return GetDomainPriceBadRequest{
		TldNotSupportedError: &tldNotSupportedError,
		Type:                 typ,
	}
}

func CreateGetDomainPriceBadRequestBadRequestError(badRequestError BadRequestError) GetDomainPriceBadRequest {
	typ := GetDomainPriceBadRequestTypeBadRequestError

	return GetDomainPriceBadRequest{
		BadRequestError: &badRequestError,
		Type:            typ,
	}
}

func (u *GetDomainPriceBadRequest) UnmarshalJSON(data []byte) error {

	var httpAPIDecodeError HTTPAPIDecodeError = HTTPAPIDecodeError{}
	if err := utils.UnmarshalJSON(data, &httpAPIDecodeError, "", true, nil); err == nil {
		u.HTTPAPIDecodeError = &httpAPIDecodeError
		u.Type = GetDomainPriceBadRequestTypeHTTPAPIDecodeError
		return nil
	}

	var tldNotSupportedError TldNotSupportedError = TldNotSupportedError{}
	if err := utils.UnmarshalJSON(data, &tldNotSupportedError, "", true, nil); err == nil {
		u.TldNotSupportedError = &tldNotSupportedError
		u.Type = GetDomainPriceBadRequestTypeTldNotSupportedError
		return nil
	}

	var badRequestError BadRequestError = BadRequestError{}
	if err := utils.UnmarshalJSON(data, &badRequestError, "", true, nil); err == nil {
		u.BadRequestError = &badRequestError
		u.Type = GetDomainPriceBadRequestTypeBadRequestError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetDomainPriceBadRequest", string(data))
}

func (u GetDomainPriceBadRequest) MarshalJSON() ([]byte, error) {
	if u.HTTPAPIDecodeError != nil {
		return utils.MarshalJSON(u.HTTPAPIDecodeError, "", true)
	}

	if u.TldNotSupportedError != nil {
		return utils.MarshalJSON(u.TldNotSupportedError, "", true)
	}

	if u.BadRequestError != nil {
		return utils.MarshalJSON(u.BadRequestError, "", true)
	}

	return nil, errors.New("could not marshal union type GetDomainPriceBadRequest: all fields are null")
}

func (u GetDomainPriceBadRequest) Error() string {
	switch u.Type {
	case GetDomainPriceBadRequestTypeHTTPAPIDecodeError:
		data, _ := json.Marshal(u.HTTPAPIDecodeError)
		return string(data)
	case GetDomainPriceBadRequestTypeTldNotSupportedError:
		data, _ := json.Marshal(u.TldNotSupportedError)
		return string(data)
	case GetDomainPriceBadRequestTypeBadRequestError:
		data, _ := json.Marshal(u.BadRequestError)
		return string(data)
	default:
		return "unknown error"
	}
}
