// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type GetTldPriceBadRequestType string

const (
	GetTldPriceBadRequestTypeTldNotSupportedError GetTldPriceBadRequestType = "TldNotSupported_error"
	GetTldPriceBadRequestTypeHTTPAPIDecodeError   GetTldPriceBadRequestType = "HttpApiDecodeError"
)

// GetTldPriceBadRequest - There was something wrong with the request
type GetTldPriceBadRequest struct {
	TldNotSupportedError *TldNotSupportedError `queryParam:"inline"`
	HTTPAPIDecodeError   *HTTPAPIDecodeError   `queryParam:"inline"`

	Type GetTldPriceBadRequestType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &GetTldPriceBadRequest{}

func CreateGetTldPriceBadRequestTldNotSupportedError(tldNotSupportedError TldNotSupportedError) GetTldPriceBadRequest {
	typ := GetTldPriceBadRequestTypeTldNotSupportedError

	return GetTldPriceBadRequest{
		TldNotSupportedError: &tldNotSupportedError,
		Type:                 typ,
	}
}

func CreateGetTldPriceBadRequestHTTPAPIDecodeError(httpAPIDecodeError HTTPAPIDecodeError) GetTldPriceBadRequest {
	typ := GetTldPriceBadRequestTypeHTTPAPIDecodeError

	return GetTldPriceBadRequest{
		HTTPAPIDecodeError: &httpAPIDecodeError,
		Type:               typ,
	}
}

func (u *GetTldPriceBadRequest) UnmarshalJSON(data []byte) error {

	var tldNotSupportedError TldNotSupportedError = TldNotSupportedError{}
	if err := utils.UnmarshalJSON(data, &tldNotSupportedError, "", true, nil); err == nil {
		u.TldNotSupportedError = &tldNotSupportedError
		u.Type = GetTldPriceBadRequestTypeTldNotSupportedError
		return nil
	}

	var httpAPIDecodeError HTTPAPIDecodeError = HTTPAPIDecodeError{}
	if err := utils.UnmarshalJSON(data, &httpAPIDecodeError, "", true, nil); err == nil {
		u.HTTPAPIDecodeError = &httpAPIDecodeError
		u.Type = GetTldPriceBadRequestTypeHTTPAPIDecodeError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for GetTldPriceBadRequest", string(data))
}

func (u GetTldPriceBadRequest) MarshalJSON() ([]byte, error) {
	if u.TldNotSupportedError != nil {
		return utils.MarshalJSON(u.TldNotSupportedError, "", true)
	}

	if u.HTTPAPIDecodeError != nil {
		return utils.MarshalJSON(u.HTTPAPIDecodeError, "", true)
	}

	return nil, errors.New("could not marshal union type GetTldPriceBadRequest: all fields are null")
}

func (u GetTldPriceBadRequest) Error() string {
	switch u.Type {
	case GetTldPriceBadRequestTypeTldNotSupportedError:
		data, _ := json.Marshal(u.TldNotSupportedError)
		return string(data)
	case GetTldPriceBadRequestTypeHTTPAPIDecodeError:
		data, _ := json.Marshal(u.HTTPAPIDecodeError)
		return string(data)
	default:
		return "unknown error"
	}
}
