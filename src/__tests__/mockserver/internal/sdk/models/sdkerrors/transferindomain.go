// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package sdkerrors

import (
	"encoding/json"
	"errors"
	"fmt"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/utils"
)

type TransferInDomainForbiddenType string

const (
	TransferInDomainForbiddenTypeNotAuthorizedForScopeError TransferInDomainForbiddenType = "NotAuthorizedForScope_error"
	TransferInDomainForbiddenTypeForbiddenError             TransferInDomainForbiddenType = "Forbidden_error"
)

// TransferInDomainForbidden - NotAuthorizedForScope
type TransferInDomainForbidden struct {
	NotAuthorizedForScopeError *NotAuthorizedForScopeError `queryParam:"inline"`
	ForbiddenError             *ForbiddenError             `queryParam:"inline"`

	Type TransferInDomainForbiddenType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &TransferInDomainForbidden{}

func CreateTransferInDomainForbiddenNotAuthorizedForScopeError(notAuthorizedForScopeError NotAuthorizedForScopeError) TransferInDomainForbidden {
	typ := TransferInDomainForbiddenTypeNotAuthorizedForScopeError

	return TransferInDomainForbidden{
		NotAuthorizedForScopeError: &notAuthorizedForScopeError,
		Type:                       typ,
	}
}

func CreateTransferInDomainForbiddenForbiddenError(forbiddenError ForbiddenError) TransferInDomainForbidden {
	typ := TransferInDomainForbiddenTypeForbiddenError

	return TransferInDomainForbidden{
		ForbiddenError: &forbiddenError,
		Type:           typ,
	}
}

func (u *TransferInDomainForbidden) UnmarshalJSON(data []byte) error {

	var notAuthorizedForScopeError NotAuthorizedForScopeError = NotAuthorizedForScopeError{}
	if err := utils.UnmarshalJSON(data, &notAuthorizedForScopeError, "", true, nil); err == nil {
		u.NotAuthorizedForScopeError = &notAuthorizedForScopeError
		u.Type = TransferInDomainForbiddenTypeNotAuthorizedForScopeError
		return nil
	}

	var forbiddenError ForbiddenError = ForbiddenError{}
	if err := utils.UnmarshalJSON(data, &forbiddenError, "", true, nil); err == nil {
		u.ForbiddenError = &forbiddenError
		u.Type = TransferInDomainForbiddenTypeForbiddenError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TransferInDomainForbidden", string(data))
}

func (u TransferInDomainForbidden) MarshalJSON() ([]byte, error) {
	if u.NotAuthorizedForScopeError != nil {
		return utils.MarshalJSON(u.NotAuthorizedForScopeError, "", true)
	}

	if u.ForbiddenError != nil {
		return utils.MarshalJSON(u.ForbiddenError, "", true)
	}

	return nil, errors.New("could not marshal union type TransferInDomainForbidden: all fields are null")
}

func (u TransferInDomainForbidden) Error() string {
	switch u.Type {
	case TransferInDomainForbiddenTypeNotAuthorizedForScopeError:
		data, _ := json.Marshal(u.NotAuthorizedForScopeError)
		return string(data)
	case TransferInDomainForbiddenTypeForbiddenError:
		data, _ := json.Marshal(u.ForbiddenError)
		return string(data)
	default:
		return "unknown error"
	}
}

type TransferInDomainBadRequestType string

const (
	TransferInDomainBadRequestTypeBadRequestError            TransferInDomainBadRequestType = "BadRequest_error"
	TransferInDomainBadRequestTypeDomainTooShortError        TransferInDomainBadRequestType = "DomainTooShort_error"
	TransferInDomainBadRequestTypeDNSSECEnabledError         TransferInDomainBadRequestType = "DNSSECEnabled_error"
	TransferInDomainBadRequestTypeExpectedPriceMismatchError TransferInDomainBadRequestType = "ExpectedPriceMismatch_error"
	TransferInDomainBadRequestTypeDomainNotAvailableError    TransferInDomainBadRequestType = "DomainNotAvailable_error"
	TransferInDomainBadRequestTypeTldNotSupportedError       TransferInDomainBadRequestType = "TldNotSupported_error"
	TransferInDomainBadRequestTypeHTTPAPIDecodeError         TransferInDomainBadRequestType = "HttpApiDecodeError"
)

// TransferInDomainBadRequest - There was something wrong with the request
type TransferInDomainBadRequest struct {
	BadRequestError            *BadRequestError            `queryParam:"inline"`
	DomainTooShortError        *DomainTooShortError        `queryParam:"inline"`
	DNSSECEnabledError         *DNSSECEnabledError         `queryParam:"inline"`
	ExpectedPriceMismatchError *ExpectedPriceMismatchError `queryParam:"inline"`
	DomainNotAvailableError    *DomainNotAvailableError    `queryParam:"inline"`
	TldNotSupportedError       *TldNotSupportedError       `queryParam:"inline"`
	HTTPAPIDecodeError         *HTTPAPIDecodeError         `queryParam:"inline"`

	Type TransferInDomainBadRequestType

	HTTPMeta components.HTTPMetadata `json:"-"`
}

var _ error = &TransferInDomainBadRequest{}

func CreateTransferInDomainBadRequestBadRequestError(badRequestError BadRequestError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeBadRequestError

	return TransferInDomainBadRequest{
		BadRequestError: &badRequestError,
		Type:            typ,
	}
}

func CreateTransferInDomainBadRequestDomainTooShortError(domainTooShortError DomainTooShortError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeDomainTooShortError

	return TransferInDomainBadRequest{
		DomainTooShortError: &domainTooShortError,
		Type:                typ,
	}
}

func CreateTransferInDomainBadRequestDNSSECEnabledError(dnssecEnabledError DNSSECEnabledError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeDNSSECEnabledError

	return TransferInDomainBadRequest{
		DNSSECEnabledError: &dnssecEnabledError,
		Type:               typ,
	}
}

func CreateTransferInDomainBadRequestExpectedPriceMismatchError(expectedPriceMismatchError ExpectedPriceMismatchError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeExpectedPriceMismatchError

	return TransferInDomainBadRequest{
		ExpectedPriceMismatchError: &expectedPriceMismatchError,
		Type:                       typ,
	}
}

func CreateTransferInDomainBadRequestDomainNotAvailableError(domainNotAvailableError DomainNotAvailableError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeDomainNotAvailableError

	return TransferInDomainBadRequest{
		DomainNotAvailableError: &domainNotAvailableError,
		Type:                    typ,
	}
}

func CreateTransferInDomainBadRequestTldNotSupportedError(tldNotSupportedError TldNotSupportedError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeTldNotSupportedError

	return TransferInDomainBadRequest{
		TldNotSupportedError: &tldNotSupportedError,
		Type:                 typ,
	}
}

func CreateTransferInDomainBadRequestHTTPAPIDecodeError(httpAPIDecodeError HTTPAPIDecodeError) TransferInDomainBadRequest {
	typ := TransferInDomainBadRequestTypeHTTPAPIDecodeError

	return TransferInDomainBadRequest{
		HTTPAPIDecodeError: &httpAPIDecodeError,
		Type:               typ,
	}
}

func (u *TransferInDomainBadRequest) UnmarshalJSON(data []byte) error {

	var badRequestError BadRequestError = BadRequestError{}
	if err := utils.UnmarshalJSON(data, &badRequestError, "", true, nil); err == nil {
		u.BadRequestError = &badRequestError
		u.Type = TransferInDomainBadRequestTypeBadRequestError
		return nil
	}

	var domainTooShortError DomainTooShortError = DomainTooShortError{}
	if err := utils.UnmarshalJSON(data, &domainTooShortError, "", true, nil); err == nil {
		u.DomainTooShortError = &domainTooShortError
		u.Type = TransferInDomainBadRequestTypeDomainTooShortError
		return nil
	}

	var dnssecEnabledError DNSSECEnabledError = DNSSECEnabledError{}
	if err := utils.UnmarshalJSON(data, &dnssecEnabledError, "", true, nil); err == nil {
		u.DNSSECEnabledError = &dnssecEnabledError
		u.Type = TransferInDomainBadRequestTypeDNSSECEnabledError
		return nil
	}

	var expectedPriceMismatchError ExpectedPriceMismatchError = ExpectedPriceMismatchError{}
	if err := utils.UnmarshalJSON(data, &expectedPriceMismatchError, "", true, nil); err == nil {
		u.ExpectedPriceMismatchError = &expectedPriceMismatchError
		u.Type = TransferInDomainBadRequestTypeExpectedPriceMismatchError
		return nil
	}

	var domainNotAvailableError DomainNotAvailableError = DomainNotAvailableError{}
	if err := utils.UnmarshalJSON(data, &domainNotAvailableError, "", true, nil); err == nil {
		u.DomainNotAvailableError = &domainNotAvailableError
		u.Type = TransferInDomainBadRequestTypeDomainNotAvailableError
		return nil
	}

	var tldNotSupportedError TldNotSupportedError = TldNotSupportedError{}
	if err := utils.UnmarshalJSON(data, &tldNotSupportedError, "", true, nil); err == nil {
		u.TldNotSupportedError = &tldNotSupportedError
		u.Type = TransferInDomainBadRequestTypeTldNotSupportedError
		return nil
	}

	var httpAPIDecodeError HTTPAPIDecodeError = HTTPAPIDecodeError{}
	if err := utils.UnmarshalJSON(data, &httpAPIDecodeError, "", true, nil); err == nil {
		u.HTTPAPIDecodeError = &httpAPIDecodeError
		u.Type = TransferInDomainBadRequestTypeHTTPAPIDecodeError
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for TransferInDomainBadRequest", string(data))
}

func (u TransferInDomainBadRequest) MarshalJSON() ([]byte, error) {
	if u.BadRequestError != nil {
		return utils.MarshalJSON(u.BadRequestError, "", true)
	}

	if u.DomainTooShortError != nil {
		return utils.MarshalJSON(u.DomainTooShortError, "", true)
	}

	if u.DNSSECEnabledError != nil {
		return utils.MarshalJSON(u.DNSSECEnabledError, "", true)
	}

	if u.ExpectedPriceMismatchError != nil {
		return utils.MarshalJSON(u.ExpectedPriceMismatchError, "", true)
	}

	if u.DomainNotAvailableError != nil {
		return utils.MarshalJSON(u.DomainNotAvailableError, "", true)
	}

	if u.TldNotSupportedError != nil {
		return utils.MarshalJSON(u.TldNotSupportedError, "", true)
	}

	if u.HTTPAPIDecodeError != nil {
		return utils.MarshalJSON(u.HTTPAPIDecodeError, "", true)
	}

	return nil, errors.New("could not marshal union type TransferInDomainBadRequest: all fields are null")
}

func (u TransferInDomainBadRequest) Error() string {
	switch u.Type {
	case TransferInDomainBadRequestTypeBadRequestError:
		data, _ := json.Marshal(u.BadRequestError)
		return string(data)
	case TransferInDomainBadRequestTypeDomainTooShortError:
		data, _ := json.Marshal(u.DomainTooShortError)
		return string(data)
	case TransferInDomainBadRequestTypeDNSSECEnabledError:
		data, _ := json.Marshal(u.DNSSECEnabledError)
		return string(data)
	case TransferInDomainBadRequestTypeExpectedPriceMismatchError:
		data, _ := json.Marshal(u.ExpectedPriceMismatchError)
		return string(data)
	case TransferInDomainBadRequestTypeDomainNotAvailableError:
		data, _ := json.Marshal(u.DomainNotAvailableError)
		return string(data)
	case TransferInDomainBadRequestTypeTldNotSupportedError:
		data, _ := json.Marshal(u.TldNotSupportedError)
		return string(data)
	case TransferInDomainBadRequestTypeHTTPAPIDecodeError:
		data, _ := json.Marshal(u.HTTPAPIDecodeError)
		return string(data)
	default:
		return "unknown error"
	}
}
