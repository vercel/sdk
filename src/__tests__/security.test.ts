/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Security Update Attack Challenge Mode", async () => {
  const testHttpClient = createTestHTTPClient("updateAttackChallengeMode");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.updateAttackChallengeMode({
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      projectId: "<id>",
      attackModeEnabled: true,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    attackModeEnabled: true,
    attackModeUpdatedAt: 4536.22,
  });
});

it.skip("Security Put Firewall Config", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step putFirewallConfig.test referencing operation putFirewallConfig not found in document`]",
  );
});

test("Security Update Firewall Config", async () => {
  const testHttpClient = createTestHTTPClient("updateFirewallConfig");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.updateFirewallConfig({
    projectId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    requestBody: {
      action: "ip.remove",
      id: "<id>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Security Get Firewall Config", async () => {
  const testHttpClient = createTestHTTPClient("getFirewallConfig");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.getFirewallConfig({
    projectId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
    configVersion: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    ownerId: "<id>",
    projectKey: "<value>",
    id: "<id>",
    version: 228.91,
    updatedAt: "<value>",
    firewallEnabled: true,
    crs: {
      sd: {
        active: false,
        action: "deny",
      },
      ma: {
        active: true,
        action: "log",
      },
      lfi: {
        active: false,
        action: "log",
      },
      rfi: {
        active: false,
        action: "deny",
      },
      rce: {
        active: true,
        action: "deny",
      },
      php: {
        active: false,
        action: "log",
      },
      gen: {
        active: false,
        action: "log",
      },
      xss: {
        active: true,
        action: "deny",
      },
      sqli: {
        active: true,
        action: "deny",
      },
      sf: {
        active: true,
        action: "deny",
      },
      java: {
        active: true,
        action: "deny",
      },
    },
    rules: [
      {
        id: "<id>",
        name: "<value>",
        active: true,
        conditionGroup: [
          {
            conditions: [
              {
                type: "ip_address",
                op: "eq",
              },
            ],
          },
          {
            conditions: [
              {
                type: "geo_city",
                op: "ex",
              },
              {
                type: "ja4_digest",
                op: "nex",
              },
              {
                type: "ip_address",
                op: "lte",
              },
            ],
          },
        ],
        action: {},
      },
    ],
    ips: [
      {
        id: "<id>",
        hostname: "puny-goat.org",
        ip: "0.147.40.42",
        action: "challenge",
      },
    ],
    changes: [],
  });
});

test("Security Get Bypass Ip", async () => {
  const testHttpClient = createTestHTTPClient("getBypassIp");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.getBypassIp({
    projectId: "<id>",
    limit: 10,
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Security Add Bypass Ip", async () => {
  const testHttpClient = createTestHTTPClient("addBypassIp");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.addBypassIp({
    projectId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    ok: false,
  });
});

test("Security Remove Bypass Ip", async () => {
  const testHttpClient = createTestHTTPClient("removeBypassIp");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.removeBypassIp({
    projectId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    ok: true,
  });
});

test("Security Get Active Attack Status", async () => {
  const testHttpClient = createTestHTTPClient("getActiveAttackStatus");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
    bearerToken: "<YOUR_BEARER_TOKEN_HERE>",
  });

  const result = await vercel.security.getActiveAttackStatus({
    projectId: "<id>",
    teamId: "team_1a2b3c4d5e6f7g8h9i0j1k2l",
    slug: "my-team-url-slug",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    anomalies: [
      {
        ownerId: "<id>",
        projectId: "<id>",
        startTime: 9556.58,
        endTime: 3001.16,
        atMinute: 5447.77,
        affectedHostMap: {},
      },
      {
        ownerId: "<id>",
        projectId: "<id>",
        startTime: 7786.06,
        endTime: 9758.22,
        atMinute: 7118.69,
        affectedHostMap: {},
      },
    ],
  });
});
