/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { Vercel } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

it.skip("Vercel Patch /Aliases/{id}/protection Bypass", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step patch_/aliases/{id}/protection-bypass.test referencing operation patch_/aliases/{id}/protection-bypass not found in document`]",
  );
});

test("Vercel Get /Projects/{project Id}/logs Presets", async () => {
  const testHttpClient = createTestHTTPClient(
    "get_/projects/{projectId}/logs-presets",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await vercel.getProjectsProjectIdLogsPresets({
    projectId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Vercel Post /Projects/{project Id}/logs Presets", async () => {
  const testHttpClient = createTestHTTPClient(
    "post_/projects/{projectId}/logs-presets",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await vercel.postProjectsProjectIdLogsPresets({
    projectId: "<id>",
    requestBody: {
      query:
        "timeline=past30Minutes&startDate=1690446214407&endDate=1690448014407&levels=info&domains=vercel.com",
      title: "Request Path",
      group: "team",
    },
  });
  expect(result).toBeDefined();
});

test("Vercel Delete /Projects/{project Id}/logs Presets/{id}", async () => {
  const testHttpClient = createTestHTTPClient(
    "delete_/projects/{projectId}/logs-presets/{id}",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  await vercel.deleteProjectsProjectIdLogsPresetsId({
    projectId: "<id>",
    id: "<id>",
  });
});

test("Vercel Patch /Projects/{project Id}/logs Presets/{id}", async () => {
  const testHttpClient = createTestHTTPClient(
    "patch_/projects/{projectId}/logs-presets/{id}",
  );

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await vercel.patchProjectsProjectIdLogsPresetsId({
    projectId: "<id>",
    id: "<id>",
    requestBody: {
      title: "Request Path",
    },
  });
  expect(result).toBeDefined();
});

test("Vercel Post /Domains", async () => {
  const testHttpClient = createTestHTTPClient("post_/domains");

  const vercel = new Vercel({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    httpClient: testHttpClient,
  });

  const result = await vercel.postDomains({
    name: "example.com",
    cdnEnabled: true,
    method: "transfer-in",
  });
  expect(result).toBeDefined();
});
