/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { VercelCore } from "../core.js";
import { encodeFormQuery } from "../lib/encodings.js";
import * as M from "../lib/matchers.js";
import { compactMap } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { RequestOptions } from "../lib/sdks.js";
import { extractSecurity, resolveGlobalSecurity } from "../lib/security.js";
import { pathToFunc } from "../lib/url.js";
import {
  GetSupportedTldsRequest,
  GetSupportedTldsRequest$outboundSchema,
} from "../models/getsupportedtldsop.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
} from "../models/httpapidecodeerror.js";
import {
  ConnectionError,
  InvalidRequestError,
  RequestAbortedError,
  RequestTimeoutError,
  UnexpectedClientError,
} from "../models/httpclienterrors.js";
import {
  InternalServerError,
  InternalServerError$inboundSchema,
} from "../models/internalservererror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
} from "../models/notauthorizedforscope.js";
import { ResponseValidationError } from "../models/responsevalidationerror.js";
import { SDKValidationError } from "../models/sdkvalidationerror.js";
import {
  TooManyRequests,
  TooManyRequests$inboundSchema,
} from "../models/toomanyrequests.js";
import {
  Unauthorized,
  Unauthorized$inboundSchema,
} from "../models/unauthorized.js";
import { VercelError } from "../models/vercelerror.js";
import { APICall, APIPromise } from "../types/async.js";
import { Result } from "../types/fp.js";

/**
 * Get supported TLDs
 *
 * @remarks
 * Get a list of TLDs supported by Vercel
 */
export function domainsRegistrarGetSupportedTlds(
  client: VercelCore,
  request: GetSupportedTldsRequest,
  options?: RequestOptions,
): APIPromise<
  Result<
    Array<string>,
    | HttpApiDecodeError
    | Unauthorized
    | NotAuthorizedForScope
    | TooManyRequests
    | InternalServerError
    | VercelError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >
> {
  return new APIPromise($do(
    client,
    request,
    options,
  ));
}

async function $do(
  client: VercelCore,
  request: GetSupportedTldsRequest,
  options?: RequestOptions,
): Promise<
  [
    Result<
      Array<string>,
      | HttpApiDecodeError
      | Unauthorized
      | NotAuthorizedForScope
      | TooManyRequests
      | InternalServerError
      | VercelError
      | ResponseValidationError
      | ConnectionError
      | RequestAbortedError
      | RequestTimeoutError
      | InvalidRequestError
      | UnexpectedClientError
      | SDKValidationError
    >,
    APICall,
  ]
> {
  const parsed = safeParse(
    request,
    (value) => GetSupportedTldsRequest$outboundSchema.parse(value),
    "Input validation failed",
  );
  if (!parsed.ok) {
    return [parsed, { status: "invalid" }];
  }
  const payload = parsed.value;
  const body = null;

  const path = pathToFunc("/v1/registrar/tlds/supported")();

  const query = encodeFormQuery({
    "teamId": payload.teamId,
  });

  const headers = new Headers(compactMap({
    Accept: "application/json",
  }));

  const secConfig = await extractSecurity(client._options.bearerToken);
  const securityInput = secConfig == null ? {} : { bearerToken: secConfig };
  const requestSecurity = resolveGlobalSecurity(securityInput);

  const context = {
    options: client._options,
    baseURL: options?.serverURL ?? client._baseURL ?? "",
    operationID: "getSupportedTlds",
    oAuth2Scopes: null,

    resolvedSecurity: requestSecurity,

    securitySource: client._options.bearerToken,
    retryConfig: options?.retries
      || client._options.retryConfig
      || { strategy: "none" },
    retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
  };

  const requestRes = client._createRequest(context, {
    security: requestSecurity,
    method: "GET",
    baseURL: options?.serverURL,
    path: path,
    headers: headers,
    query: query,
    body: body,
    userAgent: client._options.userAgent,
    timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
  }, options);
  if (!requestRes.ok) {
    return [requestRes, { status: "invalid" }];
  }
  const req = requestRes.value;

  const doResult = await client._do(req, {
    context,
    errorCodes: ["400", "401", "403", "429", "4XX", "500", "5XX"],
    retryConfig: context.retryConfig,
    retryCodes: context.retryCodes,
  });
  if (!doResult.ok) {
    return [doResult, { status: "request-error", request: req }];
  }
  const response = doResult.value;

  const responseFields = {
    HttpMeta: { Response: response, Request: req },
  };

  const [result] = await M.match<
    Array<string>,
    | HttpApiDecodeError
    | Unauthorized
    | NotAuthorizedForScope
    | TooManyRequests
    | InternalServerError
    | VercelError
    | ResponseValidationError
    | ConnectionError
    | RequestAbortedError
    | RequestTimeoutError
    | InvalidRequestError
    | UnexpectedClientError
    | SDKValidationError
  >(
    M.json(200, z.array(z.string())),
    M.jsonErr(400, HttpApiDecodeError$inboundSchema),
    M.jsonErr(401, Unauthorized$inboundSchema),
    M.jsonErr(403, NotAuthorizedForScope$inboundSchema),
    M.jsonErr(429, TooManyRequests$inboundSchema),
    M.jsonErr(500, InternalServerError$inboundSchema),
    M.fail("4XX"),
    M.fail("5XX"),
  )(response, req, { extraFields: responseFields });
  if (!result.ok) {
    return [result, { status: "complete", request: req, response }];
  }

  return [result, { status: "complete", request: req, response }];
}
