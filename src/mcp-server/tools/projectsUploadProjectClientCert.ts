/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { projectsUploadProjectClientCert } from "../../funcs/projectsUploadProjectClientCert.js";
import { UploadProjectClientCertRequest$inboundSchema } from "../../models/uploadprojectclientcertop.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: UploadProjectClientCertRequest$inboundSchema,
};

export const tool$projectsUploadProjectClientCert: ToolDefinition<typeof args> =
  {
    name: "projects-upload-project-client-cert",
    description: `Upload client certificate for egress mTLS

Upload or update a client certificate for mTLS authentication to external origins. The certificate is uploaded to S3 in plaintext, while the private key is encrypted. A hash reference is stored in the project document. The certificate will be available in the deployment runtime for establishing mTLS connections.`,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] = await projectsUploadProjectClientCert(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
