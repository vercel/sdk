/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type PaidFeatures = {
  concurrentBuilds?: number | null | undefined;
  passwordProtection?: boolean | null | undefined;
  previewDeploymentSuffix?: boolean | null | undefined;
};

export type AcceptProjectTransferRequestRequestBody = {
  /**
   * The desired name for the project
   */
  newProjectName?: string | undefined;
  paidFeatures?: PaidFeatures | undefined;
};

export type AcceptProjectTransferRequestRequest = {
  /**
   * The code of the project transfer request.
   */
  code: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: AcceptProjectTransferRequestRequestBody | undefined;
};

/**
 * The project has been transferred successfully.
 */
export type AcceptProjectTransferRequestResponseBody = {};

/** @internal */
export const PaidFeatures$inboundSchema: z.ZodType<
  PaidFeatures,
  z.ZodTypeDef,
  unknown
> = z.object({
  concurrentBuilds: z.nullable(z.number().int()).optional(),
  passwordProtection: z.nullable(z.boolean()).optional(),
  previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});

/** @internal */
export type PaidFeatures$Outbound = {
  concurrentBuilds?: number | null | undefined;
  passwordProtection?: boolean | null | undefined;
  previewDeploymentSuffix?: boolean | null | undefined;
};

/** @internal */
export const PaidFeatures$outboundSchema: z.ZodType<
  PaidFeatures$Outbound,
  z.ZodTypeDef,
  PaidFeatures
> = z.object({
  concurrentBuilds: z.nullable(z.number().int()).optional(),
  passwordProtection: z.nullable(z.boolean()).optional(),
  previewDeploymentSuffix: z.nullable(z.boolean()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaidFeatures$ {
  /** @deprecated use `PaidFeatures$inboundSchema` instead. */
  export const inboundSchema = PaidFeatures$inboundSchema;
  /** @deprecated use `PaidFeatures$outboundSchema` instead. */
  export const outboundSchema = PaidFeatures$outboundSchema;
  /** @deprecated use `PaidFeatures$Outbound` instead. */
  export type Outbound = PaidFeatures$Outbound;
}

export function paidFeaturesToJSON(paidFeatures: PaidFeatures): string {
  return JSON.stringify(PaidFeatures$outboundSchema.parse(paidFeatures));
}

export function paidFeaturesFromJSON(
  jsonString: string,
): SafeParseResult<PaidFeatures, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaidFeatures$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaidFeatures' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestRequestBody$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  newProjectName: z.string().optional(),
  paidFeatures: z.lazy(() => PaidFeatures$inboundSchema).optional(),
});

/** @internal */
export type AcceptProjectTransferRequestRequestBody$Outbound = {
  newProjectName?: string | undefined;
  paidFeatures?: PaidFeatures$Outbound | undefined;
};

/** @internal */
export const AcceptProjectTransferRequestRequestBody$outboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequestBody$Outbound,
  z.ZodTypeDef,
  AcceptProjectTransferRequestRequestBody
> = z.object({
  newProjectName: z.string().optional(),
  paidFeatures: z.lazy(() => PaidFeatures$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestRequestBody$ {
  /** @deprecated use `AcceptProjectTransferRequestRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestRequestBody$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestRequestBody$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequestBody$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestRequestBody$Outbound;
}

export function acceptProjectTransferRequestRequestBodyToJSON(
  acceptProjectTransferRequestRequestBody:
    AcceptProjectTransferRequestRequestBody,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestRequestBody$outboundSchema.parse(
      acceptProjectTransferRequestRequestBody,
    ),
  );
}

export function acceptProjectTransferRequestRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestRequestBody' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestRequest$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() =>
    AcceptProjectTransferRequestRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AcceptProjectTransferRequestRequest$Outbound = {
  code: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: AcceptProjectTransferRequestRequestBody$Outbound | undefined;
};

/** @internal */
export const AcceptProjectTransferRequestRequest$outboundSchema: z.ZodType<
  AcceptProjectTransferRequestRequest$Outbound,
  z.ZodTypeDef,
  AcceptProjectTransferRequestRequest
> = z.object({
  code: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() =>
    AcceptProjectTransferRequestRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestRequest$ {
  /** @deprecated use `AcceptProjectTransferRequestRequest$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestRequest$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequest$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestRequest$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestRequest$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestRequest$Outbound;
}

export function acceptProjectTransferRequestRequestToJSON(
  acceptProjectTransferRequestRequest: AcceptProjectTransferRequestRequest,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestRequest$outboundSchema.parse(
      acceptProjectTransferRequestRequest,
    ),
  );
}

export function acceptProjectTransferRequestRequestFromJSON(
  jsonString: string,
): SafeParseResult<AcceptProjectTransferRequestRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcceptProjectTransferRequestRequest' from JSON`,
  );
}

/** @internal */
export const AcceptProjectTransferRequestResponseBody$inboundSchema: z.ZodType<
  AcceptProjectTransferRequestResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type AcceptProjectTransferRequestResponseBody$Outbound = {};

/** @internal */
export const AcceptProjectTransferRequestResponseBody$outboundSchema: z.ZodType<
  AcceptProjectTransferRequestResponseBody$Outbound,
  z.ZodTypeDef,
  AcceptProjectTransferRequestResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcceptProjectTransferRequestResponseBody$ {
  /** @deprecated use `AcceptProjectTransferRequestResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    AcceptProjectTransferRequestResponseBody$inboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    AcceptProjectTransferRequestResponseBody$outboundSchema;
  /** @deprecated use `AcceptProjectTransferRequestResponseBody$Outbound` instead. */
  export type Outbound = AcceptProjectTransferRequestResponseBody$Outbound;
}

export function acceptProjectTransferRequestResponseBodyToJSON(
  acceptProjectTransferRequestResponseBody:
    AcceptProjectTransferRequestResponseBody,
): string {
  return JSON.stringify(
    AcceptProjectTransferRequestResponseBody$outboundSchema.parse(
      acceptProjectTransferRequestResponseBody,
    ),
  );
}

export function acceptProjectTransferRequestResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  AcceptProjectTransferRequestResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AcceptProjectTransferRequestResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AcceptProjectTransferRequestResponseBody' from JSON`,
  );
}
