/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const AdditionalContactInfoRequiredCode = {
  AdditionalContactInfoRequired: "additional_contact_info_required",
} as const;
export type AdditionalContactInfoRequiredCode = ClosedEnum<
  typeof AdditionalContactInfoRequiredCode
>;

export const AdditionalContactInfoRequiredTag = {
  AdditionalContactInfoRequired: "AdditionalContactInfoRequired",
} as const;
export type AdditionalContactInfoRequiredTag = ClosedEnum<
  typeof AdditionalContactInfoRequiredTag
>;

export type AdditionalContactInfoRequiredData = {
  status: number;
  code: AdditionalContactInfoRequiredCode;
  message: string;
  tag: AdditionalContactInfoRequiredTag;
};

export class AdditionalContactInfoRequired extends VercelError {
  status: number;
  code: AdditionalContactInfoRequiredCode;
  tag: AdditionalContactInfoRequiredTag;

  /** The original data that was passed to this error instance. */
  data$: AdditionalContactInfoRequiredData;

  constructor(
    err: AdditionalContactInfoRequiredData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "AdditionalContactInfoRequired";
  }
}

/** @internal */
export const AdditionalContactInfoRequiredCode$inboundSchema: z.ZodNativeEnum<
  typeof AdditionalContactInfoRequiredCode
> = z.nativeEnum(AdditionalContactInfoRequiredCode);

/** @internal */
export const AdditionalContactInfoRequiredCode$outboundSchema: z.ZodNativeEnum<
  typeof AdditionalContactInfoRequiredCode
> = AdditionalContactInfoRequiredCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalContactInfoRequiredCode$ {
  /** @deprecated use `AdditionalContactInfoRequiredCode$inboundSchema` instead. */
  export const inboundSchema = AdditionalContactInfoRequiredCode$inboundSchema;
  /** @deprecated use `AdditionalContactInfoRequiredCode$outboundSchema` instead. */
  export const outboundSchema =
    AdditionalContactInfoRequiredCode$outboundSchema;
}

/** @internal */
export const AdditionalContactInfoRequiredTag$inboundSchema: z.ZodNativeEnum<
  typeof AdditionalContactInfoRequiredTag
> = z.nativeEnum(AdditionalContactInfoRequiredTag);

/** @internal */
export const AdditionalContactInfoRequiredTag$outboundSchema: z.ZodNativeEnum<
  typeof AdditionalContactInfoRequiredTag
> = AdditionalContactInfoRequiredTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalContactInfoRequiredTag$ {
  /** @deprecated use `AdditionalContactInfoRequiredTag$inboundSchema` instead. */
  export const inboundSchema = AdditionalContactInfoRequiredTag$inboundSchema;
  /** @deprecated use `AdditionalContactInfoRequiredTag$outboundSchema` instead. */
  export const outboundSchema = AdditionalContactInfoRequiredTag$outboundSchema;
}

/** @internal */
export const AdditionalContactInfoRequired$inboundSchema: z.ZodType<
  AdditionalContactInfoRequired,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: AdditionalContactInfoRequiredCode$inboundSchema,
  message: z.string(),
  _tag: AdditionalContactInfoRequiredTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new AdditionalContactInfoRequired(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type AdditionalContactInfoRequired$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const AdditionalContactInfoRequired$outboundSchema: z.ZodType<
  AdditionalContactInfoRequired$Outbound,
  z.ZodTypeDef,
  AdditionalContactInfoRequired
> = z.instanceof(AdditionalContactInfoRequired)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: AdditionalContactInfoRequiredCode$outboundSchema,
      message: z.string(),
      tag: AdditionalContactInfoRequiredTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AdditionalContactInfoRequired$ {
  /** @deprecated use `AdditionalContactInfoRequired$inboundSchema` instead. */
  export const inboundSchema = AdditionalContactInfoRequired$inboundSchema;
  /** @deprecated use `AdditionalContactInfoRequired$outboundSchema` instead. */
  export const outboundSchema = AdditionalContactInfoRequired$outboundSchema;
  /** @deprecated use `AdditionalContactInfoRequired$Outbound` instead. */
  export type Outbound = AdditionalContactInfoRequired$Outbound;
}
