/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const BadRequestCode = {
  BadRequest: "bad_request",
} as const;
export type BadRequestCode = ClosedEnum<typeof BadRequestCode>;

export const BadRequestTag = {
  BadRequest: "BadRequest",
} as const;
export type BadRequestTag = ClosedEnum<typeof BadRequestTag>;

export type BadRequestData = {
  status: number;
  code: BadRequestCode;
  message: string;
  tag: BadRequestTag;
};

export class BadRequest extends VercelError {
  status: number;
  code: BadRequestCode;
  tag: BadRequestTag;

  /** The original data that was passed to this error instance. */
  data$: BadRequestData;

  constructor(
    err: BadRequestData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "BadRequest";
  }
}

/** @internal */
export const BadRequestCode$inboundSchema: z.ZodNativeEnum<
  typeof BadRequestCode
> = z.nativeEnum(BadRequestCode);

/** @internal */
export const BadRequestCode$outboundSchema: z.ZodNativeEnum<
  typeof BadRequestCode
> = BadRequestCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestCode$ {
  /** @deprecated use `BadRequestCode$inboundSchema` instead. */
  export const inboundSchema = BadRequestCode$inboundSchema;
  /** @deprecated use `BadRequestCode$outboundSchema` instead. */
  export const outboundSchema = BadRequestCode$outboundSchema;
}

/** @internal */
export const BadRequestTag$inboundSchema: z.ZodNativeEnum<
  typeof BadRequestTag
> = z.nativeEnum(BadRequestTag);

/** @internal */
export const BadRequestTag$outboundSchema: z.ZodNativeEnum<
  typeof BadRequestTag
> = BadRequestTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestTag$ {
  /** @deprecated use `BadRequestTag$inboundSchema` instead. */
  export const inboundSchema = BadRequestTag$inboundSchema;
  /** @deprecated use `BadRequestTag$outboundSchema` instead. */
  export const outboundSchema = BadRequestTag$outboundSchema;
}

/** @internal */
export const BadRequest$inboundSchema: z.ZodType<
  BadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: BadRequestCode$inboundSchema,
  message: z.string(),
  _tag: BadRequestTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new BadRequest(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type BadRequest$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const BadRequest$outboundSchema: z.ZodType<
  BadRequest$Outbound,
  z.ZodTypeDef,
  BadRequest
> = z.instanceof(BadRequest)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: BadRequestCode$outboundSchema,
      message: z.string(),
      tag: BadRequestTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequest$ {
  /** @deprecated use `BadRequest$inboundSchema` instead. */
  export const inboundSchema = BadRequest$inboundSchema;
  /** @deprecated use `BadRequest$outboundSchema` instead. */
  export const outboundSchema = BadRequest$outboundSchema;
  /** @deprecated use `BadRequest$Outbound` instead. */
  export type Outbound = BadRequest$Outbound;
}
