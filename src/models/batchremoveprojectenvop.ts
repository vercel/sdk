/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type BatchRemoveProjectEnvRequestBody = {
  /**
   * Array of environment variable IDs to delete
   */
  ids: Array<string>;
};

export type BatchRemoveProjectEnvRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: BatchRemoveProjectEnvRequestBody | undefined;
};

export type BatchRemoveProjectEnvResponseBody = {
  deleted: number;
  ids: Array<string>;
};

/** @internal */
export const BatchRemoveProjectEnvRequestBody$inboundSchema: z.ZodType<
  BatchRemoveProjectEnvRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
});

/** @internal */
export type BatchRemoveProjectEnvRequestBody$Outbound = {
  ids: Array<string>;
};

/** @internal */
export const BatchRemoveProjectEnvRequestBody$outboundSchema: z.ZodType<
  BatchRemoveProjectEnvRequestBody$Outbound,
  z.ZodTypeDef,
  BatchRemoveProjectEnvRequestBody
> = z.object({
  ids: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchRemoveProjectEnvRequestBody$ {
  /** @deprecated use `BatchRemoveProjectEnvRequestBody$inboundSchema` instead. */
  export const inboundSchema = BatchRemoveProjectEnvRequestBody$inboundSchema;
  /** @deprecated use `BatchRemoveProjectEnvRequestBody$outboundSchema` instead. */
  export const outboundSchema = BatchRemoveProjectEnvRequestBody$outboundSchema;
  /** @deprecated use `BatchRemoveProjectEnvRequestBody$Outbound` instead. */
  export type Outbound = BatchRemoveProjectEnvRequestBody$Outbound;
}

export function batchRemoveProjectEnvRequestBodyToJSON(
  batchRemoveProjectEnvRequestBody: BatchRemoveProjectEnvRequestBody,
): string {
  return JSON.stringify(
    BatchRemoveProjectEnvRequestBody$outboundSchema.parse(
      batchRemoveProjectEnvRequestBody,
    ),
  );
}

export function batchRemoveProjectEnvRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BatchRemoveProjectEnvRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchRemoveProjectEnvRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchRemoveProjectEnvRequestBody' from JSON`,
  );
}

/** @internal */
export const BatchRemoveProjectEnvRequest$inboundSchema: z.ZodType<
  BatchRemoveProjectEnvRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => BatchRemoveProjectEnvRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BatchRemoveProjectEnvRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: BatchRemoveProjectEnvRequestBody$Outbound | undefined;
};

/** @internal */
export const BatchRemoveProjectEnvRequest$outboundSchema: z.ZodType<
  BatchRemoveProjectEnvRequest$Outbound,
  z.ZodTypeDef,
  BatchRemoveProjectEnvRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => BatchRemoveProjectEnvRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchRemoveProjectEnvRequest$ {
  /** @deprecated use `BatchRemoveProjectEnvRequest$inboundSchema` instead. */
  export const inboundSchema = BatchRemoveProjectEnvRequest$inboundSchema;
  /** @deprecated use `BatchRemoveProjectEnvRequest$outboundSchema` instead. */
  export const outboundSchema = BatchRemoveProjectEnvRequest$outboundSchema;
  /** @deprecated use `BatchRemoveProjectEnvRequest$Outbound` instead. */
  export type Outbound = BatchRemoveProjectEnvRequest$Outbound;
}

export function batchRemoveProjectEnvRequestToJSON(
  batchRemoveProjectEnvRequest: BatchRemoveProjectEnvRequest,
): string {
  return JSON.stringify(
    BatchRemoveProjectEnvRequest$outboundSchema.parse(
      batchRemoveProjectEnvRequest,
    ),
  );
}

export function batchRemoveProjectEnvRequestFromJSON(
  jsonString: string,
): SafeParseResult<BatchRemoveProjectEnvRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchRemoveProjectEnvRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchRemoveProjectEnvRequest' from JSON`,
  );
}

/** @internal */
export const BatchRemoveProjectEnvResponseBody$inboundSchema: z.ZodType<
  BatchRemoveProjectEnvResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted: z.number(),
  ids: z.array(z.string()),
});

/** @internal */
export type BatchRemoveProjectEnvResponseBody$Outbound = {
  deleted: number;
  ids: Array<string>;
};

/** @internal */
export const BatchRemoveProjectEnvResponseBody$outboundSchema: z.ZodType<
  BatchRemoveProjectEnvResponseBody$Outbound,
  z.ZodTypeDef,
  BatchRemoveProjectEnvResponseBody
> = z.object({
  deleted: z.number(),
  ids: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchRemoveProjectEnvResponseBody$ {
  /** @deprecated use `BatchRemoveProjectEnvResponseBody$inboundSchema` instead. */
  export const inboundSchema = BatchRemoveProjectEnvResponseBody$inboundSchema;
  /** @deprecated use `BatchRemoveProjectEnvResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BatchRemoveProjectEnvResponseBody$outboundSchema;
  /** @deprecated use `BatchRemoveProjectEnvResponseBody$Outbound` instead. */
  export type Outbound = BatchRemoveProjectEnvResponseBody$Outbound;
}

export function batchRemoveProjectEnvResponseBodyToJSON(
  batchRemoveProjectEnvResponseBody: BatchRemoveProjectEnvResponseBody,
): string {
  return JSON.stringify(
    BatchRemoveProjectEnvResponseBody$outboundSchema.parse(
      batchRemoveProjectEnvResponseBody,
    ),
  );
}

export function batchRemoveProjectEnvResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BatchRemoveProjectEnvResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchRemoveProjectEnvResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchRemoveProjectEnvResponseBody' from JSON`,
  );
}
