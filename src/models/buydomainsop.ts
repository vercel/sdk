/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  InternalServerError,
  InternalServerError$inboundSchema,
  InternalServerError$Outbound,
  InternalServerError$outboundSchema,
} from "./internalservererror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  Unauthorized,
  Unauthorized$inboundSchema,
  Unauthorized$Outbound,
  Unauthorized$outboundSchema,
} from "./unauthorized.js";

export type Domains = {
  domainName: string;
  autoRenew: boolean;
  years: number;
  /**
   * Represents a monetary amount in USD dollars
   */
  expectedPrice: number;
};

export type BuyDomainsAdditional = {};

export type BuyDomainsContactInformation = {
  /**
   * a non empty string
   */
  firstName: string;
  /**
   * a non empty string
   */
  lastName: string;
  /**
   * a non empty string
   */
  email: string;
  /**
   * A valid E.164 phone number
   */
  phone: string;
  /**
   * a non empty string
   */
  address1: string;
  /**
   * a non empty string
   */
  address2?: string | undefined;
  /**
   * a non empty string
   */
  city: string;
  /**
   * a non empty string
   */
  state: string;
  /**
   * a non empty string
   */
  zip: string;
  /**
   * A valid ISO 3166-1 alpha-2 country code
   */
  country: string;
  /**
   * a non empty string
   */
  companyName?: string | undefined;
  /**
   * A valid E.164 phone number
   */
  fax?: string | undefined;
  additional?: BuyDomainsAdditional | undefined;
};

export type BuyDomainsRequestBody = {
  domains: Array<Domains>;
  contactInformation: BuyDomainsContactInformation;
};

/**
 * Unauthorized
 */
export type BuyDomainsDomainsRegistrarResponseBody =
  | Unauthorized
  | NotAuthorizedForScope
  | InternalServerError;

export const BuyDomainsMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
  Patch: "PATCH",
} as const;
export type BuyDomainsMethod = ClosedEnum<typeof BuyDomainsMethod>;

export type BuyDomainsLinks = {
  href: string;
  method: BuyDomainsMethod;
};

/**
 * Success
 */
export type BuyDomainsResponseBody = {
  orderId: string;
  links: { [k: string]: BuyDomainsLinks };
};

/** @internal */
export const Domains$inboundSchema: z.ZodType<Domains, z.ZodTypeDef, unknown> =
  z.object({
    domainName: z.string(),
    autoRenew: z.boolean(),
    years: z.number(),
    expectedPrice: z.number(),
  });

/** @internal */
export type Domains$Outbound = {
  domainName: string;
  autoRenew: boolean;
  years: number;
  expectedPrice: number;
};

/** @internal */
export const Domains$outboundSchema: z.ZodType<
  Domains$Outbound,
  z.ZodTypeDef,
  Domains
> = z.object({
  domainName: z.string(),
  autoRenew: z.boolean(),
  years: z.number(),
  expectedPrice: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domains$ {
  /** @deprecated use `Domains$inboundSchema` instead. */
  export const inboundSchema = Domains$inboundSchema;
  /** @deprecated use `Domains$outboundSchema` instead. */
  export const outboundSchema = Domains$outboundSchema;
  /** @deprecated use `Domains$Outbound` instead. */
  export type Outbound = Domains$Outbound;
}

export function domainsToJSON(domains: Domains): string {
  return JSON.stringify(Domains$outboundSchema.parse(domains));
}

export function domainsFromJSON(
  jsonString: string,
): SafeParseResult<Domains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domains' from JSON`,
  );
}

/** @internal */
export const BuyDomainsAdditional$inboundSchema: z.ZodType<
  BuyDomainsAdditional,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type BuyDomainsAdditional$Outbound = {};

/** @internal */
export const BuyDomainsAdditional$outboundSchema: z.ZodType<
  BuyDomainsAdditional$Outbound,
  z.ZodTypeDef,
  BuyDomainsAdditional
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsAdditional$ {
  /** @deprecated use `BuyDomainsAdditional$inboundSchema` instead. */
  export const inboundSchema = BuyDomainsAdditional$inboundSchema;
  /** @deprecated use `BuyDomainsAdditional$outboundSchema` instead. */
  export const outboundSchema = BuyDomainsAdditional$outboundSchema;
  /** @deprecated use `BuyDomainsAdditional$Outbound` instead. */
  export type Outbound = BuyDomainsAdditional$Outbound;
}

export function buyDomainsAdditionalToJSON(
  buyDomainsAdditional: BuyDomainsAdditional,
): string {
  return JSON.stringify(
    BuyDomainsAdditional$outboundSchema.parse(buyDomainsAdditional),
  );
}

export function buyDomainsAdditionalFromJSON(
  jsonString: string,
): SafeParseResult<BuyDomainsAdditional, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuyDomainsAdditional$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuyDomainsAdditional' from JSON`,
  );
}

/** @internal */
export const BuyDomainsContactInformation$inboundSchema: z.ZodType<
  BuyDomainsContactInformation,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
  additional: z.lazy(() => BuyDomainsAdditional$inboundSchema).optional(),
});

/** @internal */
export type BuyDomainsContactInformation$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  zip: string;
  country: string;
  companyName?: string | undefined;
  fax?: string | undefined;
  additional?: BuyDomainsAdditional$Outbound | undefined;
};

/** @internal */
export const BuyDomainsContactInformation$outboundSchema: z.ZodType<
  BuyDomainsContactInformation$Outbound,
  z.ZodTypeDef,
  BuyDomainsContactInformation
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
  additional: z.lazy(() => BuyDomainsAdditional$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsContactInformation$ {
  /** @deprecated use `BuyDomainsContactInformation$inboundSchema` instead. */
  export const inboundSchema = BuyDomainsContactInformation$inboundSchema;
  /** @deprecated use `BuyDomainsContactInformation$outboundSchema` instead. */
  export const outboundSchema = BuyDomainsContactInformation$outboundSchema;
  /** @deprecated use `BuyDomainsContactInformation$Outbound` instead. */
  export type Outbound = BuyDomainsContactInformation$Outbound;
}

export function buyDomainsContactInformationToJSON(
  buyDomainsContactInformation: BuyDomainsContactInformation,
): string {
  return JSON.stringify(
    BuyDomainsContactInformation$outboundSchema.parse(
      buyDomainsContactInformation,
    ),
  );
}

export function buyDomainsContactInformationFromJSON(
  jsonString: string,
): SafeParseResult<BuyDomainsContactInformation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuyDomainsContactInformation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuyDomainsContactInformation' from JSON`,
  );
}

/** @internal */
export const BuyDomainsRequestBody$inboundSchema: z.ZodType<
  BuyDomainsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.array(z.lazy(() => Domains$inboundSchema)),
  contactInformation: z.lazy(() => BuyDomainsContactInformation$inboundSchema),
});

/** @internal */
export type BuyDomainsRequestBody$Outbound = {
  domains: Array<Domains$Outbound>;
  contactInformation: BuyDomainsContactInformation$Outbound;
};

/** @internal */
export const BuyDomainsRequestBody$outboundSchema: z.ZodType<
  BuyDomainsRequestBody$Outbound,
  z.ZodTypeDef,
  BuyDomainsRequestBody
> = z.object({
  domains: z.array(z.lazy(() => Domains$outboundSchema)),
  contactInformation: z.lazy(() => BuyDomainsContactInformation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsRequestBody$ {
  /** @deprecated use `BuyDomainsRequestBody$inboundSchema` instead. */
  export const inboundSchema = BuyDomainsRequestBody$inboundSchema;
  /** @deprecated use `BuyDomainsRequestBody$outboundSchema` instead. */
  export const outboundSchema = BuyDomainsRequestBody$outboundSchema;
  /** @deprecated use `BuyDomainsRequestBody$Outbound` instead. */
  export type Outbound = BuyDomainsRequestBody$Outbound;
}

export function buyDomainsRequestBodyToJSON(
  buyDomainsRequestBody: BuyDomainsRequestBody,
): string {
  return JSON.stringify(
    BuyDomainsRequestBody$outboundSchema.parse(buyDomainsRequestBody),
  );
}

export function buyDomainsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BuyDomainsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuyDomainsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuyDomainsRequestBody' from JSON`,
  );
}

/** @internal */
export const BuyDomainsDomainsRegistrarResponseBody$inboundSchema: z.ZodType<
  BuyDomainsDomainsRegistrarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  Unauthorized$inboundSchema,
  NotAuthorizedForScope$inboundSchema,
  InternalServerError$inboundSchema,
]);

/** @internal */
export type BuyDomainsDomainsRegistrarResponseBody$Outbound =
  | Unauthorized$Outbound
  | NotAuthorizedForScope$Outbound
  | InternalServerError$Outbound;

/** @internal */
export const BuyDomainsDomainsRegistrarResponseBody$outboundSchema: z.ZodType<
  BuyDomainsDomainsRegistrarResponseBody$Outbound,
  z.ZodTypeDef,
  BuyDomainsDomainsRegistrarResponseBody
> = z.union([
  Unauthorized$outboundSchema,
  NotAuthorizedForScope$outboundSchema,
  InternalServerError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsDomainsRegistrarResponseBody$ {
  /** @deprecated use `BuyDomainsDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    BuyDomainsDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `BuyDomainsDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BuyDomainsDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `BuyDomainsDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = BuyDomainsDomainsRegistrarResponseBody$Outbound;
}

export function buyDomainsDomainsRegistrarResponseBodyToJSON(
  buyDomainsDomainsRegistrarResponseBody:
    BuyDomainsDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    BuyDomainsDomainsRegistrarResponseBody$outboundSchema.parse(
      buyDomainsDomainsRegistrarResponseBody,
    ),
  );
}

export function buyDomainsDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BuyDomainsDomainsRegistrarResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BuyDomainsDomainsRegistrarResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuyDomainsDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const BuyDomainsMethod$inboundSchema: z.ZodNativeEnum<
  typeof BuyDomainsMethod
> = z.nativeEnum(BuyDomainsMethod);

/** @internal */
export const BuyDomainsMethod$outboundSchema: z.ZodNativeEnum<
  typeof BuyDomainsMethod
> = BuyDomainsMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsMethod$ {
  /** @deprecated use `BuyDomainsMethod$inboundSchema` instead. */
  export const inboundSchema = BuyDomainsMethod$inboundSchema;
  /** @deprecated use `BuyDomainsMethod$outboundSchema` instead. */
  export const outboundSchema = BuyDomainsMethod$outboundSchema;
}

/** @internal */
export const BuyDomainsLinks$inboundSchema: z.ZodType<
  BuyDomainsLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  method: BuyDomainsMethod$inboundSchema,
});

/** @internal */
export type BuyDomainsLinks$Outbound = {
  href: string;
  method: string;
};

/** @internal */
export const BuyDomainsLinks$outboundSchema: z.ZodType<
  BuyDomainsLinks$Outbound,
  z.ZodTypeDef,
  BuyDomainsLinks
> = z.object({
  href: z.string(),
  method: BuyDomainsMethod$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsLinks$ {
  /** @deprecated use `BuyDomainsLinks$inboundSchema` instead. */
  export const inboundSchema = BuyDomainsLinks$inboundSchema;
  /** @deprecated use `BuyDomainsLinks$outboundSchema` instead. */
  export const outboundSchema = BuyDomainsLinks$outboundSchema;
  /** @deprecated use `BuyDomainsLinks$Outbound` instead. */
  export type Outbound = BuyDomainsLinks$Outbound;
}

export function buyDomainsLinksToJSON(
  buyDomainsLinks: BuyDomainsLinks,
): string {
  return JSON.stringify(BuyDomainsLinks$outboundSchema.parse(buyDomainsLinks));
}

export function buyDomainsLinksFromJSON(
  jsonString: string,
): SafeParseResult<BuyDomainsLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuyDomainsLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuyDomainsLinks' from JSON`,
  );
}

/** @internal */
export const BuyDomainsResponseBody$inboundSchema: z.ZodType<
  BuyDomainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  _links: z.record(z.lazy(() => BuyDomainsLinks$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type BuyDomainsResponseBody$Outbound = {
  orderId: string;
  _links: { [k: string]: BuyDomainsLinks$Outbound };
};

/** @internal */
export const BuyDomainsResponseBody$outboundSchema: z.ZodType<
  BuyDomainsResponseBody$Outbound,
  z.ZodTypeDef,
  BuyDomainsResponseBody
> = z.object({
  orderId: z.string(),
  links: z.record(z.lazy(() => BuyDomainsLinks$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuyDomainsResponseBody$ {
  /** @deprecated use `BuyDomainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = BuyDomainsResponseBody$inboundSchema;
  /** @deprecated use `BuyDomainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = BuyDomainsResponseBody$outboundSchema;
  /** @deprecated use `BuyDomainsResponseBody$Outbound` instead. */
  export type Outbound = BuyDomainsResponseBody$Outbound;
}

export function buyDomainsResponseBodyToJSON(
  buyDomainsResponseBody: BuyDomainsResponseBody,
): string {
  return JSON.stringify(
    BuyDomainsResponseBody$outboundSchema.parse(buyDomainsResponseBody),
  );
}

export function buyDomainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BuyDomainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuyDomainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuyDomainsResponseBody' from JSON`,
  );
}
