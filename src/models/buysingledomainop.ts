/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AdditionalContactInfoRequired,
  AdditionalContactInfoRequired$inboundSchema,
  AdditionalContactInfoRequired$Outbound,
  AdditionalContactInfoRequired$outboundSchema,
} from "./additionalcontactinforequired.js";
import {
  DomainNotAvailable,
  DomainNotAvailable$inboundSchema,
  DomainNotAvailable$Outbound,
  DomainNotAvailable$outboundSchema,
} from "./domainnotavailable.js";
import {
  ExpectedPriceMismatch,
  ExpectedPriceMismatch$inboundSchema,
  ExpectedPriceMismatch$Outbound,
  ExpectedPriceMismatch$outboundSchema,
} from "./expectedpricemismatch.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import {
  InvalidAdditionalContactInfo,
  InvalidAdditionalContactInfo$inboundSchema,
  InvalidAdditionalContactInfo$Outbound,
  InvalidAdditionalContactInfo$outboundSchema,
} from "./invalidadditionalcontactinfo.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import {
  OrderTooExpensive,
  OrderTooExpensive$inboundSchema,
  OrderTooExpensive$Outbound,
  OrderTooExpensive$outboundSchema,
} from "./ordertooexpensive.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  TldNotSupported,
  TldNotSupported$inboundSchema,
  TldNotSupported$Outbound,
  TldNotSupported$outboundSchema,
} from "./tldnotsupported.js";

export type Additional = {};

/**
 * The contact information for the domain. Some TLDs require additional contact information. Use the [Get contact info schema](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/get-contact-info-schema) endpoint to retrieve the required fields.
 */
export type ContactInformation = {
  /**
   * a non empty string
   */
  firstName: string;
  /**
   * a non empty string
   */
  lastName: string;
  /**
   * a non empty string
   */
  email: string;
  /**
   * A valid E.164 phone number
   */
  phone: string;
  /**
   * a non empty string
   */
  address1: string;
  /**
   * a non empty string
   */
  address2?: string | undefined;
  /**
   * a non empty string
   */
  city: string;
  /**
   * a non empty string
   */
  state: string;
  /**
   * a non empty string
   */
  zip: string;
  /**
   * A valid ISO 3166-1 alpha-2 country code
   */
  country: string;
  /**
   * a non empty string
   */
  companyName?: string | undefined;
  /**
   * A valid E.164 phone number
   */
  fax?: string | undefined;
  additional?: Additional | undefined;
};

export type BuySingleDomainRequestBody = {
  /**
   * Whether the domain should be auto-renewed before it expires. This can be configured later through the Vercel Dashboard or the [Update auto-renew for a domain](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/update-auto-renew-for-a-domain) endpoint.
   */
  autoRenew: boolean;
  /**
   * The number of years to purchase the domain for.
   */
  years: number;
  /**
   * The base TLD price for purchasing a domain for the given number of years. If null, the TLD does not support purchasing domains for the given number of years.
   */
  expectedPrice: number;
  /**
   * The contact information for the domain. Some TLDs require additional contact information. Use the [Get contact info schema](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/get-contact-info-schema) endpoint to retrieve the required fields.
   */
  contactInformation: ContactInformation;
};

export type BuySingleDomainRequest = {
  domain: string;
  requestBody: BuySingleDomainRequestBody;
};

/**
 * NotAuthorizedForScope
 */
export type BuySingleDomainDomainsRegistrarResponseResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

/**
 * There was something wrong with the request
 */
export type BuySingleDomainDomainsRegistrarResponseBody =
  | OrderTooExpensive
  | InvalidAdditionalContactInfo
  | AdditionalContactInfoRequired
  | ExpectedPriceMismatch
  | DomainNotAvailable
  | TldNotSupported
  | HttpApiDecodeError;

export const Method = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
  Patch: "PATCH",
} as const;
export type Method = ClosedEnum<typeof Method>;

export type Links = {
  href: string;
  method: Method;
};

/**
 * Success
 */
export type BuySingleDomainResponseBody = {
  orderId: string;
  links: { [k: string]: Links };
};

/** @internal */
export const Additional$inboundSchema: z.ZodType<
  Additional,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type Additional$Outbound = {};

/** @internal */
export const Additional$outboundSchema: z.ZodType<
  Additional$Outbound,
  z.ZodTypeDef,
  Additional
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Additional$ {
  /** @deprecated use `Additional$inboundSchema` instead. */
  export const inboundSchema = Additional$inboundSchema;
  /** @deprecated use `Additional$outboundSchema` instead. */
  export const outboundSchema = Additional$outboundSchema;
  /** @deprecated use `Additional$Outbound` instead. */
  export type Outbound = Additional$Outbound;
}

export function additionalToJSON(additional: Additional): string {
  return JSON.stringify(Additional$outboundSchema.parse(additional));
}

export function additionalFromJSON(
  jsonString: string,
): SafeParseResult<Additional, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Additional$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Additional' from JSON`,
  );
}

/** @internal */
export const ContactInformation$inboundSchema: z.ZodType<
  ContactInformation,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
  additional: z.lazy(() => Additional$inboundSchema).optional(),
});

/** @internal */
export type ContactInformation$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  zip: string;
  country: string;
  companyName?: string | undefined;
  fax?: string | undefined;
  additional?: Additional$Outbound | undefined;
};

/** @internal */
export const ContactInformation$outboundSchema: z.ZodType<
  ContactInformation$Outbound,
  z.ZodTypeDef,
  ContactInformation
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
  additional: z.lazy(() => Additional$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContactInformation$ {
  /** @deprecated use `ContactInformation$inboundSchema` instead. */
  export const inboundSchema = ContactInformation$inboundSchema;
  /** @deprecated use `ContactInformation$outboundSchema` instead. */
  export const outboundSchema = ContactInformation$outboundSchema;
  /** @deprecated use `ContactInformation$Outbound` instead. */
  export type Outbound = ContactInformation$Outbound;
}

export function contactInformationToJSON(
  contactInformation: ContactInformation,
): string {
  return JSON.stringify(
    ContactInformation$outboundSchema.parse(contactInformation),
  );
}

export function contactInformationFromJSON(
  jsonString: string,
): SafeParseResult<ContactInformation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContactInformation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContactInformation' from JSON`,
  );
}

/** @internal */
export const BuySingleDomainRequestBody$inboundSchema: z.ZodType<
  BuySingleDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoRenew: z.boolean(),
  years: z.number(),
  expectedPrice: z.number(),
  contactInformation: z.lazy(() => ContactInformation$inboundSchema),
});

/** @internal */
export type BuySingleDomainRequestBody$Outbound = {
  autoRenew: boolean;
  years: number;
  expectedPrice: number;
  contactInformation: ContactInformation$Outbound;
};

/** @internal */
export const BuySingleDomainRequestBody$outboundSchema: z.ZodType<
  BuySingleDomainRequestBody$Outbound,
  z.ZodTypeDef,
  BuySingleDomainRequestBody
> = z.object({
  autoRenew: z.boolean(),
  years: z.number(),
  expectedPrice: z.number(),
  contactInformation: z.lazy(() => ContactInformation$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuySingleDomainRequestBody$ {
  /** @deprecated use `BuySingleDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = BuySingleDomainRequestBody$inboundSchema;
  /** @deprecated use `BuySingleDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = BuySingleDomainRequestBody$outboundSchema;
  /** @deprecated use `BuySingleDomainRequestBody$Outbound` instead. */
  export type Outbound = BuySingleDomainRequestBody$Outbound;
}

export function buySingleDomainRequestBodyToJSON(
  buySingleDomainRequestBody: BuySingleDomainRequestBody,
): string {
  return JSON.stringify(
    BuySingleDomainRequestBody$outboundSchema.parse(buySingleDomainRequestBody),
  );
}

export function buySingleDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<BuySingleDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuySingleDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuySingleDomainRequestBody' from JSON`,
  );
}

/** @internal */
export const BuySingleDomainRequest$inboundSchema: z.ZodType<
  BuySingleDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  RequestBody: z.lazy(() => BuySingleDomainRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type BuySingleDomainRequest$Outbound = {
  domain: string;
  RequestBody: BuySingleDomainRequestBody$Outbound;
};

/** @internal */
export const BuySingleDomainRequest$outboundSchema: z.ZodType<
  BuySingleDomainRequest$Outbound,
  z.ZodTypeDef,
  BuySingleDomainRequest
> = z.object({
  domain: z.string(),
  requestBody: z.lazy(() => BuySingleDomainRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuySingleDomainRequest$ {
  /** @deprecated use `BuySingleDomainRequest$inboundSchema` instead. */
  export const inboundSchema = BuySingleDomainRequest$inboundSchema;
  /** @deprecated use `BuySingleDomainRequest$outboundSchema` instead. */
  export const outboundSchema = BuySingleDomainRequest$outboundSchema;
  /** @deprecated use `BuySingleDomainRequest$Outbound` instead. */
  export type Outbound = BuySingleDomainRequest$Outbound;
}

export function buySingleDomainRequestToJSON(
  buySingleDomainRequest: BuySingleDomainRequest,
): string {
  return JSON.stringify(
    BuySingleDomainRequest$outboundSchema.parse(buySingleDomainRequest),
  );
}

export function buySingleDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<BuySingleDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuySingleDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuySingleDomainRequest' from JSON`,
  );
}

/** @internal */
export const BuySingleDomainDomainsRegistrarResponseResponseBody$inboundSchema:
  z.ZodType<
    BuySingleDomainDomainsRegistrarResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type BuySingleDomainDomainsRegistrarResponseResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const BuySingleDomainDomainsRegistrarResponseResponseBody$outboundSchema:
  z.ZodType<
    BuySingleDomainDomainsRegistrarResponseResponseBody$Outbound,
    z.ZodTypeDef,
    BuySingleDomainDomainsRegistrarResponseResponseBody
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuySingleDomainDomainsRegistrarResponseResponseBody$ {
  /** @deprecated use `BuySingleDomainDomainsRegistrarResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    BuySingleDomainDomainsRegistrarResponseResponseBody$inboundSchema;
  /** @deprecated use `BuySingleDomainDomainsRegistrarResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BuySingleDomainDomainsRegistrarResponseResponseBody$outboundSchema;
  /** @deprecated use `BuySingleDomainDomainsRegistrarResponseResponseBody$Outbound` instead. */
  export type Outbound =
    BuySingleDomainDomainsRegistrarResponseResponseBody$Outbound;
}

export function buySingleDomainDomainsRegistrarResponseResponseBodyToJSON(
  buySingleDomainDomainsRegistrarResponseResponseBody:
    BuySingleDomainDomainsRegistrarResponseResponseBody,
): string {
  return JSON.stringify(
    BuySingleDomainDomainsRegistrarResponseResponseBody$outboundSchema.parse(
      buySingleDomainDomainsRegistrarResponseResponseBody,
    ),
  );
}

export function buySingleDomainDomainsRegistrarResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BuySingleDomainDomainsRegistrarResponseResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BuySingleDomainDomainsRegistrarResponseResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BuySingleDomainDomainsRegistrarResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const BuySingleDomainDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    BuySingleDomainDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([
    OrderTooExpensive$inboundSchema,
    InvalidAdditionalContactInfo$inboundSchema,
    AdditionalContactInfoRequired$inboundSchema,
    ExpectedPriceMismatch$inboundSchema,
    DomainNotAvailable$inboundSchema,
    TldNotSupported$inboundSchema,
    HttpApiDecodeError$inboundSchema,
  ]);

/** @internal */
export type BuySingleDomainDomainsRegistrarResponseBody$Outbound =
  | OrderTooExpensive$Outbound
  | InvalidAdditionalContactInfo$Outbound
  | AdditionalContactInfoRequired$Outbound
  | ExpectedPriceMismatch$Outbound
  | DomainNotAvailable$Outbound
  | TldNotSupported$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const BuySingleDomainDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    BuySingleDomainDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    BuySingleDomainDomainsRegistrarResponseBody
  > = z.union([
    OrderTooExpensive$outboundSchema,
    InvalidAdditionalContactInfo$outboundSchema,
    AdditionalContactInfoRequired$outboundSchema,
    ExpectedPriceMismatch$outboundSchema,
    DomainNotAvailable$outboundSchema,
    TldNotSupported$outboundSchema,
    HttpApiDecodeError$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuySingleDomainDomainsRegistrarResponseBody$ {
  /** @deprecated use `BuySingleDomainDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    BuySingleDomainDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `BuySingleDomainDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    BuySingleDomainDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `BuySingleDomainDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = BuySingleDomainDomainsRegistrarResponseBody$Outbound;
}

export function buySingleDomainDomainsRegistrarResponseBodyToJSON(
  buySingleDomainDomainsRegistrarResponseBody:
    BuySingleDomainDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    BuySingleDomainDomainsRegistrarResponseBody$outboundSchema.parse(
      buySingleDomainDomainsRegistrarResponseBody,
    ),
  );
}

export function buySingleDomainDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  BuySingleDomainDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BuySingleDomainDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BuySingleDomainDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const Method$inboundSchema: z.ZodNativeEnum<typeof Method> = z
  .nativeEnum(Method);

/** @internal */
export const Method$outboundSchema: z.ZodNativeEnum<typeof Method> =
  Method$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Method$ {
  /** @deprecated use `Method$inboundSchema` instead. */
  export const inboundSchema = Method$inboundSchema;
  /** @deprecated use `Method$outboundSchema` instead. */
  export const outboundSchema = Method$outboundSchema;
}

/** @internal */
export const Links$inboundSchema: z.ZodType<Links, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string(),
    method: Method$inboundSchema,
  });

/** @internal */
export type Links$Outbound = {
  href: string;
  method: string;
};

/** @internal */
export const Links$outboundSchema: z.ZodType<
  Links$Outbound,
  z.ZodTypeDef,
  Links
> = z.object({
  href: z.string(),
  method: Method$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Links$ {
  /** @deprecated use `Links$inboundSchema` instead. */
  export const inboundSchema = Links$inboundSchema;
  /** @deprecated use `Links$outboundSchema` instead. */
  export const outboundSchema = Links$outboundSchema;
  /** @deprecated use `Links$Outbound` instead. */
  export type Outbound = Links$Outbound;
}

export function linksToJSON(links: Links): string {
  return JSON.stringify(Links$outboundSchema.parse(links));
}

export function linksFromJSON(
  jsonString: string,
): SafeParseResult<Links, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Links$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Links' from JSON`,
  );
}

/** @internal */
export const BuySingleDomainResponseBody$inboundSchema: z.ZodType<
  BuySingleDomainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  _links: z.record(z.lazy(() => Links$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type BuySingleDomainResponseBody$Outbound = {
  orderId: string;
  _links: { [k: string]: Links$Outbound };
};

/** @internal */
export const BuySingleDomainResponseBody$outboundSchema: z.ZodType<
  BuySingleDomainResponseBody$Outbound,
  z.ZodTypeDef,
  BuySingleDomainResponseBody
> = z.object({
  orderId: z.string(),
  links: z.record(z.lazy(() => Links$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BuySingleDomainResponseBody$ {
  /** @deprecated use `BuySingleDomainResponseBody$inboundSchema` instead. */
  export const inboundSchema = BuySingleDomainResponseBody$inboundSchema;
  /** @deprecated use `BuySingleDomainResponseBody$outboundSchema` instead. */
  export const outboundSchema = BuySingleDomainResponseBody$outboundSchema;
  /** @deprecated use `BuySingleDomainResponseBody$Outbound` instead. */
  export type Outbound = BuySingleDomainResponseBody$Outbound;
}

export function buySingleDomainResponseBodyToJSON(
  buySingleDomainResponseBody: BuySingleDomainResponseBody,
): string {
  return JSON.stringify(
    BuySingleDomainResponseBody$outboundSchema.parse(
      buySingleDomainResponseBody,
    ),
  );
}

export function buySingleDomainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<BuySingleDomainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BuySingleDomainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BuySingleDomainResponseBody' from JSON`,
  );
}
