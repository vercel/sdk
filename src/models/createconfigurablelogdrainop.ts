/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The delivery log format
 */
export const DeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
/**
 * The delivery log format
 */
export type DeliveryFormat = ClosedEnum<typeof DeliveryFormat>;

export const Sources = {
  Static: "static",
  Lambda: "lambda",
  Build: "build",
  Edge: "edge",
  External: "external",
  Firewall: "firewall",
} as const;
export type Sources = ClosedEnum<typeof Sources>;

export const Environments = {
  Preview: "preview",
  Production: "production",
} as const;
export type Environments = ClosedEnum<typeof Environments>;

export type CreateConfigurableLogDrainRequestBody = {
  /**
   * The delivery log format
   */
  deliveryFormat: DeliveryFormat;
  /**
   * The log drain url
   */
  url: string;
  /**
   * Headers to be sent together with the request
   */
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  sources: Array<Sources>;
  environments?: Array<Environments> | undefined;
  /**
   * Custom secret of log drain
   */
  secret?: string | undefined;
  /**
   * The sampling rate for this log drain. It should be a percentage rate between 0 and 100. With max 2 decimal points
   */
  samplingRate?: number | undefined;
  /**
   * The custom name of this log drain.
   */
  name?: string | undefined;
};

export type CreateConfigurableLogDrainRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: CreateConfigurableLogDrainRequestBody;
};

export type CreateConfigurableLogDrainResponseBody = {};

/** @internal */
export const DeliveryFormat$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryFormat
> = z.nativeEnum(DeliveryFormat);

/** @internal */
export const DeliveryFormat$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryFormat
> = DeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryFormat$ {
  /** @deprecated use `DeliveryFormat$inboundSchema` instead. */
  export const inboundSchema = DeliveryFormat$inboundSchema;
  /** @deprecated use `DeliveryFormat$outboundSchema` instead. */
  export const outboundSchema = DeliveryFormat$outboundSchema;
}

/** @internal */
export const Sources$inboundSchema: z.ZodNativeEnum<typeof Sources> = z
  .nativeEnum(Sources);

/** @internal */
export const Sources$outboundSchema: z.ZodNativeEnum<typeof Sources> =
  Sources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sources$ {
  /** @deprecated use `Sources$inboundSchema` instead. */
  export const inboundSchema = Sources$inboundSchema;
  /** @deprecated use `Sources$outboundSchema` instead. */
  export const outboundSchema = Sources$outboundSchema;
}

/** @internal */
export const Environments$inboundSchema: z.ZodNativeEnum<typeof Environments> =
  z.nativeEnum(Environments);

/** @internal */
export const Environments$outboundSchema: z.ZodNativeEnum<typeof Environments> =
  Environments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Environments$ {
  /** @deprecated use `Environments$inboundSchema` instead. */
  export const inboundSchema = Environments$inboundSchema;
  /** @deprecated use `Environments$outboundSchema` instead. */
  export const outboundSchema = Environments$outboundSchema;
}

/** @internal */
export const CreateConfigurableLogDrainRequestBody$inboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deliveryFormat: DeliveryFormat$inboundSchema,
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  sources: z.array(Sources$inboundSchema),
  environments: z.array(Environments$inboundSchema).optional(),
  secret: z.string().optional(),
  samplingRate: z.number().optional(),
  name: z.string().optional(),
});

/** @internal */
export type CreateConfigurableLogDrainRequestBody$Outbound = {
  deliveryFormat: string;
  url: string;
  headers?: { [k: string]: string } | undefined;
  projectIds?: Array<string> | undefined;
  sources: Array<string>;
  environments?: Array<string> | undefined;
  secret?: string | undefined;
  samplingRate?: number | undefined;
  name?: string | undefined;
};

/** @internal */
export const CreateConfigurableLogDrainRequestBody$outboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequestBody$Outbound,
  z.ZodTypeDef,
  CreateConfigurableLogDrainRequestBody
> = z.object({
  deliveryFormat: DeliveryFormat$outboundSchema,
  url: z.string(),
  headers: z.record(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  sources: z.array(Sources$outboundSchema),
  environments: z.array(Environments$outboundSchema).optional(),
  secret: z.string().optional(),
  samplingRate: z.number().optional(),
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainRequestBody$ {
  /** @deprecated use `CreateConfigurableLogDrainRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainRequestBody$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainRequestBody$outboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequestBody$Outbound` instead. */
  export type Outbound = CreateConfigurableLogDrainRequestBody$Outbound;
}

export function createConfigurableLogDrainRequestBodyToJSON(
  createConfigurableLogDrainRequestBody: CreateConfigurableLogDrainRequestBody,
): string {
  return JSON.stringify(
    CreateConfigurableLogDrainRequestBody$outboundSchema.parse(
      createConfigurableLogDrainRequestBody,
    ),
  );
}

export function createConfigurableLogDrainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateConfigurableLogDrainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConfigurableLogDrainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConfigurableLogDrainRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateConfigurableLogDrainRequest$inboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() =>
    CreateConfigurableLogDrainRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateConfigurableLogDrainRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: CreateConfigurableLogDrainRequestBody$Outbound;
};

/** @internal */
export const CreateConfigurableLogDrainRequest$outboundSchema: z.ZodType<
  CreateConfigurableLogDrainRequest$Outbound,
  z.ZodTypeDef,
  CreateConfigurableLogDrainRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() =>
    CreateConfigurableLogDrainRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainRequest$ {
  /** @deprecated use `CreateConfigurableLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = CreateConfigurableLogDrainRequest$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainRequest$outboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainRequest$Outbound` instead. */
  export type Outbound = CreateConfigurableLogDrainRequest$Outbound;
}

export function createConfigurableLogDrainRequestToJSON(
  createConfigurableLogDrainRequest: CreateConfigurableLogDrainRequest,
): string {
  return JSON.stringify(
    CreateConfigurableLogDrainRequest$outboundSchema.parse(
      createConfigurableLogDrainRequest,
    ),
  );
}

export function createConfigurableLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateConfigurableLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConfigurableLogDrainRequest' from JSON`,
  );
}

/** @internal */
export const CreateConfigurableLogDrainResponseBody$inboundSchema: z.ZodType<
  CreateConfigurableLogDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateConfigurableLogDrainResponseBody$Outbound = {};

/** @internal */
export const CreateConfigurableLogDrainResponseBody$outboundSchema: z.ZodType<
  CreateConfigurableLogDrainResponseBody$Outbound,
  z.ZodTypeDef,
  CreateConfigurableLogDrainResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateConfigurableLogDrainResponseBody$ {
  /** @deprecated use `CreateConfigurableLogDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateConfigurableLogDrainResponseBody$inboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateConfigurableLogDrainResponseBody$outboundSchema;
  /** @deprecated use `CreateConfigurableLogDrainResponseBody$Outbound` instead. */
  export type Outbound = CreateConfigurableLogDrainResponseBody$Outbound;
}

export function createConfigurableLogDrainResponseBodyToJSON(
  createConfigurableLogDrainResponseBody:
    CreateConfigurableLogDrainResponseBody,
): string {
  return JSON.stringify(
    CreateConfigurableLogDrainResponseBody$outboundSchema.parse(
      createConfigurableLogDrainResponseBody,
    ),
  );
}

export function createConfigurableLogDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateConfigurableLogDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateConfigurableLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateConfigurableLogDrainResponseBody' from JSON`,
  );
}
