/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const CreateDrainProjects = {
  Some: "some",
  All: "all",
} as const;
export type CreateDrainProjects = ClosedEnum<typeof CreateDrainProjects>;

export type CreateDrainFilter2 = {
  type: string;
  text: string;
};

export type CreateDrainFilterProject = {
  ids?: Array<string> | undefined;
};

export type Log = {
  sources?: Array<string> | undefined;
};

export type CreateDrainFilterDeployment = {
  environments?: Array<string> | undefined;
};

export type Filter1 = {
  type: string;
  project?: CreateDrainFilterProject | undefined;
  log?: Log | undefined;
  deployment?: CreateDrainFilterDeployment | undefined;
};

export type FilterFilter = CreateDrainFilter2 | Filter1;

export type Filter2 = {
  version: string;
  filter: CreateDrainFilter2 | Filter1;
};

export type Filter = Filter2 | string;

export type Schemas = {
  version: string;
};

export type Delivery3 = {
  type: string;
  endpoint: string;
  secret: string;
};

export type Endpoint1 = {
  traces: string;
};

export type Endpoint = Endpoint1;

export const CreateDrainDeliveryEncoding = {
  Proto: "proto",
  Json: "json",
} as const;
export type CreateDrainDeliveryEncoding = ClosedEnum<
  typeof CreateDrainDeliveryEncoding
>;

export type Delivery2 = {
  type: string;
  endpoint: Endpoint1;
  encoding: CreateDrainDeliveryEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const Compression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type Compression = ClosedEnum<typeof Compression>;

export const DeliveryEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type DeliveryEncoding = ClosedEnum<typeof DeliveryEncoding>;

export type Delivery1 = {
  type: string;
  endpoint: string;
  compression?: Compression | undefined;
  encoding: DeliveryEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type Delivery = Delivery1 | Delivery2 | Delivery3;

/**
 * Environment to apply sampling to
 */
export const Env = {
  Production: "production",
  Preview: "preview",
} as const;
/**
 * Environment to apply sampling to
 */
export type Env = ClosedEnum<typeof Env>;

export type Sampling = {
  type: string;
  /**
   * Sampling rate from 0 to 1 (e.g., 0.1 for 10%)
   */
  rate: number;
  /**
   * Environment to apply sampling to
   */
  env?: Env | undefined;
  /**
   * Request path prefix to apply the sampling rule to
   */
  requestPath?: string | undefined;
};

export type Transforms = {
  id: string;
};

export type Source2 = {
  kind?: string | undefined;
};

export type One3 = {
  kind?: string | undefined;
};

export type One2 = {
  kind?: string | undefined;
  resourceId: string;
};

export type One1 = {
  kind?: string | undefined;
  externalResourceId: string;
};

export type Source1 = One1 | One2 | One3;

export type CreateDrainSource = One1 | One2 | One3 | Source2;

export type CreateDrainRequestBody = {
  name: string;
  projects: CreateDrainProjects;
  projectIds?: Array<string> | undefined;
  filter?: Filter2 | string | undefined;
  schemas: { [k: string]: Schemas };
  delivery?: Delivery1 | Delivery2 | Delivery3 | undefined;
  sampling?: Array<Sampling> | undefined;
  transforms?: Array<Transforms> | undefined;
  source?: One1 | One2 | One3 | Source2 | undefined;
};

export type CreateDrainRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: CreateDrainRequestBody | undefined;
};

export const ResponseBodyCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type ResponseBodyCreatedFrom = ClosedEnum<
  typeof ResponseBodyCreatedFrom
>;

export type CreateDrainResponseBodyLog = {};

export type ResponseBodyTrace = {};

export type CreateDrainResponseBodyAnalytics = {};

export type CreateDrainResponseBodyDrainsSpeedInsights = {};

export type CreateDrainResponseBodySchemas = {
  log?: CreateDrainResponseBodyLog | undefined;
  trace?: ResponseBodyTrace | undefined;
  analytics?: CreateDrainResponseBodyAnalytics | undefined;
  speedInsights?: CreateDrainResponseBodyDrainsSpeedInsights | undefined;
};

export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type =
  {
    Internal: "internal",
  } as const;
export type CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type =
  ClosedEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  >;

export const CreateDrainDeliveryTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type CreateDrainDeliveryTarget = ClosedEnum<
  typeof CreateDrainDeliveryTarget
>;

export type CreateDrainDelivery5 = {
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type;
  target: CreateDrainDeliveryTarget;
};

export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type =
  {
    Clickhouse: "clickhouse",
  } as const;
export type CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type =
  ClosedEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  >;

export type CreateDrainDelivery4 = {
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type;
  endpoint: string;
  table: string;
};

export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type =
  {
    Syslog: "syslog",
  } as const;
export type CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  >;

export type CreateDrainDeliveryDrains3 = {
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type;
  endpoint: string;
  secret: string;
};

export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  {
    Otlphttp: "otlphttp",
  } as const;
export type CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  >;

export type CreateDrainDeliveryEndpoint = {
  traces: string;
};

export const CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding =
  ClosedEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding
  >;

export type CreateDrainDeliveryDrains2 = {
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType;
  endpoint: CreateDrainDeliveryEndpoint;
  encoding: CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const CreateDrainDeliveryDrainsResponse200ApplicationJSONType = {
  Http: "http",
} as const;
export type CreateDrainDeliveryDrainsResponse200ApplicationJSONType =
  ClosedEnum<typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONType>;

export const CreateDrainDeliveryDrainsResponse200Encoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type CreateDrainDeliveryDrainsResponse200Encoding = ClosedEnum<
  typeof CreateDrainDeliveryDrainsResponse200Encoding
>;

export const CreateDrainDeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type CreateDrainDeliveryCompression = ClosedEnum<
  typeof CreateDrainDeliveryCompression
>;

export type CreateDrainDeliveryDrains1 = {
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONType;
  endpoint: string;
  encoding: CreateDrainDeliveryDrainsResponse200Encoding;
  compression?: CreateDrainDeliveryCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type CreateDrainResponseBodyDelivery =
  | CreateDrainDeliveryDrains1
  | CreateDrainDeliveryDrains2
  | CreateDrainDeliveryDrains3
  | CreateDrainDelivery4
  | CreateDrainDelivery5;

export const CreateDrainResponseBodyDrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type CreateDrainResponseBodyDrainsType = ClosedEnum<
  typeof CreateDrainResponseBodyDrainsType
>;

export const CreateDrainResponseBodyEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type CreateDrainResponseBodyEnv = ClosedEnum<
  typeof CreateDrainResponseBodyEnv
>;

export type CreateDrainResponseBodySampling = {
  type: CreateDrainResponseBodyDrainsType;
  rate: number;
  env?: CreateDrainResponseBodyEnv | undefined;
  requestPath?: string | undefined;
};

export const CreateDrainResponseBodyDrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type CreateDrainResponseBodyDrainsStatus = ClosedEnum<
  typeof CreateDrainResponseBodyDrainsStatus
>;

export const ResponseBodyDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type ResponseBodyDisabledReason = ClosedEnum<
  typeof ResponseBodyDisabledReason
>;

export const CreateDrainSourceDrainsKind = {
  Integration: "integration",
} as const;
export type CreateDrainSourceDrainsKind = ClosedEnum<
  typeof CreateDrainSourceDrainsKind
>;

export type CreateDrainSourceDrains2 = {
  kind: CreateDrainSourceDrainsKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const CreateDrainSourceKind = {
  SelfServed: "self-served",
} as const;
export type CreateDrainSourceKind = ClosedEnum<typeof CreateDrainSourceKind>;

export type CreateDrainSourceDrains1 = {
  kind: CreateDrainSourceKind;
};

export type CreateDrainResponseBodyDrainsSource =
  | CreateDrainSourceDrains2
  | CreateDrainSourceDrains1;

export const CreateDrainFilterV2DrainsVersion = {
  V2: "v2",
} as const;
export type CreateDrainFilterV2DrainsVersion = ClosedEnum<
  typeof CreateDrainFilterV2DrainsVersion
>;

export const CreateDrainFilterDrainsResponseType = {
  Odata: "odata",
} as const;
export type CreateDrainFilterDrainsResponseType = ClosedEnum<
  typeof CreateDrainFilterDrainsResponseType
>;

export type CreateDrainFilterDrainsResponse2 = {
  type: CreateDrainFilterDrainsResponseType;
  text: string;
};

export const CreateDrainFilterDrainsType = {
  Basic: "basic",
} as const;
export type CreateDrainFilterDrainsType = ClosedEnum<
  typeof CreateDrainFilterDrainsType
>;

export type CreateDrainFilterDrainsResponseProject = {
  ids?: Array<string> | undefined;
};

export type CreateDrainFilterLog = {
  sources?: Array<string> | undefined;
};

export type CreateDrainFilterDrainsResponseDeployment = {
  environments?: Array<string> | undefined;
};

export type CreateDrainFilterDrains1 = {
  type: CreateDrainFilterDrainsType;
  project?: CreateDrainFilterDrainsResponseProject | undefined;
  log?: CreateDrainFilterLog | undefined;
  deployment?: CreateDrainFilterDrainsResponseDeployment | undefined;
};

export type CreateDrainFilterV2Filter =
  | CreateDrainFilterDrainsResponse2
  | CreateDrainFilterDrains1;

export type CreateDrainFilterV22 = {
  version: CreateDrainFilterV2DrainsVersion;
  filter: CreateDrainFilterDrainsResponse2 | CreateDrainFilterDrains1;
};

export const CreateDrainFilterV2Version = {
  V1: "v1",
} as const;
export type CreateDrainFilterV2Version = ClosedEnum<
  typeof CreateDrainFilterV2Version
>;

export type CreateDrainFilterV21 = {
  version: CreateDrainFilterV2Version;
};

export type ResponseBodyFilterV2 = CreateDrainFilterV22 | CreateDrainFilterV21;

export const CreateDrainResponseBodyFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Xmcp: "xmcp",
} as const;
export type CreateDrainResponseBodyFramework = ClosedEnum<
  typeof CreateDrainResponseBodyFramework
>;

export type CreateDrainResponseBodyProjectsMetadata = {
  id: string;
  name: string;
  framework?: CreateDrainResponseBodyFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type CreateDrainResponseBody2 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: ResponseBodyCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: CreateDrainResponseBodySchemas | undefined;
  delivery?:
    | CreateDrainDeliveryDrains1
    | CreateDrainDeliveryDrains2
    | CreateDrainDeliveryDrains3
    | CreateDrainDelivery4
    | CreateDrainDelivery5
    | undefined;
  sampling?: Array<CreateDrainResponseBodySampling> | undefined;
  teamId?: string | null | undefined;
  status?: CreateDrainResponseBodyDrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: ResponseBodyDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: CreateDrainSourceDrains2 | CreateDrainSourceDrains1;
  filter?: string | undefined;
  filterV2?: CreateDrainFilterV22 | CreateDrainFilterV21 | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?: Array<CreateDrainResponseBodyProjectsMetadata> | undefined;
};

export const CreateDrainResponseBodyCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type CreateDrainResponseBodyCreatedFrom = ClosedEnum<
  typeof CreateDrainResponseBodyCreatedFrom
>;

export type ResponseBodyLog = {};

export type Trace = {};

export type ResponseBodyAnalytics = {};

export type CreateDrainResponseBodySpeedInsights = {};

export type ResponseBodySchemas = {
  log?: ResponseBodyLog | undefined;
  trace?: Trace | undefined;
  analytics?: ResponseBodyAnalytics | undefined;
  speedInsights?: CreateDrainResponseBodySpeedInsights | undefined;
};

export const CreateDrainDeliveryDrainsResponse200Type = {
  Internal: "internal",
} as const;
export type CreateDrainDeliveryDrainsResponse200Type = ClosedEnum<
  typeof CreateDrainDeliveryDrainsResponse200Type
>;

export const DeliveryTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type DeliveryTarget = ClosedEnum<typeof DeliveryTarget>;

export type Delivery5 = {
  type: CreateDrainDeliveryDrainsResponse200Type;
  target: DeliveryTarget;
};

export const CreateDrainDeliveryDrainsResponseType = {
  Clickhouse: "clickhouse",
} as const;
export type CreateDrainDeliveryDrainsResponseType = ClosedEnum<
  typeof CreateDrainDeliveryDrainsResponseType
>;

export type Delivery4 = {
  type: CreateDrainDeliveryDrainsResponseType;
  endpoint: string;
  table: string;
};

export const CreateDrainDeliveryDrainsType = {
  Syslog: "syslog",
} as const;
export type CreateDrainDeliveryDrainsType = ClosedEnum<
  typeof CreateDrainDeliveryDrainsType
>;

export type CreateDrainDelivery3 = {
  type: CreateDrainDeliveryDrainsType;
  endpoint: string;
  secret: string;
};

export const CreateDrainDeliveryType = {
  Otlphttp: "otlphttp",
} as const;
export type CreateDrainDeliveryType = ClosedEnum<
  typeof CreateDrainDeliveryType
>;

export type CreateDrainDeliveryDrainsEndpoint = {
  traces: string;
};

export const CreateDrainDeliveryDrainsResponseEncoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type CreateDrainDeliveryDrainsResponseEncoding = ClosedEnum<
  typeof CreateDrainDeliveryDrainsResponseEncoding
>;

export type CreateDrainDelivery2 = {
  type: CreateDrainDeliveryType;
  endpoint: CreateDrainDeliveryDrainsEndpoint;
  encoding: CreateDrainDeliveryDrainsResponseEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const DeliveryType = {
  Http: "http",
} as const;
export type DeliveryType = ClosedEnum<typeof DeliveryType>;

export const CreateDrainDeliveryDrainsEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type CreateDrainDeliveryDrainsEncoding = ClosedEnum<
  typeof CreateDrainDeliveryDrainsEncoding
>;

export const CreateDrainDeliveryDrainsCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type CreateDrainDeliveryDrainsCompression = ClosedEnum<
  typeof CreateDrainDeliveryDrainsCompression
>;

export type CreateDrainDelivery1 = {
  type: DeliveryType;
  endpoint: string;
  encoding: CreateDrainDeliveryDrainsEncoding;
  compression?: CreateDrainDeliveryDrainsCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type ResponseBodyDelivery =
  | CreateDrainDelivery1
  | CreateDrainDelivery2
  | CreateDrainDelivery3
  | Delivery4
  | Delivery5;

export const CreateDrainResponseBodyType = {
  HeadSampling: "head_sampling",
} as const;
export type CreateDrainResponseBodyType = ClosedEnum<
  typeof CreateDrainResponseBodyType
>;

export const ResponseBodyEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type ResponseBodyEnv = ClosedEnum<typeof ResponseBodyEnv>;

export type ResponseBodySampling = {
  type: CreateDrainResponseBodyType;
  rate: number;
  env?: ResponseBodyEnv | undefined;
  requestPath?: string | undefined;
};

export const CreateDrainResponseBodyStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type CreateDrainResponseBodyStatus = ClosedEnum<
  typeof CreateDrainResponseBodyStatus
>;

export const DisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type DisabledReason = ClosedEnum<typeof DisabledReason>;

export const CreateDrainSourceDrainsResponse200Kind = {
  Integration: "integration",
} as const;
export type CreateDrainSourceDrainsResponse200Kind = ClosedEnum<
  typeof CreateDrainSourceDrainsResponse200Kind
>;

export type CreateDrainSource2 = {
  kind: CreateDrainSourceDrainsResponse200Kind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const CreateDrainSourceDrainsResponseKind = {
  SelfServed: "self-served",
} as const;
export type CreateDrainSourceDrainsResponseKind = ClosedEnum<
  typeof CreateDrainSourceDrainsResponseKind
>;

export type CreateDrainSource1 = {
  kind: CreateDrainSourceDrainsResponseKind;
};

export type CreateDrainResponseBodySource =
  | CreateDrainSource2
  | CreateDrainSource1;

export const FilterV2Version = {
  V2: "v2",
} as const;
export type FilterV2Version = ClosedEnum<typeof FilterV2Version>;

export const CreateDrainFilterType = {
  Odata: "odata",
} as const;
export type CreateDrainFilterType = ClosedEnum<typeof CreateDrainFilterType>;

export type CreateDrainFilterDrains2 = {
  type: CreateDrainFilterType;
  text: string;
};

export const FilterType = {
  Basic: "basic",
} as const;
export type FilterType = ClosedEnum<typeof FilterType>;

export type CreateDrainFilterDrainsProject = {
  ids?: Array<string> | undefined;
};

export type CreateDrainFilterDrainsLog = {
  sources?: Array<string> | undefined;
};

export type CreateDrainFilterDrainsDeployment = {
  environments?: Array<string> | undefined;
};

export type CreateDrainFilter1 = {
  type: FilterType;
  project?: CreateDrainFilterDrainsProject | undefined;
  log?: CreateDrainFilterDrainsLog | undefined;
  deployment?: CreateDrainFilterDrainsDeployment | undefined;
};

export type FilterV2Filter = CreateDrainFilterDrains2 | CreateDrainFilter1;

export type FilterV22 = {
  version: FilterV2Version;
  filter: CreateDrainFilterDrains2 | CreateDrainFilter1;
};

export const CreateDrainFilterV2DrainsResponseVersion = {
  V1: "v1",
} as const;
export type CreateDrainFilterV2DrainsResponseVersion = ClosedEnum<
  typeof CreateDrainFilterV2DrainsResponseVersion
>;

export type FilterV21 = {
  version: CreateDrainFilterV2DrainsResponseVersion;
};

export type FilterV2 = FilterV22 | FilterV21;

export type CreateDrainResponseBody1 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: CreateDrainResponseBodyCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: ResponseBodySchemas | undefined;
  delivery?:
    | CreateDrainDelivery1
    | CreateDrainDelivery2
    | CreateDrainDelivery3
    | Delivery4
    | Delivery5
    | undefined;
  sampling?: Array<ResponseBodySampling> | undefined;
  teamId?: string | null | undefined;
  status?: CreateDrainResponseBodyStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: DisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: CreateDrainSource2 | CreateDrainSource1;
  filter?: string | undefined;
  filterV2?: FilterV22 | FilterV21 | undefined;
};

export type CreateDrainResponseBody =
  | CreateDrainResponseBody1
  | CreateDrainResponseBody2;

/** @internal */
export const CreateDrainProjects$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainProjects
> = z.nativeEnum(CreateDrainProjects);

/** @internal */
export const CreateDrainProjects$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainProjects
> = CreateDrainProjects$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainProjects$ {
  /** @deprecated use `CreateDrainProjects$inboundSchema` instead. */
  export const inboundSchema = CreateDrainProjects$inboundSchema;
  /** @deprecated use `CreateDrainProjects$outboundSchema` instead. */
  export const outboundSchema = CreateDrainProjects$outboundSchema;
}

/** @internal */
export const CreateDrainFilter2$inboundSchema: z.ZodType<
  CreateDrainFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  text: z.string(),
});

/** @internal */
export type CreateDrainFilter2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateDrainFilter2$outboundSchema: z.ZodType<
  CreateDrainFilter2$Outbound,
  z.ZodTypeDef,
  CreateDrainFilter2
> = z.object({
  type: z.string(),
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilter2$ {
  /** @deprecated use `CreateDrainFilter2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilter2$inboundSchema;
  /** @deprecated use `CreateDrainFilter2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilter2$outboundSchema;
  /** @deprecated use `CreateDrainFilter2$Outbound` instead. */
  export type Outbound = CreateDrainFilter2$Outbound;
}

export function createDrainFilter2ToJSON(
  createDrainFilter2: CreateDrainFilter2,
): string {
  return JSON.stringify(
    CreateDrainFilter2$outboundSchema.parse(createDrainFilter2),
  );
}

export function createDrainFilter2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilter2' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterProject$inboundSchema: z.ZodType<
  CreateDrainFilterProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterProject$outboundSchema: z.ZodType<
  CreateDrainFilterProject$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterProject$ {
  /** @deprecated use `CreateDrainFilterProject$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterProject$inboundSchema;
  /** @deprecated use `CreateDrainFilterProject$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterProject$outboundSchema;
  /** @deprecated use `CreateDrainFilterProject$Outbound` instead. */
  export type Outbound = CreateDrainFilterProject$Outbound;
}

export function createDrainFilterProjectToJSON(
  createDrainFilterProject: CreateDrainFilterProject,
): string {
  return JSON.stringify(
    CreateDrainFilterProject$outboundSchema.parse(createDrainFilterProject),
  );
}

export function createDrainFilterProjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterProject' from JSON`,
  );
}

/** @internal */
export const Log$inboundSchema: z.ZodType<Log, z.ZodTypeDef, unknown> = z
  .object({
    sources: z.array(z.string()).optional(),
  });

/** @internal */
export type Log$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const Log$outboundSchema: z.ZodType<Log$Outbound, z.ZodTypeDef, Log> = z
  .object({
    sources: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Log$ {
  /** @deprecated use `Log$inboundSchema` instead. */
  export const inboundSchema = Log$inboundSchema;
  /** @deprecated use `Log$outboundSchema` instead. */
  export const outboundSchema = Log$outboundSchema;
  /** @deprecated use `Log$Outbound` instead. */
  export type Outbound = Log$Outbound;
}

export function logToJSON(log: Log): string {
  return JSON.stringify(Log$outboundSchema.parse(log));
}

export function logFromJSON(
  jsonString: string,
): SafeParseResult<Log, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Log$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Log' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterDeployment$inboundSchema: z.ZodType<
  CreateDrainFilterDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterDeployment$outboundSchema: z.ZodType<
  CreateDrainFilterDeployment$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDeployment$ {
  /** @deprecated use `CreateDrainFilterDeployment$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDeployment$inboundSchema;
  /** @deprecated use `CreateDrainFilterDeployment$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDeployment$outboundSchema;
  /** @deprecated use `CreateDrainFilterDeployment$Outbound` instead. */
  export type Outbound = CreateDrainFilterDeployment$Outbound;
}

export function createDrainFilterDeploymentToJSON(
  createDrainFilterDeployment: CreateDrainFilterDeployment,
): string {
  return JSON.stringify(
    CreateDrainFilterDeployment$outboundSchema.parse(
      createDrainFilterDeployment,
    ),
  );
}

export function createDrainFilterDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDeployment' from JSON`,
  );
}

/** @internal */
export const Filter1$inboundSchema: z.ZodType<Filter1, z.ZodTypeDef, unknown> =
  z.object({
    type: z.string(),
    project: z.lazy(() => CreateDrainFilterProject$inboundSchema).optional(),
    log: z.lazy(() => Log$inboundSchema).optional(),
    deployment: z.lazy(() => CreateDrainFilterDeployment$inboundSchema)
      .optional(),
  });

/** @internal */
export type Filter1$Outbound = {
  type: string;
  project?: CreateDrainFilterProject$Outbound | undefined;
  log?: Log$Outbound | undefined;
  deployment?: CreateDrainFilterDeployment$Outbound | undefined;
};

/** @internal */
export const Filter1$outboundSchema: z.ZodType<
  Filter1$Outbound,
  z.ZodTypeDef,
  Filter1
> = z.object({
  type: z.string(),
  project: z.lazy(() => CreateDrainFilterProject$outboundSchema).optional(),
  log: z.lazy(() => Log$outboundSchema).optional(),
  deployment: z.lazy(() => CreateDrainFilterDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter1$ {
  /** @deprecated use `Filter1$inboundSchema` instead. */
  export const inboundSchema = Filter1$inboundSchema;
  /** @deprecated use `Filter1$outboundSchema` instead. */
  export const outboundSchema = Filter1$outboundSchema;
  /** @deprecated use `Filter1$Outbound` instead. */
  export type Outbound = Filter1$Outbound;
}

export function filter1ToJSON(filter1: Filter1): string {
  return JSON.stringify(Filter1$outboundSchema.parse(filter1));
}

export function filter1FromJSON(
  jsonString: string,
): SafeParseResult<Filter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter1' from JSON`,
  );
}

/** @internal */
export const FilterFilter$inboundSchema: z.ZodType<
  FilterFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainFilter2$inboundSchema),
  z.lazy(() => Filter1$inboundSchema),
]);

/** @internal */
export type FilterFilter$Outbound =
  | CreateDrainFilter2$Outbound
  | Filter1$Outbound;

/** @internal */
export const FilterFilter$outboundSchema: z.ZodType<
  FilterFilter$Outbound,
  z.ZodTypeDef,
  FilterFilter
> = z.union([
  z.lazy(() => CreateDrainFilter2$outboundSchema),
  z.lazy(() => Filter1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterFilter$ {
  /** @deprecated use `FilterFilter$inboundSchema` instead. */
  export const inboundSchema = FilterFilter$inboundSchema;
  /** @deprecated use `FilterFilter$outboundSchema` instead. */
  export const outboundSchema = FilterFilter$outboundSchema;
  /** @deprecated use `FilterFilter$Outbound` instead. */
  export type Outbound = FilterFilter$Outbound;
}

export function filterFilterToJSON(filterFilter: FilterFilter): string {
  return JSON.stringify(FilterFilter$outboundSchema.parse(filterFilter));
}

export function filterFilterFromJSON(
  jsonString: string,
): SafeParseResult<FilterFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterFilter' from JSON`,
  );
}

/** @internal */
export const Filter2$inboundSchema: z.ZodType<Filter2, z.ZodTypeDef, unknown> =
  z.object({
    version: z.string(),
    filter: z.union([
      z.lazy(() => CreateDrainFilter2$inboundSchema),
      z.lazy(() => Filter1$inboundSchema),
    ]),
  });

/** @internal */
export type Filter2$Outbound = {
  version: string;
  filter: CreateDrainFilter2$Outbound | Filter1$Outbound;
};

/** @internal */
export const Filter2$outboundSchema: z.ZodType<
  Filter2$Outbound,
  z.ZodTypeDef,
  Filter2
> = z.object({
  version: z.string(),
  filter: z.union([
    z.lazy(() => CreateDrainFilter2$outboundSchema),
    z.lazy(() => Filter1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter2$ {
  /** @deprecated use `Filter2$inboundSchema` instead. */
  export const inboundSchema = Filter2$inboundSchema;
  /** @deprecated use `Filter2$outboundSchema` instead. */
  export const outboundSchema = Filter2$outboundSchema;
  /** @deprecated use `Filter2$Outbound` instead. */
  export type Outbound = Filter2$Outbound;
}

export function filter2ToJSON(filter2: Filter2): string {
  return JSON.stringify(Filter2$outboundSchema.parse(filter2));
}

export function filter2FromJSON(
  jsonString: string,
): SafeParseResult<Filter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter2' from JSON`,
  );
}

/** @internal */
export const Filter$inboundSchema: z.ZodType<Filter, z.ZodTypeDef, unknown> = z
  .union([z.lazy(() => Filter2$inboundSchema), z.string()]);

/** @internal */
export type Filter$Outbound = Filter2$Outbound | string;

/** @internal */
export const Filter$outboundSchema: z.ZodType<
  Filter$Outbound,
  z.ZodTypeDef,
  Filter
> = z.union([z.lazy(() => Filter2$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Filter$ {
  /** @deprecated use `Filter$inboundSchema` instead. */
  export const inboundSchema = Filter$inboundSchema;
  /** @deprecated use `Filter$outboundSchema` instead. */
  export const outboundSchema = Filter$outboundSchema;
  /** @deprecated use `Filter$Outbound` instead. */
  export type Outbound = Filter$Outbound;
}

export function filterToJSON(filter: Filter): string {
  return JSON.stringify(Filter$outboundSchema.parse(filter));
}

export function filterFromJSON(
  jsonString: string,
): SafeParseResult<Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Filter' from JSON`,
  );
}

/** @internal */
export const Schemas$inboundSchema: z.ZodType<Schemas, z.ZodTypeDef, unknown> =
  z.object({
    version: z.string(),
  });

/** @internal */
export type Schemas$Outbound = {
  version: string;
};

/** @internal */
export const Schemas$outboundSchema: z.ZodType<
  Schemas$Outbound,
  z.ZodTypeDef,
  Schemas
> = z.object({
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Schemas$ {
  /** @deprecated use `Schemas$inboundSchema` instead. */
  export const inboundSchema = Schemas$inboundSchema;
  /** @deprecated use `Schemas$outboundSchema` instead. */
  export const outboundSchema = Schemas$outboundSchema;
  /** @deprecated use `Schemas$Outbound` instead. */
  export type Outbound = Schemas$Outbound;
}

export function schemasToJSON(schemas: Schemas): string {
  return JSON.stringify(Schemas$outboundSchema.parse(schemas));
}

export function schemasFromJSON(
  jsonString: string,
): SafeParseResult<Schemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Schemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Schemas' from JSON`,
  );
}

/** @internal */
export const Delivery3$inboundSchema: z.ZodType<
  Delivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type Delivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const Delivery3$outboundSchema: z.ZodType<
  Delivery3$Outbound,
  z.ZodTypeDef,
  Delivery3
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delivery3$ {
  /** @deprecated use `Delivery3$inboundSchema` instead. */
  export const inboundSchema = Delivery3$inboundSchema;
  /** @deprecated use `Delivery3$outboundSchema` instead. */
  export const outboundSchema = Delivery3$outboundSchema;
  /** @deprecated use `Delivery3$Outbound` instead. */
  export type Outbound = Delivery3$Outbound;
}

export function delivery3ToJSON(delivery3: Delivery3): string {
  return JSON.stringify(Delivery3$outboundSchema.parse(delivery3));
}

export function delivery3FromJSON(
  jsonString: string,
): SafeParseResult<Delivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delivery3' from JSON`,
  );
}

/** @internal */
export const Endpoint1$inboundSchema: z.ZodType<
  Endpoint1,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type Endpoint1$Outbound = {
  traces: string;
};

/** @internal */
export const Endpoint1$outboundSchema: z.ZodType<
  Endpoint1$Outbound,
  z.ZodTypeDef,
  Endpoint1
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Endpoint1$ {
  /** @deprecated use `Endpoint1$inboundSchema` instead. */
  export const inboundSchema = Endpoint1$inboundSchema;
  /** @deprecated use `Endpoint1$outboundSchema` instead. */
  export const outboundSchema = Endpoint1$outboundSchema;
  /** @deprecated use `Endpoint1$Outbound` instead. */
  export type Outbound = Endpoint1$Outbound;
}

export function endpoint1ToJSON(endpoint1: Endpoint1): string {
  return JSON.stringify(Endpoint1$outboundSchema.parse(endpoint1));
}

export function endpoint1FromJSON(
  jsonString: string,
): SafeParseResult<Endpoint1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Endpoint1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Endpoint1' from JSON`,
  );
}

/** @internal */
export const Endpoint$inboundSchema: z.ZodType<
  Endpoint,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => Endpoint1$inboundSchema);

/** @internal */
export type Endpoint$Outbound = Endpoint1$Outbound;

/** @internal */
export const Endpoint$outboundSchema: z.ZodType<
  Endpoint$Outbound,
  z.ZodTypeDef,
  Endpoint
> = z.lazy(() => Endpoint1$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Endpoint$ {
  /** @deprecated use `Endpoint$inboundSchema` instead. */
  export const inboundSchema = Endpoint$inboundSchema;
  /** @deprecated use `Endpoint$outboundSchema` instead. */
  export const outboundSchema = Endpoint$outboundSchema;
  /** @deprecated use `Endpoint$Outbound` instead. */
  export type Outbound = Endpoint$Outbound;
}

export function endpointToJSON(endpoint: Endpoint): string {
  return JSON.stringify(Endpoint$outboundSchema.parse(endpoint));
}

export function endpointFromJSON(
  jsonString: string,
): SafeParseResult<Endpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Endpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Endpoint' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryEncoding
> = z.nativeEnum(CreateDrainDeliveryEncoding);

/** @internal */
export const CreateDrainDeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryEncoding
> = CreateDrainDeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryEncoding$ {
  /** @deprecated use `CreateDrainDeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryEncoding$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryEncoding$outboundSchema;
}

/** @internal */
export const Delivery2$inboundSchema: z.ZodType<
  Delivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.lazy(() => Endpoint1$inboundSchema),
  encoding: CreateDrainDeliveryEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type Delivery2$Outbound = {
  type: string;
  endpoint: Endpoint1$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const Delivery2$outboundSchema: z.ZodType<
  Delivery2$Outbound,
  z.ZodTypeDef,
  Delivery2
> = z.object({
  type: z.string(),
  endpoint: z.lazy(() => Endpoint1$outboundSchema),
  encoding: CreateDrainDeliveryEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delivery2$ {
  /** @deprecated use `Delivery2$inboundSchema` instead. */
  export const inboundSchema = Delivery2$inboundSchema;
  /** @deprecated use `Delivery2$outboundSchema` instead. */
  export const outboundSchema = Delivery2$outboundSchema;
  /** @deprecated use `Delivery2$Outbound` instead. */
  export type Outbound = Delivery2$Outbound;
}

export function delivery2ToJSON(delivery2: Delivery2): string {
  return JSON.stringify(Delivery2$outboundSchema.parse(delivery2));
}

export function delivery2FromJSON(
  jsonString: string,
): SafeParseResult<Delivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delivery2' from JSON`,
  );
}

/** @internal */
export const Compression$inboundSchema: z.ZodNativeEnum<typeof Compression> = z
  .nativeEnum(Compression);

/** @internal */
export const Compression$outboundSchema: z.ZodNativeEnum<typeof Compression> =
  Compression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Compression$ {
  /** @deprecated use `Compression$inboundSchema` instead. */
  export const inboundSchema = Compression$inboundSchema;
  /** @deprecated use `Compression$outboundSchema` instead. */
  export const outboundSchema = Compression$outboundSchema;
}

/** @internal */
export const DeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryEncoding
> = z.nativeEnum(DeliveryEncoding);

/** @internal */
export const DeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryEncoding
> = DeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryEncoding$ {
  /** @deprecated use `DeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = DeliveryEncoding$inboundSchema;
  /** @deprecated use `DeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = DeliveryEncoding$outboundSchema;
}

/** @internal */
export const Delivery1$inboundSchema: z.ZodType<
  Delivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  compression: Compression$inboundSchema.optional(),
  encoding: DeliveryEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type Delivery1$Outbound = {
  type: string;
  endpoint: string;
  compression?: string | undefined;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const Delivery1$outboundSchema: z.ZodType<
  Delivery1$Outbound,
  z.ZodTypeDef,
  Delivery1
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  compression: Compression$outboundSchema.optional(),
  encoding: DeliveryEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delivery1$ {
  /** @deprecated use `Delivery1$inboundSchema` instead. */
  export const inboundSchema = Delivery1$inboundSchema;
  /** @deprecated use `Delivery1$outboundSchema` instead. */
  export const outboundSchema = Delivery1$outboundSchema;
  /** @deprecated use `Delivery1$Outbound` instead. */
  export type Outbound = Delivery1$Outbound;
}

export function delivery1ToJSON(delivery1: Delivery1): string {
  return JSON.stringify(Delivery1$outboundSchema.parse(delivery1));
}

export function delivery1FromJSON(
  jsonString: string,
): SafeParseResult<Delivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delivery1' from JSON`,
  );
}

/** @internal */
export const Delivery$inboundSchema: z.ZodType<
  Delivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Delivery1$inboundSchema),
  z.lazy(() => Delivery2$inboundSchema),
  z.lazy(() => Delivery3$inboundSchema),
]);

/** @internal */
export type Delivery$Outbound =
  | Delivery1$Outbound
  | Delivery2$Outbound
  | Delivery3$Outbound;

/** @internal */
export const Delivery$outboundSchema: z.ZodType<
  Delivery$Outbound,
  z.ZodTypeDef,
  Delivery
> = z.union([
  z.lazy(() => Delivery1$outboundSchema),
  z.lazy(() => Delivery2$outboundSchema),
  z.lazy(() => Delivery3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delivery$ {
  /** @deprecated use `Delivery$inboundSchema` instead. */
  export const inboundSchema = Delivery$inboundSchema;
  /** @deprecated use `Delivery$outboundSchema` instead. */
  export const outboundSchema = Delivery$outboundSchema;
  /** @deprecated use `Delivery$Outbound` instead. */
  export type Outbound = Delivery$Outbound;
}

export function deliveryToJSON(delivery: Delivery): string {
  return JSON.stringify(Delivery$outboundSchema.parse(delivery));
}

export function deliveryFromJSON(
  jsonString: string,
): SafeParseResult<Delivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delivery' from JSON`,
  );
}

/** @internal */
export const Env$inboundSchema: z.ZodNativeEnum<typeof Env> = z.nativeEnum(Env);

/** @internal */
export const Env$outboundSchema: z.ZodNativeEnum<typeof Env> =
  Env$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Env$ {
  /** @deprecated use `Env$inboundSchema` instead. */
  export const inboundSchema = Env$inboundSchema;
  /** @deprecated use `Env$outboundSchema` instead. */
  export const outboundSchema = Env$outboundSchema;
}

/** @internal */
export const Sampling$inboundSchema: z.ZodType<
  Sampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  rate: z.number(),
  env: Env$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type Sampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const Sampling$outboundSchema: z.ZodType<
  Sampling$Outbound,
  z.ZodTypeDef,
  Sampling
> = z.object({
  type: z.string(),
  rate: z.number(),
  env: Env$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sampling$ {
  /** @deprecated use `Sampling$inboundSchema` instead. */
  export const inboundSchema = Sampling$inboundSchema;
  /** @deprecated use `Sampling$outboundSchema` instead. */
  export const outboundSchema = Sampling$outboundSchema;
  /** @deprecated use `Sampling$Outbound` instead. */
  export type Outbound = Sampling$Outbound;
}

export function samplingToJSON(sampling: Sampling): string {
  return JSON.stringify(Sampling$outboundSchema.parse(sampling));
}

export function samplingFromJSON(
  jsonString: string,
): SafeParseResult<Sampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Sampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Sampling' from JSON`,
  );
}

/** @internal */
export const Transforms$inboundSchema: z.ZodType<
  Transforms,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type Transforms$Outbound = {
  id: string;
};

/** @internal */
export const Transforms$outboundSchema: z.ZodType<
  Transforms$Outbound,
  z.ZodTypeDef,
  Transforms
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Transforms$ {
  /** @deprecated use `Transforms$inboundSchema` instead. */
  export const inboundSchema = Transforms$inboundSchema;
  /** @deprecated use `Transforms$outboundSchema` instead. */
  export const outboundSchema = Transforms$outboundSchema;
  /** @deprecated use `Transforms$Outbound` instead. */
  export type Outbound = Transforms$Outbound;
}

export function transformsToJSON(transforms: Transforms): string {
  return JSON.stringify(Transforms$outboundSchema.parse(transforms));
}

export function transformsFromJSON(
  jsonString: string,
): SafeParseResult<Transforms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Transforms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Transforms' from JSON`,
  );
}

/** @internal */
export const Source2$inboundSchema: z.ZodType<Source2, z.ZodTypeDef, unknown> =
  z.object({
    kind: z.string().default("self-served"),
  });

/** @internal */
export type Source2$Outbound = {
  kind: string;
};

/** @internal */
export const Source2$outboundSchema: z.ZodType<
  Source2$Outbound,
  z.ZodTypeDef,
  Source2
> = z.object({
  kind: z.string().default("self-served"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source2$ {
  /** @deprecated use `Source2$inboundSchema` instead. */
  export const inboundSchema = Source2$inboundSchema;
  /** @deprecated use `Source2$outboundSchema` instead. */
  export const outboundSchema = Source2$outboundSchema;
  /** @deprecated use `Source2$Outbound` instead. */
  export type Outbound = Source2$Outbound;
}

export function source2ToJSON(source2: Source2): string {
  return JSON.stringify(Source2$outboundSchema.parse(source2));
}

export function source2FromJSON(
  jsonString: string,
): SafeParseResult<Source2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Source2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Source2' from JSON`,
  );
}

/** @internal */
export const One3$inboundSchema: z.ZodType<One3, z.ZodTypeDef, unknown> = z
  .object({
    kind: z.string().default("integration"),
  });

/** @internal */
export type One3$Outbound = {
  kind: string;
};

/** @internal */
export const One3$outboundSchema: z.ZodType<One3$Outbound, z.ZodTypeDef, One3> =
  z.object({
    kind: z.string().default("integration"),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One3$ {
  /** @deprecated use `One3$inboundSchema` instead. */
  export const inboundSchema = One3$inboundSchema;
  /** @deprecated use `One3$outboundSchema` instead. */
  export const outboundSchema = One3$outboundSchema;
  /** @deprecated use `One3$Outbound` instead. */
  export type Outbound = One3$Outbound;
}

export function one3ToJSON(one3: One3): string {
  return JSON.stringify(One3$outboundSchema.parse(one3));
}

export function one3FromJSON(
  jsonString: string,
): SafeParseResult<One3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One3' from JSON`,
  );
}

/** @internal */
export const One2$inboundSchema: z.ZodType<One2, z.ZodTypeDef, unknown> = z
  .object({
    kind: z.string().default("integration"),
    resourceId: z.string(),
  });

/** @internal */
export type One2$Outbound = {
  kind: string;
  resourceId: string;
};

/** @internal */
export const One2$outboundSchema: z.ZodType<One2$Outbound, z.ZodTypeDef, One2> =
  z.object({
    kind: z.string().default("integration"),
    resourceId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One2$ {
  /** @deprecated use `One2$inboundSchema` instead. */
  export const inboundSchema = One2$inboundSchema;
  /** @deprecated use `One2$outboundSchema` instead. */
  export const outboundSchema = One2$outboundSchema;
  /** @deprecated use `One2$Outbound` instead. */
  export type Outbound = One2$Outbound;
}

export function one2ToJSON(one2: One2): string {
  return JSON.stringify(One2$outboundSchema.parse(one2));
}

export function one2FromJSON(
  jsonString: string,
): SafeParseResult<One2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One2' from JSON`,
  );
}

/** @internal */
export const One1$inboundSchema: z.ZodType<One1, z.ZodTypeDef, unknown> = z
  .object({
    kind: z.string().default("integration"),
    externalResourceId: z.string(),
  });

/** @internal */
export type One1$Outbound = {
  kind: string;
  externalResourceId: string;
};

/** @internal */
export const One1$outboundSchema: z.ZodType<One1$Outbound, z.ZodTypeDef, One1> =
  z.object({
    kind: z.string().default("integration"),
    externalResourceId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace One1$ {
  /** @deprecated use `One1$inboundSchema` instead. */
  export const inboundSchema = One1$inboundSchema;
  /** @deprecated use `One1$outboundSchema` instead. */
  export const outboundSchema = One1$outboundSchema;
  /** @deprecated use `One1$Outbound` instead. */
  export type Outbound = One1$Outbound;
}

export function one1ToJSON(one1: One1): string {
  return JSON.stringify(One1$outboundSchema.parse(one1));
}

export function one1FromJSON(
  jsonString: string,
): SafeParseResult<One1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => One1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'One1' from JSON`,
  );
}

/** @internal */
export const Source1$inboundSchema: z.ZodType<Source1, z.ZodTypeDef, unknown> =
  z.union([
    z.lazy(() => One1$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One3$inboundSchema),
  ]);

/** @internal */
export type Source1$Outbound = One1$Outbound | One2$Outbound | One3$Outbound;

/** @internal */
export const Source1$outboundSchema: z.ZodType<
  Source1$Outbound,
  z.ZodTypeDef,
  Source1
> = z.union([
  z.lazy(() => One1$outboundSchema),
  z.lazy(() => One2$outboundSchema),
  z.lazy(() => One3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source1$ {
  /** @deprecated use `Source1$inboundSchema` instead. */
  export const inboundSchema = Source1$inboundSchema;
  /** @deprecated use `Source1$outboundSchema` instead. */
  export const outboundSchema = Source1$outboundSchema;
  /** @deprecated use `Source1$Outbound` instead. */
  export type Outbound = Source1$Outbound;
}

export function source1ToJSON(source1: Source1): string {
  return JSON.stringify(Source1$outboundSchema.parse(source1));
}

export function source1FromJSON(
  jsonString: string,
): SafeParseResult<Source1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Source1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Source1' from JSON`,
  );
}

/** @internal */
export const CreateDrainSource$inboundSchema: z.ZodType<
  CreateDrainSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.lazy(() => One1$inboundSchema),
    z.lazy(() => One2$inboundSchema),
    z.lazy(() => One3$inboundSchema),
  ]),
  z.lazy(() => Source2$inboundSchema),
]);

/** @internal */
export type CreateDrainSource$Outbound =
  | One1$Outbound
  | One2$Outbound
  | One3$Outbound
  | Source2$Outbound;

/** @internal */
export const CreateDrainSource$outboundSchema: z.ZodType<
  CreateDrainSource$Outbound,
  z.ZodTypeDef,
  CreateDrainSource
> = z.union([
  z.union([
    z.lazy(() => One1$outboundSchema),
    z.lazy(() => One2$outboundSchema),
    z.lazy(() => One3$outboundSchema),
  ]),
  z.lazy(() => Source2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSource$ {
  /** @deprecated use `CreateDrainSource$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSource$inboundSchema;
  /** @deprecated use `CreateDrainSource$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSource$outboundSchema;
  /** @deprecated use `CreateDrainSource$Outbound` instead. */
  export type Outbound = CreateDrainSource$Outbound;
}

export function createDrainSourceToJSON(
  createDrainSource: CreateDrainSource,
): string {
  return JSON.stringify(
    CreateDrainSource$outboundSchema.parse(createDrainSource),
  );
}

export function createDrainSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainSource' from JSON`,
  );
}

/** @internal */
export const CreateDrainRequestBody$inboundSchema: z.ZodType<
  CreateDrainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  projects: CreateDrainProjects$inboundSchema,
  projectIds: z.array(z.string()).optional(),
  filter: z.union([z.lazy(() => Filter2$inboundSchema), z.string()]).optional(),
  schemas: z.record(z.lazy(() => Schemas$inboundSchema)),
  delivery: z.union([
    z.lazy(() => Delivery1$inboundSchema),
    z.lazy(() => Delivery2$inboundSchema),
    z.lazy(() => Delivery3$inboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => Sampling$inboundSchema)).optional(),
  transforms: z.array(z.lazy(() => Transforms$inboundSchema)).optional(),
  source: z.union([
    z.union([
      z.lazy(() => One1$inboundSchema),
      z.lazy(() => One2$inboundSchema),
      z.lazy(() => One3$inboundSchema),
    ]),
    z.lazy(() => Source2$inboundSchema),
  ]).optional(),
});

/** @internal */
export type CreateDrainRequestBody$Outbound = {
  name: string;
  projects: string;
  projectIds?: Array<string> | undefined;
  filter?: Filter2$Outbound | string | undefined;
  schemas: { [k: string]: Schemas$Outbound };
  delivery?:
    | Delivery1$Outbound
    | Delivery2$Outbound
    | Delivery3$Outbound
    | undefined;
  sampling?: Array<Sampling$Outbound> | undefined;
  transforms?: Array<Transforms$Outbound> | undefined;
  source?:
    | One1$Outbound
    | One2$Outbound
    | One3$Outbound
    | Source2$Outbound
    | undefined;
};

/** @internal */
export const CreateDrainRequestBody$outboundSchema: z.ZodType<
  CreateDrainRequestBody$Outbound,
  z.ZodTypeDef,
  CreateDrainRequestBody
> = z.object({
  name: z.string(),
  projects: CreateDrainProjects$outboundSchema,
  projectIds: z.array(z.string()).optional(),
  filter: z.union([z.lazy(() => Filter2$outboundSchema), z.string()])
    .optional(),
  schemas: z.record(z.lazy(() => Schemas$outboundSchema)),
  delivery: z.union([
    z.lazy(() => Delivery1$outboundSchema),
    z.lazy(() => Delivery2$outboundSchema),
    z.lazy(() => Delivery3$outboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => Sampling$outboundSchema)).optional(),
  transforms: z.array(z.lazy(() => Transforms$outboundSchema)).optional(),
  source: z.union([
    z.union([
      z.lazy(() => One1$outboundSchema),
      z.lazy(() => One2$outboundSchema),
      z.lazy(() => One3$outboundSchema),
    ]),
    z.lazy(() => Source2$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainRequestBody$ {
  /** @deprecated use `CreateDrainRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateDrainRequestBody$inboundSchema;
  /** @deprecated use `CreateDrainRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateDrainRequestBody$outboundSchema;
  /** @deprecated use `CreateDrainRequestBody$Outbound` instead. */
  export type Outbound = CreateDrainRequestBody$Outbound;
}

export function createDrainRequestBodyToJSON(
  createDrainRequestBody: CreateDrainRequestBody,
): string {
  return JSON.stringify(
    CreateDrainRequestBody$outboundSchema.parse(createDrainRequestBody),
  );
}

export function createDrainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateDrainRequest$inboundSchema: z.ZodType<
  CreateDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateDrainRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateDrainRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: CreateDrainRequestBody$Outbound | undefined;
};

/** @internal */
export const CreateDrainRequest$outboundSchema: z.ZodType<
  CreateDrainRequest$Outbound,
  z.ZodTypeDef,
  CreateDrainRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateDrainRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainRequest$ {
  /** @deprecated use `CreateDrainRequest$inboundSchema` instead. */
  export const inboundSchema = CreateDrainRequest$inboundSchema;
  /** @deprecated use `CreateDrainRequest$outboundSchema` instead. */
  export const outboundSchema = CreateDrainRequest$outboundSchema;
  /** @deprecated use `CreateDrainRequest$Outbound` instead. */
  export type Outbound = CreateDrainRequest$Outbound;
}

export function createDrainRequestToJSON(
  createDrainRequest: CreateDrainRequest,
): string {
  return JSON.stringify(
    CreateDrainRequest$outboundSchema.parse(createDrainRequest),
  );
}

export function createDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainRequest' from JSON`,
  );
}

/** @internal */
export const ResponseBodyCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyCreatedFrom
> = z.nativeEnum(ResponseBodyCreatedFrom);

/** @internal */
export const ResponseBodyCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyCreatedFrom
> = ResponseBodyCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyCreatedFrom$ {
  /** @deprecated use `ResponseBodyCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyCreatedFrom$inboundSchema;
  /** @deprecated use `ResponseBodyCreatedFrom$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyCreatedFrom$outboundSchema;
}

/** @internal */
export const CreateDrainResponseBodyLog$inboundSchema: z.ZodType<
  CreateDrainResponseBodyLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateDrainResponseBodyLog$Outbound = {};

/** @internal */
export const CreateDrainResponseBodyLog$outboundSchema: z.ZodType<
  CreateDrainResponseBodyLog$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodyLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyLog$ {
  /** @deprecated use `CreateDrainResponseBodyLog$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyLog$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyLog$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyLog$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodyLog$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodyLog$Outbound;
}

export function createDrainResponseBodyLogToJSON(
  createDrainResponseBodyLog: CreateDrainResponseBodyLog,
): string {
  return JSON.stringify(
    CreateDrainResponseBodyLog$outboundSchema.parse(createDrainResponseBodyLog),
  );
}

export function createDrainResponseBodyLogFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodyLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBodyLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodyLog' from JSON`,
  );
}

/** @internal */
export const ResponseBodyTrace$inboundSchema: z.ZodType<
  ResponseBodyTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResponseBodyTrace$Outbound = {};

/** @internal */
export const ResponseBodyTrace$outboundSchema: z.ZodType<
  ResponseBodyTrace$Outbound,
  z.ZodTypeDef,
  ResponseBodyTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyTrace$ {
  /** @deprecated use `ResponseBodyTrace$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyTrace$inboundSchema;
  /** @deprecated use `ResponseBodyTrace$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyTrace$outboundSchema;
  /** @deprecated use `ResponseBodyTrace$Outbound` instead. */
  export type Outbound = ResponseBodyTrace$Outbound;
}

export function responseBodyTraceToJSON(
  responseBodyTrace: ResponseBodyTrace,
): string {
  return JSON.stringify(
    ResponseBodyTrace$outboundSchema.parse(responseBodyTrace),
  );
}

export function responseBodyTraceFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyTrace' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyAnalytics$inboundSchema: z.ZodType<
  CreateDrainResponseBodyAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateDrainResponseBodyAnalytics$Outbound = {};

/** @internal */
export const CreateDrainResponseBodyAnalytics$outboundSchema: z.ZodType<
  CreateDrainResponseBodyAnalytics$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodyAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyAnalytics$ {
  /** @deprecated use `CreateDrainResponseBodyAnalytics$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyAnalytics$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyAnalytics$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyAnalytics$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodyAnalytics$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodyAnalytics$Outbound;
}

export function createDrainResponseBodyAnalyticsToJSON(
  createDrainResponseBodyAnalytics: CreateDrainResponseBodyAnalytics,
): string {
  return JSON.stringify(
    CreateDrainResponseBodyAnalytics$outboundSchema.parse(
      createDrainResponseBodyAnalytics,
    ),
  );
}

export function createDrainResponseBodyAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodyAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBodyAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodyAnalytics' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyDrainsSpeedInsights$inboundSchema:
  z.ZodType<CreateDrainResponseBodyDrainsSpeedInsights, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type CreateDrainResponseBodyDrainsSpeedInsights$Outbound = {};

/** @internal */
export const CreateDrainResponseBodyDrainsSpeedInsights$outboundSchema:
  z.ZodType<
    CreateDrainResponseBodyDrainsSpeedInsights$Outbound,
    z.ZodTypeDef,
    CreateDrainResponseBodyDrainsSpeedInsights
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyDrainsSpeedInsights$ {
  /** @deprecated use `CreateDrainResponseBodyDrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainResponseBodyDrainsSpeedInsights$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodyDrainsSpeedInsights$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDrainsSpeedInsights$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodyDrainsSpeedInsights$Outbound;
}

export function createDrainResponseBodyDrainsSpeedInsightsToJSON(
  createDrainResponseBodyDrainsSpeedInsights:
    CreateDrainResponseBodyDrainsSpeedInsights,
): string {
  return JSON.stringify(
    CreateDrainResponseBodyDrainsSpeedInsights$outboundSchema.parse(
      createDrainResponseBodyDrainsSpeedInsights,
    ),
  );
}

export function createDrainResponseBodyDrainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateDrainResponseBodyDrainsSpeedInsights,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDrainResponseBodyDrainsSpeedInsights$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateDrainResponseBodyDrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodySchemas$inboundSchema: z.ZodType<
  CreateDrainResponseBodySchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => CreateDrainResponseBodyLog$inboundSchema).optional(),
  trace: z.lazy(() => ResponseBodyTrace$inboundSchema).optional(),
  analytics: z.lazy(() => CreateDrainResponseBodyAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() =>
    CreateDrainResponseBodyDrainsSpeedInsights$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type CreateDrainResponseBodySchemas$Outbound = {
  log?: CreateDrainResponseBodyLog$Outbound | undefined;
  trace?: ResponseBodyTrace$Outbound | undefined;
  analytics?: CreateDrainResponseBodyAnalytics$Outbound | undefined;
  speed_insights?:
    | CreateDrainResponseBodyDrainsSpeedInsights$Outbound
    | undefined;
};

/** @internal */
export const CreateDrainResponseBodySchemas$outboundSchema: z.ZodType<
  CreateDrainResponseBodySchemas$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodySchemas
> = z.object({
  log: z.lazy(() => CreateDrainResponseBodyLog$outboundSchema).optional(),
  trace: z.lazy(() => ResponseBodyTrace$outboundSchema).optional(),
  analytics: z.lazy(() => CreateDrainResponseBodyAnalytics$outboundSchema)
    .optional(),
  speedInsights: z.lazy(() =>
    CreateDrainResponseBodyDrainsSpeedInsights$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodySchemas$ {
  /** @deprecated use `CreateDrainResponseBodySchemas$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodySchemas$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodySchemas$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodySchemas$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodySchemas$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodySchemas$Outbound;
}

export function createDrainResponseBodySchemasToJSON(
  createDrainResponseBodySchemas: CreateDrainResponseBodySchemas,
): string {
  return JSON.stringify(
    CreateDrainResponseBodySchemas$outboundSchema.parse(
      createDrainResponseBodySchemas,
    ),
  );
}

export function createDrainResponseBodySchemasFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodySchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBodySchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodySchemas' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  > = z.nativeEnum(
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type,
  );

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  > =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryTarget$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryTarget
> = z.nativeEnum(CreateDrainDeliveryTarget);

/** @internal */
export const CreateDrainDeliveryTarget$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryTarget
> = CreateDrainDeliveryTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryTarget$ {
  /** @deprecated use `CreateDrainDeliveryTarget$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryTarget$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryTarget$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryTarget$outboundSchema;
}

/** @internal */
export const CreateDrainDelivery5$inboundSchema: z.ZodType<
  CreateDrainDelivery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema,
  target: CreateDrainDeliveryTarget$inboundSchema,
});

/** @internal */
export type CreateDrainDelivery5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const CreateDrainDelivery5$outboundSchema: z.ZodType<
  CreateDrainDelivery5$Outbound,
  z.ZodTypeDef,
  CreateDrainDelivery5
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema,
  target: CreateDrainDeliveryTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDelivery5$ {
  /** @deprecated use `CreateDrainDelivery5$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDelivery5$inboundSchema;
  /** @deprecated use `CreateDrainDelivery5$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDelivery5$outboundSchema;
  /** @deprecated use `CreateDrainDelivery5$Outbound` instead. */
  export type Outbound = CreateDrainDelivery5$Outbound;
}

export function createDrainDelivery5ToJSON(
  createDrainDelivery5: CreateDrainDelivery5,
): string {
  return JSON.stringify(
    CreateDrainDelivery5$outboundSchema.parse(createDrainDelivery5),
  );
}

export function createDrainDelivery5FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDelivery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDelivery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDelivery5' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  > = z.nativeEnum(
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type,
  );

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  > =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema;
}

/** @internal */
export const CreateDrainDelivery4$inboundSchema: z.ZodType<
  CreateDrainDelivery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type CreateDrainDelivery4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const CreateDrainDelivery4$outboundSchema: z.ZodType<
  CreateDrainDelivery4$Outbound,
  z.ZodTypeDef,
  CreateDrainDelivery4
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDelivery4$ {
  /** @deprecated use `CreateDrainDelivery4$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDelivery4$inboundSchema;
  /** @deprecated use `CreateDrainDelivery4$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDelivery4$outboundSchema;
  /** @deprecated use `CreateDrainDelivery4$Outbound` instead. */
  export type Outbound = CreateDrainDelivery4$Outbound;
}

export function createDrainDelivery4ToJSON(
  createDrainDelivery4: CreateDrainDelivery4,
): string {
  return JSON.stringify(
    CreateDrainDelivery4$outboundSchema.parse(createDrainDelivery4),
  );
}

export function createDrainDelivery4FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDelivery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDelivery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDelivery4' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  > =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrains3$inboundSchema: z.ZodType<
  CreateDrainDeliveryDrains3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type CreateDrainDeliveryDrains3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const CreateDrainDeliveryDrains3$outboundSchema: z.ZodType<
  CreateDrainDeliveryDrains3$Outbound,
  z.ZodTypeDef,
  CreateDrainDeliveryDrains3
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrains3$ {
  /** @deprecated use `CreateDrainDeliveryDrains3$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryDrains3$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrains3$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryDrains3$outboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrains3$Outbound` instead. */
  export type Outbound = CreateDrainDeliveryDrains3$Outbound;
}

export function createDrainDeliveryDrains3ToJSON(
  createDrainDeliveryDrains3: CreateDrainDeliveryDrains3,
): string {
  return JSON.stringify(
    CreateDrainDeliveryDrains3$outboundSchema.parse(createDrainDeliveryDrains3),
  );
}

export function createDrainDeliveryDrains3FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDeliveryDrains3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDeliveryDrains3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDeliveryDrains3' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryEndpoint$inboundSchema: z.ZodType<
  CreateDrainDeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type CreateDrainDeliveryEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const CreateDrainDeliveryEndpoint$outboundSchema: z.ZodType<
  CreateDrainDeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  CreateDrainDeliveryEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryEndpoint$ {
  /** @deprecated use `CreateDrainDeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryEndpoint$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryEndpoint$outboundSchema;
  /** @deprecated use `CreateDrainDeliveryEndpoint$Outbound` instead. */
  export type Outbound = CreateDrainDeliveryEndpoint$Outbound;
}

export function createDrainDeliveryEndpointToJSON(
  createDrainDeliveryEndpoint: CreateDrainDeliveryEndpoint,
): string {
  return JSON.stringify(
    CreateDrainDeliveryEndpoint$outboundSchema.parse(
      createDrainDeliveryEndpoint,
    ),
  );
}

export function createDrainDeliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding
  > = z.nativeEnum(CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding);

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding
  > = CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrains2$inboundSchema: z.ZodType<
  CreateDrainDeliveryDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  endpoint: z.lazy(() => CreateDrainDeliveryEndpoint$inboundSchema),
  encoding:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type CreateDrainDeliveryDrains2$Outbound = {
  type: string;
  endpoint: CreateDrainDeliveryEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const CreateDrainDeliveryDrains2$outboundSchema: z.ZodType<
  CreateDrainDeliveryDrains2$Outbound,
  z.ZodTypeDef,
  CreateDrainDeliveryDrains2
> = z.object({
  type:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  endpoint: z.lazy(() => CreateDrainDeliveryEndpoint$outboundSchema),
  encoding:
    CreateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrains2$ {
  /** @deprecated use `CreateDrainDeliveryDrains2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryDrains2$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrains2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryDrains2$outboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrains2$Outbound` instead. */
  export type Outbound = CreateDrainDeliveryDrains2$Outbound;
}

export function createDrainDeliveryDrains2ToJSON(
  createDrainDeliveryDrains2: CreateDrainDeliveryDrains2,
): string {
  return JSON.stringify(
    CreateDrainDeliveryDrains2$outboundSchema.parse(createDrainDeliveryDrains2),
  );
}

export function createDrainDeliveryDrains2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDeliveryDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDeliveryDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDeliveryDrains2' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONType
  > = z.nativeEnum(CreateDrainDeliveryDrainsResponse200ApplicationJSONType);

/** @internal */
export const CreateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof CreateDrainDeliveryDrainsResponse200ApplicationJSONType
  > = CreateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200ApplicationJSONType$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200Encoding$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponse200Encoding> = z
    .nativeEnum(CreateDrainDeliveryDrainsResponse200Encoding);

/** @internal */
export const CreateDrainDeliveryDrainsResponse200Encoding$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponse200Encoding> =
    CreateDrainDeliveryDrainsResponse200Encoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200Encoding$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200Encoding$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200Encoding$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200Encoding$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200Encoding$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryCompression
> = z.nativeEnum(CreateDrainDeliveryCompression);

/** @internal */
export const CreateDrainDeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryCompression
> = CreateDrainDeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryCompression$ {
  /** @deprecated use `CreateDrainDeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryCompression$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryCompression$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryCompression$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrains1$inboundSchema: z.ZodType<
  CreateDrainDeliveryDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema,
  endpoint: z.string(),
  encoding: CreateDrainDeliveryDrainsResponse200Encoding$inboundSchema,
  compression: CreateDrainDeliveryCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type CreateDrainDeliveryDrains1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const CreateDrainDeliveryDrains1$outboundSchema: z.ZodType<
  CreateDrainDeliveryDrains1$Outbound,
  z.ZodTypeDef,
  CreateDrainDeliveryDrains1
> = z.object({
  type: CreateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema,
  endpoint: z.string(),
  encoding: CreateDrainDeliveryDrainsResponse200Encoding$outboundSchema,
  compression: CreateDrainDeliveryCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrains1$ {
  /** @deprecated use `CreateDrainDeliveryDrains1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryDrains1$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrains1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryDrains1$outboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrains1$Outbound` instead. */
  export type Outbound = CreateDrainDeliveryDrains1$Outbound;
}

export function createDrainDeliveryDrains1ToJSON(
  createDrainDeliveryDrains1: CreateDrainDeliveryDrains1,
): string {
  return JSON.stringify(
    CreateDrainDeliveryDrains1$outboundSchema.parse(createDrainDeliveryDrains1),
  );
}

export function createDrainDeliveryDrains1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDeliveryDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDeliveryDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDeliveryDrains1' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyDelivery$inboundSchema: z.ZodType<
  CreateDrainResponseBodyDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainDeliveryDrains1$inboundSchema),
  z.lazy(() => CreateDrainDeliveryDrains2$inboundSchema),
  z.lazy(() => CreateDrainDeliveryDrains3$inboundSchema),
  z.lazy(() => CreateDrainDelivery4$inboundSchema),
  z.lazy(() => CreateDrainDelivery5$inboundSchema),
]);

/** @internal */
export type CreateDrainResponseBodyDelivery$Outbound =
  | CreateDrainDeliveryDrains1$Outbound
  | CreateDrainDeliveryDrains2$Outbound
  | CreateDrainDeliveryDrains3$Outbound
  | CreateDrainDelivery4$Outbound
  | CreateDrainDelivery5$Outbound;

/** @internal */
export const CreateDrainResponseBodyDelivery$outboundSchema: z.ZodType<
  CreateDrainResponseBodyDelivery$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodyDelivery
> = z.union([
  z.lazy(() => CreateDrainDeliveryDrains1$outboundSchema),
  z.lazy(() => CreateDrainDeliveryDrains2$outboundSchema),
  z.lazy(() => CreateDrainDeliveryDrains3$outboundSchema),
  z.lazy(() => CreateDrainDelivery4$outboundSchema),
  z.lazy(() => CreateDrainDelivery5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyDelivery$ {
  /** @deprecated use `CreateDrainResponseBodyDelivery$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyDelivery$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDelivery$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyDelivery$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDelivery$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodyDelivery$Outbound;
}

export function createDrainResponseBodyDeliveryToJSON(
  createDrainResponseBodyDelivery: CreateDrainResponseBodyDelivery,
): string {
  return JSON.stringify(
    CreateDrainResponseBodyDelivery$outboundSchema.parse(
      createDrainResponseBodyDelivery,
    ),
  );
}

export function createDrainResponseBodyDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodyDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBodyDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodyDelivery' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyDrainsType
> = z.nativeEnum(CreateDrainResponseBodyDrainsType);

/** @internal */
export const CreateDrainResponseBodyDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyDrainsType
> = CreateDrainResponseBodyDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyDrainsType$ {
  /** @deprecated use `CreateDrainResponseBodyDrainsType$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyDrainsType$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDrainsType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodyDrainsType$outboundSchema;
}

/** @internal */
export const CreateDrainResponseBodyEnv$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyEnv
> = z.nativeEnum(CreateDrainResponseBodyEnv);

/** @internal */
export const CreateDrainResponseBodyEnv$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyEnv
> = CreateDrainResponseBodyEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyEnv$ {
  /** @deprecated use `CreateDrainResponseBodyEnv$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyEnv$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyEnv$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyEnv$outboundSchema;
}

/** @internal */
export const CreateDrainResponseBodySampling$inboundSchema: z.ZodType<
  CreateDrainResponseBodySampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainResponseBodyDrainsType$inboundSchema,
  rate: z.number(),
  env: CreateDrainResponseBodyEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type CreateDrainResponseBodySampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const CreateDrainResponseBodySampling$outboundSchema: z.ZodType<
  CreateDrainResponseBodySampling$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodySampling
> = z.object({
  type: CreateDrainResponseBodyDrainsType$outboundSchema,
  rate: z.number(),
  env: CreateDrainResponseBodyEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodySampling$ {
  /** @deprecated use `CreateDrainResponseBodySampling$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodySampling$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodySampling$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodySampling$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodySampling$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodySampling$Outbound;
}

export function createDrainResponseBodySamplingToJSON(
  createDrainResponseBodySampling: CreateDrainResponseBodySampling,
): string {
  return JSON.stringify(
    CreateDrainResponseBodySampling$outboundSchema.parse(
      createDrainResponseBodySampling,
    ),
  );
}

export function createDrainResponseBodySamplingFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodySampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBodySampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodySampling' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyDrainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyDrainsStatus
> = z.nativeEnum(CreateDrainResponseBodyDrainsStatus);

/** @internal */
export const CreateDrainResponseBodyDrainsStatus$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainResponseBodyDrainsStatus> =
    CreateDrainResponseBodyDrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyDrainsStatus$ {
  /** @deprecated use `CreateDrainResponseBodyDrainsStatus$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainResponseBodyDrainsStatus$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDrainsStatus$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodyDrainsStatus$outboundSchema;
}

/** @internal */
export const ResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyDisabledReason
> = z.nativeEnum(ResponseBodyDisabledReason);

/** @internal */
export const ResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyDisabledReason
> = ResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDisabledReason$ {
  /** @deprecated use `ResponseBodyDisabledReason$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDisabledReason$inboundSchema;
  /** @deprecated use `ResponseBodyDisabledReason$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const CreateDrainSourceDrainsKind$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainSourceDrainsKind
> = z.nativeEnum(CreateDrainSourceDrainsKind);

/** @internal */
export const CreateDrainSourceDrainsKind$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainSourceDrainsKind
> = CreateDrainSourceDrainsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSourceDrainsKind$ {
  /** @deprecated use `CreateDrainSourceDrainsKind$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSourceDrainsKind$inboundSchema;
  /** @deprecated use `CreateDrainSourceDrainsKind$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSourceDrainsKind$outboundSchema;
}

/** @internal */
export const CreateDrainSourceDrains2$inboundSchema: z.ZodType<
  CreateDrainSourceDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: CreateDrainSourceDrainsKind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type CreateDrainSourceDrains2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const CreateDrainSourceDrains2$outboundSchema: z.ZodType<
  CreateDrainSourceDrains2$Outbound,
  z.ZodTypeDef,
  CreateDrainSourceDrains2
> = z.object({
  kind: CreateDrainSourceDrainsKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSourceDrains2$ {
  /** @deprecated use `CreateDrainSourceDrains2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSourceDrains2$inboundSchema;
  /** @deprecated use `CreateDrainSourceDrains2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSourceDrains2$outboundSchema;
  /** @deprecated use `CreateDrainSourceDrains2$Outbound` instead. */
  export type Outbound = CreateDrainSourceDrains2$Outbound;
}

export function createDrainSourceDrains2ToJSON(
  createDrainSourceDrains2: CreateDrainSourceDrains2,
): string {
  return JSON.stringify(
    CreateDrainSourceDrains2$outboundSchema.parse(createDrainSourceDrains2),
  );
}

export function createDrainSourceDrains2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainSourceDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainSourceDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainSourceDrains2' from JSON`,
  );
}

/** @internal */
export const CreateDrainSourceKind$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainSourceKind
> = z.nativeEnum(CreateDrainSourceKind);

/** @internal */
export const CreateDrainSourceKind$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainSourceKind
> = CreateDrainSourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSourceKind$ {
  /** @deprecated use `CreateDrainSourceKind$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSourceKind$inboundSchema;
  /** @deprecated use `CreateDrainSourceKind$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSourceKind$outboundSchema;
}

/** @internal */
export const CreateDrainSourceDrains1$inboundSchema: z.ZodType<
  CreateDrainSourceDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: CreateDrainSourceKind$inboundSchema,
});

/** @internal */
export type CreateDrainSourceDrains1$Outbound = {
  kind: string;
};

/** @internal */
export const CreateDrainSourceDrains1$outboundSchema: z.ZodType<
  CreateDrainSourceDrains1$Outbound,
  z.ZodTypeDef,
  CreateDrainSourceDrains1
> = z.object({
  kind: CreateDrainSourceKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSourceDrains1$ {
  /** @deprecated use `CreateDrainSourceDrains1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSourceDrains1$inboundSchema;
  /** @deprecated use `CreateDrainSourceDrains1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSourceDrains1$outboundSchema;
  /** @deprecated use `CreateDrainSourceDrains1$Outbound` instead. */
  export type Outbound = CreateDrainSourceDrains1$Outbound;
}

export function createDrainSourceDrains1ToJSON(
  createDrainSourceDrains1: CreateDrainSourceDrains1,
): string {
  return JSON.stringify(
    CreateDrainSourceDrains1$outboundSchema.parse(createDrainSourceDrains1),
  );
}

export function createDrainSourceDrains1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainSourceDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainSourceDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainSourceDrains1' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyDrainsSource$inboundSchema: z.ZodType<
  CreateDrainResponseBodyDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainSourceDrains2$inboundSchema),
  z.lazy(() => CreateDrainSourceDrains1$inboundSchema),
]);

/** @internal */
export type CreateDrainResponseBodyDrainsSource$Outbound =
  | CreateDrainSourceDrains2$Outbound
  | CreateDrainSourceDrains1$Outbound;

/** @internal */
export const CreateDrainResponseBodyDrainsSource$outboundSchema: z.ZodType<
  CreateDrainResponseBodyDrainsSource$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodyDrainsSource
> = z.union([
  z.lazy(() => CreateDrainSourceDrains2$outboundSchema),
  z.lazy(() => CreateDrainSourceDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyDrainsSource$ {
  /** @deprecated use `CreateDrainResponseBodyDrainsSource$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainResponseBodyDrainsSource$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDrainsSource$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodyDrainsSource$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodyDrainsSource$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodyDrainsSource$Outbound;
}

export function createDrainResponseBodyDrainsSourceToJSON(
  createDrainResponseBodyDrainsSource: CreateDrainResponseBodyDrainsSource,
): string {
  return JSON.stringify(
    CreateDrainResponseBodyDrainsSource$outboundSchema.parse(
      createDrainResponseBodyDrainsSource,
    ),
  );
}

export function createDrainResponseBodyDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodyDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDrainResponseBodyDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodyDrainsSource' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterV2DrainsVersion$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterV2DrainsVersion
> = z.nativeEnum(CreateDrainFilterV2DrainsVersion);

/** @internal */
export const CreateDrainFilterV2DrainsVersion$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterV2DrainsVersion
> = CreateDrainFilterV2DrainsVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterV2DrainsVersion$ {
  /** @deprecated use `CreateDrainFilterV2DrainsVersion$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterV2DrainsVersion$inboundSchema;
  /** @deprecated use `CreateDrainFilterV2DrainsVersion$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterV2DrainsVersion$outboundSchema;
}

/** @internal */
export const CreateDrainFilterDrainsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterDrainsResponseType
> = z.nativeEnum(CreateDrainFilterDrainsResponseType);

/** @internal */
export const CreateDrainFilterDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainFilterDrainsResponseType> =
    CreateDrainFilterDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsResponseType$ {
  /** @deprecated use `CreateDrainFilterDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainFilterDrainsResponseType$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainFilterDrainsResponseType$outboundSchema;
}

/** @internal */
export const CreateDrainFilterDrainsResponse2$inboundSchema: z.ZodType<
  CreateDrainFilterDrainsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainFilterDrainsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreateDrainFilterDrainsResponse2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateDrainFilterDrainsResponse2$outboundSchema: z.ZodType<
  CreateDrainFilterDrainsResponse2$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrainsResponse2
> = z.object({
  type: CreateDrainFilterDrainsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsResponse2$ {
  /** @deprecated use `CreateDrainFilterDrainsResponse2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrainsResponse2$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponse2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDrainsResponse2$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponse2$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrainsResponse2$Outbound;
}

export function createDrainFilterDrainsResponse2ToJSON(
  createDrainFilterDrainsResponse2: CreateDrainFilterDrainsResponse2,
): string {
  return JSON.stringify(
    CreateDrainFilterDrainsResponse2$outboundSchema.parse(
      createDrainFilterDrainsResponse2,
    ),
  );
}

export function createDrainFilterDrainsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrainsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDrainsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrainsResponse2' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterDrainsType
> = z.nativeEnum(CreateDrainFilterDrainsType);

/** @internal */
export const CreateDrainFilterDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterDrainsType
> = CreateDrainFilterDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsType$ {
  /** @deprecated use `CreateDrainFilterDrainsType$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrainsType$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsType$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDrainsType$outboundSchema;
}

/** @internal */
export const CreateDrainFilterDrainsResponseProject$inboundSchema: z.ZodType<
  CreateDrainFilterDrainsResponseProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterDrainsResponseProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterDrainsResponseProject$outboundSchema: z.ZodType<
  CreateDrainFilterDrainsResponseProject$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrainsResponseProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsResponseProject$ {
  /** @deprecated use `CreateDrainFilterDrainsResponseProject$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainFilterDrainsResponseProject$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponseProject$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainFilterDrainsResponseProject$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponseProject$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrainsResponseProject$Outbound;
}

export function createDrainFilterDrainsResponseProjectToJSON(
  createDrainFilterDrainsResponseProject:
    CreateDrainFilterDrainsResponseProject,
): string {
  return JSON.stringify(
    CreateDrainFilterDrainsResponseProject$outboundSchema.parse(
      createDrainFilterDrainsResponseProject,
    ),
  );
}

export function createDrainFilterDrainsResponseProjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrainsResponseProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDrainFilterDrainsResponseProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrainsResponseProject' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterLog$inboundSchema: z.ZodType<
  CreateDrainFilterLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterLog$outboundSchema: z.ZodType<
  CreateDrainFilterLog$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterLog$ {
  /** @deprecated use `CreateDrainFilterLog$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterLog$inboundSchema;
  /** @deprecated use `CreateDrainFilterLog$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterLog$outboundSchema;
  /** @deprecated use `CreateDrainFilterLog$Outbound` instead. */
  export type Outbound = CreateDrainFilterLog$Outbound;
}

export function createDrainFilterLogToJSON(
  createDrainFilterLog: CreateDrainFilterLog,
): string {
  return JSON.stringify(
    CreateDrainFilterLog$outboundSchema.parse(createDrainFilterLog),
  );
}

export function createDrainFilterLogFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterLog' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterDrainsResponseDeployment$inboundSchema: z.ZodType<
  CreateDrainFilterDrainsResponseDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterDrainsResponseDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterDrainsResponseDeployment$outboundSchema:
  z.ZodType<
    CreateDrainFilterDrainsResponseDeployment$Outbound,
    z.ZodTypeDef,
    CreateDrainFilterDrainsResponseDeployment
  > = z.object({
    environments: z.array(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsResponseDeployment$ {
  /** @deprecated use `CreateDrainFilterDrainsResponseDeployment$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainFilterDrainsResponseDeployment$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponseDeployment$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainFilterDrainsResponseDeployment$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsResponseDeployment$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrainsResponseDeployment$Outbound;
}

export function createDrainFilterDrainsResponseDeploymentToJSON(
  createDrainFilterDrainsResponseDeployment:
    CreateDrainFilterDrainsResponseDeployment,
): string {
  return JSON.stringify(
    CreateDrainFilterDrainsResponseDeployment$outboundSchema.parse(
      createDrainFilterDrainsResponseDeployment,
    ),
  );
}

export function createDrainFilterDrainsResponseDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateDrainFilterDrainsResponseDeployment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDrainFilterDrainsResponseDeployment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateDrainFilterDrainsResponseDeployment' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterDrains1$inboundSchema: z.ZodType<
  CreateDrainFilterDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainFilterDrainsType$inboundSchema,
  project: z.lazy(() => CreateDrainFilterDrainsResponseProject$inboundSchema)
    .optional(),
  log: z.lazy(() => CreateDrainFilterLog$inboundSchema).optional(),
  deployment: z.lazy(() =>
    CreateDrainFilterDrainsResponseDeployment$inboundSchema
  ).optional(),
});

/** @internal */
export type CreateDrainFilterDrains1$Outbound = {
  type: string;
  project?: CreateDrainFilterDrainsResponseProject$Outbound | undefined;
  log?: CreateDrainFilterLog$Outbound | undefined;
  deployment?: CreateDrainFilterDrainsResponseDeployment$Outbound | undefined;
};

/** @internal */
export const CreateDrainFilterDrains1$outboundSchema: z.ZodType<
  CreateDrainFilterDrains1$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrains1
> = z.object({
  type: CreateDrainFilterDrainsType$outboundSchema,
  project: z.lazy(() => CreateDrainFilterDrainsResponseProject$outboundSchema)
    .optional(),
  log: z.lazy(() => CreateDrainFilterLog$outboundSchema).optional(),
  deployment: z.lazy(() =>
    CreateDrainFilterDrainsResponseDeployment$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrains1$ {
  /** @deprecated use `CreateDrainFilterDrains1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrains1$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrains1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDrains1$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrains1$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrains1$Outbound;
}

export function createDrainFilterDrains1ToJSON(
  createDrainFilterDrains1: CreateDrainFilterDrains1,
): string {
  return JSON.stringify(
    CreateDrainFilterDrains1$outboundSchema.parse(createDrainFilterDrains1),
  );
}

export function createDrainFilterDrains1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrains1' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterV2Filter$inboundSchema: z.ZodType<
  CreateDrainFilterV2Filter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainFilterDrainsResponse2$inboundSchema),
  z.lazy(() => CreateDrainFilterDrains1$inboundSchema),
]);

/** @internal */
export type CreateDrainFilterV2Filter$Outbound =
  | CreateDrainFilterDrainsResponse2$Outbound
  | CreateDrainFilterDrains1$Outbound;

/** @internal */
export const CreateDrainFilterV2Filter$outboundSchema: z.ZodType<
  CreateDrainFilterV2Filter$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterV2Filter
> = z.union([
  z.lazy(() => CreateDrainFilterDrainsResponse2$outboundSchema),
  z.lazy(() => CreateDrainFilterDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterV2Filter$ {
  /** @deprecated use `CreateDrainFilterV2Filter$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterV2Filter$inboundSchema;
  /** @deprecated use `CreateDrainFilterV2Filter$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterV2Filter$outboundSchema;
  /** @deprecated use `CreateDrainFilterV2Filter$Outbound` instead. */
  export type Outbound = CreateDrainFilterV2Filter$Outbound;
}

export function createDrainFilterV2FilterToJSON(
  createDrainFilterV2Filter: CreateDrainFilterV2Filter,
): string {
  return JSON.stringify(
    CreateDrainFilterV2Filter$outboundSchema.parse(createDrainFilterV2Filter),
  );
}

export function createDrainFilterV2FilterFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterV2Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterV2Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterV2Filter' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterV22$inboundSchema: z.ZodType<
  CreateDrainFilterV22,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: CreateDrainFilterV2DrainsVersion$inboundSchema,
  filter: z.union([
    z.lazy(() => CreateDrainFilterDrainsResponse2$inboundSchema),
    z.lazy(() => CreateDrainFilterDrains1$inboundSchema),
  ]),
});

/** @internal */
export type CreateDrainFilterV22$Outbound = {
  version: string;
  filter:
    | CreateDrainFilterDrainsResponse2$Outbound
    | CreateDrainFilterDrains1$Outbound;
};

/** @internal */
export const CreateDrainFilterV22$outboundSchema: z.ZodType<
  CreateDrainFilterV22$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterV22
> = z.object({
  version: CreateDrainFilterV2DrainsVersion$outboundSchema,
  filter: z.union([
    z.lazy(() => CreateDrainFilterDrainsResponse2$outboundSchema),
    z.lazy(() => CreateDrainFilterDrains1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterV22$ {
  /** @deprecated use `CreateDrainFilterV22$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterV22$inboundSchema;
  /** @deprecated use `CreateDrainFilterV22$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterV22$outboundSchema;
  /** @deprecated use `CreateDrainFilterV22$Outbound` instead. */
  export type Outbound = CreateDrainFilterV22$Outbound;
}

export function createDrainFilterV22ToJSON(
  createDrainFilterV22: CreateDrainFilterV22,
): string {
  return JSON.stringify(
    CreateDrainFilterV22$outboundSchema.parse(createDrainFilterV22),
  );
}

export function createDrainFilterV22FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterV22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterV22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterV22' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterV2Version$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterV2Version
> = z.nativeEnum(CreateDrainFilterV2Version);

/** @internal */
export const CreateDrainFilterV2Version$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterV2Version
> = CreateDrainFilterV2Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterV2Version$ {
  /** @deprecated use `CreateDrainFilterV2Version$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterV2Version$inboundSchema;
  /** @deprecated use `CreateDrainFilterV2Version$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterV2Version$outboundSchema;
}

/** @internal */
export const CreateDrainFilterV21$inboundSchema: z.ZodType<
  CreateDrainFilterV21,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: CreateDrainFilterV2Version$inboundSchema,
});

/** @internal */
export type CreateDrainFilterV21$Outbound = {
  version: string;
};

/** @internal */
export const CreateDrainFilterV21$outboundSchema: z.ZodType<
  CreateDrainFilterV21$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterV21
> = z.object({
  version: CreateDrainFilterV2Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterV21$ {
  /** @deprecated use `CreateDrainFilterV21$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterV21$inboundSchema;
  /** @deprecated use `CreateDrainFilterV21$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterV21$outboundSchema;
  /** @deprecated use `CreateDrainFilterV21$Outbound` instead. */
  export type Outbound = CreateDrainFilterV21$Outbound;
}

export function createDrainFilterV21ToJSON(
  createDrainFilterV21: CreateDrainFilterV21,
): string {
  return JSON.stringify(
    CreateDrainFilterV21$outboundSchema.parse(createDrainFilterV21),
  );
}

export function createDrainFilterV21FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterV21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterV21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterV21' from JSON`,
  );
}

/** @internal */
export const ResponseBodyFilterV2$inboundSchema: z.ZodType<
  ResponseBodyFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainFilterV22$inboundSchema),
  z.lazy(() => CreateDrainFilterV21$inboundSchema),
]);

/** @internal */
export type ResponseBodyFilterV2$Outbound =
  | CreateDrainFilterV22$Outbound
  | CreateDrainFilterV21$Outbound;

/** @internal */
export const ResponseBodyFilterV2$outboundSchema: z.ZodType<
  ResponseBodyFilterV2$Outbound,
  z.ZodTypeDef,
  ResponseBodyFilterV2
> = z.union([
  z.lazy(() => CreateDrainFilterV22$outboundSchema),
  z.lazy(() => CreateDrainFilterV21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyFilterV2$ {
  /** @deprecated use `ResponseBodyFilterV2$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyFilterV2$inboundSchema;
  /** @deprecated use `ResponseBodyFilterV2$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyFilterV2$outboundSchema;
  /** @deprecated use `ResponseBodyFilterV2$Outbound` instead. */
  export type Outbound = ResponseBodyFilterV2$Outbound;
}

export function responseBodyFilterV2ToJSON(
  responseBodyFilterV2: ResponseBodyFilterV2,
): string {
  return JSON.stringify(
    ResponseBodyFilterV2$outboundSchema.parse(responseBodyFilterV2),
  );
}

export function responseBodyFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyFilterV2' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyFramework$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyFramework
> = z.nativeEnum(CreateDrainResponseBodyFramework);

/** @internal */
export const CreateDrainResponseBodyFramework$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyFramework
> = CreateDrainResponseBodyFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyFramework$ {
  /** @deprecated use `CreateDrainResponseBodyFramework$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyFramework$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyFramework$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyFramework$outboundSchema;
}

/** @internal */
export const CreateDrainResponseBodyProjectsMetadata$inboundSchema: z.ZodType<
  CreateDrainResponseBodyProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(CreateDrainResponseBodyFramework$inboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type CreateDrainResponseBodyProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const CreateDrainResponseBodyProjectsMetadata$outboundSchema: z.ZodType<
  CreateDrainResponseBodyProjectsMetadata$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodyProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(CreateDrainResponseBodyFramework$outboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyProjectsMetadata$ {
  /** @deprecated use `CreateDrainResponseBodyProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainResponseBodyProjectsMetadata$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodyProjectsMetadata$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodyProjectsMetadata$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodyProjectsMetadata$Outbound;
}

export function createDrainResponseBodyProjectsMetadataToJSON(
  createDrainResponseBodyProjectsMetadata:
    CreateDrainResponseBodyProjectsMetadata,
): string {
  return JSON.stringify(
    CreateDrainResponseBodyProjectsMetadata$outboundSchema.parse(
      createDrainResponseBodyProjectsMetadata,
    ),
  );
}

export function createDrainResponseBodyProjectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateDrainResponseBodyProjectsMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDrainResponseBodyProjectsMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateDrainResponseBodyProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBody2$inboundSchema: z.ZodType<
  CreateDrainResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: ResponseBodyCreatedFrom$inboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => CreateDrainResponseBodySchemas$inboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => CreateDrainDeliveryDrains1$inboundSchema),
    z.lazy(() => CreateDrainDeliveryDrains2$inboundSchema),
    z.lazy(() => CreateDrainDeliveryDrains3$inboundSchema),
    z.lazy(() => CreateDrainDelivery4$inboundSchema),
    z.lazy(() => CreateDrainDelivery5$inboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => CreateDrainResponseBodySampling$inboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: CreateDrainResponseBodyDrainsStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: ResponseBodyDisabledReason$inboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => CreateDrainSourceDrains2$inboundSchema),
    z.lazy(() => CreateDrainSourceDrains1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => CreateDrainFilterV22$inboundSchema),
    z.lazy(() => CreateDrainFilterV21$inboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => CreateDrainResponseBodyProjectsMetadata$inboundSchema),
  ).optional(),
});

/** @internal */
export type CreateDrainResponseBody2$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: CreateDrainResponseBodySchemas$Outbound | undefined;
  delivery?:
    | CreateDrainDeliveryDrains1$Outbound
    | CreateDrainDeliveryDrains2$Outbound
    | CreateDrainDeliveryDrains3$Outbound
    | CreateDrainDelivery4$Outbound
    | CreateDrainDelivery5$Outbound
    | undefined;
  sampling?: Array<CreateDrainResponseBodySampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: CreateDrainSourceDrains2$Outbound | CreateDrainSourceDrains1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | CreateDrainFilterV22$Outbound
    | CreateDrainFilterV21$Outbound
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?:
    | Array<CreateDrainResponseBodyProjectsMetadata$Outbound>
    | undefined;
};

/** @internal */
export const CreateDrainResponseBody2$outboundSchema: z.ZodType<
  CreateDrainResponseBody2$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBody2
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: ResponseBodyCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => CreateDrainResponseBodySchemas$outboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => CreateDrainDeliveryDrains1$outboundSchema),
    z.lazy(() => CreateDrainDeliveryDrains2$outboundSchema),
    z.lazy(() => CreateDrainDeliveryDrains3$outboundSchema),
    z.lazy(() => CreateDrainDelivery4$outboundSchema),
    z.lazy(() => CreateDrainDelivery5$outboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => CreateDrainResponseBodySampling$outboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: CreateDrainResponseBodyDrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: ResponseBodyDisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => CreateDrainSourceDrains2$outboundSchema),
    z.lazy(() => CreateDrainSourceDrains1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => CreateDrainFilterV22$outboundSchema),
    z.lazy(() => CreateDrainFilterV21$outboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => CreateDrainResponseBodyProjectsMetadata$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBody2$ {
  /** @deprecated use `CreateDrainResponseBody2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBody2$inboundSchema;
  /** @deprecated use `CreateDrainResponseBody2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBody2$outboundSchema;
  /** @deprecated use `CreateDrainResponseBody2$Outbound` instead. */
  export type Outbound = CreateDrainResponseBody2$Outbound;
}

export function createDrainResponseBody2ToJSON(
  createDrainResponseBody2: CreateDrainResponseBody2,
): string {
  return JSON.stringify(
    CreateDrainResponseBody2$outboundSchema.parse(createDrainResponseBody2),
  );
}

export function createDrainResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBody2' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyCreatedFrom
> = z.nativeEnum(CreateDrainResponseBodyCreatedFrom);

/** @internal */
export const CreateDrainResponseBodyCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyCreatedFrom
> = CreateDrainResponseBodyCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyCreatedFrom$ {
  /** @deprecated use `CreateDrainResponseBodyCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyCreatedFrom$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyCreatedFrom$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodyCreatedFrom$outboundSchema;
}

/** @internal */
export const ResponseBodyLog$inboundSchema: z.ZodType<
  ResponseBodyLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResponseBodyLog$Outbound = {};

/** @internal */
export const ResponseBodyLog$outboundSchema: z.ZodType<
  ResponseBodyLog$Outbound,
  z.ZodTypeDef,
  ResponseBodyLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyLog$ {
  /** @deprecated use `ResponseBodyLog$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyLog$inboundSchema;
  /** @deprecated use `ResponseBodyLog$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyLog$outboundSchema;
  /** @deprecated use `ResponseBodyLog$Outbound` instead. */
  export type Outbound = ResponseBodyLog$Outbound;
}

export function responseBodyLogToJSON(
  responseBodyLog: ResponseBodyLog,
): string {
  return JSON.stringify(ResponseBodyLog$outboundSchema.parse(responseBodyLog));
}

export function responseBodyLogFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyLog' from JSON`,
  );
}

/** @internal */
export const Trace$inboundSchema: z.ZodType<Trace, z.ZodTypeDef, unknown> = z
  .object({});

/** @internal */
export type Trace$Outbound = {};

/** @internal */
export const Trace$outboundSchema: z.ZodType<
  Trace$Outbound,
  z.ZodTypeDef,
  Trace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trace$ {
  /** @deprecated use `Trace$inboundSchema` instead. */
  export const inboundSchema = Trace$inboundSchema;
  /** @deprecated use `Trace$outboundSchema` instead. */
  export const outboundSchema = Trace$outboundSchema;
  /** @deprecated use `Trace$Outbound` instead. */
  export type Outbound = Trace$Outbound;
}

export function traceToJSON(trace: Trace): string {
  return JSON.stringify(Trace$outboundSchema.parse(trace));
}

export function traceFromJSON(
  jsonString: string,
): SafeParseResult<Trace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Trace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Trace' from JSON`,
  );
}

/** @internal */
export const ResponseBodyAnalytics$inboundSchema: z.ZodType<
  ResponseBodyAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type ResponseBodyAnalytics$Outbound = {};

/** @internal */
export const ResponseBodyAnalytics$outboundSchema: z.ZodType<
  ResponseBodyAnalytics$Outbound,
  z.ZodTypeDef,
  ResponseBodyAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyAnalytics$ {
  /** @deprecated use `ResponseBodyAnalytics$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyAnalytics$inboundSchema;
  /** @deprecated use `ResponseBodyAnalytics$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyAnalytics$outboundSchema;
  /** @deprecated use `ResponseBodyAnalytics$Outbound` instead. */
  export type Outbound = ResponseBodyAnalytics$Outbound;
}

export function responseBodyAnalyticsToJSON(
  responseBodyAnalytics: ResponseBodyAnalytics,
): string {
  return JSON.stringify(
    ResponseBodyAnalytics$outboundSchema.parse(responseBodyAnalytics),
  );
}

export function responseBodyAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyAnalytics' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodySpeedInsights$inboundSchema: z.ZodType<
  CreateDrainResponseBodySpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type CreateDrainResponseBodySpeedInsights$Outbound = {};

/** @internal */
export const CreateDrainResponseBodySpeedInsights$outboundSchema: z.ZodType<
  CreateDrainResponseBodySpeedInsights$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodySpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodySpeedInsights$ {
  /** @deprecated use `CreateDrainResponseBodySpeedInsights$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainResponseBodySpeedInsights$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodySpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainResponseBodySpeedInsights$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodySpeedInsights$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodySpeedInsights$Outbound;
}

export function createDrainResponseBodySpeedInsightsToJSON(
  createDrainResponseBodySpeedInsights: CreateDrainResponseBodySpeedInsights,
): string {
  return JSON.stringify(
    CreateDrainResponseBodySpeedInsights$outboundSchema.parse(
      createDrainResponseBodySpeedInsights,
    ),
  );
}

export function createDrainResponseBodySpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodySpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateDrainResponseBodySpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodySpeedInsights' from JSON`,
  );
}

/** @internal */
export const ResponseBodySchemas$inboundSchema: z.ZodType<
  ResponseBodySchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => ResponseBodyLog$inboundSchema).optional(),
  trace: z.lazy(() => Trace$inboundSchema).optional(),
  analytics: z.lazy(() => ResponseBodyAnalytics$inboundSchema).optional(),
  speed_insights: z.lazy(() =>
    CreateDrainResponseBodySpeedInsights$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type ResponseBodySchemas$Outbound = {
  log?: ResponseBodyLog$Outbound | undefined;
  trace?: Trace$Outbound | undefined;
  analytics?: ResponseBodyAnalytics$Outbound | undefined;
  speed_insights?: CreateDrainResponseBodySpeedInsights$Outbound | undefined;
};

/** @internal */
export const ResponseBodySchemas$outboundSchema: z.ZodType<
  ResponseBodySchemas$Outbound,
  z.ZodTypeDef,
  ResponseBodySchemas
> = z.object({
  log: z.lazy(() => ResponseBodyLog$outboundSchema).optional(),
  trace: z.lazy(() => Trace$outboundSchema).optional(),
  analytics: z.lazy(() => ResponseBodyAnalytics$outboundSchema).optional(),
  speedInsights: z.lazy(() =>
    CreateDrainResponseBodySpeedInsights$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodySchemas$ {
  /** @deprecated use `ResponseBodySchemas$inboundSchema` instead. */
  export const inboundSchema = ResponseBodySchemas$inboundSchema;
  /** @deprecated use `ResponseBodySchemas$outboundSchema` instead. */
  export const outboundSchema = ResponseBodySchemas$outboundSchema;
  /** @deprecated use `ResponseBodySchemas$Outbound` instead. */
  export type Outbound = ResponseBodySchemas$Outbound;
}

export function responseBodySchemasToJSON(
  responseBodySchemas: ResponseBodySchemas,
): string {
  return JSON.stringify(
    ResponseBodySchemas$outboundSchema.parse(responseBodySchemas),
  );
}

export function responseBodySchemasFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodySchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodySchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodySchemas' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponse200Type> = z
    .nativeEnum(CreateDrainDeliveryDrainsResponse200Type);

/** @internal */
export const CreateDrainDeliveryDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponse200Type> =
    CreateDrainDeliveryDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponse200Type$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponse200Type$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const DeliveryTarget$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryTarget
> = z.nativeEnum(DeliveryTarget);

/** @internal */
export const DeliveryTarget$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryTarget
> = DeliveryTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryTarget$ {
  /** @deprecated use `DeliveryTarget$inboundSchema` instead. */
  export const inboundSchema = DeliveryTarget$inboundSchema;
  /** @deprecated use `DeliveryTarget$outboundSchema` instead. */
  export const outboundSchema = DeliveryTarget$outboundSchema;
}

/** @internal */
export const Delivery5$inboundSchema: z.ZodType<
  Delivery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainDeliveryDrainsResponse200Type$inboundSchema,
  target: DeliveryTarget$inboundSchema,
});

/** @internal */
export type Delivery5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const Delivery5$outboundSchema: z.ZodType<
  Delivery5$Outbound,
  z.ZodTypeDef,
  Delivery5
> = z.object({
  type: CreateDrainDeliveryDrainsResponse200Type$outboundSchema,
  target: DeliveryTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delivery5$ {
  /** @deprecated use `Delivery5$inboundSchema` instead. */
  export const inboundSchema = Delivery5$inboundSchema;
  /** @deprecated use `Delivery5$outboundSchema` instead. */
  export const outboundSchema = Delivery5$outboundSchema;
  /** @deprecated use `Delivery5$Outbound` instead. */
  export type Outbound = Delivery5$Outbound;
}

export function delivery5ToJSON(delivery5: Delivery5): string {
  return JSON.stringify(Delivery5$outboundSchema.parse(delivery5));
}

export function delivery5FromJSON(
  jsonString: string,
): SafeParseResult<Delivery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delivery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delivery5' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponseType> = z.nativeEnum(
    CreateDrainDeliveryDrainsResponseType,
  );

/** @internal */
export const CreateDrainDeliveryDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponseType> =
    CreateDrainDeliveryDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponseType$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponseType$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponseType$outboundSchema;
}

/** @internal */
export const Delivery4$inboundSchema: z.ZodType<
  Delivery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainDeliveryDrainsResponseType$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type Delivery4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const Delivery4$outboundSchema: z.ZodType<
  Delivery4$Outbound,
  z.ZodTypeDef,
  Delivery4
> = z.object({
  type: CreateDrainDeliveryDrainsResponseType$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Delivery4$ {
  /** @deprecated use `Delivery4$inboundSchema` instead. */
  export const inboundSchema = Delivery4$inboundSchema;
  /** @deprecated use `Delivery4$outboundSchema` instead. */
  export const outboundSchema = Delivery4$outboundSchema;
  /** @deprecated use `Delivery4$Outbound` instead. */
  export type Outbound = Delivery4$Outbound;
}

export function delivery4ToJSON(delivery4: Delivery4): string {
  return JSON.stringify(Delivery4$outboundSchema.parse(delivery4));
}

export function delivery4FromJSON(
  jsonString: string,
): SafeParseResult<Delivery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Delivery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Delivery4' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryDrainsType
> = z.nativeEnum(CreateDrainDeliveryDrainsType);

/** @internal */
export const CreateDrainDeliveryDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryDrainsType
> = CreateDrainDeliveryDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsType$ {
  /** @deprecated use `CreateDrainDeliveryDrainsType$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryDrainsType$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsType$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryDrainsType$outboundSchema;
}

/** @internal */
export const CreateDrainDelivery3$inboundSchema: z.ZodType<
  CreateDrainDelivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainDeliveryDrainsType$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type CreateDrainDelivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const CreateDrainDelivery3$outboundSchema: z.ZodType<
  CreateDrainDelivery3$Outbound,
  z.ZodTypeDef,
  CreateDrainDelivery3
> = z.object({
  type: CreateDrainDeliveryDrainsType$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDelivery3$ {
  /** @deprecated use `CreateDrainDelivery3$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDelivery3$inboundSchema;
  /** @deprecated use `CreateDrainDelivery3$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDelivery3$outboundSchema;
  /** @deprecated use `CreateDrainDelivery3$Outbound` instead. */
  export type Outbound = CreateDrainDelivery3$Outbound;
}

export function createDrainDelivery3ToJSON(
  createDrainDelivery3: CreateDrainDelivery3,
): string {
  return JSON.stringify(
    CreateDrainDelivery3$outboundSchema.parse(createDrainDelivery3),
  );
}

export function createDrainDelivery3FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDelivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDelivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDelivery3' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryType
> = z.nativeEnum(CreateDrainDeliveryType);

/** @internal */
export const CreateDrainDeliveryType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryType
> = CreateDrainDeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryType$ {
  /** @deprecated use `CreateDrainDeliveryType$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryType$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryType$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDeliveryType$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrainsEndpoint$inboundSchema: z.ZodType<
  CreateDrainDeliveryDrainsEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type CreateDrainDeliveryDrainsEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const CreateDrainDeliveryDrainsEndpoint$outboundSchema: z.ZodType<
  CreateDrainDeliveryDrainsEndpoint$Outbound,
  z.ZodTypeDef,
  CreateDrainDeliveryDrainsEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsEndpoint$ {
  /** @deprecated use `CreateDrainDeliveryDrainsEndpoint$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryDrainsEndpoint$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsEndpoint$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsEndpoint$outboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsEndpoint$Outbound` instead. */
  export type Outbound = CreateDrainDeliveryDrainsEndpoint$Outbound;
}

export function createDrainDeliveryDrainsEndpointToJSON(
  createDrainDeliveryDrainsEndpoint: CreateDrainDeliveryDrainsEndpoint,
): string {
  return JSON.stringify(
    CreateDrainDeliveryDrainsEndpoint$outboundSchema.parse(
      createDrainDeliveryDrainsEndpoint,
    ),
  );
}

export function createDrainDeliveryDrainsEndpointFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDeliveryDrainsEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDeliveryDrainsEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDeliveryDrainsEndpoint' from JSON`,
  );
}

/** @internal */
export const CreateDrainDeliveryDrainsResponseEncoding$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponseEncoding> = z
    .nativeEnum(CreateDrainDeliveryDrainsResponseEncoding);

/** @internal */
export const CreateDrainDeliveryDrainsResponseEncoding$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsResponseEncoding> =
    CreateDrainDeliveryDrainsResponseEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsResponseEncoding$ {
  /** @deprecated use `CreateDrainDeliveryDrainsResponseEncoding$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsResponseEncoding$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsResponseEncoding$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsResponseEncoding$outboundSchema;
}

/** @internal */
export const CreateDrainDelivery2$inboundSchema: z.ZodType<
  CreateDrainDelivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainDeliveryType$inboundSchema,
  endpoint: z.lazy(() => CreateDrainDeliveryDrainsEndpoint$inboundSchema),
  encoding: CreateDrainDeliveryDrainsResponseEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type CreateDrainDelivery2$Outbound = {
  type: string;
  endpoint: CreateDrainDeliveryDrainsEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const CreateDrainDelivery2$outboundSchema: z.ZodType<
  CreateDrainDelivery2$Outbound,
  z.ZodTypeDef,
  CreateDrainDelivery2
> = z.object({
  type: CreateDrainDeliveryType$outboundSchema,
  endpoint: z.lazy(() => CreateDrainDeliveryDrainsEndpoint$outboundSchema),
  encoding: CreateDrainDeliveryDrainsResponseEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDelivery2$ {
  /** @deprecated use `CreateDrainDelivery2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDelivery2$inboundSchema;
  /** @deprecated use `CreateDrainDelivery2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDelivery2$outboundSchema;
  /** @deprecated use `CreateDrainDelivery2$Outbound` instead. */
  export type Outbound = CreateDrainDelivery2$Outbound;
}

export function createDrainDelivery2ToJSON(
  createDrainDelivery2: CreateDrainDelivery2,
): string {
  return JSON.stringify(
    CreateDrainDelivery2$outboundSchema.parse(createDrainDelivery2),
  );
}

export function createDrainDelivery2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDelivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDelivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDelivery2' from JSON`,
  );
}

/** @internal */
export const DeliveryType$inboundSchema: z.ZodNativeEnum<typeof DeliveryType> =
  z.nativeEnum(DeliveryType);

/** @internal */
export const DeliveryType$outboundSchema: z.ZodNativeEnum<typeof DeliveryType> =
  DeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryType$ {
  /** @deprecated use `DeliveryType$inboundSchema` instead. */
  export const inboundSchema = DeliveryType$inboundSchema;
  /** @deprecated use `DeliveryType$outboundSchema` instead. */
  export const outboundSchema = DeliveryType$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrainsEncoding$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryDrainsEncoding
> = z.nativeEnum(CreateDrainDeliveryDrainsEncoding);

/** @internal */
export const CreateDrainDeliveryDrainsEncoding$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainDeliveryDrainsEncoding
> = CreateDrainDeliveryDrainsEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsEncoding$ {
  /** @deprecated use `CreateDrainDeliveryDrainsEncoding$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDeliveryDrainsEncoding$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsEncoding$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsEncoding$outboundSchema;
}

/** @internal */
export const CreateDrainDeliveryDrainsCompression$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsCompression> = z.nativeEnum(
    CreateDrainDeliveryDrainsCompression,
  );

/** @internal */
export const CreateDrainDeliveryDrainsCompression$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainDeliveryDrainsCompression> =
    CreateDrainDeliveryDrainsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDeliveryDrainsCompression$ {
  /** @deprecated use `CreateDrainDeliveryDrainsCompression$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainDeliveryDrainsCompression$inboundSchema;
  /** @deprecated use `CreateDrainDeliveryDrainsCompression$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainDeliveryDrainsCompression$outboundSchema;
}

/** @internal */
export const CreateDrainDelivery1$inboundSchema: z.ZodType<
  CreateDrainDelivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DeliveryType$inboundSchema,
  endpoint: z.string(),
  encoding: CreateDrainDeliveryDrainsEncoding$inboundSchema,
  compression: CreateDrainDeliveryDrainsCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type CreateDrainDelivery1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const CreateDrainDelivery1$outboundSchema: z.ZodType<
  CreateDrainDelivery1$Outbound,
  z.ZodTypeDef,
  CreateDrainDelivery1
> = z.object({
  type: DeliveryType$outboundSchema,
  endpoint: z.string(),
  encoding: CreateDrainDeliveryDrainsEncoding$outboundSchema,
  compression: CreateDrainDeliveryDrainsCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainDelivery1$ {
  /** @deprecated use `CreateDrainDelivery1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainDelivery1$inboundSchema;
  /** @deprecated use `CreateDrainDelivery1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainDelivery1$outboundSchema;
  /** @deprecated use `CreateDrainDelivery1$Outbound` instead. */
  export type Outbound = CreateDrainDelivery1$Outbound;
}

export function createDrainDelivery1ToJSON(
  createDrainDelivery1: CreateDrainDelivery1,
): string {
  return JSON.stringify(
    CreateDrainDelivery1$outboundSchema.parse(createDrainDelivery1),
  );
}

export function createDrainDelivery1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainDelivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainDelivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainDelivery1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyDelivery$inboundSchema: z.ZodType<
  ResponseBodyDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainDelivery1$inboundSchema),
  z.lazy(() => CreateDrainDelivery2$inboundSchema),
  z.lazy(() => CreateDrainDelivery3$inboundSchema),
  z.lazy(() => Delivery4$inboundSchema),
  z.lazy(() => Delivery5$inboundSchema),
]);

/** @internal */
export type ResponseBodyDelivery$Outbound =
  | CreateDrainDelivery1$Outbound
  | CreateDrainDelivery2$Outbound
  | CreateDrainDelivery3$Outbound
  | Delivery4$Outbound
  | Delivery5$Outbound;

/** @internal */
export const ResponseBodyDelivery$outboundSchema: z.ZodType<
  ResponseBodyDelivery$Outbound,
  z.ZodTypeDef,
  ResponseBodyDelivery
> = z.union([
  z.lazy(() => CreateDrainDelivery1$outboundSchema),
  z.lazy(() => CreateDrainDelivery2$outboundSchema),
  z.lazy(() => CreateDrainDelivery3$outboundSchema),
  z.lazy(() => Delivery4$outboundSchema),
  z.lazy(() => Delivery5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDelivery$ {
  /** @deprecated use `ResponseBodyDelivery$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDelivery$inboundSchema;
  /** @deprecated use `ResponseBodyDelivery$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDelivery$outboundSchema;
  /** @deprecated use `ResponseBodyDelivery$Outbound` instead. */
  export type Outbound = ResponseBodyDelivery$Outbound;
}

export function responseBodyDeliveryToJSON(
  responseBodyDelivery: ResponseBodyDelivery,
): string {
  return JSON.stringify(
    ResponseBodyDelivery$outboundSchema.parse(responseBodyDelivery),
  );
}

export function responseBodyDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyDelivery' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyType
> = z.nativeEnum(CreateDrainResponseBodyType);

/** @internal */
export const CreateDrainResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyType
> = CreateDrainResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyType$ {
  /** @deprecated use `CreateDrainResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyType$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyType$outboundSchema;
}

/** @internal */
export const ResponseBodyEnv$inboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyEnv
> = z.nativeEnum(ResponseBodyEnv);

/** @internal */
export const ResponseBodyEnv$outboundSchema: z.ZodNativeEnum<
  typeof ResponseBodyEnv
> = ResponseBodyEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyEnv$ {
  /** @deprecated use `ResponseBodyEnv$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyEnv$inboundSchema;
  /** @deprecated use `ResponseBodyEnv$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyEnv$outboundSchema;
}

/** @internal */
export const ResponseBodySampling$inboundSchema: z.ZodType<
  ResponseBodySampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainResponseBodyType$inboundSchema,
  rate: z.number(),
  env: ResponseBodyEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type ResponseBodySampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const ResponseBodySampling$outboundSchema: z.ZodType<
  ResponseBodySampling$Outbound,
  z.ZodTypeDef,
  ResponseBodySampling
> = z.object({
  type: CreateDrainResponseBodyType$outboundSchema,
  rate: z.number(),
  env: ResponseBodyEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodySampling$ {
  /** @deprecated use `ResponseBodySampling$inboundSchema` instead. */
  export const inboundSchema = ResponseBodySampling$inboundSchema;
  /** @deprecated use `ResponseBodySampling$outboundSchema` instead. */
  export const outboundSchema = ResponseBodySampling$outboundSchema;
  /** @deprecated use `ResponseBodySampling$Outbound` instead. */
  export type Outbound = ResponseBodySampling$Outbound;
}

export function responseBodySamplingToJSON(
  responseBodySampling: ResponseBodySampling,
): string {
  return JSON.stringify(
    ResponseBodySampling$outboundSchema.parse(responseBodySampling),
  );
}

export function responseBodySamplingFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodySampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodySampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodySampling' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyStatus
> = z.nativeEnum(CreateDrainResponseBodyStatus);

/** @internal */
export const CreateDrainResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainResponseBodyStatus
> = CreateDrainResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodyStatus$ {
  /** @deprecated use `CreateDrainResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodyStatus$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodyStatus$outboundSchema;
}

/** @internal */
export const DisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof DisabledReason
> = z.nativeEnum(DisabledReason);

/** @internal */
export const DisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof DisabledReason
> = DisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisabledReason$ {
  /** @deprecated use `DisabledReason$inboundSchema` instead. */
  export const inboundSchema = DisabledReason$inboundSchema;
  /** @deprecated use `DisabledReason$outboundSchema` instead. */
  export const outboundSchema = DisabledReason$outboundSchema;
}

/** @internal */
export const CreateDrainSourceDrainsResponse200Kind$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainSourceDrainsResponse200Kind> = z.nativeEnum(
    CreateDrainSourceDrainsResponse200Kind,
  );

/** @internal */
export const CreateDrainSourceDrainsResponse200Kind$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainSourceDrainsResponse200Kind> =
    CreateDrainSourceDrainsResponse200Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSourceDrainsResponse200Kind$ {
  /** @deprecated use `CreateDrainSourceDrainsResponse200Kind$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainSourceDrainsResponse200Kind$inboundSchema;
  /** @deprecated use `CreateDrainSourceDrainsResponse200Kind$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainSourceDrainsResponse200Kind$outboundSchema;
}

/** @internal */
export const CreateDrainSource2$inboundSchema: z.ZodType<
  CreateDrainSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: CreateDrainSourceDrainsResponse200Kind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type CreateDrainSource2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const CreateDrainSource2$outboundSchema: z.ZodType<
  CreateDrainSource2$Outbound,
  z.ZodTypeDef,
  CreateDrainSource2
> = z.object({
  kind: CreateDrainSourceDrainsResponse200Kind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSource2$ {
  /** @deprecated use `CreateDrainSource2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSource2$inboundSchema;
  /** @deprecated use `CreateDrainSource2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSource2$outboundSchema;
  /** @deprecated use `CreateDrainSource2$Outbound` instead. */
  export type Outbound = CreateDrainSource2$Outbound;
}

export function createDrainSource2ToJSON(
  createDrainSource2: CreateDrainSource2,
): string {
  return JSON.stringify(
    CreateDrainSource2$outboundSchema.parse(createDrainSource2),
  );
}

export function createDrainSource2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainSource2' from JSON`,
  );
}

/** @internal */
export const CreateDrainSourceDrainsResponseKind$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainSourceDrainsResponseKind
> = z.nativeEnum(CreateDrainSourceDrainsResponseKind);

/** @internal */
export const CreateDrainSourceDrainsResponseKind$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainSourceDrainsResponseKind> =
    CreateDrainSourceDrainsResponseKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSourceDrainsResponseKind$ {
  /** @deprecated use `CreateDrainSourceDrainsResponseKind$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainSourceDrainsResponseKind$inboundSchema;
  /** @deprecated use `CreateDrainSourceDrainsResponseKind$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainSourceDrainsResponseKind$outboundSchema;
}

/** @internal */
export const CreateDrainSource1$inboundSchema: z.ZodType<
  CreateDrainSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: CreateDrainSourceDrainsResponseKind$inboundSchema,
});

/** @internal */
export type CreateDrainSource1$Outbound = {
  kind: string;
};

/** @internal */
export const CreateDrainSource1$outboundSchema: z.ZodType<
  CreateDrainSource1$Outbound,
  z.ZodTypeDef,
  CreateDrainSource1
> = z.object({
  kind: CreateDrainSourceDrainsResponseKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainSource1$ {
  /** @deprecated use `CreateDrainSource1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainSource1$inboundSchema;
  /** @deprecated use `CreateDrainSource1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainSource1$outboundSchema;
  /** @deprecated use `CreateDrainSource1$Outbound` instead. */
  export type Outbound = CreateDrainSource1$Outbound;
}

export function createDrainSource1ToJSON(
  createDrainSource1: CreateDrainSource1,
): string {
  return JSON.stringify(
    CreateDrainSource1$outboundSchema.parse(createDrainSource1),
  );
}

export function createDrainSource1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainSource1' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBodySource$inboundSchema: z.ZodType<
  CreateDrainResponseBodySource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainSource2$inboundSchema),
  z.lazy(() => CreateDrainSource1$inboundSchema),
]);

/** @internal */
export type CreateDrainResponseBodySource$Outbound =
  | CreateDrainSource2$Outbound
  | CreateDrainSource1$Outbound;

/** @internal */
export const CreateDrainResponseBodySource$outboundSchema: z.ZodType<
  CreateDrainResponseBodySource$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBodySource
> = z.union([
  z.lazy(() => CreateDrainSource2$outboundSchema),
  z.lazy(() => CreateDrainSource1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBodySource$ {
  /** @deprecated use `CreateDrainResponseBodySource$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBodySource$inboundSchema;
  /** @deprecated use `CreateDrainResponseBodySource$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBodySource$outboundSchema;
  /** @deprecated use `CreateDrainResponseBodySource$Outbound` instead. */
  export type Outbound = CreateDrainResponseBodySource$Outbound;
}

export function createDrainResponseBodySourceToJSON(
  createDrainResponseBodySource: CreateDrainResponseBodySource,
): string {
  return JSON.stringify(
    CreateDrainResponseBodySource$outboundSchema.parse(
      createDrainResponseBodySource,
    ),
  );
}

export function createDrainResponseBodySourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBodySource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBodySource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBodySource' from JSON`,
  );
}

/** @internal */
export const FilterV2Version$inboundSchema: z.ZodNativeEnum<
  typeof FilterV2Version
> = z.nativeEnum(FilterV2Version);

/** @internal */
export const FilterV2Version$outboundSchema: z.ZodNativeEnum<
  typeof FilterV2Version
> = FilterV2Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterV2Version$ {
  /** @deprecated use `FilterV2Version$inboundSchema` instead. */
  export const inboundSchema = FilterV2Version$inboundSchema;
  /** @deprecated use `FilterV2Version$outboundSchema` instead. */
  export const outboundSchema = FilterV2Version$outboundSchema;
}

/** @internal */
export const CreateDrainFilterType$inboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterType
> = z.nativeEnum(CreateDrainFilterType);

/** @internal */
export const CreateDrainFilterType$outboundSchema: z.ZodNativeEnum<
  typeof CreateDrainFilterType
> = CreateDrainFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterType$ {
  /** @deprecated use `CreateDrainFilterType$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterType$inboundSchema;
  /** @deprecated use `CreateDrainFilterType$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterType$outboundSchema;
}

/** @internal */
export const CreateDrainFilterDrains2$inboundSchema: z.ZodType<
  CreateDrainFilterDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: CreateDrainFilterType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type CreateDrainFilterDrains2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const CreateDrainFilterDrains2$outboundSchema: z.ZodType<
  CreateDrainFilterDrains2$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrains2
> = z.object({
  type: CreateDrainFilterType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrains2$ {
  /** @deprecated use `CreateDrainFilterDrains2$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrains2$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrains2$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDrains2$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrains2$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrains2$Outbound;
}

export function createDrainFilterDrains2ToJSON(
  createDrainFilterDrains2: CreateDrainFilterDrains2,
): string {
  return JSON.stringify(
    CreateDrainFilterDrains2$outboundSchema.parse(createDrainFilterDrains2),
  );
}

export function createDrainFilterDrains2FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrains2' from JSON`,
  );
}

/** @internal */
export const FilterType$inboundSchema: z.ZodNativeEnum<typeof FilterType> = z
  .nativeEnum(FilterType);

/** @internal */
export const FilterType$outboundSchema: z.ZodNativeEnum<typeof FilterType> =
  FilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterType$ {
  /** @deprecated use `FilterType$inboundSchema` instead. */
  export const inboundSchema = FilterType$inboundSchema;
  /** @deprecated use `FilterType$outboundSchema` instead. */
  export const outboundSchema = FilterType$outboundSchema;
}

/** @internal */
export const CreateDrainFilterDrainsProject$inboundSchema: z.ZodType<
  CreateDrainFilterDrainsProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterDrainsProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterDrainsProject$outboundSchema: z.ZodType<
  CreateDrainFilterDrainsProject$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrainsProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsProject$ {
  /** @deprecated use `CreateDrainFilterDrainsProject$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrainsProject$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsProject$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDrainsProject$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsProject$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrainsProject$Outbound;
}

export function createDrainFilterDrainsProjectToJSON(
  createDrainFilterDrainsProject: CreateDrainFilterDrainsProject,
): string {
  return JSON.stringify(
    CreateDrainFilterDrainsProject$outboundSchema.parse(
      createDrainFilterDrainsProject,
    ),
  );
}

export function createDrainFilterDrainsProjectFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrainsProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDrainsProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrainsProject' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterDrainsLog$inboundSchema: z.ZodType<
  CreateDrainFilterDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterDrainsLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterDrainsLog$outboundSchema: z.ZodType<
  CreateDrainFilterDrainsLog$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrainsLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsLog$ {
  /** @deprecated use `CreateDrainFilterDrainsLog$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrainsLog$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsLog$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilterDrainsLog$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsLog$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrainsLog$Outbound;
}

export function createDrainFilterDrainsLogToJSON(
  createDrainFilterDrainsLog: CreateDrainFilterDrainsLog,
): string {
  return JSON.stringify(
    CreateDrainFilterDrainsLog$outboundSchema.parse(createDrainFilterDrainsLog),
  );
}

export function createDrainFilterDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrainsLog' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterDrainsDeployment$inboundSchema: z.ZodType<
  CreateDrainFilterDrainsDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type CreateDrainFilterDrainsDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const CreateDrainFilterDrainsDeployment$outboundSchema: z.ZodType<
  CreateDrainFilterDrainsDeployment$Outbound,
  z.ZodTypeDef,
  CreateDrainFilterDrainsDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterDrainsDeployment$ {
  /** @deprecated use `CreateDrainFilterDrainsDeployment$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilterDrainsDeployment$inboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsDeployment$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainFilterDrainsDeployment$outboundSchema;
  /** @deprecated use `CreateDrainFilterDrainsDeployment$Outbound` instead. */
  export type Outbound = CreateDrainFilterDrainsDeployment$Outbound;
}

export function createDrainFilterDrainsDeploymentToJSON(
  createDrainFilterDrainsDeployment: CreateDrainFilterDrainsDeployment,
): string {
  return JSON.stringify(
    CreateDrainFilterDrainsDeployment$outboundSchema.parse(
      createDrainFilterDrainsDeployment,
    ),
  );
}

export function createDrainFilterDrainsDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilterDrainsDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilterDrainsDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilterDrainsDeployment' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilter1$inboundSchema: z.ZodType<
  CreateDrainFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: FilterType$inboundSchema,
  project: z.lazy(() => CreateDrainFilterDrainsProject$inboundSchema)
    .optional(),
  log: z.lazy(() => CreateDrainFilterDrainsLog$inboundSchema).optional(),
  deployment: z.lazy(() => CreateDrainFilterDrainsDeployment$inboundSchema)
    .optional(),
});

/** @internal */
export type CreateDrainFilter1$Outbound = {
  type: string;
  project?: CreateDrainFilterDrainsProject$Outbound | undefined;
  log?: CreateDrainFilterDrainsLog$Outbound | undefined;
  deployment?: CreateDrainFilterDrainsDeployment$Outbound | undefined;
};

/** @internal */
export const CreateDrainFilter1$outboundSchema: z.ZodType<
  CreateDrainFilter1$Outbound,
  z.ZodTypeDef,
  CreateDrainFilter1
> = z.object({
  type: FilterType$outboundSchema,
  project: z.lazy(() => CreateDrainFilterDrainsProject$outboundSchema)
    .optional(),
  log: z.lazy(() => CreateDrainFilterDrainsLog$outboundSchema).optional(),
  deployment: z.lazy(() => CreateDrainFilterDrainsDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilter1$ {
  /** @deprecated use `CreateDrainFilter1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainFilter1$inboundSchema;
  /** @deprecated use `CreateDrainFilter1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainFilter1$outboundSchema;
  /** @deprecated use `CreateDrainFilter1$Outbound` instead. */
  export type Outbound = CreateDrainFilter1$Outbound;
}

export function createDrainFilter1ToJSON(
  createDrainFilter1: CreateDrainFilter1,
): string {
  return JSON.stringify(
    CreateDrainFilter1$outboundSchema.parse(createDrainFilter1),
  );
}

export function createDrainFilter1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainFilter1' from JSON`,
  );
}

/** @internal */
export const FilterV2Filter$inboundSchema: z.ZodType<
  FilterV2Filter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainFilterDrains2$inboundSchema),
  z.lazy(() => CreateDrainFilter1$inboundSchema),
]);

/** @internal */
export type FilterV2Filter$Outbound =
  | CreateDrainFilterDrains2$Outbound
  | CreateDrainFilter1$Outbound;

/** @internal */
export const FilterV2Filter$outboundSchema: z.ZodType<
  FilterV2Filter$Outbound,
  z.ZodTypeDef,
  FilterV2Filter
> = z.union([
  z.lazy(() => CreateDrainFilterDrains2$outboundSchema),
  z.lazy(() => CreateDrainFilter1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterV2Filter$ {
  /** @deprecated use `FilterV2Filter$inboundSchema` instead. */
  export const inboundSchema = FilterV2Filter$inboundSchema;
  /** @deprecated use `FilterV2Filter$outboundSchema` instead. */
  export const outboundSchema = FilterV2Filter$outboundSchema;
  /** @deprecated use `FilterV2Filter$Outbound` instead. */
  export type Outbound = FilterV2Filter$Outbound;
}

export function filterV2FilterToJSON(filterV2Filter: FilterV2Filter): string {
  return JSON.stringify(FilterV2Filter$outboundSchema.parse(filterV2Filter));
}

export function filterV2FilterFromJSON(
  jsonString: string,
): SafeParseResult<FilterV2Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterV2Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterV2Filter' from JSON`,
  );
}

/** @internal */
export const FilterV22$inboundSchema: z.ZodType<
  FilterV22,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: FilterV2Version$inboundSchema,
  filter: z.union([
    z.lazy(() => CreateDrainFilterDrains2$inboundSchema),
    z.lazy(() => CreateDrainFilter1$inboundSchema),
  ]),
});

/** @internal */
export type FilterV22$Outbound = {
  version: string;
  filter: CreateDrainFilterDrains2$Outbound | CreateDrainFilter1$Outbound;
};

/** @internal */
export const FilterV22$outboundSchema: z.ZodType<
  FilterV22$Outbound,
  z.ZodTypeDef,
  FilterV22
> = z.object({
  version: FilterV2Version$outboundSchema,
  filter: z.union([
    z.lazy(() => CreateDrainFilterDrains2$outboundSchema),
    z.lazy(() => CreateDrainFilter1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterV22$ {
  /** @deprecated use `FilterV22$inboundSchema` instead. */
  export const inboundSchema = FilterV22$inboundSchema;
  /** @deprecated use `FilterV22$outboundSchema` instead. */
  export const outboundSchema = FilterV22$outboundSchema;
  /** @deprecated use `FilterV22$Outbound` instead. */
  export type Outbound = FilterV22$Outbound;
}

export function filterV22ToJSON(filterV22: FilterV22): string {
  return JSON.stringify(FilterV22$outboundSchema.parse(filterV22));
}

export function filterV22FromJSON(
  jsonString: string,
): SafeParseResult<FilterV22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterV22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterV22' from JSON`,
  );
}

/** @internal */
export const CreateDrainFilterV2DrainsResponseVersion$inboundSchema:
  z.ZodNativeEnum<typeof CreateDrainFilterV2DrainsResponseVersion> = z
    .nativeEnum(CreateDrainFilterV2DrainsResponseVersion);

/** @internal */
export const CreateDrainFilterV2DrainsResponseVersion$outboundSchema:
  z.ZodNativeEnum<typeof CreateDrainFilterV2DrainsResponseVersion> =
    CreateDrainFilterV2DrainsResponseVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainFilterV2DrainsResponseVersion$ {
  /** @deprecated use `CreateDrainFilterV2DrainsResponseVersion$inboundSchema` instead. */
  export const inboundSchema =
    CreateDrainFilterV2DrainsResponseVersion$inboundSchema;
  /** @deprecated use `CreateDrainFilterV2DrainsResponseVersion$outboundSchema` instead. */
  export const outboundSchema =
    CreateDrainFilterV2DrainsResponseVersion$outboundSchema;
}

/** @internal */
export const FilterV21$inboundSchema: z.ZodType<
  FilterV21,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: CreateDrainFilterV2DrainsResponseVersion$inboundSchema,
});

/** @internal */
export type FilterV21$Outbound = {
  version: string;
};

/** @internal */
export const FilterV21$outboundSchema: z.ZodType<
  FilterV21$Outbound,
  z.ZodTypeDef,
  FilterV21
> = z.object({
  version: CreateDrainFilterV2DrainsResponseVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterV21$ {
  /** @deprecated use `FilterV21$inboundSchema` instead. */
  export const inboundSchema = FilterV21$inboundSchema;
  /** @deprecated use `FilterV21$outboundSchema` instead. */
  export const outboundSchema = FilterV21$outboundSchema;
  /** @deprecated use `FilterV21$Outbound` instead. */
  export type Outbound = FilterV21$Outbound;
}

export function filterV21ToJSON(filterV21: FilterV21): string {
  return JSON.stringify(FilterV21$outboundSchema.parse(filterV21));
}

export function filterV21FromJSON(
  jsonString: string,
): SafeParseResult<FilterV21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterV21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterV21' from JSON`,
  );
}

/** @internal */
export const FilterV2$inboundSchema: z.ZodType<
  FilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => FilterV22$inboundSchema),
  z.lazy(() => FilterV21$inboundSchema),
]);

/** @internal */
export type FilterV2$Outbound = FilterV22$Outbound | FilterV21$Outbound;

/** @internal */
export const FilterV2$outboundSchema: z.ZodType<
  FilterV2$Outbound,
  z.ZodTypeDef,
  FilterV2
> = z.union([
  z.lazy(() => FilterV22$outboundSchema),
  z.lazy(() => FilterV21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterV2$ {
  /** @deprecated use `FilterV2$inboundSchema` instead. */
  export const inboundSchema = FilterV2$inboundSchema;
  /** @deprecated use `FilterV2$outboundSchema` instead. */
  export const outboundSchema = FilterV2$outboundSchema;
  /** @deprecated use `FilterV2$Outbound` instead. */
  export type Outbound = FilterV2$Outbound;
}

export function filterV2ToJSON(filterV2: FilterV2): string {
  return JSON.stringify(FilterV2$outboundSchema.parse(filterV2));
}

export function filterV2FromJSON(
  jsonString: string,
): SafeParseResult<FilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterV2' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBody1$inboundSchema: z.ZodType<
  CreateDrainResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: CreateDrainResponseBodyCreatedFrom$inboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => ResponseBodySchemas$inboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => CreateDrainDelivery1$inboundSchema),
    z.lazy(() => CreateDrainDelivery2$inboundSchema),
    z.lazy(() => CreateDrainDelivery3$inboundSchema),
    z.lazy(() => Delivery4$inboundSchema),
    z.lazy(() => Delivery5$inboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => ResponseBodySampling$inboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: CreateDrainResponseBodyStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: DisabledReason$inboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => CreateDrainSource2$inboundSchema),
    z.lazy(() => CreateDrainSource1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => FilterV22$inboundSchema),
    z.lazy(() => FilterV21$inboundSchema),
  ]).optional(),
});

/** @internal */
export type CreateDrainResponseBody1$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: ResponseBodySchemas$Outbound | undefined;
  delivery?:
    | CreateDrainDelivery1$Outbound
    | CreateDrainDelivery2$Outbound
    | CreateDrainDelivery3$Outbound
    | Delivery4$Outbound
    | Delivery5$Outbound
    | undefined;
  sampling?: Array<ResponseBodySampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: CreateDrainSource2$Outbound | CreateDrainSource1$Outbound;
  filter?: string | undefined;
  filterV2?: FilterV22$Outbound | FilterV21$Outbound | undefined;
};

/** @internal */
export const CreateDrainResponseBody1$outboundSchema: z.ZodType<
  CreateDrainResponseBody1$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBody1
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: CreateDrainResponseBodyCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => ResponseBodySchemas$outboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => CreateDrainDelivery1$outboundSchema),
    z.lazy(() => CreateDrainDelivery2$outboundSchema),
    z.lazy(() => CreateDrainDelivery3$outboundSchema),
    z.lazy(() => Delivery4$outboundSchema),
    z.lazy(() => Delivery5$outboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => ResponseBodySampling$outboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: CreateDrainResponseBodyStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: DisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => CreateDrainSource2$outboundSchema),
    z.lazy(() => CreateDrainSource1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => FilterV22$outboundSchema),
    z.lazy(() => FilterV21$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBody1$ {
  /** @deprecated use `CreateDrainResponseBody1$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBody1$inboundSchema;
  /** @deprecated use `CreateDrainResponseBody1$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBody1$outboundSchema;
  /** @deprecated use `CreateDrainResponseBody1$Outbound` instead. */
  export type Outbound = CreateDrainResponseBody1$Outbound;
}

export function createDrainResponseBody1ToJSON(
  createDrainResponseBody1: CreateDrainResponseBody1,
): string {
  return JSON.stringify(
    CreateDrainResponseBody1$outboundSchema.parse(createDrainResponseBody1),
  );
}

export function createDrainResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBody1' from JSON`,
  );
}

/** @internal */
export const CreateDrainResponseBody$inboundSchema: z.ZodType<
  CreateDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateDrainResponseBody1$inboundSchema),
  z.lazy(() => CreateDrainResponseBody2$inboundSchema),
]);

/** @internal */
export type CreateDrainResponseBody$Outbound =
  | CreateDrainResponseBody1$Outbound
  | CreateDrainResponseBody2$Outbound;

/** @internal */
export const CreateDrainResponseBody$outboundSchema: z.ZodType<
  CreateDrainResponseBody$Outbound,
  z.ZodTypeDef,
  CreateDrainResponseBody
> = z.union([
  z.lazy(() => CreateDrainResponseBody1$outboundSchema),
  z.lazy(() => CreateDrainResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateDrainResponseBody$ {
  /** @deprecated use `CreateDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateDrainResponseBody$inboundSchema;
  /** @deprecated use `CreateDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateDrainResponseBody$outboundSchema;
  /** @deprecated use `CreateDrainResponseBody$Outbound` instead. */
  export type Outbound = CreateDrainResponseBody$Outbound;
}

export function createDrainResponseBodyToJSON(
  createDrainResponseBody: CreateDrainResponseBody,
): string {
  return JSON.stringify(
    CreateDrainResponseBody$outboundSchema.parse(createDrainResponseBody),
  );
}

export function createDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateDrainResponseBody' from JSON`,
  );
}
