/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The delivery log format
 */
export const CreateLogDrainDeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
/**
 * The delivery log format
 */
export type CreateLogDrainDeliveryFormat = ClosedEnum<
  typeof CreateLogDrainDeliveryFormat
>;

export const CreateLogDrainSources = {
  Static: "static",
  Lambda: "lambda",
  Build: "build",
  Edge: "edge",
  External: "external",
  Firewall: "firewall",
} as const;
export type CreateLogDrainSources = ClosedEnum<typeof CreateLogDrainSources>;

export const CreateLogDrainEnvironments = {
  Preview: "preview",
  Production: "production",
} as const;
export type CreateLogDrainEnvironments = ClosedEnum<
  typeof CreateLogDrainEnvironments
>;

export type CreateLogDrainRequestBody = {
  /**
   * The name of the log drain
   */
  name: string;
  projectIds?: Array<string> | undefined;
  /**
   * A secret to sign log drain notification headers so a consumer can verify their authenticity
   */
  secret?: string | undefined;
  /**
   * The delivery log format
   */
  deliveryFormat?: CreateLogDrainDeliveryFormat | undefined;
  /**
   * The url where you will receive logs. The protocol must be `https://` or `http://` when type is `json` and `ndjson`.
   */
  url: string;
  sources?: Array<CreateLogDrainSources> | undefined;
  /**
   * Headers to be sent together with the request
   */
  headers?: { [k: string]: string } | undefined;
  environments?: Array<CreateLogDrainEnvironments> | undefined;
};

export type CreateLogDrainRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody: CreateLogDrainRequestBody;
};

/**
 * The delivery log format
 */
export const CreateLogDrainLogDrainsDeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
  Syslog: "syslog",
  Protobuf: "protobuf",
} as const;
/**
 * The delivery log format
 */
export type CreateLogDrainLogDrainsDeliveryFormat = ClosedEnum<
  typeof CreateLogDrainLogDrainsDeliveryFormat
>;

/**
 * The sources from which logs are currently being delivered to this log drain.
 */
export const CreateLogDrainLogDrainsSources = {
  Build: "build",
  Edge: "edge",
  Lambda: "lambda",
  Static: "static",
  External: "external",
  Firewall: "firewall",
  Redirect: "redirect",
} as const;
/**
 * The sources from which logs are currently being delivered to this log drain.
 */
export type CreateLogDrainLogDrainsSources = ClosedEnum<
  typeof CreateLogDrainLogDrainsSources
>;

/**
 * Whether the log drain was created by an integration or by a user
 */
export const CreateLogDrainCreatedFrom = {
  Integration: "integration",
  SelfServed: "self-served",
} as const;
/**
 * Whether the log drain was created by an integration or by a user
 */
export type CreateLogDrainCreatedFrom = ClosedEnum<
  typeof CreateLogDrainCreatedFrom
>;

/**
 * The environment of log drain
 */
export const CreateLogDrainLogDrainsEnvironments = {
  Production: "production",
  Preview: "preview",
} as const;
/**
 * The environment of log drain
 */
export type CreateLogDrainLogDrainsEnvironments = ClosedEnum<
  typeof CreateLogDrainLogDrainsEnvironments
>;

export const CreateLogDrainSourceLogDrainsKind = {
  Integration: "integration",
} as const;
export type CreateLogDrainSourceLogDrainsKind = ClosedEnum<
  typeof CreateLogDrainSourceLogDrainsKind
>;

export type CreateLogDrainSource2 = {
  kind: CreateLogDrainSourceLogDrainsKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const CreateLogDrainSourceKind = {
  SelfServed: "self-served",
} as const;
export type CreateLogDrainSourceKind = ClosedEnum<
  typeof CreateLogDrainSourceKind
>;

export type CreateLogDrainSource1 = {
  kind: CreateLogDrainSourceKind;
};

export type CreateLogDrainSource =
  | CreateLogDrainSource2
  | CreateLogDrainSource1;

/**
 * The log drain was successfully created
 */
export type CreateLogDrainResponseBody = {
  /**
   * The oauth2 client application id that created this log drain
   */
  clientId?: string | undefined;
  /**
   * The client configuration this log drain was created with
   */
  configurationId?: string | undefined;
  /**
   * A timestamp that tells you when the log drain was created
   */
  createdAt: number;
  /**
   * The unique identifier of the log drain. Always prefixed with `ld_`
   */
  id: string;
  /**
   * The delivery log format
   */
  deliveryFormat?: CreateLogDrainLogDrainsDeliveryFormat | undefined;
  /**
   * The name of the log drain
   */
  name: string;
  /**
   * The identifier of the team or user whose events will trigger the log drain
   */
  ownerId: string;
  projectId?: string | null | undefined;
  /**
   * The identifier of the projects this log drain is associated with
   */
  projectIds?: Array<string> | undefined;
  /**
   * The URL to call when logs are generated
   */
  url: string;
  /**
   * The sources from which logs are currently being delivered to this log drain.
   */
  sources?: Array<CreateLogDrainLogDrainsSources> | undefined;
  /**
   * Whether the log drain was created by an integration or by a user
   */
  createdFrom?: CreateLogDrainCreatedFrom | undefined;
  /**
   * The headers to send with the request
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The environment of log drain
   */
  environments?: Array<CreateLogDrainLogDrainsEnvironments> | undefined;
  /**
   * The branch regexp of log drain
   */
  branch?: string | undefined;
  /**
   * The sampling rate of log drain
   */
  samplingRate?: number | undefined;
  source: CreateLogDrainSource2 | CreateLogDrainSource1;
};

/** @internal */
export const CreateLogDrainDeliveryFormat$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainDeliveryFormat
> = z.nativeEnum(CreateLogDrainDeliveryFormat);

/** @internal */
export const CreateLogDrainDeliveryFormat$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainDeliveryFormat
> = CreateLogDrainDeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainDeliveryFormat$ {
  /** @deprecated use `CreateLogDrainDeliveryFormat$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainDeliveryFormat$inboundSchema;
  /** @deprecated use `CreateLogDrainDeliveryFormat$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainDeliveryFormat$outboundSchema;
}

/** @internal */
export const CreateLogDrainSources$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainSources
> = z.nativeEnum(CreateLogDrainSources);

/** @internal */
export const CreateLogDrainSources$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainSources
> = CreateLogDrainSources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainSources$ {
  /** @deprecated use `CreateLogDrainSources$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainSources$inboundSchema;
  /** @deprecated use `CreateLogDrainSources$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainSources$outboundSchema;
}

/** @internal */
export const CreateLogDrainEnvironments$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainEnvironments
> = z.nativeEnum(CreateLogDrainEnvironments);

/** @internal */
export const CreateLogDrainEnvironments$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainEnvironments
> = CreateLogDrainEnvironments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainEnvironments$ {
  /** @deprecated use `CreateLogDrainEnvironments$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainEnvironments$inboundSchema;
  /** @deprecated use `CreateLogDrainEnvironments$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainEnvironments$outboundSchema;
}

/** @internal */
export const CreateLogDrainRequestBody$inboundSchema: z.ZodType<
  CreateLogDrainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  projectIds: z.array(z.string()).optional(),
  secret: z.string().optional(),
  deliveryFormat: CreateLogDrainDeliveryFormat$inboundSchema.optional(),
  url: z.string(),
  sources: z.array(CreateLogDrainSources$inboundSchema).optional(),
  headers: z.record(z.string()).optional(),
  environments: z.array(CreateLogDrainEnvironments$inboundSchema).optional(),
});

/** @internal */
export type CreateLogDrainRequestBody$Outbound = {
  name: string;
  projectIds?: Array<string> | undefined;
  secret?: string | undefined;
  deliveryFormat?: string | undefined;
  url: string;
  sources?: Array<string> | undefined;
  headers?: { [k: string]: string } | undefined;
  environments?: Array<string> | undefined;
};

/** @internal */
export const CreateLogDrainRequestBody$outboundSchema: z.ZodType<
  CreateLogDrainRequestBody$Outbound,
  z.ZodTypeDef,
  CreateLogDrainRequestBody
> = z.object({
  name: z.string(),
  projectIds: z.array(z.string()).optional(),
  secret: z.string().optional(),
  deliveryFormat: CreateLogDrainDeliveryFormat$outboundSchema.optional(),
  url: z.string(),
  sources: z.array(CreateLogDrainSources$outboundSchema).optional(),
  headers: z.record(z.string()).optional(),
  environments: z.array(CreateLogDrainEnvironments$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainRequestBody$ {
  /** @deprecated use `CreateLogDrainRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainRequestBody$inboundSchema;
  /** @deprecated use `CreateLogDrainRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainRequestBody$outboundSchema;
  /** @deprecated use `CreateLogDrainRequestBody$Outbound` instead. */
  export type Outbound = CreateLogDrainRequestBody$Outbound;
}

export function createLogDrainRequestBodyToJSON(
  createLogDrainRequestBody: CreateLogDrainRequestBody,
): string {
  return JSON.stringify(
    CreateLogDrainRequestBody$outboundSchema.parse(createLogDrainRequestBody),
  );
}

export function createLogDrainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateLogDrainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLogDrainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLogDrainRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateLogDrainRequest$inboundSchema: z.ZodType<
  CreateLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => CreateLogDrainRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateLogDrainRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody: CreateLogDrainRequestBody$Outbound;
};

/** @internal */
export const CreateLogDrainRequest$outboundSchema: z.ZodType<
  CreateLogDrainRequest$Outbound,
  z.ZodTypeDef,
  CreateLogDrainRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => CreateLogDrainRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainRequest$ {
  /** @deprecated use `CreateLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainRequest$inboundSchema;
  /** @deprecated use `CreateLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainRequest$outboundSchema;
  /** @deprecated use `CreateLogDrainRequest$Outbound` instead. */
  export type Outbound = CreateLogDrainRequest$Outbound;
}

export function createLogDrainRequestToJSON(
  createLogDrainRequest: CreateLogDrainRequest,
): string {
  return JSON.stringify(
    CreateLogDrainRequest$outboundSchema.parse(createLogDrainRequest),
  );
}

export function createLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLogDrainRequest' from JSON`,
  );
}

/** @internal */
export const CreateLogDrainLogDrainsDeliveryFormat$inboundSchema:
  z.ZodNativeEnum<typeof CreateLogDrainLogDrainsDeliveryFormat> = z.nativeEnum(
    CreateLogDrainLogDrainsDeliveryFormat,
  );

/** @internal */
export const CreateLogDrainLogDrainsDeliveryFormat$outboundSchema:
  z.ZodNativeEnum<typeof CreateLogDrainLogDrainsDeliveryFormat> =
    CreateLogDrainLogDrainsDeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainLogDrainsDeliveryFormat$ {
  /** @deprecated use `CreateLogDrainLogDrainsDeliveryFormat$inboundSchema` instead. */
  export const inboundSchema =
    CreateLogDrainLogDrainsDeliveryFormat$inboundSchema;
  /** @deprecated use `CreateLogDrainLogDrainsDeliveryFormat$outboundSchema` instead. */
  export const outboundSchema =
    CreateLogDrainLogDrainsDeliveryFormat$outboundSchema;
}

/** @internal */
export const CreateLogDrainLogDrainsSources$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainLogDrainsSources
> = z.nativeEnum(CreateLogDrainLogDrainsSources);

/** @internal */
export const CreateLogDrainLogDrainsSources$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainLogDrainsSources
> = CreateLogDrainLogDrainsSources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainLogDrainsSources$ {
  /** @deprecated use `CreateLogDrainLogDrainsSources$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainLogDrainsSources$inboundSchema;
  /** @deprecated use `CreateLogDrainLogDrainsSources$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainLogDrainsSources$outboundSchema;
}

/** @internal */
export const CreateLogDrainCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainCreatedFrom
> = z.nativeEnum(CreateLogDrainCreatedFrom);

/** @internal */
export const CreateLogDrainCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainCreatedFrom
> = CreateLogDrainCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainCreatedFrom$ {
  /** @deprecated use `CreateLogDrainCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainCreatedFrom$inboundSchema;
  /** @deprecated use `CreateLogDrainCreatedFrom$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainCreatedFrom$outboundSchema;
}

/** @internal */
export const CreateLogDrainLogDrainsEnvironments$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainLogDrainsEnvironments
> = z.nativeEnum(CreateLogDrainLogDrainsEnvironments);

/** @internal */
export const CreateLogDrainLogDrainsEnvironments$outboundSchema:
  z.ZodNativeEnum<typeof CreateLogDrainLogDrainsEnvironments> =
    CreateLogDrainLogDrainsEnvironments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainLogDrainsEnvironments$ {
  /** @deprecated use `CreateLogDrainLogDrainsEnvironments$inboundSchema` instead. */
  export const inboundSchema =
    CreateLogDrainLogDrainsEnvironments$inboundSchema;
  /** @deprecated use `CreateLogDrainLogDrainsEnvironments$outboundSchema` instead. */
  export const outboundSchema =
    CreateLogDrainLogDrainsEnvironments$outboundSchema;
}

/** @internal */
export const CreateLogDrainSourceLogDrainsKind$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainSourceLogDrainsKind
> = z.nativeEnum(CreateLogDrainSourceLogDrainsKind);

/** @internal */
export const CreateLogDrainSourceLogDrainsKind$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainSourceLogDrainsKind
> = CreateLogDrainSourceLogDrainsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainSourceLogDrainsKind$ {
  /** @deprecated use `CreateLogDrainSourceLogDrainsKind$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainSourceLogDrainsKind$inboundSchema;
  /** @deprecated use `CreateLogDrainSourceLogDrainsKind$outboundSchema` instead. */
  export const outboundSchema =
    CreateLogDrainSourceLogDrainsKind$outboundSchema;
}

/** @internal */
export const CreateLogDrainSource2$inboundSchema: z.ZodType<
  CreateLogDrainSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: CreateLogDrainSourceLogDrainsKind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type CreateLogDrainSource2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const CreateLogDrainSource2$outboundSchema: z.ZodType<
  CreateLogDrainSource2$Outbound,
  z.ZodTypeDef,
  CreateLogDrainSource2
> = z.object({
  kind: CreateLogDrainSourceLogDrainsKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainSource2$ {
  /** @deprecated use `CreateLogDrainSource2$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainSource2$inboundSchema;
  /** @deprecated use `CreateLogDrainSource2$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainSource2$outboundSchema;
  /** @deprecated use `CreateLogDrainSource2$Outbound` instead. */
  export type Outbound = CreateLogDrainSource2$Outbound;
}

export function createLogDrainSource2ToJSON(
  createLogDrainSource2: CreateLogDrainSource2,
): string {
  return JSON.stringify(
    CreateLogDrainSource2$outboundSchema.parse(createLogDrainSource2),
  );
}

export function createLogDrainSource2FromJSON(
  jsonString: string,
): SafeParseResult<CreateLogDrainSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLogDrainSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLogDrainSource2' from JSON`,
  );
}

/** @internal */
export const CreateLogDrainSourceKind$inboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainSourceKind
> = z.nativeEnum(CreateLogDrainSourceKind);

/** @internal */
export const CreateLogDrainSourceKind$outboundSchema: z.ZodNativeEnum<
  typeof CreateLogDrainSourceKind
> = CreateLogDrainSourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainSourceKind$ {
  /** @deprecated use `CreateLogDrainSourceKind$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainSourceKind$inboundSchema;
  /** @deprecated use `CreateLogDrainSourceKind$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainSourceKind$outboundSchema;
}

/** @internal */
export const CreateLogDrainSource1$inboundSchema: z.ZodType<
  CreateLogDrainSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: CreateLogDrainSourceKind$inboundSchema,
});

/** @internal */
export type CreateLogDrainSource1$Outbound = {
  kind: string;
};

/** @internal */
export const CreateLogDrainSource1$outboundSchema: z.ZodType<
  CreateLogDrainSource1$Outbound,
  z.ZodTypeDef,
  CreateLogDrainSource1
> = z.object({
  kind: CreateLogDrainSourceKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainSource1$ {
  /** @deprecated use `CreateLogDrainSource1$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainSource1$inboundSchema;
  /** @deprecated use `CreateLogDrainSource1$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainSource1$outboundSchema;
  /** @deprecated use `CreateLogDrainSource1$Outbound` instead. */
  export type Outbound = CreateLogDrainSource1$Outbound;
}

export function createLogDrainSource1ToJSON(
  createLogDrainSource1: CreateLogDrainSource1,
): string {
  return JSON.stringify(
    CreateLogDrainSource1$outboundSchema.parse(createLogDrainSource1),
  );
}

export function createLogDrainSource1FromJSON(
  jsonString: string,
): SafeParseResult<CreateLogDrainSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLogDrainSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLogDrainSource1' from JSON`,
  );
}

/** @internal */
export const CreateLogDrainSource$inboundSchema: z.ZodType<
  CreateLogDrainSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateLogDrainSource2$inboundSchema),
  z.lazy(() => CreateLogDrainSource1$inboundSchema),
]);

/** @internal */
export type CreateLogDrainSource$Outbound =
  | CreateLogDrainSource2$Outbound
  | CreateLogDrainSource1$Outbound;

/** @internal */
export const CreateLogDrainSource$outboundSchema: z.ZodType<
  CreateLogDrainSource$Outbound,
  z.ZodTypeDef,
  CreateLogDrainSource
> = z.union([
  z.lazy(() => CreateLogDrainSource2$outboundSchema),
  z.lazy(() => CreateLogDrainSource1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainSource$ {
  /** @deprecated use `CreateLogDrainSource$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainSource$inboundSchema;
  /** @deprecated use `CreateLogDrainSource$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainSource$outboundSchema;
  /** @deprecated use `CreateLogDrainSource$Outbound` instead. */
  export type Outbound = CreateLogDrainSource$Outbound;
}

export function createLogDrainSourceToJSON(
  createLogDrainSource: CreateLogDrainSource,
): string {
  return JSON.stringify(
    CreateLogDrainSource$outboundSchema.parse(createLogDrainSource),
  );
}

export function createLogDrainSourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateLogDrainSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLogDrainSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLogDrainSource' from JSON`,
  );
}

/** @internal */
export const CreateLogDrainResponseBody$inboundSchema: z.ZodType<
  CreateLogDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  createdAt: z.number(),
  id: z.string(),
  deliveryFormat: CreateLogDrainLogDrainsDeliveryFormat$inboundSchema
    .optional(),
  name: z.string(),
  ownerId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  url: z.string(),
  sources: z.array(CreateLogDrainLogDrainsSources$inboundSchema).optional(),
  createdFrom: CreateLogDrainCreatedFrom$inboundSchema.optional(),
  headers: z.record(z.string()).optional(),
  environments: z.array(CreateLogDrainLogDrainsEnvironments$inboundSchema)
    .optional(),
  branch: z.string().optional(),
  samplingRate: z.number().optional(),
  source: z.union([
    z.lazy(() => CreateLogDrainSource2$inboundSchema),
    z.lazy(() => CreateLogDrainSource1$inboundSchema),
  ]),
});

/** @internal */
export type CreateLogDrainResponseBody$Outbound = {
  clientId?: string | undefined;
  configurationId?: string | undefined;
  createdAt: number;
  id: string;
  deliveryFormat?: string | undefined;
  name: string;
  ownerId: string;
  projectId?: string | null | undefined;
  projectIds?: Array<string> | undefined;
  url: string;
  sources?: Array<string> | undefined;
  createdFrom?: string | undefined;
  headers?: { [k: string]: string } | undefined;
  environments?: Array<string> | undefined;
  branch?: string | undefined;
  samplingRate?: number | undefined;
  source: CreateLogDrainSource2$Outbound | CreateLogDrainSource1$Outbound;
};

/** @internal */
export const CreateLogDrainResponseBody$outboundSchema: z.ZodType<
  CreateLogDrainResponseBody$Outbound,
  z.ZodTypeDef,
  CreateLogDrainResponseBody
> = z.object({
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  createdAt: z.number(),
  id: z.string(),
  deliveryFormat: CreateLogDrainLogDrainsDeliveryFormat$outboundSchema
    .optional(),
  name: z.string(),
  ownerId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  url: z.string(),
  sources: z.array(CreateLogDrainLogDrainsSources$outboundSchema).optional(),
  createdFrom: CreateLogDrainCreatedFrom$outboundSchema.optional(),
  headers: z.record(z.string()).optional(),
  environments: z.array(CreateLogDrainLogDrainsEnvironments$outboundSchema)
    .optional(),
  branch: z.string().optional(),
  samplingRate: z.number().optional(),
  source: z.union([
    z.lazy(() => CreateLogDrainSource2$outboundSchema),
    z.lazy(() => CreateLogDrainSource1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateLogDrainResponseBody$ {
  /** @deprecated use `CreateLogDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateLogDrainResponseBody$inboundSchema;
  /** @deprecated use `CreateLogDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema = CreateLogDrainResponseBody$outboundSchema;
  /** @deprecated use `CreateLogDrainResponseBody$Outbound` instead. */
  export type Outbound = CreateLogDrainResponseBody$Outbound;
}

export function createLogDrainResponseBodyToJSON(
  createLogDrainResponseBody: CreateLogDrainResponseBody,
): string {
  return JSON.stringify(
    CreateLogDrainResponseBody$outboundSchema.parse(createLogDrainResponseBody),
  );
}

export function createLogDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateLogDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateLogDrainResponseBody' from JSON`,
  );
}
