/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type RequestBodyEvs = {
  /**
   * The name of the Shared Environment Variable
   */
  key: string;
  /**
   * The value of the Shared Environment Variable
   */
  value: string;
  /**
   * A comment to add context on what this Shared Environment Variable is for
   */
  comment?: string | undefined;
};

/**
 * The type of environment variable
 */
export const CreateSharedEnvVariableRequestBodyEnvironmentType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
} as const;
/**
 * The type of environment variable
 */
export type CreateSharedEnvVariableRequestBodyEnvironmentType = ClosedEnum<
  typeof CreateSharedEnvVariableRequestBodyEnvironmentType
>;

export const CreateSharedEnvVariableRequestBodyTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type CreateSharedEnvVariableRequestBodyTarget = ClosedEnum<
  typeof CreateSharedEnvVariableRequestBodyTarget
>;

export type CreateSharedEnvVariableRequestBody2 = {
  evs: Array<RequestBodyEvs>;
  /**
   * The type of environment variable
   */
  type?: CreateSharedEnvVariableRequestBodyEnvironmentType | undefined;
  /**
   * The target environment of the Shared Environment Variable
   */
  target?: Array<CreateSharedEnvVariableRequestBodyTarget> | undefined;
  /**
   * Associate a Shared Environment Variable to projects.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  projectId?: Array<string> | undefined;
};

export type Evs = {
  /**
   * The name of the Shared Environment Variable
   */
  key: string;
  /**
   * The value of the Shared Environment Variable
   */
  value: string;
  /**
   * A comment to add context on what this Shared Environment Variable is for
   */
  comment?: string | undefined;
};

/**
 * The type of environment variable
 */
export const CreateSharedEnvVariableRequestBodyType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
} as const;
/**
 * The type of environment variable
 */
export type CreateSharedEnvVariableRequestBodyType = ClosedEnum<
  typeof CreateSharedEnvVariableRequestBodyType
>;

export const RequestBodyTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type RequestBodyTarget = ClosedEnum<typeof RequestBodyTarget>;

export type CreateSharedEnvVariableRequestBody1 = {
  evs: Array<Evs>;
  /**
   * The type of environment variable
   */
  type?: CreateSharedEnvVariableRequestBodyType | undefined;
  /**
   * The target environment of the Shared Environment Variable
   */
  target: Array<RequestBodyTarget>;
  /**
   * Associate a Shared Environment Variable to projects.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  projectId?: Array<string> | undefined;
};

export type CreateSharedEnvVariableRequestBody =
  | CreateSharedEnvVariableRequestBody1
  | CreateSharedEnvVariableRequestBody2;

export type CreateSharedEnvVariableRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?:
    | CreateSharedEnvVariableRequestBody1
    | CreateSharedEnvVariableRequestBody2
    | undefined;
};

/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const CreateSharedEnvVariableType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
  System: "system",
  Plain: "plain",
} as const;
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type CreateSharedEnvVariableType = ClosedEnum<
  typeof CreateSharedEnvVariableType
>;

/**
 * environments this env variable targets
 */
export const CreateSharedEnvVariableTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
/**
 * environments this env variable targets
 */
export type CreateSharedEnvVariableTarget = ClosedEnum<
  typeof CreateSharedEnvVariableTarget
>;

export type Created = {
  /**
   * The date when the Shared Env Var was created.
   */
  created?: Date | undefined;
  /**
   * The name of the Shared Env Var.
   */
  key?: string | undefined;
  /**
   * The unique identifier of the owner (team) the Shared Env Var was created for.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the Shared Env Var.
   */
  id?: string | undefined;
  /**
   * The unique identifier of the user who created the Shared Env Var.
   */
  createdBy?: string | null | undefined;
  /**
   * The unique identifier of the user who deleted the Shared Env Var.
   */
  deletedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who last updated the Shared Env Var.
   */
  updatedBy?: string | null | undefined;
  /**
   * Timestamp for when the Shared Env Var was created.
   */
  createdAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was (soft) deleted.
   */
  deletedAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was last updated.
   */
  updatedAt?: number | undefined;
  /**
   * The value of the Shared Env Var.
   */
  value?: string | undefined;
  /**
   * The unique identifiers of the projects which the Shared Env Var is linked to.
   */
  projectId?: Array<string> | undefined;
  /**
   * The type of this cosmos doc instance, if blank, assume secret.
   */
  type?: CreateSharedEnvVariableType | undefined;
  /**
   * environments this env variable targets
   */
  target?: Array<CreateSharedEnvVariableTarget> | undefined;
  /**
   * whether or not this env varible applies to custom environments
   */
  applyToAllCustomEnvironments?: boolean | undefined;
  /**
   * whether or not this env variable is decrypted
   */
  decrypted?: boolean | undefined;
  /**
   * A user provided comment that describes what this Shared Env Var is for.
   */
  comment?: string | undefined;
  /**
   * The last editor full name or username.
   */
  lastEditedByDisplayName?: string | undefined;
};

export const Value2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type Value2 = ClosedEnum<typeof Value2>;

export type CreateSharedEnvVariableValue = string | Array<Value2>;

export const CreateSharedEnvVariableTarget2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type CreateSharedEnvVariableTarget2 = ClosedEnum<
  typeof CreateSharedEnvVariableTarget2
>;

export const CreateSharedEnvVariableTarget1 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type CreateSharedEnvVariableTarget1 = ClosedEnum<
  typeof CreateSharedEnvVariableTarget1
>;

export type CreateSharedEnvVariableEnvironmentTarget =
  | Array<CreateSharedEnvVariableTarget1>
  | CreateSharedEnvVariableTarget2;

export type CreateSharedEnvVariableError = {
  code: string;
  message: string;
  key?: string | undefined;
  envVarId?: string | undefined;
  envVarKey?: string | undefined;
  action?: string | undefined;
  link?: string | undefined;
  value?: string | Array<Value2> | undefined;
  gitBranch?: string | undefined;
  target?:
    | Array<CreateSharedEnvVariableTarget1>
    | CreateSharedEnvVariableTarget2
    | undefined;
  project?: string | undefined;
};

export type Failed = {
  error: CreateSharedEnvVariableError;
};

export type CreateSharedEnvVariableResponseBody = {
  created: Array<Created>;
  failed: Array<Failed>;
};

/** @internal */
export const RequestBodyEvs$inboundSchema: z.ZodType<
  RequestBodyEvs,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string(),
  value: z.string(),
  comment: z.string().optional(),
});

/** @internal */
export type RequestBodyEvs$Outbound = {
  key: string;
  value: string;
  comment?: string | undefined;
};

/** @internal */
export const RequestBodyEvs$outboundSchema: z.ZodType<
  RequestBodyEvs$Outbound,
  z.ZodTypeDef,
  RequestBodyEvs
> = z.object({
  key: z.string(),
  value: z.string(),
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyEvs$ {
  /** @deprecated use `RequestBodyEvs$inboundSchema` instead. */
  export const inboundSchema = RequestBodyEvs$inboundSchema;
  /** @deprecated use `RequestBodyEvs$outboundSchema` instead. */
  export const outboundSchema = RequestBodyEvs$outboundSchema;
  /** @deprecated use `RequestBodyEvs$Outbound` instead. */
  export type Outbound = RequestBodyEvs$Outbound;
}

export function requestBodyEvsToJSON(requestBodyEvs: RequestBodyEvs): string {
  return JSON.stringify(RequestBodyEvs$outboundSchema.parse(requestBodyEvs));
}

export function requestBodyEvsFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyEvs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyEvs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyEvs' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableRequestBodyEnvironmentType$inboundSchema:
  z.ZodNativeEnum<typeof CreateSharedEnvVariableRequestBodyEnvironmentType> = z
    .nativeEnum(CreateSharedEnvVariableRequestBodyEnvironmentType);

/** @internal */
export const CreateSharedEnvVariableRequestBodyEnvironmentType$outboundSchema:
  z.ZodNativeEnum<typeof CreateSharedEnvVariableRequestBodyEnvironmentType> =
    CreateSharedEnvVariableRequestBodyEnvironmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequestBodyEnvironmentType$ {
  /** @deprecated use `CreateSharedEnvVariableRequestBodyEnvironmentType$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableRequestBodyEnvironmentType$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBodyEnvironmentType$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableRequestBodyEnvironmentType$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableRequestBodyTarget$inboundSchema:
  z.ZodNativeEnum<typeof CreateSharedEnvVariableRequestBodyTarget> = z
    .nativeEnum(CreateSharedEnvVariableRequestBodyTarget);

/** @internal */
export const CreateSharedEnvVariableRequestBodyTarget$outboundSchema:
  z.ZodNativeEnum<typeof CreateSharedEnvVariableRequestBodyTarget> =
    CreateSharedEnvVariableRequestBodyTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequestBodyTarget$ {
  /** @deprecated use `CreateSharedEnvVariableRequestBodyTarget$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableRequestBodyTarget$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBodyTarget$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableRequestBodyTarget$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableRequestBody2$inboundSchema: z.ZodType<
  CreateSharedEnvVariableRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  evs: z.array(z.lazy(() => RequestBodyEvs$inboundSchema)),
  type: CreateSharedEnvVariableRequestBodyEnvironmentType$inboundSchema
    .optional(),
  target: z.array(CreateSharedEnvVariableRequestBodyTarget$inboundSchema)
    .optional(),
  projectId: z.array(z.string()).optional(),
});

/** @internal */
export type CreateSharedEnvVariableRequestBody2$Outbound = {
  evs: Array<RequestBodyEvs$Outbound>;
  type?: string | undefined;
  target?: Array<string> | undefined;
  projectId?: Array<string> | undefined;
};

/** @internal */
export const CreateSharedEnvVariableRequestBody2$outboundSchema: z.ZodType<
  CreateSharedEnvVariableRequestBody2$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableRequestBody2
> = z.object({
  evs: z.array(z.lazy(() => RequestBodyEvs$outboundSchema)),
  type: CreateSharedEnvVariableRequestBodyEnvironmentType$outboundSchema
    .optional(),
  target: z.array(CreateSharedEnvVariableRequestBodyTarget$outboundSchema)
    .optional(),
  projectId: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequestBody2$ {
  /** @deprecated use `CreateSharedEnvVariableRequestBody2$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableRequestBody2$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBody2$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableRequestBody2$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBody2$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableRequestBody2$Outbound;
}

export function createSharedEnvVariableRequestBody2ToJSON(
  createSharedEnvVariableRequestBody2: CreateSharedEnvVariableRequestBody2,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableRequestBody2$outboundSchema.parse(
      createSharedEnvVariableRequestBody2,
    ),
  );
}

export function createSharedEnvVariableRequestBody2FromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableRequestBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSharedEnvVariableRequestBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableRequestBody2' from JSON`,
  );
}

/** @internal */
export const Evs$inboundSchema: z.ZodType<Evs, z.ZodTypeDef, unknown> = z
  .object({
    key: z.string(),
    value: z.string(),
    comment: z.string().optional(),
  });

/** @internal */
export type Evs$Outbound = {
  key: string;
  value: string;
  comment?: string | undefined;
};

/** @internal */
export const Evs$outboundSchema: z.ZodType<Evs$Outbound, z.ZodTypeDef, Evs> = z
  .object({
    key: z.string(),
    value: z.string(),
    comment: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Evs$ {
  /** @deprecated use `Evs$inboundSchema` instead. */
  export const inboundSchema = Evs$inboundSchema;
  /** @deprecated use `Evs$outboundSchema` instead. */
  export const outboundSchema = Evs$outboundSchema;
  /** @deprecated use `Evs$Outbound` instead. */
  export type Outbound = Evs$Outbound;
}

export function evsToJSON(evs: Evs): string {
  return JSON.stringify(Evs$outboundSchema.parse(evs));
}

export function evsFromJSON(
  jsonString: string,
): SafeParseResult<Evs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Evs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Evs' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableRequestBodyType$inboundSchema:
  z.ZodNativeEnum<typeof CreateSharedEnvVariableRequestBodyType> = z.nativeEnum(
    CreateSharedEnvVariableRequestBodyType,
  );

/** @internal */
export const CreateSharedEnvVariableRequestBodyType$outboundSchema:
  z.ZodNativeEnum<typeof CreateSharedEnvVariableRequestBodyType> =
    CreateSharedEnvVariableRequestBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequestBodyType$ {
  /** @deprecated use `CreateSharedEnvVariableRequestBodyType$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableRequestBodyType$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBodyType$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableRequestBodyType$outboundSchema;
}

/** @internal */
export const RequestBodyTarget$inboundSchema: z.ZodNativeEnum<
  typeof RequestBodyTarget
> = z.nativeEnum(RequestBodyTarget);

/** @internal */
export const RequestBodyTarget$outboundSchema: z.ZodNativeEnum<
  typeof RequestBodyTarget
> = RequestBodyTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyTarget$ {
  /** @deprecated use `RequestBodyTarget$inboundSchema` instead. */
  export const inboundSchema = RequestBodyTarget$inboundSchema;
  /** @deprecated use `RequestBodyTarget$outboundSchema` instead. */
  export const outboundSchema = RequestBodyTarget$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableRequestBody1$inboundSchema: z.ZodType<
  CreateSharedEnvVariableRequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  evs: z.array(z.lazy(() => Evs$inboundSchema)),
  type: CreateSharedEnvVariableRequestBodyType$inboundSchema.optional(),
  target: z.array(RequestBodyTarget$inboundSchema),
  projectId: z.array(z.string()).optional(),
});

/** @internal */
export type CreateSharedEnvVariableRequestBody1$Outbound = {
  evs: Array<Evs$Outbound>;
  type?: string | undefined;
  target: Array<string>;
  projectId?: Array<string> | undefined;
};

/** @internal */
export const CreateSharedEnvVariableRequestBody1$outboundSchema: z.ZodType<
  CreateSharedEnvVariableRequestBody1$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableRequestBody1
> = z.object({
  evs: z.array(z.lazy(() => Evs$outboundSchema)),
  type: CreateSharedEnvVariableRequestBodyType$outboundSchema.optional(),
  target: z.array(RequestBodyTarget$outboundSchema),
  projectId: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequestBody1$ {
  /** @deprecated use `CreateSharedEnvVariableRequestBody1$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableRequestBody1$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBody1$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableRequestBody1$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBody1$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableRequestBody1$Outbound;
}

export function createSharedEnvVariableRequestBody1ToJSON(
  createSharedEnvVariableRequestBody1: CreateSharedEnvVariableRequestBody1,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableRequestBody1$outboundSchema.parse(
      createSharedEnvVariableRequestBody1,
    ),
  );
}

export function createSharedEnvVariableRequestBody1FromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableRequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSharedEnvVariableRequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableRequestBody1' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableRequestBody$inboundSchema: z.ZodType<
  CreateSharedEnvVariableRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CreateSharedEnvVariableRequestBody1$inboundSchema),
  z.lazy(() => CreateSharedEnvVariableRequestBody2$inboundSchema),
]);

/** @internal */
export type CreateSharedEnvVariableRequestBody$Outbound =
  | CreateSharedEnvVariableRequestBody1$Outbound
  | CreateSharedEnvVariableRequestBody2$Outbound;

/** @internal */
export const CreateSharedEnvVariableRequestBody$outboundSchema: z.ZodType<
  CreateSharedEnvVariableRequestBody$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableRequestBody
> = z.union([
  z.lazy(() => CreateSharedEnvVariableRequestBody1$outboundSchema),
  z.lazy(() => CreateSharedEnvVariableRequestBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequestBody$ {
  /** @deprecated use `CreateSharedEnvVariableRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableRequestBody$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableRequestBody$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequestBody$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableRequestBody$Outbound;
}

export function createSharedEnvVariableRequestBodyToJSON(
  createSharedEnvVariableRequestBody: CreateSharedEnvVariableRequestBody,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableRequestBody$outboundSchema.parse(
      createSharedEnvVariableRequestBody,
    ),
  );
}

export function createSharedEnvVariableRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSharedEnvVariableRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableRequest$inboundSchema: z.ZodType<
  CreateSharedEnvVariableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.union([
    z.lazy(() => CreateSharedEnvVariableRequestBody1$inboundSchema),
    z.lazy(() => CreateSharedEnvVariableRequestBody2$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateSharedEnvVariableRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?:
    | CreateSharedEnvVariableRequestBody1$Outbound
    | CreateSharedEnvVariableRequestBody2$Outbound
    | undefined;
};

/** @internal */
export const CreateSharedEnvVariableRequest$outboundSchema: z.ZodType<
  CreateSharedEnvVariableRequest$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.union([
    z.lazy(() => CreateSharedEnvVariableRequestBody1$outboundSchema),
    z.lazy(() => CreateSharedEnvVariableRequestBody2$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableRequest$ {
  /** @deprecated use `CreateSharedEnvVariableRequest$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableRequest$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequest$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableRequest$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableRequest$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableRequest$Outbound;
}

export function createSharedEnvVariableRequestToJSON(
  createSharedEnvVariableRequest: CreateSharedEnvVariableRequest,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableRequest$outboundSchema.parse(
      createSharedEnvVariableRequest,
    ),
  );
}

export function createSharedEnvVariableRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSharedEnvVariableRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableRequest' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableType$inboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableType
> = z.nativeEnum(CreateSharedEnvVariableType);

/** @internal */
export const CreateSharedEnvVariableType$outboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableType
> = CreateSharedEnvVariableType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableType$ {
  /** @deprecated use `CreateSharedEnvVariableType$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableType$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableType$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableType$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableTarget$inboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableTarget
> = z.nativeEnum(CreateSharedEnvVariableTarget);

/** @internal */
export const CreateSharedEnvVariableTarget$outboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableTarget
> = CreateSharedEnvVariableTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableTarget$ {
  /** @deprecated use `CreateSharedEnvVariableTarget$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableTarget$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableTarget$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableTarget$outboundSchema;
}

/** @internal */
export const Created$inboundSchema: z.ZodType<Created, z.ZodTypeDef, unknown> =
  z.object({
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: CreateSharedEnvVariableType$inboundSchema.optional(),
    target: z.array(CreateSharedEnvVariableTarget$inboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
  });

/** @internal */
export type Created$Outbound = {
  created?: string | undefined;
  key?: string | undefined;
  ownerId?: string | null | undefined;
  id?: string | undefined;
  createdBy?: string | null | undefined;
  deletedBy?: string | null | undefined;
  updatedBy?: string | null | undefined;
  createdAt?: number | undefined;
  deletedAt?: number | undefined;
  updatedAt?: number | undefined;
  value?: string | undefined;
  projectId?: Array<string> | undefined;
  type?: string | undefined;
  target?: Array<string> | undefined;
  applyToAllCustomEnvironments?: boolean | undefined;
  decrypted?: boolean | undefined;
  comment?: string | undefined;
  lastEditedByDisplayName?: string | undefined;
};

/** @internal */
export const Created$outboundSchema: z.ZodType<
  Created$Outbound,
  z.ZodTypeDef,
  Created
> = z.object({
  created: z.date().transform(v => v.toISOString()).optional(),
  key: z.string().optional(),
  ownerId: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  createdBy: z.nullable(z.string()).optional(),
  deletedBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  deletedAt: z.number().optional(),
  updatedAt: z.number().optional(),
  value: z.string().optional(),
  projectId: z.array(z.string()).optional(),
  type: CreateSharedEnvVariableType$outboundSchema.optional(),
  target: z.array(CreateSharedEnvVariableTarget$outboundSchema).optional(),
  applyToAllCustomEnvironments: z.boolean().optional(),
  decrypted: z.boolean().optional(),
  comment: z.string().optional(),
  lastEditedByDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Created$ {
  /** @deprecated use `Created$inboundSchema` instead. */
  export const inboundSchema = Created$inboundSchema;
  /** @deprecated use `Created$outboundSchema` instead. */
  export const outboundSchema = Created$outboundSchema;
  /** @deprecated use `Created$Outbound` instead. */
  export type Outbound = Created$Outbound;
}

export function createdToJSON(created: Created): string {
  return JSON.stringify(Created$outboundSchema.parse(created));
}

export function createdFromJSON(
  jsonString: string,
): SafeParseResult<Created, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Created$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Created' from JSON`,
  );
}

/** @internal */
export const Value2$inboundSchema: z.ZodNativeEnum<typeof Value2> = z
  .nativeEnum(Value2);

/** @internal */
export const Value2$outboundSchema: z.ZodNativeEnum<typeof Value2> =
  Value2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value2$ {
  /** @deprecated use `Value2$inboundSchema` instead. */
  export const inboundSchema = Value2$inboundSchema;
  /** @deprecated use `Value2$outboundSchema` instead. */
  export const outboundSchema = Value2$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableValue$inboundSchema: z.ZodType<
  CreateSharedEnvVariableValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(Value2$inboundSchema)]);

/** @internal */
export type CreateSharedEnvVariableValue$Outbound = string | Array<string>;

/** @internal */
export const CreateSharedEnvVariableValue$outboundSchema: z.ZodType<
  CreateSharedEnvVariableValue$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableValue
> = z.union([z.string(), z.array(Value2$outboundSchema)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableValue$ {
  /** @deprecated use `CreateSharedEnvVariableValue$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableValue$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableValue$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableValue$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableValue$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableValue$Outbound;
}

export function createSharedEnvVariableValueToJSON(
  createSharedEnvVariableValue: CreateSharedEnvVariableValue,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableValue$outboundSchema.parse(
      createSharedEnvVariableValue,
    ),
  );
}

export function createSharedEnvVariableValueFromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSharedEnvVariableValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableValue' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableTarget2$inboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableTarget2
> = z.nativeEnum(CreateSharedEnvVariableTarget2);

/** @internal */
export const CreateSharedEnvVariableTarget2$outboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableTarget2
> = CreateSharedEnvVariableTarget2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableTarget2$ {
  /** @deprecated use `CreateSharedEnvVariableTarget2$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableTarget2$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableTarget2$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableTarget2$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableTarget1$inboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableTarget1
> = z.nativeEnum(CreateSharedEnvVariableTarget1);

/** @internal */
export const CreateSharedEnvVariableTarget1$outboundSchema: z.ZodNativeEnum<
  typeof CreateSharedEnvVariableTarget1
> = CreateSharedEnvVariableTarget1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableTarget1$ {
  /** @deprecated use `CreateSharedEnvVariableTarget1$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableTarget1$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableTarget1$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableTarget1$outboundSchema;
}

/** @internal */
export const CreateSharedEnvVariableEnvironmentTarget$inboundSchema: z.ZodType<
  CreateSharedEnvVariableEnvironmentTarget,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(CreateSharedEnvVariableTarget1$inboundSchema),
  CreateSharedEnvVariableTarget2$inboundSchema,
]);

/** @internal */
export type CreateSharedEnvVariableEnvironmentTarget$Outbound =
  | Array<string>
  | string;

/** @internal */
export const CreateSharedEnvVariableEnvironmentTarget$outboundSchema: z.ZodType<
  CreateSharedEnvVariableEnvironmentTarget$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableEnvironmentTarget
> = z.union([
  z.array(CreateSharedEnvVariableTarget1$outboundSchema),
  CreateSharedEnvVariableTarget2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableEnvironmentTarget$ {
  /** @deprecated use `CreateSharedEnvVariableEnvironmentTarget$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableEnvironmentTarget$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableEnvironmentTarget$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableEnvironmentTarget$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableEnvironmentTarget$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableEnvironmentTarget$Outbound;
}

export function createSharedEnvVariableEnvironmentTargetToJSON(
  createSharedEnvVariableEnvironmentTarget:
    CreateSharedEnvVariableEnvironmentTarget,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableEnvironmentTarget$outboundSchema.parse(
      createSharedEnvVariableEnvironmentTarget,
    ),
  );
}

export function createSharedEnvVariableEnvironmentTargetFromJSON(
  jsonString: string,
): SafeParseResult<
  CreateSharedEnvVariableEnvironmentTarget,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSharedEnvVariableEnvironmentTarget$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CreateSharedEnvVariableEnvironmentTarget' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableError$inboundSchema: z.ZodType<
  CreateSharedEnvVariableError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  key: z.string().optional(),
  envVarId: z.string().optional(),
  envVarKey: z.string().optional(),
  action: z.string().optional(),
  link: z.string().optional(),
  value: z.union([z.string(), z.array(Value2$inboundSchema)]).optional(),
  gitBranch: z.string().optional(),
  target: z.union([
    z.array(CreateSharedEnvVariableTarget1$inboundSchema),
    CreateSharedEnvVariableTarget2$inboundSchema,
  ]).optional(),
  project: z.string().optional(),
});

/** @internal */
export type CreateSharedEnvVariableError$Outbound = {
  code: string;
  message: string;
  key?: string | undefined;
  envVarId?: string | undefined;
  envVarKey?: string | undefined;
  action?: string | undefined;
  link?: string | undefined;
  value?: string | Array<string> | undefined;
  gitBranch?: string | undefined;
  target?: Array<string> | string | undefined;
  project?: string | undefined;
};

/** @internal */
export const CreateSharedEnvVariableError$outboundSchema: z.ZodType<
  CreateSharedEnvVariableError$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableError
> = z.object({
  code: z.string(),
  message: z.string(),
  key: z.string().optional(),
  envVarId: z.string().optional(),
  envVarKey: z.string().optional(),
  action: z.string().optional(),
  link: z.string().optional(),
  value: z.union([z.string(), z.array(Value2$outboundSchema)]).optional(),
  gitBranch: z.string().optional(),
  target: z.union([
    z.array(CreateSharedEnvVariableTarget1$outboundSchema),
    CreateSharedEnvVariableTarget2$outboundSchema,
  ]).optional(),
  project: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableError$ {
  /** @deprecated use `CreateSharedEnvVariableError$inboundSchema` instead. */
  export const inboundSchema = CreateSharedEnvVariableError$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableError$outboundSchema` instead. */
  export const outboundSchema = CreateSharedEnvVariableError$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableError$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableError$Outbound;
}

export function createSharedEnvVariableErrorToJSON(
  createSharedEnvVariableError: CreateSharedEnvVariableError,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableError$outboundSchema.parse(
      createSharedEnvVariableError,
    ),
  );
}

export function createSharedEnvVariableErrorFromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSharedEnvVariableError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableError' from JSON`,
  );
}

/** @internal */
export const Failed$inboundSchema: z.ZodType<Failed, z.ZodTypeDef, unknown> = z
  .object({
    error: z.lazy(() => CreateSharedEnvVariableError$inboundSchema),
  });

/** @internal */
export type Failed$Outbound = {
  error: CreateSharedEnvVariableError$Outbound;
};

/** @internal */
export const Failed$outboundSchema: z.ZodType<
  Failed$Outbound,
  z.ZodTypeDef,
  Failed
> = z.object({
  error: z.lazy(() => CreateSharedEnvVariableError$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Failed$ {
  /** @deprecated use `Failed$inboundSchema` instead. */
  export const inboundSchema = Failed$inboundSchema;
  /** @deprecated use `Failed$outboundSchema` instead. */
  export const outboundSchema = Failed$outboundSchema;
  /** @deprecated use `Failed$Outbound` instead. */
  export type Outbound = Failed$Outbound;
}

export function failedToJSON(failed: Failed): string {
  return JSON.stringify(Failed$outboundSchema.parse(failed));
}

export function failedFromJSON(
  jsonString: string,
): SafeParseResult<Failed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Failed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Failed' from JSON`,
  );
}

/** @internal */
export const CreateSharedEnvVariableResponseBody$inboundSchema: z.ZodType<
  CreateSharedEnvVariableResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.array(z.lazy(() => Created$inboundSchema)),
  failed: z.array(z.lazy(() => Failed$inboundSchema)),
});

/** @internal */
export type CreateSharedEnvVariableResponseBody$Outbound = {
  created: Array<Created$Outbound>;
  failed: Array<Failed$Outbound>;
};

/** @internal */
export const CreateSharedEnvVariableResponseBody$outboundSchema: z.ZodType<
  CreateSharedEnvVariableResponseBody$Outbound,
  z.ZodTypeDef,
  CreateSharedEnvVariableResponseBody
> = z.object({
  created: z.array(z.lazy(() => Created$outboundSchema)),
  failed: z.array(z.lazy(() => Failed$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSharedEnvVariableResponseBody$ {
  /** @deprecated use `CreateSharedEnvVariableResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    CreateSharedEnvVariableResponseBody$inboundSchema;
  /** @deprecated use `CreateSharedEnvVariableResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateSharedEnvVariableResponseBody$outboundSchema;
  /** @deprecated use `CreateSharedEnvVariableResponseBody$Outbound` instead. */
  export type Outbound = CreateSharedEnvVariableResponseBody$Outbound;
}

export function createSharedEnvVariableResponseBodyToJSON(
  createSharedEnvVariableResponseBody: CreateSharedEnvVariableResponseBody,
): string {
  return JSON.stringify(
    CreateSharedEnvVariableResponseBody$outboundSchema.parse(
      createSharedEnvVariableResponseBody,
    ),
  );
}

export function createSharedEnvVariableResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateSharedEnvVariableResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateSharedEnvVariableResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSharedEnvVariableResponseBody' from JSON`,
  );
}
