/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DangerouslyDeleteByTagsTags = Array<string> | string;

export const DangerouslyDeleteByTagsTarget = {
  Production: "production",
  Preview: "preview",
} as const;
export type DangerouslyDeleteByTagsTarget = ClosedEnum<
  typeof DangerouslyDeleteByTagsTarget
>;

export type DangerouslyDeleteByTagsRequestBody = {
  revalidationDeadlineSeconds?: number | undefined;
  tags: Array<string> | string;
  target?: DangerouslyDeleteByTagsTarget | undefined;
};

export type DangerouslyDeleteByTagsRequest = {
  projectIdOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: DangerouslyDeleteByTagsRequestBody | undefined;
};

/** @internal */
export const DangerouslyDeleteByTagsTags$inboundSchema: z.ZodType<
  DangerouslyDeleteByTagsTags,
  z.ZodTypeDef,
  unknown
> = z.union([z.array(z.string()), z.string()]);

/** @internal */
export type DangerouslyDeleteByTagsTags$Outbound = Array<string> | string;

/** @internal */
export const DangerouslyDeleteByTagsTags$outboundSchema: z.ZodType<
  DangerouslyDeleteByTagsTags$Outbound,
  z.ZodTypeDef,
  DangerouslyDeleteByTagsTags
> = z.union([z.array(z.string()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DangerouslyDeleteByTagsTags$ {
  /** @deprecated use `DangerouslyDeleteByTagsTags$inboundSchema` instead. */
  export const inboundSchema = DangerouslyDeleteByTagsTags$inboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsTags$outboundSchema` instead. */
  export const outboundSchema = DangerouslyDeleteByTagsTags$outboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsTags$Outbound` instead. */
  export type Outbound = DangerouslyDeleteByTagsTags$Outbound;
}

export function dangerouslyDeleteByTagsTagsToJSON(
  dangerouslyDeleteByTagsTags: DangerouslyDeleteByTagsTags,
): string {
  return JSON.stringify(
    DangerouslyDeleteByTagsTags$outboundSchema.parse(
      dangerouslyDeleteByTagsTags,
    ),
  );
}

export function dangerouslyDeleteByTagsTagsFromJSON(
  jsonString: string,
): SafeParseResult<DangerouslyDeleteByTagsTags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DangerouslyDeleteByTagsTags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DangerouslyDeleteByTagsTags' from JSON`,
  );
}

/** @internal */
export const DangerouslyDeleteByTagsTarget$inboundSchema: z.ZodNativeEnum<
  typeof DangerouslyDeleteByTagsTarget
> = z.nativeEnum(DangerouslyDeleteByTagsTarget);

/** @internal */
export const DangerouslyDeleteByTagsTarget$outboundSchema: z.ZodNativeEnum<
  typeof DangerouslyDeleteByTagsTarget
> = DangerouslyDeleteByTagsTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DangerouslyDeleteByTagsTarget$ {
  /** @deprecated use `DangerouslyDeleteByTagsTarget$inboundSchema` instead. */
  export const inboundSchema = DangerouslyDeleteByTagsTarget$inboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsTarget$outboundSchema` instead. */
  export const outboundSchema = DangerouslyDeleteByTagsTarget$outboundSchema;
}

/** @internal */
export const DangerouslyDeleteByTagsRequestBody$inboundSchema: z.ZodType<
  DangerouslyDeleteByTagsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  revalidationDeadlineSeconds: z.number().optional(),
  tags: z.union([z.array(z.string()), z.string()]),
  target: DangerouslyDeleteByTagsTarget$inboundSchema.optional(),
});

/** @internal */
export type DangerouslyDeleteByTagsRequestBody$Outbound = {
  revalidationDeadlineSeconds?: number | undefined;
  tags: Array<string> | string;
  target?: string | undefined;
};

/** @internal */
export const DangerouslyDeleteByTagsRequestBody$outboundSchema: z.ZodType<
  DangerouslyDeleteByTagsRequestBody$Outbound,
  z.ZodTypeDef,
  DangerouslyDeleteByTagsRequestBody
> = z.object({
  revalidationDeadlineSeconds: z.number().optional(),
  tags: z.union([z.array(z.string()), z.string()]),
  target: DangerouslyDeleteByTagsTarget$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DangerouslyDeleteByTagsRequestBody$ {
  /** @deprecated use `DangerouslyDeleteByTagsRequestBody$inboundSchema` instead. */
  export const inboundSchema = DangerouslyDeleteByTagsRequestBody$inboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DangerouslyDeleteByTagsRequestBody$outboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsRequestBody$Outbound` instead. */
  export type Outbound = DangerouslyDeleteByTagsRequestBody$Outbound;
}

export function dangerouslyDeleteByTagsRequestBodyToJSON(
  dangerouslyDeleteByTagsRequestBody: DangerouslyDeleteByTagsRequestBody,
): string {
  return JSON.stringify(
    DangerouslyDeleteByTagsRequestBody$outboundSchema.parse(
      dangerouslyDeleteByTagsRequestBody,
    ),
  );
}

export function dangerouslyDeleteByTagsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DangerouslyDeleteByTagsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DangerouslyDeleteByTagsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DangerouslyDeleteByTagsRequestBody' from JSON`,
  );
}

/** @internal */
export const DangerouslyDeleteByTagsRequest$inboundSchema: z.ZodType<
  DangerouslyDeleteByTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => DangerouslyDeleteByTagsRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DangerouslyDeleteByTagsRequest$Outbound = {
  projectIdOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: DangerouslyDeleteByTagsRequestBody$Outbound | undefined;
};

/** @internal */
export const DangerouslyDeleteByTagsRequest$outboundSchema: z.ZodType<
  DangerouslyDeleteByTagsRequest$Outbound,
  z.ZodTypeDef,
  DangerouslyDeleteByTagsRequest
> = z.object({
  projectIdOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => DangerouslyDeleteByTagsRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DangerouslyDeleteByTagsRequest$ {
  /** @deprecated use `DangerouslyDeleteByTagsRequest$inboundSchema` instead. */
  export const inboundSchema = DangerouslyDeleteByTagsRequest$inboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsRequest$outboundSchema` instead. */
  export const outboundSchema = DangerouslyDeleteByTagsRequest$outboundSchema;
  /** @deprecated use `DangerouslyDeleteByTagsRequest$Outbound` instead. */
  export type Outbound = DangerouslyDeleteByTagsRequest$Outbound;
}

export function dangerouslyDeleteByTagsRequestToJSON(
  dangerouslyDeleteByTagsRequest: DangerouslyDeleteByTagsRequest,
): string {
  return JSON.stringify(
    DangerouslyDeleteByTagsRequest$outboundSchema.parse(
      dangerouslyDeleteByTagsRequest,
    ),
  );
}

export function dangerouslyDeleteByTagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<DangerouslyDeleteByTagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DangerouslyDeleteByTagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DangerouslyDeleteByTagsRequest' from JSON`,
  );
}
