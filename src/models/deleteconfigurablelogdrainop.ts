/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteConfigurableLogDrainRequest = {
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/** @internal */
export const DeleteConfigurableLogDrainRequest$inboundSchema: z.ZodType<
  DeleteConfigurableLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type DeleteConfigurableLogDrainRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const DeleteConfigurableLogDrainRequest$outboundSchema: z.ZodType<
  DeleteConfigurableLogDrainRequest$Outbound,
  z.ZodTypeDef,
  DeleteConfigurableLogDrainRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteConfigurableLogDrainRequest$ {
  /** @deprecated use `DeleteConfigurableLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteConfigurableLogDrainRequest$inboundSchema;
  /** @deprecated use `DeleteConfigurableLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteConfigurableLogDrainRequest$outboundSchema;
  /** @deprecated use `DeleteConfigurableLogDrainRequest$Outbound` instead. */
  export type Outbound = DeleteConfigurableLogDrainRequest$Outbound;
}

export function deleteConfigurableLogDrainRequestToJSON(
  deleteConfigurableLogDrainRequest: DeleteConfigurableLogDrainRequest,
): string {
  return JSON.stringify(
    DeleteConfigurableLogDrainRequest$outboundSchema.parse(
      deleteConfigurableLogDrainRequest,
    ),
  );
}

export function deleteConfigurableLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteConfigurableLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteConfigurableLogDrainRequest' from JSON`,
  );
}
