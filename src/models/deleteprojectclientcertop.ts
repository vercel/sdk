/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteProjectClientCertRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The certificate identifier
   */
  certId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * Client certificate deleted successfully
 */
export type DeleteProjectClientCertResponseBody = {
  origin: string;
  certId: string;
};

/** @internal */
export const DeleteProjectClientCertRequest$inboundSchema: z.ZodType<
  DeleteProjectClientCertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  certId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type DeleteProjectClientCertRequest$Outbound = {
  idOrName: string;
  certId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const DeleteProjectClientCertRequest$outboundSchema: z.ZodType<
  DeleteProjectClientCertRequest$Outbound,
  z.ZodTypeDef,
  DeleteProjectClientCertRequest
> = z.object({
  idOrName: z.string(),
  certId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteProjectClientCertRequest$ {
  /** @deprecated use `DeleteProjectClientCertRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteProjectClientCertRequest$inboundSchema;
  /** @deprecated use `DeleteProjectClientCertRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteProjectClientCertRequest$outboundSchema;
  /** @deprecated use `DeleteProjectClientCertRequest$Outbound` instead. */
  export type Outbound = DeleteProjectClientCertRequest$Outbound;
}

export function deleteProjectClientCertRequestToJSON(
  deleteProjectClientCertRequest: DeleteProjectClientCertRequest,
): string {
  return JSON.stringify(
    DeleteProjectClientCertRequest$outboundSchema.parse(
      deleteProjectClientCertRequest,
    ),
  );
}

export function deleteProjectClientCertRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteProjectClientCertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteProjectClientCertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteProjectClientCertRequest' from JSON`,
  );
}

/** @internal */
export const DeleteProjectClientCertResponseBody$inboundSchema: z.ZodType<
  DeleteProjectClientCertResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: z.string(),
  certId: z.string(),
});

/** @internal */
export type DeleteProjectClientCertResponseBody$Outbound = {
  origin: string;
  certId: string;
};

/** @internal */
export const DeleteProjectClientCertResponseBody$outboundSchema: z.ZodType<
  DeleteProjectClientCertResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteProjectClientCertResponseBody
> = z.object({
  origin: z.string(),
  certId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteProjectClientCertResponseBody$ {
  /** @deprecated use `DeleteProjectClientCertResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteProjectClientCertResponseBody$inboundSchema;
  /** @deprecated use `DeleteProjectClientCertResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteProjectClientCertResponseBody$outboundSchema;
  /** @deprecated use `DeleteProjectClientCertResponseBody$Outbound` instead. */
  export type Outbound = DeleteProjectClientCertResponseBody$Outbound;
}

export function deleteProjectClientCertResponseBodyToJSON(
  deleteProjectClientCertResponseBody: DeleteProjectClientCertResponseBody,
): string {
  return JSON.stringify(
    DeleteProjectClientCertResponseBody$outboundSchema.parse(
      deleteProjectClientCertResponseBody,
    ),
  );
}

export function deleteProjectClientCertResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteProjectClientCertResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteProjectClientCertResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteProjectClientCertResponseBody' from JSON`,
  );
}
