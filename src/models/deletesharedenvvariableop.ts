/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type DeleteSharedEnvVariableRequestBody = {
  /**
   * IDs of the Shared Environment Variables to delete
   */
  ids: Array<string>;
};

export type DeleteSharedEnvVariableRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: DeleteSharedEnvVariableRequestBody | undefined;
};

export const DeleteSharedEnvVariableValue2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type DeleteSharedEnvVariableValue2 = ClosedEnum<
  typeof DeleteSharedEnvVariableValue2
>;

export type DeleteSharedEnvVariableValue =
  | string
  | Array<DeleteSharedEnvVariableValue2>;

export const DeleteSharedEnvVariableTarget2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type DeleteSharedEnvVariableTarget2 = ClosedEnum<
  typeof DeleteSharedEnvVariableTarget2
>;

export const DeleteSharedEnvVariableTarget1 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type DeleteSharedEnvVariableTarget1 = ClosedEnum<
  typeof DeleteSharedEnvVariableTarget1
>;

export type DeleteSharedEnvVariableTarget =
  | Array<DeleteSharedEnvVariableTarget1>
  | DeleteSharedEnvVariableTarget2;

export type DeleteSharedEnvVariableError = {
  code: string;
  message: string;
  key?: string | undefined;
  envVarId?: string | undefined;
  envVarKey?: string | undefined;
  action?: string | undefined;
  link?: string | undefined;
  value?: string | Array<DeleteSharedEnvVariableValue2> | undefined;
  gitBranch?: string | undefined;
  target?:
    | Array<DeleteSharedEnvVariableTarget1>
    | DeleteSharedEnvVariableTarget2
    | undefined;
  project?: string | undefined;
};

export type DeleteSharedEnvVariableFailed = {
  error: DeleteSharedEnvVariableError;
};

export type DeleteSharedEnvVariableResponseBody = {
  deleted: Array<string>;
  failed: Array<DeleteSharedEnvVariableFailed>;
};

/** @internal */
export const DeleteSharedEnvVariableRequestBody$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()),
});

/** @internal */
export type DeleteSharedEnvVariableRequestBody$Outbound = {
  ids: Array<string>;
};

/** @internal */
export const DeleteSharedEnvVariableRequestBody$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableRequestBody$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableRequestBody
> = z.object({
  ids: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableRequestBody$ {
  /** @deprecated use `DeleteSharedEnvVariableRequestBody$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableRequestBody$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteSharedEnvVariableRequestBody$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableRequestBody$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableRequestBody$Outbound;
}

export function deleteSharedEnvVariableRequestBodyToJSON(
  deleteSharedEnvVariableRequestBody: DeleteSharedEnvVariableRequestBody,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableRequestBody$outboundSchema.parse(
      deleteSharedEnvVariableRequestBody,
    ),
  );
}

export function deleteSharedEnvVariableRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteSharedEnvVariableRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableRequestBody' from JSON`,
  );
}

/** @internal */
export const DeleteSharedEnvVariableRequest$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => DeleteSharedEnvVariableRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type DeleteSharedEnvVariableRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: DeleteSharedEnvVariableRequestBody$Outbound | undefined;
};

/** @internal */
export const DeleteSharedEnvVariableRequest$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableRequest$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => DeleteSharedEnvVariableRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableRequest$ {
  /** @deprecated use `DeleteSharedEnvVariableRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableRequest$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableRequest$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableRequest$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableRequest$Outbound;
}

export function deleteSharedEnvVariableRequestToJSON(
  deleteSharedEnvVariableRequest: DeleteSharedEnvVariableRequest,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableRequest$outboundSchema.parse(
      deleteSharedEnvVariableRequest,
    ),
  );
}

export function deleteSharedEnvVariableRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSharedEnvVariableRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableRequest' from JSON`,
  );
}

/** @internal */
export const DeleteSharedEnvVariableValue2$inboundSchema: z.ZodNativeEnum<
  typeof DeleteSharedEnvVariableValue2
> = z.nativeEnum(DeleteSharedEnvVariableValue2);

/** @internal */
export const DeleteSharedEnvVariableValue2$outboundSchema: z.ZodNativeEnum<
  typeof DeleteSharedEnvVariableValue2
> = DeleteSharedEnvVariableValue2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableValue2$ {
  /** @deprecated use `DeleteSharedEnvVariableValue2$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableValue2$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableValue2$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableValue2$outboundSchema;
}

/** @internal */
export const DeleteSharedEnvVariableValue$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(DeleteSharedEnvVariableValue2$inboundSchema)]);

/** @internal */
export type DeleteSharedEnvVariableValue$Outbound = string | Array<string>;

/** @internal */
export const DeleteSharedEnvVariableValue$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableValue$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableValue
> = z.union([
  z.string(),
  z.array(DeleteSharedEnvVariableValue2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableValue$ {
  /** @deprecated use `DeleteSharedEnvVariableValue$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableValue$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableValue$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableValue$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableValue$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableValue$Outbound;
}

export function deleteSharedEnvVariableValueToJSON(
  deleteSharedEnvVariableValue: DeleteSharedEnvVariableValue,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableValue$outboundSchema.parse(
      deleteSharedEnvVariableValue,
    ),
  );
}

export function deleteSharedEnvVariableValueFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSharedEnvVariableValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableValue' from JSON`,
  );
}

/** @internal */
export const DeleteSharedEnvVariableTarget2$inboundSchema: z.ZodNativeEnum<
  typeof DeleteSharedEnvVariableTarget2
> = z.nativeEnum(DeleteSharedEnvVariableTarget2);

/** @internal */
export const DeleteSharedEnvVariableTarget2$outboundSchema: z.ZodNativeEnum<
  typeof DeleteSharedEnvVariableTarget2
> = DeleteSharedEnvVariableTarget2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableTarget2$ {
  /** @deprecated use `DeleteSharedEnvVariableTarget2$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableTarget2$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableTarget2$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableTarget2$outboundSchema;
}

/** @internal */
export const DeleteSharedEnvVariableTarget1$inboundSchema: z.ZodNativeEnum<
  typeof DeleteSharedEnvVariableTarget1
> = z.nativeEnum(DeleteSharedEnvVariableTarget1);

/** @internal */
export const DeleteSharedEnvVariableTarget1$outboundSchema: z.ZodNativeEnum<
  typeof DeleteSharedEnvVariableTarget1
> = DeleteSharedEnvVariableTarget1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableTarget1$ {
  /** @deprecated use `DeleteSharedEnvVariableTarget1$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableTarget1$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableTarget1$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableTarget1$outboundSchema;
}

/** @internal */
export const DeleteSharedEnvVariableTarget$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableTarget,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(DeleteSharedEnvVariableTarget1$inboundSchema),
  DeleteSharedEnvVariableTarget2$inboundSchema,
]);

/** @internal */
export type DeleteSharedEnvVariableTarget$Outbound = Array<string> | string;

/** @internal */
export const DeleteSharedEnvVariableTarget$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableTarget$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableTarget
> = z.union([
  z.array(DeleteSharedEnvVariableTarget1$outboundSchema),
  DeleteSharedEnvVariableTarget2$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableTarget$ {
  /** @deprecated use `DeleteSharedEnvVariableTarget$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableTarget$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableTarget$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableTarget$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableTarget$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableTarget$Outbound;
}

export function deleteSharedEnvVariableTargetToJSON(
  deleteSharedEnvVariableTarget: DeleteSharedEnvVariableTarget,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableTarget$outboundSchema.parse(
      deleteSharedEnvVariableTarget,
    ),
  );
}

export function deleteSharedEnvVariableTargetFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableTarget, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSharedEnvVariableTarget$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableTarget' from JSON`,
  );
}

/** @internal */
export const DeleteSharedEnvVariableError$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  key: z.string().optional(),
  envVarId: z.string().optional(),
  envVarKey: z.string().optional(),
  action: z.string().optional(),
  link: z.string().optional(),
  value: z.union([
    z.string(),
    z.array(DeleteSharedEnvVariableValue2$inboundSchema),
  ]).optional(),
  gitBranch: z.string().optional(),
  target: z.union([
    z.array(DeleteSharedEnvVariableTarget1$inboundSchema),
    DeleteSharedEnvVariableTarget2$inboundSchema,
  ]).optional(),
  project: z.string().optional(),
});

/** @internal */
export type DeleteSharedEnvVariableError$Outbound = {
  code: string;
  message: string;
  key?: string | undefined;
  envVarId?: string | undefined;
  envVarKey?: string | undefined;
  action?: string | undefined;
  link?: string | undefined;
  value?: string | Array<string> | undefined;
  gitBranch?: string | undefined;
  target?: Array<string> | string | undefined;
  project?: string | undefined;
};

/** @internal */
export const DeleteSharedEnvVariableError$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableError$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableError
> = z.object({
  code: z.string(),
  message: z.string(),
  key: z.string().optional(),
  envVarId: z.string().optional(),
  envVarKey: z.string().optional(),
  action: z.string().optional(),
  link: z.string().optional(),
  value: z.union([
    z.string(),
    z.array(DeleteSharedEnvVariableValue2$outboundSchema),
  ]).optional(),
  gitBranch: z.string().optional(),
  target: z.union([
    z.array(DeleteSharedEnvVariableTarget1$outboundSchema),
    DeleteSharedEnvVariableTarget2$outboundSchema,
  ]).optional(),
  project: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableError$ {
  /** @deprecated use `DeleteSharedEnvVariableError$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableError$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableError$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableError$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableError$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableError$Outbound;
}

export function deleteSharedEnvVariableErrorToJSON(
  deleteSharedEnvVariableError: DeleteSharedEnvVariableError,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableError$outboundSchema.parse(
      deleteSharedEnvVariableError,
    ),
  );
}

export function deleteSharedEnvVariableErrorFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSharedEnvVariableError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableError' from JSON`,
  );
}

/** @internal */
export const DeleteSharedEnvVariableFailed$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => DeleteSharedEnvVariableError$inboundSchema),
});

/** @internal */
export type DeleteSharedEnvVariableFailed$Outbound = {
  error: DeleteSharedEnvVariableError$Outbound;
};

/** @internal */
export const DeleteSharedEnvVariableFailed$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableFailed$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableFailed
> = z.object({
  error: z.lazy(() => DeleteSharedEnvVariableError$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableFailed$ {
  /** @deprecated use `DeleteSharedEnvVariableFailed$inboundSchema` instead. */
  export const inboundSchema = DeleteSharedEnvVariableFailed$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableFailed$outboundSchema` instead. */
  export const outboundSchema = DeleteSharedEnvVariableFailed$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableFailed$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableFailed$Outbound;
}

export function deleteSharedEnvVariableFailedToJSON(
  deleteSharedEnvVariableFailed: DeleteSharedEnvVariableFailed,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableFailed$outboundSchema.parse(
      deleteSharedEnvVariableFailed,
    ),
  );
}

export function deleteSharedEnvVariableFailedFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteSharedEnvVariableFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableFailed' from JSON`,
  );
}

/** @internal */
export const DeleteSharedEnvVariableResponseBody$inboundSchema: z.ZodType<
  DeleteSharedEnvVariableResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  deleted: z.array(z.string()),
  failed: z.array(z.lazy(() => DeleteSharedEnvVariableFailed$inboundSchema)),
});

/** @internal */
export type DeleteSharedEnvVariableResponseBody$Outbound = {
  deleted: Array<string>;
  failed: Array<DeleteSharedEnvVariableFailed$Outbound>;
};

/** @internal */
export const DeleteSharedEnvVariableResponseBody$outboundSchema: z.ZodType<
  DeleteSharedEnvVariableResponseBody$Outbound,
  z.ZodTypeDef,
  DeleteSharedEnvVariableResponseBody
> = z.object({
  deleted: z.array(z.string()),
  failed: z.array(z.lazy(() => DeleteSharedEnvVariableFailed$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteSharedEnvVariableResponseBody$ {
  /** @deprecated use `DeleteSharedEnvVariableResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    DeleteSharedEnvVariableResponseBody$inboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    DeleteSharedEnvVariableResponseBody$outboundSchema;
  /** @deprecated use `DeleteSharedEnvVariableResponseBody$Outbound` instead. */
  export type Outbound = DeleteSharedEnvVariableResponseBody$Outbound;
}

export function deleteSharedEnvVariableResponseBodyToJSON(
  deleteSharedEnvVariableResponseBody: DeleteSharedEnvVariableResponseBody,
): string {
  return JSON.stringify(
    DeleteSharedEnvVariableResponseBody$outboundSchema.parse(
      deleteSharedEnvVariableResponseBody,
    ),
  );
}

export function deleteSharedEnvVariableResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<DeleteSharedEnvVariableResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteSharedEnvVariableResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteSharedEnvVariableResponseBody' from JSON`,
  );
}
