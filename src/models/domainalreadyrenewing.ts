/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const DomainAlreadyRenewingCode = {
  DomainAlreadyRenewing: "domain_already_renewing",
} as const;
export type DomainAlreadyRenewingCode = ClosedEnum<
  typeof DomainAlreadyRenewingCode
>;

/**
 * The domain is already renewing.
 */
export type DomainAlreadyRenewingData = {
  status: number;
  code: DomainAlreadyRenewingCode;
  message: string;
};

/**
 * The domain is already renewing.
 */
export class DomainAlreadyRenewing extends VercelError {
  status: number;
  code: DomainAlreadyRenewingCode;

  /** The original data that was passed to this error instance. */
  data$: DomainAlreadyRenewingData;

  constructor(
    err: DomainAlreadyRenewingData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;

    this.name = "DomainAlreadyRenewing";
  }
}

/** @internal */
export const DomainAlreadyRenewingCode$inboundSchema: z.ZodNativeEnum<
  typeof DomainAlreadyRenewingCode
> = z.nativeEnum(DomainAlreadyRenewingCode);

/** @internal */
export const DomainAlreadyRenewingCode$outboundSchema: z.ZodNativeEnum<
  typeof DomainAlreadyRenewingCode
> = DomainAlreadyRenewingCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainAlreadyRenewingCode$ {
  /** @deprecated use `DomainAlreadyRenewingCode$inboundSchema` instead. */
  export const inboundSchema = DomainAlreadyRenewingCode$inboundSchema;
  /** @deprecated use `DomainAlreadyRenewingCode$outboundSchema` instead. */
  export const outboundSchema = DomainAlreadyRenewingCode$outboundSchema;
}

/** @internal */
export const DomainAlreadyRenewing$inboundSchema: z.ZodType<
  DomainAlreadyRenewing,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: DomainAlreadyRenewingCode$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DomainAlreadyRenewing(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DomainAlreadyRenewing$Outbound = {
  status: number;
  code: string;
  message: string;
};

/** @internal */
export const DomainAlreadyRenewing$outboundSchema: z.ZodType<
  DomainAlreadyRenewing$Outbound,
  z.ZodTypeDef,
  DomainAlreadyRenewing
> = z.instanceof(DomainAlreadyRenewing)
  .transform(v => v.data$)
  .pipe(z.object({
    status: z.number(),
    code: DomainAlreadyRenewingCode$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainAlreadyRenewing$ {
  /** @deprecated use `DomainAlreadyRenewing$inboundSchema` instead. */
  export const inboundSchema = DomainAlreadyRenewing$inboundSchema;
  /** @deprecated use `DomainAlreadyRenewing$outboundSchema` instead. */
  export const outboundSchema = DomainAlreadyRenewing$outboundSchema;
  /** @deprecated use `DomainAlreadyRenewing$Outbound` instead. */
  export type Outbound = DomainAlreadyRenewing$Outbound;
}
