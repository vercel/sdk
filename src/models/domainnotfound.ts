/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const DomainNotFoundCode = {
  DomainNotFound: "domain_not_found",
} as const;
export type DomainNotFoundCode = ClosedEnum<typeof DomainNotFoundCode>;

export const DomainNotFoundTag = {
  DomainNotFound: "DomainNotFound",
} as const;
export type DomainNotFoundTag = ClosedEnum<typeof DomainNotFoundTag>;

export type DomainNotFoundData = {
  status: number;
  code: DomainNotFoundCode;
  message: string;
  tag: DomainNotFoundTag;
};

export class DomainNotFound extends VercelError {
  status: number;
  code: DomainNotFoundCode;
  tag: DomainNotFoundTag;

  /** The original data that was passed to this error instance. */
  data$: DomainNotFoundData;

  constructor(
    err: DomainNotFoundData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "DomainNotFound";
  }
}

/** @internal */
export const DomainNotFoundCode$inboundSchema: z.ZodNativeEnum<
  typeof DomainNotFoundCode
> = z.nativeEnum(DomainNotFoundCode);

/** @internal */
export const DomainNotFoundCode$outboundSchema: z.ZodNativeEnum<
  typeof DomainNotFoundCode
> = DomainNotFoundCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainNotFoundCode$ {
  /** @deprecated use `DomainNotFoundCode$inboundSchema` instead. */
  export const inboundSchema = DomainNotFoundCode$inboundSchema;
  /** @deprecated use `DomainNotFoundCode$outboundSchema` instead. */
  export const outboundSchema = DomainNotFoundCode$outboundSchema;
}

/** @internal */
export const DomainNotFoundTag$inboundSchema: z.ZodNativeEnum<
  typeof DomainNotFoundTag
> = z.nativeEnum(DomainNotFoundTag);

/** @internal */
export const DomainNotFoundTag$outboundSchema: z.ZodNativeEnum<
  typeof DomainNotFoundTag
> = DomainNotFoundTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainNotFoundTag$ {
  /** @deprecated use `DomainNotFoundTag$inboundSchema` instead. */
  export const inboundSchema = DomainNotFoundTag$inboundSchema;
  /** @deprecated use `DomainNotFoundTag$outboundSchema` instead. */
  export const outboundSchema = DomainNotFoundTag$outboundSchema;
}

/** @internal */
export const DomainNotFound$inboundSchema: z.ZodType<
  DomainNotFound,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: DomainNotFoundCode$inboundSchema,
  message: z.string(),
  _tag: DomainNotFoundTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new DomainNotFound(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DomainNotFound$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const DomainNotFound$outboundSchema: z.ZodType<
  DomainNotFound$Outbound,
  z.ZodTypeDef,
  DomainNotFound
> = z.instanceof(DomainNotFound)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: DomainNotFoundCode$outboundSchema,
      message: z.string(),
      tag: DomainNotFoundTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainNotFound$ {
  /** @deprecated use `DomainNotFound$inboundSchema` instead. */
  export const inboundSchema = DomainNotFound$inboundSchema;
  /** @deprecated use `DomainNotFound$outboundSchema` instead. */
  export const outboundSchema = DomainNotFound$outboundSchema;
  /** @deprecated use `DomainNotFound$Outbound` instead. */
  export type Outbound = DomainNotFound$Outbound;
}
