/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const DuplicateDomainsCode = {
  DuplicateDomains: "duplicate_domains",
} as const;
export type DuplicateDomainsCode = ClosedEnum<typeof DuplicateDomainsCode>;

/**
 * Duplicate domains were provided.
 */
export type DuplicateDomainsData = {
  status: number;
  code: DuplicateDomainsCode;
  message: string;
};

/**
 * Duplicate domains were provided.
 */
export class DuplicateDomains extends VercelError {
  status: number;
  code: DuplicateDomainsCode;

  /** The original data that was passed to this error instance. */
  data$: DuplicateDomainsData;

  constructor(
    err: DuplicateDomainsData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;

    this.name = "DuplicateDomains";
  }
}

/** @internal */
export const DuplicateDomainsCode$inboundSchema: z.ZodNativeEnum<
  typeof DuplicateDomainsCode
> = z.nativeEnum(DuplicateDomainsCode);

/** @internal */
export const DuplicateDomainsCode$outboundSchema: z.ZodNativeEnum<
  typeof DuplicateDomainsCode
> = DuplicateDomainsCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DuplicateDomainsCode$ {
  /** @deprecated use `DuplicateDomainsCode$inboundSchema` instead. */
  export const inboundSchema = DuplicateDomainsCode$inboundSchema;
  /** @deprecated use `DuplicateDomainsCode$outboundSchema` instead. */
  export const outboundSchema = DuplicateDomainsCode$outboundSchema;
}

/** @internal */
export const DuplicateDomains$inboundSchema: z.ZodType<
  DuplicateDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: DuplicateDomainsCode$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new DuplicateDomains(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type DuplicateDomains$Outbound = {
  status: number;
  code: string;
  message: string;
};

/** @internal */
export const DuplicateDomains$outboundSchema: z.ZodType<
  DuplicateDomains$Outbound,
  z.ZodTypeDef,
  DuplicateDomains
> = z.instanceof(DuplicateDomains)
  .transform(v => v.data$)
  .pipe(z.object({
    status: z.number(),
    code: DuplicateDomainsCode$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DuplicateDomains$ {
  /** @deprecated use `DuplicateDomains$inboundSchema` instead. */
  export const inboundSchema = DuplicateDomains$inboundSchema;
  /** @deprecated use `DuplicateDomains$outboundSchema` instead. */
  export const outboundSchema = DuplicateDomains$outboundSchema;
  /** @deprecated use `DuplicateDomains$Outbound` instead. */
  export type Outbound = DuplicateDomains$Outbound;
}
