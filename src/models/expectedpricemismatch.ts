/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const ExpectedPriceMismatchCode = {
  ExpectedPriceMismatch: "expected_price_mismatch",
} as const;
export type ExpectedPriceMismatchCode = ClosedEnum<
  typeof ExpectedPriceMismatchCode
>;

/**
 * The expected price passed does not match the actual price.
 */
export type ExpectedPriceMismatchData = {
  status: number;
  code: ExpectedPriceMismatchCode;
  message: string;
};

/**
 * The expected price passed does not match the actual price.
 */
export class ExpectedPriceMismatch extends VercelError {
  status: number;
  code: ExpectedPriceMismatchCode;

  /** The original data that was passed to this error instance. */
  data$: ExpectedPriceMismatchData;

  constructor(
    err: ExpectedPriceMismatchData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;

    this.name = "ExpectedPriceMismatch";
  }
}

/** @internal */
export const ExpectedPriceMismatchCode$inboundSchema: z.ZodNativeEnum<
  typeof ExpectedPriceMismatchCode
> = z.nativeEnum(ExpectedPriceMismatchCode);

/** @internal */
export const ExpectedPriceMismatchCode$outboundSchema: z.ZodNativeEnum<
  typeof ExpectedPriceMismatchCode
> = ExpectedPriceMismatchCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpectedPriceMismatchCode$ {
  /** @deprecated use `ExpectedPriceMismatchCode$inboundSchema` instead. */
  export const inboundSchema = ExpectedPriceMismatchCode$inboundSchema;
  /** @deprecated use `ExpectedPriceMismatchCode$outboundSchema` instead. */
  export const outboundSchema = ExpectedPriceMismatchCode$outboundSchema;
}

/** @internal */
export const ExpectedPriceMismatch$inboundSchema: z.ZodType<
  ExpectedPriceMismatch,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: ExpectedPriceMismatchCode$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ExpectedPriceMismatch(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ExpectedPriceMismatch$Outbound = {
  status: number;
  code: string;
  message: string;
};

/** @internal */
export const ExpectedPriceMismatch$outboundSchema: z.ZodType<
  ExpectedPriceMismatch$Outbound,
  z.ZodTypeDef,
  ExpectedPriceMismatch
> = z.instanceof(ExpectedPriceMismatch)
  .transform(v => v.data$)
  .pipe(z.object({
    status: z.number(),
    code: ExpectedPriceMismatchCode$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExpectedPriceMismatch$ {
  /** @deprecated use `ExpectedPriceMismatch$inboundSchema` instead. */
  export const inboundSchema = ExpectedPriceMismatch$inboundSchema;
  /** @deprecated use `ExpectedPriceMismatch$outboundSchema` instead. */
  export const outboundSchema = ExpectedPriceMismatch$outboundSchema;
  /** @deprecated use `ExpectedPriceMismatch$Outbound` instead. */
  export type Outbound = ExpectedPriceMismatch$Outbound;
}
