/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetAliasRequest = {
  /**
   * Get the alias only if it was created after the provided timestamp
   */
  from?: number | undefined;
  /**
   * The alias or alias ID to be retrieved
   */
  idOrAlias: string;
  /**
   * Get the alias only if it is assigned to the provided project ID
   */
  projectId?: string | undefined;
  /**
   * Get the alias only if it was created after this JavaScript timestamp
   */
  since?: number | undefined;
  /**
   * Get the alias only if it was created before this JavaScript timestamp
   */
  until?: number | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/** @internal */
export const GetAliasRequest$inboundSchema: z.ZodType<
  GetAliasRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  from: z.number().optional(),
  idOrAlias: z.string(),
  projectId: z.string().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetAliasRequest$Outbound = {
  from?: number | undefined;
  idOrAlias: string;
  projectId?: string | undefined;
  since?: number | undefined;
  until?: number | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetAliasRequest$outboundSchema: z.ZodType<
  GetAliasRequest$Outbound,
  z.ZodTypeDef,
  GetAliasRequest
> = z.object({
  from: z.number().optional(),
  idOrAlias: z.string(),
  projectId: z.string().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAliasRequest$ {
  /** @deprecated use `GetAliasRequest$inboundSchema` instead. */
  export const inboundSchema = GetAliasRequest$inboundSchema;
  /** @deprecated use `GetAliasRequest$outboundSchema` instead. */
  export const outboundSchema = GetAliasRequest$outboundSchema;
  /** @deprecated use `GetAliasRequest$Outbound` instead. */
  export type Outbound = GetAliasRequest$Outbound;
}

export function getAliasRequestToJSON(
  getAliasRequest: GetAliasRequest,
): string {
  return JSON.stringify(GetAliasRequest$outboundSchema.parse(getAliasRequest));
}

export function getAliasRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAliasRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAliasRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAliasRequest' from JSON`,
  );
}
