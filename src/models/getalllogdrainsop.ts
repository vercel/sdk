/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetAllLogDrainsRequest = {
  projectId?: string | undefined;
  includeMetadata?: boolean | undefined;
  projectIdOrName?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetAllLogDrainsResponseBodyFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Xmcp: "xmcp",
} as const;
export type GetAllLogDrainsResponseBodyFramework = ClosedEnum<
  typeof GetAllLogDrainsResponseBodyFramework
>;

export type ResponseBodyProjectsMetadata = {
  id: string;
  name: string;
  framework?: GetAllLogDrainsResponseBodyFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type GetAllLogDrainsResponseBody2 = {
  projectsMetadata?: Array<ResponseBodyProjectsMetadata> | null | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
};

export const GetAllLogDrainsDrainsLogDrainsCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type GetAllLogDrainsDrainsLogDrainsCreatedFrom = ClosedEnum<
  typeof GetAllLogDrainsDrainsLogDrainsCreatedFrom
>;

export type GetAllLogDrainsDrainsLogDrainsLog = {};

export type GetAllLogDrainsDrainsLogDrainsTrace = {};

export type GetAllLogDrainsDrainsAnalytics = {};

export type GetAllLogDrainsDrainsSpeedInsights = {};

export type GetAllLogDrainsDrainsLogDrainsSchemas = {
  log?: GetAllLogDrainsDrainsLogDrainsLog | undefined;
  trace?: GetAllLogDrainsDrainsLogDrainsTrace | undefined;
  analytics?: GetAllLogDrainsDrainsAnalytics | undefined;
  speedInsights?: GetAllLogDrainsDrainsSpeedInsights | undefined;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type =
  {
    Internal: "internal",
  } as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type =
  ClosedEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type
  >;

export const GetAllLogDrainsDeliveryTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type GetAllLogDrainsDeliveryTarget = ClosedEnum<
  typeof GetAllLogDrainsDeliveryTarget
>;

export type GetAllLogDrainsDelivery5 = {
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type;
  target: GetAllLogDrainsDeliveryTarget;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType =
  {
    Clickhouse: "clickhouse",
  } as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType =
  ClosedEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType
  >;

export type GetAllLogDrainsDelivery4 = {
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType;
  endpoint: string;
  table: string;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type =
  {
    Syslog: "syslog",
  } as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type =
  ClosedEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type
  >;

export type GetAllLogDrainsDelivery3 = {
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type;
  endpoint: string;
  secret: string;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType =
  {
    Otlphttp: "otlphttp",
  } as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType
  >;

export type GetAllLogDrainsDeliveryLogDrainsEndpoint = {
  traces: string;
};

export const GetAllLogDrainsDeliveryLogDrainsResponseEncoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsResponseEncoding = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsResponseEncoding
>;

export type GetAllLogDrainsDelivery2 = {
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType;
  endpoint: GetAllLogDrainsDeliveryLogDrainsEndpoint;
  encoding: GetAllLogDrainsDeliveryLogDrainsResponseEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType = {
  Http: "http",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType =
  ClosedEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType
  >;

export const GetAllLogDrainsDeliveryLogDrainsEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsEncoding = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsEncoding
>;

export const GetAllLogDrainsDeliveryLogDrainsCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsCompression = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsCompression
>;

export type GetAllLogDrainsDelivery1 = {
  type: GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType;
  endpoint: string;
  encoding: GetAllLogDrainsDeliveryLogDrainsEncoding;
  compression?: GetAllLogDrainsDeliveryLogDrainsCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type GetAllLogDrainsDrainsLogDrainsDelivery =
  | GetAllLogDrainsDelivery1
  | GetAllLogDrainsDelivery2
  | GetAllLogDrainsDelivery3
  | GetAllLogDrainsDelivery4
  | GetAllLogDrainsDelivery5;

export const GetAllLogDrainsDrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type GetAllLogDrainsDrainsType = ClosedEnum<
  typeof GetAllLogDrainsDrainsType
>;

export const GetAllLogDrainsDrainsEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type GetAllLogDrainsDrainsEnv = ClosedEnum<
  typeof GetAllLogDrainsDrainsEnv
>;

export type GetAllLogDrainsDrainsLogDrainsSampling = {
  type: GetAllLogDrainsDrainsType;
  rate: number;
  env?: GetAllLogDrainsDrainsEnv | undefined;
  requestPath?: string | undefined;
};

export const GetAllLogDrainsDrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type GetAllLogDrainsDrainsStatus = ClosedEnum<
  typeof GetAllLogDrainsDrainsStatus
>;

export const GetAllLogDrainsDrainsLogDrainsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type GetAllLogDrainsDrainsLogDrainsDisabledReason = ClosedEnum<
  typeof GetAllLogDrainsDrainsLogDrainsDisabledReason
>;

export const GetAllLogDrainsSourceLogDrainsKind = {
  Integration: "integration",
} as const;
export type GetAllLogDrainsSourceLogDrainsKind = ClosedEnum<
  typeof GetAllLogDrainsSourceLogDrainsKind
>;

export type GetAllLogDrainsSource2 = {
  kind: GetAllLogDrainsSourceLogDrainsKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const GetAllLogDrainsSourceKind = {
  SelfServed: "self-served",
} as const;
export type GetAllLogDrainsSourceKind = ClosedEnum<
  typeof GetAllLogDrainsSourceKind
>;

export type GetAllLogDrainsSource1 = {
  kind: GetAllLogDrainsSourceKind;
};

export type GetAllLogDrainsDrainsSource =
  | GetAllLogDrainsSource2
  | GetAllLogDrainsSource1;

export const GetAllLogDrainsFilterV2LogDrainsVersion = {
  V2: "v2",
} as const;
export type GetAllLogDrainsFilterV2LogDrainsVersion = ClosedEnum<
  typeof GetAllLogDrainsFilterV2LogDrainsVersion
>;

export const GetAllLogDrainsFilterLogDrainsResponseType = {
  Odata: "odata",
} as const;
export type GetAllLogDrainsFilterLogDrainsResponseType = ClosedEnum<
  typeof GetAllLogDrainsFilterLogDrainsResponseType
>;

export type GetAllLogDrainsFilter2 = {
  type: GetAllLogDrainsFilterLogDrainsResponseType;
  text: string;
};

export const GetAllLogDrainsFilterLogDrainsType = {
  Basic: "basic",
} as const;
export type GetAllLogDrainsFilterLogDrainsType = ClosedEnum<
  typeof GetAllLogDrainsFilterLogDrainsType
>;

export type GetAllLogDrainsFilterProject = {
  ids?: Array<string> | undefined;
};

export type GetAllLogDrainsFilterLog = {
  sources?: Array<string> | undefined;
};

export type GetAllLogDrainsFilterLogDrainsDeployment = {
  environments?: Array<string> | undefined;
};

export type GetAllLogDrainsFilter1 = {
  type: GetAllLogDrainsFilterLogDrainsType;
  project?: GetAllLogDrainsFilterProject | undefined;
  log?: GetAllLogDrainsFilterLog | undefined;
  deployment?: GetAllLogDrainsFilterLogDrainsDeployment | undefined;
};

export type GetAllLogDrainsFilterV2LogDrainsFilter =
  | GetAllLogDrainsFilter2
  | GetAllLogDrainsFilter1;

export type GetAllLogDrainsFilterV22 = {
  version: GetAllLogDrainsFilterV2LogDrainsVersion;
  filter: GetAllLogDrainsFilter2 | GetAllLogDrainsFilter1;
};

export const GetAllLogDrainsFilterV2Version = {
  V1: "v1",
} as const;
export type GetAllLogDrainsFilterV2Version = ClosedEnum<
  typeof GetAllLogDrainsFilterV2Version
>;

export type GetAllLogDrainsFilterV21 = {
  version: GetAllLogDrainsFilterV2Version;
};

export type GetAllLogDrainsDrainsLogDrainsFilterV2 =
  | GetAllLogDrainsFilterV22
  | GetAllLogDrainsFilterV21;

export const GetAllLogDrainsDrainsFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Xmcp: "xmcp",
} as const;
export type GetAllLogDrainsDrainsFramework = ClosedEnum<
  typeof GetAllLogDrainsDrainsFramework
>;

export type GetAllLogDrainsDrainsProjectsMetadata = {
  id: string;
  name: string;
  framework?: GetAllLogDrainsDrainsFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type GetAllLogDrainsDrains2 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: GetAllLogDrainsDrainsLogDrainsCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetAllLogDrainsDrainsLogDrainsSchemas | undefined;
  delivery?:
    | GetAllLogDrainsDelivery1
    | GetAllLogDrainsDelivery2
    | GetAllLogDrainsDelivery3
    | GetAllLogDrainsDelivery4
    | GetAllLogDrainsDelivery5
    | undefined;
  sampling?: Array<GetAllLogDrainsDrainsLogDrainsSampling> | undefined;
  teamId?: string | null | undefined;
  status?: GetAllLogDrainsDrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: GetAllLogDrainsDrainsLogDrainsDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetAllLogDrainsSource2 | GetAllLogDrainsSource1;
  filter?: string | undefined;
  filterV2?: GetAllLogDrainsFilterV22 | GetAllLogDrainsFilterV21 | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?: Array<GetAllLogDrainsDrainsProjectsMetadata> | undefined;
};

export const GetAllLogDrainsDrainsCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type GetAllLogDrainsDrainsCreatedFrom = ClosedEnum<
  typeof GetAllLogDrainsDrainsCreatedFrom
>;

export type GetAllLogDrainsDrainsLog = {};

export type GetAllLogDrainsDrainsTrace = {};

export type GetAllLogDrainsDrainsLogDrainsAnalytics = {};

export type GetAllLogDrainsDrainsLogDrainsSpeedInsights = {};

export type GetAllLogDrainsDrainsSchemas = {
  log?: GetAllLogDrainsDrainsLog | undefined;
  trace?: GetAllLogDrainsDrainsTrace | undefined;
  analytics?: GetAllLogDrainsDrainsLogDrainsAnalytics | undefined;
  speedInsights?: GetAllLogDrainsDrainsLogDrainsSpeedInsights | undefined;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200Type = {
  Internal: "internal",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200Type = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsResponse200Type
>;

export const GetAllLogDrainsDeliveryLogDrainsTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsTarget = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsTarget
>;

export type GetAllLogDrainsDeliveryLogDrains5 = {
  type: GetAllLogDrainsDeliveryLogDrainsResponse200Type;
  target: GetAllLogDrainsDeliveryLogDrainsTarget;
};

export const GetAllLogDrainsDeliveryLogDrainsResponseType = {
  Clickhouse: "clickhouse",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsResponseType = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsResponseType
>;

export type GetAllLogDrainsDeliveryLogDrains4 = {
  type: GetAllLogDrainsDeliveryLogDrainsResponseType;
  endpoint: string;
  table: string;
};

export const GetAllLogDrainsDeliveryLogDrainsType = {
  Syslog: "syslog",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsType = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsType
>;

export type GetAllLogDrainsDeliveryLogDrains3 = {
  type: GetAllLogDrainsDeliveryLogDrainsType;
  endpoint: string;
  secret: string;
};

export const GetAllLogDrainsDeliveryType = {
  Otlphttp: "otlphttp",
} as const;
export type GetAllLogDrainsDeliveryType = ClosedEnum<
  typeof GetAllLogDrainsDeliveryType
>;

export type GetAllLogDrainsDeliveryEndpoint = {
  traces: string;
};

export const GetAllLogDrainsDeliveryEncoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type GetAllLogDrainsDeliveryEncoding = ClosedEnum<
  typeof GetAllLogDrainsDeliveryEncoding
>;

export type GetAllLogDrainsDeliveryLogDrains2 = {
  type: GetAllLogDrainsDeliveryType;
  endpoint: GetAllLogDrainsDeliveryEndpoint;
  encoding: GetAllLogDrainsDeliveryEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type =
  {
    Http: "http",
  } as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type =
  ClosedEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type
  >;

export const GetAllLogDrainsDeliveryLogDrainsResponse200Encoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type GetAllLogDrainsDeliveryLogDrainsResponse200Encoding = ClosedEnum<
  typeof GetAllLogDrainsDeliveryLogDrainsResponse200Encoding
>;

export const GetAllLogDrainsDeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type GetAllLogDrainsDeliveryCompression = ClosedEnum<
  typeof GetAllLogDrainsDeliveryCompression
>;

export type GetAllLogDrainsDeliveryLogDrains1 = {
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type;
  endpoint: string;
  encoding: GetAllLogDrainsDeliveryLogDrainsResponse200Encoding;
  compression?: GetAllLogDrainsDeliveryCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type GetAllLogDrainsDrainsDelivery =
  | GetAllLogDrainsDeliveryLogDrains1
  | GetAllLogDrainsDeliveryLogDrains2
  | GetAllLogDrainsDeliveryLogDrains3
  | GetAllLogDrainsDeliveryLogDrains4
  | GetAllLogDrainsDeliveryLogDrains5;

export const GetAllLogDrainsDrainsLogDrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type GetAllLogDrainsDrainsLogDrainsType = ClosedEnum<
  typeof GetAllLogDrainsDrainsLogDrainsType
>;

export const GetAllLogDrainsDrainsLogDrainsEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type GetAllLogDrainsDrainsLogDrainsEnv = ClosedEnum<
  typeof GetAllLogDrainsDrainsLogDrainsEnv
>;

export type GetAllLogDrainsDrainsSampling = {
  type: GetAllLogDrainsDrainsLogDrainsType;
  rate: number;
  env?: GetAllLogDrainsDrainsLogDrainsEnv | undefined;
  requestPath?: string | undefined;
};

export const GetAllLogDrainsDrainsLogDrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type GetAllLogDrainsDrainsLogDrainsStatus = ClosedEnum<
  typeof GetAllLogDrainsDrainsLogDrainsStatus
>;

export const GetAllLogDrainsDrainsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type GetAllLogDrainsDrainsDisabledReason = ClosedEnum<
  typeof GetAllLogDrainsDrainsDisabledReason
>;

export const GetAllLogDrainsSourceLogDrainsResponse200Kind = {
  Integration: "integration",
} as const;
export type GetAllLogDrainsSourceLogDrainsResponse200Kind = ClosedEnum<
  typeof GetAllLogDrainsSourceLogDrainsResponse200Kind
>;

export type GetAllLogDrainsSourceLogDrains2 = {
  kind: GetAllLogDrainsSourceLogDrainsResponse200Kind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const GetAllLogDrainsSourceLogDrainsResponseKind = {
  SelfServed: "self-served",
} as const;
export type GetAllLogDrainsSourceLogDrainsResponseKind = ClosedEnum<
  typeof GetAllLogDrainsSourceLogDrainsResponseKind
>;

export type GetAllLogDrainsSourceLogDrains1 = {
  kind: GetAllLogDrainsSourceLogDrainsResponseKind;
};

export type GetAllLogDrainsDrainsLogDrainsSource =
  | GetAllLogDrainsSourceLogDrains2
  | GetAllLogDrainsSourceLogDrains1;

export const GetAllLogDrainsFilterV2LogDrainsResponse200Version = {
  V2: "v2",
} as const;
export type GetAllLogDrainsFilterV2LogDrainsResponse200Version = ClosedEnum<
  typeof GetAllLogDrainsFilterV2LogDrainsResponse200Version
>;

export const GetAllLogDrainsFilterType = {
  Odata: "odata",
} as const;
export type GetAllLogDrainsFilterType = ClosedEnum<
  typeof GetAllLogDrainsFilterType
>;

export type GetAllLogDrainsFilterLogDrains2 = {
  type: GetAllLogDrainsFilterType;
  text: string;
};

export const GetAllLogDrainsFilterLogDrainsResponse200Type = {
  Basic: "basic",
} as const;
export type GetAllLogDrainsFilterLogDrainsResponse200Type = ClosedEnum<
  typeof GetAllLogDrainsFilterLogDrainsResponse200Type
>;

export type GetAllLogDrainsFilterLogDrainsProject = {
  ids?: Array<string> | undefined;
};

export type GetAllLogDrainsFilterLogDrainsLog = {
  sources?: Array<string> | undefined;
};

export type GetAllLogDrainsFilterDeployment = {
  environments?: Array<string> | undefined;
};

export type GetAllLogDrainsFilterLogDrains1 = {
  type: GetAllLogDrainsFilterLogDrainsResponse200Type;
  project?: GetAllLogDrainsFilterLogDrainsProject | undefined;
  log?: GetAllLogDrainsFilterLogDrainsLog | undefined;
  deployment?: GetAllLogDrainsFilterDeployment | undefined;
};

export type GetAllLogDrainsFilterV2Filter =
  | GetAllLogDrainsFilterLogDrains2
  | GetAllLogDrainsFilterLogDrains1;

export type GetAllLogDrainsFilterV2LogDrains2 = {
  version: GetAllLogDrainsFilterV2LogDrainsResponse200Version;
  filter: GetAllLogDrainsFilterLogDrains2 | GetAllLogDrainsFilterLogDrains1;
};

export const GetAllLogDrainsFilterV2LogDrainsResponseVersion = {
  V1: "v1",
} as const;
export type GetAllLogDrainsFilterV2LogDrainsResponseVersion = ClosedEnum<
  typeof GetAllLogDrainsFilterV2LogDrainsResponseVersion
>;

export type GetAllLogDrainsFilterV2LogDrains1 = {
  version: GetAllLogDrainsFilterV2LogDrainsResponseVersion;
};

export type GetAllLogDrainsDrainsFilterV2 =
  | GetAllLogDrainsFilterV2LogDrains2
  | GetAllLogDrainsFilterV2LogDrains1;

export type GetAllLogDrainsDrains1 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: GetAllLogDrainsDrainsCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetAllLogDrainsDrainsSchemas | undefined;
  delivery?:
    | GetAllLogDrainsDeliveryLogDrains1
    | GetAllLogDrainsDeliveryLogDrains2
    | GetAllLogDrainsDeliveryLogDrains3
    | GetAllLogDrainsDeliveryLogDrains4
    | GetAllLogDrainsDeliveryLogDrains5
    | undefined;
  sampling?: Array<GetAllLogDrainsDrainsSampling> | undefined;
  teamId?: string | null | undefined;
  status?: GetAllLogDrainsDrainsLogDrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: GetAllLogDrainsDrainsDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetAllLogDrainsSourceLogDrains2 | GetAllLogDrainsSourceLogDrains1;
  filter?: string | undefined;
  filterV2?:
    | GetAllLogDrainsFilterV2LogDrains2
    | GetAllLogDrainsFilterV2LogDrains1
    | undefined;
};

export type ResponseBodyDrains =
  | Array<GetAllLogDrainsDrains1>
  | Array<GetAllLogDrainsDrains2>;

export type GetAllLogDrainsResponseBody1 = {
  drains: Array<GetAllLogDrainsDrains1> | Array<GetAllLogDrainsDrains2>;
};

export type GetAllLogDrainsResponseBody =
  | GetAllLogDrainsResponseBody1
  | Array<GetAllLogDrainsResponseBody2>;

/** @internal */
export const GetAllLogDrainsRequest$inboundSchema: z.ZodType<
  GetAllLogDrainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string().optional(),
  includeMetadata: z.boolean().default(false),
  projectIdOrName: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsRequest$Outbound = {
  projectId?: string | undefined;
  includeMetadata: boolean;
  projectIdOrName?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsRequest$outboundSchema: z.ZodType<
  GetAllLogDrainsRequest$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsRequest
> = z.object({
  projectId: z.string().optional(),
  includeMetadata: z.boolean().default(false),
  projectIdOrName: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsRequest$ {
  /** @deprecated use `GetAllLogDrainsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsRequest$inboundSchema;
  /** @deprecated use `GetAllLogDrainsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsRequest$outboundSchema;
  /** @deprecated use `GetAllLogDrainsRequest$Outbound` instead. */
  export type Outbound = GetAllLogDrainsRequest$Outbound;
}

export function getAllLogDrainsRequestToJSON(
  getAllLogDrainsRequest: GetAllLogDrainsRequest,
): string {
  return JSON.stringify(
    GetAllLogDrainsRequest$outboundSchema.parse(getAllLogDrainsRequest),
  );
}

export function getAllLogDrainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsResponseBodyFramework$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsResponseBodyFramework> = z.nativeEnum(
    GetAllLogDrainsResponseBodyFramework,
  );

/** @internal */
export const GetAllLogDrainsResponseBodyFramework$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsResponseBodyFramework> =
    GetAllLogDrainsResponseBodyFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsResponseBodyFramework$ {
  /** @deprecated use `GetAllLogDrainsResponseBodyFramework$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsResponseBodyFramework$inboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBodyFramework$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsResponseBodyFramework$outboundSchema;
}

/** @internal */
export const ResponseBodyProjectsMetadata$inboundSchema: z.ZodType<
  ResponseBodyProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetAllLogDrainsResponseBodyFramework$inboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type ResponseBodyProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const ResponseBodyProjectsMetadata$outboundSchema: z.ZodType<
  ResponseBodyProjectsMetadata$Outbound,
  z.ZodTypeDef,
  ResponseBodyProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetAllLogDrainsResponseBodyFramework$outboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyProjectsMetadata$ {
  /** @deprecated use `ResponseBodyProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyProjectsMetadata$inboundSchema;
  /** @deprecated use `ResponseBodyProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyProjectsMetadata$outboundSchema;
  /** @deprecated use `ResponseBodyProjectsMetadata$Outbound` instead. */
  export type Outbound = ResponseBodyProjectsMetadata$Outbound;
}

export function responseBodyProjectsMetadataToJSON(
  responseBodyProjectsMetadata: ResponseBodyProjectsMetadata,
): string {
  return JSON.stringify(
    ResponseBodyProjectsMetadata$outboundSchema.parse(
      responseBodyProjectsMetadata,
    ),
  );
}

export function responseBodyProjectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyProjectsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyProjectsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsResponseBody2$inboundSchema: z.ZodType<
  GetAllLogDrainsResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectsMetadata: z.nullable(
    z.array(z.lazy(() => ResponseBodyProjectsMetadata$inboundSchema)),
  ).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsResponseBody2$Outbound = {
  projectsMetadata?:
    | Array<ResponseBodyProjectsMetadata$Outbound>
    | null
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsResponseBody2$outboundSchema: z.ZodType<
  GetAllLogDrainsResponseBody2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsResponseBody2
> = z.object({
  projectsMetadata: z.nullable(
    z.array(z.lazy(() => ResponseBodyProjectsMetadata$outboundSchema)),
  ).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsResponseBody2$ {
  /** @deprecated use `GetAllLogDrainsResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsResponseBody2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsResponseBody2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBody2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsResponseBody2$Outbound;
}

export function getAllLogDrainsResponseBody2ToJSON(
  getAllLogDrainsResponseBody2: GetAllLogDrainsResponseBody2,
): string {
  return JSON.stringify(
    GetAllLogDrainsResponseBody2$outboundSchema.parse(
      getAllLogDrainsResponseBody2,
    ),
  );
}

export function getAllLogDrainsResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsCreatedFrom$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsLogDrainsCreatedFrom> = z
    .nativeEnum(GetAllLogDrainsDrainsLogDrainsCreatedFrom);

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsCreatedFrom$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsLogDrainsCreatedFrom> =
    GetAllLogDrainsDrainsLogDrainsCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsCreatedFrom$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsCreatedFrom$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsCreatedFrom$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsCreatedFrom$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsCreatedFrom$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsLog$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsLog$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsLog$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsLog$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsLog$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsLogDrainsLog$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsLog$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsLog$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsLog$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsLog$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsLogToJSON(
  getAllLogDrainsDrainsLogDrainsLog: GetAllLogDrainsDrainsLogDrainsLog,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsLog$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsLog,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsLogDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsTrace$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsTrace$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsTrace$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsTrace$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsTrace$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsTrace$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsTrace$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsTrace$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsTrace$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsTrace$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsTrace$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsTraceToJSON(
  getAllLogDrainsDrainsLogDrainsTrace: GetAllLogDrainsDrainsLogDrainsTrace,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsTrace$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsTrace,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsTraceFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsTrace' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsAnalytics$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsAnalytics$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsAnalytics$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsAnalytics$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsAnalytics$ {
  /** @deprecated use `GetAllLogDrainsDrainsAnalytics$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsAnalytics$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsAnalytics$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsAnalytics$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsAnalytics$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsAnalytics$Outbound;
}

export function getAllLogDrainsDrainsAnalyticsToJSON(
  getAllLogDrainsDrainsAnalytics: GetAllLogDrainsDrainsAnalytics,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsAnalytics$outboundSchema.parse(
      getAllLogDrainsDrainsAnalytics,
    ),
  );
}

export function getAllLogDrainsDrainsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsAnalytics' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsSpeedInsights$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsSpeedInsights$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsSpeedInsights$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSpeedInsights$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsSpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsSpeedInsights$ {
  /** @deprecated use `GetAllLogDrainsDrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsSpeedInsights$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsSpeedInsights$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSpeedInsights$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsSpeedInsights$Outbound;
}

export function getAllLogDrainsDrainsSpeedInsightsToJSON(
  getAllLogDrainsDrainsSpeedInsights: GetAllLogDrainsDrainsSpeedInsights,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsSpeedInsights$outboundSchema.parse(
      getAllLogDrainsDrainsSpeedInsights,
    ),
  );
}

export function getAllLogDrainsDrainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsSpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsSpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSchemas$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => GetAllLogDrainsDrainsLogDrainsLog$inboundSchema).optional(),
  trace: z.lazy(() => GetAllLogDrainsDrainsLogDrainsTrace$inboundSchema)
    .optional(),
  analytics: z.lazy(() => GetAllLogDrainsDrainsAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() => GetAllLogDrainsDrainsSpeedInsights$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsSchemas$Outbound = {
  log?: GetAllLogDrainsDrainsLogDrainsLog$Outbound | undefined;
  trace?: GetAllLogDrainsDrainsLogDrainsTrace$Outbound | undefined;
  analytics?: GetAllLogDrainsDrainsAnalytics$Outbound | undefined;
  speed_insights?: GetAllLogDrainsDrainsSpeedInsights$Outbound | undefined;
};

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSchemas$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsSchemas$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsSchemas
> = z.object({
  log: z.lazy(() => GetAllLogDrainsDrainsLogDrainsLog$outboundSchema)
    .optional(),
  trace: z.lazy(() => GetAllLogDrainsDrainsLogDrainsTrace$outboundSchema)
    .optional(),
  analytics: z.lazy(() => GetAllLogDrainsDrainsAnalytics$outboundSchema)
    .optional(),
  speedInsights: z.lazy(() => GetAllLogDrainsDrainsSpeedInsights$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsSchemas$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSchemas$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsSchemas$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSchemas$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsSchemas$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSchemas$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsSchemas$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsSchemasToJSON(
  getAllLogDrainsDrainsLogDrainsSchemas: GetAllLogDrainsDrainsLogDrainsSchemas,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsSchemas$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsSchemas,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsSchemasFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsSchemas' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type
  > = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type
  > =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryTarget
> = z.nativeEnum(GetAllLogDrainsDeliveryTarget);

/** @internal */
export const GetAllLogDrainsDeliveryTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryTarget
> = GetAllLogDrainsDeliveryTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryTarget$ {
  /** @deprecated use `GetAllLogDrainsDeliveryTarget$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryTarget$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryTarget$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDeliveryTarget$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDelivery5$inboundSchema: z.ZodType<
  GetAllLogDrainsDelivery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$inboundSchema,
  target: GetAllLogDrainsDeliveryTarget$inboundSchema,
});

/** @internal */
export type GetAllLogDrainsDelivery5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const GetAllLogDrainsDelivery5$outboundSchema: z.ZodType<
  GetAllLogDrainsDelivery5$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDelivery5
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains2Type$outboundSchema,
  target: GetAllLogDrainsDeliveryTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDelivery5$ {
  /** @deprecated use `GetAllLogDrainsDelivery5$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDelivery5$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery5$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDelivery5$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery5$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDelivery5$Outbound;
}

export function getAllLogDrainsDelivery5ToJSON(
  getAllLogDrainsDelivery5: GetAllLogDrainsDelivery5,
): string {
  return JSON.stringify(
    GetAllLogDrainsDelivery5$outboundSchema.parse(getAllLogDrainsDelivery5),
  );
}

export function getAllLogDrainsDelivery5FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDelivery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDelivery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDelivery5' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType
  > = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType
  > =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDelivery4$inboundSchema: z.ZodType<
  GetAllLogDrainsDelivery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type GetAllLogDrainsDelivery4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const GetAllLogDrainsDelivery4$outboundSchema: z.ZodType<
  GetAllLogDrainsDelivery4$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDelivery4
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1DrainsType$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDelivery4$ {
  /** @deprecated use `GetAllLogDrainsDelivery4$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDelivery4$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery4$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDelivery4$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery4$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDelivery4$Outbound;
}

export function getAllLogDrainsDelivery4ToJSON(
  getAllLogDrainsDelivery4: GetAllLogDrainsDelivery4,
): string {
  return JSON.stringify(
    GetAllLogDrainsDelivery4$outboundSchema.parse(getAllLogDrainsDelivery4),
  );
}

export function getAllLogDrainsDelivery4FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDelivery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDelivery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDelivery4' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type
  > = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type
  > =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDelivery3$inboundSchema: z.ZodType<
  GetAllLogDrainsDelivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type GetAllLogDrainsDelivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const GetAllLogDrainsDelivery3$outboundSchema: z.ZodType<
  GetAllLogDrainsDelivery3$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDelivery3
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Type$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDelivery3$ {
  /** @deprecated use `GetAllLogDrainsDelivery3$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDelivery3$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery3$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDelivery3$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery3$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDelivery3$Outbound;
}

export function getAllLogDrainsDelivery3ToJSON(
  getAllLogDrainsDelivery3: GetAllLogDrainsDelivery3,
): string {
  return JSON.stringify(
    GetAllLogDrainsDelivery3$outboundSchema.parse(getAllLogDrainsDelivery3),
  );
}

export function getAllLogDrainsDelivery3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDelivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDelivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDelivery3' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType
  > =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsEndpoint$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrainsEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type GetAllLogDrainsDeliveryLogDrainsEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsEndpoint$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrainsEndpoint$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryLogDrainsEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsEndpoint$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsEndpoint$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsEndpoint$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsEndpoint$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsEndpoint$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsEndpoint$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryLogDrainsEndpoint$Outbound;
}

export function getAllLogDrainsDeliveryLogDrainsEndpointToJSON(
  getAllLogDrainsDeliveryLogDrainsEndpoint:
    GetAllLogDrainsDeliveryLogDrainsEndpoint,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryLogDrainsEndpoint$outboundSchema.parse(
      getAllLogDrainsDeliveryLogDrainsEndpoint,
    ),
  );
}

export function getAllLogDrainsDeliveryLogDrainsEndpointFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllLogDrainsDeliveryLogDrainsEndpoint,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDeliveryLogDrainsEndpoint$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllLogDrainsDeliveryLogDrainsEndpoint' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponseEncoding$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponseEncoding> = z
    .nativeEnum(GetAllLogDrainsDeliveryLogDrainsResponseEncoding);

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponseEncoding$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponseEncoding> =
    GetAllLogDrainsDeliveryLogDrainsResponseEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponseEncoding$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponseEncoding$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponseEncoding$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponseEncoding$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponseEncoding$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDelivery2$inboundSchema: z.ZodType<
  GetAllLogDrainsDelivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  endpoint: z.lazy(() =>
    GetAllLogDrainsDeliveryLogDrainsEndpoint$inboundSchema
  ),
  encoding: GetAllLogDrainsDeliveryLogDrainsResponseEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDelivery2$Outbound = {
  type: string;
  endpoint: GetAllLogDrainsDeliveryLogDrainsEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDelivery2$outboundSchema: z.ZodType<
  GetAllLogDrainsDelivery2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDelivery2
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  endpoint: z.lazy(() =>
    GetAllLogDrainsDeliveryLogDrainsEndpoint$outboundSchema
  ),
  encoding: GetAllLogDrainsDeliveryLogDrainsResponseEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDelivery2$ {
  /** @deprecated use `GetAllLogDrainsDelivery2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDelivery2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDelivery2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDelivery2$Outbound;
}

export function getAllLogDrainsDelivery2ToJSON(
  getAllLogDrainsDelivery2: GetAllLogDrainsDelivery2,
): string {
  return JSON.stringify(
    GetAllLogDrainsDelivery2$outboundSchema.parse(getAllLogDrainsDelivery2),
  );
}

export function getAllLogDrainsDelivery2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDelivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDelivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDelivery2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType
  > = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType
  > =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsEncoding$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsEncoding> = z
    .nativeEnum(GetAllLogDrainsDeliveryLogDrainsEncoding);

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsEncoding$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsEncoding> =
    GetAllLogDrainsDeliveryLogDrainsEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsEncoding$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsEncoding$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsEncoding$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsEncoding$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsEncoding$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsCompression$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsCompression> = z
    .nativeEnum(GetAllLogDrainsDeliveryLogDrainsCompression);

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsCompression$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsCompression> =
    GetAllLogDrainsDeliveryLogDrainsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsCompression$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsCompression$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsCompression$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsCompression$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsCompression$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDelivery1$inboundSchema: z.ZodType<
  GetAllLogDrainsDelivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$inboundSchema,
  endpoint: z.string(),
  encoding: GetAllLogDrainsDeliveryLogDrainsEncoding$inboundSchema,
  compression: GetAllLogDrainsDeliveryLogDrainsCompression$inboundSchema
    .optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDelivery1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDelivery1$outboundSchema: z.ZodType<
  GetAllLogDrainsDelivery1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDelivery1
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONType$outboundSchema,
  endpoint: z.string(),
  encoding: GetAllLogDrainsDeliveryLogDrainsEncoding$outboundSchema,
  compression: GetAllLogDrainsDeliveryLogDrainsCompression$outboundSchema
    .optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDelivery1$ {
  /** @deprecated use `GetAllLogDrainsDelivery1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDelivery1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDelivery1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDelivery1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDelivery1$Outbound;
}

export function getAllLogDrainsDelivery1ToJSON(
  getAllLogDrainsDelivery1: GetAllLogDrainsDelivery1,
): string {
  return JSON.stringify(
    GetAllLogDrainsDelivery1$outboundSchema.parse(getAllLogDrainsDelivery1),
  );
}

export function getAllLogDrainsDelivery1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDelivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDelivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDelivery1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsDelivery$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsDelivery1$inboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery2$inboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery3$inboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery4$inboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery5$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsDelivery$Outbound =
  | GetAllLogDrainsDelivery1$Outbound
  | GetAllLogDrainsDelivery2$Outbound
  | GetAllLogDrainsDelivery3$Outbound
  | GetAllLogDrainsDelivery4$Outbound
  | GetAllLogDrainsDelivery5$Outbound;

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsDelivery$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsDelivery$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsDelivery
> = z.union([
  z.lazy(() => GetAllLogDrainsDelivery1$outboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery2$outboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery3$outboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery4$outboundSchema),
  z.lazy(() => GetAllLogDrainsDelivery5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsDelivery$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsDelivery$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsDelivery$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsDelivery$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsDelivery$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsDelivery$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsDelivery$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsDeliveryToJSON(
  getAllLogDrainsDrainsLogDrainsDelivery:
    GetAllLogDrainsDrainsLogDrainsDelivery,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsDelivery$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsDelivery,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsDelivery' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsType
> = z.nativeEnum(GetAllLogDrainsDrainsType);

/** @internal */
export const GetAllLogDrainsDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsType
> = GetAllLogDrainsDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsType$ {
  /** @deprecated use `GetAllLogDrainsDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsEnv$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsEnv
> = z.nativeEnum(GetAllLogDrainsDrainsEnv);

/** @internal */
export const GetAllLogDrainsDrainsEnv$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsEnv
> = GetAllLogDrainsDrainsEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsEnv$ {
  /** @deprecated use `GetAllLogDrainsDrainsEnv$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsEnv$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsEnv$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsEnv$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSampling$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsDrainsType$inboundSchema,
  rate: z.number(),
  env: GetAllLogDrainsDrainsEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSampling$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsSampling$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsSampling
> = z.object({
  type: GetAllLogDrainsDrainsType$outboundSchema,
  rate: z.number(),
  env: GetAllLogDrainsDrainsEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsSampling$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSampling$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsSampling$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSampling$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsSampling$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSampling$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsSampling$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsSamplingToJSON(
  getAllLogDrainsDrainsLogDrainsSampling:
    GetAllLogDrainsDrainsLogDrainsSampling,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsSampling$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsSampling,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsSamplingFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsSampling' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsStatus
> = z.nativeEnum(GetAllLogDrainsDrainsStatus);

/** @internal */
export const GetAllLogDrainsDrainsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsStatus
> = GetAllLogDrainsDrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsStatus$ {
  /** @deprecated use `GetAllLogDrainsDrainsStatus$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsStatus$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsStatus$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsStatus$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsDisabledReason$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsLogDrainsDisabledReason> = z
    .nativeEnum(GetAllLogDrainsDrainsLogDrainsDisabledReason);

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsLogDrainsDisabledReason> =
    GetAllLogDrainsDrainsLogDrainsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsDisabledReason$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsDisabledReason$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsDisabledReason$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsSourceLogDrainsKind$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsSourceLogDrainsKind
> = z.nativeEnum(GetAllLogDrainsSourceLogDrainsKind);

/** @internal */
export const GetAllLogDrainsSourceLogDrainsKind$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsSourceLogDrainsKind
> = GetAllLogDrainsSourceLogDrainsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSourceLogDrainsKind$ {
  /** @deprecated use `GetAllLogDrainsSourceLogDrainsKind$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsSourceLogDrainsKind$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrainsKind$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsSourceLogDrainsKind$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsSource2$inboundSchema: z.ZodType<
  GetAllLogDrainsSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetAllLogDrainsSourceLogDrainsKind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetAllLogDrainsSource2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const GetAllLogDrainsSource2$outboundSchema: z.ZodType<
  GetAllLogDrainsSource2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsSource2
> = z.object({
  kind: GetAllLogDrainsSourceLogDrainsKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSource2$ {
  /** @deprecated use `GetAllLogDrainsSource2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsSource2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSource2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsSource2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsSource2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsSource2$Outbound;
}

export function getAllLogDrainsSource2ToJSON(
  getAllLogDrainsSource2: GetAllLogDrainsSource2,
): string {
  return JSON.stringify(
    GetAllLogDrainsSource2$outboundSchema.parse(getAllLogDrainsSource2),
  );
}

export function getAllLogDrainsSource2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsSource2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsSourceKind$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsSourceKind
> = z.nativeEnum(GetAllLogDrainsSourceKind);

/** @internal */
export const GetAllLogDrainsSourceKind$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsSourceKind
> = GetAllLogDrainsSourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSourceKind$ {
  /** @deprecated use `GetAllLogDrainsSourceKind$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsSourceKind$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceKind$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsSourceKind$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsSource1$inboundSchema: z.ZodType<
  GetAllLogDrainsSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetAllLogDrainsSourceKind$inboundSchema,
});

/** @internal */
export type GetAllLogDrainsSource1$Outbound = {
  kind: string;
};

/** @internal */
export const GetAllLogDrainsSource1$outboundSchema: z.ZodType<
  GetAllLogDrainsSource1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsSource1
> = z.object({
  kind: GetAllLogDrainsSourceKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSource1$ {
  /** @deprecated use `GetAllLogDrainsSource1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsSource1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSource1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsSource1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsSource1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsSource1$Outbound;
}

export function getAllLogDrainsSource1ToJSON(
  getAllLogDrainsSource1: GetAllLogDrainsSource1,
): string {
  return JSON.stringify(
    GetAllLogDrainsSource1$outboundSchema.parse(getAllLogDrainsSource1),
  );
}

export function getAllLogDrainsSource1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsSource1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsSource$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsSource2$inboundSchema),
  z.lazy(() => GetAllLogDrainsSource1$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsDrainsSource$Outbound =
  | GetAllLogDrainsSource2$Outbound
  | GetAllLogDrainsSource1$Outbound;

/** @internal */
export const GetAllLogDrainsDrainsSource$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSource$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsSource
> = z.union([
  z.lazy(() => GetAllLogDrainsSource2$outboundSchema),
  z.lazy(() => GetAllLogDrainsSource1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsSource$ {
  /** @deprecated use `GetAllLogDrainsDrainsSource$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsSource$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSource$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsSource$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSource$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsSource$Outbound;
}

export function getAllLogDrainsDrainsSourceToJSON(
  getAllLogDrainsDrainsSource: GetAllLogDrainsDrainsSource,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsSource$outboundSchema.parse(
      getAllLogDrainsDrainsSource,
    ),
  );
}

export function getAllLogDrainsDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsSource' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterV2LogDrainsVersion> = z
    .nativeEnum(GetAllLogDrainsFilterV2LogDrainsVersion);

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterV2LogDrainsVersion> =
    GetAllLogDrainsFilterV2LogDrainsVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2LogDrainsVersion$ {
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterV2LogDrainsVersion$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterV2LogDrainsVersion$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterLogDrainsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterLogDrainsResponseType> = z
    .nativeEnum(GetAllLogDrainsFilterLogDrainsResponseType);

/** @internal */
export const GetAllLogDrainsFilterLogDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterLogDrainsResponseType> =
    GetAllLogDrainsFilterLogDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrainsResponseType$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterLogDrainsResponseType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterLogDrainsResponseType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilter2$inboundSchema: z.ZodType<
  GetAllLogDrainsFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsFilterLogDrainsResponseType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllLogDrainsFilter2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllLogDrainsFilter2$outboundSchema: z.ZodType<
  GetAllLogDrainsFilter2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilter2
> = z.object({
  type: GetAllLogDrainsFilterLogDrainsResponseType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilter2$ {
  /** @deprecated use `GetAllLogDrainsFilter2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilter2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilter2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilter2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilter2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilter2$Outbound;
}

export function getAllLogDrainsFilter2ToJSON(
  getAllLogDrainsFilter2: GetAllLogDrainsFilter2,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilter2$outboundSchema.parse(getAllLogDrainsFilter2),
  );
}

export function getAllLogDrainsFilter2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilter2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterLogDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsFilterLogDrainsType
> = z.nativeEnum(GetAllLogDrainsFilterLogDrainsType);

/** @internal */
export const GetAllLogDrainsFilterLogDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsFilterLogDrainsType
> = GetAllLogDrainsFilterLogDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrainsType$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterLogDrainsType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterLogDrainsType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterProject$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type GetAllLogDrainsFilterProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterProject$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterProject$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterProject$ {
  /** @deprecated use `GetAllLogDrainsFilterProject$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterProject$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterProject$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterProject$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterProject$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterProject$Outbound;
}

export function getAllLogDrainsFilterProjectToJSON(
  getAllLogDrainsFilterProject: GetAllLogDrainsFilterProject,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterProject$outboundSchema.parse(
      getAllLogDrainsFilterProject,
    ),
  );
}

export function getAllLogDrainsFilterProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterProject' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterLog$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type GetAllLogDrainsFilterLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterLog$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterLog$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLog$ {
  /** @deprecated use `GetAllLogDrainsFilterLog$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterLog$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLog$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterLog$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLog$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterLog$Outbound;
}

export function getAllLogDrainsFilterLogToJSON(
  getAllLogDrainsFilterLog: GetAllLogDrainsFilterLog,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterLog$outboundSchema.parse(getAllLogDrainsFilterLog),
  );
}

export function getAllLogDrainsFilterLogFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterLog' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterLogDrainsDeployment$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrainsDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type GetAllLogDrainsFilterLogDrainsDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterLogDrainsDeployment$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrainsDeployment$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterLogDrainsDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrainsDeployment$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsDeployment$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterLogDrainsDeployment$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsDeployment$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterLogDrainsDeployment$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsDeployment$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterLogDrainsDeployment$Outbound;
}

export function getAllLogDrainsFilterLogDrainsDeploymentToJSON(
  getAllLogDrainsFilterLogDrainsDeployment:
    GetAllLogDrainsFilterLogDrainsDeployment,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterLogDrainsDeployment$outboundSchema.parse(
      getAllLogDrainsFilterLogDrainsDeployment,
    ),
  );
}

export function getAllLogDrainsFilterLogDrainsDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllLogDrainsFilterLogDrainsDeployment,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsFilterLogDrainsDeployment$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllLogDrainsFilterLogDrainsDeployment' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilter1$inboundSchema: z.ZodType<
  GetAllLogDrainsFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsFilterLogDrainsType$inboundSchema,
  project: z.lazy(() => GetAllLogDrainsFilterProject$inboundSchema).optional(),
  log: z.lazy(() => GetAllLogDrainsFilterLog$inboundSchema).optional(),
  deployment: z.lazy(() =>
    GetAllLogDrainsFilterLogDrainsDeployment$inboundSchema
  ).optional(),
});

/** @internal */
export type GetAllLogDrainsFilter1$Outbound = {
  type: string;
  project?: GetAllLogDrainsFilterProject$Outbound | undefined;
  log?: GetAllLogDrainsFilterLog$Outbound | undefined;
  deployment?: GetAllLogDrainsFilterLogDrainsDeployment$Outbound | undefined;
};

/** @internal */
export const GetAllLogDrainsFilter1$outboundSchema: z.ZodType<
  GetAllLogDrainsFilter1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilter1
> = z.object({
  type: GetAllLogDrainsFilterLogDrainsType$outboundSchema,
  project: z.lazy(() => GetAllLogDrainsFilterProject$outboundSchema).optional(),
  log: z.lazy(() => GetAllLogDrainsFilterLog$outboundSchema).optional(),
  deployment: z.lazy(() =>
    GetAllLogDrainsFilterLogDrainsDeployment$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilter1$ {
  /** @deprecated use `GetAllLogDrainsFilter1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilter1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilter1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilter1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilter1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilter1$Outbound;
}

export function getAllLogDrainsFilter1ToJSON(
  getAllLogDrainsFilter1: GetAllLogDrainsFilter1,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilter1$outboundSchema.parse(getAllLogDrainsFilter1),
  );
}

export function getAllLogDrainsFilter1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilter1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsFilter$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2LogDrainsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsFilter2$inboundSchema),
  z.lazy(() => GetAllLogDrainsFilter1$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsFilterV2LogDrainsFilter$Outbound =
  | GetAllLogDrainsFilter2$Outbound
  | GetAllLogDrainsFilter1$Outbound;

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsFilter$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2LogDrainsFilter$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterV2LogDrainsFilter
> = z.union([
  z.lazy(() => GetAllLogDrainsFilter2$outboundSchema),
  z.lazy(() => GetAllLogDrainsFilter1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2LogDrainsFilter$ {
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsFilter$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterV2LogDrainsFilter$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsFilter$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterV2LogDrainsFilter$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsFilter$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterV2LogDrainsFilter$Outbound;
}

export function getAllLogDrainsFilterV2LogDrainsFilterToJSON(
  getAllLogDrainsFilterV2LogDrainsFilter:
    GetAllLogDrainsFilterV2LogDrainsFilter,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterV2LogDrainsFilter$outboundSchema.parse(
      getAllLogDrainsFilterV2LogDrainsFilter,
    ),
  );
}

export function getAllLogDrainsFilterV2LogDrainsFilterFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterV2LogDrainsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsFilterV2LogDrainsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterV2LogDrainsFilter' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV22$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterV22,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetAllLogDrainsFilterV2LogDrainsVersion$inboundSchema,
  filter: z.union([
    z.lazy(() => GetAllLogDrainsFilter2$inboundSchema),
    z.lazy(() => GetAllLogDrainsFilter1$inboundSchema),
  ]),
});

/** @internal */
export type GetAllLogDrainsFilterV22$Outbound = {
  version: string;
  filter: GetAllLogDrainsFilter2$Outbound | GetAllLogDrainsFilter1$Outbound;
};

/** @internal */
export const GetAllLogDrainsFilterV22$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterV22$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterV22
> = z.object({
  version: GetAllLogDrainsFilterV2LogDrainsVersion$outboundSchema,
  filter: z.union([
    z.lazy(() => GetAllLogDrainsFilter2$outboundSchema),
    z.lazy(() => GetAllLogDrainsFilter1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV22$ {
  /** @deprecated use `GetAllLogDrainsFilterV22$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterV22$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV22$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterV22$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV22$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterV22$Outbound;
}

export function getAllLogDrainsFilterV22ToJSON(
  getAllLogDrainsFilterV22: GetAllLogDrainsFilterV22,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterV22$outboundSchema.parse(getAllLogDrainsFilterV22),
  );
}

export function getAllLogDrainsFilterV22FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterV22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterV22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterV22' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2Version$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsFilterV2Version
> = z.nativeEnum(GetAllLogDrainsFilterV2Version);

/** @internal */
export const GetAllLogDrainsFilterV2Version$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsFilterV2Version
> = GetAllLogDrainsFilterV2Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2Version$ {
  /** @deprecated use `GetAllLogDrainsFilterV2Version$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterV2Version$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2Version$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterV2Version$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterV21$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterV21,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetAllLogDrainsFilterV2Version$inboundSchema,
});

/** @internal */
export type GetAllLogDrainsFilterV21$Outbound = {
  version: string;
};

/** @internal */
export const GetAllLogDrainsFilterV21$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterV21$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterV21
> = z.object({
  version: GetAllLogDrainsFilterV2Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV21$ {
  /** @deprecated use `GetAllLogDrainsFilterV21$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterV21$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV21$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterV21$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV21$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterV21$Outbound;
}

export function getAllLogDrainsFilterV21ToJSON(
  getAllLogDrainsFilterV21: GetAllLogDrainsFilterV21,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterV21$outboundSchema.parse(getAllLogDrainsFilterV21),
  );
}

export function getAllLogDrainsFilterV21FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterV21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterV21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterV21' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsFilterV2$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsFilterV22$inboundSchema),
  z.lazy(() => GetAllLogDrainsFilterV21$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsFilterV2$Outbound =
  | GetAllLogDrainsFilterV22$Outbound
  | GetAllLogDrainsFilterV21$Outbound;

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsFilterV2$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsFilterV2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsFilterV2
> = z.union([
  z.lazy(() => GetAllLogDrainsFilterV22$outboundSchema),
  z.lazy(() => GetAllLogDrainsFilterV21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsFilterV2$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsFilterV2$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsFilterV2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsFilterV2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsFilterV2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsFilterV2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsFilterV2$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsFilterV2ToJSON(
  getAllLogDrainsDrainsLogDrainsFilterV2:
    GetAllLogDrainsDrainsLogDrainsFilterV2,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsFilterV2$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsFilterV2,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsFilterV2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsFramework$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsFramework
> = z.nativeEnum(GetAllLogDrainsDrainsFramework);

/** @internal */
export const GetAllLogDrainsDrainsFramework$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsFramework
> = GetAllLogDrainsDrainsFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsFramework$ {
  /** @deprecated use `GetAllLogDrainsDrainsFramework$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsFramework$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsFramework$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsFramework$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsProjectsMetadata$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetAllLogDrainsDrainsFramework$inboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDrainsProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDrainsProjectsMetadata$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsProjectsMetadata$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetAllLogDrainsDrainsFramework$outboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsProjectsMetadata$ {
  /** @deprecated use `GetAllLogDrainsDrainsProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsProjectsMetadata$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsProjectsMetadata$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsProjectsMetadata$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsProjectsMetadata$Outbound;
}

export function getAllLogDrainsDrainsProjectsMetadataToJSON(
  getAllLogDrainsDrainsProjectsMetadata: GetAllLogDrainsDrainsProjectsMetadata,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsProjectsMetadata$outboundSchema.parse(
      getAllLogDrainsDrainsProjectsMetadata,
    ),
  );
}

export function getAllLogDrainsDrainsProjectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsProjectsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsProjectsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrains2$inboundSchema: z.ZodType<
  GetAllLogDrainsDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetAllLogDrainsDrainsLogDrainsCreatedFrom$inboundSchema
    .optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetAllLogDrainsDrainsLogDrainsSchemas$inboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => GetAllLogDrainsDelivery1$inboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery2$inboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery3$inboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery4$inboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery5$inboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => GetAllLogDrainsDrainsLogDrainsSampling$inboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetAllLogDrainsDrainsStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetAllLogDrainsDrainsLogDrainsDisabledReason$inboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetAllLogDrainsSource2$inboundSchema),
    z.lazy(() => GetAllLogDrainsSource1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetAllLogDrainsFilterV22$inboundSchema),
    z.lazy(() => GetAllLogDrainsFilterV21$inboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => GetAllLogDrainsDrainsProjectsMetadata$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetAllLogDrainsDrains2$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetAllLogDrainsDrainsLogDrainsSchemas$Outbound | undefined;
  delivery?:
    | GetAllLogDrainsDelivery1$Outbound
    | GetAllLogDrainsDelivery2$Outbound
    | GetAllLogDrainsDelivery3$Outbound
    | GetAllLogDrainsDelivery4$Outbound
    | GetAllLogDrainsDelivery5$Outbound
    | undefined;
  sampling?: Array<GetAllLogDrainsDrainsLogDrainsSampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetAllLogDrainsSource2$Outbound | GetAllLogDrainsSource1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | GetAllLogDrainsFilterV22$Outbound
    | GetAllLogDrainsFilterV21$Outbound
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?:
    | Array<GetAllLogDrainsDrainsProjectsMetadata$Outbound>
    | undefined;
};

/** @internal */
export const GetAllLogDrainsDrains2$outboundSchema: z.ZodType<
  GetAllLogDrainsDrains2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrains2
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetAllLogDrainsDrainsLogDrainsCreatedFrom$outboundSchema
    .optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetAllLogDrainsDrainsLogDrainsSchemas$outboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => GetAllLogDrainsDelivery1$outboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery2$outboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery3$outboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery4$outboundSchema),
    z.lazy(() => GetAllLogDrainsDelivery5$outboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => GetAllLogDrainsDrainsLogDrainsSampling$outboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetAllLogDrainsDrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetAllLogDrainsDrainsLogDrainsDisabledReason$outboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetAllLogDrainsSource2$outboundSchema),
    z.lazy(() => GetAllLogDrainsSource1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetAllLogDrainsFilterV22$outboundSchema),
    z.lazy(() => GetAllLogDrainsFilterV21$outboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => GetAllLogDrainsDrainsProjectsMetadata$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrains2$ {
  /** @deprecated use `GetAllLogDrainsDrains2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrains2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrains2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrains2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrains2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrains2$Outbound;
}

export function getAllLogDrainsDrains2ToJSON(
  getAllLogDrainsDrains2: GetAllLogDrainsDrains2,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrains2$outboundSchema.parse(getAllLogDrainsDrains2),
  );
}

export function getAllLogDrainsDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrains2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsCreatedFrom
> = z.nativeEnum(GetAllLogDrainsDrainsCreatedFrom);

/** @internal */
export const GetAllLogDrainsDrainsCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsCreatedFrom
> = GetAllLogDrainsDrainsCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsCreatedFrom$ {
  /** @deprecated use `GetAllLogDrainsDrainsCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsCreatedFrom$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsCreatedFrom$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsCreatedFrom$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsLog$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsLog$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsLog$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLog$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLog$ {
  /** @deprecated use `GetAllLogDrainsDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsLog$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLog$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsLog$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLog$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLog$Outbound;
}

export function getAllLogDrainsDrainsLogToJSON(
  getAllLogDrainsDrainsLog: GetAllLogDrainsDrainsLog,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLog$outboundSchema.parse(getAllLogDrainsDrainsLog),
  );
}

export function getAllLogDrainsDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsTrace$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsTrace$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsTrace$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsTrace$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsTrace$ {
  /** @deprecated use `GetAllLogDrainsDrainsTrace$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsTrace$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsTrace$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsTrace$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsTrace$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsTrace$Outbound;
}

export function getAllLogDrainsDrainsTraceToJSON(
  getAllLogDrainsDrainsTrace: GetAllLogDrainsDrainsTrace,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsTrace$outboundSchema.parse(getAllLogDrainsDrainsTrace),
  );
}

export function getAllLogDrainsDrainsTraceFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsTrace' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsAnalytics$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsAnalytics$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsAnalytics$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsAnalytics$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsAnalytics$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsAnalytics$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsAnalytics$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsAnalytics$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsAnalytics$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsAnalyticsToJSON(
  getAllLogDrainsDrainsLogDrainsAnalytics:
    GetAllLogDrainsDrainsLogDrainsAnalytics,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsAnalytics$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsAnalytics,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllLogDrainsDrainsLogDrainsAnalytics,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsAnalytics$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsAnalytics' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSpeedInsights$inboundSchema:
  z.ZodType<
    GetAllLogDrainsDrainsLogDrainsSpeedInsights,
    z.ZodTypeDef,
    unknown
  > = z.object({});

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsSpeedInsights$Outbound = {};

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSpeedInsights$outboundSchema:
  z.ZodType<
    GetAllLogDrainsDrainsLogDrainsSpeedInsights$Outbound,
    z.ZodTypeDef,
    GetAllLogDrainsDrainsLogDrainsSpeedInsights
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsSpeedInsights$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsSpeedInsights$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsSpeedInsights$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSpeedInsights$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsSpeedInsights$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsSpeedInsightsToJSON(
  getAllLogDrainsDrainsLogDrainsSpeedInsights:
    GetAllLogDrainsDrainsLogDrainsSpeedInsights,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsSpeedInsights$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsSpeedInsights,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllLogDrainsDrainsLogDrainsSpeedInsights,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsSpeedInsights$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsSchemas$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => GetAllLogDrainsDrainsLog$inboundSchema).optional(),
  trace: z.lazy(() => GetAllLogDrainsDrainsTrace$inboundSchema).optional(),
  analytics: z.lazy(() => GetAllLogDrainsDrainsLogDrainsAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() =>
    GetAllLogDrainsDrainsLogDrainsSpeedInsights$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type GetAllLogDrainsDrainsSchemas$Outbound = {
  log?: GetAllLogDrainsDrainsLog$Outbound | undefined;
  trace?: GetAllLogDrainsDrainsTrace$Outbound | undefined;
  analytics?: GetAllLogDrainsDrainsLogDrainsAnalytics$Outbound | undefined;
  speed_insights?:
    | GetAllLogDrainsDrainsLogDrainsSpeedInsights$Outbound
    | undefined;
};

/** @internal */
export const GetAllLogDrainsDrainsSchemas$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSchemas$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsSchemas
> = z.object({
  log: z.lazy(() => GetAllLogDrainsDrainsLog$outboundSchema).optional(),
  trace: z.lazy(() => GetAllLogDrainsDrainsTrace$outboundSchema).optional(),
  analytics: z.lazy(() =>
    GetAllLogDrainsDrainsLogDrainsAnalytics$outboundSchema
  ).optional(),
  speedInsights: z.lazy(() =>
    GetAllLogDrainsDrainsLogDrainsSpeedInsights$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsSchemas$ {
  /** @deprecated use `GetAllLogDrainsDrainsSchemas$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsSchemas$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSchemas$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsSchemas$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSchemas$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsSchemas$Outbound;
}

export function getAllLogDrainsDrainsSchemasToJSON(
  getAllLogDrainsDrainsSchemas: GetAllLogDrainsDrainsSchemas,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsSchemas$outboundSchema.parse(
      getAllLogDrainsDrainsSchemas,
    ),
  );
}

export function getAllLogDrainsDrainsSchemasFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsSchemas' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponse200Type> = z
    .nativeEnum(GetAllLogDrainsDeliveryLogDrainsResponse200Type);

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponse200Type> =
    GetAllLogDrainsDeliveryLogDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200Type$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsTarget$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsTarget> = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsTarget,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsTarget$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsTarget> =
    GetAllLogDrainsDeliveryLogDrainsTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsTarget$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsTarget$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsTarget$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsTarget$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsTarget$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains5$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsDeliveryLogDrainsResponse200Type$inboundSchema,
  target: GetAllLogDrainsDeliveryLogDrainsTarget$inboundSchema,
});

/** @internal */
export type GetAllLogDrainsDeliveryLogDrains5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains5$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains5$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryLogDrains5
> = z.object({
  type: GetAllLogDrainsDeliveryLogDrainsResponse200Type$outboundSchema,
  target: GetAllLogDrainsDeliveryLogDrainsTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrains5$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains5$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryLogDrains5$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains5$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrains5$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains5$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryLogDrains5$Outbound;
}

export function getAllLogDrainsDeliveryLogDrains5ToJSON(
  getAllLogDrainsDeliveryLogDrains5: GetAllLogDrainsDeliveryLogDrains5,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryLogDrains5$outboundSchema.parse(
      getAllLogDrainsDeliveryLogDrains5,
    ),
  );
}

export function getAllLogDrainsDeliveryLogDrains5FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDeliveryLogDrains5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDeliveryLogDrains5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDeliveryLogDrains5' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponseType> = z
    .nativeEnum(GetAllLogDrainsDeliveryLogDrainsResponseType);

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponseType> =
    GetAllLogDrainsDeliveryLogDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponseType$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponseType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponseType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains4$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsDeliveryLogDrainsResponseType$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type GetAllLogDrainsDeliveryLogDrains4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains4$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains4$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryLogDrains4
> = z.object({
  type: GetAllLogDrainsDeliveryLogDrainsResponseType$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrains4$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains4$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryLogDrains4$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains4$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrains4$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains4$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryLogDrains4$Outbound;
}

export function getAllLogDrainsDeliveryLogDrains4ToJSON(
  getAllLogDrainsDeliveryLogDrains4: GetAllLogDrainsDeliveryLogDrains4,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryLogDrains4$outboundSchema.parse(
      getAllLogDrainsDeliveryLogDrains4,
    ),
  );
}

export function getAllLogDrainsDeliveryLogDrains4FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDeliveryLogDrains4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDeliveryLogDrains4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDeliveryLogDrains4' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsType$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsType> = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsType,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsType$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsType> =
    GetAllLogDrainsDeliveryLogDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsType$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsType$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains3$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsDeliveryLogDrainsType$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type GetAllLogDrainsDeliveryLogDrains3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains3$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains3$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryLogDrains3
> = z.object({
  type: GetAllLogDrainsDeliveryLogDrainsType$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrains3$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains3$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryLogDrains3$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains3$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrains3$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains3$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryLogDrains3$Outbound;
}

export function getAllLogDrainsDeliveryLogDrains3ToJSON(
  getAllLogDrainsDeliveryLogDrains3: GetAllLogDrainsDeliveryLogDrains3,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryLogDrains3$outboundSchema.parse(
      getAllLogDrainsDeliveryLogDrains3,
    ),
  );
}

export function getAllLogDrainsDeliveryLogDrains3FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDeliveryLogDrains3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDeliveryLogDrains3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDeliveryLogDrains3' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryType
> = z.nativeEnum(GetAllLogDrainsDeliveryType);

/** @internal */
export const GetAllLogDrainsDeliveryType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryType
> = GetAllLogDrainsDeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryType$ {
  /** @deprecated use `GetAllLogDrainsDeliveryType$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryType$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDeliveryType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryEndpoint$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type GetAllLogDrainsDeliveryEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const GetAllLogDrainsDeliveryEndpoint$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryEndpoint$ {
  /** @deprecated use `GetAllLogDrainsDeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryEndpoint$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDeliveryEndpoint$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryEndpoint$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryEndpoint$Outbound;
}

export function getAllLogDrainsDeliveryEndpointToJSON(
  getAllLogDrainsDeliveryEndpoint: GetAllLogDrainsDeliveryEndpoint,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryEndpoint$outboundSchema.parse(
      getAllLogDrainsDeliveryEndpoint,
    ),
  );
}

export function getAllLogDrainsDeliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryEncoding
> = z.nativeEnum(GetAllLogDrainsDeliveryEncoding);

/** @internal */
export const GetAllLogDrainsDeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryEncoding
> = GetAllLogDrainsDeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryEncoding$ {
  /** @deprecated use `GetAllLogDrainsDeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryEncoding$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDeliveryEncoding$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains2$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsDeliveryType$inboundSchema,
  endpoint: z.lazy(() => GetAllLogDrainsDeliveryEndpoint$inboundSchema),
  encoding: GetAllLogDrainsDeliveryEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDeliveryLogDrains2$Outbound = {
  type: string;
  endpoint: GetAllLogDrainsDeliveryEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains2$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryLogDrains2
> = z.object({
  type: GetAllLogDrainsDeliveryType$outboundSchema,
  endpoint: z.lazy(() => GetAllLogDrainsDeliveryEndpoint$outboundSchema),
  encoding: GetAllLogDrainsDeliveryEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrains2$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryLogDrains2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrains2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryLogDrains2$Outbound;
}

export function getAllLogDrainsDeliveryLogDrains2ToJSON(
  getAllLogDrainsDeliveryLogDrains2: GetAllLogDrainsDeliveryLogDrains2,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryLogDrains2$outboundSchema.parse(
      getAllLogDrainsDeliveryLogDrains2,
    ),
  );
}

export function getAllLogDrainsDeliveryLogDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDeliveryLogDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDeliveryLogDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDeliveryLogDrains2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type
  > = z.nativeEnum(
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type,
  );

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type
  > =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponse200Encoding> =
    z.nativeEnum(GetAllLogDrainsDeliveryLogDrainsResponse200Encoding);

/** @internal */
export const GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDeliveryLogDrainsResponse200Encoding> =
    GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryCompression
> = z.nativeEnum(GetAllLogDrainsDeliveryCompression);

/** @internal */
export const GetAllLogDrainsDeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDeliveryCompression
> = GetAllLogDrainsDeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryCompression$ {
  /** @deprecated use `GetAllLogDrainsDeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryCompression$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryCompression$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryCompression$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains1$inboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$inboundSchema,
  endpoint: z.string(),
  encoding: GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$inboundSchema,
  compression: GetAllLogDrainsDeliveryCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDeliveryLogDrains1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDeliveryLogDrains1$outboundSchema: z.ZodType<
  GetAllLogDrainsDeliveryLogDrains1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDeliveryLogDrains1
> = z.object({
  type:
    GetAllLogDrainsDeliveryLogDrainsResponse200ApplicationJSONResponseBody1Drains1Type$outboundSchema,
  endpoint: z.string(),
  encoding: GetAllLogDrainsDeliveryLogDrainsResponse200Encoding$outboundSchema,
  compression: GetAllLogDrainsDeliveryCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDeliveryLogDrains1$ {
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDeliveryLogDrains1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDeliveryLogDrains1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDeliveryLogDrains1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDeliveryLogDrains1$Outbound;
}

export function getAllLogDrainsDeliveryLogDrains1ToJSON(
  getAllLogDrainsDeliveryLogDrains1: GetAllLogDrainsDeliveryLogDrains1,
): string {
  return JSON.stringify(
    GetAllLogDrainsDeliveryLogDrains1$outboundSchema.parse(
      getAllLogDrainsDeliveryLogDrains1,
    ),
  );
}

export function getAllLogDrainsDeliveryLogDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDeliveryLogDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDeliveryLogDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDeliveryLogDrains1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsDelivery$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains1$inboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains2$inboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains3$inboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains4$inboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains5$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsDrainsDelivery$Outbound =
  | GetAllLogDrainsDeliveryLogDrains1$Outbound
  | GetAllLogDrainsDeliveryLogDrains2$Outbound
  | GetAllLogDrainsDeliveryLogDrains3$Outbound
  | GetAllLogDrainsDeliveryLogDrains4$Outbound
  | GetAllLogDrainsDeliveryLogDrains5$Outbound;

/** @internal */
export const GetAllLogDrainsDrainsDelivery$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsDelivery$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsDelivery
> = z.union([
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains1$outboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains2$outboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains3$outboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains4$outboundSchema),
  z.lazy(() => GetAllLogDrainsDeliveryLogDrains5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsDelivery$ {
  /** @deprecated use `GetAllLogDrainsDrainsDelivery$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsDelivery$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsDelivery$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsDelivery$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsDelivery$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsDelivery$Outbound;
}

export function getAllLogDrainsDrainsDeliveryToJSON(
  getAllLogDrainsDrainsDelivery: GetAllLogDrainsDrainsDelivery,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsDelivery$outboundSchema.parse(
      getAllLogDrainsDrainsDelivery,
    ),
  );
}

export function getAllLogDrainsDrainsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsDelivery' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsLogDrainsType
> = z.nativeEnum(GetAllLogDrainsDrainsLogDrainsType);

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsLogDrainsType
> = GetAllLogDrainsDrainsLogDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsType$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsLogDrainsType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsType$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsEnv$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsLogDrainsEnv
> = z.nativeEnum(GetAllLogDrainsDrainsLogDrainsEnv);

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsEnv$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsLogDrainsEnv
> = GetAllLogDrainsDrainsLogDrainsEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsEnv$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsEnv$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsLogDrainsEnv$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsEnv$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsEnv$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsSampling$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsDrainsLogDrainsType$inboundSchema,
  rate: z.number(),
  env: GetAllLogDrainsDrainsLogDrainsEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type GetAllLogDrainsDrainsSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const GetAllLogDrainsDrainsSampling$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsSampling$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsSampling
> = z.object({
  type: GetAllLogDrainsDrainsLogDrainsType$outboundSchema,
  rate: z.number(),
  env: GetAllLogDrainsDrainsLogDrainsEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsSampling$ {
  /** @deprecated use `GetAllLogDrainsDrainsSampling$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsSampling$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSampling$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsSampling$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsSampling$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsSampling$Outbound;
}

export function getAllLogDrainsDrainsSamplingToJSON(
  getAllLogDrainsDrainsSampling: GetAllLogDrainsDrainsSampling,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsSampling$outboundSchema.parse(
      getAllLogDrainsDrainsSampling,
    ),
  );
}

export function getAllLogDrainsDrainsSamplingFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsSampling' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsLogDrainsStatus> = z.nativeEnum(
    GetAllLogDrainsDrainsLogDrainsStatus,
  );

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsLogDrainsStatus> =
    GetAllLogDrainsDrainsLogDrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsStatus$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsStatus$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsStatus$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsDrainsDisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsDrainsDisabledReason
> = z.nativeEnum(GetAllLogDrainsDrainsDisabledReason);

/** @internal */
export const GetAllLogDrainsDrainsDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsDrainsDisabledReason> =
    GetAllLogDrainsDrainsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsDisabledReason$ {
  /** @deprecated use `GetAllLogDrainsDrainsDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsDisabledReason$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsDisabledReason$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsSourceLogDrainsResponse200Kind$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsSourceLogDrainsResponse200Kind> = z
    .nativeEnum(GetAllLogDrainsSourceLogDrainsResponse200Kind);

/** @internal */
export const GetAllLogDrainsSourceLogDrainsResponse200Kind$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsSourceLogDrainsResponse200Kind> =
    GetAllLogDrainsSourceLogDrainsResponse200Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSourceLogDrainsResponse200Kind$ {
  /** @deprecated use `GetAllLogDrainsSourceLogDrainsResponse200Kind$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsSourceLogDrainsResponse200Kind$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrainsResponse200Kind$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsSourceLogDrainsResponse200Kind$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsSourceLogDrains2$inboundSchema: z.ZodType<
  GetAllLogDrainsSourceLogDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetAllLogDrainsSourceLogDrainsResponse200Kind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetAllLogDrainsSourceLogDrains2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const GetAllLogDrainsSourceLogDrains2$outboundSchema: z.ZodType<
  GetAllLogDrainsSourceLogDrains2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsSourceLogDrains2
> = z.object({
  kind: GetAllLogDrainsSourceLogDrainsResponse200Kind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSourceLogDrains2$ {
  /** @deprecated use `GetAllLogDrainsSourceLogDrains2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsSourceLogDrains2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrains2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsSourceLogDrains2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrains2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsSourceLogDrains2$Outbound;
}

export function getAllLogDrainsSourceLogDrains2ToJSON(
  getAllLogDrainsSourceLogDrains2: GetAllLogDrainsSourceLogDrains2,
): string {
  return JSON.stringify(
    GetAllLogDrainsSourceLogDrains2$outboundSchema.parse(
      getAllLogDrainsSourceLogDrains2,
    ),
  );
}

export function getAllLogDrainsSourceLogDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsSourceLogDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsSourceLogDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsSourceLogDrains2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsSourceLogDrainsResponseKind$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsSourceLogDrainsResponseKind> = z
    .nativeEnum(GetAllLogDrainsSourceLogDrainsResponseKind);

/** @internal */
export const GetAllLogDrainsSourceLogDrainsResponseKind$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsSourceLogDrainsResponseKind> =
    GetAllLogDrainsSourceLogDrainsResponseKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSourceLogDrainsResponseKind$ {
  /** @deprecated use `GetAllLogDrainsSourceLogDrainsResponseKind$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsSourceLogDrainsResponseKind$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrainsResponseKind$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsSourceLogDrainsResponseKind$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsSourceLogDrains1$inboundSchema: z.ZodType<
  GetAllLogDrainsSourceLogDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetAllLogDrainsSourceLogDrainsResponseKind$inboundSchema,
});

/** @internal */
export type GetAllLogDrainsSourceLogDrains1$Outbound = {
  kind: string;
};

/** @internal */
export const GetAllLogDrainsSourceLogDrains1$outboundSchema: z.ZodType<
  GetAllLogDrainsSourceLogDrains1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsSourceLogDrains1
> = z.object({
  kind: GetAllLogDrainsSourceLogDrainsResponseKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsSourceLogDrains1$ {
  /** @deprecated use `GetAllLogDrainsSourceLogDrains1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsSourceLogDrains1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrains1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsSourceLogDrains1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsSourceLogDrains1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsSourceLogDrains1$Outbound;
}

export function getAllLogDrainsSourceLogDrains1ToJSON(
  getAllLogDrainsSourceLogDrains1: GetAllLogDrainsSourceLogDrains1,
): string {
  return JSON.stringify(
    GetAllLogDrainsSourceLogDrains1$outboundSchema.parse(
      getAllLogDrainsSourceLogDrains1,
    ),
  );
}

export function getAllLogDrainsSourceLogDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsSourceLogDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsSourceLogDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsSourceLogDrains1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSource$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsSourceLogDrains2$inboundSchema),
  z.lazy(() => GetAllLogDrainsSourceLogDrains1$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsDrainsLogDrainsSource$Outbound =
  | GetAllLogDrainsSourceLogDrains2$Outbound
  | GetAllLogDrainsSourceLogDrains1$Outbound;

/** @internal */
export const GetAllLogDrainsDrainsLogDrainsSource$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsLogDrainsSource$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsLogDrainsSource
> = z.union([
  z.lazy(() => GetAllLogDrainsSourceLogDrains2$outboundSchema),
  z.lazy(() => GetAllLogDrainsSourceLogDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsLogDrainsSource$ {
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSource$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsDrainsLogDrainsSource$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSource$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsDrainsLogDrainsSource$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsLogDrainsSource$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsLogDrainsSource$Outbound;
}

export function getAllLogDrainsDrainsLogDrainsSourceToJSON(
  getAllLogDrainsDrainsLogDrainsSource: GetAllLogDrainsDrainsLogDrainsSource,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsLogDrainsSource$outboundSchema.parse(
      getAllLogDrainsDrainsLogDrainsSource,
    ),
  );
}

export function getAllLogDrainsDrainsLogDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsLogDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsDrainsLogDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsLogDrainsSource' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsResponse200Version$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterV2LogDrainsResponse200Version> = z
    .nativeEnum(GetAllLogDrainsFilterV2LogDrainsResponse200Version);

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsResponse200Version$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterV2LogDrainsResponse200Version> =
    GetAllLogDrainsFilterV2LogDrainsResponse200Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2LogDrainsResponse200Version$ {
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsResponse200Version$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterV2LogDrainsResponse200Version$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsResponse200Version$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterV2LogDrainsResponse200Version$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsFilterType
> = z.nativeEnum(GetAllLogDrainsFilterType);

/** @internal */
export const GetAllLogDrainsFilterType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllLogDrainsFilterType
> = GetAllLogDrainsFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterType$ {
  /** @deprecated use `GetAllLogDrainsFilterType$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterType$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterType$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterType$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterLogDrains2$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsFilterType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetAllLogDrainsFilterLogDrains2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetAllLogDrainsFilterLogDrains2$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrains2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterLogDrains2
> = z.object({
  type: GetAllLogDrainsFilterType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrains2$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrains2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterLogDrains2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrains2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterLogDrains2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrains2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterLogDrains2$Outbound;
}

export function getAllLogDrainsFilterLogDrains2ToJSON(
  getAllLogDrainsFilterLogDrains2: GetAllLogDrainsFilterLogDrains2,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterLogDrains2$outboundSchema.parse(
      getAllLogDrainsFilterLogDrains2,
    ),
  );
}

export function getAllLogDrainsFilterLogDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterLogDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterLogDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterLogDrains2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterLogDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterLogDrainsResponse200Type> = z
    .nativeEnum(GetAllLogDrainsFilterLogDrainsResponse200Type);

/** @internal */
export const GetAllLogDrainsFilterLogDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterLogDrainsResponse200Type> =
    GetAllLogDrainsFilterLogDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrainsResponse200Type$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterLogDrainsResponse200Type$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterLogDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterLogDrainsProject$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrainsProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type GetAllLogDrainsFilterLogDrainsProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterLogDrainsProject$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrainsProject$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterLogDrainsProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrainsProject$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsProject$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterLogDrainsProject$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsProject$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterLogDrainsProject$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsProject$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterLogDrainsProject$Outbound;
}

export function getAllLogDrainsFilterLogDrainsProjectToJSON(
  getAllLogDrainsFilterLogDrainsProject: GetAllLogDrainsFilterLogDrainsProject,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterLogDrainsProject$outboundSchema.parse(
      getAllLogDrainsFilterLogDrainsProject,
    ),
  );
}

export function getAllLogDrainsFilterLogDrainsProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterLogDrainsProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllLogDrainsFilterLogDrainsProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterLogDrainsProject' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterLogDrainsLog$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type GetAllLogDrainsFilterLogDrainsLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterLogDrainsLog$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrainsLog$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterLogDrainsLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrainsLog$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterLogDrainsLog$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsLog$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterLogDrainsLog$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrainsLog$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterLogDrainsLog$Outbound;
}

export function getAllLogDrainsFilterLogDrainsLogToJSON(
  getAllLogDrainsFilterLogDrainsLog: GetAllLogDrainsFilterLogDrainsLog,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterLogDrainsLog$outboundSchema.parse(
      getAllLogDrainsFilterLogDrainsLog,
    ),
  );
}

export function getAllLogDrainsFilterLogDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterLogDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterLogDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterLogDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterDeployment$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type GetAllLogDrainsFilterDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterDeployment$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterDeployment$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterDeployment$ {
  /** @deprecated use `GetAllLogDrainsFilterDeployment$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterDeployment$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterDeployment$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterDeployment$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterDeployment$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterDeployment$Outbound;
}

export function getAllLogDrainsFilterDeploymentToJSON(
  getAllLogDrainsFilterDeployment: GetAllLogDrainsFilterDeployment,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterDeployment$outboundSchema.parse(
      getAllLogDrainsFilterDeployment,
    ),
  );
}

export function getAllLogDrainsFilterDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterDeployment' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterLogDrains1$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetAllLogDrainsFilterLogDrainsResponse200Type$inboundSchema,
  project: z.lazy(() => GetAllLogDrainsFilterLogDrainsProject$inboundSchema)
    .optional(),
  log: z.lazy(() => GetAllLogDrainsFilterLogDrainsLog$inboundSchema).optional(),
  deployment: z.lazy(() => GetAllLogDrainsFilterDeployment$inboundSchema)
    .optional(),
});

/** @internal */
export type GetAllLogDrainsFilterLogDrains1$Outbound = {
  type: string;
  project?: GetAllLogDrainsFilterLogDrainsProject$Outbound | undefined;
  log?: GetAllLogDrainsFilterLogDrainsLog$Outbound | undefined;
  deployment?: GetAllLogDrainsFilterDeployment$Outbound | undefined;
};

/** @internal */
export const GetAllLogDrainsFilterLogDrains1$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterLogDrains1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterLogDrains1
> = z.object({
  type: GetAllLogDrainsFilterLogDrainsResponse200Type$outboundSchema,
  project: z.lazy(() => GetAllLogDrainsFilterLogDrainsProject$outboundSchema)
    .optional(),
  log: z.lazy(() => GetAllLogDrainsFilterLogDrainsLog$outboundSchema)
    .optional(),
  deployment: z.lazy(() => GetAllLogDrainsFilterDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterLogDrains1$ {
  /** @deprecated use `GetAllLogDrainsFilterLogDrains1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterLogDrains1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrains1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterLogDrains1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterLogDrains1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterLogDrains1$Outbound;
}

export function getAllLogDrainsFilterLogDrains1ToJSON(
  getAllLogDrainsFilterLogDrains1: GetAllLogDrainsFilterLogDrains1,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterLogDrains1$outboundSchema.parse(
      getAllLogDrainsFilterLogDrains1,
    ),
  );
}

export function getAllLogDrainsFilterLogDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterLogDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterLogDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterLogDrains1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2Filter$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2Filter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsFilterLogDrains2$inboundSchema),
  z.lazy(() => GetAllLogDrainsFilterLogDrains1$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsFilterV2Filter$Outbound =
  | GetAllLogDrainsFilterLogDrains2$Outbound
  | GetAllLogDrainsFilterLogDrains1$Outbound;

/** @internal */
export const GetAllLogDrainsFilterV2Filter$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2Filter$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterV2Filter
> = z.union([
  z.lazy(() => GetAllLogDrainsFilterLogDrains2$outboundSchema),
  z.lazy(() => GetAllLogDrainsFilterLogDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2Filter$ {
  /** @deprecated use `GetAllLogDrainsFilterV2Filter$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterV2Filter$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2Filter$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsFilterV2Filter$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2Filter$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterV2Filter$Outbound;
}

export function getAllLogDrainsFilterV2FilterToJSON(
  getAllLogDrainsFilterV2Filter: GetAllLogDrainsFilterV2Filter,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterV2Filter$outboundSchema.parse(
      getAllLogDrainsFilterV2Filter,
    ),
  );
}

export function getAllLogDrainsFilterV2FilterFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterV2Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterV2Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterV2Filter' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2LogDrains2$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2LogDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetAllLogDrainsFilterV2LogDrainsResponse200Version$inboundSchema,
  filter: z.union([
    z.lazy(() => GetAllLogDrainsFilterLogDrains2$inboundSchema),
    z.lazy(() => GetAllLogDrainsFilterLogDrains1$inboundSchema),
  ]),
});

/** @internal */
export type GetAllLogDrainsFilterV2LogDrains2$Outbound = {
  version: string;
  filter:
    | GetAllLogDrainsFilterLogDrains2$Outbound
    | GetAllLogDrainsFilterLogDrains1$Outbound;
};

/** @internal */
export const GetAllLogDrainsFilterV2LogDrains2$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2LogDrains2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterV2LogDrains2
> = z.object({
  version: GetAllLogDrainsFilterV2LogDrainsResponse200Version$outboundSchema,
  filter: z.union([
    z.lazy(() => GetAllLogDrainsFilterLogDrains2$outboundSchema),
    z.lazy(() => GetAllLogDrainsFilterLogDrains1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2LogDrains2$ {
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrains2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterV2LogDrains2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrains2$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterV2LogDrains2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrains2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterV2LogDrains2$Outbound;
}

export function getAllLogDrainsFilterV2LogDrains2ToJSON(
  getAllLogDrainsFilterV2LogDrains2: GetAllLogDrainsFilterV2LogDrains2,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterV2LogDrains2$outboundSchema.parse(
      getAllLogDrainsFilterV2LogDrains2,
    ),
  );
}

export function getAllLogDrainsFilterV2LogDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterV2LogDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterV2LogDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterV2LogDrains2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsResponseVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterV2LogDrainsResponseVersion> = z
    .nativeEnum(GetAllLogDrainsFilterV2LogDrainsResponseVersion);

/** @internal */
export const GetAllLogDrainsFilterV2LogDrainsResponseVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetAllLogDrainsFilterV2LogDrainsResponseVersion> =
    GetAllLogDrainsFilterV2LogDrainsResponseVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2LogDrainsResponseVersion$ {
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsResponseVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetAllLogDrainsFilterV2LogDrainsResponseVersion$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrainsResponseVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterV2LogDrainsResponseVersion$outboundSchema;
}

/** @internal */
export const GetAllLogDrainsFilterV2LogDrains1$inboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2LogDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetAllLogDrainsFilterV2LogDrainsResponseVersion$inboundSchema,
});

/** @internal */
export type GetAllLogDrainsFilterV2LogDrains1$Outbound = {
  version: string;
};

/** @internal */
export const GetAllLogDrainsFilterV2LogDrains1$outboundSchema: z.ZodType<
  GetAllLogDrainsFilterV2LogDrains1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsFilterV2LogDrains1
> = z.object({
  version: GetAllLogDrainsFilterV2LogDrainsResponseVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsFilterV2LogDrains1$ {
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrains1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsFilterV2LogDrains1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrains1$outboundSchema` instead. */
  export const outboundSchema =
    GetAllLogDrainsFilterV2LogDrains1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsFilterV2LogDrains1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsFilterV2LogDrains1$Outbound;
}

export function getAllLogDrainsFilterV2LogDrains1ToJSON(
  getAllLogDrainsFilterV2LogDrains1: GetAllLogDrainsFilterV2LogDrains1,
): string {
  return JSON.stringify(
    GetAllLogDrainsFilterV2LogDrains1$outboundSchema.parse(
      getAllLogDrainsFilterV2LogDrains1,
    ),
  );
}

export function getAllLogDrainsFilterV2LogDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsFilterV2LogDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsFilterV2LogDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsFilterV2LogDrains1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrainsFilterV2$inboundSchema: z.ZodType<
  GetAllLogDrainsDrainsFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsFilterV2LogDrains2$inboundSchema),
  z.lazy(() => GetAllLogDrainsFilterV2LogDrains1$inboundSchema),
]);

/** @internal */
export type GetAllLogDrainsDrainsFilterV2$Outbound =
  | GetAllLogDrainsFilterV2LogDrains2$Outbound
  | GetAllLogDrainsFilterV2LogDrains1$Outbound;

/** @internal */
export const GetAllLogDrainsDrainsFilterV2$outboundSchema: z.ZodType<
  GetAllLogDrainsDrainsFilterV2$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrainsFilterV2
> = z.union([
  z.lazy(() => GetAllLogDrainsFilterV2LogDrains2$outboundSchema),
  z.lazy(() => GetAllLogDrainsFilterV2LogDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrainsFilterV2$ {
  /** @deprecated use `GetAllLogDrainsDrainsFilterV2$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrainsFilterV2$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsFilterV2$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrainsFilterV2$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrainsFilterV2$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrainsFilterV2$Outbound;
}

export function getAllLogDrainsDrainsFilterV2ToJSON(
  getAllLogDrainsDrainsFilterV2: GetAllLogDrainsDrainsFilterV2,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrainsFilterV2$outboundSchema.parse(
      getAllLogDrainsDrainsFilterV2,
    ),
  );
}

export function getAllLogDrainsDrainsFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrainsFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrainsFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrainsFilterV2' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsDrains1$inboundSchema: z.ZodType<
  GetAllLogDrainsDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetAllLogDrainsDrainsCreatedFrom$inboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetAllLogDrainsDrainsSchemas$inboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains1$inboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains2$inboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains3$inboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains4$inboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains5$inboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => GetAllLogDrainsDrainsSampling$inboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetAllLogDrainsDrainsLogDrainsStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetAllLogDrainsDrainsDisabledReason$inboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetAllLogDrainsSourceLogDrains2$inboundSchema),
    z.lazy(() => GetAllLogDrainsSourceLogDrains1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetAllLogDrainsFilterV2LogDrains2$inboundSchema),
    z.lazy(() => GetAllLogDrainsFilterV2LogDrains1$inboundSchema),
  ]).optional(),
});

/** @internal */
export type GetAllLogDrainsDrains1$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetAllLogDrainsDrainsSchemas$Outbound | undefined;
  delivery?:
    | GetAllLogDrainsDeliveryLogDrains1$Outbound
    | GetAllLogDrainsDeliveryLogDrains2$Outbound
    | GetAllLogDrainsDeliveryLogDrains3$Outbound
    | GetAllLogDrainsDeliveryLogDrains4$Outbound
    | GetAllLogDrainsDeliveryLogDrains5$Outbound
    | undefined;
  sampling?: Array<GetAllLogDrainsDrainsSampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source:
    | GetAllLogDrainsSourceLogDrains2$Outbound
    | GetAllLogDrainsSourceLogDrains1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | GetAllLogDrainsFilterV2LogDrains2$Outbound
    | GetAllLogDrainsFilterV2LogDrains1$Outbound
    | undefined;
};

/** @internal */
export const GetAllLogDrainsDrains1$outboundSchema: z.ZodType<
  GetAllLogDrainsDrains1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsDrains1
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetAllLogDrainsDrainsCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetAllLogDrainsDrainsSchemas$outboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains1$outboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains2$outboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains3$outboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains4$outboundSchema),
    z.lazy(() => GetAllLogDrainsDeliveryLogDrains5$outboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => GetAllLogDrainsDrainsSampling$outboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetAllLogDrainsDrainsLogDrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetAllLogDrainsDrainsDisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetAllLogDrainsSourceLogDrains2$outboundSchema),
    z.lazy(() => GetAllLogDrainsSourceLogDrains1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetAllLogDrainsFilterV2LogDrains2$outboundSchema),
    z.lazy(() => GetAllLogDrainsFilterV2LogDrains1$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsDrains1$ {
  /** @deprecated use `GetAllLogDrainsDrains1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsDrains1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsDrains1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsDrains1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsDrains1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsDrains1$Outbound;
}

export function getAllLogDrainsDrains1ToJSON(
  getAllLogDrainsDrains1: GetAllLogDrainsDrains1,
): string {
  return JSON.stringify(
    GetAllLogDrainsDrains1$outboundSchema.parse(getAllLogDrainsDrains1),
  );
}

export function getAllLogDrainsDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsDrains1' from JSON`,
  );
}

/** @internal */
export const ResponseBodyDrains$inboundSchema: z.ZodType<
  ResponseBodyDrains,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.array(z.lazy(() => GetAllLogDrainsDrains1$inboundSchema)),
  z.array(z.lazy(() => GetAllLogDrainsDrains2$inboundSchema)),
]);

/** @internal */
export type ResponseBodyDrains$Outbound =
  | Array<GetAllLogDrainsDrains1$Outbound>
  | Array<GetAllLogDrainsDrains2$Outbound>;

/** @internal */
export const ResponseBodyDrains$outboundSchema: z.ZodType<
  ResponseBodyDrains$Outbound,
  z.ZodTypeDef,
  ResponseBodyDrains
> = z.union([
  z.array(z.lazy(() => GetAllLogDrainsDrains1$outboundSchema)),
  z.array(z.lazy(() => GetAllLogDrainsDrains2$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResponseBodyDrains$ {
  /** @deprecated use `ResponseBodyDrains$inboundSchema` instead. */
  export const inboundSchema = ResponseBodyDrains$inboundSchema;
  /** @deprecated use `ResponseBodyDrains$outboundSchema` instead. */
  export const outboundSchema = ResponseBodyDrains$outboundSchema;
  /** @deprecated use `ResponseBodyDrains$Outbound` instead. */
  export type Outbound = ResponseBodyDrains$Outbound;
}

export function responseBodyDrainsToJSON(
  responseBodyDrains: ResponseBodyDrains,
): string {
  return JSON.stringify(
    ResponseBodyDrains$outboundSchema.parse(responseBodyDrains),
  );
}

export function responseBodyDrainsFromJSON(
  jsonString: string,
): SafeParseResult<ResponseBodyDrains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResponseBodyDrains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResponseBodyDrains' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsResponseBody1$inboundSchema: z.ZodType<
  GetAllLogDrainsResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  drains: z.union([
    z.array(z.lazy(() => GetAllLogDrainsDrains1$inboundSchema)),
    z.array(z.lazy(() => GetAllLogDrainsDrains2$inboundSchema)),
  ]),
});

/** @internal */
export type GetAllLogDrainsResponseBody1$Outbound = {
  drains:
    | Array<GetAllLogDrainsDrains1$Outbound>
    | Array<GetAllLogDrainsDrains2$Outbound>;
};

/** @internal */
export const GetAllLogDrainsResponseBody1$outboundSchema: z.ZodType<
  GetAllLogDrainsResponseBody1$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsResponseBody1
> = z.object({
  drains: z.union([
    z.array(z.lazy(() => GetAllLogDrainsDrains1$outboundSchema)),
    z.array(z.lazy(() => GetAllLogDrainsDrains2$outboundSchema)),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsResponseBody1$ {
  /** @deprecated use `GetAllLogDrainsResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsResponseBody1$inboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsResponseBody1$outboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBody1$Outbound` instead. */
  export type Outbound = GetAllLogDrainsResponseBody1$Outbound;
}

export function getAllLogDrainsResponseBody1ToJSON(
  getAllLogDrainsResponseBody1: GetAllLogDrainsResponseBody1,
): string {
  return JSON.stringify(
    GetAllLogDrainsResponseBody1$outboundSchema.parse(
      getAllLogDrainsResponseBody1,
    ),
  );
}

export function getAllLogDrainsResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetAllLogDrainsResponseBody$inboundSchema: z.ZodType<
  GetAllLogDrainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllLogDrainsResponseBody1$inboundSchema),
  z.array(z.lazy(() => GetAllLogDrainsResponseBody2$inboundSchema)),
]);

/** @internal */
export type GetAllLogDrainsResponseBody$Outbound =
  | GetAllLogDrainsResponseBody1$Outbound
  | Array<GetAllLogDrainsResponseBody2$Outbound>;

/** @internal */
export const GetAllLogDrainsResponseBody$outboundSchema: z.ZodType<
  GetAllLogDrainsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllLogDrainsResponseBody
> = z.union([
  z.lazy(() => GetAllLogDrainsResponseBody1$outboundSchema),
  z.array(z.lazy(() => GetAllLogDrainsResponseBody2$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLogDrainsResponseBody$ {
  /** @deprecated use `GetAllLogDrainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllLogDrainsResponseBody$inboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllLogDrainsResponseBody$outboundSchema;
  /** @deprecated use `GetAllLogDrainsResponseBody$Outbound` instead. */
  export type Outbound = GetAllLogDrainsResponseBody$Outbound;
}

export function getAllLogDrainsResponseBodyToJSON(
  getAllLogDrainsResponseBody: GetAllLogDrainsResponseBody,
): string {
  return JSON.stringify(
    GetAllLogDrainsResponseBody$outboundSchema.parse(
      getAllLogDrainsResponseBody,
    ),
  );
}

export function getAllLogDrainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLogDrainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLogDrainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLogDrainsResponseBody' from JSON`,
  );
}
