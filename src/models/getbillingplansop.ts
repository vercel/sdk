/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetBillingPlansRequest = {
  integrationIdOrSlug: string;
  productIdOrSlug: string;
  metadata?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetBillingPlansType = {
  Prepayment: "prepayment",
  Subscription: "subscription",
} as const;
export type GetBillingPlansType = ClosedEnum<typeof GetBillingPlansType>;

export const GetBillingPlansScope = {
  Installation: "installation",
  Resource: "resource",
} as const;
export type GetBillingPlansScope = ClosedEnum<typeof GetBillingPlansScope>;

export type GetBillingPlansDetails = {
  label: string;
  value?: string | undefined;
};

export type GetBillingPlansHighlightedDetails = {
  label: string;
  value?: string | undefined;
};

export type Quote = {
  line: string;
  amount: string;
};

export type Plans = {
  type: GetBillingPlansType;
  description: string;
  id: string;
  name: string;
  scope: GetBillingPlansScope;
  paymentMethodRequired: boolean;
  preauthorizationAmount?: number | undefined;
  initialCharge?: string | undefined;
  minimumAmount?: string | undefined;
  maximumAmount?: string | undefined;
  maximumAmountAutoPurchasePerPeriod?: string | undefined;
  cost?: string | undefined;
  details?: Array<GetBillingPlansDetails> | undefined;
  highlightedDetails?: Array<GetBillingPlansHighlightedDetails> | undefined;
  quote?: Array<Quote> | undefined;
  effectiveDate?: string | undefined;
  disabled?: boolean | undefined;
};

export type GetBillingPlansResponseBody = {
  plans: Array<Plans>;
};

/** @internal */
export const GetBillingPlansRequest$inboundSchema: z.ZodType<
  GetBillingPlansRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationIdOrSlug: z.string(),
  productIdOrSlug: z.string(),
  metadata: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetBillingPlansRequest$Outbound = {
  integrationIdOrSlug: string;
  productIdOrSlug: string;
  metadata?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetBillingPlansRequest$outboundSchema: z.ZodType<
  GetBillingPlansRequest$Outbound,
  z.ZodTypeDef,
  GetBillingPlansRequest
> = z.object({
  integrationIdOrSlug: z.string(),
  productIdOrSlug: z.string(),
  metadata: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBillingPlansRequest$ {
  /** @deprecated use `GetBillingPlansRequest$inboundSchema` instead. */
  export const inboundSchema = GetBillingPlansRequest$inboundSchema;
  /** @deprecated use `GetBillingPlansRequest$outboundSchema` instead. */
  export const outboundSchema = GetBillingPlansRequest$outboundSchema;
  /** @deprecated use `GetBillingPlansRequest$Outbound` instead. */
  export type Outbound = GetBillingPlansRequest$Outbound;
}

export function getBillingPlansRequestToJSON(
  getBillingPlansRequest: GetBillingPlansRequest,
): string {
  return JSON.stringify(
    GetBillingPlansRequest$outboundSchema.parse(getBillingPlansRequest),
  );
}

export function getBillingPlansRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBillingPlansRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBillingPlansRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBillingPlansRequest' from JSON`,
  );
}

/** @internal */
export const GetBillingPlansType$inboundSchema: z.ZodNativeEnum<
  typeof GetBillingPlansType
> = z.nativeEnum(GetBillingPlansType);

/** @internal */
export const GetBillingPlansType$outboundSchema: z.ZodNativeEnum<
  typeof GetBillingPlansType
> = GetBillingPlansType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBillingPlansType$ {
  /** @deprecated use `GetBillingPlansType$inboundSchema` instead. */
  export const inboundSchema = GetBillingPlansType$inboundSchema;
  /** @deprecated use `GetBillingPlansType$outboundSchema` instead. */
  export const outboundSchema = GetBillingPlansType$outboundSchema;
}

/** @internal */
export const GetBillingPlansScope$inboundSchema: z.ZodNativeEnum<
  typeof GetBillingPlansScope
> = z.nativeEnum(GetBillingPlansScope);

/** @internal */
export const GetBillingPlansScope$outboundSchema: z.ZodNativeEnum<
  typeof GetBillingPlansScope
> = GetBillingPlansScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBillingPlansScope$ {
  /** @deprecated use `GetBillingPlansScope$inboundSchema` instead. */
  export const inboundSchema = GetBillingPlansScope$inboundSchema;
  /** @deprecated use `GetBillingPlansScope$outboundSchema` instead. */
  export const outboundSchema = GetBillingPlansScope$outboundSchema;
}

/** @internal */
export const GetBillingPlansDetails$inboundSchema: z.ZodType<
  GetBillingPlansDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type GetBillingPlansDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const GetBillingPlansDetails$outboundSchema: z.ZodType<
  GetBillingPlansDetails$Outbound,
  z.ZodTypeDef,
  GetBillingPlansDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBillingPlansDetails$ {
  /** @deprecated use `GetBillingPlansDetails$inboundSchema` instead. */
  export const inboundSchema = GetBillingPlansDetails$inboundSchema;
  /** @deprecated use `GetBillingPlansDetails$outboundSchema` instead. */
  export const outboundSchema = GetBillingPlansDetails$outboundSchema;
  /** @deprecated use `GetBillingPlansDetails$Outbound` instead. */
  export type Outbound = GetBillingPlansDetails$Outbound;
}

export function getBillingPlansDetailsToJSON(
  getBillingPlansDetails: GetBillingPlansDetails,
): string {
  return JSON.stringify(
    GetBillingPlansDetails$outboundSchema.parse(getBillingPlansDetails),
  );
}

export function getBillingPlansDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetBillingPlansDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBillingPlansDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBillingPlansDetails' from JSON`,
  );
}

/** @internal */
export const GetBillingPlansHighlightedDetails$inboundSchema: z.ZodType<
  GetBillingPlansHighlightedDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type GetBillingPlansHighlightedDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const GetBillingPlansHighlightedDetails$outboundSchema: z.ZodType<
  GetBillingPlansHighlightedDetails$Outbound,
  z.ZodTypeDef,
  GetBillingPlansHighlightedDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBillingPlansHighlightedDetails$ {
  /** @deprecated use `GetBillingPlansHighlightedDetails$inboundSchema` instead. */
  export const inboundSchema = GetBillingPlansHighlightedDetails$inboundSchema;
  /** @deprecated use `GetBillingPlansHighlightedDetails$outboundSchema` instead. */
  export const outboundSchema =
    GetBillingPlansHighlightedDetails$outboundSchema;
  /** @deprecated use `GetBillingPlansHighlightedDetails$Outbound` instead. */
  export type Outbound = GetBillingPlansHighlightedDetails$Outbound;
}

export function getBillingPlansHighlightedDetailsToJSON(
  getBillingPlansHighlightedDetails: GetBillingPlansHighlightedDetails,
): string {
  return JSON.stringify(
    GetBillingPlansHighlightedDetails$outboundSchema.parse(
      getBillingPlansHighlightedDetails,
    ),
  );
}

export function getBillingPlansHighlightedDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetBillingPlansHighlightedDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBillingPlansHighlightedDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBillingPlansHighlightedDetails' from JSON`,
  );
}

/** @internal */
export const Quote$inboundSchema: z.ZodType<Quote, z.ZodTypeDef, unknown> = z
  .object({
    line: z.string(),
    amount: z.string(),
  });

/** @internal */
export type Quote$Outbound = {
  line: string;
  amount: string;
};

/** @internal */
export const Quote$outboundSchema: z.ZodType<
  Quote$Outbound,
  z.ZodTypeDef,
  Quote
> = z.object({
  line: z.string(),
  amount: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Quote$ {
  /** @deprecated use `Quote$inboundSchema` instead. */
  export const inboundSchema = Quote$inboundSchema;
  /** @deprecated use `Quote$outboundSchema` instead. */
  export const outboundSchema = Quote$outboundSchema;
  /** @deprecated use `Quote$Outbound` instead. */
  export type Outbound = Quote$Outbound;
}

export function quoteToJSON(quote: Quote): string {
  return JSON.stringify(Quote$outboundSchema.parse(quote));
}

export function quoteFromJSON(
  jsonString: string,
): SafeParseResult<Quote, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Quote$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Quote' from JSON`,
  );
}

/** @internal */
export const Plans$inboundSchema: z.ZodType<Plans, z.ZodTypeDef, unknown> = z
  .object({
    type: GetBillingPlansType$inboundSchema,
    description: z.string(),
    id: z.string(),
    name: z.string(),
    scope: GetBillingPlansScope$inboundSchema,
    paymentMethodRequired: z.boolean(),
    preauthorizationAmount: z.number().optional(),
    initialCharge: z.string().optional(),
    minimumAmount: z.string().optional(),
    maximumAmount: z.string().optional(),
    maximumAmountAutoPurchasePerPeriod: z.string().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => GetBillingPlansDetails$inboundSchema))
      .optional(),
    highlightedDetails: z.array(
      z.lazy(() => GetBillingPlansHighlightedDetails$inboundSchema),
    ).optional(),
    quote: z.array(z.lazy(() => Quote$inboundSchema)).optional(),
    effectiveDate: z.string().optional(),
    disabled: z.boolean().optional(),
  });

/** @internal */
export type Plans$Outbound = {
  type: string;
  description: string;
  id: string;
  name: string;
  scope: string;
  paymentMethodRequired: boolean;
  preauthorizationAmount?: number | undefined;
  initialCharge?: string | undefined;
  minimumAmount?: string | undefined;
  maximumAmount?: string | undefined;
  maximumAmountAutoPurchasePerPeriod?: string | undefined;
  cost?: string | undefined;
  details?: Array<GetBillingPlansDetails$Outbound> | undefined;
  highlightedDetails?:
    | Array<GetBillingPlansHighlightedDetails$Outbound>
    | undefined;
  quote?: Array<Quote$Outbound> | undefined;
  effectiveDate?: string | undefined;
  disabled?: boolean | undefined;
};

/** @internal */
export const Plans$outboundSchema: z.ZodType<
  Plans$Outbound,
  z.ZodTypeDef,
  Plans
> = z.object({
  type: GetBillingPlansType$outboundSchema,
  description: z.string(),
  id: z.string(),
  name: z.string(),
  scope: GetBillingPlansScope$outboundSchema,
  paymentMethodRequired: z.boolean(),
  preauthorizationAmount: z.number().optional(),
  initialCharge: z.string().optional(),
  minimumAmount: z.string().optional(),
  maximumAmount: z.string().optional(),
  maximumAmountAutoPurchasePerPeriod: z.string().optional(),
  cost: z.string().optional(),
  details: z.array(z.lazy(() => GetBillingPlansDetails$outboundSchema))
    .optional(),
  highlightedDetails: z.array(
    z.lazy(() => GetBillingPlansHighlightedDetails$outboundSchema),
  ).optional(),
  quote: z.array(z.lazy(() => Quote$outboundSchema)).optional(),
  effectiveDate: z.string().optional(),
  disabled: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Plans$ {
  /** @deprecated use `Plans$inboundSchema` instead. */
  export const inboundSchema = Plans$inboundSchema;
  /** @deprecated use `Plans$outboundSchema` instead. */
  export const outboundSchema = Plans$outboundSchema;
  /** @deprecated use `Plans$Outbound` instead. */
  export type Outbound = Plans$Outbound;
}

export function plansToJSON(plans: Plans): string {
  return JSON.stringify(Plans$outboundSchema.parse(plans));
}

export function plansFromJSON(
  jsonString: string,
): SafeParseResult<Plans, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Plans$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Plans' from JSON`,
  );
}

/** @internal */
export const GetBillingPlansResponseBody$inboundSchema: z.ZodType<
  GetBillingPlansResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  plans: z.array(z.lazy(() => Plans$inboundSchema)),
});

/** @internal */
export type GetBillingPlansResponseBody$Outbound = {
  plans: Array<Plans$Outbound>;
};

/** @internal */
export const GetBillingPlansResponseBody$outboundSchema: z.ZodType<
  GetBillingPlansResponseBody$Outbound,
  z.ZodTypeDef,
  GetBillingPlansResponseBody
> = z.object({
  plans: z.array(z.lazy(() => Plans$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBillingPlansResponseBody$ {
  /** @deprecated use `GetBillingPlansResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetBillingPlansResponseBody$inboundSchema;
  /** @deprecated use `GetBillingPlansResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetBillingPlansResponseBody$outboundSchema;
  /** @deprecated use `GetBillingPlansResponseBody$Outbound` instead. */
  export type Outbound = GetBillingPlansResponseBody$Outbound;
}

export function getBillingPlansResponseBodyToJSON(
  getBillingPlansResponseBody: GetBillingPlansResponseBody,
): string {
  return JSON.stringify(
    GetBillingPlansResponseBody$outboundSchema.parse(
      getBillingPlansResponseBody,
    ),
  );
}

export function getBillingPlansResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetBillingPlansResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBillingPlansResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBillingPlansResponseBody' from JSON`,
  );
}
