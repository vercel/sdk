/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetBulkAvailabilityRequestBody = {
  /**
   * an array of at most 50 item(s)
   */
  domains: Array<string>;
};

export type GetBulkAvailabilityRequest = {
  teamId?: string | undefined;
  requestBody: GetBulkAvailabilityRequestBody;
};

export type Results = {
  domain: string;
  available: boolean;
};

/**
 * Success
 */
export type GetBulkAvailabilityResponseBody = {
  results: Array<Results>;
};

/** @internal */
export const GetBulkAvailabilityRequestBody$inboundSchema: z.ZodType<
  GetBulkAvailabilityRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.array(z.string()),
});

/** @internal */
export type GetBulkAvailabilityRequestBody$Outbound = {
  domains: Array<string>;
};

/** @internal */
export const GetBulkAvailabilityRequestBody$outboundSchema: z.ZodType<
  GetBulkAvailabilityRequestBody$Outbound,
  z.ZodTypeDef,
  GetBulkAvailabilityRequestBody
> = z.object({
  domains: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBulkAvailabilityRequestBody$ {
  /** @deprecated use `GetBulkAvailabilityRequestBody$inboundSchema` instead. */
  export const inboundSchema = GetBulkAvailabilityRequestBody$inboundSchema;
  /** @deprecated use `GetBulkAvailabilityRequestBody$outboundSchema` instead. */
  export const outboundSchema = GetBulkAvailabilityRequestBody$outboundSchema;
  /** @deprecated use `GetBulkAvailabilityRequestBody$Outbound` instead. */
  export type Outbound = GetBulkAvailabilityRequestBody$Outbound;
}

export function getBulkAvailabilityRequestBodyToJSON(
  getBulkAvailabilityRequestBody: GetBulkAvailabilityRequestBody,
): string {
  return JSON.stringify(
    GetBulkAvailabilityRequestBody$outboundSchema.parse(
      getBulkAvailabilityRequestBody,
    ),
  );
}

export function getBulkAvailabilityRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetBulkAvailabilityRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBulkAvailabilityRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBulkAvailabilityRequestBody' from JSON`,
  );
}

/** @internal */
export const GetBulkAvailabilityRequest$inboundSchema: z.ZodType<
  GetBulkAvailabilityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  RequestBody: z.lazy(() => GetBulkAvailabilityRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type GetBulkAvailabilityRequest$Outbound = {
  teamId?: string | undefined;
  RequestBody: GetBulkAvailabilityRequestBody$Outbound;
};

/** @internal */
export const GetBulkAvailabilityRequest$outboundSchema: z.ZodType<
  GetBulkAvailabilityRequest$Outbound,
  z.ZodTypeDef,
  GetBulkAvailabilityRequest
> = z.object({
  teamId: z.string().optional(),
  requestBody: z.lazy(() => GetBulkAvailabilityRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBulkAvailabilityRequest$ {
  /** @deprecated use `GetBulkAvailabilityRequest$inboundSchema` instead. */
  export const inboundSchema = GetBulkAvailabilityRequest$inboundSchema;
  /** @deprecated use `GetBulkAvailabilityRequest$outboundSchema` instead. */
  export const outboundSchema = GetBulkAvailabilityRequest$outboundSchema;
  /** @deprecated use `GetBulkAvailabilityRequest$Outbound` instead. */
  export type Outbound = GetBulkAvailabilityRequest$Outbound;
}

export function getBulkAvailabilityRequestToJSON(
  getBulkAvailabilityRequest: GetBulkAvailabilityRequest,
): string {
  return JSON.stringify(
    GetBulkAvailabilityRequest$outboundSchema.parse(getBulkAvailabilityRequest),
  );
}

export function getBulkAvailabilityRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetBulkAvailabilityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBulkAvailabilityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBulkAvailabilityRequest' from JSON`,
  );
}

/** @internal */
export const Results$inboundSchema: z.ZodType<Results, z.ZodTypeDef, unknown> =
  z.object({
    domain: z.string(),
    available: z.boolean(),
  });

/** @internal */
export type Results$Outbound = {
  domain: string;
  available: boolean;
};

/** @internal */
export const Results$outboundSchema: z.ZodType<
  Results$Outbound,
  z.ZodTypeDef,
  Results
> = z.object({
  domain: z.string(),
  available: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Results$ {
  /** @deprecated use `Results$inboundSchema` instead. */
  export const inboundSchema = Results$inboundSchema;
  /** @deprecated use `Results$outboundSchema` instead. */
  export const outboundSchema = Results$outboundSchema;
  /** @deprecated use `Results$Outbound` instead. */
  export type Outbound = Results$Outbound;
}

export function resultsToJSON(results: Results): string {
  return JSON.stringify(Results$outboundSchema.parse(results));
}

export function resultsFromJSON(
  jsonString: string,
): SafeParseResult<Results, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Results$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Results' from JSON`,
  );
}

/** @internal */
export const GetBulkAvailabilityResponseBody$inboundSchema: z.ZodType<
  GetBulkAvailabilityResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(z.lazy(() => Results$inboundSchema)),
});

/** @internal */
export type GetBulkAvailabilityResponseBody$Outbound = {
  results: Array<Results$Outbound>;
};

/** @internal */
export const GetBulkAvailabilityResponseBody$outboundSchema: z.ZodType<
  GetBulkAvailabilityResponseBody$Outbound,
  z.ZodTypeDef,
  GetBulkAvailabilityResponseBody
> = z.object({
  results: z.array(z.lazy(() => Results$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetBulkAvailabilityResponseBody$ {
  /** @deprecated use `GetBulkAvailabilityResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetBulkAvailabilityResponseBody$inboundSchema;
  /** @deprecated use `GetBulkAvailabilityResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetBulkAvailabilityResponseBody$outboundSchema;
  /** @deprecated use `GetBulkAvailabilityResponseBody$Outbound` instead. */
  export type Outbound = GetBulkAvailabilityResponseBody$Outbound;
}

export function getBulkAvailabilityResponseBodyToJSON(
  getBulkAvailabilityResponseBody: GetBulkAvailabilityResponseBody,
): string {
  return JSON.stringify(
    GetBulkAvailabilityResponseBody$outboundSchema.parse(
      getBulkAvailabilityResponseBody,
    ),
  );
}

export function getBulkAvailabilityResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetBulkAvailabilityResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetBulkAvailabilityResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetBulkAvailabilityResponseBody' from JSON`,
  );
}
