/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetConfigurableLogDrainRequest = {
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetConfigurableLogDrainFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Fastify: "fastify",
  Xmcp: "xmcp",
} as const;
export type GetConfigurableLogDrainFramework = ClosedEnum<
  typeof GetConfigurableLogDrainFramework
>;

export type ProjectsMetadata = {
  id: string;
  name: string;
  framework?: GetConfigurableLogDrainFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type GetConfigurableLogDrainResponseBody = {
  projectsMetadata?: Array<ProjectsMetadata> | null | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
};

/** @internal */
export const GetConfigurableLogDrainRequest$inboundSchema: z.ZodType<
  GetConfigurableLogDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetConfigurableLogDrainRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetConfigurableLogDrainRequest$outboundSchema: z.ZodType<
  GetConfigurableLogDrainRequest$Outbound,
  z.ZodTypeDef,
  GetConfigurableLogDrainRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainRequest$ {
  /** @deprecated use `GetConfigurableLogDrainRequest$inboundSchema` instead. */
  export const inboundSchema = GetConfigurableLogDrainRequest$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainRequest$outboundSchema` instead. */
  export const outboundSchema = GetConfigurableLogDrainRequest$outboundSchema;
  /** @deprecated use `GetConfigurableLogDrainRequest$Outbound` instead. */
  export type Outbound = GetConfigurableLogDrainRequest$Outbound;
}

export function getConfigurableLogDrainRequestToJSON(
  getConfigurableLogDrainRequest: GetConfigurableLogDrainRequest,
): string {
  return JSON.stringify(
    GetConfigurableLogDrainRequest$outboundSchema.parse(
      getConfigurableLogDrainRequest,
    ),
  );
}

export function getConfigurableLogDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurableLogDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetConfigurableLogDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurableLogDrainRequest' from JSON`,
  );
}

/** @internal */
export const GetConfigurableLogDrainFramework$inboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainFramework
> = z.nativeEnum(GetConfigurableLogDrainFramework);

/** @internal */
export const GetConfigurableLogDrainFramework$outboundSchema: z.ZodNativeEnum<
  typeof GetConfigurableLogDrainFramework
> = GetConfigurableLogDrainFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainFramework$ {
  /** @deprecated use `GetConfigurableLogDrainFramework$inboundSchema` instead. */
  export const inboundSchema = GetConfigurableLogDrainFramework$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainFramework$outboundSchema` instead. */
  export const outboundSchema = GetConfigurableLogDrainFramework$outboundSchema;
}

/** @internal */
export const ProjectsMetadata$inboundSchema: z.ZodType<
  ProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetConfigurableLogDrainFramework$inboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type ProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const ProjectsMetadata$outboundSchema: z.ZodType<
  ProjectsMetadata$Outbound,
  z.ZodTypeDef,
  ProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetConfigurableLogDrainFramework$outboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectsMetadata$ {
  /** @deprecated use `ProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema = ProjectsMetadata$inboundSchema;
  /** @deprecated use `ProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema = ProjectsMetadata$outboundSchema;
  /** @deprecated use `ProjectsMetadata$Outbound` instead. */
  export type Outbound = ProjectsMetadata$Outbound;
}

export function projectsMetadataToJSON(
  projectsMetadata: ProjectsMetadata,
): string {
  return JSON.stringify(
    ProjectsMetadata$outboundSchema.parse(projectsMetadata),
  );
}

export function projectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ProjectsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const GetConfigurableLogDrainResponseBody$inboundSchema: z.ZodType<
  GetConfigurableLogDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectsMetadata: z.nullable(
    z.array(z.lazy(() => ProjectsMetadata$inboundSchema)),
  ).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
});

/** @internal */
export type GetConfigurableLogDrainResponseBody$Outbound = {
  projectsMetadata?: Array<ProjectsMetadata$Outbound> | null | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
};

/** @internal */
export const GetConfigurableLogDrainResponseBody$outboundSchema: z.ZodType<
  GetConfigurableLogDrainResponseBody$Outbound,
  z.ZodTypeDef,
  GetConfigurableLogDrainResponseBody
> = z.object({
  projectsMetadata: z.nullable(
    z.array(z.lazy(() => ProjectsMetadata$outboundSchema)),
  ).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetConfigurableLogDrainResponseBody$ {
  /** @deprecated use `GetConfigurableLogDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetConfigurableLogDrainResponseBody$inboundSchema;
  /** @deprecated use `GetConfigurableLogDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetConfigurableLogDrainResponseBody$outboundSchema;
  /** @deprecated use `GetConfigurableLogDrainResponseBody$Outbound` instead. */
  export type Outbound = GetConfigurableLogDrainResponseBody$Outbound;
}

export function getConfigurableLogDrainResponseBodyToJSON(
  getConfigurableLogDrainResponseBody: GetConfigurableLogDrainResponseBody,
): string {
  return JSON.stringify(
    GetConfigurableLogDrainResponseBody$outboundSchema.parse(
      getConfigurableLogDrainResponseBody,
    ),
  );
}

export function getConfigurableLogDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetConfigurableLogDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetConfigurableLogDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetConfigurableLogDrainResponseBody' from JSON`,
  );
}
