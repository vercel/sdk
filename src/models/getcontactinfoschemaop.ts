/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BadRequest,
  BadRequest$inboundSchema,
  BadRequest$Outbound,
  BadRequest$outboundSchema,
} from "./badrequest.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetContactInfoSchemaRequest = {
  domain: string;
  teamId?: string | undefined;
};

/**
 * There was something wrong with the request
 */
export type GetContactInfoSchemaDomainsRegistrarResponseBody =
  | BadRequest
  | HttpApiDecodeError;

/**
 * Success
 */
export type GetContactInfoSchemaResponseBody = {};

/** @internal */
export const GetContactInfoSchemaRequest$inboundSchema: z.ZodType<
  GetContactInfoSchemaRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
});

/** @internal */
export type GetContactInfoSchemaRequest$Outbound = {
  domain: string;
  teamId?: string | undefined;
};

/** @internal */
export const GetContactInfoSchemaRequest$outboundSchema: z.ZodType<
  GetContactInfoSchemaRequest$Outbound,
  z.ZodTypeDef,
  GetContactInfoSchemaRequest
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactInfoSchemaRequest$ {
  /** @deprecated use `GetContactInfoSchemaRequest$inboundSchema` instead. */
  export const inboundSchema = GetContactInfoSchemaRequest$inboundSchema;
  /** @deprecated use `GetContactInfoSchemaRequest$outboundSchema` instead. */
  export const outboundSchema = GetContactInfoSchemaRequest$outboundSchema;
  /** @deprecated use `GetContactInfoSchemaRequest$Outbound` instead. */
  export type Outbound = GetContactInfoSchemaRequest$Outbound;
}

export function getContactInfoSchemaRequestToJSON(
  getContactInfoSchemaRequest: GetContactInfoSchemaRequest,
): string {
  return JSON.stringify(
    GetContactInfoSchemaRequest$outboundSchema.parse(
      getContactInfoSchemaRequest,
    ),
  );
}

export function getContactInfoSchemaRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetContactInfoSchemaRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactInfoSchemaRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactInfoSchemaRequest' from JSON`,
  );
}

/** @internal */
export const GetContactInfoSchemaDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    GetContactInfoSchemaDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([BadRequest$inboundSchema, HttpApiDecodeError$inboundSchema]);

/** @internal */
export type GetContactInfoSchemaDomainsRegistrarResponseBody$Outbound =
  | BadRequest$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const GetContactInfoSchemaDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    GetContactInfoSchemaDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    GetContactInfoSchemaDomainsRegistrarResponseBody
  > = z.union([BadRequest$outboundSchema, HttpApiDecodeError$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactInfoSchemaDomainsRegistrarResponseBody$ {
  /** @deprecated use `GetContactInfoSchemaDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetContactInfoSchemaDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `GetContactInfoSchemaDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetContactInfoSchemaDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `GetContactInfoSchemaDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound =
    GetContactInfoSchemaDomainsRegistrarResponseBody$Outbound;
}

export function getContactInfoSchemaDomainsRegistrarResponseBodyToJSON(
  getContactInfoSchemaDomainsRegistrarResponseBody:
    GetContactInfoSchemaDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    GetContactInfoSchemaDomainsRegistrarResponseBody$outboundSchema.parse(
      getContactInfoSchemaDomainsRegistrarResponseBody,
    ),
  );
}

export function getContactInfoSchemaDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetContactInfoSchemaDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetContactInfoSchemaDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetContactInfoSchemaDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const GetContactInfoSchemaResponseBody$inboundSchema: z.ZodType<
  GetContactInfoSchemaResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetContactInfoSchemaResponseBody$Outbound = {};

/** @internal */
export const GetContactInfoSchemaResponseBody$outboundSchema: z.ZodType<
  GetContactInfoSchemaResponseBody$Outbound,
  z.ZodTypeDef,
  GetContactInfoSchemaResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetContactInfoSchemaResponseBody$ {
  /** @deprecated use `GetContactInfoSchemaResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetContactInfoSchemaResponseBody$inboundSchema;
  /** @deprecated use `GetContactInfoSchemaResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetContactInfoSchemaResponseBody$outboundSchema;
  /** @deprecated use `GetContactInfoSchemaResponseBody$Outbound` instead. */
  export type Outbound = GetContactInfoSchemaResponseBody$Outbound;
}

export function getContactInfoSchemaResponseBodyToJSON(
  getContactInfoSchemaResponseBody: GetContactInfoSchemaResponseBody,
): string {
  return JSON.stringify(
    GetContactInfoSchemaResponseBody$outboundSchema.parse(
      getContactInfoSchemaResponseBody,
    ),
  );
}

export function getContactInfoSchemaResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetContactInfoSchemaResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetContactInfoSchemaResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetContactInfoSchemaResponseBody' from JSON`,
  );
}
