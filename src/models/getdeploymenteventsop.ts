/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * Order of the returned events based on the timestamp.
 */
export const Direction = {
  Backward: "backward",
  Forward: "forward",
} as const;
/**
 * Order of the returned events based on the timestamp.
 */
export type Direction = ClosedEnum<typeof Direction>;

/**
 * HTTP status code range to filter events by.
 */
export type StatusCode = number | string;

export type GetDeploymentEventsRequest = {
  /**
   * The unique identifier or hostname of the deployment.
   */
  idOrUrl: string;
  /**
   * Order of the returned events based on the timestamp.
   */
  direction?: Direction | undefined;
  /**
   * When enabled, this endpoint will return live events as they happen.
   */
  follow?: number | undefined;
  /**
   * Maximum number of events to return. Provide `-1` to return all available logs.
   */
  limit?: number | undefined;
  /**
   * Deployment build ID.
   */
  name?: string | undefined;
  /**
   * Timestamp for when build logs should be pulled from.
   */
  since?: number | undefined;
  /**
   * Timestamp for when the build logs should be pulled up until.
   */
  until?: number | undefined;
  /**
   * HTTP status code range to filter events by.
   */
  statusCode?: number | string | undefined;
  delimiter?: number | undefined;
  builds?: number | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * Type of log entry
 */
export const GetDeploymentEventsType = {
  Stdout: "stdout",
  Stderr: "stderr",
} as const;
/**
 * Type of log entry
 */
export type GetDeploymentEventsType = ClosedEnum<
  typeof GetDeploymentEventsType
>;

export type Info = {
  /**
   * Type of operation
   */
  type?: string | undefined;
  /**
   * Name of the build
   */
  name?: string | undefined;
  /**
   * Entrypoint for the build
   */
  entrypoint?: string | undefined;
};

export type GetDeploymentEventsResponseBody = {
  /**
   * Unix timestamp when the log entry was created
   */
  created?: number | undefined;
  /**
   * Unix timestamp of the log entry date
   */
  date?: number | undefined;
  /**
   * Unique identifier for the deployment
   */
  deploymentId?: string | undefined;
  /**
   * Unique identifier for the log entry
   */
  id?: string | undefined;
  /**
   * Log message content
   */
  text?: string | undefined;
  /**
   * Type of log entry
   */
  type?: GetDeploymentEventsType | undefined;
  /**
   * Serial identifier for the log entry
   */
  serial?: string | undefined;
  info?: Info | undefined;
};

/** @internal */
export const Direction$inboundSchema: z.ZodNativeEnum<typeof Direction> = z
  .nativeEnum(Direction);

/** @internal */
export const Direction$outboundSchema: z.ZodNativeEnum<typeof Direction> =
  Direction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Direction$ {
  /** @deprecated use `Direction$inboundSchema` instead. */
  export const inboundSchema = Direction$inboundSchema;
  /** @deprecated use `Direction$outboundSchema` instead. */
  export const outboundSchema = Direction$outboundSchema;
}

/** @internal */
export const StatusCode$inboundSchema: z.ZodType<
  StatusCode,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type StatusCode$Outbound = number | string;

/** @internal */
export const StatusCode$outboundSchema: z.ZodType<
  StatusCode$Outbound,
  z.ZodTypeDef,
  StatusCode
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace StatusCode$ {
  /** @deprecated use `StatusCode$inboundSchema` instead. */
  export const inboundSchema = StatusCode$inboundSchema;
  /** @deprecated use `StatusCode$outboundSchema` instead. */
  export const outboundSchema = StatusCode$outboundSchema;
  /** @deprecated use `StatusCode$Outbound` instead. */
  export type Outbound = StatusCode$Outbound;
}

export function statusCodeToJSON(statusCode: StatusCode): string {
  return JSON.stringify(StatusCode$outboundSchema.parse(statusCode));
}

export function statusCodeFromJSON(
  jsonString: string,
): SafeParseResult<StatusCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => StatusCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'StatusCode' from JSON`,
  );
}

/** @internal */
export const GetDeploymentEventsRequest$inboundSchema: z.ZodType<
  GetDeploymentEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrUrl: z.string(),
  direction: Direction$inboundSchema.default("forward"),
  follow: z.number().optional(),
  limit: z.number().optional(),
  name: z.string().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  statusCode: z.union([z.number(), z.string()]).optional(),
  delimiter: z.number().optional(),
  builds: z.number().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetDeploymentEventsRequest$Outbound = {
  idOrUrl: string;
  direction: string;
  follow?: number | undefined;
  limit?: number | undefined;
  name?: string | undefined;
  since?: number | undefined;
  until?: number | undefined;
  statusCode?: number | string | undefined;
  delimiter?: number | undefined;
  builds?: number | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetDeploymentEventsRequest$outboundSchema: z.ZodType<
  GetDeploymentEventsRequest$Outbound,
  z.ZodTypeDef,
  GetDeploymentEventsRequest
> = z.object({
  idOrUrl: z.string(),
  direction: Direction$outboundSchema.default("forward"),
  follow: z.number().optional(),
  limit: z.number().optional(),
  name: z.string().optional(),
  since: z.number().optional(),
  until: z.number().optional(),
  statusCode: z.union([z.number(), z.string()]).optional(),
  delimiter: z.number().optional(),
  builds: z.number().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsRequest$ {
  /** @deprecated use `GetDeploymentEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentEventsRequest$inboundSchema;
  /** @deprecated use `GetDeploymentEventsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentEventsRequest$outboundSchema;
  /** @deprecated use `GetDeploymentEventsRequest$Outbound` instead. */
  export type Outbound = GetDeploymentEventsRequest$Outbound;
}

export function getDeploymentEventsRequestToJSON(
  getDeploymentEventsRequest: GetDeploymentEventsRequest,
): string {
  return JSON.stringify(
    GetDeploymentEventsRequest$outboundSchema.parse(getDeploymentEventsRequest),
  );
}

export function getDeploymentEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentEventsRequest' from JSON`,
  );
}

/** @internal */
export const GetDeploymentEventsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentEventsType
> = z.nativeEnum(GetDeploymentEventsType);

/** @internal */
export const GetDeploymentEventsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDeploymentEventsType
> = GetDeploymentEventsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsType$ {
  /** @deprecated use `GetDeploymentEventsType$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentEventsType$inboundSchema;
  /** @deprecated use `GetDeploymentEventsType$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentEventsType$outboundSchema;
}

/** @internal */
export const Info$inboundSchema: z.ZodType<Info, z.ZodTypeDef, unknown> = z
  .object({
    type: z.string().optional(),
    name: z.string().optional(),
    entrypoint: z.string().optional(),
  });

/** @internal */
export type Info$Outbound = {
  type?: string | undefined;
  name?: string | undefined;
  entrypoint?: string | undefined;
};

/** @internal */
export const Info$outboundSchema: z.ZodType<Info$Outbound, z.ZodTypeDef, Info> =
  z.object({
    type: z.string().optional(),
    name: z.string().optional(),
    entrypoint: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Info$ {
  /** @deprecated use `Info$inboundSchema` instead. */
  export const inboundSchema = Info$inboundSchema;
  /** @deprecated use `Info$outboundSchema` instead. */
  export const outboundSchema = Info$outboundSchema;
  /** @deprecated use `Info$Outbound` instead. */
  export type Outbound = Info$Outbound;
}

export function infoToJSON(info: Info): string {
  return JSON.stringify(Info$outboundSchema.parse(info));
}

export function infoFromJSON(
  jsonString: string,
): SafeParseResult<Info, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Info$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Info' from JSON`,
  );
}

/** @internal */
export const GetDeploymentEventsResponseBody$inboundSchema: z.ZodType<
  GetDeploymentEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.number().optional(),
  date: z.number().optional(),
  deploymentId: z.string().optional(),
  id: z.string().optional(),
  text: z.string().optional(),
  type: GetDeploymentEventsType$inboundSchema.optional(),
  serial: z.string().optional(),
  info: z.lazy(() => Info$inboundSchema).optional(),
});

/** @internal */
export type GetDeploymentEventsResponseBody$Outbound = {
  created?: number | undefined;
  date?: number | undefined;
  deploymentId?: string | undefined;
  id?: string | undefined;
  text?: string | undefined;
  type?: string | undefined;
  serial?: string | undefined;
  info?: Info$Outbound | undefined;
};

/** @internal */
export const GetDeploymentEventsResponseBody$outboundSchema: z.ZodType<
  GetDeploymentEventsResponseBody$Outbound,
  z.ZodTypeDef,
  GetDeploymentEventsResponseBody
> = z.object({
  created: z.number().optional(),
  date: z.number().optional(),
  deploymentId: z.string().optional(),
  id: z.string().optional(),
  text: z.string().optional(),
  type: GetDeploymentEventsType$outboundSchema.optional(),
  serial: z.string().optional(),
  info: z.lazy(() => Info$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDeploymentEventsResponseBody$ {
  /** @deprecated use `GetDeploymentEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDeploymentEventsResponseBody$inboundSchema;
  /** @deprecated use `GetDeploymentEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDeploymentEventsResponseBody$outboundSchema;
  /** @deprecated use `GetDeploymentEventsResponseBody$Outbound` instead. */
  export type Outbound = GetDeploymentEventsResponseBody$Outbound;
}

export function getDeploymentEventsResponseBodyToJSON(
  getDeploymentEventsResponseBody: GetDeploymentEventsResponseBody,
): string {
  return JSON.stringify(
    GetDeploymentEventsResponseBody$outboundSchema.parse(
      getDeploymentEventsResponseBody,
    ),
  );
}

export function getDeploymentEventsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDeploymentEventsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDeploymentEventsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDeploymentEventsResponseBody' from JSON`,
  );
}
