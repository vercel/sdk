/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DomainNotRegistered,
  DomainNotRegistered$inboundSchema,
  DomainNotRegistered$Outbound,
  DomainNotRegistered$outboundSchema,
} from "./domainnotregistered.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetDomainAuthCodeRequest = {
  domain: string;
  teamId?: string | undefined;
};

/**
 * NotAuthorizedForScope
 */
export type GetDomainAuthCodeDomainsRegistrarResponseResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

/**
 * There was something wrong with the request
 */
export type GetDomainAuthCodeDomainsRegistrarResponseBody =
  | DomainNotRegistered
  | HttpApiDecodeError;

/**
 * Success
 */
export type GetDomainAuthCodeResponseBody = {
  authCode: string;
};

/** @internal */
export const GetDomainAuthCodeRequest$inboundSchema: z.ZodType<
  GetDomainAuthCodeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
});

/** @internal */
export type GetDomainAuthCodeRequest$Outbound = {
  domain: string;
  teamId?: string | undefined;
};

/** @internal */
export const GetDomainAuthCodeRequest$outboundSchema: z.ZodType<
  GetDomainAuthCodeRequest$Outbound,
  z.ZodTypeDef,
  GetDomainAuthCodeRequest
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainAuthCodeRequest$ {
  /** @deprecated use `GetDomainAuthCodeRequest$inboundSchema` instead. */
  export const inboundSchema = GetDomainAuthCodeRequest$inboundSchema;
  /** @deprecated use `GetDomainAuthCodeRequest$outboundSchema` instead. */
  export const outboundSchema = GetDomainAuthCodeRequest$outboundSchema;
  /** @deprecated use `GetDomainAuthCodeRequest$Outbound` instead. */
  export type Outbound = GetDomainAuthCodeRequest$Outbound;
}

export function getDomainAuthCodeRequestToJSON(
  getDomainAuthCodeRequest: GetDomainAuthCodeRequest,
): string {
  return JSON.stringify(
    GetDomainAuthCodeRequest$outboundSchema.parse(getDomainAuthCodeRequest),
  );
}

export function getDomainAuthCodeRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainAuthCodeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainAuthCodeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainAuthCodeRequest' from JSON`,
  );
}

/** @internal */
export const GetDomainAuthCodeDomainsRegistrarResponseResponseBody$inboundSchema:
  z.ZodType<
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type GetDomainAuthCodeDomainsRegistrarResponseResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const GetDomainAuthCodeDomainsRegistrarResponseResponseBody$outboundSchema:
  z.ZodType<
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody$Outbound,
    z.ZodTypeDef,
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainAuthCodeDomainsRegistrarResponseResponseBody$ {
  /** @deprecated use `GetDomainAuthCodeDomainsRegistrarResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody$inboundSchema;
  /** @deprecated use `GetDomainAuthCodeDomainsRegistrarResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody$outboundSchema;
  /** @deprecated use `GetDomainAuthCodeDomainsRegistrarResponseResponseBody$Outbound` instead. */
  export type Outbound =
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody$Outbound;
}

export function getDomainAuthCodeDomainsRegistrarResponseResponseBodyToJSON(
  getDomainAuthCodeDomainsRegistrarResponseResponseBody:
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody,
): string {
  return JSON.stringify(
    GetDomainAuthCodeDomainsRegistrarResponseResponseBody$outboundSchema.parse(
      getDomainAuthCodeDomainsRegistrarResponseResponseBody,
    ),
  );
}

export function getDomainAuthCodeDomainsRegistrarResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDomainAuthCodeDomainsRegistrarResponseResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDomainAuthCodeDomainsRegistrarResponseResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDomainAuthCodeDomainsRegistrarResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const GetDomainAuthCodeDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    GetDomainAuthCodeDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([
    DomainNotRegistered$inboundSchema,
    HttpApiDecodeError$inboundSchema,
  ]);

/** @internal */
export type GetDomainAuthCodeDomainsRegistrarResponseBody$Outbound =
  | DomainNotRegistered$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const GetDomainAuthCodeDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    GetDomainAuthCodeDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    GetDomainAuthCodeDomainsRegistrarResponseBody
  > = z.union([
    DomainNotRegistered$outboundSchema,
    HttpApiDecodeError$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainAuthCodeDomainsRegistrarResponseBody$ {
  /** @deprecated use `GetDomainAuthCodeDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetDomainAuthCodeDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `GetDomainAuthCodeDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetDomainAuthCodeDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `GetDomainAuthCodeDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = GetDomainAuthCodeDomainsRegistrarResponseBody$Outbound;
}

export function getDomainAuthCodeDomainsRegistrarResponseBodyToJSON(
  getDomainAuthCodeDomainsRegistrarResponseBody:
    GetDomainAuthCodeDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    GetDomainAuthCodeDomainsRegistrarResponseBody$outboundSchema.parse(
      getDomainAuthCodeDomainsRegistrarResponseBody,
    ),
  );
}

export function getDomainAuthCodeDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDomainAuthCodeDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDomainAuthCodeDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDomainAuthCodeDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const GetDomainAuthCodeResponseBody$inboundSchema: z.ZodType<
  GetDomainAuthCodeResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  authCode: z.string(),
});

/** @internal */
export type GetDomainAuthCodeResponseBody$Outbound = {
  authCode: string;
};

/** @internal */
export const GetDomainAuthCodeResponseBody$outboundSchema: z.ZodType<
  GetDomainAuthCodeResponseBody$Outbound,
  z.ZodTypeDef,
  GetDomainAuthCodeResponseBody
> = z.object({
  authCode: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainAuthCodeResponseBody$ {
  /** @deprecated use `GetDomainAuthCodeResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDomainAuthCodeResponseBody$inboundSchema;
  /** @deprecated use `GetDomainAuthCodeResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDomainAuthCodeResponseBody$outboundSchema;
  /** @deprecated use `GetDomainAuthCodeResponseBody$Outbound` instead. */
  export type Outbound = GetDomainAuthCodeResponseBody$Outbound;
}

export function getDomainAuthCodeResponseBodyToJSON(
  getDomainAuthCodeResponseBody: GetDomainAuthCodeResponseBody,
): string {
  return JSON.stringify(
    GetDomainAuthCodeResponseBody$outboundSchema.parse(
      getDomainAuthCodeResponseBody,
    ),
  );
}

export function getDomainAuthCodeResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainAuthCodeResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainAuthCodeResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainAuthCodeResponseBody' from JSON`,
  );
}
