/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetDomainTransferInRequest = {
  domain: string;
};

/**
 * NotAuthorizedForScope
 */
export type GetDomainTransferInDomainsRegistrarResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

export const GetDomainTransferInStatus = {
  Canceled: "canceled",
  CanceledPendingRefund: "canceled_pending_refund",
  Completed: "completed",
  Created: "created",
  Failed: "failed",
  Pending: "pending",
  PendingInsert: "pending_insert",
  PendingNewAuthCode: "pending_new_auth_code",
  PendingTransfer: "pending_transfer",
  PendingUnlock: "pending_unlock",
  Rejected: "rejected",
  SubmittingTransfer: "submitting_transfer",
} as const;
export type GetDomainTransferInStatus = ClosedEnum<
  typeof GetDomainTransferInStatus
>;

/**
 * Success
 */
export type GetDomainTransferInResponseBody = {
  status: GetDomainTransferInStatus;
};

/** @internal */
export const GetDomainTransferInRequest$inboundSchema: z.ZodType<
  GetDomainTransferInRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
});

/** @internal */
export type GetDomainTransferInRequest$Outbound = {
  domain: string;
};

/** @internal */
export const GetDomainTransferInRequest$outboundSchema: z.ZodType<
  GetDomainTransferInRequest$Outbound,
  z.ZodTypeDef,
  GetDomainTransferInRequest
> = z.object({
  domain: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainTransferInRequest$ {
  /** @deprecated use `GetDomainTransferInRequest$inboundSchema` instead. */
  export const inboundSchema = GetDomainTransferInRequest$inboundSchema;
  /** @deprecated use `GetDomainTransferInRequest$outboundSchema` instead. */
  export const outboundSchema = GetDomainTransferInRequest$outboundSchema;
  /** @deprecated use `GetDomainTransferInRequest$Outbound` instead. */
  export type Outbound = GetDomainTransferInRequest$Outbound;
}

export function getDomainTransferInRequestToJSON(
  getDomainTransferInRequest: GetDomainTransferInRequest,
): string {
  return JSON.stringify(
    GetDomainTransferInRequest$outboundSchema.parse(getDomainTransferInRequest),
  );
}

export function getDomainTransferInRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainTransferInRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainTransferInRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainTransferInRequest' from JSON`,
  );
}

/** @internal */
export const GetDomainTransferInDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    GetDomainTransferInDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type GetDomainTransferInDomainsRegistrarResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const GetDomainTransferInDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    GetDomainTransferInDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    GetDomainTransferInDomainsRegistrarResponseBody
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainTransferInDomainsRegistrarResponseBody$ {
  /** @deprecated use `GetDomainTransferInDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetDomainTransferInDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `GetDomainTransferInDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetDomainTransferInDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `GetDomainTransferInDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound =
    GetDomainTransferInDomainsRegistrarResponseBody$Outbound;
}

export function getDomainTransferInDomainsRegistrarResponseBodyToJSON(
  getDomainTransferInDomainsRegistrarResponseBody:
    GetDomainTransferInDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    GetDomainTransferInDomainsRegistrarResponseBody$outboundSchema.parse(
      getDomainTransferInDomainsRegistrarResponseBody,
    ),
  );
}

export function getDomainTransferInDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDomainTransferInDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDomainTransferInDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDomainTransferInDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const GetDomainTransferInStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetDomainTransferInStatus
> = z.nativeEnum(GetDomainTransferInStatus);

/** @internal */
export const GetDomainTransferInStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetDomainTransferInStatus
> = GetDomainTransferInStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainTransferInStatus$ {
  /** @deprecated use `GetDomainTransferInStatus$inboundSchema` instead. */
  export const inboundSchema = GetDomainTransferInStatus$inboundSchema;
  /** @deprecated use `GetDomainTransferInStatus$outboundSchema` instead. */
  export const outboundSchema = GetDomainTransferInStatus$outboundSchema;
}

/** @internal */
export const GetDomainTransferInResponseBody$inboundSchema: z.ZodType<
  GetDomainTransferInResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: GetDomainTransferInStatus$inboundSchema,
});

/** @internal */
export type GetDomainTransferInResponseBody$Outbound = {
  status: string;
};

/** @internal */
export const GetDomainTransferInResponseBody$outboundSchema: z.ZodType<
  GetDomainTransferInResponseBody$Outbound,
  z.ZodTypeDef,
  GetDomainTransferInResponseBody
> = z.object({
  status: GetDomainTransferInStatus$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDomainTransferInResponseBody$ {
  /** @deprecated use `GetDomainTransferInResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDomainTransferInResponseBody$inboundSchema;
  /** @deprecated use `GetDomainTransferInResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDomainTransferInResponseBody$outboundSchema;
  /** @deprecated use `GetDomainTransferInResponseBody$Outbound` instead. */
  export type Outbound = GetDomainTransferInResponseBody$Outbound;
}

export function getDomainTransferInResponseBodyToJSON(
  getDomainTransferInResponseBody: GetDomainTransferInResponseBody,
): string {
  return JSON.stringify(
    GetDomainTransferInResponseBody$outboundSchema.parse(
      getDomainTransferInResponseBody,
    ),
  );
}

export function getDomainTransferInResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDomainTransferInResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDomainTransferInResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDomainTransferInResponseBody' from JSON`,
  );
}
