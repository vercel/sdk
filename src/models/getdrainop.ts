/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetDrainRequest = {
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetDrainResponseBodyDrainsCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type GetDrainResponseBodyDrainsCreatedFrom = ClosedEnum<
  typeof GetDrainResponseBodyDrainsCreatedFrom
>;

export type GetDrainResponseBodyDrainsLog = {};

export type GetDrainResponseBodyDrainsTrace = {};

export type GetDrainResponseBodyDrainsAnalytics = {};

export type GetDrainResponseBodyDrainsSpeedInsights = {};

export type GetDrainResponseBodyDrainsSchemas = {
  log?: GetDrainResponseBodyDrainsLog | undefined;
  trace?: GetDrainResponseBodyDrainsTrace | undefined;
  analytics?: GetDrainResponseBodyDrainsAnalytics | undefined;
  speedInsights?: GetDrainResponseBodyDrainsSpeedInsights | undefined;
};

export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type =
  {
    Internal: "internal",
  } as const;
export type GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type =
  ClosedEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  >;

export const GetDrainDeliveryDrainsTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type GetDrainDeliveryDrainsTarget = ClosedEnum<
  typeof GetDrainDeliveryDrainsTarget
>;

export type GetDrainDeliveryDrains5 = {
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type;
  target: GetDrainDeliveryDrainsTarget;
};

export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type =
  {
    Clickhouse: "clickhouse",
  } as const;
export type GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type =
  ClosedEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  >;

export type GetDrainDeliveryDrains4 = {
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type;
  endpoint: string;
  table: string;
};

export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type =
  {
    Syslog: "syslog",
  } as const;
export type GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type =
  ClosedEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type
  >;

export type GetDrainDeliveryDrains3 = {
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type;
  endpoint: string;
  secret: string;
};

export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type =
  {
    Otlphttp: "otlphttp",
  } as const;
export type GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  >;

export type GetDrainDeliveryDrainsEndpoint = {
  traces: string;
};

export const GetDrainDeliveryDrainsResponse200Encoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type GetDrainDeliveryDrainsResponse200Encoding = ClosedEnum<
  typeof GetDrainDeliveryDrainsResponse200Encoding
>;

export type GetDrainDeliveryDrains2 = {
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type;
  endpoint: GetDrainDeliveryDrainsEndpoint;
  encoding: GetDrainDeliveryDrainsResponse200Encoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  {
    Http: "http",
  } as const;
export type GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  >;

export const GetDrainDeliveryDrainsResponseEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type GetDrainDeliveryDrainsResponseEncoding = ClosedEnum<
  typeof GetDrainDeliveryDrainsResponseEncoding
>;

export const GetDrainDeliveryDrainsCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type GetDrainDeliveryDrainsCompression = ClosedEnum<
  typeof GetDrainDeliveryDrainsCompression
>;

export type GetDrainDeliveryDrains1 = {
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType;
  endpoint: string;
  encoding: GetDrainDeliveryDrainsResponseEncoding;
  compression?: GetDrainDeliveryDrainsCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type GetDrainResponseBodyDrainsDelivery =
  | GetDrainDeliveryDrains1
  | GetDrainDeliveryDrains2
  | GetDrainDeliveryDrains3
  | GetDrainDeliveryDrains4
  | GetDrainDeliveryDrains5;

export const GetDrainResponseBodyDrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type GetDrainResponseBodyDrainsType = ClosedEnum<
  typeof GetDrainResponseBodyDrainsType
>;

export const GetDrainResponseBodyDrainsEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type GetDrainResponseBodyDrainsEnv = ClosedEnum<
  typeof GetDrainResponseBodyDrainsEnv
>;

export type GetDrainResponseBodyDrainsSampling = {
  type: GetDrainResponseBodyDrainsType;
  rate: number;
  env?: GetDrainResponseBodyDrainsEnv | undefined;
  requestPath?: string | undefined;
};

export const GetDrainResponseBodyDrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type GetDrainResponseBodyDrainsStatus = ClosedEnum<
  typeof GetDrainResponseBodyDrainsStatus
>;

export const GetDrainResponseBodyDrainsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type GetDrainResponseBodyDrainsDisabledReason = ClosedEnum<
  typeof GetDrainResponseBodyDrainsDisabledReason
>;

export const GetDrainSourceDrainsResponse200Kind = {
  Integration: "integration",
} as const;
export type GetDrainSourceDrainsResponse200Kind = ClosedEnum<
  typeof GetDrainSourceDrainsResponse200Kind
>;

export type GetDrainSourceDrains2 = {
  kind: GetDrainSourceDrainsResponse200Kind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const GetDrainSourceDrainsResponseKind = {
  SelfServed: "self-served",
} as const;
export type GetDrainSourceDrainsResponseKind = ClosedEnum<
  typeof GetDrainSourceDrainsResponseKind
>;

export type GetDrainSourceDrains1 = {
  kind: GetDrainSourceDrainsResponseKind;
};

export type GetDrainResponseBodyDrainsSource =
  | GetDrainSourceDrains2
  | GetDrainSourceDrains1;

export const GetDrainFilterV2DrainsResponse200Version = {
  V2: "v2",
} as const;
export type GetDrainFilterV2DrainsResponse200Version = ClosedEnum<
  typeof GetDrainFilterV2DrainsResponse200Version
>;

export const GetDrainFilterDrainsResponse200Type = {
  Odata: "odata",
} as const;
export type GetDrainFilterDrainsResponse200Type = ClosedEnum<
  typeof GetDrainFilterDrainsResponse200Type
>;

export type GetDrainFilterDrains2 = {
  type: GetDrainFilterDrainsResponse200Type;
  text: string;
};

export const GetDrainFilterDrainsResponseType = {
  Basic: "basic",
} as const;
export type GetDrainFilterDrainsResponseType = ClosedEnum<
  typeof GetDrainFilterDrainsResponseType
>;

export type GetDrainFilterDrainsProject = {
  ids?: Array<string> | undefined;
};

export type GetDrainFilterDrainsLog = {
  sources?: Array<string> | undefined;
};

export type GetDrainFilterDrainsDeployment = {
  environments?: Array<string> | undefined;
};

export type GetDrainFilterDrains1 = {
  type: GetDrainFilterDrainsResponseType;
  project?: GetDrainFilterDrainsProject | undefined;
  log?: GetDrainFilterDrainsLog | undefined;
  deployment?: GetDrainFilterDrainsDeployment | undefined;
};

export type GetDrainFilterV2DrainsFilter =
  | GetDrainFilterDrains2
  | GetDrainFilterDrains1;

export type GetDrainFilterV2Drains2 = {
  version: GetDrainFilterV2DrainsResponse200Version;
  filter: GetDrainFilterDrains2 | GetDrainFilterDrains1;
};

export const GetDrainFilterV2DrainsResponseVersion = {
  V1: "v1",
} as const;
export type GetDrainFilterV2DrainsResponseVersion = ClosedEnum<
  typeof GetDrainFilterV2DrainsResponseVersion
>;

export type GetDrainFilterV2Drains1 = {
  version: GetDrainFilterV2DrainsResponseVersion;
};

export type GetDrainResponseBodyDrainsFilterV2 =
  | GetDrainFilterV2Drains2
  | GetDrainFilterV2Drains1;

export const GetDrainResponseBodyFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Fastify: "fastify",
  Xmcp: "xmcp",
} as const;
export type GetDrainResponseBodyFramework = ClosedEnum<
  typeof GetDrainResponseBodyFramework
>;

export type GetDrainResponseBodyProjectsMetadata = {
  id: string;
  name: string;
  framework?: GetDrainResponseBodyFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type GetDrainResponseBody2 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: GetDrainResponseBodyDrainsCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetDrainResponseBodyDrainsSchemas | undefined;
  delivery?:
    | GetDrainDeliveryDrains1
    | GetDrainDeliveryDrains2
    | GetDrainDeliveryDrains3
    | GetDrainDeliveryDrains4
    | GetDrainDeliveryDrains5
    | undefined;
  sampling?: Array<GetDrainResponseBodyDrainsSampling> | undefined;
  teamId?: string | null | undefined;
  status?: GetDrainResponseBodyDrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: GetDrainResponseBodyDrainsDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainSourceDrains2 | GetDrainSourceDrains1;
  filter?: string | undefined;
  filterV2?: GetDrainFilterV2Drains2 | GetDrainFilterV2Drains1 | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?: Array<GetDrainResponseBodyProjectsMetadata> | undefined;
};

export const GetDrainResponseBodyCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type GetDrainResponseBodyCreatedFrom = ClosedEnum<
  typeof GetDrainResponseBodyCreatedFrom
>;

export type GetDrainResponseBodyLog = {};

export type GetDrainResponseBodyTrace = {};

export type GetDrainResponseBodyAnalytics = {};

export type GetDrainResponseBodySpeedInsights = {};

export type GetDrainResponseBodySchemas = {
  log?: GetDrainResponseBodyLog | undefined;
  trace?: GetDrainResponseBodyTrace | undefined;
  analytics?: GetDrainResponseBodyAnalytics | undefined;
  speedInsights?: GetDrainResponseBodySpeedInsights | undefined;
};

export const GetDrainDeliveryDrainsResponse200ApplicationJSONType = {
  Internal: "internal",
} as const;
export type GetDrainDeliveryDrainsResponse200ApplicationJSONType = ClosedEnum<
  typeof GetDrainDeliveryDrainsResponse200ApplicationJSONType
>;

export const GetDrainDeliveryTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type GetDrainDeliveryTarget = ClosedEnum<typeof GetDrainDeliveryTarget>;

export type GetDrainDelivery5 = {
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONType;
  target: GetDrainDeliveryTarget;
};

export const GetDrainDeliveryDrainsResponse200Type = {
  Clickhouse: "clickhouse",
} as const;
export type GetDrainDeliveryDrainsResponse200Type = ClosedEnum<
  typeof GetDrainDeliveryDrainsResponse200Type
>;

export type GetDrainDelivery4 = {
  type: GetDrainDeliveryDrainsResponse200Type;
  endpoint: string;
  table: string;
};

export const GetDrainDeliveryDrainsResponseType = {
  Syslog: "syslog",
} as const;
export type GetDrainDeliveryDrainsResponseType = ClosedEnum<
  typeof GetDrainDeliveryDrainsResponseType
>;

export type GetDrainDelivery3 = {
  type: GetDrainDeliveryDrainsResponseType;
  endpoint: string;
  secret: string;
};

export const GetDrainDeliveryDrainsType = {
  Otlphttp: "otlphttp",
} as const;
export type GetDrainDeliveryDrainsType = ClosedEnum<
  typeof GetDrainDeliveryDrainsType
>;

export type GetDrainDeliveryEndpoint = {
  traces: string;
};

export const GetDrainDeliveryDrainsEncoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type GetDrainDeliveryDrainsEncoding = ClosedEnum<
  typeof GetDrainDeliveryDrainsEncoding
>;

export type GetDrainDelivery2 = {
  type: GetDrainDeliveryDrainsType;
  endpoint: GetDrainDeliveryEndpoint;
  encoding: GetDrainDeliveryDrainsEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const GetDrainDeliveryType = {
  Http: "http",
} as const;
export type GetDrainDeliveryType = ClosedEnum<typeof GetDrainDeliveryType>;

export const GetDrainDeliveryEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type GetDrainDeliveryEncoding = ClosedEnum<
  typeof GetDrainDeliveryEncoding
>;

export const GetDrainDeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type GetDrainDeliveryCompression = ClosedEnum<
  typeof GetDrainDeliveryCompression
>;

export type GetDrainDelivery1 = {
  type: GetDrainDeliveryType;
  endpoint: string;
  encoding: GetDrainDeliveryEncoding;
  compression?: GetDrainDeliveryCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type GetDrainResponseBodyDelivery =
  | GetDrainDelivery1
  | GetDrainDelivery2
  | GetDrainDelivery3
  | GetDrainDelivery4
  | GetDrainDelivery5;

export const GetDrainResponseBodyType = {
  HeadSampling: "head_sampling",
} as const;
export type GetDrainResponseBodyType = ClosedEnum<
  typeof GetDrainResponseBodyType
>;

export const GetDrainResponseBodyEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type GetDrainResponseBodyEnv = ClosedEnum<
  typeof GetDrainResponseBodyEnv
>;

export type GetDrainResponseBodySampling = {
  type: GetDrainResponseBodyType;
  rate: number;
  env?: GetDrainResponseBodyEnv | undefined;
  requestPath?: string | undefined;
};

export const GetDrainResponseBodyStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type GetDrainResponseBodyStatus = ClosedEnum<
  typeof GetDrainResponseBodyStatus
>;

export const GetDrainResponseBodyDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type GetDrainResponseBodyDisabledReason = ClosedEnum<
  typeof GetDrainResponseBodyDisabledReason
>;

export const GetDrainSourceDrainsKind = {
  Integration: "integration",
} as const;
export type GetDrainSourceDrainsKind = ClosedEnum<
  typeof GetDrainSourceDrainsKind
>;

export type GetDrainSource2 = {
  kind: GetDrainSourceDrainsKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const GetDrainSourceKind = {
  SelfServed: "self-served",
} as const;
export type GetDrainSourceKind = ClosedEnum<typeof GetDrainSourceKind>;

export type GetDrainSource1 = {
  kind: GetDrainSourceKind;
};

export type GetDrainResponseBodySource = GetDrainSource2 | GetDrainSource1;

export const GetDrainFilterV2DrainsVersion = {
  V2: "v2",
} as const;
export type GetDrainFilterV2DrainsVersion = ClosedEnum<
  typeof GetDrainFilterV2DrainsVersion
>;

export const GetDrainFilterDrainsType = {
  Odata: "odata",
} as const;
export type GetDrainFilterDrainsType = ClosedEnum<
  typeof GetDrainFilterDrainsType
>;

export type GetDrainFilter2 = {
  type: GetDrainFilterDrainsType;
  text: string;
};

export const GetDrainFilterType = {
  Basic: "basic",
} as const;
export type GetDrainFilterType = ClosedEnum<typeof GetDrainFilterType>;

export type GetDrainFilterProject = {
  ids?: Array<string> | undefined;
};

export type GetDrainFilterLog = {
  sources?: Array<string> | undefined;
};

export type GetDrainFilterDeployment = {
  environments?: Array<string> | undefined;
};

export type GetDrainFilter1 = {
  type: GetDrainFilterType;
  project?: GetDrainFilterProject | undefined;
  log?: GetDrainFilterLog | undefined;
  deployment?: GetDrainFilterDeployment | undefined;
};

export type GetDrainFilterV2Filter = GetDrainFilter2 | GetDrainFilter1;

export type GetDrainFilterV22 = {
  version: GetDrainFilterV2DrainsVersion;
  filter: GetDrainFilter2 | GetDrainFilter1;
};

export const GetDrainFilterV2Version = {
  V1: "v1",
} as const;
export type GetDrainFilterV2Version = ClosedEnum<
  typeof GetDrainFilterV2Version
>;

export type GetDrainFilterV21 = {
  version: GetDrainFilterV2Version;
};

export type GetDrainResponseBodyFilterV2 =
  | GetDrainFilterV22
  | GetDrainFilterV21;

export type GetDrainResponseBody1 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: GetDrainResponseBodyCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetDrainResponseBodySchemas | undefined;
  delivery?:
    | GetDrainDelivery1
    | GetDrainDelivery2
    | GetDrainDelivery3
    | GetDrainDelivery4
    | GetDrainDelivery5
    | undefined;
  sampling?: Array<GetDrainResponseBodySampling> | undefined;
  teamId?: string | null | undefined;
  status?: GetDrainResponseBodyStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: GetDrainResponseBodyDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainSource2 | GetDrainSource1;
  filter?: string | undefined;
  filterV2?: GetDrainFilterV22 | GetDrainFilterV21 | undefined;
};

export type GetDrainResponseBody =
  | GetDrainResponseBody1
  | GetDrainResponseBody2;

/** @internal */
export const GetDrainRequest$inboundSchema: z.ZodType<
  GetDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetDrainRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetDrainRequest$outboundSchema: z.ZodType<
  GetDrainRequest$Outbound,
  z.ZodTypeDef,
  GetDrainRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainRequest$ {
  /** @deprecated use `GetDrainRequest$inboundSchema` instead. */
  export const inboundSchema = GetDrainRequest$inboundSchema;
  /** @deprecated use `GetDrainRequest$outboundSchema` instead. */
  export const outboundSchema = GetDrainRequest$outboundSchema;
  /** @deprecated use `GetDrainRequest$Outbound` instead. */
  export type Outbound = GetDrainRequest$Outbound;
}

export function getDrainRequestToJSON(
  getDrainRequest: GetDrainRequest,
): string {
  return JSON.stringify(GetDrainRequest$outboundSchema.parse(getDrainRequest));
}

export function getDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainRequest' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsCreatedFrom$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainResponseBodyDrainsCreatedFrom> = z.nativeEnum(
    GetDrainResponseBodyDrainsCreatedFrom,
  );

/** @internal */
export const GetDrainResponseBodyDrainsCreatedFrom$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainResponseBodyDrainsCreatedFrom> =
    GetDrainResponseBodyDrainsCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsCreatedFrom$ {
  /** @deprecated use `GetDrainResponseBodyDrainsCreatedFrom$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainResponseBodyDrainsCreatedFrom$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsCreatedFrom$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsCreatedFrom$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyDrainsLog$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyDrainsLog$Outbound = {};

/** @internal */
export const GetDrainResponseBodyDrainsLog$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsLog$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsLog$ {
  /** @deprecated use `GetDrainResponseBodyDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsLog$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDrainsLog$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsLog$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsLog$Outbound;
}

export function getDrainResponseBodyDrainsLogToJSON(
  getDrainResponseBodyDrainsLog: GetDrainResponseBodyDrainsLog,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsLog$outboundSchema.parse(
      getDrainResponseBodyDrainsLog,
    ),
  );
}

export function getDrainResponseBodyDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsTrace$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyDrainsTrace$Outbound = {};

/** @internal */
export const GetDrainResponseBodyDrainsTrace$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsTrace$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsTrace$ {
  /** @deprecated use `GetDrainResponseBodyDrainsTrace$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsTrace$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsTrace$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDrainsTrace$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsTrace$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsTrace$Outbound;
}

export function getDrainResponseBodyDrainsTraceToJSON(
  getDrainResponseBodyDrainsTrace: GetDrainResponseBodyDrainsTrace,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsTrace$outboundSchema.parse(
      getDrainResponseBodyDrainsTrace,
    ),
  );
}

export function getDrainResponseBodyDrainsTraceFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyDrainsTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsTrace' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsAnalytics$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyDrainsAnalytics$Outbound = {};

/** @internal */
export const GetDrainResponseBodyDrainsAnalytics$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsAnalytics$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsAnalytics$ {
  /** @deprecated use `GetDrainResponseBodyDrainsAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainResponseBodyDrainsAnalytics$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsAnalytics$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsAnalytics$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsAnalytics$Outbound;
}

export function getDrainResponseBodyDrainsAnalyticsToJSON(
  getDrainResponseBodyDrainsAnalytics: GetDrainResponseBodyDrainsAnalytics,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsAnalytics$outboundSchema.parse(
      getDrainResponseBodyDrainsAnalytics,
    ),
  );
}

export function getDrainResponseBodyDrainsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDrainResponseBodyDrainsAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsAnalytics' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsSpeedInsights$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyDrainsSpeedInsights$Outbound = {};

/** @internal */
export const GetDrainResponseBodyDrainsSpeedInsights$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSpeedInsights$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsSpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsSpeedInsights$ {
  /** @deprecated use `GetDrainResponseBodyDrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainResponseBodyDrainsSpeedInsights$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsSpeedInsights$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSpeedInsights$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsSpeedInsights$Outbound;
}

export function getDrainResponseBodyDrainsSpeedInsightsToJSON(
  getDrainResponseBodyDrainsSpeedInsights:
    GetDrainResponseBodyDrainsSpeedInsights,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsSpeedInsights$outboundSchema.parse(
      getDrainResponseBodyDrainsSpeedInsights,
    ),
  );
}

export function getDrainResponseBodyDrainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<
  GetDrainResponseBodyDrainsSpeedInsights,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetDrainResponseBodyDrainsSpeedInsights$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetDrainResponseBodyDrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsSchemas$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => GetDrainResponseBodyDrainsLog$inboundSchema).optional(),
  trace: z.lazy(() => GetDrainResponseBodyDrainsTrace$inboundSchema).optional(),
  analytics: z.lazy(() => GetDrainResponseBodyDrainsAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() =>
    GetDrainResponseBodyDrainsSpeedInsights$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type GetDrainResponseBodyDrainsSchemas$Outbound = {
  log?: GetDrainResponseBodyDrainsLog$Outbound | undefined;
  trace?: GetDrainResponseBodyDrainsTrace$Outbound | undefined;
  analytics?: GetDrainResponseBodyDrainsAnalytics$Outbound | undefined;
  speed_insights?: GetDrainResponseBodyDrainsSpeedInsights$Outbound | undefined;
};

/** @internal */
export const GetDrainResponseBodyDrainsSchemas$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSchemas$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsSchemas
> = z.object({
  log: z.lazy(() => GetDrainResponseBodyDrainsLog$outboundSchema).optional(),
  trace: z.lazy(() => GetDrainResponseBodyDrainsTrace$outboundSchema)
    .optional(),
  analytics: z.lazy(() => GetDrainResponseBodyDrainsAnalytics$outboundSchema)
    .optional(),
  speedInsights: z.lazy(() =>
    GetDrainResponseBodyDrainsSpeedInsights$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsSchemas$ {
  /** @deprecated use `GetDrainResponseBodyDrainsSchemas$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsSchemas$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSchemas$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsSchemas$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSchemas$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsSchemas$Outbound;
}

export function getDrainResponseBodyDrainsSchemasToJSON(
  getDrainResponseBodyDrainsSchemas: GetDrainResponseBodyDrainsSchemas,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsSchemas$outboundSchema.parse(
      getDrainResponseBodyDrainsSchemas,
    ),
  );
}

export function getDrainResponseBodyDrainsSchemasFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyDrainsSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsSchemas' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  > = z.nativeEnum(
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  > =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrainsTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsTarget
> = z.nativeEnum(GetDrainDeliveryDrainsTarget);

/** @internal */
export const GetDrainDeliveryDrainsTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsTarget
> = GetDrainDeliveryDrainsTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsTarget$ {
  /** @deprecated use `GetDrainDeliveryDrainsTarget$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrainsTarget$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsTarget$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrainsTarget$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrains5$inboundSchema: z.ZodType<
  GetDrainDeliveryDrains5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema,
  target: GetDrainDeliveryDrainsTarget$inboundSchema,
});

/** @internal */
export type GetDrainDeliveryDrains5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const GetDrainDeliveryDrains5$outboundSchema: z.ZodType<
  GetDrainDeliveryDrains5$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryDrains5
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema,
  target: GetDrainDeliveryDrainsTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrains5$ {
  /** @deprecated use `GetDrainDeliveryDrains5$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrains5$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains5$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrains5$outboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains5$Outbound` instead. */
  export type Outbound = GetDrainDeliveryDrains5$Outbound;
}

export function getDrainDeliveryDrains5ToJSON(
  getDrainDeliveryDrains5: GetDrainDeliveryDrains5,
): string {
  return JSON.stringify(
    GetDrainDeliveryDrains5$outboundSchema.parse(getDrainDeliveryDrains5),
  );
}

export function getDrainDeliveryDrains5FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryDrains5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryDrains5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryDrains5' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  > = z.nativeEnum(
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  > =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrains4$inboundSchema: z.ZodType<
  GetDrainDeliveryDrains4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type GetDrainDeliveryDrains4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const GetDrainDeliveryDrains4$outboundSchema: z.ZodType<
  GetDrainDeliveryDrains4$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryDrains4
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrains4$ {
  /** @deprecated use `GetDrainDeliveryDrains4$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrains4$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains4$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrains4$outboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains4$Outbound` instead. */
  export type Outbound = GetDrainDeliveryDrains4$Outbound;
}

export function getDrainDeliveryDrains4ToJSON(
  getDrainDeliveryDrains4: GetDrainDeliveryDrains4,
): string {
  return JSON.stringify(
    GetDrainDeliveryDrains4$outboundSchema.parse(getDrainDeliveryDrains4),
  );
}

export function getDrainDeliveryDrains4FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryDrains4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryDrains4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryDrains4' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type
  > = z.nativeEnum(
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type
  > =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrains3$inboundSchema: z.ZodType<
  GetDrainDeliveryDrains3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type GetDrainDeliveryDrains3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const GetDrainDeliveryDrains3$outboundSchema: z.ZodType<
  GetDrainDeliveryDrains3$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryDrains3
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrains3$ {
  /** @deprecated use `GetDrainDeliveryDrains3$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrains3$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains3$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrains3$outboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains3$Outbound` instead. */
  export type Outbound = GetDrainDeliveryDrains3$Outbound;
}

export function getDrainDeliveryDrains3ToJSON(
  getDrainDeliveryDrains3: GetDrainDeliveryDrains3,
): string {
  return JSON.stringify(
    GetDrainDeliveryDrains3$outboundSchema.parse(getDrainDeliveryDrains3),
  );
}

export function getDrainDeliveryDrains3FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryDrains3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryDrains3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryDrains3' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  > =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrainsEndpoint$inboundSchema: z.ZodType<
  GetDrainDeliveryDrainsEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type GetDrainDeliveryDrainsEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const GetDrainDeliveryDrainsEndpoint$outboundSchema: z.ZodType<
  GetDrainDeliveryDrainsEndpoint$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryDrainsEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsEndpoint$ {
  /** @deprecated use `GetDrainDeliveryDrainsEndpoint$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrainsEndpoint$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsEndpoint$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrainsEndpoint$outboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsEndpoint$Outbound` instead. */
  export type Outbound = GetDrainDeliveryDrainsEndpoint$Outbound;
}

export function getDrainDeliveryDrainsEndpointToJSON(
  getDrainDeliveryDrainsEndpoint: GetDrainDeliveryDrainsEndpoint,
): string {
  return JSON.stringify(
    GetDrainDeliveryDrainsEndpoint$outboundSchema.parse(
      getDrainDeliveryDrainsEndpoint,
    ),
  );
}

export function getDrainDeliveryDrainsEndpointFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryDrainsEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryDrainsEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryDrainsEndpoint' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200Encoding$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponse200Encoding> = z
    .nativeEnum(GetDrainDeliveryDrainsResponse200Encoding);

/** @internal */
export const GetDrainDeliveryDrainsResponse200Encoding$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponse200Encoding> =
    GetDrainDeliveryDrainsResponse200Encoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200Encoding$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200Encoding$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200Encoding$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200Encoding$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200Encoding$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrains2$inboundSchema: z.ZodType<
  GetDrainDeliveryDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  endpoint: z.lazy(() => GetDrainDeliveryDrainsEndpoint$inboundSchema),
  encoding: GetDrainDeliveryDrainsResponse200Encoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainDeliveryDrains2$Outbound = {
  type: string;
  endpoint: GetDrainDeliveryDrainsEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainDeliveryDrains2$outboundSchema: z.ZodType<
  GetDrainDeliveryDrains2$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryDrains2
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  endpoint: z.lazy(() => GetDrainDeliveryDrainsEndpoint$outboundSchema),
  encoding: GetDrainDeliveryDrainsResponse200Encoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrains2$ {
  /** @deprecated use `GetDrainDeliveryDrains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrains2$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrains2$outboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains2$Outbound` instead. */
  export type Outbound = GetDrainDeliveryDrains2$Outbound;
}

export function getDrainDeliveryDrains2ToJSON(
  getDrainDeliveryDrains2: GetDrainDeliveryDrains2,
): string {
  return JSON.stringify(
    GetDrainDeliveryDrains2$outboundSchema.parse(getDrainDeliveryDrains2),
  );
}

export function getDrainDeliveryDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryDrains2' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrainsResponseEncoding$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponseEncoding> = z.nativeEnum(
    GetDrainDeliveryDrainsResponseEncoding,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponseEncoding$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponseEncoding> =
    GetDrainDeliveryDrainsResponseEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponseEncoding$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponseEncoding$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponseEncoding$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponseEncoding$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponseEncoding$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrainsCompression$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsCompression
> = z.nativeEnum(GetDrainDeliveryDrainsCompression);

/** @internal */
export const GetDrainDeliveryDrainsCompression$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsCompression
> = GetDrainDeliveryDrainsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsCompression$ {
  /** @deprecated use `GetDrainDeliveryDrainsCompression$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrainsCompression$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsCompression$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsCompression$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryDrains1$inboundSchema: z.ZodType<
  GetDrainDeliveryDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  endpoint: z.string(),
  encoding: GetDrainDeliveryDrainsResponseEncoding$inboundSchema,
  compression: GetDrainDeliveryDrainsCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainDeliveryDrains1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainDeliveryDrains1$outboundSchema: z.ZodType<
  GetDrainDeliveryDrains1$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryDrains1
> = z.object({
  type:
    GetDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  endpoint: z.string(),
  encoding: GetDrainDeliveryDrainsResponseEncoding$outboundSchema,
  compression: GetDrainDeliveryDrainsCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrains1$ {
  /** @deprecated use `GetDrainDeliveryDrains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrains1$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrains1$outboundSchema;
  /** @deprecated use `GetDrainDeliveryDrains1$Outbound` instead. */
  export type Outbound = GetDrainDeliveryDrains1$Outbound;
}

export function getDrainDeliveryDrains1ToJSON(
  getDrainDeliveryDrains1: GetDrainDeliveryDrains1,
): string {
  return JSON.stringify(
    GetDrainDeliveryDrains1$outboundSchema.parse(getDrainDeliveryDrains1),
  );
}

export function getDrainDeliveryDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryDrains1' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsDelivery$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainDeliveryDrains1$inboundSchema),
  z.lazy(() => GetDrainDeliveryDrains2$inboundSchema),
  z.lazy(() => GetDrainDeliveryDrains3$inboundSchema),
  z.lazy(() => GetDrainDeliveryDrains4$inboundSchema),
  z.lazy(() => GetDrainDeliveryDrains5$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBodyDrainsDelivery$Outbound =
  | GetDrainDeliveryDrains1$Outbound
  | GetDrainDeliveryDrains2$Outbound
  | GetDrainDeliveryDrains3$Outbound
  | GetDrainDeliveryDrains4$Outbound
  | GetDrainDeliveryDrains5$Outbound;

/** @internal */
export const GetDrainResponseBodyDrainsDelivery$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsDelivery$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsDelivery
> = z.union([
  z.lazy(() => GetDrainDeliveryDrains1$outboundSchema),
  z.lazy(() => GetDrainDeliveryDrains2$outboundSchema),
  z.lazy(() => GetDrainDeliveryDrains3$outboundSchema),
  z.lazy(() => GetDrainDeliveryDrains4$outboundSchema),
  z.lazy(() => GetDrainDeliveryDrains5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsDelivery$ {
  /** @deprecated use `GetDrainResponseBodyDrainsDelivery$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsDelivery$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsDelivery$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsDelivery$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsDelivery$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsDelivery$Outbound;
}

export function getDrainResponseBodyDrainsDeliveryToJSON(
  getDrainResponseBodyDrainsDelivery: GetDrainResponseBodyDrainsDelivery,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsDelivery$outboundSchema.parse(
      getDrainResponseBodyDrainsDelivery,
    ),
  );
}

export function getDrainResponseBodyDrainsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDrainResponseBodyDrainsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsDelivery' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDrainsType
> = z.nativeEnum(GetDrainResponseBodyDrainsType);

/** @internal */
export const GetDrainResponseBodyDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDrainsType
> = GetDrainResponseBodyDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsType$ {
  /** @deprecated use `GetDrainResponseBodyDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsType$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyDrainsEnv$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDrainsEnv
> = z.nativeEnum(GetDrainResponseBodyDrainsEnv);

/** @internal */
export const GetDrainResponseBodyDrainsEnv$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDrainsEnv
> = GetDrainResponseBodyDrainsEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsEnv$ {
  /** @deprecated use `GetDrainResponseBodyDrainsEnv$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsEnv$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsEnv$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDrainsEnv$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyDrainsSampling$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainResponseBodyDrainsType$inboundSchema,
  rate: z.number(),
  env: GetDrainResponseBodyDrainsEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type GetDrainResponseBodyDrainsSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const GetDrainResponseBodyDrainsSampling$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSampling$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsSampling
> = z.object({
  type: GetDrainResponseBodyDrainsType$outboundSchema,
  rate: z.number(),
  env: GetDrainResponseBodyDrainsEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsSampling$ {
  /** @deprecated use `GetDrainResponseBodyDrainsSampling$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsSampling$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSampling$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsSampling$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSampling$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsSampling$Outbound;
}

export function getDrainResponseBodyDrainsSamplingToJSON(
  getDrainResponseBodyDrainsSampling: GetDrainResponseBodyDrainsSampling,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsSampling$outboundSchema.parse(
      getDrainResponseBodyDrainsSampling,
    ),
  );
}

export function getDrainResponseBodyDrainsSamplingFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDrainResponseBodyDrainsSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsSampling' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDrainsStatus
> = z.nativeEnum(GetDrainResponseBodyDrainsStatus);

/** @internal */
export const GetDrainResponseBodyDrainsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDrainsStatus
> = GetDrainResponseBodyDrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsStatus$ {
  /** @deprecated use `GetDrainResponseBodyDrainsStatus$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsStatus$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsStatus$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDrainsStatus$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyDrainsDisabledReason$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainResponseBodyDrainsDisabledReason> = z
    .nativeEnum(GetDrainResponseBodyDrainsDisabledReason);

/** @internal */
export const GetDrainResponseBodyDrainsDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainResponseBodyDrainsDisabledReason> =
    GetDrainResponseBodyDrainsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsDisabledReason$ {
  /** @deprecated use `GetDrainResponseBodyDrainsDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainResponseBodyDrainsDisabledReason$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsDisabledReason$outboundSchema;
}

/** @internal */
export const GetDrainSourceDrainsResponse200Kind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceDrainsResponse200Kind
> = z.nativeEnum(GetDrainSourceDrainsResponse200Kind);

/** @internal */
export const GetDrainSourceDrainsResponse200Kind$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainSourceDrainsResponse200Kind> =
    GetDrainSourceDrainsResponse200Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSourceDrainsResponse200Kind$ {
  /** @deprecated use `GetDrainSourceDrainsResponse200Kind$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainSourceDrainsResponse200Kind$inboundSchema;
  /** @deprecated use `GetDrainSourceDrainsResponse200Kind$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainSourceDrainsResponse200Kind$outboundSchema;
}

/** @internal */
export const GetDrainSourceDrains2$inboundSchema: z.ZodType<
  GetDrainSourceDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainSourceDrainsResponse200Kind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetDrainSourceDrains2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const GetDrainSourceDrains2$outboundSchema: z.ZodType<
  GetDrainSourceDrains2$Outbound,
  z.ZodTypeDef,
  GetDrainSourceDrains2
> = z.object({
  kind: GetDrainSourceDrainsResponse200Kind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSourceDrains2$ {
  /** @deprecated use `GetDrainSourceDrains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainSourceDrains2$inboundSchema;
  /** @deprecated use `GetDrainSourceDrains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainSourceDrains2$outboundSchema;
  /** @deprecated use `GetDrainSourceDrains2$Outbound` instead. */
  export type Outbound = GetDrainSourceDrains2$Outbound;
}

export function getDrainSourceDrains2ToJSON(
  getDrainSourceDrains2: GetDrainSourceDrains2,
): string {
  return JSON.stringify(
    GetDrainSourceDrains2$outboundSchema.parse(getDrainSourceDrains2),
  );
}

export function getDrainSourceDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainSourceDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainSourceDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainSourceDrains2' from JSON`,
  );
}

/** @internal */
export const GetDrainSourceDrainsResponseKind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceDrainsResponseKind
> = z.nativeEnum(GetDrainSourceDrainsResponseKind);

/** @internal */
export const GetDrainSourceDrainsResponseKind$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceDrainsResponseKind
> = GetDrainSourceDrainsResponseKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSourceDrainsResponseKind$ {
  /** @deprecated use `GetDrainSourceDrainsResponseKind$inboundSchema` instead. */
  export const inboundSchema = GetDrainSourceDrainsResponseKind$inboundSchema;
  /** @deprecated use `GetDrainSourceDrainsResponseKind$outboundSchema` instead. */
  export const outboundSchema = GetDrainSourceDrainsResponseKind$outboundSchema;
}

/** @internal */
export const GetDrainSourceDrains1$inboundSchema: z.ZodType<
  GetDrainSourceDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainSourceDrainsResponseKind$inboundSchema,
});

/** @internal */
export type GetDrainSourceDrains1$Outbound = {
  kind: string;
};

/** @internal */
export const GetDrainSourceDrains1$outboundSchema: z.ZodType<
  GetDrainSourceDrains1$Outbound,
  z.ZodTypeDef,
  GetDrainSourceDrains1
> = z.object({
  kind: GetDrainSourceDrainsResponseKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSourceDrains1$ {
  /** @deprecated use `GetDrainSourceDrains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainSourceDrains1$inboundSchema;
  /** @deprecated use `GetDrainSourceDrains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainSourceDrains1$outboundSchema;
  /** @deprecated use `GetDrainSourceDrains1$Outbound` instead. */
  export type Outbound = GetDrainSourceDrains1$Outbound;
}

export function getDrainSourceDrains1ToJSON(
  getDrainSourceDrains1: GetDrainSourceDrains1,
): string {
  return JSON.stringify(
    GetDrainSourceDrains1$outboundSchema.parse(getDrainSourceDrains1),
  );
}

export function getDrainSourceDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainSourceDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainSourceDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainSourceDrains1' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsSource$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainSourceDrains2$inboundSchema),
  z.lazy(() => GetDrainSourceDrains1$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBodyDrainsSource$Outbound =
  | GetDrainSourceDrains2$Outbound
  | GetDrainSourceDrains1$Outbound;

/** @internal */
export const GetDrainResponseBodyDrainsSource$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsSource$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsSource
> = z.union([
  z.lazy(() => GetDrainSourceDrains2$outboundSchema),
  z.lazy(() => GetDrainSourceDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsSource$ {
  /** @deprecated use `GetDrainResponseBodyDrainsSource$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsSource$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSource$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDrainsSource$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsSource$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsSource$Outbound;
}

export function getDrainResponseBodyDrainsSourceToJSON(
  getDrainResponseBodyDrainsSource: GetDrainResponseBodyDrainsSource,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsSource$outboundSchema.parse(
      getDrainResponseBodyDrainsSource,
    ),
  );
}

export function getDrainResponseBodyDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsSource' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2DrainsResponse200Version$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainFilterV2DrainsResponse200Version> = z
    .nativeEnum(GetDrainFilterV2DrainsResponse200Version);

/** @internal */
export const GetDrainFilterV2DrainsResponse200Version$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainFilterV2DrainsResponse200Version> =
    GetDrainFilterV2DrainsResponse200Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2DrainsResponse200Version$ {
  /** @deprecated use `GetDrainFilterV2DrainsResponse200Version$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainFilterV2DrainsResponse200Version$inboundSchema;
  /** @deprecated use `GetDrainFilterV2DrainsResponse200Version$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainFilterV2DrainsResponse200Version$outboundSchema;
}

/** @internal */
export const GetDrainFilterDrainsResponse200Type$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterDrainsResponse200Type
> = z.nativeEnum(GetDrainFilterDrainsResponse200Type);

/** @internal */
export const GetDrainFilterDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainFilterDrainsResponse200Type> =
    GetDrainFilterDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrainsResponse200Type$ {
  /** @deprecated use `GetDrainFilterDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainFilterDrainsResponse200Type$inboundSchema;
  /** @deprecated use `GetDrainFilterDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainFilterDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDrainFilterDrains2$inboundSchema: z.ZodType<
  GetDrainFilterDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainFilterDrainsResponse200Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetDrainFilterDrains2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetDrainFilterDrains2$outboundSchema: z.ZodType<
  GetDrainFilterDrains2$Outbound,
  z.ZodTypeDef,
  GetDrainFilterDrains2
> = z.object({
  type: GetDrainFilterDrainsResponse200Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrains2$ {
  /** @deprecated use `GetDrainFilterDrains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrains2$inboundSchema;
  /** @deprecated use `GetDrainFilterDrains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrains2$outboundSchema;
  /** @deprecated use `GetDrainFilterDrains2$Outbound` instead. */
  export type Outbound = GetDrainFilterDrains2$Outbound;
}

export function getDrainFilterDrains2ToJSON(
  getDrainFilterDrains2: GetDrainFilterDrains2,
): string {
  return JSON.stringify(
    GetDrainFilterDrains2$outboundSchema.parse(getDrainFilterDrains2),
  );
}

export function getDrainFilterDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterDrains2' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterDrainsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterDrainsResponseType
> = z.nativeEnum(GetDrainFilterDrainsResponseType);

/** @internal */
export const GetDrainFilterDrainsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterDrainsResponseType
> = GetDrainFilterDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrainsResponseType$ {
  /** @deprecated use `GetDrainFilterDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrainsResponseType$inboundSchema;
  /** @deprecated use `GetDrainFilterDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrainsResponseType$outboundSchema;
}

/** @internal */
export const GetDrainFilterDrainsProject$inboundSchema: z.ZodType<
  GetDrainFilterDrainsProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainFilterDrainsProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const GetDrainFilterDrainsProject$outboundSchema: z.ZodType<
  GetDrainFilterDrainsProject$Outbound,
  z.ZodTypeDef,
  GetDrainFilterDrainsProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrainsProject$ {
  /** @deprecated use `GetDrainFilterDrainsProject$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrainsProject$inboundSchema;
  /** @deprecated use `GetDrainFilterDrainsProject$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrainsProject$outboundSchema;
  /** @deprecated use `GetDrainFilterDrainsProject$Outbound` instead. */
  export type Outbound = GetDrainFilterDrainsProject$Outbound;
}

export function getDrainFilterDrainsProjectToJSON(
  getDrainFilterDrainsProject: GetDrainFilterDrainsProject,
): string {
  return JSON.stringify(
    GetDrainFilterDrainsProject$outboundSchema.parse(
      getDrainFilterDrainsProject,
    ),
  );
}

export function getDrainFilterDrainsProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterDrainsProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterDrainsProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterDrainsProject' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterDrainsLog$inboundSchema: z.ZodType<
  GetDrainFilterDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainFilterDrainsLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const GetDrainFilterDrainsLog$outboundSchema: z.ZodType<
  GetDrainFilterDrainsLog$Outbound,
  z.ZodTypeDef,
  GetDrainFilterDrainsLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrainsLog$ {
  /** @deprecated use `GetDrainFilterDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrainsLog$inboundSchema;
  /** @deprecated use `GetDrainFilterDrainsLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrainsLog$outboundSchema;
  /** @deprecated use `GetDrainFilterDrainsLog$Outbound` instead. */
  export type Outbound = GetDrainFilterDrainsLog$Outbound;
}

export function getDrainFilterDrainsLogToJSON(
  getDrainFilterDrainsLog: GetDrainFilterDrainsLog,
): string {
  return JSON.stringify(
    GetDrainFilterDrainsLog$outboundSchema.parse(getDrainFilterDrainsLog),
  );
}

export function getDrainFilterDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterDrainsDeployment$inboundSchema: z.ZodType<
  GetDrainFilterDrainsDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainFilterDrainsDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const GetDrainFilterDrainsDeployment$outboundSchema: z.ZodType<
  GetDrainFilterDrainsDeployment$Outbound,
  z.ZodTypeDef,
  GetDrainFilterDrainsDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrainsDeployment$ {
  /** @deprecated use `GetDrainFilterDrainsDeployment$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrainsDeployment$inboundSchema;
  /** @deprecated use `GetDrainFilterDrainsDeployment$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrainsDeployment$outboundSchema;
  /** @deprecated use `GetDrainFilterDrainsDeployment$Outbound` instead. */
  export type Outbound = GetDrainFilterDrainsDeployment$Outbound;
}

export function getDrainFilterDrainsDeploymentToJSON(
  getDrainFilterDrainsDeployment: GetDrainFilterDrainsDeployment,
): string {
  return JSON.stringify(
    GetDrainFilterDrainsDeployment$outboundSchema.parse(
      getDrainFilterDrainsDeployment,
    ),
  );
}

export function getDrainFilterDrainsDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterDrainsDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterDrainsDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterDrainsDeployment' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterDrains1$inboundSchema: z.ZodType<
  GetDrainFilterDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainFilterDrainsResponseType$inboundSchema,
  project: z.lazy(() => GetDrainFilterDrainsProject$inboundSchema).optional(),
  log: z.lazy(() => GetDrainFilterDrainsLog$inboundSchema).optional(),
  deployment: z.lazy(() => GetDrainFilterDrainsDeployment$inboundSchema)
    .optional(),
});

/** @internal */
export type GetDrainFilterDrains1$Outbound = {
  type: string;
  project?: GetDrainFilterDrainsProject$Outbound | undefined;
  log?: GetDrainFilterDrainsLog$Outbound | undefined;
  deployment?: GetDrainFilterDrainsDeployment$Outbound | undefined;
};

/** @internal */
export const GetDrainFilterDrains1$outboundSchema: z.ZodType<
  GetDrainFilterDrains1$Outbound,
  z.ZodTypeDef,
  GetDrainFilterDrains1
> = z.object({
  type: GetDrainFilterDrainsResponseType$outboundSchema,
  project: z.lazy(() => GetDrainFilterDrainsProject$outboundSchema).optional(),
  log: z.lazy(() => GetDrainFilterDrainsLog$outboundSchema).optional(),
  deployment: z.lazy(() => GetDrainFilterDrainsDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrains1$ {
  /** @deprecated use `GetDrainFilterDrains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrains1$inboundSchema;
  /** @deprecated use `GetDrainFilterDrains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrains1$outboundSchema;
  /** @deprecated use `GetDrainFilterDrains1$Outbound` instead. */
  export type Outbound = GetDrainFilterDrains1$Outbound;
}

export function getDrainFilterDrains1ToJSON(
  getDrainFilterDrains1: GetDrainFilterDrains1,
): string {
  return JSON.stringify(
    GetDrainFilterDrains1$outboundSchema.parse(getDrainFilterDrains1),
  );
}

export function getDrainFilterDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterDrains1' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2DrainsFilter$inboundSchema: z.ZodType<
  GetDrainFilterV2DrainsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainFilterDrains2$inboundSchema),
  z.lazy(() => GetDrainFilterDrains1$inboundSchema),
]);

/** @internal */
export type GetDrainFilterV2DrainsFilter$Outbound =
  | GetDrainFilterDrains2$Outbound
  | GetDrainFilterDrains1$Outbound;

/** @internal */
export const GetDrainFilterV2DrainsFilter$outboundSchema: z.ZodType<
  GetDrainFilterV2DrainsFilter$Outbound,
  z.ZodTypeDef,
  GetDrainFilterV2DrainsFilter
> = z.union([
  z.lazy(() => GetDrainFilterDrains2$outboundSchema),
  z.lazy(() => GetDrainFilterDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2DrainsFilter$ {
  /** @deprecated use `GetDrainFilterV2DrainsFilter$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV2DrainsFilter$inboundSchema;
  /** @deprecated use `GetDrainFilterV2DrainsFilter$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV2DrainsFilter$outboundSchema;
  /** @deprecated use `GetDrainFilterV2DrainsFilter$Outbound` instead. */
  export type Outbound = GetDrainFilterV2DrainsFilter$Outbound;
}

export function getDrainFilterV2DrainsFilterToJSON(
  getDrainFilterV2DrainsFilter: GetDrainFilterV2DrainsFilter,
): string {
  return JSON.stringify(
    GetDrainFilterV2DrainsFilter$outboundSchema.parse(
      getDrainFilterV2DrainsFilter,
    ),
  );
}

export function getDrainFilterV2DrainsFilterFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterV2DrainsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterV2DrainsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterV2DrainsFilter' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2Drains2$inboundSchema: z.ZodType<
  GetDrainFilterV2Drains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainFilterV2DrainsResponse200Version$inboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainFilterDrains2$inboundSchema),
    z.lazy(() => GetDrainFilterDrains1$inboundSchema),
  ]),
});

/** @internal */
export type GetDrainFilterV2Drains2$Outbound = {
  version: string;
  filter: GetDrainFilterDrains2$Outbound | GetDrainFilterDrains1$Outbound;
};

/** @internal */
export const GetDrainFilterV2Drains2$outboundSchema: z.ZodType<
  GetDrainFilterV2Drains2$Outbound,
  z.ZodTypeDef,
  GetDrainFilterV2Drains2
> = z.object({
  version: GetDrainFilterV2DrainsResponse200Version$outboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainFilterDrains2$outboundSchema),
    z.lazy(() => GetDrainFilterDrains1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2Drains2$ {
  /** @deprecated use `GetDrainFilterV2Drains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV2Drains2$inboundSchema;
  /** @deprecated use `GetDrainFilterV2Drains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV2Drains2$outboundSchema;
  /** @deprecated use `GetDrainFilterV2Drains2$Outbound` instead. */
  export type Outbound = GetDrainFilterV2Drains2$Outbound;
}

export function getDrainFilterV2Drains2ToJSON(
  getDrainFilterV2Drains2: GetDrainFilterV2Drains2,
): string {
  return JSON.stringify(
    GetDrainFilterV2Drains2$outboundSchema.parse(getDrainFilterV2Drains2),
  );
}

export function getDrainFilterV2Drains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterV2Drains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterV2Drains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterV2Drains2' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2DrainsResponseVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainFilterV2DrainsResponseVersion> = z.nativeEnum(
    GetDrainFilterV2DrainsResponseVersion,
  );

/** @internal */
export const GetDrainFilterV2DrainsResponseVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainFilterV2DrainsResponseVersion> =
    GetDrainFilterV2DrainsResponseVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2DrainsResponseVersion$ {
  /** @deprecated use `GetDrainFilterV2DrainsResponseVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainFilterV2DrainsResponseVersion$inboundSchema;
  /** @deprecated use `GetDrainFilterV2DrainsResponseVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainFilterV2DrainsResponseVersion$outboundSchema;
}

/** @internal */
export const GetDrainFilterV2Drains1$inboundSchema: z.ZodType<
  GetDrainFilterV2Drains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainFilterV2DrainsResponseVersion$inboundSchema,
});

/** @internal */
export type GetDrainFilterV2Drains1$Outbound = {
  version: string;
};

/** @internal */
export const GetDrainFilterV2Drains1$outboundSchema: z.ZodType<
  GetDrainFilterV2Drains1$Outbound,
  z.ZodTypeDef,
  GetDrainFilterV2Drains1
> = z.object({
  version: GetDrainFilterV2DrainsResponseVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2Drains1$ {
  /** @deprecated use `GetDrainFilterV2Drains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV2Drains1$inboundSchema;
  /** @deprecated use `GetDrainFilterV2Drains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV2Drains1$outboundSchema;
  /** @deprecated use `GetDrainFilterV2Drains1$Outbound` instead. */
  export type Outbound = GetDrainFilterV2Drains1$Outbound;
}

export function getDrainFilterV2Drains1ToJSON(
  getDrainFilterV2Drains1: GetDrainFilterV2Drains1,
): string {
  return JSON.stringify(
    GetDrainFilterV2Drains1$outboundSchema.parse(getDrainFilterV2Drains1),
  );
}

export function getDrainFilterV2Drains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterV2Drains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterV2Drains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterV2Drains1' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDrainsFilterV2$inboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainFilterV2Drains2$inboundSchema),
  z.lazy(() => GetDrainFilterV2Drains1$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBodyDrainsFilterV2$Outbound =
  | GetDrainFilterV2Drains2$Outbound
  | GetDrainFilterV2Drains1$Outbound;

/** @internal */
export const GetDrainResponseBodyDrainsFilterV2$outboundSchema: z.ZodType<
  GetDrainResponseBodyDrainsFilterV2$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDrainsFilterV2
> = z.union([
  z.lazy(() => GetDrainFilterV2Drains2$outboundSchema),
  z.lazy(() => GetDrainFilterV2Drains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDrainsFilterV2$ {
  /** @deprecated use `GetDrainResponseBodyDrainsFilterV2$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDrainsFilterV2$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsFilterV2$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDrainsFilterV2$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDrainsFilterV2$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDrainsFilterV2$Outbound;
}

export function getDrainResponseBodyDrainsFilterV2ToJSON(
  getDrainResponseBodyDrainsFilterV2: GetDrainResponseBodyDrainsFilterV2,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDrainsFilterV2$outboundSchema.parse(
      getDrainResponseBodyDrainsFilterV2,
    ),
  );
}

export function getDrainResponseBodyDrainsFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDrainsFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDrainResponseBodyDrainsFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDrainsFilterV2' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyFramework$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyFramework
> = z.nativeEnum(GetDrainResponseBodyFramework);

/** @internal */
export const GetDrainResponseBodyFramework$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyFramework
> = GetDrainResponseBodyFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyFramework$ {
  /** @deprecated use `GetDrainResponseBodyFramework$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyFramework$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyFramework$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyFramework$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyProjectsMetadata$inboundSchema: z.ZodType<
  GetDrainResponseBodyProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetDrainResponseBodyFramework$inboundSchema).optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type GetDrainResponseBodyProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const GetDrainResponseBodyProjectsMetadata$outboundSchema: z.ZodType<
  GetDrainResponseBodyProjectsMetadata$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(GetDrainResponseBodyFramework$outboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyProjectsMetadata$ {
  /** @deprecated use `GetDrainResponseBodyProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainResponseBodyProjectsMetadata$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyProjectsMetadata$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyProjectsMetadata$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyProjectsMetadata$Outbound;
}

export function getDrainResponseBodyProjectsMetadataToJSON(
  getDrainResponseBodyProjectsMetadata: GetDrainResponseBodyProjectsMetadata,
): string {
  return JSON.stringify(
    GetDrainResponseBodyProjectsMetadata$outboundSchema.parse(
      getDrainResponseBodyProjectsMetadata,
    ),
  );
}

export function getDrainResponseBodyProjectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyProjectsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetDrainResponseBodyProjectsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBody2$inboundSchema: z.ZodType<
  GetDrainResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetDrainResponseBodyDrainsCreatedFrom$inboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetDrainResponseBodyDrainsSchemas$inboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => GetDrainDeliveryDrains1$inboundSchema),
    z.lazy(() => GetDrainDeliveryDrains2$inboundSchema),
    z.lazy(() => GetDrainDeliveryDrains3$inboundSchema),
    z.lazy(() => GetDrainDeliveryDrains4$inboundSchema),
    z.lazy(() => GetDrainDeliveryDrains5$inboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => GetDrainResponseBodyDrainsSampling$inboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetDrainResponseBodyDrainsStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetDrainResponseBodyDrainsDisabledReason$inboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetDrainSourceDrains2$inboundSchema),
    z.lazy(() => GetDrainSourceDrains1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetDrainFilterV2Drains2$inboundSchema),
    z.lazy(() => GetDrainFilterV2Drains1$inboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => GetDrainResponseBodyProjectsMetadata$inboundSchema),
  ).optional(),
});

/** @internal */
export type GetDrainResponseBody2$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetDrainResponseBodyDrainsSchemas$Outbound | undefined;
  delivery?:
    | GetDrainDeliveryDrains1$Outbound
    | GetDrainDeliveryDrains2$Outbound
    | GetDrainDeliveryDrains3$Outbound
    | GetDrainDeliveryDrains4$Outbound
    | GetDrainDeliveryDrains5$Outbound
    | undefined;
  sampling?: Array<GetDrainResponseBodyDrainsSampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainSourceDrains2$Outbound | GetDrainSourceDrains1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | GetDrainFilterV2Drains2$Outbound
    | GetDrainFilterV2Drains1$Outbound
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?:
    | Array<GetDrainResponseBodyProjectsMetadata$Outbound>
    | undefined;
};

/** @internal */
export const GetDrainResponseBody2$outboundSchema: z.ZodType<
  GetDrainResponseBody2$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBody2
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetDrainResponseBodyDrainsCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetDrainResponseBodyDrainsSchemas$outboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => GetDrainDeliveryDrains1$outboundSchema),
    z.lazy(() => GetDrainDeliveryDrains2$outboundSchema),
    z.lazy(() => GetDrainDeliveryDrains3$outboundSchema),
    z.lazy(() => GetDrainDeliveryDrains4$outboundSchema),
    z.lazy(() => GetDrainDeliveryDrains5$outboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => GetDrainResponseBodyDrainsSampling$outboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetDrainResponseBodyDrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetDrainResponseBodyDrainsDisabledReason$outboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetDrainSourceDrains2$outboundSchema),
    z.lazy(() => GetDrainSourceDrains1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetDrainFilterV2Drains2$outboundSchema),
    z.lazy(() => GetDrainFilterV2Drains1$outboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => GetDrainResponseBodyProjectsMetadata$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBody2$ {
  /** @deprecated use `GetDrainResponseBody2$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBody2$inboundSchema;
  /** @deprecated use `GetDrainResponseBody2$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBody2$outboundSchema;
  /** @deprecated use `GetDrainResponseBody2$Outbound` instead. */
  export type Outbound = GetDrainResponseBody2$Outbound;
}

export function getDrainResponseBody2ToJSON(
  getDrainResponseBody2: GetDrainResponseBody2,
): string {
  return JSON.stringify(
    GetDrainResponseBody2$outboundSchema.parse(getDrainResponseBody2),
  );
}

export function getDrainResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBody2' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyCreatedFrom
> = z.nativeEnum(GetDrainResponseBodyCreatedFrom);

/** @internal */
export const GetDrainResponseBodyCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyCreatedFrom
> = GetDrainResponseBodyCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyCreatedFrom$ {
  /** @deprecated use `GetDrainResponseBodyCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyCreatedFrom$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyCreatedFrom$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyCreatedFrom$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyLog$inboundSchema: z.ZodType<
  GetDrainResponseBodyLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyLog$Outbound = {};

/** @internal */
export const GetDrainResponseBodyLog$outboundSchema: z.ZodType<
  GetDrainResponseBodyLog$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyLog$ {
  /** @deprecated use `GetDrainResponseBodyLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyLog$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyLog$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyLog$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyLog$Outbound;
}

export function getDrainResponseBodyLogToJSON(
  getDrainResponseBodyLog: GetDrainResponseBodyLog,
): string {
  return JSON.stringify(
    GetDrainResponseBodyLog$outboundSchema.parse(getDrainResponseBodyLog),
  );
}

export function getDrainResponseBodyLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyLog' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyTrace$inboundSchema: z.ZodType<
  GetDrainResponseBodyTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyTrace$Outbound = {};

/** @internal */
export const GetDrainResponseBodyTrace$outboundSchema: z.ZodType<
  GetDrainResponseBodyTrace$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyTrace$ {
  /** @deprecated use `GetDrainResponseBodyTrace$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyTrace$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyTrace$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyTrace$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyTrace$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyTrace$Outbound;
}

export function getDrainResponseBodyTraceToJSON(
  getDrainResponseBodyTrace: GetDrainResponseBodyTrace,
): string {
  return JSON.stringify(
    GetDrainResponseBodyTrace$outboundSchema.parse(getDrainResponseBodyTrace),
  );
}

export function getDrainResponseBodyTraceFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyTrace' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyAnalytics$inboundSchema: z.ZodType<
  GetDrainResponseBodyAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodyAnalytics$Outbound = {};

/** @internal */
export const GetDrainResponseBodyAnalytics$outboundSchema: z.ZodType<
  GetDrainResponseBodyAnalytics$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyAnalytics$ {
  /** @deprecated use `GetDrainResponseBodyAnalytics$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyAnalytics$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyAnalytics$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyAnalytics$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyAnalytics$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyAnalytics$Outbound;
}

export function getDrainResponseBodyAnalyticsToJSON(
  getDrainResponseBodyAnalytics: GetDrainResponseBodyAnalytics,
): string {
  return JSON.stringify(
    GetDrainResponseBodyAnalytics$outboundSchema.parse(
      getDrainResponseBodyAnalytics,
    ),
  );
}

export function getDrainResponseBodyAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyAnalytics' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodySpeedInsights$inboundSchema: z.ZodType<
  GetDrainResponseBodySpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainResponseBodySpeedInsights$Outbound = {};

/** @internal */
export const GetDrainResponseBodySpeedInsights$outboundSchema: z.ZodType<
  GetDrainResponseBodySpeedInsights$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodySpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodySpeedInsights$ {
  /** @deprecated use `GetDrainResponseBodySpeedInsights$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodySpeedInsights$inboundSchema;
  /** @deprecated use `GetDrainResponseBodySpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodySpeedInsights$outboundSchema;
  /** @deprecated use `GetDrainResponseBodySpeedInsights$Outbound` instead. */
  export type Outbound = GetDrainResponseBodySpeedInsights$Outbound;
}

export function getDrainResponseBodySpeedInsightsToJSON(
  getDrainResponseBodySpeedInsights: GetDrainResponseBodySpeedInsights,
): string {
  return JSON.stringify(
    GetDrainResponseBodySpeedInsights$outboundSchema.parse(
      getDrainResponseBodySpeedInsights,
    ),
  );
}

export function getDrainResponseBodySpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodySpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodySpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodySpeedInsights' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodySchemas$inboundSchema: z.ZodType<
  GetDrainResponseBodySchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => GetDrainResponseBodyLog$inboundSchema).optional(),
  trace: z.lazy(() => GetDrainResponseBodyTrace$inboundSchema).optional(),
  analytics: z.lazy(() => GetDrainResponseBodyAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() => GetDrainResponseBodySpeedInsights$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type GetDrainResponseBodySchemas$Outbound = {
  log?: GetDrainResponseBodyLog$Outbound | undefined;
  trace?: GetDrainResponseBodyTrace$Outbound | undefined;
  analytics?: GetDrainResponseBodyAnalytics$Outbound | undefined;
  speed_insights?: GetDrainResponseBodySpeedInsights$Outbound | undefined;
};

/** @internal */
export const GetDrainResponseBodySchemas$outboundSchema: z.ZodType<
  GetDrainResponseBodySchemas$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodySchemas
> = z.object({
  log: z.lazy(() => GetDrainResponseBodyLog$outboundSchema).optional(),
  trace: z.lazy(() => GetDrainResponseBodyTrace$outboundSchema).optional(),
  analytics: z.lazy(() => GetDrainResponseBodyAnalytics$outboundSchema)
    .optional(),
  speedInsights: z.lazy(() => GetDrainResponseBodySpeedInsights$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodySchemas$ {
  /** @deprecated use `GetDrainResponseBodySchemas$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodySchemas$inboundSchema;
  /** @deprecated use `GetDrainResponseBodySchemas$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodySchemas$outboundSchema;
  /** @deprecated use `GetDrainResponseBodySchemas$Outbound` instead. */
  export type Outbound = GetDrainResponseBodySchemas$Outbound;
}

export function getDrainResponseBodySchemasToJSON(
  getDrainResponseBodySchemas: GetDrainResponseBodySchemas,
): string {
  return JSON.stringify(
    GetDrainResponseBodySchemas$outboundSchema.parse(
      getDrainResponseBodySchemas,
    ),
  );
}

export function getDrainResponseBodySchemasFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodySchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodySchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodySchemas' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponse200ApplicationJSONType> =
    z.nativeEnum(GetDrainDeliveryDrainsResponse200ApplicationJSONType);

/** @internal */
export const GetDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponse200ApplicationJSONType> =
    GetDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryTarget
> = z.nativeEnum(GetDrainDeliveryTarget);

/** @internal */
export const GetDrainDeliveryTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryTarget
> = GetDrainDeliveryTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryTarget$ {
  /** @deprecated use `GetDrainDeliveryTarget$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryTarget$inboundSchema;
  /** @deprecated use `GetDrainDeliveryTarget$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryTarget$outboundSchema;
}

/** @internal */
export const GetDrainDelivery5$inboundSchema: z.ZodType<
  GetDrainDelivery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema,
  target: GetDrainDeliveryTarget$inboundSchema,
});

/** @internal */
export type GetDrainDelivery5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const GetDrainDelivery5$outboundSchema: z.ZodType<
  GetDrainDelivery5$Outbound,
  z.ZodTypeDef,
  GetDrainDelivery5
> = z.object({
  type: GetDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema,
  target: GetDrainDeliveryTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDelivery5$ {
  /** @deprecated use `GetDrainDelivery5$inboundSchema` instead. */
  export const inboundSchema = GetDrainDelivery5$inboundSchema;
  /** @deprecated use `GetDrainDelivery5$outboundSchema` instead. */
  export const outboundSchema = GetDrainDelivery5$outboundSchema;
  /** @deprecated use `GetDrainDelivery5$Outbound` instead. */
  export type Outbound = GetDrainDelivery5$Outbound;
}

export function getDrainDelivery5ToJSON(
  getDrainDelivery5: GetDrainDelivery5,
): string {
  return JSON.stringify(
    GetDrainDelivery5$outboundSchema.parse(getDrainDelivery5),
  );
}

export function getDrainDelivery5FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDelivery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDelivery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDelivery5' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponse200Type> = z.nativeEnum(
    GetDrainDeliveryDrainsResponse200Type,
  );

/** @internal */
export const GetDrainDeliveryDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainDeliveryDrainsResponse200Type> =
    GetDrainDeliveryDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponse200Type$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainDeliveryDrainsResponse200Type$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDrainDelivery4$inboundSchema: z.ZodType<
  GetDrainDelivery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainDeliveryDrainsResponse200Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type GetDrainDelivery4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const GetDrainDelivery4$outboundSchema: z.ZodType<
  GetDrainDelivery4$Outbound,
  z.ZodTypeDef,
  GetDrainDelivery4
> = z.object({
  type: GetDrainDeliveryDrainsResponse200Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDelivery4$ {
  /** @deprecated use `GetDrainDelivery4$inboundSchema` instead. */
  export const inboundSchema = GetDrainDelivery4$inboundSchema;
  /** @deprecated use `GetDrainDelivery4$outboundSchema` instead. */
  export const outboundSchema = GetDrainDelivery4$outboundSchema;
  /** @deprecated use `GetDrainDelivery4$Outbound` instead. */
  export type Outbound = GetDrainDelivery4$Outbound;
}

export function getDrainDelivery4ToJSON(
  getDrainDelivery4: GetDrainDelivery4,
): string {
  return JSON.stringify(
    GetDrainDelivery4$outboundSchema.parse(getDrainDelivery4),
  );
}

export function getDrainDelivery4FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDelivery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDelivery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDelivery4' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsResponseType
> = z.nativeEnum(GetDrainDeliveryDrainsResponseType);

/** @internal */
export const GetDrainDeliveryDrainsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsResponseType
> = GetDrainDeliveryDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsResponseType$ {
  /** @deprecated use `GetDrainDeliveryDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrainsResponseType$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainDeliveryDrainsResponseType$outboundSchema;
}

/** @internal */
export const GetDrainDelivery3$inboundSchema: z.ZodType<
  GetDrainDelivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainDeliveryDrainsResponseType$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type GetDrainDelivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const GetDrainDelivery3$outboundSchema: z.ZodType<
  GetDrainDelivery3$Outbound,
  z.ZodTypeDef,
  GetDrainDelivery3
> = z.object({
  type: GetDrainDeliveryDrainsResponseType$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDelivery3$ {
  /** @deprecated use `GetDrainDelivery3$inboundSchema` instead. */
  export const inboundSchema = GetDrainDelivery3$inboundSchema;
  /** @deprecated use `GetDrainDelivery3$outboundSchema` instead. */
  export const outboundSchema = GetDrainDelivery3$outboundSchema;
  /** @deprecated use `GetDrainDelivery3$Outbound` instead. */
  export type Outbound = GetDrainDelivery3$Outbound;
}

export function getDrainDelivery3ToJSON(
  getDrainDelivery3: GetDrainDelivery3,
): string {
  return JSON.stringify(
    GetDrainDelivery3$outboundSchema.parse(getDrainDelivery3),
  );
}

export function getDrainDelivery3FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDelivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDelivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDelivery3' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsType
> = z.nativeEnum(GetDrainDeliveryDrainsType);

/** @internal */
export const GetDrainDeliveryDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsType
> = GetDrainDeliveryDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsType$ {
  /** @deprecated use `GetDrainDeliveryDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrainsType$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryEndpoint$inboundSchema: z.ZodType<
  GetDrainDeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type GetDrainDeliveryEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const GetDrainDeliveryEndpoint$outboundSchema: z.ZodType<
  GetDrainDeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  GetDrainDeliveryEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryEndpoint$ {
  /** @deprecated use `GetDrainDeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryEndpoint$inboundSchema;
  /** @deprecated use `GetDrainDeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryEndpoint$outboundSchema;
  /** @deprecated use `GetDrainDeliveryEndpoint$Outbound` instead. */
  export type Outbound = GetDrainDeliveryEndpoint$Outbound;
}

export function getDrainDeliveryEndpointToJSON(
  getDrainDeliveryEndpoint: GetDrainDeliveryEndpoint,
): string {
  return JSON.stringify(
    GetDrainDeliveryEndpoint$outboundSchema.parse(getDrainDeliveryEndpoint),
  );
}

export function getDrainDeliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryDrainsEncoding$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsEncoding
> = z.nativeEnum(GetDrainDeliveryDrainsEncoding);

/** @internal */
export const GetDrainDeliveryDrainsEncoding$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryDrainsEncoding
> = GetDrainDeliveryDrainsEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryDrainsEncoding$ {
  /** @deprecated use `GetDrainDeliveryDrainsEncoding$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryDrainsEncoding$inboundSchema;
  /** @deprecated use `GetDrainDeliveryDrainsEncoding$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryDrainsEncoding$outboundSchema;
}

/** @internal */
export const GetDrainDelivery2$inboundSchema: z.ZodType<
  GetDrainDelivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainDeliveryDrainsType$inboundSchema,
  endpoint: z.lazy(() => GetDrainDeliveryEndpoint$inboundSchema),
  encoding: GetDrainDeliveryDrainsEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainDelivery2$Outbound = {
  type: string;
  endpoint: GetDrainDeliveryEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainDelivery2$outboundSchema: z.ZodType<
  GetDrainDelivery2$Outbound,
  z.ZodTypeDef,
  GetDrainDelivery2
> = z.object({
  type: GetDrainDeliveryDrainsType$outboundSchema,
  endpoint: z.lazy(() => GetDrainDeliveryEndpoint$outboundSchema),
  encoding: GetDrainDeliveryDrainsEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDelivery2$ {
  /** @deprecated use `GetDrainDelivery2$inboundSchema` instead. */
  export const inboundSchema = GetDrainDelivery2$inboundSchema;
  /** @deprecated use `GetDrainDelivery2$outboundSchema` instead. */
  export const outboundSchema = GetDrainDelivery2$outboundSchema;
  /** @deprecated use `GetDrainDelivery2$Outbound` instead. */
  export type Outbound = GetDrainDelivery2$Outbound;
}

export function getDrainDelivery2ToJSON(
  getDrainDelivery2: GetDrainDelivery2,
): string {
  return JSON.stringify(
    GetDrainDelivery2$outboundSchema.parse(getDrainDelivery2),
  );
}

export function getDrainDelivery2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDelivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDelivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDelivery2' from JSON`,
  );
}

/** @internal */
export const GetDrainDeliveryType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryType
> = z.nativeEnum(GetDrainDeliveryType);

/** @internal */
export const GetDrainDeliveryType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryType
> = GetDrainDeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryType$ {
  /** @deprecated use `GetDrainDeliveryType$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryType$inboundSchema;
  /** @deprecated use `GetDrainDeliveryType$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryType$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryEncoding
> = z.nativeEnum(GetDrainDeliveryEncoding);

/** @internal */
export const GetDrainDeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryEncoding
> = GetDrainDeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryEncoding$ {
  /** @deprecated use `GetDrainDeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryEncoding$inboundSchema;
  /** @deprecated use `GetDrainDeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryEncoding$outboundSchema;
}

/** @internal */
export const GetDrainDeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryCompression
> = z.nativeEnum(GetDrainDeliveryCompression);

/** @internal */
export const GetDrainDeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainDeliveryCompression
> = GetDrainDeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDeliveryCompression$ {
  /** @deprecated use `GetDrainDeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = GetDrainDeliveryCompression$inboundSchema;
  /** @deprecated use `GetDrainDeliveryCompression$outboundSchema` instead. */
  export const outboundSchema = GetDrainDeliveryCompression$outboundSchema;
}

/** @internal */
export const GetDrainDelivery1$inboundSchema: z.ZodType<
  GetDrainDelivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainDeliveryType$inboundSchema,
  endpoint: z.string(),
  encoding: GetDrainDeliveryEncoding$inboundSchema,
  compression: GetDrainDeliveryCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainDelivery1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainDelivery1$outboundSchema: z.ZodType<
  GetDrainDelivery1$Outbound,
  z.ZodTypeDef,
  GetDrainDelivery1
> = z.object({
  type: GetDrainDeliveryType$outboundSchema,
  endpoint: z.string(),
  encoding: GetDrainDeliveryEncoding$outboundSchema,
  compression: GetDrainDeliveryCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainDelivery1$ {
  /** @deprecated use `GetDrainDelivery1$inboundSchema` instead. */
  export const inboundSchema = GetDrainDelivery1$inboundSchema;
  /** @deprecated use `GetDrainDelivery1$outboundSchema` instead. */
  export const outboundSchema = GetDrainDelivery1$outboundSchema;
  /** @deprecated use `GetDrainDelivery1$Outbound` instead. */
  export type Outbound = GetDrainDelivery1$Outbound;
}

export function getDrainDelivery1ToJSON(
  getDrainDelivery1: GetDrainDelivery1,
): string {
  return JSON.stringify(
    GetDrainDelivery1$outboundSchema.parse(getDrainDelivery1),
  );
}

export function getDrainDelivery1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainDelivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainDelivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainDelivery1' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyDelivery$inboundSchema: z.ZodType<
  GetDrainResponseBodyDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainDelivery1$inboundSchema),
  z.lazy(() => GetDrainDelivery2$inboundSchema),
  z.lazy(() => GetDrainDelivery3$inboundSchema),
  z.lazy(() => GetDrainDelivery4$inboundSchema),
  z.lazy(() => GetDrainDelivery5$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBodyDelivery$Outbound =
  | GetDrainDelivery1$Outbound
  | GetDrainDelivery2$Outbound
  | GetDrainDelivery3$Outbound
  | GetDrainDelivery4$Outbound
  | GetDrainDelivery5$Outbound;

/** @internal */
export const GetDrainResponseBodyDelivery$outboundSchema: z.ZodType<
  GetDrainResponseBodyDelivery$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyDelivery
> = z.union([
  z.lazy(() => GetDrainDelivery1$outboundSchema),
  z.lazy(() => GetDrainDelivery2$outboundSchema),
  z.lazy(() => GetDrainDelivery3$outboundSchema),
  z.lazy(() => GetDrainDelivery4$outboundSchema),
  z.lazy(() => GetDrainDelivery5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDelivery$ {
  /** @deprecated use `GetDrainResponseBodyDelivery$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDelivery$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDelivery$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyDelivery$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyDelivery$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyDelivery$Outbound;
}

export function getDrainResponseBodyDeliveryToJSON(
  getDrainResponseBodyDelivery: GetDrainResponseBodyDelivery,
): string {
  return JSON.stringify(
    GetDrainResponseBodyDelivery$outboundSchema.parse(
      getDrainResponseBodyDelivery,
    ),
  );
}

export function getDrainResponseBodyDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyDelivery' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyType
> = z.nativeEnum(GetDrainResponseBodyType);

/** @internal */
export const GetDrainResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyType
> = GetDrainResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyType$ {
  /** @deprecated use `GetDrainResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyType$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyType$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyEnv$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyEnv
> = z.nativeEnum(GetDrainResponseBodyEnv);

/** @internal */
export const GetDrainResponseBodyEnv$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyEnv
> = GetDrainResponseBodyEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyEnv$ {
  /** @deprecated use `GetDrainResponseBodyEnv$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyEnv$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyEnv$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyEnv$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodySampling$inboundSchema: z.ZodType<
  GetDrainResponseBodySampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainResponseBodyType$inboundSchema,
  rate: z.number(),
  env: GetDrainResponseBodyEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type GetDrainResponseBodySampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const GetDrainResponseBodySampling$outboundSchema: z.ZodType<
  GetDrainResponseBodySampling$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodySampling
> = z.object({
  type: GetDrainResponseBodyType$outboundSchema,
  rate: z.number(),
  env: GetDrainResponseBodyEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodySampling$ {
  /** @deprecated use `GetDrainResponseBodySampling$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodySampling$inboundSchema;
  /** @deprecated use `GetDrainResponseBodySampling$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodySampling$outboundSchema;
  /** @deprecated use `GetDrainResponseBodySampling$Outbound` instead. */
  export type Outbound = GetDrainResponseBodySampling$Outbound;
}

export function getDrainResponseBodySamplingToJSON(
  getDrainResponseBodySampling: GetDrainResponseBodySampling,
): string {
  return JSON.stringify(
    GetDrainResponseBodySampling$outboundSchema.parse(
      getDrainResponseBodySampling,
    ),
  );
}

export function getDrainResponseBodySamplingFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodySampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodySampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodySampling' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyStatus
> = z.nativeEnum(GetDrainResponseBodyStatus);

/** @internal */
export const GetDrainResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyStatus
> = GetDrainResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyStatus$ {
  /** @deprecated use `GetDrainResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyStatus$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyStatus$outboundSchema;
}

/** @internal */
export const GetDrainResponseBodyDisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDisabledReason
> = z.nativeEnum(GetDrainResponseBodyDisabledReason);

/** @internal */
export const GetDrainResponseBodyDisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainResponseBodyDisabledReason
> = GetDrainResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyDisabledReason$ {
  /** @deprecated use `GetDrainResponseBodyDisabledReason$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyDisabledReason$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const GetDrainSourceDrainsKind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceDrainsKind
> = z.nativeEnum(GetDrainSourceDrainsKind);

/** @internal */
export const GetDrainSourceDrainsKind$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceDrainsKind
> = GetDrainSourceDrainsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSourceDrainsKind$ {
  /** @deprecated use `GetDrainSourceDrainsKind$inboundSchema` instead. */
  export const inboundSchema = GetDrainSourceDrainsKind$inboundSchema;
  /** @deprecated use `GetDrainSourceDrainsKind$outboundSchema` instead. */
  export const outboundSchema = GetDrainSourceDrainsKind$outboundSchema;
}

/** @internal */
export const GetDrainSource2$inboundSchema: z.ZodType<
  GetDrainSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainSourceDrainsKind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetDrainSource2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const GetDrainSource2$outboundSchema: z.ZodType<
  GetDrainSource2$Outbound,
  z.ZodTypeDef,
  GetDrainSource2
> = z.object({
  kind: GetDrainSourceDrainsKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSource2$ {
  /** @deprecated use `GetDrainSource2$inboundSchema` instead. */
  export const inboundSchema = GetDrainSource2$inboundSchema;
  /** @deprecated use `GetDrainSource2$outboundSchema` instead. */
  export const outboundSchema = GetDrainSource2$outboundSchema;
  /** @deprecated use `GetDrainSource2$Outbound` instead. */
  export type Outbound = GetDrainSource2$Outbound;
}

export function getDrainSource2ToJSON(
  getDrainSource2: GetDrainSource2,
): string {
  return JSON.stringify(GetDrainSource2$outboundSchema.parse(getDrainSource2));
}

export function getDrainSource2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainSource2' from JSON`,
  );
}

/** @internal */
export const GetDrainSourceKind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceKind
> = z.nativeEnum(GetDrainSourceKind);

/** @internal */
export const GetDrainSourceKind$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainSourceKind
> = GetDrainSourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSourceKind$ {
  /** @deprecated use `GetDrainSourceKind$inboundSchema` instead. */
  export const inboundSchema = GetDrainSourceKind$inboundSchema;
  /** @deprecated use `GetDrainSourceKind$outboundSchema` instead. */
  export const outboundSchema = GetDrainSourceKind$outboundSchema;
}

/** @internal */
export const GetDrainSource1$inboundSchema: z.ZodType<
  GetDrainSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainSourceKind$inboundSchema,
});

/** @internal */
export type GetDrainSource1$Outbound = {
  kind: string;
};

/** @internal */
export const GetDrainSource1$outboundSchema: z.ZodType<
  GetDrainSource1$Outbound,
  z.ZodTypeDef,
  GetDrainSource1
> = z.object({
  kind: GetDrainSourceKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainSource1$ {
  /** @deprecated use `GetDrainSource1$inboundSchema` instead. */
  export const inboundSchema = GetDrainSource1$inboundSchema;
  /** @deprecated use `GetDrainSource1$outboundSchema` instead. */
  export const outboundSchema = GetDrainSource1$outboundSchema;
  /** @deprecated use `GetDrainSource1$Outbound` instead. */
  export type Outbound = GetDrainSource1$Outbound;
}

export function getDrainSource1ToJSON(
  getDrainSource1: GetDrainSource1,
): string {
  return JSON.stringify(GetDrainSource1$outboundSchema.parse(getDrainSource1));
}

export function getDrainSource1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainSource1' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodySource$inboundSchema: z.ZodType<
  GetDrainResponseBodySource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainSource2$inboundSchema),
  z.lazy(() => GetDrainSource1$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBodySource$Outbound =
  | GetDrainSource2$Outbound
  | GetDrainSource1$Outbound;

/** @internal */
export const GetDrainResponseBodySource$outboundSchema: z.ZodType<
  GetDrainResponseBodySource$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodySource
> = z.union([
  z.lazy(() => GetDrainSource2$outboundSchema),
  z.lazy(() => GetDrainSource1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodySource$ {
  /** @deprecated use `GetDrainResponseBodySource$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodySource$inboundSchema;
  /** @deprecated use `GetDrainResponseBodySource$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodySource$outboundSchema;
  /** @deprecated use `GetDrainResponseBodySource$Outbound` instead. */
  export type Outbound = GetDrainResponseBodySource$Outbound;
}

export function getDrainResponseBodySourceToJSON(
  getDrainResponseBodySource: GetDrainResponseBodySource,
): string {
  return JSON.stringify(
    GetDrainResponseBodySource$outboundSchema.parse(getDrainResponseBodySource),
  );
}

export function getDrainResponseBodySourceFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodySource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodySource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodySource' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2DrainsVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterV2DrainsVersion
> = z.nativeEnum(GetDrainFilterV2DrainsVersion);

/** @internal */
export const GetDrainFilterV2DrainsVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterV2DrainsVersion
> = GetDrainFilterV2DrainsVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2DrainsVersion$ {
  /** @deprecated use `GetDrainFilterV2DrainsVersion$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV2DrainsVersion$inboundSchema;
  /** @deprecated use `GetDrainFilterV2DrainsVersion$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV2DrainsVersion$outboundSchema;
}

/** @internal */
export const GetDrainFilterDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterDrainsType
> = z.nativeEnum(GetDrainFilterDrainsType);

/** @internal */
export const GetDrainFilterDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterDrainsType
> = GetDrainFilterDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDrainsType$ {
  /** @deprecated use `GetDrainFilterDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDrainsType$inboundSchema;
  /** @deprecated use `GetDrainFilterDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainFilter2$inboundSchema: z.ZodType<
  GetDrainFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainFilterDrainsType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetDrainFilter2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetDrainFilter2$outboundSchema: z.ZodType<
  GetDrainFilter2$Outbound,
  z.ZodTypeDef,
  GetDrainFilter2
> = z.object({
  type: GetDrainFilterDrainsType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilter2$ {
  /** @deprecated use `GetDrainFilter2$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilter2$inboundSchema;
  /** @deprecated use `GetDrainFilter2$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilter2$outboundSchema;
  /** @deprecated use `GetDrainFilter2$Outbound` instead. */
  export type Outbound = GetDrainFilter2$Outbound;
}

export function getDrainFilter2ToJSON(
  getDrainFilter2: GetDrainFilter2,
): string {
  return JSON.stringify(GetDrainFilter2$outboundSchema.parse(getDrainFilter2));
}

export function getDrainFilter2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilter2' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterType
> = z.nativeEnum(GetDrainFilterType);

/** @internal */
export const GetDrainFilterType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterType
> = GetDrainFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterType$ {
  /** @deprecated use `GetDrainFilterType$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterType$inboundSchema;
  /** @deprecated use `GetDrainFilterType$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterType$outboundSchema;
}

/** @internal */
export const GetDrainFilterProject$inboundSchema: z.ZodType<
  GetDrainFilterProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainFilterProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const GetDrainFilterProject$outboundSchema: z.ZodType<
  GetDrainFilterProject$Outbound,
  z.ZodTypeDef,
  GetDrainFilterProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterProject$ {
  /** @deprecated use `GetDrainFilterProject$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterProject$inboundSchema;
  /** @deprecated use `GetDrainFilterProject$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterProject$outboundSchema;
  /** @deprecated use `GetDrainFilterProject$Outbound` instead. */
  export type Outbound = GetDrainFilterProject$Outbound;
}

export function getDrainFilterProjectToJSON(
  getDrainFilterProject: GetDrainFilterProject,
): string {
  return JSON.stringify(
    GetDrainFilterProject$outboundSchema.parse(getDrainFilterProject),
  );
}

export function getDrainFilterProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterProject' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterLog$inboundSchema: z.ZodType<
  GetDrainFilterLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainFilterLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const GetDrainFilterLog$outboundSchema: z.ZodType<
  GetDrainFilterLog$Outbound,
  z.ZodTypeDef,
  GetDrainFilterLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterLog$ {
  /** @deprecated use `GetDrainFilterLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterLog$inboundSchema;
  /** @deprecated use `GetDrainFilterLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterLog$outboundSchema;
  /** @deprecated use `GetDrainFilterLog$Outbound` instead. */
  export type Outbound = GetDrainFilterLog$Outbound;
}

export function getDrainFilterLogToJSON(
  getDrainFilterLog: GetDrainFilterLog,
): string {
  return JSON.stringify(
    GetDrainFilterLog$outboundSchema.parse(getDrainFilterLog),
  );
}

export function getDrainFilterLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterLog' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterDeployment$inboundSchema: z.ZodType<
  GetDrainFilterDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainFilterDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const GetDrainFilterDeployment$outboundSchema: z.ZodType<
  GetDrainFilterDeployment$Outbound,
  z.ZodTypeDef,
  GetDrainFilterDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterDeployment$ {
  /** @deprecated use `GetDrainFilterDeployment$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterDeployment$inboundSchema;
  /** @deprecated use `GetDrainFilterDeployment$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterDeployment$outboundSchema;
  /** @deprecated use `GetDrainFilterDeployment$Outbound` instead. */
  export type Outbound = GetDrainFilterDeployment$Outbound;
}

export function getDrainFilterDeploymentToJSON(
  getDrainFilterDeployment: GetDrainFilterDeployment,
): string {
  return JSON.stringify(
    GetDrainFilterDeployment$outboundSchema.parse(getDrainFilterDeployment),
  );
}

export function getDrainFilterDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterDeployment' from JSON`,
  );
}

/** @internal */
export const GetDrainFilter1$inboundSchema: z.ZodType<
  GetDrainFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainFilterType$inboundSchema,
  project: z.lazy(() => GetDrainFilterProject$inboundSchema).optional(),
  log: z.lazy(() => GetDrainFilterLog$inboundSchema).optional(),
  deployment: z.lazy(() => GetDrainFilterDeployment$inboundSchema).optional(),
});

/** @internal */
export type GetDrainFilter1$Outbound = {
  type: string;
  project?: GetDrainFilterProject$Outbound | undefined;
  log?: GetDrainFilterLog$Outbound | undefined;
  deployment?: GetDrainFilterDeployment$Outbound | undefined;
};

/** @internal */
export const GetDrainFilter1$outboundSchema: z.ZodType<
  GetDrainFilter1$Outbound,
  z.ZodTypeDef,
  GetDrainFilter1
> = z.object({
  type: GetDrainFilterType$outboundSchema,
  project: z.lazy(() => GetDrainFilterProject$outboundSchema).optional(),
  log: z.lazy(() => GetDrainFilterLog$outboundSchema).optional(),
  deployment: z.lazy(() => GetDrainFilterDeployment$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilter1$ {
  /** @deprecated use `GetDrainFilter1$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilter1$inboundSchema;
  /** @deprecated use `GetDrainFilter1$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilter1$outboundSchema;
  /** @deprecated use `GetDrainFilter1$Outbound` instead. */
  export type Outbound = GetDrainFilter1$Outbound;
}

export function getDrainFilter1ToJSON(
  getDrainFilter1: GetDrainFilter1,
): string {
  return JSON.stringify(GetDrainFilter1$outboundSchema.parse(getDrainFilter1));
}

export function getDrainFilter1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilter1' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2Filter$inboundSchema: z.ZodType<
  GetDrainFilterV2Filter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainFilter2$inboundSchema),
  z.lazy(() => GetDrainFilter1$inboundSchema),
]);

/** @internal */
export type GetDrainFilterV2Filter$Outbound =
  | GetDrainFilter2$Outbound
  | GetDrainFilter1$Outbound;

/** @internal */
export const GetDrainFilterV2Filter$outboundSchema: z.ZodType<
  GetDrainFilterV2Filter$Outbound,
  z.ZodTypeDef,
  GetDrainFilterV2Filter
> = z.union([
  z.lazy(() => GetDrainFilter2$outboundSchema),
  z.lazy(() => GetDrainFilter1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2Filter$ {
  /** @deprecated use `GetDrainFilterV2Filter$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV2Filter$inboundSchema;
  /** @deprecated use `GetDrainFilterV2Filter$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV2Filter$outboundSchema;
  /** @deprecated use `GetDrainFilterV2Filter$Outbound` instead. */
  export type Outbound = GetDrainFilterV2Filter$Outbound;
}

export function getDrainFilterV2FilterToJSON(
  getDrainFilterV2Filter: GetDrainFilterV2Filter,
): string {
  return JSON.stringify(
    GetDrainFilterV2Filter$outboundSchema.parse(getDrainFilterV2Filter),
  );
}

export function getDrainFilterV2FilterFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterV2Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterV2Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterV2Filter' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV22$inboundSchema: z.ZodType<
  GetDrainFilterV22,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainFilterV2DrainsVersion$inboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainFilter2$inboundSchema),
    z.lazy(() => GetDrainFilter1$inboundSchema),
  ]),
});

/** @internal */
export type GetDrainFilterV22$Outbound = {
  version: string;
  filter: GetDrainFilter2$Outbound | GetDrainFilter1$Outbound;
};

/** @internal */
export const GetDrainFilterV22$outboundSchema: z.ZodType<
  GetDrainFilterV22$Outbound,
  z.ZodTypeDef,
  GetDrainFilterV22
> = z.object({
  version: GetDrainFilterV2DrainsVersion$outboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainFilter2$outboundSchema),
    z.lazy(() => GetDrainFilter1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV22$ {
  /** @deprecated use `GetDrainFilterV22$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV22$inboundSchema;
  /** @deprecated use `GetDrainFilterV22$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV22$outboundSchema;
  /** @deprecated use `GetDrainFilterV22$Outbound` instead. */
  export type Outbound = GetDrainFilterV22$Outbound;
}

export function getDrainFilterV22ToJSON(
  getDrainFilterV22: GetDrainFilterV22,
): string {
  return JSON.stringify(
    GetDrainFilterV22$outboundSchema.parse(getDrainFilterV22),
  );
}

export function getDrainFilterV22FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterV22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterV22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterV22' from JSON`,
  );
}

/** @internal */
export const GetDrainFilterV2Version$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterV2Version
> = z.nativeEnum(GetDrainFilterV2Version);

/** @internal */
export const GetDrainFilterV2Version$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainFilterV2Version
> = GetDrainFilterV2Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV2Version$ {
  /** @deprecated use `GetDrainFilterV2Version$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV2Version$inboundSchema;
  /** @deprecated use `GetDrainFilterV2Version$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV2Version$outboundSchema;
}

/** @internal */
export const GetDrainFilterV21$inboundSchema: z.ZodType<
  GetDrainFilterV21,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainFilterV2Version$inboundSchema,
});

/** @internal */
export type GetDrainFilterV21$Outbound = {
  version: string;
};

/** @internal */
export const GetDrainFilterV21$outboundSchema: z.ZodType<
  GetDrainFilterV21$Outbound,
  z.ZodTypeDef,
  GetDrainFilterV21
> = z.object({
  version: GetDrainFilterV2Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainFilterV21$ {
  /** @deprecated use `GetDrainFilterV21$inboundSchema` instead. */
  export const inboundSchema = GetDrainFilterV21$inboundSchema;
  /** @deprecated use `GetDrainFilterV21$outboundSchema` instead. */
  export const outboundSchema = GetDrainFilterV21$outboundSchema;
  /** @deprecated use `GetDrainFilterV21$Outbound` instead. */
  export type Outbound = GetDrainFilterV21$Outbound;
}

export function getDrainFilterV21ToJSON(
  getDrainFilterV21: GetDrainFilterV21,
): string {
  return JSON.stringify(
    GetDrainFilterV21$outboundSchema.parse(getDrainFilterV21),
  );
}

export function getDrainFilterV21FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainFilterV21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainFilterV21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainFilterV21' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBodyFilterV2$inboundSchema: z.ZodType<
  GetDrainResponseBodyFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainFilterV22$inboundSchema),
  z.lazy(() => GetDrainFilterV21$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBodyFilterV2$Outbound =
  | GetDrainFilterV22$Outbound
  | GetDrainFilterV21$Outbound;

/** @internal */
export const GetDrainResponseBodyFilterV2$outboundSchema: z.ZodType<
  GetDrainResponseBodyFilterV2$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBodyFilterV2
> = z.union([
  z.lazy(() => GetDrainFilterV22$outboundSchema),
  z.lazy(() => GetDrainFilterV21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBodyFilterV2$ {
  /** @deprecated use `GetDrainResponseBodyFilterV2$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBodyFilterV2$inboundSchema;
  /** @deprecated use `GetDrainResponseBodyFilterV2$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBodyFilterV2$outboundSchema;
  /** @deprecated use `GetDrainResponseBodyFilterV2$Outbound` instead. */
  export type Outbound = GetDrainResponseBodyFilterV2$Outbound;
}

export function getDrainResponseBodyFilterV2ToJSON(
  getDrainResponseBodyFilterV2: GetDrainResponseBodyFilterV2,
): string {
  return JSON.stringify(
    GetDrainResponseBodyFilterV2$outboundSchema.parse(
      getDrainResponseBodyFilterV2,
    ),
  );
}

export function getDrainResponseBodyFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBodyFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBodyFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBodyFilterV2' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBody1$inboundSchema: z.ZodType<
  GetDrainResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetDrainResponseBodyCreatedFrom$inboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetDrainResponseBodySchemas$inboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => GetDrainDelivery1$inboundSchema),
    z.lazy(() => GetDrainDelivery2$inboundSchema),
    z.lazy(() => GetDrainDelivery3$inboundSchema),
    z.lazy(() => GetDrainDelivery4$inboundSchema),
    z.lazy(() => GetDrainDelivery5$inboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => GetDrainResponseBodySampling$inboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetDrainResponseBodyStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetDrainResponseBodyDisabledReason$inboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetDrainSource2$inboundSchema),
    z.lazy(() => GetDrainSource1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetDrainFilterV22$inboundSchema),
    z.lazy(() => GetDrainFilterV21$inboundSchema),
  ]).optional(),
});

/** @internal */
export type GetDrainResponseBody1$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetDrainResponseBodySchemas$Outbound | undefined;
  delivery?:
    | GetDrainDelivery1$Outbound
    | GetDrainDelivery2$Outbound
    | GetDrainDelivery3$Outbound
    | GetDrainDelivery4$Outbound
    | GetDrainDelivery5$Outbound
    | undefined;
  sampling?: Array<GetDrainResponseBodySampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainSource2$Outbound | GetDrainSource1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | GetDrainFilterV22$Outbound
    | GetDrainFilterV21$Outbound
    | undefined;
};

/** @internal */
export const GetDrainResponseBody1$outboundSchema: z.ZodType<
  GetDrainResponseBody1$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBody1
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetDrainResponseBodyCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetDrainResponseBodySchemas$outboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => GetDrainDelivery1$outboundSchema),
    z.lazy(() => GetDrainDelivery2$outboundSchema),
    z.lazy(() => GetDrainDelivery3$outboundSchema),
    z.lazy(() => GetDrainDelivery4$outboundSchema),
    z.lazy(() => GetDrainDelivery5$outboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => GetDrainResponseBodySampling$outboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetDrainResponseBodyStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetDrainResponseBodyDisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetDrainSource2$outboundSchema),
    z.lazy(() => GetDrainSource1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetDrainFilterV22$outboundSchema),
    z.lazy(() => GetDrainFilterV21$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBody1$ {
  /** @deprecated use `GetDrainResponseBody1$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBody1$inboundSchema;
  /** @deprecated use `GetDrainResponseBody1$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBody1$outboundSchema;
  /** @deprecated use `GetDrainResponseBody1$Outbound` instead. */
  export type Outbound = GetDrainResponseBody1$Outbound;
}

export function getDrainResponseBody1ToJSON(
  getDrainResponseBody1: GetDrainResponseBody1,
): string {
  return JSON.stringify(
    GetDrainResponseBody1$outboundSchema.parse(getDrainResponseBody1),
  );
}

export function getDrainResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBody1' from JSON`,
  );
}

/** @internal */
export const GetDrainResponseBody$inboundSchema: z.ZodType<
  GetDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainResponseBody1$inboundSchema),
  z.lazy(() => GetDrainResponseBody2$inboundSchema),
]);

/** @internal */
export type GetDrainResponseBody$Outbound =
  | GetDrainResponseBody1$Outbound
  | GetDrainResponseBody2$Outbound;

/** @internal */
export const GetDrainResponseBody$outboundSchema: z.ZodType<
  GetDrainResponseBody$Outbound,
  z.ZodTypeDef,
  GetDrainResponseBody
> = z.union([
  z.lazy(() => GetDrainResponseBody1$outboundSchema),
  z.lazy(() => GetDrainResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainResponseBody$ {
  /** @deprecated use `GetDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDrainResponseBody$inboundSchema;
  /** @deprecated use `GetDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDrainResponseBody$outboundSchema;
  /** @deprecated use `GetDrainResponseBody$Outbound` instead. */
  export type Outbound = GetDrainResponseBody$Outbound;
}

export function getDrainResponseBodyToJSON(
  getDrainResponseBody: GetDrainResponseBody,
): string {
  return JSON.stringify(
    GetDrainResponseBody$outboundSchema.parse(getDrainResponseBody),
  );
}

export function getDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainResponseBody' from JSON`,
  );
}
