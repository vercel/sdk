/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetDrainsRequest = {
  projectId?: string | undefined;
  includeMetadata?: boolean | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export const GetDrainsDrainsCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type GetDrainsDrainsCreatedFrom = ClosedEnum<
  typeof GetDrainsDrainsCreatedFrom
>;

export type GetDrainsDrainsLog = {};

export type GetDrainsDrainsTrace = {};

export type GetDrainsDrainsAnalytics = {};

export type GetDrainsDrainsSpeedInsights = {};

export type GetDrainsDrainsSchemas = {
  log?: GetDrainsDrainsLog | undefined;
  trace?: GetDrainsDrainsTrace | undefined;
  analytics?: GetDrainsDrainsAnalytics | undefined;
  speedInsights?: GetDrainsDrainsSpeedInsights | undefined;
};

export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type =
  {
    Internal: "internal",
  } as const;
export type GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type =
  ClosedEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type
  >;

export const GetDrainsDeliveryDrainsTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type GetDrainsDeliveryDrainsTarget = ClosedEnum<
  typeof GetDrainsDeliveryDrainsTarget
>;

export type GetDrainsDeliveryDrains5 = {
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type;
  target: GetDrainsDeliveryDrainsTarget;
};

export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type =
  {
    Clickhouse: "clickhouse",
  } as const;
export type GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type =
  ClosedEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type
  >;

export type GetDrainsDeliveryDrains4 = {
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type;
  endpoint: string;
  table: string;
};

export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type =
  {
    Syslog: "syslog",
  } as const;
export type GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type =
  ClosedEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type
  >;

export type GetDrainsDeliveryDrains3 = {
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type;
  endpoint: string;
  secret: string;
};

export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType =
  {
    Otlphttp: "otlphttp",
  } as const;
export type GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType =
  ClosedEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType
  >;

export type GetDrainsDeliveryDrainsEndpoint = {
  traces: string;
};

export const GetDrainsDeliveryDrainsResponse200Encoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type GetDrainsDeliveryDrainsResponse200Encoding = ClosedEnum<
  typeof GetDrainsDeliveryDrainsResponse200Encoding
>;

export type GetDrainsDeliveryDrains2 = {
  type: GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType;
  endpoint: GetDrainsDeliveryDrainsEndpoint;
  encoding: GetDrainsDeliveryDrainsResponse200Encoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  {
    Http: "http",
  } as const;
export type GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  >;

export const GetDrainsDeliveryDrainsResponseEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type GetDrainsDeliveryDrainsResponseEncoding = ClosedEnum<
  typeof GetDrainsDeliveryDrainsResponseEncoding
>;

export const GetDrainsDeliveryDrainsCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type GetDrainsDeliveryDrainsCompression = ClosedEnum<
  typeof GetDrainsDeliveryDrainsCompression
>;

export type GetDrainsDeliveryDrains1 = {
  type: GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType;
  endpoint: string;
  encoding: GetDrainsDeliveryDrainsResponseEncoding;
  compression?: GetDrainsDeliveryDrainsCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type GetDrainsDrainsDelivery =
  | GetDrainsDeliveryDrains1
  | GetDrainsDeliveryDrains2
  | GetDrainsDeliveryDrains3
  | GetDrainsDeliveryDrains4
  | GetDrainsDeliveryDrains5;

export const GetDrainsDrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type GetDrainsDrainsType = ClosedEnum<typeof GetDrainsDrainsType>;

export const GetDrainsDrainsEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type GetDrainsDrainsEnv = ClosedEnum<typeof GetDrainsDrainsEnv>;

export type GetDrainsDrainsSampling = {
  type: GetDrainsDrainsType;
  rate: number;
  env?: GetDrainsDrainsEnv | undefined;
  requestPath?: string | undefined;
};

export const GetDrainsDrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type GetDrainsDrainsStatus = ClosedEnum<typeof GetDrainsDrainsStatus>;

export const GetDrainsDrainsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type GetDrainsDrainsDisabledReason = ClosedEnum<
  typeof GetDrainsDrainsDisabledReason
>;

export const GetDrainsSourceDrainsResponse200Kind = {
  Integration: "integration",
} as const;
export type GetDrainsSourceDrainsResponse200Kind = ClosedEnum<
  typeof GetDrainsSourceDrainsResponse200Kind
>;

export type GetDrainsSourceDrains2 = {
  kind: GetDrainsSourceDrainsResponse200Kind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const GetDrainsSourceDrainsResponseKind = {
  SelfServed: "self-served",
} as const;
export type GetDrainsSourceDrainsResponseKind = ClosedEnum<
  typeof GetDrainsSourceDrainsResponseKind
>;

export type GetDrainsSourceDrains1 = {
  kind: GetDrainsSourceDrainsResponseKind;
};

export type GetDrainsDrainsSource =
  | GetDrainsSourceDrains2
  | GetDrainsSourceDrains1;

export const GetDrainsFilterV2DrainsResponse200Version = {
  V2: "v2",
} as const;
export type GetDrainsFilterV2DrainsResponse200Version = ClosedEnum<
  typeof GetDrainsFilterV2DrainsResponse200Version
>;

export const GetDrainsFilterDrainsResponse200Type = {
  Odata: "odata",
} as const;
export type GetDrainsFilterDrainsResponse200Type = ClosedEnum<
  typeof GetDrainsFilterDrainsResponse200Type
>;

export type GetDrainsFilterDrains2 = {
  type: GetDrainsFilterDrainsResponse200Type;
  text: string;
};

export const GetDrainsFilterDrainsResponseType = {
  Basic: "basic",
} as const;
export type GetDrainsFilterDrainsResponseType = ClosedEnum<
  typeof GetDrainsFilterDrainsResponseType
>;

export type GetDrainsFilterDrainsProject = {
  ids?: Array<string> | undefined;
};

export type GetDrainsFilterDrainsLog = {
  sources?: Array<string> | undefined;
};

export type GetDrainsFilterDrainsDeployment = {
  environments?: Array<string> | undefined;
};

export type GetDrainsFilterDrains1 = {
  type: GetDrainsFilterDrainsResponseType;
  project?: GetDrainsFilterDrainsProject | undefined;
  log?: GetDrainsFilterDrainsLog | undefined;
  deployment?: GetDrainsFilterDrainsDeployment | undefined;
};

export type GetDrainsFilterV2DrainsFilter =
  | GetDrainsFilterDrains2
  | GetDrainsFilterDrains1;

export type GetDrainsFilterV2Drains2 = {
  version: GetDrainsFilterV2DrainsResponse200Version;
  filter: GetDrainsFilterDrains2 | GetDrainsFilterDrains1;
};

export const GetDrainsFilterV2DrainsResponseVersion = {
  V1: "v1",
} as const;
export type GetDrainsFilterV2DrainsResponseVersion = ClosedEnum<
  typeof GetDrainsFilterV2DrainsResponseVersion
>;

export type GetDrainsFilterV2Drains1 = {
  version: GetDrainsFilterV2DrainsResponseVersion;
};

export type GetDrainsDrainsFilterV2 =
  | GetDrainsFilterV2Drains2
  | GetDrainsFilterV2Drains1;

export const DrainsFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Fastify: "fastify",
  Xmcp: "xmcp",
} as const;
export type DrainsFramework = ClosedEnum<typeof DrainsFramework>;

export type DrainsProjectsMetadata = {
  id: string;
  name: string;
  framework?: DrainsFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type Drains2 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: GetDrainsDrainsCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetDrainsDrainsSchemas | undefined;
  delivery?:
    | GetDrainsDeliveryDrains1
    | GetDrainsDeliveryDrains2
    | GetDrainsDeliveryDrains3
    | GetDrainsDeliveryDrains4
    | GetDrainsDeliveryDrains5
    | undefined;
  sampling?: Array<GetDrainsDrainsSampling> | undefined;
  teamId?: string | null | undefined;
  status?: GetDrainsDrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: GetDrainsDrainsDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainsSourceDrains2 | GetDrainsSourceDrains1;
  filter?: string | undefined;
  filterV2?: GetDrainsFilterV2Drains2 | GetDrainsFilterV2Drains1 | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?: Array<DrainsProjectsMetadata> | undefined;
};

export const DrainsCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type DrainsCreatedFrom = ClosedEnum<typeof DrainsCreatedFrom>;

export type DrainsLog = {};

export type DrainsTrace = {};

export type DrainsAnalytics = {};

export type DrainsSpeedInsights = {};

export type DrainsSchemas = {
  log?: DrainsLog | undefined;
  trace?: DrainsTrace | undefined;
  analytics?: DrainsAnalytics | undefined;
  speedInsights?: DrainsSpeedInsights | undefined;
};

export const GetDrainsDeliveryDrainsResponse200ApplicationJSONType = {
  Internal: "internal",
} as const;
export type GetDrainsDeliveryDrainsResponse200ApplicationJSONType = ClosedEnum<
  typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONType
>;

export const GetDrainsDeliveryTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type GetDrainsDeliveryTarget = ClosedEnum<
  typeof GetDrainsDeliveryTarget
>;

export type GetDrainsDelivery5 = {
  type: GetDrainsDeliveryDrainsResponse200ApplicationJSONType;
  target: GetDrainsDeliveryTarget;
};

export const GetDrainsDeliveryDrainsResponse200Type = {
  Clickhouse: "clickhouse",
} as const;
export type GetDrainsDeliveryDrainsResponse200Type = ClosedEnum<
  typeof GetDrainsDeliveryDrainsResponse200Type
>;

export type GetDrainsDelivery4 = {
  type: GetDrainsDeliveryDrainsResponse200Type;
  endpoint: string;
  table: string;
};

export const GetDrainsDeliveryDrainsResponseType = {
  Syslog: "syslog",
} as const;
export type GetDrainsDeliveryDrainsResponseType = ClosedEnum<
  typeof GetDrainsDeliveryDrainsResponseType
>;

export type GetDrainsDelivery3 = {
  type: GetDrainsDeliveryDrainsResponseType;
  endpoint: string;
  secret: string;
};

export const GetDrainsDeliveryDrainsType = {
  Otlphttp: "otlphttp",
} as const;
export type GetDrainsDeliveryDrainsType = ClosedEnum<
  typeof GetDrainsDeliveryDrainsType
>;

export type GetDrainsDeliveryEndpoint = {
  traces: string;
};

export const GetDrainsDeliveryDrainsEncoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type GetDrainsDeliveryDrainsEncoding = ClosedEnum<
  typeof GetDrainsDeliveryDrainsEncoding
>;

export type GetDrainsDelivery2 = {
  type: GetDrainsDeliveryDrainsType;
  endpoint: GetDrainsDeliveryEndpoint;
  encoding: GetDrainsDeliveryDrainsEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const GetDrainsDeliveryType = {
  Http: "http",
} as const;
export type GetDrainsDeliveryType = ClosedEnum<typeof GetDrainsDeliveryType>;

export const GetDrainsDeliveryEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type GetDrainsDeliveryEncoding = ClosedEnum<
  typeof GetDrainsDeliveryEncoding
>;

export const GetDrainsDeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type GetDrainsDeliveryCompression = ClosedEnum<
  typeof GetDrainsDeliveryCompression
>;

export type GetDrainsDelivery1 = {
  type: GetDrainsDeliveryType;
  endpoint: string;
  encoding: GetDrainsDeliveryEncoding;
  compression?: GetDrainsDeliveryCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type DrainsDelivery =
  | GetDrainsDelivery1
  | GetDrainsDelivery2
  | GetDrainsDelivery3
  | GetDrainsDelivery4
  | GetDrainsDelivery5;

export const DrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type DrainsType = ClosedEnum<typeof DrainsType>;

export const DrainsEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type DrainsEnv = ClosedEnum<typeof DrainsEnv>;

export type DrainsSampling = {
  type: DrainsType;
  rate: number;
  env?: DrainsEnv | undefined;
  requestPath?: string | undefined;
};

export const DrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type DrainsStatus = ClosedEnum<typeof DrainsStatus>;

export const DrainsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type DrainsDisabledReason = ClosedEnum<typeof DrainsDisabledReason>;

export const GetDrainsSourceDrainsKind = {
  Integration: "integration",
} as const;
export type GetDrainsSourceDrainsKind = ClosedEnum<
  typeof GetDrainsSourceDrainsKind
>;

export type GetDrainsSource2 = {
  kind: GetDrainsSourceDrainsKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const GetDrainsSourceKind = {
  SelfServed: "self-served",
} as const;
export type GetDrainsSourceKind = ClosedEnum<typeof GetDrainsSourceKind>;

export type GetDrainsSource1 = {
  kind: GetDrainsSourceKind;
};

export type DrainsSource = GetDrainsSource2 | GetDrainsSource1;

export const GetDrainsFilterV2DrainsVersion = {
  V2: "v2",
} as const;
export type GetDrainsFilterV2DrainsVersion = ClosedEnum<
  typeof GetDrainsFilterV2DrainsVersion
>;

export const GetDrainsFilterDrainsType = {
  Odata: "odata",
} as const;
export type GetDrainsFilterDrainsType = ClosedEnum<
  typeof GetDrainsFilterDrainsType
>;

export type GetDrainsFilter2 = {
  type: GetDrainsFilterDrainsType;
  text: string;
};

export const GetDrainsFilterType = {
  Basic: "basic",
} as const;
export type GetDrainsFilterType = ClosedEnum<typeof GetDrainsFilterType>;

export type GetDrainsFilterProject = {
  ids?: Array<string> | undefined;
};

export type GetDrainsFilterLog = {
  sources?: Array<string> | undefined;
};

export type GetDrainsFilterDeployment = {
  environments?: Array<string> | undefined;
};

export type GetDrainsFilter1 = {
  type: GetDrainsFilterType;
  project?: GetDrainsFilterProject | undefined;
  log?: GetDrainsFilterLog | undefined;
  deployment?: GetDrainsFilterDeployment | undefined;
};

export type GetDrainsFilterV2Filter = GetDrainsFilter2 | GetDrainsFilter1;

export type GetDrainsFilterV22 = {
  version: GetDrainsFilterV2DrainsVersion;
  filter: GetDrainsFilter2 | GetDrainsFilter1;
};

export const GetDrainsFilterV2Version = {
  V1: "v1",
} as const;
export type GetDrainsFilterV2Version = ClosedEnum<
  typeof GetDrainsFilterV2Version
>;

export type GetDrainsFilterV21 = {
  version: GetDrainsFilterV2Version;
};

export type DrainsFilterV2 = GetDrainsFilterV22 | GetDrainsFilterV21;

export type Drains1 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: DrainsCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: DrainsSchemas | undefined;
  delivery?:
    | GetDrainsDelivery1
    | GetDrainsDelivery2
    | GetDrainsDelivery3
    | GetDrainsDelivery4
    | GetDrainsDelivery5
    | undefined;
  sampling?: Array<DrainsSampling> | undefined;
  teamId?: string | null | undefined;
  status?: DrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: DrainsDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainsSource2 | GetDrainsSource1;
  filter?: string | undefined;
  filterV2?: GetDrainsFilterV22 | GetDrainsFilterV21 | undefined;
};

export type Drains = Array<Drains1> | Array<Drains2>;

export type GetDrainsResponseBody = {
  drains: Array<Drains1> | Array<Drains2>;
};

/** @internal */
export const GetDrainsRequest$inboundSchema: z.ZodType<
  GetDrainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string().optional(),
  includeMetadata: z.boolean().default(false),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetDrainsRequest$Outbound = {
  projectId?: string | undefined;
  includeMetadata: boolean;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetDrainsRequest$outboundSchema: z.ZodType<
  GetDrainsRequest$Outbound,
  z.ZodTypeDef,
  GetDrainsRequest
> = z.object({
  projectId: z.string().optional(),
  includeMetadata: z.boolean().default(false),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsRequest$ {
  /** @deprecated use `GetDrainsRequest$inboundSchema` instead. */
  export const inboundSchema = GetDrainsRequest$inboundSchema;
  /** @deprecated use `GetDrainsRequest$outboundSchema` instead. */
  export const outboundSchema = GetDrainsRequest$outboundSchema;
  /** @deprecated use `GetDrainsRequest$Outbound` instead. */
  export type Outbound = GetDrainsRequest$Outbound;
}

export function getDrainsRequestToJSON(
  getDrainsRequest: GetDrainsRequest,
): string {
  return JSON.stringify(
    GetDrainsRequest$outboundSchema.parse(getDrainsRequest),
  );
}

export function getDrainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsRequest' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsCreatedFrom
> = z.nativeEnum(GetDrainsDrainsCreatedFrom);

/** @internal */
export const GetDrainsDrainsCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsCreatedFrom
> = GetDrainsDrainsCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsCreatedFrom$ {
  /** @deprecated use `GetDrainsDrainsCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsCreatedFrom$inboundSchema;
  /** @deprecated use `GetDrainsDrainsCreatedFrom$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsCreatedFrom$outboundSchema;
}

/** @internal */
export const GetDrainsDrainsLog$inboundSchema: z.ZodType<
  GetDrainsDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainsDrainsLog$Outbound = {};

/** @internal */
export const GetDrainsDrainsLog$outboundSchema: z.ZodType<
  GetDrainsDrainsLog$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsLog$ {
  /** @deprecated use `GetDrainsDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsLog$inboundSchema;
  /** @deprecated use `GetDrainsDrainsLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsLog$outboundSchema;
  /** @deprecated use `GetDrainsDrainsLog$Outbound` instead. */
  export type Outbound = GetDrainsDrainsLog$Outbound;
}

export function getDrainsDrainsLogToJSON(
  getDrainsDrainsLog: GetDrainsDrainsLog,
): string {
  return JSON.stringify(
    GetDrainsDrainsLog$outboundSchema.parse(getDrainsDrainsLog),
  );
}

export function getDrainsDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsTrace$inboundSchema: z.ZodType<
  GetDrainsDrainsTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainsDrainsTrace$Outbound = {};

/** @internal */
export const GetDrainsDrainsTrace$outboundSchema: z.ZodType<
  GetDrainsDrainsTrace$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsTrace$ {
  /** @deprecated use `GetDrainsDrainsTrace$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsTrace$inboundSchema;
  /** @deprecated use `GetDrainsDrainsTrace$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsTrace$outboundSchema;
  /** @deprecated use `GetDrainsDrainsTrace$Outbound` instead. */
  export type Outbound = GetDrainsDrainsTrace$Outbound;
}

export function getDrainsDrainsTraceToJSON(
  getDrainsDrainsTrace: GetDrainsDrainsTrace,
): string {
  return JSON.stringify(
    GetDrainsDrainsTrace$outboundSchema.parse(getDrainsDrainsTrace),
  );
}

export function getDrainsDrainsTraceFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsTrace' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsAnalytics$inboundSchema: z.ZodType<
  GetDrainsDrainsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainsDrainsAnalytics$Outbound = {};

/** @internal */
export const GetDrainsDrainsAnalytics$outboundSchema: z.ZodType<
  GetDrainsDrainsAnalytics$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsAnalytics$ {
  /** @deprecated use `GetDrainsDrainsAnalytics$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsAnalytics$inboundSchema;
  /** @deprecated use `GetDrainsDrainsAnalytics$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsAnalytics$outboundSchema;
  /** @deprecated use `GetDrainsDrainsAnalytics$Outbound` instead. */
  export type Outbound = GetDrainsDrainsAnalytics$Outbound;
}

export function getDrainsDrainsAnalyticsToJSON(
  getDrainsDrainsAnalytics: GetDrainsDrainsAnalytics,
): string {
  return JSON.stringify(
    GetDrainsDrainsAnalytics$outboundSchema.parse(getDrainsDrainsAnalytics),
  );
}

export function getDrainsDrainsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsAnalytics' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsSpeedInsights$inboundSchema: z.ZodType<
  GetDrainsDrainsSpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type GetDrainsDrainsSpeedInsights$Outbound = {};

/** @internal */
export const GetDrainsDrainsSpeedInsights$outboundSchema: z.ZodType<
  GetDrainsDrainsSpeedInsights$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsSpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsSpeedInsights$ {
  /** @deprecated use `GetDrainsDrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsSpeedInsights$inboundSchema;
  /** @deprecated use `GetDrainsDrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsSpeedInsights$outboundSchema;
  /** @deprecated use `GetDrainsDrainsSpeedInsights$Outbound` instead. */
  export type Outbound = GetDrainsDrainsSpeedInsights$Outbound;
}

export function getDrainsDrainsSpeedInsightsToJSON(
  getDrainsDrainsSpeedInsights: GetDrainsDrainsSpeedInsights,
): string {
  return JSON.stringify(
    GetDrainsDrainsSpeedInsights$outboundSchema.parse(
      getDrainsDrainsSpeedInsights,
    ),
  );
}

export function getDrainsDrainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsSpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsSpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsSchemas$inboundSchema: z.ZodType<
  GetDrainsDrainsSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => GetDrainsDrainsLog$inboundSchema).optional(),
  trace: z.lazy(() => GetDrainsDrainsTrace$inboundSchema).optional(),
  analytics: z.lazy(() => GetDrainsDrainsAnalytics$inboundSchema).optional(),
  speed_insights: z.lazy(() => GetDrainsDrainsSpeedInsights$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type GetDrainsDrainsSchemas$Outbound = {
  log?: GetDrainsDrainsLog$Outbound | undefined;
  trace?: GetDrainsDrainsTrace$Outbound | undefined;
  analytics?: GetDrainsDrainsAnalytics$Outbound | undefined;
  speed_insights?: GetDrainsDrainsSpeedInsights$Outbound | undefined;
};

/** @internal */
export const GetDrainsDrainsSchemas$outboundSchema: z.ZodType<
  GetDrainsDrainsSchemas$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsSchemas
> = z.object({
  log: z.lazy(() => GetDrainsDrainsLog$outboundSchema).optional(),
  trace: z.lazy(() => GetDrainsDrainsTrace$outboundSchema).optional(),
  analytics: z.lazy(() => GetDrainsDrainsAnalytics$outboundSchema).optional(),
  speedInsights: z.lazy(() => GetDrainsDrainsSpeedInsights$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsSchemas$ {
  /** @deprecated use `GetDrainsDrainsSchemas$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsSchemas$inboundSchema;
  /** @deprecated use `GetDrainsDrainsSchemas$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsSchemas$outboundSchema;
  /** @deprecated use `GetDrainsDrainsSchemas$Outbound` instead. */
  export type Outbound = GetDrainsDrainsSchemas$Outbound;
}

export function getDrainsDrainsSchemasToJSON(
  getDrainsDrainsSchemas: GetDrainsDrainsSchemas,
): string {
  return JSON.stringify(
    GetDrainsDrainsSchemas$outboundSchema.parse(getDrainsDrainsSchemas),
  );
}

export function getDrainsDrainsSchemasFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsSchemas' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type
  > = z.nativeEnum(
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type,
  );

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type
  > =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrainsTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsTarget
> = z.nativeEnum(GetDrainsDeliveryDrainsTarget);

/** @internal */
export const GetDrainsDeliveryDrainsTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsTarget
> = GetDrainsDeliveryDrainsTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsTarget$ {
  /** @deprecated use `GetDrainsDeliveryDrainsTarget$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrainsTarget$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsTarget$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrainsTarget$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrains5$inboundSchema: z.ZodType<
  GetDrainsDeliveryDrains5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$inboundSchema,
  target: GetDrainsDeliveryDrainsTarget$inboundSchema,
});

/** @internal */
export type GetDrainsDeliveryDrains5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const GetDrainsDeliveryDrains5$outboundSchema: z.ZodType<
  GetDrainsDeliveryDrains5$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryDrains5
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains25Type$outboundSchema,
  target: GetDrainsDeliveryDrainsTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrains5$ {
  /** @deprecated use `GetDrainsDeliveryDrains5$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrains5$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains5$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrains5$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains5$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryDrains5$Outbound;
}

export function getDrainsDeliveryDrains5ToJSON(
  getDrainsDeliveryDrains5: GetDrainsDeliveryDrains5,
): string {
  return JSON.stringify(
    GetDrainsDeliveryDrains5$outboundSchema.parse(getDrainsDeliveryDrains5),
  );
}

export function getDrainsDeliveryDrains5FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryDrains5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryDrains5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryDrains5' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type
  > = z.nativeEnum(
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type,
  );

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type
  > =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrains4$inboundSchema: z.ZodType<
  GetDrainsDeliveryDrains4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type GetDrainsDeliveryDrains4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const GetDrainsDeliveryDrains4$outboundSchema: z.ZodType<
  GetDrainsDeliveryDrains4$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryDrains4
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains24Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrains4$ {
  /** @deprecated use `GetDrainsDeliveryDrains4$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrains4$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains4$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrains4$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains4$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryDrains4$Outbound;
}

export function getDrainsDeliveryDrains4ToJSON(
  getDrainsDeliveryDrains4: GetDrainsDeliveryDrains4,
): string {
  return JSON.stringify(
    GetDrainsDeliveryDrains4$outboundSchema.parse(getDrainsDeliveryDrains4),
  );
}

export function getDrainsDeliveryDrains4FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryDrains4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryDrains4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryDrains4' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type
  > = z.nativeEnum(
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type,
  );

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type
  > =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrains3$inboundSchema: z.ZodType<
  GetDrainsDeliveryDrains3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type GetDrainsDeliveryDrains3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const GetDrainsDeliveryDrains3$outboundSchema: z.ZodType<
  GetDrainsDeliveryDrains3$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryDrains3
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrains2Type$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrains3$ {
  /** @deprecated use `GetDrainsDeliveryDrains3$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrains3$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains3$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrains3$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains3$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryDrains3$Outbound;
}

export function getDrainsDeliveryDrains3ToJSON(
  getDrainsDeliveryDrains3: GetDrainsDeliveryDrains3,
): string {
  return JSON.stringify(
    GetDrainsDeliveryDrains3$outboundSchema.parse(getDrainsDeliveryDrains3),
  );
}

export function getDrainsDeliveryDrains3FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryDrains3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryDrains3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryDrains3' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType
  > = z.nativeEnum(
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType,
  );

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType
  > =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrainsEndpoint$inboundSchema: z.ZodType<
  GetDrainsDeliveryDrainsEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type GetDrainsDeliveryDrainsEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const GetDrainsDeliveryDrainsEndpoint$outboundSchema: z.ZodType<
  GetDrainsDeliveryDrainsEndpoint$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryDrainsEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsEndpoint$ {
  /** @deprecated use `GetDrainsDeliveryDrainsEndpoint$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrainsEndpoint$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsEndpoint$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrainsEndpoint$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsEndpoint$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryDrainsEndpoint$Outbound;
}

export function getDrainsDeliveryDrainsEndpointToJSON(
  getDrainsDeliveryDrainsEndpoint: GetDrainsDeliveryDrainsEndpoint,
): string {
  return JSON.stringify(
    GetDrainsDeliveryDrainsEndpoint$outboundSchema.parse(
      getDrainsDeliveryDrainsEndpoint,
    ),
  );
}

export function getDrainsDeliveryDrainsEndpointFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryDrainsEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryDrainsEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryDrainsEndpoint' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200Encoding$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponse200Encoding> = z
    .nativeEnum(GetDrainsDeliveryDrainsResponse200Encoding);

/** @internal */
export const GetDrainsDeliveryDrainsResponse200Encoding$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponse200Encoding> =
    GetDrainsDeliveryDrainsResponse200Encoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200Encoding$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200Encoding$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200Encoding$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200Encoding$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200Encoding$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrains2$inboundSchema: z.ZodType<
  GetDrainsDeliveryDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$inboundSchema,
  endpoint: z.lazy(() => GetDrainsDeliveryDrainsEndpoint$inboundSchema),
  encoding: GetDrainsDeliveryDrainsResponse200Encoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainsDeliveryDrains2$Outbound = {
  type: string;
  endpoint: GetDrainsDeliveryDrainsEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainsDeliveryDrains2$outboundSchema: z.ZodType<
  GetDrainsDeliveryDrains2$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryDrains2
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyDrainsType$outboundSchema,
  endpoint: z.lazy(() => GetDrainsDeliveryDrainsEndpoint$outboundSchema),
  encoding: GetDrainsDeliveryDrainsResponse200Encoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrains2$ {
  /** @deprecated use `GetDrainsDeliveryDrains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrains2$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrains2$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains2$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryDrains2$Outbound;
}

export function getDrainsDeliveryDrains2ToJSON(
  getDrainsDeliveryDrains2: GetDrainsDeliveryDrains2,
): string {
  return JSON.stringify(
    GetDrainsDeliveryDrains2$outboundSchema.parse(getDrainsDeliveryDrains2),
  );
}

export function getDrainsDeliveryDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryDrains2' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrainsResponseEncoding$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponseEncoding> = z
    .nativeEnum(GetDrainsDeliveryDrainsResponseEncoding);

/** @internal */
export const GetDrainsDeliveryDrainsResponseEncoding$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponseEncoding> =
    GetDrainsDeliveryDrainsResponseEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponseEncoding$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponseEncoding$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponseEncoding$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponseEncoding$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponseEncoding$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrainsCompression$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsCompression
> = z.nativeEnum(GetDrainsDeliveryDrainsCompression);

/** @internal */
export const GetDrainsDeliveryDrainsCompression$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsCompression
> = GetDrainsDeliveryDrainsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsCompression$ {
  /** @deprecated use `GetDrainsDeliveryDrainsCompression$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrainsCompression$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsCompression$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsCompression$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryDrains1$inboundSchema: z.ZodType<
  GetDrainsDeliveryDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  endpoint: z.string(),
  encoding: GetDrainsDeliveryDrainsResponseEncoding$inboundSchema,
  compression: GetDrainsDeliveryDrainsCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainsDeliveryDrains1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainsDeliveryDrains1$outboundSchema: z.ZodType<
  GetDrainsDeliveryDrains1$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryDrains1
> = z.object({
  type:
    GetDrainsDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  endpoint: z.string(),
  encoding: GetDrainsDeliveryDrainsResponseEncoding$outboundSchema,
  compression: GetDrainsDeliveryDrainsCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrains1$ {
  /** @deprecated use `GetDrainsDeliveryDrains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrains1$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrains1$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrains1$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryDrains1$Outbound;
}

export function getDrainsDeliveryDrains1ToJSON(
  getDrainsDeliveryDrains1: GetDrainsDeliveryDrains1,
): string {
  return JSON.stringify(
    GetDrainsDeliveryDrains1$outboundSchema.parse(getDrainsDeliveryDrains1),
  );
}

export function getDrainsDeliveryDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryDrains1' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsDelivery$inboundSchema: z.ZodType<
  GetDrainsDrainsDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsDeliveryDrains1$inboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains2$inboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains3$inboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains4$inboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains5$inboundSchema),
]);

/** @internal */
export type GetDrainsDrainsDelivery$Outbound =
  | GetDrainsDeliveryDrains1$Outbound
  | GetDrainsDeliveryDrains2$Outbound
  | GetDrainsDeliveryDrains3$Outbound
  | GetDrainsDeliveryDrains4$Outbound
  | GetDrainsDeliveryDrains5$Outbound;

/** @internal */
export const GetDrainsDrainsDelivery$outboundSchema: z.ZodType<
  GetDrainsDrainsDelivery$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsDelivery
> = z.union([
  z.lazy(() => GetDrainsDeliveryDrains1$outboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains2$outboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains3$outboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains4$outboundSchema),
  z.lazy(() => GetDrainsDeliveryDrains5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsDelivery$ {
  /** @deprecated use `GetDrainsDrainsDelivery$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsDelivery$inboundSchema;
  /** @deprecated use `GetDrainsDrainsDelivery$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsDelivery$outboundSchema;
  /** @deprecated use `GetDrainsDrainsDelivery$Outbound` instead. */
  export type Outbound = GetDrainsDrainsDelivery$Outbound;
}

export function getDrainsDrainsDeliveryToJSON(
  getDrainsDrainsDelivery: GetDrainsDrainsDelivery,
): string {
  return JSON.stringify(
    GetDrainsDrainsDelivery$outboundSchema.parse(getDrainsDrainsDelivery),
  );
}

export function getDrainsDrainsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsDelivery' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsType
> = z.nativeEnum(GetDrainsDrainsType);

/** @internal */
export const GetDrainsDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsType
> = GetDrainsDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsType$ {
  /** @deprecated use `GetDrainsDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsType$inboundSchema;
  /** @deprecated use `GetDrainsDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainsDrainsEnv$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsEnv
> = z.nativeEnum(GetDrainsDrainsEnv);

/** @internal */
export const GetDrainsDrainsEnv$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsEnv
> = GetDrainsDrainsEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsEnv$ {
  /** @deprecated use `GetDrainsDrainsEnv$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsEnv$inboundSchema;
  /** @deprecated use `GetDrainsDrainsEnv$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsEnv$outboundSchema;
}

/** @internal */
export const GetDrainsDrainsSampling$inboundSchema: z.ZodType<
  GetDrainsDrainsSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsDrainsType$inboundSchema,
  rate: z.number(),
  env: GetDrainsDrainsEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type GetDrainsDrainsSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const GetDrainsDrainsSampling$outboundSchema: z.ZodType<
  GetDrainsDrainsSampling$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsSampling
> = z.object({
  type: GetDrainsDrainsType$outboundSchema,
  rate: z.number(),
  env: GetDrainsDrainsEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsSampling$ {
  /** @deprecated use `GetDrainsDrainsSampling$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsSampling$inboundSchema;
  /** @deprecated use `GetDrainsDrainsSampling$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsSampling$outboundSchema;
  /** @deprecated use `GetDrainsDrainsSampling$Outbound` instead. */
  export type Outbound = GetDrainsDrainsSampling$Outbound;
}

export function getDrainsDrainsSamplingToJSON(
  getDrainsDrainsSampling: GetDrainsDrainsSampling,
): string {
  return JSON.stringify(
    GetDrainsDrainsSampling$outboundSchema.parse(getDrainsDrainsSampling),
  );
}

export function getDrainsDrainsSamplingFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsSampling' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsStatus
> = z.nativeEnum(GetDrainsDrainsStatus);

/** @internal */
export const GetDrainsDrainsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsStatus
> = GetDrainsDrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsStatus$ {
  /** @deprecated use `GetDrainsDrainsStatus$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsStatus$inboundSchema;
  /** @deprecated use `GetDrainsDrainsStatus$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsStatus$outboundSchema;
}

/** @internal */
export const GetDrainsDrainsDisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsDisabledReason
> = z.nativeEnum(GetDrainsDrainsDisabledReason);

/** @internal */
export const GetDrainsDrainsDisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDrainsDisabledReason
> = GetDrainsDrainsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsDisabledReason$ {
  /** @deprecated use `GetDrainsDrainsDisabledReason$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsDisabledReason$inboundSchema;
  /** @deprecated use `GetDrainsDrainsDisabledReason$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsDisabledReason$outboundSchema;
}

/** @internal */
export const GetDrainsSourceDrainsResponse200Kind$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsSourceDrainsResponse200Kind> = z.nativeEnum(
    GetDrainsSourceDrainsResponse200Kind,
  );

/** @internal */
export const GetDrainsSourceDrainsResponse200Kind$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsSourceDrainsResponse200Kind> =
    GetDrainsSourceDrainsResponse200Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSourceDrainsResponse200Kind$ {
  /** @deprecated use `GetDrainsSourceDrainsResponse200Kind$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsSourceDrainsResponse200Kind$inboundSchema;
  /** @deprecated use `GetDrainsSourceDrainsResponse200Kind$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsSourceDrainsResponse200Kind$outboundSchema;
}

/** @internal */
export const GetDrainsSourceDrains2$inboundSchema: z.ZodType<
  GetDrainsSourceDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainsSourceDrainsResponse200Kind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetDrainsSourceDrains2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const GetDrainsSourceDrains2$outboundSchema: z.ZodType<
  GetDrainsSourceDrains2$Outbound,
  z.ZodTypeDef,
  GetDrainsSourceDrains2
> = z.object({
  kind: GetDrainsSourceDrainsResponse200Kind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSourceDrains2$ {
  /** @deprecated use `GetDrainsSourceDrains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSourceDrains2$inboundSchema;
  /** @deprecated use `GetDrainsSourceDrains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsSourceDrains2$outboundSchema;
  /** @deprecated use `GetDrainsSourceDrains2$Outbound` instead. */
  export type Outbound = GetDrainsSourceDrains2$Outbound;
}

export function getDrainsSourceDrains2ToJSON(
  getDrainsSourceDrains2: GetDrainsSourceDrains2,
): string {
  return JSON.stringify(
    GetDrainsSourceDrains2$outboundSchema.parse(getDrainsSourceDrains2),
  );
}

export function getDrainsSourceDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsSourceDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsSourceDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsSourceDrains2' from JSON`,
  );
}

/** @internal */
export const GetDrainsSourceDrainsResponseKind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsSourceDrainsResponseKind
> = z.nativeEnum(GetDrainsSourceDrainsResponseKind);

/** @internal */
export const GetDrainsSourceDrainsResponseKind$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsSourceDrainsResponseKind
> = GetDrainsSourceDrainsResponseKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSourceDrainsResponseKind$ {
  /** @deprecated use `GetDrainsSourceDrainsResponseKind$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSourceDrainsResponseKind$inboundSchema;
  /** @deprecated use `GetDrainsSourceDrainsResponseKind$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsSourceDrainsResponseKind$outboundSchema;
}

/** @internal */
export const GetDrainsSourceDrains1$inboundSchema: z.ZodType<
  GetDrainsSourceDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainsSourceDrainsResponseKind$inboundSchema,
});

/** @internal */
export type GetDrainsSourceDrains1$Outbound = {
  kind: string;
};

/** @internal */
export const GetDrainsSourceDrains1$outboundSchema: z.ZodType<
  GetDrainsSourceDrains1$Outbound,
  z.ZodTypeDef,
  GetDrainsSourceDrains1
> = z.object({
  kind: GetDrainsSourceDrainsResponseKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSourceDrains1$ {
  /** @deprecated use `GetDrainsSourceDrains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSourceDrains1$inboundSchema;
  /** @deprecated use `GetDrainsSourceDrains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsSourceDrains1$outboundSchema;
  /** @deprecated use `GetDrainsSourceDrains1$Outbound` instead. */
  export type Outbound = GetDrainsSourceDrains1$Outbound;
}

export function getDrainsSourceDrains1ToJSON(
  getDrainsSourceDrains1: GetDrainsSourceDrains1,
): string {
  return JSON.stringify(
    GetDrainsSourceDrains1$outboundSchema.parse(getDrainsSourceDrains1),
  );
}

export function getDrainsSourceDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsSourceDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsSourceDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsSourceDrains1' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsSource$inboundSchema: z.ZodType<
  GetDrainsDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsSourceDrains2$inboundSchema),
  z.lazy(() => GetDrainsSourceDrains1$inboundSchema),
]);

/** @internal */
export type GetDrainsDrainsSource$Outbound =
  | GetDrainsSourceDrains2$Outbound
  | GetDrainsSourceDrains1$Outbound;

/** @internal */
export const GetDrainsDrainsSource$outboundSchema: z.ZodType<
  GetDrainsDrainsSource$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsSource
> = z.union([
  z.lazy(() => GetDrainsSourceDrains2$outboundSchema),
  z.lazy(() => GetDrainsSourceDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsSource$ {
  /** @deprecated use `GetDrainsDrainsSource$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsSource$inboundSchema;
  /** @deprecated use `GetDrainsDrainsSource$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsSource$outboundSchema;
  /** @deprecated use `GetDrainsDrainsSource$Outbound` instead. */
  export type Outbound = GetDrainsDrainsSource$Outbound;
}

export function getDrainsDrainsSourceToJSON(
  getDrainsDrainsSource: GetDrainsDrainsSource,
): string {
  return JSON.stringify(
    GetDrainsDrainsSource$outboundSchema.parse(getDrainsDrainsSource),
  );
}

export function getDrainsDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsSource' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2DrainsResponse200Version$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsFilterV2DrainsResponse200Version> = z
    .nativeEnum(GetDrainsFilterV2DrainsResponse200Version);

/** @internal */
export const GetDrainsFilterV2DrainsResponse200Version$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsFilterV2DrainsResponse200Version> =
    GetDrainsFilterV2DrainsResponse200Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2DrainsResponse200Version$ {
  /** @deprecated use `GetDrainsFilterV2DrainsResponse200Version$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsFilterV2DrainsResponse200Version$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2DrainsResponse200Version$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsFilterV2DrainsResponse200Version$outboundSchema;
}

/** @internal */
export const GetDrainsFilterDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsFilterDrainsResponse200Type> = z.nativeEnum(
    GetDrainsFilterDrainsResponse200Type,
  );

/** @internal */
export const GetDrainsFilterDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsFilterDrainsResponse200Type> =
    GetDrainsFilterDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrainsResponse200Type$ {
  /** @deprecated use `GetDrainsFilterDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsFilterDrainsResponse200Type$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsFilterDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDrainsFilterDrains2$inboundSchema: z.ZodType<
  GetDrainsFilterDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsFilterDrainsResponse200Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetDrainsFilterDrains2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetDrainsFilterDrains2$outboundSchema: z.ZodType<
  GetDrainsFilterDrains2$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterDrains2
> = z.object({
  type: GetDrainsFilterDrainsResponse200Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrains2$ {
  /** @deprecated use `GetDrainsFilterDrains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrains2$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDrains2$outboundSchema;
  /** @deprecated use `GetDrainsFilterDrains2$Outbound` instead. */
  export type Outbound = GetDrainsFilterDrains2$Outbound;
}

export function getDrainsFilterDrains2ToJSON(
  getDrainsFilterDrains2: GetDrainsFilterDrains2,
): string {
  return JSON.stringify(
    GetDrainsFilterDrains2$outboundSchema.parse(getDrainsFilterDrains2),
  );
}

export function getDrainsFilterDrains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterDrains2' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterDrainsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterDrainsResponseType
> = z.nativeEnum(GetDrainsFilterDrainsResponseType);

/** @internal */
export const GetDrainsFilterDrainsResponseType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterDrainsResponseType
> = GetDrainsFilterDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrainsResponseType$ {
  /** @deprecated use `GetDrainsFilterDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrainsResponseType$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsFilterDrainsResponseType$outboundSchema;
}

/** @internal */
export const GetDrainsFilterDrainsProject$inboundSchema: z.ZodType<
  GetDrainsFilterDrainsProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainsFilterDrainsProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const GetDrainsFilterDrainsProject$outboundSchema: z.ZodType<
  GetDrainsFilterDrainsProject$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterDrainsProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrainsProject$ {
  /** @deprecated use `GetDrainsFilterDrainsProject$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrainsProject$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsProject$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDrainsProject$outboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsProject$Outbound` instead. */
  export type Outbound = GetDrainsFilterDrainsProject$Outbound;
}

export function getDrainsFilterDrainsProjectToJSON(
  getDrainsFilterDrainsProject: GetDrainsFilterDrainsProject,
): string {
  return JSON.stringify(
    GetDrainsFilterDrainsProject$outboundSchema.parse(
      getDrainsFilterDrainsProject,
    ),
  );
}

export function getDrainsFilterDrainsProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterDrainsProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterDrainsProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterDrainsProject' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterDrainsLog$inboundSchema: z.ZodType<
  GetDrainsFilterDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainsFilterDrainsLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const GetDrainsFilterDrainsLog$outboundSchema: z.ZodType<
  GetDrainsFilterDrainsLog$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterDrainsLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrainsLog$ {
  /** @deprecated use `GetDrainsFilterDrainsLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrainsLog$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDrainsLog$outboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsLog$Outbound` instead. */
  export type Outbound = GetDrainsFilterDrainsLog$Outbound;
}

export function getDrainsFilterDrainsLogToJSON(
  getDrainsFilterDrainsLog: GetDrainsFilterDrainsLog,
): string {
  return JSON.stringify(
    GetDrainsFilterDrainsLog$outboundSchema.parse(getDrainsFilterDrainsLog),
  );
}

export function getDrainsFilterDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterDrainsLog' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterDrainsDeployment$inboundSchema: z.ZodType<
  GetDrainsFilterDrainsDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainsFilterDrainsDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const GetDrainsFilterDrainsDeployment$outboundSchema: z.ZodType<
  GetDrainsFilterDrainsDeployment$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterDrainsDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrainsDeployment$ {
  /** @deprecated use `GetDrainsFilterDrainsDeployment$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrainsDeployment$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsDeployment$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDrainsDeployment$outboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsDeployment$Outbound` instead. */
  export type Outbound = GetDrainsFilterDrainsDeployment$Outbound;
}

export function getDrainsFilterDrainsDeploymentToJSON(
  getDrainsFilterDrainsDeployment: GetDrainsFilterDrainsDeployment,
): string {
  return JSON.stringify(
    GetDrainsFilterDrainsDeployment$outboundSchema.parse(
      getDrainsFilterDrainsDeployment,
    ),
  );
}

export function getDrainsFilterDrainsDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterDrainsDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterDrainsDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterDrainsDeployment' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterDrains1$inboundSchema: z.ZodType<
  GetDrainsFilterDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsFilterDrainsResponseType$inboundSchema,
  project: z.lazy(() => GetDrainsFilterDrainsProject$inboundSchema).optional(),
  log: z.lazy(() => GetDrainsFilterDrainsLog$inboundSchema).optional(),
  deployment: z.lazy(() => GetDrainsFilterDrainsDeployment$inboundSchema)
    .optional(),
});

/** @internal */
export type GetDrainsFilterDrains1$Outbound = {
  type: string;
  project?: GetDrainsFilterDrainsProject$Outbound | undefined;
  log?: GetDrainsFilterDrainsLog$Outbound | undefined;
  deployment?: GetDrainsFilterDrainsDeployment$Outbound | undefined;
};

/** @internal */
export const GetDrainsFilterDrains1$outboundSchema: z.ZodType<
  GetDrainsFilterDrains1$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterDrains1
> = z.object({
  type: GetDrainsFilterDrainsResponseType$outboundSchema,
  project: z.lazy(() => GetDrainsFilterDrainsProject$outboundSchema).optional(),
  log: z.lazy(() => GetDrainsFilterDrainsLog$outboundSchema).optional(),
  deployment: z.lazy(() => GetDrainsFilterDrainsDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrains1$ {
  /** @deprecated use `GetDrainsFilterDrains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrains1$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDrains1$outboundSchema;
  /** @deprecated use `GetDrainsFilterDrains1$Outbound` instead. */
  export type Outbound = GetDrainsFilterDrains1$Outbound;
}

export function getDrainsFilterDrains1ToJSON(
  getDrainsFilterDrains1: GetDrainsFilterDrains1,
): string {
  return JSON.stringify(
    GetDrainsFilterDrains1$outboundSchema.parse(getDrainsFilterDrains1),
  );
}

export function getDrainsFilterDrains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterDrains1' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2DrainsFilter$inboundSchema: z.ZodType<
  GetDrainsFilterV2DrainsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsFilterDrains2$inboundSchema),
  z.lazy(() => GetDrainsFilterDrains1$inboundSchema),
]);

/** @internal */
export type GetDrainsFilterV2DrainsFilter$Outbound =
  | GetDrainsFilterDrains2$Outbound
  | GetDrainsFilterDrains1$Outbound;

/** @internal */
export const GetDrainsFilterV2DrainsFilter$outboundSchema: z.ZodType<
  GetDrainsFilterV2DrainsFilter$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterV2DrainsFilter
> = z.union([
  z.lazy(() => GetDrainsFilterDrains2$outboundSchema),
  z.lazy(() => GetDrainsFilterDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2DrainsFilter$ {
  /** @deprecated use `GetDrainsFilterV2DrainsFilter$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV2DrainsFilter$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2DrainsFilter$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV2DrainsFilter$outboundSchema;
  /** @deprecated use `GetDrainsFilterV2DrainsFilter$Outbound` instead. */
  export type Outbound = GetDrainsFilterV2DrainsFilter$Outbound;
}

export function getDrainsFilterV2DrainsFilterToJSON(
  getDrainsFilterV2DrainsFilter: GetDrainsFilterV2DrainsFilter,
): string {
  return JSON.stringify(
    GetDrainsFilterV2DrainsFilter$outboundSchema.parse(
      getDrainsFilterV2DrainsFilter,
    ),
  );
}

export function getDrainsFilterV2DrainsFilterFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterV2DrainsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterV2DrainsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterV2DrainsFilter' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2Drains2$inboundSchema: z.ZodType<
  GetDrainsFilterV2Drains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainsFilterV2DrainsResponse200Version$inboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainsFilterDrains2$inboundSchema),
    z.lazy(() => GetDrainsFilterDrains1$inboundSchema),
  ]),
});

/** @internal */
export type GetDrainsFilterV2Drains2$Outbound = {
  version: string;
  filter: GetDrainsFilterDrains2$Outbound | GetDrainsFilterDrains1$Outbound;
};

/** @internal */
export const GetDrainsFilterV2Drains2$outboundSchema: z.ZodType<
  GetDrainsFilterV2Drains2$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterV2Drains2
> = z.object({
  version: GetDrainsFilterV2DrainsResponse200Version$outboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainsFilterDrains2$outboundSchema),
    z.lazy(() => GetDrainsFilterDrains1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2Drains2$ {
  /** @deprecated use `GetDrainsFilterV2Drains2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV2Drains2$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2Drains2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV2Drains2$outboundSchema;
  /** @deprecated use `GetDrainsFilterV2Drains2$Outbound` instead. */
  export type Outbound = GetDrainsFilterV2Drains2$Outbound;
}

export function getDrainsFilterV2Drains2ToJSON(
  getDrainsFilterV2Drains2: GetDrainsFilterV2Drains2,
): string {
  return JSON.stringify(
    GetDrainsFilterV2Drains2$outboundSchema.parse(getDrainsFilterV2Drains2),
  );
}

export function getDrainsFilterV2Drains2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterV2Drains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterV2Drains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterV2Drains2' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2DrainsResponseVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsFilterV2DrainsResponseVersion> = z.nativeEnum(
    GetDrainsFilterV2DrainsResponseVersion,
  );

/** @internal */
export const GetDrainsFilterV2DrainsResponseVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsFilterV2DrainsResponseVersion> =
    GetDrainsFilterV2DrainsResponseVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2DrainsResponseVersion$ {
  /** @deprecated use `GetDrainsFilterV2DrainsResponseVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsFilterV2DrainsResponseVersion$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2DrainsResponseVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsFilterV2DrainsResponseVersion$outboundSchema;
}

/** @internal */
export const GetDrainsFilterV2Drains1$inboundSchema: z.ZodType<
  GetDrainsFilterV2Drains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainsFilterV2DrainsResponseVersion$inboundSchema,
});

/** @internal */
export type GetDrainsFilterV2Drains1$Outbound = {
  version: string;
};

/** @internal */
export const GetDrainsFilterV2Drains1$outboundSchema: z.ZodType<
  GetDrainsFilterV2Drains1$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterV2Drains1
> = z.object({
  version: GetDrainsFilterV2DrainsResponseVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2Drains1$ {
  /** @deprecated use `GetDrainsFilterV2Drains1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV2Drains1$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2Drains1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV2Drains1$outboundSchema;
  /** @deprecated use `GetDrainsFilterV2Drains1$Outbound` instead. */
  export type Outbound = GetDrainsFilterV2Drains1$Outbound;
}

export function getDrainsFilterV2Drains1ToJSON(
  getDrainsFilterV2Drains1: GetDrainsFilterV2Drains1,
): string {
  return JSON.stringify(
    GetDrainsFilterV2Drains1$outboundSchema.parse(getDrainsFilterV2Drains1),
  );
}

export function getDrainsFilterV2Drains1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterV2Drains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterV2Drains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterV2Drains1' from JSON`,
  );
}

/** @internal */
export const GetDrainsDrainsFilterV2$inboundSchema: z.ZodType<
  GetDrainsDrainsFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsFilterV2Drains2$inboundSchema),
  z.lazy(() => GetDrainsFilterV2Drains1$inboundSchema),
]);

/** @internal */
export type GetDrainsDrainsFilterV2$Outbound =
  | GetDrainsFilterV2Drains2$Outbound
  | GetDrainsFilterV2Drains1$Outbound;

/** @internal */
export const GetDrainsDrainsFilterV2$outboundSchema: z.ZodType<
  GetDrainsDrainsFilterV2$Outbound,
  z.ZodTypeDef,
  GetDrainsDrainsFilterV2
> = z.union([
  z.lazy(() => GetDrainsFilterV2Drains2$outboundSchema),
  z.lazy(() => GetDrainsFilterV2Drains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDrainsFilterV2$ {
  /** @deprecated use `GetDrainsDrainsFilterV2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDrainsFilterV2$inboundSchema;
  /** @deprecated use `GetDrainsDrainsFilterV2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDrainsFilterV2$outboundSchema;
  /** @deprecated use `GetDrainsDrainsFilterV2$Outbound` instead. */
  export type Outbound = GetDrainsDrainsFilterV2$Outbound;
}

export function getDrainsDrainsFilterV2ToJSON(
  getDrainsDrainsFilterV2: GetDrainsDrainsFilterV2,
): string {
  return JSON.stringify(
    GetDrainsDrainsFilterV2$outboundSchema.parse(getDrainsDrainsFilterV2),
  );
}

export function getDrainsDrainsFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDrainsFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDrainsFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDrainsFilterV2' from JSON`,
  );
}

/** @internal */
export const DrainsFramework$inboundSchema: z.ZodNativeEnum<
  typeof DrainsFramework
> = z.nativeEnum(DrainsFramework);

/** @internal */
export const DrainsFramework$outboundSchema: z.ZodNativeEnum<
  typeof DrainsFramework
> = DrainsFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsFramework$ {
  /** @deprecated use `DrainsFramework$inboundSchema` instead. */
  export const inboundSchema = DrainsFramework$inboundSchema;
  /** @deprecated use `DrainsFramework$outboundSchema` instead. */
  export const outboundSchema = DrainsFramework$outboundSchema;
}

/** @internal */
export const DrainsProjectsMetadata$inboundSchema: z.ZodType<
  DrainsProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(DrainsFramework$inboundSchema).optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type DrainsProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const DrainsProjectsMetadata$outboundSchema: z.ZodType<
  DrainsProjectsMetadata$Outbound,
  z.ZodTypeDef,
  DrainsProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(DrainsFramework$outboundSchema).optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsProjectsMetadata$ {
  /** @deprecated use `DrainsProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema = DrainsProjectsMetadata$inboundSchema;
  /** @deprecated use `DrainsProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema = DrainsProjectsMetadata$outboundSchema;
  /** @deprecated use `DrainsProjectsMetadata$Outbound` instead. */
  export type Outbound = DrainsProjectsMetadata$Outbound;
}

export function drainsProjectsMetadataToJSON(
  drainsProjectsMetadata: DrainsProjectsMetadata,
): string {
  return JSON.stringify(
    DrainsProjectsMetadata$outboundSchema.parse(drainsProjectsMetadata),
  );
}

export function drainsProjectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<DrainsProjectsMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsProjectsMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const Drains2$inboundSchema: z.ZodType<Drains2, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    ownerId: z.string(),
    name: z.string(),
    createdAt: z.number(),
    createdFrom: GetDrainsDrainsCreatedFrom$inboundSchema.optional(),
    updatedAt: z.number(),
    projectIds: z.array(z.string()).optional(),
    schemas: z.lazy(() => GetDrainsDrainsSchemas$inboundSchema).optional(),
    delivery: z.union([
      z.lazy(() => GetDrainsDeliveryDrains1$inboundSchema),
      z.lazy(() => GetDrainsDeliveryDrains2$inboundSchema),
      z.lazy(() => GetDrainsDeliveryDrains3$inboundSchema),
      z.lazy(() => GetDrainsDeliveryDrains4$inboundSchema),
      z.lazy(() => GetDrainsDeliveryDrains5$inboundSchema),
    ]).optional(),
    sampling: z.array(z.lazy(() => GetDrainsDrainsSampling$inboundSchema))
      .optional(),
    teamId: z.nullable(z.string()).optional(),
    status: GetDrainsDrainsStatus$inboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: GetDrainsDrainsDisabledReason$inboundSchema.optional(),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    configurationId: z.string().optional(),
    clientId: z.string().optional(),
    source: z.union([
      z.lazy(() => GetDrainsSourceDrains2$inboundSchema),
      z.lazy(() => GetDrainsSourceDrains1$inboundSchema),
    ]),
    filter: z.string().optional(),
    filterV2: z.union([
      z.lazy(() => GetDrainsFilterV2Drains2$inboundSchema),
      z.lazy(() => GetDrainsFilterV2Drains1$inboundSchema),
    ]).optional(),
    integrationIcon: z.string().optional(),
    integrationConfigurationUri: z.string().optional(),
    integrationWebsite: z.string().optional(),
    projectsMetadata: z.array(
      z.lazy(() => DrainsProjectsMetadata$inboundSchema),
    ).optional(),
  });

/** @internal */
export type Drains2$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: GetDrainsDrainsSchemas$Outbound | undefined;
  delivery?:
    | GetDrainsDeliveryDrains1$Outbound
    | GetDrainsDeliveryDrains2$Outbound
    | GetDrainsDeliveryDrains3$Outbound
    | GetDrainsDeliveryDrains4$Outbound
    | GetDrainsDeliveryDrains5$Outbound
    | undefined;
  sampling?: Array<GetDrainsDrainsSampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainsSourceDrains2$Outbound | GetDrainsSourceDrains1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | GetDrainsFilterV2Drains2$Outbound
    | GetDrainsFilterV2Drains1$Outbound
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?: Array<DrainsProjectsMetadata$Outbound> | undefined;
};

/** @internal */
export const Drains2$outboundSchema: z.ZodType<
  Drains2$Outbound,
  z.ZodTypeDef,
  Drains2
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: GetDrainsDrainsCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => GetDrainsDrainsSchemas$outboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => GetDrainsDeliveryDrains1$outboundSchema),
    z.lazy(() => GetDrainsDeliveryDrains2$outboundSchema),
    z.lazy(() => GetDrainsDeliveryDrains3$outboundSchema),
    z.lazy(() => GetDrainsDeliveryDrains4$outboundSchema),
    z.lazy(() => GetDrainsDeliveryDrains5$outboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => GetDrainsDrainsSampling$outboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: GetDrainsDrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: GetDrainsDrainsDisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetDrainsSourceDrains2$outboundSchema),
    z.lazy(() => GetDrainsSourceDrains1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetDrainsFilterV2Drains2$outboundSchema),
    z.lazy(() => GetDrainsFilterV2Drains1$outboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(z.lazy(() => DrainsProjectsMetadata$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drains2$ {
  /** @deprecated use `Drains2$inboundSchema` instead. */
  export const inboundSchema = Drains2$inboundSchema;
  /** @deprecated use `Drains2$outboundSchema` instead. */
  export const outboundSchema = Drains2$outboundSchema;
  /** @deprecated use `Drains2$Outbound` instead. */
  export type Outbound = Drains2$Outbound;
}

export function drains2ToJSON(drains2: Drains2): string {
  return JSON.stringify(Drains2$outboundSchema.parse(drains2));
}

export function drains2FromJSON(
  jsonString: string,
): SafeParseResult<Drains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Drains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Drains2' from JSON`,
  );
}

/** @internal */
export const DrainsCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof DrainsCreatedFrom
> = z.nativeEnum(DrainsCreatedFrom);

/** @internal */
export const DrainsCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof DrainsCreatedFrom
> = DrainsCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsCreatedFrom$ {
  /** @deprecated use `DrainsCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = DrainsCreatedFrom$inboundSchema;
  /** @deprecated use `DrainsCreatedFrom$outboundSchema` instead. */
  export const outboundSchema = DrainsCreatedFrom$outboundSchema;
}

/** @internal */
export const DrainsLog$inboundSchema: z.ZodType<
  DrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DrainsLog$Outbound = {};

/** @internal */
export const DrainsLog$outboundSchema: z.ZodType<
  DrainsLog$Outbound,
  z.ZodTypeDef,
  DrainsLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsLog$ {
  /** @deprecated use `DrainsLog$inboundSchema` instead. */
  export const inboundSchema = DrainsLog$inboundSchema;
  /** @deprecated use `DrainsLog$outboundSchema` instead. */
  export const outboundSchema = DrainsLog$outboundSchema;
  /** @deprecated use `DrainsLog$Outbound` instead. */
  export type Outbound = DrainsLog$Outbound;
}

export function drainsLogToJSON(drainsLog: DrainsLog): string {
  return JSON.stringify(DrainsLog$outboundSchema.parse(drainsLog));
}

export function drainsLogFromJSON(
  jsonString: string,
): SafeParseResult<DrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsLog' from JSON`,
  );
}

/** @internal */
export const DrainsTrace$inboundSchema: z.ZodType<
  DrainsTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DrainsTrace$Outbound = {};

/** @internal */
export const DrainsTrace$outboundSchema: z.ZodType<
  DrainsTrace$Outbound,
  z.ZodTypeDef,
  DrainsTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsTrace$ {
  /** @deprecated use `DrainsTrace$inboundSchema` instead. */
  export const inboundSchema = DrainsTrace$inboundSchema;
  /** @deprecated use `DrainsTrace$outboundSchema` instead. */
  export const outboundSchema = DrainsTrace$outboundSchema;
  /** @deprecated use `DrainsTrace$Outbound` instead. */
  export type Outbound = DrainsTrace$Outbound;
}

export function drainsTraceToJSON(drainsTrace: DrainsTrace): string {
  return JSON.stringify(DrainsTrace$outboundSchema.parse(drainsTrace));
}

export function drainsTraceFromJSON(
  jsonString: string,
): SafeParseResult<DrainsTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsTrace' from JSON`,
  );
}

/** @internal */
export const DrainsAnalytics$inboundSchema: z.ZodType<
  DrainsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DrainsAnalytics$Outbound = {};

/** @internal */
export const DrainsAnalytics$outboundSchema: z.ZodType<
  DrainsAnalytics$Outbound,
  z.ZodTypeDef,
  DrainsAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsAnalytics$ {
  /** @deprecated use `DrainsAnalytics$inboundSchema` instead. */
  export const inboundSchema = DrainsAnalytics$inboundSchema;
  /** @deprecated use `DrainsAnalytics$outboundSchema` instead. */
  export const outboundSchema = DrainsAnalytics$outboundSchema;
  /** @deprecated use `DrainsAnalytics$Outbound` instead. */
  export type Outbound = DrainsAnalytics$Outbound;
}

export function drainsAnalyticsToJSON(
  drainsAnalytics: DrainsAnalytics,
): string {
  return JSON.stringify(DrainsAnalytics$outboundSchema.parse(drainsAnalytics));
}

export function drainsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<DrainsAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsAnalytics' from JSON`,
  );
}

/** @internal */
export const DrainsSpeedInsights$inboundSchema: z.ZodType<
  DrainsSpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type DrainsSpeedInsights$Outbound = {};

/** @internal */
export const DrainsSpeedInsights$outboundSchema: z.ZodType<
  DrainsSpeedInsights$Outbound,
  z.ZodTypeDef,
  DrainsSpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsSpeedInsights$ {
  /** @deprecated use `DrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema = DrainsSpeedInsights$inboundSchema;
  /** @deprecated use `DrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema = DrainsSpeedInsights$outboundSchema;
  /** @deprecated use `DrainsSpeedInsights$Outbound` instead. */
  export type Outbound = DrainsSpeedInsights$Outbound;
}

export function drainsSpeedInsightsToJSON(
  drainsSpeedInsights: DrainsSpeedInsights,
): string {
  return JSON.stringify(
    DrainsSpeedInsights$outboundSchema.parse(drainsSpeedInsights),
  );
}

export function drainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<DrainsSpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsSpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const DrainsSchemas$inboundSchema: z.ZodType<
  DrainsSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => DrainsLog$inboundSchema).optional(),
  trace: z.lazy(() => DrainsTrace$inboundSchema).optional(),
  analytics: z.lazy(() => DrainsAnalytics$inboundSchema).optional(),
  speed_insights: z.lazy(() => DrainsSpeedInsights$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type DrainsSchemas$Outbound = {
  log?: DrainsLog$Outbound | undefined;
  trace?: DrainsTrace$Outbound | undefined;
  analytics?: DrainsAnalytics$Outbound | undefined;
  speed_insights?: DrainsSpeedInsights$Outbound | undefined;
};

/** @internal */
export const DrainsSchemas$outboundSchema: z.ZodType<
  DrainsSchemas$Outbound,
  z.ZodTypeDef,
  DrainsSchemas
> = z.object({
  log: z.lazy(() => DrainsLog$outboundSchema).optional(),
  trace: z.lazy(() => DrainsTrace$outboundSchema).optional(),
  analytics: z.lazy(() => DrainsAnalytics$outboundSchema).optional(),
  speedInsights: z.lazy(() => DrainsSpeedInsights$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsSchemas$ {
  /** @deprecated use `DrainsSchemas$inboundSchema` instead. */
  export const inboundSchema = DrainsSchemas$inboundSchema;
  /** @deprecated use `DrainsSchemas$outboundSchema` instead. */
  export const outboundSchema = DrainsSchemas$outboundSchema;
  /** @deprecated use `DrainsSchemas$Outbound` instead. */
  export type Outbound = DrainsSchemas$Outbound;
}

export function drainsSchemasToJSON(drainsSchemas: DrainsSchemas): string {
  return JSON.stringify(DrainsSchemas$outboundSchema.parse(drainsSchemas));
}

export function drainsSchemasFromJSON(
  jsonString: string,
): SafeParseResult<DrainsSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsSchemas' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONType
  > = z.nativeEnum(GetDrainsDeliveryDrainsResponse200ApplicationJSONType);

/** @internal */
export const GetDrainsDeliveryDrainsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof GetDrainsDeliveryDrainsResponse200ApplicationJSONType
  > = GetDrainsDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200ApplicationJSONType$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryTarget
> = z.nativeEnum(GetDrainsDeliveryTarget);

/** @internal */
export const GetDrainsDeliveryTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryTarget
> = GetDrainsDeliveryTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryTarget$ {
  /** @deprecated use `GetDrainsDeliveryTarget$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryTarget$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryTarget$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryTarget$outboundSchema;
}

/** @internal */
export const GetDrainsDelivery5$inboundSchema: z.ZodType<
  GetDrainsDelivery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsDeliveryDrainsResponse200ApplicationJSONType$inboundSchema,
  target: GetDrainsDeliveryTarget$inboundSchema,
});

/** @internal */
export type GetDrainsDelivery5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const GetDrainsDelivery5$outboundSchema: z.ZodType<
  GetDrainsDelivery5$Outbound,
  z.ZodTypeDef,
  GetDrainsDelivery5
> = z.object({
  type: GetDrainsDeliveryDrainsResponse200ApplicationJSONType$outboundSchema,
  target: GetDrainsDeliveryTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDelivery5$ {
  /** @deprecated use `GetDrainsDelivery5$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDelivery5$inboundSchema;
  /** @deprecated use `GetDrainsDelivery5$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDelivery5$outboundSchema;
  /** @deprecated use `GetDrainsDelivery5$Outbound` instead. */
  export type Outbound = GetDrainsDelivery5$Outbound;
}

export function getDrainsDelivery5ToJSON(
  getDrainsDelivery5: GetDrainsDelivery5,
): string {
  return JSON.stringify(
    GetDrainsDelivery5$outboundSchema.parse(getDrainsDelivery5),
  );
}

export function getDrainsDelivery5FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDelivery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDelivery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDelivery5' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponse200Type> = z.nativeEnum(
    GetDrainsDeliveryDrainsResponse200Type,
  );

/** @internal */
export const GetDrainsDeliveryDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponse200Type> =
    GetDrainsDeliveryDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponse200Type$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponse200Type$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const GetDrainsDelivery4$inboundSchema: z.ZodType<
  GetDrainsDelivery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsDeliveryDrainsResponse200Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type GetDrainsDelivery4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const GetDrainsDelivery4$outboundSchema: z.ZodType<
  GetDrainsDelivery4$Outbound,
  z.ZodTypeDef,
  GetDrainsDelivery4
> = z.object({
  type: GetDrainsDeliveryDrainsResponse200Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDelivery4$ {
  /** @deprecated use `GetDrainsDelivery4$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDelivery4$inboundSchema;
  /** @deprecated use `GetDrainsDelivery4$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDelivery4$outboundSchema;
  /** @deprecated use `GetDrainsDelivery4$Outbound` instead. */
  export type Outbound = GetDrainsDelivery4$Outbound;
}

export function getDrainsDelivery4ToJSON(
  getDrainsDelivery4: GetDrainsDelivery4,
): string {
  return JSON.stringify(
    GetDrainsDelivery4$outboundSchema.parse(getDrainsDelivery4),
  );
}

export function getDrainsDelivery4FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDelivery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDelivery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDelivery4' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsResponseType
> = z.nativeEnum(GetDrainsDeliveryDrainsResponseType);

/** @internal */
export const GetDrainsDeliveryDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof GetDrainsDeliveryDrainsResponseType> =
    GetDrainsDeliveryDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsResponseType$ {
  /** @deprecated use `GetDrainsDeliveryDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    GetDrainsDeliveryDrainsResponseType$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    GetDrainsDeliveryDrainsResponseType$outboundSchema;
}

/** @internal */
export const GetDrainsDelivery3$inboundSchema: z.ZodType<
  GetDrainsDelivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsDeliveryDrainsResponseType$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type GetDrainsDelivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const GetDrainsDelivery3$outboundSchema: z.ZodType<
  GetDrainsDelivery3$Outbound,
  z.ZodTypeDef,
  GetDrainsDelivery3
> = z.object({
  type: GetDrainsDeliveryDrainsResponseType$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDelivery3$ {
  /** @deprecated use `GetDrainsDelivery3$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDelivery3$inboundSchema;
  /** @deprecated use `GetDrainsDelivery3$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDelivery3$outboundSchema;
  /** @deprecated use `GetDrainsDelivery3$Outbound` instead. */
  export type Outbound = GetDrainsDelivery3$Outbound;
}

export function getDrainsDelivery3ToJSON(
  getDrainsDelivery3: GetDrainsDelivery3,
): string {
  return JSON.stringify(
    GetDrainsDelivery3$outboundSchema.parse(getDrainsDelivery3),
  );
}

export function getDrainsDelivery3FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDelivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDelivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDelivery3' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsType
> = z.nativeEnum(GetDrainsDeliveryDrainsType);

/** @internal */
export const GetDrainsDeliveryDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsType
> = GetDrainsDeliveryDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsType$ {
  /** @deprecated use `GetDrainsDeliveryDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrainsType$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryEndpoint$inboundSchema: z.ZodType<
  GetDrainsDeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type GetDrainsDeliveryEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const GetDrainsDeliveryEndpoint$outboundSchema: z.ZodType<
  GetDrainsDeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  GetDrainsDeliveryEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryEndpoint$ {
  /** @deprecated use `GetDrainsDeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryEndpoint$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryEndpoint$outboundSchema;
  /** @deprecated use `GetDrainsDeliveryEndpoint$Outbound` instead. */
  export type Outbound = GetDrainsDeliveryEndpoint$Outbound;
}

export function getDrainsDeliveryEndpointToJSON(
  getDrainsDeliveryEndpoint: GetDrainsDeliveryEndpoint,
): string {
  return JSON.stringify(
    GetDrainsDeliveryEndpoint$outboundSchema.parse(getDrainsDeliveryEndpoint),
  );
}

export function getDrainsDeliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryDrainsEncoding$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsEncoding
> = z.nativeEnum(GetDrainsDeliveryDrainsEncoding);

/** @internal */
export const GetDrainsDeliveryDrainsEncoding$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryDrainsEncoding
> = GetDrainsDeliveryDrainsEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryDrainsEncoding$ {
  /** @deprecated use `GetDrainsDeliveryDrainsEncoding$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryDrainsEncoding$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryDrainsEncoding$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryDrainsEncoding$outboundSchema;
}

/** @internal */
export const GetDrainsDelivery2$inboundSchema: z.ZodType<
  GetDrainsDelivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsDeliveryDrainsType$inboundSchema,
  endpoint: z.lazy(() => GetDrainsDeliveryEndpoint$inboundSchema),
  encoding: GetDrainsDeliveryDrainsEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainsDelivery2$Outbound = {
  type: string;
  endpoint: GetDrainsDeliveryEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainsDelivery2$outboundSchema: z.ZodType<
  GetDrainsDelivery2$Outbound,
  z.ZodTypeDef,
  GetDrainsDelivery2
> = z.object({
  type: GetDrainsDeliveryDrainsType$outboundSchema,
  endpoint: z.lazy(() => GetDrainsDeliveryEndpoint$outboundSchema),
  encoding: GetDrainsDeliveryDrainsEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDelivery2$ {
  /** @deprecated use `GetDrainsDelivery2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDelivery2$inboundSchema;
  /** @deprecated use `GetDrainsDelivery2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDelivery2$outboundSchema;
  /** @deprecated use `GetDrainsDelivery2$Outbound` instead. */
  export type Outbound = GetDrainsDelivery2$Outbound;
}

export function getDrainsDelivery2ToJSON(
  getDrainsDelivery2: GetDrainsDelivery2,
): string {
  return JSON.stringify(
    GetDrainsDelivery2$outboundSchema.parse(getDrainsDelivery2),
  );
}

export function getDrainsDelivery2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDelivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDelivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDelivery2' from JSON`,
  );
}

/** @internal */
export const GetDrainsDeliveryType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryType
> = z.nativeEnum(GetDrainsDeliveryType);

/** @internal */
export const GetDrainsDeliveryType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryType
> = GetDrainsDeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryType$ {
  /** @deprecated use `GetDrainsDeliveryType$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryType$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryType$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryType$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryEncoding
> = z.nativeEnum(GetDrainsDeliveryEncoding);

/** @internal */
export const GetDrainsDeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryEncoding
> = GetDrainsDeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryEncoding$ {
  /** @deprecated use `GetDrainsDeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryEncoding$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryEncoding$outboundSchema;
}

/** @internal */
export const GetDrainsDeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryCompression
> = z.nativeEnum(GetDrainsDeliveryCompression);

/** @internal */
export const GetDrainsDeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsDeliveryCompression
> = GetDrainsDeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDeliveryCompression$ {
  /** @deprecated use `GetDrainsDeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDeliveryCompression$inboundSchema;
  /** @deprecated use `GetDrainsDeliveryCompression$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDeliveryCompression$outboundSchema;
}

/** @internal */
export const GetDrainsDelivery1$inboundSchema: z.ZodType<
  GetDrainsDelivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsDeliveryType$inboundSchema,
  endpoint: z.string(),
  encoding: GetDrainsDeliveryEncoding$inboundSchema,
  compression: GetDrainsDeliveryCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type GetDrainsDelivery1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const GetDrainsDelivery1$outboundSchema: z.ZodType<
  GetDrainsDelivery1$Outbound,
  z.ZodTypeDef,
  GetDrainsDelivery1
> = z.object({
  type: GetDrainsDeliveryType$outboundSchema,
  endpoint: z.string(),
  encoding: GetDrainsDeliveryEncoding$outboundSchema,
  compression: GetDrainsDeliveryCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsDelivery1$ {
  /** @deprecated use `GetDrainsDelivery1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsDelivery1$inboundSchema;
  /** @deprecated use `GetDrainsDelivery1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsDelivery1$outboundSchema;
  /** @deprecated use `GetDrainsDelivery1$Outbound` instead. */
  export type Outbound = GetDrainsDelivery1$Outbound;
}

export function getDrainsDelivery1ToJSON(
  getDrainsDelivery1: GetDrainsDelivery1,
): string {
  return JSON.stringify(
    GetDrainsDelivery1$outboundSchema.parse(getDrainsDelivery1),
  );
}

export function getDrainsDelivery1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsDelivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsDelivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsDelivery1' from JSON`,
  );
}

/** @internal */
export const DrainsDelivery$inboundSchema: z.ZodType<
  DrainsDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsDelivery1$inboundSchema),
  z.lazy(() => GetDrainsDelivery2$inboundSchema),
  z.lazy(() => GetDrainsDelivery3$inboundSchema),
  z.lazy(() => GetDrainsDelivery4$inboundSchema),
  z.lazy(() => GetDrainsDelivery5$inboundSchema),
]);

/** @internal */
export type DrainsDelivery$Outbound =
  | GetDrainsDelivery1$Outbound
  | GetDrainsDelivery2$Outbound
  | GetDrainsDelivery3$Outbound
  | GetDrainsDelivery4$Outbound
  | GetDrainsDelivery5$Outbound;

/** @internal */
export const DrainsDelivery$outboundSchema: z.ZodType<
  DrainsDelivery$Outbound,
  z.ZodTypeDef,
  DrainsDelivery
> = z.union([
  z.lazy(() => GetDrainsDelivery1$outboundSchema),
  z.lazy(() => GetDrainsDelivery2$outboundSchema),
  z.lazy(() => GetDrainsDelivery3$outboundSchema),
  z.lazy(() => GetDrainsDelivery4$outboundSchema),
  z.lazy(() => GetDrainsDelivery5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsDelivery$ {
  /** @deprecated use `DrainsDelivery$inboundSchema` instead. */
  export const inboundSchema = DrainsDelivery$inboundSchema;
  /** @deprecated use `DrainsDelivery$outboundSchema` instead. */
  export const outboundSchema = DrainsDelivery$outboundSchema;
  /** @deprecated use `DrainsDelivery$Outbound` instead. */
  export type Outbound = DrainsDelivery$Outbound;
}

export function drainsDeliveryToJSON(drainsDelivery: DrainsDelivery): string {
  return JSON.stringify(DrainsDelivery$outboundSchema.parse(drainsDelivery));
}

export function drainsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<DrainsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsDelivery' from JSON`,
  );
}

/** @internal */
export const DrainsType$inboundSchema: z.ZodNativeEnum<typeof DrainsType> = z
  .nativeEnum(DrainsType);

/** @internal */
export const DrainsType$outboundSchema: z.ZodNativeEnum<typeof DrainsType> =
  DrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsType$ {
  /** @deprecated use `DrainsType$inboundSchema` instead. */
  export const inboundSchema = DrainsType$inboundSchema;
  /** @deprecated use `DrainsType$outboundSchema` instead. */
  export const outboundSchema = DrainsType$outboundSchema;
}

/** @internal */
export const DrainsEnv$inboundSchema: z.ZodNativeEnum<typeof DrainsEnv> = z
  .nativeEnum(DrainsEnv);

/** @internal */
export const DrainsEnv$outboundSchema: z.ZodNativeEnum<typeof DrainsEnv> =
  DrainsEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsEnv$ {
  /** @deprecated use `DrainsEnv$inboundSchema` instead. */
  export const inboundSchema = DrainsEnv$inboundSchema;
  /** @deprecated use `DrainsEnv$outboundSchema` instead. */
  export const outboundSchema = DrainsEnv$outboundSchema;
}

/** @internal */
export const DrainsSampling$inboundSchema: z.ZodType<
  DrainsSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: DrainsType$inboundSchema,
  rate: z.number(),
  env: DrainsEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type DrainsSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const DrainsSampling$outboundSchema: z.ZodType<
  DrainsSampling$Outbound,
  z.ZodTypeDef,
  DrainsSampling
> = z.object({
  type: DrainsType$outboundSchema,
  rate: z.number(),
  env: DrainsEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsSampling$ {
  /** @deprecated use `DrainsSampling$inboundSchema` instead. */
  export const inboundSchema = DrainsSampling$inboundSchema;
  /** @deprecated use `DrainsSampling$outboundSchema` instead. */
  export const outboundSchema = DrainsSampling$outboundSchema;
  /** @deprecated use `DrainsSampling$Outbound` instead. */
  export type Outbound = DrainsSampling$Outbound;
}

export function drainsSamplingToJSON(drainsSampling: DrainsSampling): string {
  return JSON.stringify(DrainsSampling$outboundSchema.parse(drainsSampling));
}

export function drainsSamplingFromJSON(
  jsonString: string,
): SafeParseResult<DrainsSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsSampling' from JSON`,
  );
}

/** @internal */
export const DrainsStatus$inboundSchema: z.ZodNativeEnum<typeof DrainsStatus> =
  z.nativeEnum(DrainsStatus);

/** @internal */
export const DrainsStatus$outboundSchema: z.ZodNativeEnum<typeof DrainsStatus> =
  DrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsStatus$ {
  /** @deprecated use `DrainsStatus$inboundSchema` instead. */
  export const inboundSchema = DrainsStatus$inboundSchema;
  /** @deprecated use `DrainsStatus$outboundSchema` instead. */
  export const outboundSchema = DrainsStatus$outboundSchema;
}

/** @internal */
export const DrainsDisabledReason$inboundSchema: z.ZodNativeEnum<
  typeof DrainsDisabledReason
> = z.nativeEnum(DrainsDisabledReason);

/** @internal */
export const DrainsDisabledReason$outboundSchema: z.ZodNativeEnum<
  typeof DrainsDisabledReason
> = DrainsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsDisabledReason$ {
  /** @deprecated use `DrainsDisabledReason$inboundSchema` instead. */
  export const inboundSchema = DrainsDisabledReason$inboundSchema;
  /** @deprecated use `DrainsDisabledReason$outboundSchema` instead. */
  export const outboundSchema = DrainsDisabledReason$outboundSchema;
}

/** @internal */
export const GetDrainsSourceDrainsKind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsSourceDrainsKind
> = z.nativeEnum(GetDrainsSourceDrainsKind);

/** @internal */
export const GetDrainsSourceDrainsKind$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsSourceDrainsKind
> = GetDrainsSourceDrainsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSourceDrainsKind$ {
  /** @deprecated use `GetDrainsSourceDrainsKind$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSourceDrainsKind$inboundSchema;
  /** @deprecated use `GetDrainsSourceDrainsKind$outboundSchema` instead. */
  export const outboundSchema = GetDrainsSourceDrainsKind$outboundSchema;
}

/** @internal */
export const GetDrainsSource2$inboundSchema: z.ZodType<
  GetDrainsSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainsSourceDrainsKind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetDrainsSource2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const GetDrainsSource2$outboundSchema: z.ZodType<
  GetDrainsSource2$Outbound,
  z.ZodTypeDef,
  GetDrainsSource2
> = z.object({
  kind: GetDrainsSourceDrainsKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSource2$ {
  /** @deprecated use `GetDrainsSource2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSource2$inboundSchema;
  /** @deprecated use `GetDrainsSource2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsSource2$outboundSchema;
  /** @deprecated use `GetDrainsSource2$Outbound` instead. */
  export type Outbound = GetDrainsSource2$Outbound;
}

export function getDrainsSource2ToJSON(
  getDrainsSource2: GetDrainsSource2,
): string {
  return JSON.stringify(
    GetDrainsSource2$outboundSchema.parse(getDrainsSource2),
  );
}

export function getDrainsSource2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsSource2' from JSON`,
  );
}

/** @internal */
export const GetDrainsSourceKind$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsSourceKind
> = z.nativeEnum(GetDrainsSourceKind);

/** @internal */
export const GetDrainsSourceKind$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsSourceKind
> = GetDrainsSourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSourceKind$ {
  /** @deprecated use `GetDrainsSourceKind$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSourceKind$inboundSchema;
  /** @deprecated use `GetDrainsSourceKind$outboundSchema` instead. */
  export const outboundSchema = GetDrainsSourceKind$outboundSchema;
}

/** @internal */
export const GetDrainsSource1$inboundSchema: z.ZodType<
  GetDrainsSource1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: GetDrainsSourceKind$inboundSchema,
});

/** @internal */
export type GetDrainsSource1$Outbound = {
  kind: string;
};

/** @internal */
export const GetDrainsSource1$outboundSchema: z.ZodType<
  GetDrainsSource1$Outbound,
  z.ZodTypeDef,
  GetDrainsSource1
> = z.object({
  kind: GetDrainsSourceKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsSource1$ {
  /** @deprecated use `GetDrainsSource1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsSource1$inboundSchema;
  /** @deprecated use `GetDrainsSource1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsSource1$outboundSchema;
  /** @deprecated use `GetDrainsSource1$Outbound` instead. */
  export type Outbound = GetDrainsSource1$Outbound;
}

export function getDrainsSource1ToJSON(
  getDrainsSource1: GetDrainsSource1,
): string {
  return JSON.stringify(
    GetDrainsSource1$outboundSchema.parse(getDrainsSource1),
  );
}

export function getDrainsSource1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsSource1' from JSON`,
  );
}

/** @internal */
export const DrainsSource$inboundSchema: z.ZodType<
  DrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsSource2$inboundSchema),
  z.lazy(() => GetDrainsSource1$inboundSchema),
]);

/** @internal */
export type DrainsSource$Outbound =
  | GetDrainsSource2$Outbound
  | GetDrainsSource1$Outbound;

/** @internal */
export const DrainsSource$outboundSchema: z.ZodType<
  DrainsSource$Outbound,
  z.ZodTypeDef,
  DrainsSource
> = z.union([
  z.lazy(() => GetDrainsSource2$outboundSchema),
  z.lazy(() => GetDrainsSource1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsSource$ {
  /** @deprecated use `DrainsSource$inboundSchema` instead. */
  export const inboundSchema = DrainsSource$inboundSchema;
  /** @deprecated use `DrainsSource$outboundSchema` instead. */
  export const outboundSchema = DrainsSource$outboundSchema;
  /** @deprecated use `DrainsSource$Outbound` instead. */
  export type Outbound = DrainsSource$Outbound;
}

export function drainsSourceToJSON(drainsSource: DrainsSource): string {
  return JSON.stringify(DrainsSource$outboundSchema.parse(drainsSource));
}

export function drainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<DrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsSource' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2DrainsVersion$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterV2DrainsVersion
> = z.nativeEnum(GetDrainsFilterV2DrainsVersion);

/** @internal */
export const GetDrainsFilterV2DrainsVersion$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterV2DrainsVersion
> = GetDrainsFilterV2DrainsVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2DrainsVersion$ {
  /** @deprecated use `GetDrainsFilterV2DrainsVersion$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV2DrainsVersion$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2DrainsVersion$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV2DrainsVersion$outboundSchema;
}

/** @internal */
export const GetDrainsFilterDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterDrainsType
> = z.nativeEnum(GetDrainsFilterDrainsType);

/** @internal */
export const GetDrainsFilterDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterDrainsType
> = GetDrainsFilterDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDrainsType$ {
  /** @deprecated use `GetDrainsFilterDrainsType$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDrainsType$inboundSchema;
  /** @deprecated use `GetDrainsFilterDrainsType$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDrainsType$outboundSchema;
}

/** @internal */
export const GetDrainsFilter2$inboundSchema: z.ZodType<
  GetDrainsFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsFilterDrainsType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type GetDrainsFilter2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const GetDrainsFilter2$outboundSchema: z.ZodType<
  GetDrainsFilter2$Outbound,
  z.ZodTypeDef,
  GetDrainsFilter2
> = z.object({
  type: GetDrainsFilterDrainsType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilter2$ {
  /** @deprecated use `GetDrainsFilter2$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilter2$inboundSchema;
  /** @deprecated use `GetDrainsFilter2$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilter2$outboundSchema;
  /** @deprecated use `GetDrainsFilter2$Outbound` instead. */
  export type Outbound = GetDrainsFilter2$Outbound;
}

export function getDrainsFilter2ToJSON(
  getDrainsFilter2: GetDrainsFilter2,
): string {
  return JSON.stringify(
    GetDrainsFilter2$outboundSchema.parse(getDrainsFilter2),
  );
}

export function getDrainsFilter2FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilter2' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterType$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterType
> = z.nativeEnum(GetDrainsFilterType);

/** @internal */
export const GetDrainsFilterType$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterType
> = GetDrainsFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterType$ {
  /** @deprecated use `GetDrainsFilterType$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterType$inboundSchema;
  /** @deprecated use `GetDrainsFilterType$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterType$outboundSchema;
}

/** @internal */
export const GetDrainsFilterProject$inboundSchema: z.ZodType<
  GetDrainsFilterProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainsFilterProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const GetDrainsFilterProject$outboundSchema: z.ZodType<
  GetDrainsFilterProject$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterProject$ {
  /** @deprecated use `GetDrainsFilterProject$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterProject$inboundSchema;
  /** @deprecated use `GetDrainsFilterProject$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterProject$outboundSchema;
  /** @deprecated use `GetDrainsFilterProject$Outbound` instead. */
  export type Outbound = GetDrainsFilterProject$Outbound;
}

export function getDrainsFilterProjectToJSON(
  getDrainsFilterProject: GetDrainsFilterProject,
): string {
  return JSON.stringify(
    GetDrainsFilterProject$outboundSchema.parse(getDrainsFilterProject),
  );
}

export function getDrainsFilterProjectFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterProject' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterLog$inboundSchema: z.ZodType<
  GetDrainsFilterLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainsFilterLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const GetDrainsFilterLog$outboundSchema: z.ZodType<
  GetDrainsFilterLog$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterLog$ {
  /** @deprecated use `GetDrainsFilterLog$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterLog$inboundSchema;
  /** @deprecated use `GetDrainsFilterLog$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterLog$outboundSchema;
  /** @deprecated use `GetDrainsFilterLog$Outbound` instead. */
  export type Outbound = GetDrainsFilterLog$Outbound;
}

export function getDrainsFilterLogToJSON(
  getDrainsFilterLog: GetDrainsFilterLog,
): string {
  return JSON.stringify(
    GetDrainsFilterLog$outboundSchema.parse(getDrainsFilterLog),
  );
}

export function getDrainsFilterLogFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterLog' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterDeployment$inboundSchema: z.ZodType<
  GetDrainsFilterDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type GetDrainsFilterDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const GetDrainsFilterDeployment$outboundSchema: z.ZodType<
  GetDrainsFilterDeployment$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterDeployment$ {
  /** @deprecated use `GetDrainsFilterDeployment$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterDeployment$inboundSchema;
  /** @deprecated use `GetDrainsFilterDeployment$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterDeployment$outboundSchema;
  /** @deprecated use `GetDrainsFilterDeployment$Outbound` instead. */
  export type Outbound = GetDrainsFilterDeployment$Outbound;
}

export function getDrainsFilterDeploymentToJSON(
  getDrainsFilterDeployment: GetDrainsFilterDeployment,
): string {
  return JSON.stringify(
    GetDrainsFilterDeployment$outboundSchema.parse(getDrainsFilterDeployment),
  );
}

export function getDrainsFilterDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterDeployment' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilter1$inboundSchema: z.ZodType<
  GetDrainsFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetDrainsFilterType$inboundSchema,
  project: z.lazy(() => GetDrainsFilterProject$inboundSchema).optional(),
  log: z.lazy(() => GetDrainsFilterLog$inboundSchema).optional(),
  deployment: z.lazy(() => GetDrainsFilterDeployment$inboundSchema).optional(),
});

/** @internal */
export type GetDrainsFilter1$Outbound = {
  type: string;
  project?: GetDrainsFilterProject$Outbound | undefined;
  log?: GetDrainsFilterLog$Outbound | undefined;
  deployment?: GetDrainsFilterDeployment$Outbound | undefined;
};

/** @internal */
export const GetDrainsFilter1$outboundSchema: z.ZodType<
  GetDrainsFilter1$Outbound,
  z.ZodTypeDef,
  GetDrainsFilter1
> = z.object({
  type: GetDrainsFilterType$outboundSchema,
  project: z.lazy(() => GetDrainsFilterProject$outboundSchema).optional(),
  log: z.lazy(() => GetDrainsFilterLog$outboundSchema).optional(),
  deployment: z.lazy(() => GetDrainsFilterDeployment$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilter1$ {
  /** @deprecated use `GetDrainsFilter1$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilter1$inboundSchema;
  /** @deprecated use `GetDrainsFilter1$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilter1$outboundSchema;
  /** @deprecated use `GetDrainsFilter1$Outbound` instead. */
  export type Outbound = GetDrainsFilter1$Outbound;
}

export function getDrainsFilter1ToJSON(
  getDrainsFilter1: GetDrainsFilter1,
): string {
  return JSON.stringify(
    GetDrainsFilter1$outboundSchema.parse(getDrainsFilter1),
  );
}

export function getDrainsFilter1FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilter1' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2Filter$inboundSchema: z.ZodType<
  GetDrainsFilterV2Filter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsFilter2$inboundSchema),
  z.lazy(() => GetDrainsFilter1$inboundSchema),
]);

/** @internal */
export type GetDrainsFilterV2Filter$Outbound =
  | GetDrainsFilter2$Outbound
  | GetDrainsFilter1$Outbound;

/** @internal */
export const GetDrainsFilterV2Filter$outboundSchema: z.ZodType<
  GetDrainsFilterV2Filter$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterV2Filter
> = z.union([
  z.lazy(() => GetDrainsFilter2$outboundSchema),
  z.lazy(() => GetDrainsFilter1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2Filter$ {
  /** @deprecated use `GetDrainsFilterV2Filter$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV2Filter$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2Filter$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV2Filter$outboundSchema;
  /** @deprecated use `GetDrainsFilterV2Filter$Outbound` instead. */
  export type Outbound = GetDrainsFilterV2Filter$Outbound;
}

export function getDrainsFilterV2FilterToJSON(
  getDrainsFilterV2Filter: GetDrainsFilterV2Filter,
): string {
  return JSON.stringify(
    GetDrainsFilterV2Filter$outboundSchema.parse(getDrainsFilterV2Filter),
  );
}

export function getDrainsFilterV2FilterFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterV2Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterV2Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterV2Filter' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV22$inboundSchema: z.ZodType<
  GetDrainsFilterV22,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainsFilterV2DrainsVersion$inboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainsFilter2$inboundSchema),
    z.lazy(() => GetDrainsFilter1$inboundSchema),
  ]),
});

/** @internal */
export type GetDrainsFilterV22$Outbound = {
  version: string;
  filter: GetDrainsFilter2$Outbound | GetDrainsFilter1$Outbound;
};

/** @internal */
export const GetDrainsFilterV22$outboundSchema: z.ZodType<
  GetDrainsFilterV22$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterV22
> = z.object({
  version: GetDrainsFilterV2DrainsVersion$outboundSchema,
  filter: z.union([
    z.lazy(() => GetDrainsFilter2$outboundSchema),
    z.lazy(() => GetDrainsFilter1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV22$ {
  /** @deprecated use `GetDrainsFilterV22$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV22$inboundSchema;
  /** @deprecated use `GetDrainsFilterV22$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV22$outboundSchema;
  /** @deprecated use `GetDrainsFilterV22$Outbound` instead. */
  export type Outbound = GetDrainsFilterV22$Outbound;
}

export function getDrainsFilterV22ToJSON(
  getDrainsFilterV22: GetDrainsFilterV22,
): string {
  return JSON.stringify(
    GetDrainsFilterV22$outboundSchema.parse(getDrainsFilterV22),
  );
}

export function getDrainsFilterV22FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterV22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterV22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterV22' from JSON`,
  );
}

/** @internal */
export const GetDrainsFilterV2Version$inboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterV2Version
> = z.nativeEnum(GetDrainsFilterV2Version);

/** @internal */
export const GetDrainsFilterV2Version$outboundSchema: z.ZodNativeEnum<
  typeof GetDrainsFilterV2Version
> = GetDrainsFilterV2Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV2Version$ {
  /** @deprecated use `GetDrainsFilterV2Version$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV2Version$inboundSchema;
  /** @deprecated use `GetDrainsFilterV2Version$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV2Version$outboundSchema;
}

/** @internal */
export const GetDrainsFilterV21$inboundSchema: z.ZodType<
  GetDrainsFilterV21,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: GetDrainsFilterV2Version$inboundSchema,
});

/** @internal */
export type GetDrainsFilterV21$Outbound = {
  version: string;
};

/** @internal */
export const GetDrainsFilterV21$outboundSchema: z.ZodType<
  GetDrainsFilterV21$Outbound,
  z.ZodTypeDef,
  GetDrainsFilterV21
> = z.object({
  version: GetDrainsFilterV2Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsFilterV21$ {
  /** @deprecated use `GetDrainsFilterV21$inboundSchema` instead. */
  export const inboundSchema = GetDrainsFilterV21$inboundSchema;
  /** @deprecated use `GetDrainsFilterV21$outboundSchema` instead. */
  export const outboundSchema = GetDrainsFilterV21$outboundSchema;
  /** @deprecated use `GetDrainsFilterV21$Outbound` instead. */
  export type Outbound = GetDrainsFilterV21$Outbound;
}

export function getDrainsFilterV21ToJSON(
  getDrainsFilterV21: GetDrainsFilterV21,
): string {
  return JSON.stringify(
    GetDrainsFilterV21$outboundSchema.parse(getDrainsFilterV21),
  );
}

export function getDrainsFilterV21FromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsFilterV21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsFilterV21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsFilterV21' from JSON`,
  );
}

/** @internal */
export const DrainsFilterV2$inboundSchema: z.ZodType<
  DrainsFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetDrainsFilterV22$inboundSchema),
  z.lazy(() => GetDrainsFilterV21$inboundSchema),
]);

/** @internal */
export type DrainsFilterV2$Outbound =
  | GetDrainsFilterV22$Outbound
  | GetDrainsFilterV21$Outbound;

/** @internal */
export const DrainsFilterV2$outboundSchema: z.ZodType<
  DrainsFilterV2$Outbound,
  z.ZodTypeDef,
  DrainsFilterV2
> = z.union([
  z.lazy(() => GetDrainsFilterV22$outboundSchema),
  z.lazy(() => GetDrainsFilterV21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DrainsFilterV2$ {
  /** @deprecated use `DrainsFilterV2$inboundSchema` instead. */
  export const inboundSchema = DrainsFilterV2$inboundSchema;
  /** @deprecated use `DrainsFilterV2$outboundSchema` instead. */
  export const outboundSchema = DrainsFilterV2$outboundSchema;
  /** @deprecated use `DrainsFilterV2$Outbound` instead. */
  export type Outbound = DrainsFilterV2$Outbound;
}

export function drainsFilterV2ToJSON(drainsFilterV2: DrainsFilterV2): string {
  return JSON.stringify(DrainsFilterV2$outboundSchema.parse(drainsFilterV2));
}

export function drainsFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<DrainsFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DrainsFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DrainsFilterV2' from JSON`,
  );
}

/** @internal */
export const Drains1$inboundSchema: z.ZodType<Drains1, z.ZodTypeDef, unknown> =
  z.object({
    id: z.string(),
    ownerId: z.string(),
    name: z.string(),
    createdAt: z.number(),
    createdFrom: DrainsCreatedFrom$inboundSchema.optional(),
    updatedAt: z.number(),
    projectIds: z.array(z.string()).optional(),
    schemas: z.lazy(() => DrainsSchemas$inboundSchema).optional(),
    delivery: z.union([
      z.lazy(() => GetDrainsDelivery1$inboundSchema),
      z.lazy(() => GetDrainsDelivery2$inboundSchema),
      z.lazy(() => GetDrainsDelivery3$inboundSchema),
      z.lazy(() => GetDrainsDelivery4$inboundSchema),
      z.lazy(() => GetDrainsDelivery5$inboundSchema),
    ]).optional(),
    sampling: z.array(z.lazy(() => DrainsSampling$inboundSchema)).optional(),
    teamId: z.nullable(z.string()).optional(),
    status: DrainsStatus$inboundSchema.optional(),
    disabledAt: z.number().optional(),
    disabledReason: DrainsDisabledReason$inboundSchema.optional(),
    disabledBy: z.string().optional(),
    firstErrorTimestamp: z.number().optional(),
    configurationId: z.string().optional(),
    clientId: z.string().optional(),
    source: z.union([
      z.lazy(() => GetDrainsSource2$inboundSchema),
      z.lazy(() => GetDrainsSource1$inboundSchema),
    ]),
    filter: z.string().optional(),
    filterV2: z.union([
      z.lazy(() => GetDrainsFilterV22$inboundSchema),
      z.lazy(() => GetDrainsFilterV21$inboundSchema),
    ]).optional(),
  });

/** @internal */
export type Drains1$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: DrainsSchemas$Outbound | undefined;
  delivery?:
    | GetDrainsDelivery1$Outbound
    | GetDrainsDelivery2$Outbound
    | GetDrainsDelivery3$Outbound
    | GetDrainsDelivery4$Outbound
    | GetDrainsDelivery5$Outbound
    | undefined;
  sampling?: Array<DrainsSampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: GetDrainsSource2$Outbound | GetDrainsSource1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | GetDrainsFilterV22$Outbound
    | GetDrainsFilterV21$Outbound
    | undefined;
};

/** @internal */
export const Drains1$outboundSchema: z.ZodType<
  Drains1$Outbound,
  z.ZodTypeDef,
  Drains1
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: DrainsCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => DrainsSchemas$outboundSchema).optional(),
  delivery: z.union([
    z.lazy(() => GetDrainsDelivery1$outboundSchema),
    z.lazy(() => GetDrainsDelivery2$outboundSchema),
    z.lazy(() => GetDrainsDelivery3$outboundSchema),
    z.lazy(() => GetDrainsDelivery4$outboundSchema),
    z.lazy(() => GetDrainsDelivery5$outboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => DrainsSampling$outboundSchema)).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: DrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: DrainsDisabledReason$outboundSchema.optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => GetDrainsSource2$outboundSchema),
    z.lazy(() => GetDrainsSource1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => GetDrainsFilterV22$outboundSchema),
    z.lazy(() => GetDrainsFilterV21$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drains1$ {
  /** @deprecated use `Drains1$inboundSchema` instead. */
  export const inboundSchema = Drains1$inboundSchema;
  /** @deprecated use `Drains1$outboundSchema` instead. */
  export const outboundSchema = Drains1$outboundSchema;
  /** @deprecated use `Drains1$Outbound` instead. */
  export type Outbound = Drains1$Outbound;
}

export function drains1ToJSON(drains1: Drains1): string {
  return JSON.stringify(Drains1$outboundSchema.parse(drains1));
}

export function drains1FromJSON(
  jsonString: string,
): SafeParseResult<Drains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Drains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Drains1' from JSON`,
  );
}

/** @internal */
export const Drains$inboundSchema: z.ZodType<Drains, z.ZodTypeDef, unknown> = z
  .union([
    z.array(z.lazy(() => Drains1$inboundSchema)),
    z.array(z.lazy(() => Drains2$inboundSchema)),
  ]);

/** @internal */
export type Drains$Outbound = Array<Drains1$Outbound> | Array<Drains2$Outbound>;

/** @internal */
export const Drains$outboundSchema: z.ZodType<
  Drains$Outbound,
  z.ZodTypeDef,
  Drains
> = z.union([
  z.array(z.lazy(() => Drains1$outboundSchema)),
  z.array(z.lazy(() => Drains2$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Drains$ {
  /** @deprecated use `Drains$inboundSchema` instead. */
  export const inboundSchema = Drains$inboundSchema;
  /** @deprecated use `Drains$outboundSchema` instead. */
  export const outboundSchema = Drains$outboundSchema;
  /** @deprecated use `Drains$Outbound` instead. */
  export type Outbound = Drains$Outbound;
}

export function drainsToJSON(drains: Drains): string {
  return JSON.stringify(Drains$outboundSchema.parse(drains));
}

export function drainsFromJSON(
  jsonString: string,
): SafeParseResult<Drains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Drains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Drains' from JSON`,
  );
}

/** @internal */
export const GetDrainsResponseBody$inboundSchema: z.ZodType<
  GetDrainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  drains: z.union([
    z.array(z.lazy(() => Drains1$inboundSchema)),
    z.array(z.lazy(() => Drains2$inboundSchema)),
  ]),
});

/** @internal */
export type GetDrainsResponseBody$Outbound = {
  drains: Array<Drains1$Outbound> | Array<Drains2$Outbound>;
};

/** @internal */
export const GetDrainsResponseBody$outboundSchema: z.ZodType<
  GetDrainsResponseBody$Outbound,
  z.ZodTypeDef,
  GetDrainsResponseBody
> = z.object({
  drains: z.union([
    z.array(z.lazy(() => Drains1$outboundSchema)),
    z.array(z.lazy(() => Drains2$outboundSchema)),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetDrainsResponseBody$ {
  /** @deprecated use `GetDrainsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetDrainsResponseBody$inboundSchema;
  /** @deprecated use `GetDrainsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetDrainsResponseBody$outboundSchema;
  /** @deprecated use `GetDrainsResponseBody$Outbound` instead. */
  export type Outbound = GetDrainsResponseBody$Outbound;
}

export function getDrainsResponseBodyToJSON(
  getDrainsResponseBody: GetDrainsResponseBody,
): string {
  return JSON.stringify(
    GetDrainsResponseBody$outboundSchema.parse(getDrainsResponseBody),
  );
}

export function getDrainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetDrainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetDrainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetDrainsResponseBody' from JSON`,
  );
}
