/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetIntegrationLogDrainsRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * The delivery log format
 */
export const GetIntegrationLogDrainsDeliveryFormat = {
  Json: "json",
  Ndjson: "ndjson",
  Syslog: "syslog",
  Protobuf: "protobuf",
} as const;
/**
 * The delivery log format
 */
export type GetIntegrationLogDrainsDeliveryFormat = ClosedEnum<
  typeof GetIntegrationLogDrainsDeliveryFormat
>;

/**
 * The sources from which logs are currently being delivered to this log drain.
 */
export const GetIntegrationLogDrainsSources = {
  Build: "build",
  Edge: "edge",
  Lambda: "lambda",
  Static: "static",
  External: "external",
  Firewall: "firewall",
} as const;
/**
 * The sources from which logs are currently being delivered to this log drain.
 */
export type GetIntegrationLogDrainsSources = ClosedEnum<
  typeof GetIntegrationLogDrainsSources
>;

/**
 * Whether the log drain was created by an integration or by a user
 */
export const CreatedFrom = {
  Integration: "integration",
  SelfServed: "self-served",
} as const;
/**
 * Whether the log drain was created by an integration or by a user
 */
export type CreatedFrom = ClosedEnum<typeof CreatedFrom>;

/**
 * The environment of log drain
 */
export const GetIntegrationLogDrainsEnvironments = {
  Production: "production",
  Preview: "preview",
} as const;
/**
 * The environment of log drain
 */
export type GetIntegrationLogDrainsEnvironments = ClosedEnum<
  typeof GetIntegrationLogDrainsEnvironments
>;

export const SourceKind = {
  Integration: "integration",
} as const;
export type SourceKind = ClosedEnum<typeof SourceKind>;

export type Source2 = {
  kind: SourceKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const Kind = {
  SelfServed: "self-served",
} as const;
export type Kind = ClosedEnum<typeof Kind>;

export type Source1 = {
  kind: Kind;
};

export type GetIntegrationLogDrainsSource = Source2 | Source1;

export type GetIntegrationLogDrainsResponseBody = {
  /**
   * The oauth2 client application id that created this log drain
   */
  clientId?: string | undefined;
  /**
   * The client configuration this log drain was created with
   */
  configurationId?: string | undefined;
  /**
   * A timestamp that tells you when the log drain was created
   */
  createdAt: number;
  /**
   * The unique identifier of the log drain. Always prefixed with `ld_`
   */
  id: string;
  /**
   * The delivery log format
   */
  deliveryFormat?: GetIntegrationLogDrainsDeliveryFormat | undefined;
  /**
   * The name of the log drain
   */
  name: string;
  /**
   * The identifier of the team or user whose events will trigger the log drain
   */
  ownerId: string;
  projectId?: string | null | undefined;
  /**
   * The identifier of the projects this log drain is associated with
   */
  projectIds?: Array<string> | undefined;
  /**
   * The URL to call when logs are generated
   */
  url: string;
  /**
   * The sources from which logs are currently being delivered to this log drain.
   */
  sources?: Array<GetIntegrationLogDrainsSources> | undefined;
  /**
   * Whether the log drain was created by an integration or by a user
   */
  createdFrom?: CreatedFrom | undefined;
  /**
   * The headers to send with the request
   */
  headers?: { [k: string]: string } | undefined;
  /**
   * The environment of log drain
   */
  environments?: Array<GetIntegrationLogDrainsEnvironments> | undefined;
  /**
   * The branch regexp of log drain
   */
  branch?: string | undefined;
  /**
   * The sampling rate of log drain
   */
  samplingRate?: number | undefined;
  source: Source2 | Source1;
};

/** @internal */
export const GetIntegrationLogDrainsRequest$inboundSchema: z.ZodType<
  GetIntegrationLogDrainsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetIntegrationLogDrainsRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetIntegrationLogDrainsRequest$outboundSchema: z.ZodType<
  GetIntegrationLogDrainsRequest$Outbound,
  z.ZodTypeDef,
  GetIntegrationLogDrainsRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationLogDrainsRequest$ {
  /** @deprecated use `GetIntegrationLogDrainsRequest$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationLogDrainsRequest$inboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsRequest$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationLogDrainsRequest$outboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsRequest$Outbound` instead. */
  export type Outbound = GetIntegrationLogDrainsRequest$Outbound;
}

export function getIntegrationLogDrainsRequestToJSON(
  getIntegrationLogDrainsRequest: GetIntegrationLogDrainsRequest,
): string {
  return JSON.stringify(
    GetIntegrationLogDrainsRequest$outboundSchema.parse(
      getIntegrationLogDrainsRequest,
    ),
  );
}

export function getIntegrationLogDrainsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationLogDrainsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationLogDrainsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationLogDrainsRequest' from JSON`,
  );
}

/** @internal */
export const GetIntegrationLogDrainsDeliveryFormat$inboundSchema:
  z.ZodNativeEnum<typeof GetIntegrationLogDrainsDeliveryFormat> = z.nativeEnum(
    GetIntegrationLogDrainsDeliveryFormat,
  );

/** @internal */
export const GetIntegrationLogDrainsDeliveryFormat$outboundSchema:
  z.ZodNativeEnum<typeof GetIntegrationLogDrainsDeliveryFormat> =
    GetIntegrationLogDrainsDeliveryFormat$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationLogDrainsDeliveryFormat$ {
  /** @deprecated use `GetIntegrationLogDrainsDeliveryFormat$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationLogDrainsDeliveryFormat$inboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsDeliveryFormat$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationLogDrainsDeliveryFormat$outboundSchema;
}

/** @internal */
export const GetIntegrationLogDrainsSources$inboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationLogDrainsSources
> = z.nativeEnum(GetIntegrationLogDrainsSources);

/** @internal */
export const GetIntegrationLogDrainsSources$outboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationLogDrainsSources
> = GetIntegrationLogDrainsSources$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationLogDrainsSources$ {
  /** @deprecated use `GetIntegrationLogDrainsSources$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationLogDrainsSources$inboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsSources$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationLogDrainsSources$outboundSchema;
}

/** @internal */
export const CreatedFrom$inboundSchema: z.ZodNativeEnum<typeof CreatedFrom> = z
  .nativeEnum(CreatedFrom);

/** @internal */
export const CreatedFrom$outboundSchema: z.ZodNativeEnum<typeof CreatedFrom> =
  CreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreatedFrom$ {
  /** @deprecated use `CreatedFrom$inboundSchema` instead. */
  export const inboundSchema = CreatedFrom$inboundSchema;
  /** @deprecated use `CreatedFrom$outboundSchema` instead. */
  export const outboundSchema = CreatedFrom$outboundSchema;
}

/** @internal */
export const GetIntegrationLogDrainsEnvironments$inboundSchema: z.ZodNativeEnum<
  typeof GetIntegrationLogDrainsEnvironments
> = z.nativeEnum(GetIntegrationLogDrainsEnvironments);

/** @internal */
export const GetIntegrationLogDrainsEnvironments$outboundSchema:
  z.ZodNativeEnum<typeof GetIntegrationLogDrainsEnvironments> =
    GetIntegrationLogDrainsEnvironments$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationLogDrainsEnvironments$ {
  /** @deprecated use `GetIntegrationLogDrainsEnvironments$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationLogDrainsEnvironments$inboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsEnvironments$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationLogDrainsEnvironments$outboundSchema;
}

/** @internal */
export const SourceKind$inboundSchema: z.ZodNativeEnum<typeof SourceKind> = z
  .nativeEnum(SourceKind);

/** @internal */
export const SourceKind$outboundSchema: z.ZodNativeEnum<typeof SourceKind> =
  SourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SourceKind$ {
  /** @deprecated use `SourceKind$inboundSchema` instead. */
  export const inboundSchema = SourceKind$inboundSchema;
  /** @deprecated use `SourceKind$outboundSchema` instead. */
  export const outboundSchema = SourceKind$outboundSchema;
}

/** @internal */
export const Source2$inboundSchema: z.ZodType<Source2, z.ZodTypeDef, unknown> =
  z.object({
    kind: SourceKind$inboundSchema,
    resourceId: z.string().optional(),
    externalResourceId: z.string().optional(),
    integrationId: z.string(),
    integrationConfigurationId: z.string(),
  });

/** @internal */
export type Source2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const Source2$outboundSchema: z.ZodType<
  Source2$Outbound,
  z.ZodTypeDef,
  Source2
> = z.object({
  kind: SourceKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source2$ {
  /** @deprecated use `Source2$inboundSchema` instead. */
  export const inboundSchema = Source2$inboundSchema;
  /** @deprecated use `Source2$outboundSchema` instead. */
  export const outboundSchema = Source2$outboundSchema;
  /** @deprecated use `Source2$Outbound` instead. */
  export type Outbound = Source2$Outbound;
}

export function source2ToJSON(source2: Source2): string {
  return JSON.stringify(Source2$outboundSchema.parse(source2));
}

export function source2FromJSON(
  jsonString: string,
): SafeParseResult<Source2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Source2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Source2' from JSON`,
  );
}

/** @internal */
export const Kind$inboundSchema: z.ZodNativeEnum<typeof Kind> = z.nativeEnum(
  Kind,
);

/** @internal */
export const Kind$outboundSchema: z.ZodNativeEnum<typeof Kind> =
  Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Kind$ {
  /** @deprecated use `Kind$inboundSchema` instead. */
  export const inboundSchema = Kind$inboundSchema;
  /** @deprecated use `Kind$outboundSchema` instead. */
  export const outboundSchema = Kind$outboundSchema;
}

/** @internal */
export const Source1$inboundSchema: z.ZodType<Source1, z.ZodTypeDef, unknown> =
  z.object({
    kind: Kind$inboundSchema,
  });

/** @internal */
export type Source1$Outbound = {
  kind: string;
};

/** @internal */
export const Source1$outboundSchema: z.ZodType<
  Source1$Outbound,
  z.ZodTypeDef,
  Source1
> = z.object({
  kind: Kind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Source1$ {
  /** @deprecated use `Source1$inboundSchema` instead. */
  export const inboundSchema = Source1$inboundSchema;
  /** @deprecated use `Source1$outboundSchema` instead. */
  export const outboundSchema = Source1$outboundSchema;
  /** @deprecated use `Source1$Outbound` instead. */
  export type Outbound = Source1$Outbound;
}

export function source1ToJSON(source1: Source1): string {
  return JSON.stringify(Source1$outboundSchema.parse(source1));
}

export function source1FromJSON(
  jsonString: string,
): SafeParseResult<Source1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Source1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Source1' from JSON`,
  );
}

/** @internal */
export const GetIntegrationLogDrainsSource$inboundSchema: z.ZodType<
  GetIntegrationLogDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Source2$inboundSchema),
  z.lazy(() => Source1$inboundSchema),
]);

/** @internal */
export type GetIntegrationLogDrainsSource$Outbound =
  | Source2$Outbound
  | Source1$Outbound;

/** @internal */
export const GetIntegrationLogDrainsSource$outboundSchema: z.ZodType<
  GetIntegrationLogDrainsSource$Outbound,
  z.ZodTypeDef,
  GetIntegrationLogDrainsSource
> = z.union([
  z.lazy(() => Source2$outboundSchema),
  z.lazy(() => Source1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationLogDrainsSource$ {
  /** @deprecated use `GetIntegrationLogDrainsSource$inboundSchema` instead. */
  export const inboundSchema = GetIntegrationLogDrainsSource$inboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsSource$outboundSchema` instead. */
  export const outboundSchema = GetIntegrationLogDrainsSource$outboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsSource$Outbound` instead. */
  export type Outbound = GetIntegrationLogDrainsSource$Outbound;
}

export function getIntegrationLogDrainsSourceToJSON(
  getIntegrationLogDrainsSource: GetIntegrationLogDrainsSource,
): string {
  return JSON.stringify(
    GetIntegrationLogDrainsSource$outboundSchema.parse(
      getIntegrationLogDrainsSource,
    ),
  );
}

export function getIntegrationLogDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationLogDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetIntegrationLogDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationLogDrainsSource' from JSON`,
  );
}

/** @internal */
export const GetIntegrationLogDrainsResponseBody$inboundSchema: z.ZodType<
  GetIntegrationLogDrainsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  createdAt: z.number(),
  id: z.string(),
  deliveryFormat: GetIntegrationLogDrainsDeliveryFormat$inboundSchema
    .optional(),
  name: z.string(),
  ownerId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  url: z.string(),
  sources: z.array(GetIntegrationLogDrainsSources$inboundSchema).optional(),
  createdFrom: CreatedFrom$inboundSchema.optional(),
  headers: z.record(z.string()).optional(),
  environments: z.array(GetIntegrationLogDrainsEnvironments$inboundSchema)
    .optional(),
  branch: z.string().optional(),
  samplingRate: z.number().optional(),
  source: z.union([
    z.lazy(() => Source2$inboundSchema),
    z.lazy(() => Source1$inboundSchema),
  ]),
});

/** @internal */
export type GetIntegrationLogDrainsResponseBody$Outbound = {
  clientId?: string | undefined;
  configurationId?: string | undefined;
  createdAt: number;
  id: string;
  deliveryFormat?: string | undefined;
  name: string;
  ownerId: string;
  projectId?: string | null | undefined;
  projectIds?: Array<string> | undefined;
  url: string;
  sources?: Array<string> | undefined;
  createdFrom?: string | undefined;
  headers?: { [k: string]: string } | undefined;
  environments?: Array<string> | undefined;
  branch?: string | undefined;
  samplingRate?: number | undefined;
  source: Source2$Outbound | Source1$Outbound;
};

/** @internal */
export const GetIntegrationLogDrainsResponseBody$outboundSchema: z.ZodType<
  GetIntegrationLogDrainsResponseBody$Outbound,
  z.ZodTypeDef,
  GetIntegrationLogDrainsResponseBody
> = z.object({
  clientId: z.string().optional(),
  configurationId: z.string().optional(),
  createdAt: z.number(),
  id: z.string(),
  deliveryFormat: GetIntegrationLogDrainsDeliveryFormat$outboundSchema
    .optional(),
  name: z.string(),
  ownerId: z.string(),
  projectId: z.nullable(z.string()).optional(),
  projectIds: z.array(z.string()).optional(),
  url: z.string(),
  sources: z.array(GetIntegrationLogDrainsSources$outboundSchema).optional(),
  createdFrom: CreatedFrom$outboundSchema.optional(),
  headers: z.record(z.string()).optional(),
  environments: z.array(GetIntegrationLogDrainsEnvironments$outboundSchema)
    .optional(),
  branch: z.string().optional(),
  samplingRate: z.number().optional(),
  source: z.union([
    z.lazy(() => Source2$outboundSchema),
    z.lazy(() => Source1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetIntegrationLogDrainsResponseBody$ {
  /** @deprecated use `GetIntegrationLogDrainsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetIntegrationLogDrainsResponseBody$inboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetIntegrationLogDrainsResponseBody$outboundSchema;
  /** @deprecated use `GetIntegrationLogDrainsResponseBody$Outbound` instead. */
  export type Outbound = GetIntegrationLogDrainsResponseBody$Outbound;
}

export function getIntegrationLogDrainsResponseBodyToJSON(
  getIntegrationLogDrainsResponseBody: GetIntegrationLogDrainsResponseBody,
): string {
  return JSON.stringify(
    GetIntegrationLogDrainsResponseBody$outboundSchema.parse(
      getIntegrationLogDrainsResponseBody,
    ),
  );
}

export function getIntegrationLogDrainsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetIntegrationLogDrainsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetIntegrationLogDrainsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetIntegrationLogDrainsResponseBody' from JSON`,
  );
}
