/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetOrderRequest = {
  orderId: string;
  teamId?: string | undefined;
};

/**
 * NotAuthorizedForScope
 */
export type GetOrderDomainsRegistrarResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

export const GetOrderDomainsPurchaseType = {
  Transfer: "transfer",
} as const;
export type GetOrderDomainsPurchaseType = ClosedEnum<
  typeof GetOrderDomainsPurchaseType
>;

export const GetOrderDomainsDomainsRegistrarStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
  Refunded: "refunded",
  RefundFailed: "refund-failed",
} as const;
export type GetOrderDomainsDomainsRegistrarStatus = ClosedEnum<
  typeof GetOrderDomainsDomainsRegistrarStatus
>;

export type Domains3 = {
  purchaseType: GetOrderDomainsPurchaseType;
  autoRenew: boolean;
  /**
   * The number of years the domain is being transferred for.
   */
  years: number;
  domainName: string;
  status: GetOrderDomainsDomainsRegistrarStatus;
  /**
   * The price for the domain.
   */
  price: number;
};

export const DomainsPurchaseType = {
  Renewal: "renewal",
} as const;
export type DomainsPurchaseType = ClosedEnum<typeof DomainsPurchaseType>;

export const GetOrderDomainsStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
  Refunded: "refunded",
  RefundFailed: "refund-failed",
} as const;
export type GetOrderDomainsStatus = ClosedEnum<typeof GetOrderDomainsStatus>;

export type Domains2 = {
  purchaseType: DomainsPurchaseType;
  /**
   * The number of years the domain is being renewed for.
   */
  years: number;
  domainName: string;
  status: GetOrderDomainsStatus;
  /**
   * The price for the domain.
   */
  price: number;
};

export const GetOrderDomainsDomainsRegistrarPurchaseType = {
  Purchase: "purchase",
} as const;
export type GetOrderDomainsDomainsRegistrarPurchaseType = ClosedEnum<
  typeof GetOrderDomainsDomainsRegistrarPurchaseType
>;

export const DomainsStatus = {
  Pending: "pending",
  Completed: "completed",
  Failed: "failed",
  Refunded: "refunded",
  RefundFailed: "refund-failed",
} as const;
export type DomainsStatus = ClosedEnum<typeof DomainsStatus>;

export type Domains1 = {
  purchaseType: GetOrderDomainsDomainsRegistrarPurchaseType;
  autoRenew: boolean;
  /**
   * The number of years the domain is being purchased for.
   */
  years: number;
  domainName: string;
  status: DomainsStatus;
  /**
   * The price for the domain.
   */
  price: number;
};

export type GetOrderDomains = Domains1 | Domains3 | Domains2;

export const GetOrderStatus = {
  Draft: "draft",
  Purchasing: "purchasing",
  Completed: "completed",
  Failed: "failed",
} as const;
export type GetOrderStatus = ClosedEnum<typeof GetOrderStatus>;

export const GetOrderErrorDomainsRegistrarResponseCode = {
  UnexpectedError: "unexpected-error",
} as const;
export type GetOrderErrorDomainsRegistrarResponseCode = ClosedEnum<
  typeof GetOrderErrorDomainsRegistrarResponseCode
>;

export type Error4 = {
  code: GetOrderErrorDomainsRegistrarResponseCode;
};

export const GetOrderErrorDomainsRegistrarCode = {
  PriceMismatch: "price-mismatch",
} as const;
export type GetOrderErrorDomainsRegistrarCode = ClosedEnum<
  typeof GetOrderErrorDomainsRegistrarCode
>;

export type ErrorDetails = {
  expectedPrice: number;
  actualPrice?: number | undefined;
};

export type Error3 = {
  code: GetOrderErrorDomainsRegistrarCode;
  details: ErrorDetails;
};

export const GetOrderErrorCode = {
  TldOutage: "tld-outage",
} as const;
export type GetOrderErrorCode = ClosedEnum<typeof GetOrderErrorCode>;

export type Tlds = {
  tldName: string;
  endsAt: string;
};

export type GetOrderErrorDetails = {
  tlds: Array<Tlds>;
};

export type Error2 = {
  code: GetOrderErrorCode;
  details: GetOrderErrorDetails;
};

export const ErrorCode = {
  PaymentFailed: "payment-failed",
} as const;
export type ErrorCode = ClosedEnum<typeof ErrorCode>;

export type Error1 = {
  code: ErrorCode;
};

export type ErrorT = Error2 | Error3 | Error1 | Error4;

/**
 * Success
 */
export type GetOrderResponseBody = {
  orderId: string;
  domains: Array<Domains1 | Domains3 | Domains2>;
  status: GetOrderStatus;
  error?: Error2 | Error3 | Error1 | Error4 | undefined;
};

/** @internal */
export const GetOrderRequest$inboundSchema: z.ZodType<
  GetOrderRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  teamId: z.string().optional(),
});

/** @internal */
export type GetOrderRequest$Outbound = {
  orderId: string;
  teamId?: string | undefined;
};

/** @internal */
export const GetOrderRequest$outboundSchema: z.ZodType<
  GetOrderRequest$Outbound,
  z.ZodTypeDef,
  GetOrderRequest
> = z.object({
  orderId: z.string(),
  teamId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderRequest$ {
  /** @deprecated use `GetOrderRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrderRequest$inboundSchema;
  /** @deprecated use `GetOrderRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrderRequest$outboundSchema;
  /** @deprecated use `GetOrderRequest$Outbound` instead. */
  export type Outbound = GetOrderRequest$Outbound;
}

export function getOrderRequestToJSON(
  getOrderRequest: GetOrderRequest,
): string {
  return JSON.stringify(GetOrderRequest$outboundSchema.parse(getOrderRequest));
}

export function getOrderRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrderRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrderRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrderRequest' from JSON`,
  );
}

/** @internal */
export const GetOrderDomainsRegistrarResponseBody$inboundSchema: z.ZodType<
  GetOrderDomainsRegistrarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type GetOrderDomainsRegistrarResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const GetOrderDomainsRegistrarResponseBody$outboundSchema: z.ZodType<
  GetOrderDomainsRegistrarResponseBody$Outbound,
  z.ZodTypeDef,
  GetOrderDomainsRegistrarResponseBody
> = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderDomainsRegistrarResponseBody$ {
  /** @deprecated use `GetOrderDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetOrderDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `GetOrderDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetOrderDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `GetOrderDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = GetOrderDomainsRegistrarResponseBody$Outbound;
}

export function getOrderDomainsRegistrarResponseBodyToJSON(
  getOrderDomainsRegistrarResponseBody: GetOrderDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    GetOrderDomainsRegistrarResponseBody$outboundSchema.parse(
      getOrderDomainsRegistrarResponseBody,
    ),
  );
}

export function getOrderDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOrderDomainsRegistrarResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetOrderDomainsRegistrarResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrderDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const GetOrderDomainsPurchaseType$inboundSchema: z.ZodNativeEnum<
  typeof GetOrderDomainsPurchaseType
> = z.nativeEnum(GetOrderDomainsPurchaseType);

/** @internal */
export const GetOrderDomainsPurchaseType$outboundSchema: z.ZodNativeEnum<
  typeof GetOrderDomainsPurchaseType
> = GetOrderDomainsPurchaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderDomainsPurchaseType$ {
  /** @deprecated use `GetOrderDomainsPurchaseType$inboundSchema` instead. */
  export const inboundSchema = GetOrderDomainsPurchaseType$inboundSchema;
  /** @deprecated use `GetOrderDomainsPurchaseType$outboundSchema` instead. */
  export const outboundSchema = GetOrderDomainsPurchaseType$outboundSchema;
}

/** @internal */
export const GetOrderDomainsDomainsRegistrarStatus$inboundSchema:
  z.ZodNativeEnum<typeof GetOrderDomainsDomainsRegistrarStatus> = z.nativeEnum(
    GetOrderDomainsDomainsRegistrarStatus,
  );

/** @internal */
export const GetOrderDomainsDomainsRegistrarStatus$outboundSchema:
  z.ZodNativeEnum<typeof GetOrderDomainsDomainsRegistrarStatus> =
    GetOrderDomainsDomainsRegistrarStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderDomainsDomainsRegistrarStatus$ {
  /** @deprecated use `GetOrderDomainsDomainsRegistrarStatus$inboundSchema` instead. */
  export const inboundSchema =
    GetOrderDomainsDomainsRegistrarStatus$inboundSchema;
  /** @deprecated use `GetOrderDomainsDomainsRegistrarStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetOrderDomainsDomainsRegistrarStatus$outboundSchema;
}

/** @internal */
export const Domains3$inboundSchema: z.ZodType<
  Domains3,
  z.ZodTypeDef,
  unknown
> = z.object({
  purchaseType: GetOrderDomainsPurchaseType$inboundSchema,
  autoRenew: z.boolean(),
  years: z.number(),
  domainName: z.string(),
  status: GetOrderDomainsDomainsRegistrarStatus$inboundSchema,
  price: z.number(),
});

/** @internal */
export type Domains3$Outbound = {
  purchaseType: string;
  autoRenew: boolean;
  years: number;
  domainName: string;
  status: string;
  price: number;
};

/** @internal */
export const Domains3$outboundSchema: z.ZodType<
  Domains3$Outbound,
  z.ZodTypeDef,
  Domains3
> = z.object({
  purchaseType: GetOrderDomainsPurchaseType$outboundSchema,
  autoRenew: z.boolean(),
  years: z.number(),
  domainName: z.string(),
  status: GetOrderDomainsDomainsRegistrarStatus$outboundSchema,
  price: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domains3$ {
  /** @deprecated use `Domains3$inboundSchema` instead. */
  export const inboundSchema = Domains3$inboundSchema;
  /** @deprecated use `Domains3$outboundSchema` instead. */
  export const outboundSchema = Domains3$outboundSchema;
  /** @deprecated use `Domains3$Outbound` instead. */
  export type Outbound = Domains3$Outbound;
}

export function domains3ToJSON(domains3: Domains3): string {
  return JSON.stringify(Domains3$outboundSchema.parse(domains3));
}

export function domains3FromJSON(
  jsonString: string,
): SafeParseResult<Domains3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domains3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domains3' from JSON`,
  );
}

/** @internal */
export const DomainsPurchaseType$inboundSchema: z.ZodNativeEnum<
  typeof DomainsPurchaseType
> = z.nativeEnum(DomainsPurchaseType);

/** @internal */
export const DomainsPurchaseType$outboundSchema: z.ZodNativeEnum<
  typeof DomainsPurchaseType
> = DomainsPurchaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainsPurchaseType$ {
  /** @deprecated use `DomainsPurchaseType$inboundSchema` instead. */
  export const inboundSchema = DomainsPurchaseType$inboundSchema;
  /** @deprecated use `DomainsPurchaseType$outboundSchema` instead. */
  export const outboundSchema = DomainsPurchaseType$outboundSchema;
}

/** @internal */
export const GetOrderDomainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetOrderDomainsStatus
> = z.nativeEnum(GetOrderDomainsStatus);

/** @internal */
export const GetOrderDomainsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetOrderDomainsStatus
> = GetOrderDomainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderDomainsStatus$ {
  /** @deprecated use `GetOrderDomainsStatus$inboundSchema` instead. */
  export const inboundSchema = GetOrderDomainsStatus$inboundSchema;
  /** @deprecated use `GetOrderDomainsStatus$outboundSchema` instead. */
  export const outboundSchema = GetOrderDomainsStatus$outboundSchema;
}

/** @internal */
export const Domains2$inboundSchema: z.ZodType<
  Domains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  purchaseType: DomainsPurchaseType$inboundSchema,
  years: z.number(),
  domainName: z.string(),
  status: GetOrderDomainsStatus$inboundSchema,
  price: z.number(),
});

/** @internal */
export type Domains2$Outbound = {
  purchaseType: string;
  years: number;
  domainName: string;
  status: string;
  price: number;
};

/** @internal */
export const Domains2$outboundSchema: z.ZodType<
  Domains2$Outbound,
  z.ZodTypeDef,
  Domains2
> = z.object({
  purchaseType: DomainsPurchaseType$outboundSchema,
  years: z.number(),
  domainName: z.string(),
  status: GetOrderDomainsStatus$outboundSchema,
  price: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domains2$ {
  /** @deprecated use `Domains2$inboundSchema` instead. */
  export const inboundSchema = Domains2$inboundSchema;
  /** @deprecated use `Domains2$outboundSchema` instead. */
  export const outboundSchema = Domains2$outboundSchema;
  /** @deprecated use `Domains2$Outbound` instead. */
  export type Outbound = Domains2$Outbound;
}

export function domains2ToJSON(domains2: Domains2): string {
  return JSON.stringify(Domains2$outboundSchema.parse(domains2));
}

export function domains2FromJSON(
  jsonString: string,
): SafeParseResult<Domains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domains2' from JSON`,
  );
}

/** @internal */
export const GetOrderDomainsDomainsRegistrarPurchaseType$inboundSchema:
  z.ZodNativeEnum<typeof GetOrderDomainsDomainsRegistrarPurchaseType> = z
    .nativeEnum(GetOrderDomainsDomainsRegistrarPurchaseType);

/** @internal */
export const GetOrderDomainsDomainsRegistrarPurchaseType$outboundSchema:
  z.ZodNativeEnum<typeof GetOrderDomainsDomainsRegistrarPurchaseType> =
    GetOrderDomainsDomainsRegistrarPurchaseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderDomainsDomainsRegistrarPurchaseType$ {
  /** @deprecated use `GetOrderDomainsDomainsRegistrarPurchaseType$inboundSchema` instead. */
  export const inboundSchema =
    GetOrderDomainsDomainsRegistrarPurchaseType$inboundSchema;
  /** @deprecated use `GetOrderDomainsDomainsRegistrarPurchaseType$outboundSchema` instead. */
  export const outboundSchema =
    GetOrderDomainsDomainsRegistrarPurchaseType$outboundSchema;
}

/** @internal */
export const DomainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof DomainsStatus
> = z.nativeEnum(DomainsStatus);

/** @internal */
export const DomainsStatus$outboundSchema: z.ZodNativeEnum<
  typeof DomainsStatus
> = DomainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DomainsStatus$ {
  /** @deprecated use `DomainsStatus$inboundSchema` instead. */
  export const inboundSchema = DomainsStatus$inboundSchema;
  /** @deprecated use `DomainsStatus$outboundSchema` instead. */
  export const outboundSchema = DomainsStatus$outboundSchema;
}

/** @internal */
export const Domains1$inboundSchema: z.ZodType<
  Domains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  purchaseType: GetOrderDomainsDomainsRegistrarPurchaseType$inboundSchema,
  autoRenew: z.boolean(),
  years: z.number(),
  domainName: z.string(),
  status: DomainsStatus$inboundSchema,
  price: z.number(),
});

/** @internal */
export type Domains1$Outbound = {
  purchaseType: string;
  autoRenew: boolean;
  years: number;
  domainName: string;
  status: string;
  price: number;
};

/** @internal */
export const Domains1$outboundSchema: z.ZodType<
  Domains1$Outbound,
  z.ZodTypeDef,
  Domains1
> = z.object({
  purchaseType: GetOrderDomainsDomainsRegistrarPurchaseType$outboundSchema,
  autoRenew: z.boolean(),
  years: z.number(),
  domainName: z.string(),
  status: DomainsStatus$outboundSchema,
  price: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Domains1$ {
  /** @deprecated use `Domains1$inboundSchema` instead. */
  export const inboundSchema = Domains1$inboundSchema;
  /** @deprecated use `Domains1$outboundSchema` instead. */
  export const outboundSchema = Domains1$outboundSchema;
  /** @deprecated use `Domains1$Outbound` instead. */
  export type Outbound = Domains1$Outbound;
}

export function domains1ToJSON(domains1: Domains1): string {
  return JSON.stringify(Domains1$outboundSchema.parse(domains1));
}

export function domains1FromJSON(
  jsonString: string,
): SafeParseResult<Domains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Domains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Domains1' from JSON`,
  );
}

/** @internal */
export const GetOrderDomains$inboundSchema: z.ZodType<
  GetOrderDomains,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => Domains1$inboundSchema),
  z.lazy(() => Domains3$inboundSchema),
  z.lazy(() => Domains2$inboundSchema),
]);

/** @internal */
export type GetOrderDomains$Outbound =
  | Domains1$Outbound
  | Domains3$Outbound
  | Domains2$Outbound;

/** @internal */
export const GetOrderDomains$outboundSchema: z.ZodType<
  GetOrderDomains$Outbound,
  z.ZodTypeDef,
  GetOrderDomains
> = z.union([
  z.lazy(() => Domains1$outboundSchema),
  z.lazy(() => Domains3$outboundSchema),
  z.lazy(() => Domains2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderDomains$ {
  /** @deprecated use `GetOrderDomains$inboundSchema` instead. */
  export const inboundSchema = GetOrderDomains$inboundSchema;
  /** @deprecated use `GetOrderDomains$outboundSchema` instead. */
  export const outboundSchema = GetOrderDomains$outboundSchema;
  /** @deprecated use `GetOrderDomains$Outbound` instead. */
  export type Outbound = GetOrderDomains$Outbound;
}

export function getOrderDomainsToJSON(
  getOrderDomains: GetOrderDomains,
): string {
  return JSON.stringify(GetOrderDomains$outboundSchema.parse(getOrderDomains));
}

export function getOrderDomainsFromJSON(
  jsonString: string,
): SafeParseResult<GetOrderDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrderDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrderDomains' from JSON`,
  );
}

/** @internal */
export const GetOrderStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetOrderStatus
> = z.nativeEnum(GetOrderStatus);

/** @internal */
export const GetOrderStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetOrderStatus
> = GetOrderStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderStatus$ {
  /** @deprecated use `GetOrderStatus$inboundSchema` instead. */
  export const inboundSchema = GetOrderStatus$inboundSchema;
  /** @deprecated use `GetOrderStatus$outboundSchema` instead. */
  export const outboundSchema = GetOrderStatus$outboundSchema;
}

/** @internal */
export const GetOrderErrorDomainsRegistrarResponseCode$inboundSchema:
  z.ZodNativeEnum<typeof GetOrderErrorDomainsRegistrarResponseCode> = z
    .nativeEnum(GetOrderErrorDomainsRegistrarResponseCode);

/** @internal */
export const GetOrderErrorDomainsRegistrarResponseCode$outboundSchema:
  z.ZodNativeEnum<typeof GetOrderErrorDomainsRegistrarResponseCode> =
    GetOrderErrorDomainsRegistrarResponseCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderErrorDomainsRegistrarResponseCode$ {
  /** @deprecated use `GetOrderErrorDomainsRegistrarResponseCode$inboundSchema` instead. */
  export const inboundSchema =
    GetOrderErrorDomainsRegistrarResponseCode$inboundSchema;
  /** @deprecated use `GetOrderErrorDomainsRegistrarResponseCode$outboundSchema` instead. */
  export const outboundSchema =
    GetOrderErrorDomainsRegistrarResponseCode$outboundSchema;
}

/** @internal */
export const Error4$inboundSchema: z.ZodType<Error4, z.ZodTypeDef, unknown> = z
  .object({
    code: GetOrderErrorDomainsRegistrarResponseCode$inboundSchema,
  });

/** @internal */
export type Error4$Outbound = {
  code: string;
};

/** @internal */
export const Error4$outboundSchema: z.ZodType<
  Error4$Outbound,
  z.ZodTypeDef,
  Error4
> = z.object({
  code: GetOrderErrorDomainsRegistrarResponseCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error4$ {
  /** @deprecated use `Error4$inboundSchema` instead. */
  export const inboundSchema = Error4$inboundSchema;
  /** @deprecated use `Error4$outboundSchema` instead. */
  export const outboundSchema = Error4$outboundSchema;
  /** @deprecated use `Error4$Outbound` instead. */
  export type Outbound = Error4$Outbound;
}

export function error4ToJSON(error4: Error4): string {
  return JSON.stringify(Error4$outboundSchema.parse(error4));
}

export function error4FromJSON(
  jsonString: string,
): SafeParseResult<Error4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Error4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Error4' from JSON`,
  );
}

/** @internal */
export const GetOrderErrorDomainsRegistrarCode$inboundSchema: z.ZodNativeEnum<
  typeof GetOrderErrorDomainsRegistrarCode
> = z.nativeEnum(GetOrderErrorDomainsRegistrarCode);

/** @internal */
export const GetOrderErrorDomainsRegistrarCode$outboundSchema: z.ZodNativeEnum<
  typeof GetOrderErrorDomainsRegistrarCode
> = GetOrderErrorDomainsRegistrarCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderErrorDomainsRegistrarCode$ {
  /** @deprecated use `GetOrderErrorDomainsRegistrarCode$inboundSchema` instead. */
  export const inboundSchema = GetOrderErrorDomainsRegistrarCode$inboundSchema;
  /** @deprecated use `GetOrderErrorDomainsRegistrarCode$outboundSchema` instead. */
  export const outboundSchema =
    GetOrderErrorDomainsRegistrarCode$outboundSchema;
}

/** @internal */
export const ErrorDetails$inboundSchema: z.ZodType<
  ErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  expectedPrice: z.number(),
  actualPrice: z.number().optional(),
});

/** @internal */
export type ErrorDetails$Outbound = {
  expectedPrice: number;
  actualPrice?: number | undefined;
};

/** @internal */
export const ErrorDetails$outboundSchema: z.ZodType<
  ErrorDetails$Outbound,
  z.ZodTypeDef,
  ErrorDetails
> = z.object({
  expectedPrice: z.number(),
  actualPrice: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDetails$ {
  /** @deprecated use `ErrorDetails$inboundSchema` instead. */
  export const inboundSchema = ErrorDetails$inboundSchema;
  /** @deprecated use `ErrorDetails$outboundSchema` instead. */
  export const outboundSchema = ErrorDetails$outboundSchema;
  /** @deprecated use `ErrorDetails$Outbound` instead. */
  export type Outbound = ErrorDetails$Outbound;
}

export function errorDetailsToJSON(errorDetails: ErrorDetails): string {
  return JSON.stringify(ErrorDetails$outboundSchema.parse(errorDetails));
}

export function errorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ErrorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorDetails' from JSON`,
  );
}

/** @internal */
export const Error3$inboundSchema: z.ZodType<Error3, z.ZodTypeDef, unknown> = z
  .object({
    code: GetOrderErrorDomainsRegistrarCode$inboundSchema,
    details: z.lazy(() => ErrorDetails$inboundSchema),
  });

/** @internal */
export type Error3$Outbound = {
  code: string;
  details: ErrorDetails$Outbound;
};

/** @internal */
export const Error3$outboundSchema: z.ZodType<
  Error3$Outbound,
  z.ZodTypeDef,
  Error3
> = z.object({
  code: GetOrderErrorDomainsRegistrarCode$outboundSchema,
  details: z.lazy(() => ErrorDetails$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error3$ {
  /** @deprecated use `Error3$inboundSchema` instead. */
  export const inboundSchema = Error3$inboundSchema;
  /** @deprecated use `Error3$outboundSchema` instead. */
  export const outboundSchema = Error3$outboundSchema;
  /** @deprecated use `Error3$Outbound` instead. */
  export type Outbound = Error3$Outbound;
}

export function error3ToJSON(error3: Error3): string {
  return JSON.stringify(Error3$outboundSchema.parse(error3));
}

export function error3FromJSON(
  jsonString: string,
): SafeParseResult<Error3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Error3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Error3' from JSON`,
  );
}

/** @internal */
export const GetOrderErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof GetOrderErrorCode
> = z.nativeEnum(GetOrderErrorCode);

/** @internal */
export const GetOrderErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof GetOrderErrorCode
> = GetOrderErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderErrorCode$ {
  /** @deprecated use `GetOrderErrorCode$inboundSchema` instead. */
  export const inboundSchema = GetOrderErrorCode$inboundSchema;
  /** @deprecated use `GetOrderErrorCode$outboundSchema` instead. */
  export const outboundSchema = GetOrderErrorCode$outboundSchema;
}

/** @internal */
export const Tlds$inboundSchema: z.ZodType<Tlds, z.ZodTypeDef, unknown> = z
  .object({
    tldName: z.string(),
    endsAt: z.string(),
  });

/** @internal */
export type Tlds$Outbound = {
  tldName: string;
  endsAt: string;
};

/** @internal */
export const Tlds$outboundSchema: z.ZodType<Tlds$Outbound, z.ZodTypeDef, Tlds> =
  z.object({
    tldName: z.string(),
    endsAt: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tlds$ {
  /** @deprecated use `Tlds$inboundSchema` instead. */
  export const inboundSchema = Tlds$inboundSchema;
  /** @deprecated use `Tlds$outboundSchema` instead. */
  export const outboundSchema = Tlds$outboundSchema;
  /** @deprecated use `Tlds$Outbound` instead. */
  export type Outbound = Tlds$Outbound;
}

export function tldsToJSON(tlds: Tlds): string {
  return JSON.stringify(Tlds$outboundSchema.parse(tlds));
}

export function tldsFromJSON(
  jsonString: string,
): SafeParseResult<Tlds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tlds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tlds' from JSON`,
  );
}

/** @internal */
export const GetOrderErrorDetails$inboundSchema: z.ZodType<
  GetOrderErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  tlds: z.array(z.lazy(() => Tlds$inboundSchema)),
});

/** @internal */
export type GetOrderErrorDetails$Outbound = {
  tlds: Array<Tlds$Outbound>;
};

/** @internal */
export const GetOrderErrorDetails$outboundSchema: z.ZodType<
  GetOrderErrorDetails$Outbound,
  z.ZodTypeDef,
  GetOrderErrorDetails
> = z.object({
  tlds: z.array(z.lazy(() => Tlds$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderErrorDetails$ {
  /** @deprecated use `GetOrderErrorDetails$inboundSchema` instead. */
  export const inboundSchema = GetOrderErrorDetails$inboundSchema;
  /** @deprecated use `GetOrderErrorDetails$outboundSchema` instead. */
  export const outboundSchema = GetOrderErrorDetails$outboundSchema;
  /** @deprecated use `GetOrderErrorDetails$Outbound` instead. */
  export type Outbound = GetOrderErrorDetails$Outbound;
}

export function getOrderErrorDetailsToJSON(
  getOrderErrorDetails: GetOrderErrorDetails,
): string {
  return JSON.stringify(
    GetOrderErrorDetails$outboundSchema.parse(getOrderErrorDetails),
  );
}

export function getOrderErrorDetailsFromJSON(
  jsonString: string,
): SafeParseResult<GetOrderErrorDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrderErrorDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrderErrorDetails' from JSON`,
  );
}

/** @internal */
export const Error2$inboundSchema: z.ZodType<Error2, z.ZodTypeDef, unknown> = z
  .object({
    code: GetOrderErrorCode$inboundSchema,
    details: z.lazy(() => GetOrderErrorDetails$inboundSchema),
  });

/** @internal */
export type Error2$Outbound = {
  code: string;
  details: GetOrderErrorDetails$Outbound;
};

/** @internal */
export const Error2$outboundSchema: z.ZodType<
  Error2$Outbound,
  z.ZodTypeDef,
  Error2
> = z.object({
  code: GetOrderErrorCode$outboundSchema,
  details: z.lazy(() => GetOrderErrorDetails$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error2$ {
  /** @deprecated use `Error2$inboundSchema` instead. */
  export const inboundSchema = Error2$inboundSchema;
  /** @deprecated use `Error2$outboundSchema` instead. */
  export const outboundSchema = Error2$outboundSchema;
  /** @deprecated use `Error2$Outbound` instead. */
  export type Outbound = Error2$Outbound;
}

export function error2ToJSON(error2: Error2): string {
  return JSON.stringify(Error2$outboundSchema.parse(error2));
}

export function error2FromJSON(
  jsonString: string,
): SafeParseResult<Error2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Error2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Error2' from JSON`,
  );
}

/** @internal */
export const ErrorCode$inboundSchema: z.ZodNativeEnum<typeof ErrorCode> = z
  .nativeEnum(ErrorCode);

/** @internal */
export const ErrorCode$outboundSchema: z.ZodNativeEnum<typeof ErrorCode> =
  ErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorCode$ {
  /** @deprecated use `ErrorCode$inboundSchema` instead. */
  export const inboundSchema = ErrorCode$inboundSchema;
  /** @deprecated use `ErrorCode$outboundSchema` instead. */
  export const outboundSchema = ErrorCode$outboundSchema;
}

/** @internal */
export const Error1$inboundSchema: z.ZodType<Error1, z.ZodTypeDef, unknown> = z
  .object({
    code: ErrorCode$inboundSchema,
  });

/** @internal */
export type Error1$Outbound = {
  code: string;
};

/** @internal */
export const Error1$outboundSchema: z.ZodType<
  Error1$Outbound,
  z.ZodTypeDef,
  Error1
> = z.object({
  code: ErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Error1$ {
  /** @deprecated use `Error1$inboundSchema` instead. */
  export const inboundSchema = Error1$inboundSchema;
  /** @deprecated use `Error1$outboundSchema` instead. */
  export const outboundSchema = Error1$outboundSchema;
  /** @deprecated use `Error1$Outbound` instead. */
  export type Outbound = Error1$Outbound;
}

export function error1ToJSON(error1: Error1): string {
  return JSON.stringify(Error1$outboundSchema.parse(error1));
}

export function error1FromJSON(
  jsonString: string,
): SafeParseResult<Error1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Error1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Error1' from JSON`,
  );
}

/** @internal */
export const ErrorT$inboundSchema: z.ZodType<ErrorT, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Error2$inboundSchema),
    z.lazy(() => Error3$inboundSchema),
    z.lazy(() => Error1$inboundSchema),
    z.lazy(() => Error4$inboundSchema),
  ]);

/** @internal */
export type ErrorT$Outbound =
  | Error2$Outbound
  | Error3$Outbound
  | Error1$Outbound
  | Error4$Outbound;

/** @internal */
export const ErrorT$outboundSchema: z.ZodType<
  ErrorT$Outbound,
  z.ZodTypeDef,
  ErrorT
> = z.union([
  z.lazy(() => Error2$outboundSchema),
  z.lazy(() => Error3$outboundSchema),
  z.lazy(() => Error1$outboundSchema),
  z.lazy(() => Error4$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorT$ {
  /** @deprecated use `ErrorT$inboundSchema` instead. */
  export const inboundSchema = ErrorT$inboundSchema;
  /** @deprecated use `ErrorT$outboundSchema` instead. */
  export const outboundSchema = ErrorT$outboundSchema;
  /** @deprecated use `ErrorT$Outbound` instead. */
  export type Outbound = ErrorT$Outbound;
}

export function errorToJSON(errorT: ErrorT): string {
  return JSON.stringify(ErrorT$outboundSchema.parse(errorT));
}

export function errorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorT, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorT$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorT' from JSON`,
  );
}

/** @internal */
export const GetOrderResponseBody$inboundSchema: z.ZodType<
  GetOrderResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  domains: z.array(
    z.union([
      z.lazy(() => Domains1$inboundSchema),
      z.lazy(() => Domains3$inboundSchema),
      z.lazy(() => Domains2$inboundSchema),
    ]),
  ),
  status: GetOrderStatus$inboundSchema,
  error: z.union([
    z.lazy(() => Error2$inboundSchema),
    z.lazy(() => Error3$inboundSchema),
    z.lazy(() => Error1$inboundSchema),
    z.lazy(() => Error4$inboundSchema),
  ]).optional(),
});

/** @internal */
export type GetOrderResponseBody$Outbound = {
  orderId: string;
  domains: Array<Domains1$Outbound | Domains3$Outbound | Domains2$Outbound>;
  status: string;
  error?:
    | Error2$Outbound
    | Error3$Outbound
    | Error1$Outbound
    | Error4$Outbound
    | undefined;
};

/** @internal */
export const GetOrderResponseBody$outboundSchema: z.ZodType<
  GetOrderResponseBody$Outbound,
  z.ZodTypeDef,
  GetOrderResponseBody
> = z.object({
  orderId: z.string(),
  domains: z.array(
    z.union([
      z.lazy(() => Domains1$outboundSchema),
      z.lazy(() => Domains3$outboundSchema),
      z.lazy(() => Domains2$outboundSchema),
    ]),
  ),
  status: GetOrderStatus$outboundSchema,
  error: z.union([
    z.lazy(() => Error2$outboundSchema),
    z.lazy(() => Error3$outboundSchema),
    z.lazy(() => Error1$outboundSchema),
    z.lazy(() => Error4$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrderResponseBody$ {
  /** @deprecated use `GetOrderResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetOrderResponseBody$inboundSchema;
  /** @deprecated use `GetOrderResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetOrderResponseBody$outboundSchema;
  /** @deprecated use `GetOrderResponseBody$Outbound` instead. */
  export type Outbound = GetOrderResponseBody$Outbound;
}

export function getOrderResponseBodyToJSON(
  getOrderResponseBody: GetOrderResponseBody,
): string {
  return JSON.stringify(
    GetOrderResponseBody$outboundSchema.parse(getOrderResponseBody),
  );
}

export function getOrderResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetOrderResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrderResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrderResponseBody' from JSON`,
  );
}
