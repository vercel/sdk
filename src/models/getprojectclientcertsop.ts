/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetProjectClientCertsRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type ClientCerts = {
  origin: string;
  id: string;
};

/**
 * Client certificates retrieved successfully
 */
export type GetProjectClientCertsResponseBody = {
  clientCerts: Array<ClientCerts>;
};

/** @internal */
export const GetProjectClientCertsRequest$inboundSchema: z.ZodType<
  GetProjectClientCertsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetProjectClientCertsRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetProjectClientCertsRequest$outboundSchema: z.ZodType<
  GetProjectClientCertsRequest$Outbound,
  z.ZodTypeDef,
  GetProjectClientCertsRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectClientCertsRequest$ {
  /** @deprecated use `GetProjectClientCertsRequest$inboundSchema` instead. */
  export const inboundSchema = GetProjectClientCertsRequest$inboundSchema;
  /** @deprecated use `GetProjectClientCertsRequest$outboundSchema` instead. */
  export const outboundSchema = GetProjectClientCertsRequest$outboundSchema;
  /** @deprecated use `GetProjectClientCertsRequest$Outbound` instead. */
  export type Outbound = GetProjectClientCertsRequest$Outbound;
}

export function getProjectClientCertsRequestToJSON(
  getProjectClientCertsRequest: GetProjectClientCertsRequest,
): string {
  return JSON.stringify(
    GetProjectClientCertsRequest$outboundSchema.parse(
      getProjectClientCertsRequest,
    ),
  );
}

export function getProjectClientCertsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectClientCertsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectClientCertsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectClientCertsRequest' from JSON`,
  );
}

/** @internal */
export const ClientCerts$inboundSchema: z.ZodType<
  ClientCerts,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: z.string(),
  id: z.string(),
});

/** @internal */
export type ClientCerts$Outbound = {
  origin: string;
  id: string;
};

/** @internal */
export const ClientCerts$outboundSchema: z.ZodType<
  ClientCerts$Outbound,
  z.ZodTypeDef,
  ClientCerts
> = z.object({
  origin: z.string(),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCerts$ {
  /** @deprecated use `ClientCerts$inboundSchema` instead. */
  export const inboundSchema = ClientCerts$inboundSchema;
  /** @deprecated use `ClientCerts$outboundSchema` instead. */
  export const outboundSchema = ClientCerts$outboundSchema;
  /** @deprecated use `ClientCerts$Outbound` instead. */
  export type Outbound = ClientCerts$Outbound;
}

export function clientCertsToJSON(clientCerts: ClientCerts): string {
  return JSON.stringify(ClientCerts$outboundSchema.parse(clientCerts));
}

export function clientCertsFromJSON(
  jsonString: string,
): SafeParseResult<ClientCerts, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCerts$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCerts' from JSON`,
  );
}

/** @internal */
export const GetProjectClientCertsResponseBody$inboundSchema: z.ZodType<
  GetProjectClientCertsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientCerts: z.array(z.lazy(() => ClientCerts$inboundSchema)),
});

/** @internal */
export type GetProjectClientCertsResponseBody$Outbound = {
  clientCerts: Array<ClientCerts$Outbound>;
};

/** @internal */
export const GetProjectClientCertsResponseBody$outboundSchema: z.ZodType<
  GetProjectClientCertsResponseBody$Outbound,
  z.ZodTypeDef,
  GetProjectClientCertsResponseBody
> = z.object({
  clientCerts: z.array(z.lazy(() => ClientCerts$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetProjectClientCertsResponseBody$ {
  /** @deprecated use `GetProjectClientCertsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetProjectClientCertsResponseBody$inboundSchema;
  /** @deprecated use `GetProjectClientCertsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetProjectClientCertsResponseBody$outboundSchema;
  /** @deprecated use `GetProjectClientCertsResponseBody$Outbound` instead. */
  export type Outbound = GetProjectClientCertsResponseBody$Outbound;
}

export function getProjectClientCertsResponseBodyToJSON(
  getProjectClientCertsResponseBody: GetProjectClientCertsResponseBody,
): string {
  return JSON.stringify(
    GetProjectClientCertsResponseBody$outboundSchema.parse(
      getProjectClientCertsResponseBody,
    ),
  );
}

export function getProjectClientCertsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetProjectClientCertsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetProjectClientCertsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetProjectClientCertsResponseBody' from JSON`,
  );
}
