/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetResourceRequest = {
  /**
   * The ID of the integration configuration (installation) the resource belongs to
   */
  integrationConfigurationId: string;
  /**
   * The ID provided by the 3rd party provider for the given resource
   */
  resourceId: string;
};

/**
 * The current status of the resource
 */
export const GetResourceStatus = {
  Ready: "ready",
  Pending: "pending",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
/**
 * The current status of the resource
 */
export type GetResourceStatus = ClosedEnum<typeof GetResourceStatus>;

export type Experimentation = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/**
 * Any settings provided for the resource to support its product's protocols
 */
export type ProtocolSettings = {
  experimentation?: Experimentation | undefined;
};

export const GetResourceLevel = {
  Error: "error",
  Info: "info",
  Warn: "warn",
} as const;
export type GetResourceLevel = ClosedEnum<typeof GetResourceLevel>;

/**
 * The notification, if set, displayed to the user when viewing the resource in Vercel
 */
export type GetResourceNotification = {
  level: GetResourceLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

export type Metadata =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

export type GetResourceResponseBody = {
  /**
   * The ID provided by the 3rd party provider for the given resource
   */
  id: string;
  /**
   * The ID assigned by Vercel for the given resource
   */
  internalId: string;
  /**
   * The name of the resource as it is recorded in Vercel
   */
  name: string;
  /**
   * The current status of the resource
   */
  status?: GetResourceStatus | undefined;
  /**
   * The ID of the product the resource is derived from
   */
  productId: string;
  /**
   * Any settings provided for the resource to support its product's protocols
   */
  protocolSettings?: ProtocolSettings | undefined;
  /**
   * The notification, if set, displayed to the user when viewing the resource in Vercel
   */
  notification?: GetResourceNotification | undefined;
  /**
   * The ID of the billing plan the resource is subscribed to, if applicable
   */
  billingPlanId?: string | undefined;
  /**
   * The configured metadata for the resource as defined by its product's Metadata Schema
   */
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

/** @internal */
export const GetResourceRequest$inboundSchema: z.ZodType<
  GetResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
});

/** @internal */
export type GetResourceRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
};

/** @internal */
export const GetResourceRequest$outboundSchema: z.ZodType<
  GetResourceRequest$Outbound,
  z.ZodTypeDef,
  GetResourceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceRequest$ {
  /** @deprecated use `GetResourceRequest$inboundSchema` instead. */
  export const inboundSchema = GetResourceRequest$inboundSchema;
  /** @deprecated use `GetResourceRequest$outboundSchema` instead. */
  export const outboundSchema = GetResourceRequest$outboundSchema;
  /** @deprecated use `GetResourceRequest$Outbound` instead. */
  export type Outbound = GetResourceRequest$Outbound;
}

export function getResourceRequestToJSON(
  getResourceRequest: GetResourceRequest,
): string {
  return JSON.stringify(
    GetResourceRequest$outboundSchema.parse(getResourceRequest),
  );
}

export function getResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourceRequest' from JSON`,
  );
}

/** @internal */
export const GetResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetResourceStatus
> = z.nativeEnum(GetResourceStatus);

/** @internal */
export const GetResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetResourceStatus
> = GetResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceStatus$ {
  /** @deprecated use `GetResourceStatus$inboundSchema` instead. */
  export const inboundSchema = GetResourceStatus$inboundSchema;
  /** @deprecated use `GetResourceStatus$outboundSchema` instead. */
  export const outboundSchema = GetResourceStatus$outboundSchema;
}

/** @internal */
export const Experimentation$inboundSchema: z.ZodType<
  Experimentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/** @internal */
export type Experimentation$Outbound = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/** @internal */
export const Experimentation$outboundSchema: z.ZodType<
  Experimentation$Outbound,
  z.ZodTypeDef,
  Experimentation
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Experimentation$ {
  /** @deprecated use `Experimentation$inboundSchema` instead. */
  export const inboundSchema = Experimentation$inboundSchema;
  /** @deprecated use `Experimentation$outboundSchema` instead. */
  export const outboundSchema = Experimentation$outboundSchema;
  /** @deprecated use `Experimentation$Outbound` instead. */
  export type Outbound = Experimentation$Outbound;
}

export function experimentationToJSON(
  experimentation: Experimentation,
): string {
  return JSON.stringify(Experimentation$outboundSchema.parse(experimentation));
}

export function experimentationFromJSON(
  jsonString: string,
): SafeParseResult<Experimentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Experimentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Experimentation' from JSON`,
  );
}

/** @internal */
export const ProtocolSettings$inboundSchema: z.ZodType<
  ProtocolSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentation: z.lazy(() => Experimentation$inboundSchema).optional(),
});

/** @internal */
export type ProtocolSettings$Outbound = {
  experimentation?: Experimentation$Outbound | undefined;
};

/** @internal */
export const ProtocolSettings$outboundSchema: z.ZodType<
  ProtocolSettings$Outbound,
  z.ZodTypeDef,
  ProtocolSettings
> = z.object({
  experimentation: z.lazy(() => Experimentation$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProtocolSettings$ {
  /** @deprecated use `ProtocolSettings$inboundSchema` instead. */
  export const inboundSchema = ProtocolSettings$inboundSchema;
  /** @deprecated use `ProtocolSettings$outboundSchema` instead. */
  export const outboundSchema = ProtocolSettings$outboundSchema;
  /** @deprecated use `ProtocolSettings$Outbound` instead. */
  export type Outbound = ProtocolSettings$Outbound;
}

export function protocolSettingsToJSON(
  protocolSettings: ProtocolSettings,
): string {
  return JSON.stringify(
    ProtocolSettings$outboundSchema.parse(protocolSettings),
  );
}

export function protocolSettingsFromJSON(
  jsonString: string,
): SafeParseResult<ProtocolSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProtocolSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProtocolSettings' from JSON`,
  );
}

/** @internal */
export const GetResourceLevel$inboundSchema: z.ZodNativeEnum<
  typeof GetResourceLevel
> = z.nativeEnum(GetResourceLevel);

/** @internal */
export const GetResourceLevel$outboundSchema: z.ZodNativeEnum<
  typeof GetResourceLevel
> = GetResourceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceLevel$ {
  /** @deprecated use `GetResourceLevel$inboundSchema` instead. */
  export const inboundSchema = GetResourceLevel$inboundSchema;
  /** @deprecated use `GetResourceLevel$outboundSchema` instead. */
  export const outboundSchema = GetResourceLevel$outboundSchema;
}

/** @internal */
export const GetResourceNotification$inboundSchema: z.ZodType<
  GetResourceNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: GetResourceLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type GetResourceNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const GetResourceNotification$outboundSchema: z.ZodType<
  GetResourceNotification$Outbound,
  z.ZodTypeDef,
  GetResourceNotification
> = z.object({
  level: GetResourceLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceNotification$ {
  /** @deprecated use `GetResourceNotification$inboundSchema` instead. */
  export const inboundSchema = GetResourceNotification$inboundSchema;
  /** @deprecated use `GetResourceNotification$outboundSchema` instead. */
  export const outboundSchema = GetResourceNotification$outboundSchema;
  /** @deprecated use `GetResourceNotification$Outbound` instead. */
  export type Outbound = GetResourceNotification$Outbound;
}

export function getResourceNotificationToJSON(
  getResourceNotification: GetResourceNotification,
): string {
  return JSON.stringify(
    GetResourceNotification$outboundSchema.parse(getResourceNotification),
  );
}

export function getResourceNotificationFromJSON(
  jsonString: string,
): SafeParseResult<GetResourceNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourceNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourceNotification' from JSON`,
  );
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/** @internal */
export type Metadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const GetResourceResponseBody$inboundSchema: z.ZodType<
  GetResourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetResourceStatus$inboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() => ProtocolSettings$inboundSchema).optional(),
  notification: z.lazy(() => GetResourceNotification$inboundSchema).optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/** @internal */
export type GetResourceResponseBody$Outbound = {
  id: string;
  internalId: string;
  name: string;
  status?: string | undefined;
  productId: string;
  protocolSettings?: ProtocolSettings$Outbound | undefined;
  notification?: GetResourceNotification$Outbound | undefined;
  billingPlanId?: string | undefined;
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

/** @internal */
export const GetResourceResponseBody$outboundSchema: z.ZodType<
  GetResourceResponseBody$Outbound,
  z.ZodTypeDef,
  GetResourceResponseBody
> = z.object({
  id: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetResourceStatus$outboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() => ProtocolSettings$outboundSchema).optional(),
  notification: z.lazy(() => GetResourceNotification$outboundSchema).optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourceResponseBody$ {
  /** @deprecated use `GetResourceResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetResourceResponseBody$inboundSchema;
  /** @deprecated use `GetResourceResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetResourceResponseBody$outboundSchema;
  /** @deprecated use `GetResourceResponseBody$Outbound` instead. */
  export type Outbound = GetResourceResponseBody$Outbound;
}

export function getResourceResponseBodyToJSON(
  getResourceResponseBody: GetResourceResponseBody,
): string {
  return JSON.stringify(
    GetResourceResponseBody$outboundSchema.parse(getResourceResponseBody),
  );
}

export function getResourceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetResourceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourceResponseBody' from JSON`,
  );
}
