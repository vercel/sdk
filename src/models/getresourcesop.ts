/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetResourcesRequest = {
  integrationConfigurationId: string;
};

/**
 * The current status of the resource
 */
export const GetResourcesStatus = {
  Ready: "ready",
  Pending: "pending",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
/**
 * The current status of the resource
 */
export type GetResourcesStatus = ClosedEnum<typeof GetResourcesStatus>;

export type GetResourcesExperimentation = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/**
 * Any settings provided for the resource to support its product's protocols
 */
export type GetResourcesProtocolSettings = {
  experimentation?: GetResourcesExperimentation | undefined;
};

export const GetResourcesLevel = {
  Error: "error",
  Info: "info",
  Warn: "warn",
} as const;
export type GetResourcesLevel = ClosedEnum<typeof GetResourcesLevel>;

/**
 * The notification, if set, displayed to the user when viewing the resource in Vercel
 */
export type GetResourcesNotification = {
  level: GetResourcesLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

export type GetResourcesMetadata =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

export type Resources = {
  /**
   * The ID provided by the partner for the given resource
   */
  partnerId: string;
  /**
   * The ID assigned by Vercel for the given resource
   */
  internalId: string;
  /**
   * The name of the resource as it is recorded in Vercel
   */
  name: string;
  /**
   * The current status of the resource
   */
  status?: GetResourcesStatus | undefined;
  /**
   * The ID of the product the resource is derived from
   */
  productId: string;
  /**
   * Any settings provided for the resource to support its product's protocols
   */
  protocolSettings?: GetResourcesProtocolSettings | undefined;
  /**
   * The notification, if set, displayed to the user when viewing the resource in Vercel
   */
  notification?: GetResourcesNotification | undefined;
  /**
   * The ID of the billing plan the resource is subscribed to, if applicable
   */
  billingPlanId?: string | undefined;
  /**
   * The configured metadata for the resource as defined by its product's Metadata Schema
   */
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

export type GetResourcesResponseBody = {
  resources: Array<Resources>;
};

/** @internal */
export const GetResourcesRequest$inboundSchema: z.ZodType<
  GetResourcesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
});

/** @internal */
export type GetResourcesRequest$Outbound = {
  integrationConfigurationId: string;
};

/** @internal */
export const GetResourcesRequest$outboundSchema: z.ZodType<
  GetResourcesRequest$Outbound,
  z.ZodTypeDef,
  GetResourcesRequest
> = z.object({
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesRequest$ {
  /** @deprecated use `GetResourcesRequest$inboundSchema` instead. */
  export const inboundSchema = GetResourcesRequest$inboundSchema;
  /** @deprecated use `GetResourcesRequest$outboundSchema` instead. */
  export const outboundSchema = GetResourcesRequest$outboundSchema;
  /** @deprecated use `GetResourcesRequest$Outbound` instead. */
  export type Outbound = GetResourcesRequest$Outbound;
}

export function getResourcesRequestToJSON(
  getResourcesRequest: GetResourcesRequest,
): string {
  return JSON.stringify(
    GetResourcesRequest$outboundSchema.parse(getResourcesRequest),
  );
}

export function getResourcesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesRequest' from JSON`,
  );
}

/** @internal */
export const GetResourcesStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetResourcesStatus
> = z.nativeEnum(GetResourcesStatus);

/** @internal */
export const GetResourcesStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetResourcesStatus
> = GetResourcesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesStatus$ {
  /** @deprecated use `GetResourcesStatus$inboundSchema` instead. */
  export const inboundSchema = GetResourcesStatus$inboundSchema;
  /** @deprecated use `GetResourcesStatus$outboundSchema` instead. */
  export const outboundSchema = GetResourcesStatus$outboundSchema;
}

/** @internal */
export const GetResourcesExperimentation$inboundSchema: z.ZodType<
  GetResourcesExperimentation,
  z.ZodTypeDef,
  unknown
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/** @internal */
export type GetResourcesExperimentation$Outbound = {
  edgeConfigSyncingEnabled?: boolean | undefined;
  edgeConfigId?: string | undefined;
  edgeConfigTokenId?: string | undefined;
};

/** @internal */
export const GetResourcesExperimentation$outboundSchema: z.ZodType<
  GetResourcesExperimentation$Outbound,
  z.ZodTypeDef,
  GetResourcesExperimentation
> = z.object({
  edgeConfigSyncingEnabled: z.boolean().optional(),
  edgeConfigId: z.string().optional(),
  edgeConfigTokenId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesExperimentation$ {
  /** @deprecated use `GetResourcesExperimentation$inboundSchema` instead. */
  export const inboundSchema = GetResourcesExperimentation$inboundSchema;
  /** @deprecated use `GetResourcesExperimentation$outboundSchema` instead. */
  export const outboundSchema = GetResourcesExperimentation$outboundSchema;
  /** @deprecated use `GetResourcesExperimentation$Outbound` instead. */
  export type Outbound = GetResourcesExperimentation$Outbound;
}

export function getResourcesExperimentationToJSON(
  getResourcesExperimentation: GetResourcesExperimentation,
): string {
  return JSON.stringify(
    GetResourcesExperimentation$outboundSchema.parse(
      getResourcesExperimentation,
    ),
  );
}

export function getResourcesExperimentationFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesExperimentation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesExperimentation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesExperimentation' from JSON`,
  );
}

/** @internal */
export const GetResourcesProtocolSettings$inboundSchema: z.ZodType<
  GetResourcesProtocolSettings,
  z.ZodTypeDef,
  unknown
> = z.object({
  experimentation: z.lazy(() => GetResourcesExperimentation$inboundSchema)
    .optional(),
});

/** @internal */
export type GetResourcesProtocolSettings$Outbound = {
  experimentation?: GetResourcesExperimentation$Outbound | undefined;
};

/** @internal */
export const GetResourcesProtocolSettings$outboundSchema: z.ZodType<
  GetResourcesProtocolSettings$Outbound,
  z.ZodTypeDef,
  GetResourcesProtocolSettings
> = z.object({
  experimentation: z.lazy(() => GetResourcesExperimentation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesProtocolSettings$ {
  /** @deprecated use `GetResourcesProtocolSettings$inboundSchema` instead. */
  export const inboundSchema = GetResourcesProtocolSettings$inboundSchema;
  /** @deprecated use `GetResourcesProtocolSettings$outboundSchema` instead. */
  export const outboundSchema = GetResourcesProtocolSettings$outboundSchema;
  /** @deprecated use `GetResourcesProtocolSettings$Outbound` instead. */
  export type Outbound = GetResourcesProtocolSettings$Outbound;
}

export function getResourcesProtocolSettingsToJSON(
  getResourcesProtocolSettings: GetResourcesProtocolSettings,
): string {
  return JSON.stringify(
    GetResourcesProtocolSettings$outboundSchema.parse(
      getResourcesProtocolSettings,
    ),
  );
}

export function getResourcesProtocolSettingsFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesProtocolSettings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesProtocolSettings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesProtocolSettings' from JSON`,
  );
}

/** @internal */
export const GetResourcesLevel$inboundSchema: z.ZodNativeEnum<
  typeof GetResourcesLevel
> = z.nativeEnum(GetResourcesLevel);

/** @internal */
export const GetResourcesLevel$outboundSchema: z.ZodNativeEnum<
  typeof GetResourcesLevel
> = GetResourcesLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesLevel$ {
  /** @deprecated use `GetResourcesLevel$inboundSchema` instead. */
  export const inboundSchema = GetResourcesLevel$inboundSchema;
  /** @deprecated use `GetResourcesLevel$outboundSchema` instead. */
  export const outboundSchema = GetResourcesLevel$outboundSchema;
}

/** @internal */
export const GetResourcesNotification$inboundSchema: z.ZodType<
  GetResourcesNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: GetResourcesLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type GetResourcesNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const GetResourcesNotification$outboundSchema: z.ZodType<
  GetResourcesNotification$Outbound,
  z.ZodTypeDef,
  GetResourcesNotification
> = z.object({
  level: GetResourcesLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesNotification$ {
  /** @deprecated use `GetResourcesNotification$inboundSchema` instead. */
  export const inboundSchema = GetResourcesNotification$inboundSchema;
  /** @deprecated use `GetResourcesNotification$outboundSchema` instead. */
  export const outboundSchema = GetResourcesNotification$outboundSchema;
  /** @deprecated use `GetResourcesNotification$Outbound` instead. */
  export type Outbound = GetResourcesNotification$Outbound;
}

export function getResourcesNotificationToJSON(
  getResourcesNotification: GetResourcesNotification,
): string {
  return JSON.stringify(
    GetResourcesNotification$outboundSchema.parse(getResourcesNotification),
  );
}

export function getResourcesNotificationFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesNotification' from JSON`,
  );
}

/** @internal */
export const GetResourcesMetadata$inboundSchema: z.ZodType<
  GetResourcesMetadata,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/** @internal */
export type GetResourcesMetadata$Outbound =
  | string
  | number
  | boolean
  | Array<string>
  | Array<number>;

/** @internal */
export const GetResourcesMetadata$outboundSchema: z.ZodType<
  GetResourcesMetadata$Outbound,
  z.ZodTypeDef,
  GetResourcesMetadata
> = z.union([
  z.string(),
  z.number(),
  z.boolean(),
  z.array(z.string()),
  z.array(z.number()),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesMetadata$ {
  /** @deprecated use `GetResourcesMetadata$inboundSchema` instead. */
  export const inboundSchema = GetResourcesMetadata$inboundSchema;
  /** @deprecated use `GetResourcesMetadata$outboundSchema` instead. */
  export const outboundSchema = GetResourcesMetadata$outboundSchema;
  /** @deprecated use `GetResourcesMetadata$Outbound` instead. */
  export type Outbound = GetResourcesMetadata$Outbound;
}

export function getResourcesMetadataToJSON(
  getResourcesMetadata: GetResourcesMetadata,
): string {
  return JSON.stringify(
    GetResourcesMetadata$outboundSchema.parse(getResourcesMetadata),
  );
}

export function getResourcesMetadataFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesMetadata' from JSON`,
  );
}

/** @internal */
export const Resources$inboundSchema: z.ZodType<
  Resources,
  z.ZodTypeDef,
  unknown
> = z.object({
  partnerId: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetResourcesStatus$inboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() => GetResourcesProtocolSettings$inboundSchema)
    .optional(),
  notification: z.lazy(() => GetResourcesNotification$inboundSchema).optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/** @internal */
export type Resources$Outbound = {
  partnerId: string;
  internalId: string;
  name: string;
  status?: string | undefined;
  productId: string;
  protocolSettings?: GetResourcesProtocolSettings$Outbound | undefined;
  notification?: GetResourcesNotification$Outbound | undefined;
  billingPlanId?: string | undefined;
  metadata?: {
    [k: string]: string | number | boolean | Array<string> | Array<number>;
  } | undefined;
};

/** @internal */
export const Resources$outboundSchema: z.ZodType<
  Resources$Outbound,
  z.ZodTypeDef,
  Resources
> = z.object({
  partnerId: z.string(),
  internalId: z.string(),
  name: z.string(),
  status: GetResourcesStatus$outboundSchema.optional(),
  productId: z.string(),
  protocolSettings: z.lazy(() => GetResourcesProtocolSettings$outboundSchema)
    .optional(),
  notification: z.lazy(() => GetResourcesNotification$outboundSchema)
    .optional(),
  billingPlanId: z.string().optional(),
  metadata: z.record(
    z.union([
      z.string(),
      z.number(),
      z.boolean(),
      z.array(z.string()),
      z.array(z.number()),
    ]),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resources$ {
  /** @deprecated use `Resources$inboundSchema` instead. */
  export const inboundSchema = Resources$inboundSchema;
  /** @deprecated use `Resources$outboundSchema` instead. */
  export const outboundSchema = Resources$outboundSchema;
  /** @deprecated use `Resources$Outbound` instead. */
  export type Outbound = Resources$Outbound;
}

export function resourcesToJSON(resources: Resources): string {
  return JSON.stringify(Resources$outboundSchema.parse(resources));
}

export function resourcesFromJSON(
  jsonString: string,
): SafeParseResult<Resources, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resources$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resources' from JSON`,
  );
}

/** @internal */
export const GetResourcesResponseBody$inboundSchema: z.ZodType<
  GetResourcesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(z.lazy(() => Resources$inboundSchema)),
});

/** @internal */
export type GetResourcesResponseBody$Outbound = {
  resources: Array<Resources$Outbound>;
};

/** @internal */
export const GetResourcesResponseBody$outboundSchema: z.ZodType<
  GetResourcesResponseBody$Outbound,
  z.ZodTypeDef,
  GetResourcesResponseBody
> = z.object({
  resources: z.array(z.lazy(() => Resources$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesResponseBody$ {
  /** @deprecated use `GetResourcesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetResourcesResponseBody$inboundSchema;
  /** @deprecated use `GetResourcesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetResourcesResponseBody$outboundSchema;
  /** @deprecated use `GetResourcesResponseBody$Outbound` instead. */
  export type Outbound = GetResourcesResponseBody$Outbound;
}

export function getResourcesResponseBodyToJSON(
  getResourcesResponseBody: GetResourcesResponseBody,
): string {
  return JSON.stringify(
    GetResourcesResponseBody$outboundSchema.parse(getResourcesResponseBody),
  );
}

export function getResourcesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesResponseBody' from JSON`,
  );
}
