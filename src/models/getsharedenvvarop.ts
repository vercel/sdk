/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetSharedEnvVarRequest = {
  /**
   * The unique ID for the Shared Environment Variable to get the decrypted value.
   */
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const GetSharedEnvVarType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
  System: "system",
  Plain: "plain",
} as const;
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type GetSharedEnvVarType = ClosedEnum<typeof GetSharedEnvVarType>;

/**
 * environments this env variable targets
 */
export const GetSharedEnvVarTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
/**
 * environments this env variable targets
 */
export type GetSharedEnvVarTarget = ClosedEnum<typeof GetSharedEnvVarTarget>;

export type GetSharedEnvVarResponseBody = {
  /**
   * The date when the Shared Env Var was created.
   */
  created?: Date | undefined;
  /**
   * The name of the Shared Env Var.
   */
  key?: string | undefined;
  /**
   * The unique identifier of the owner (team) the Shared Env Var was created for.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the Shared Env Var.
   */
  id?: string | undefined;
  /**
   * The unique identifier of the user who created the Shared Env Var.
   */
  createdBy?: string | null | undefined;
  /**
   * The unique identifier of the user who deleted the Shared Env Var.
   */
  deletedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who last updated the Shared Env Var.
   */
  updatedBy?: string | null | undefined;
  /**
   * Timestamp for when the Shared Env Var was created.
   */
  createdAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was (soft) deleted.
   */
  deletedAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was last updated.
   */
  updatedAt?: number | undefined;
  /**
   * The value of the Shared Env Var.
   */
  value?: string | undefined;
  /**
   * The unique identifiers of the projects which the Shared Env Var is linked to.
   */
  projectId?: Array<string> | undefined;
  /**
   * The type of this cosmos doc instance, if blank, assume secret.
   */
  type?: GetSharedEnvVarType | undefined;
  /**
   * environments this env variable targets
   */
  target?: Array<GetSharedEnvVarTarget> | undefined;
  /**
   * whether or not this env varible applies to custom environments
   */
  applyToAllCustomEnvironments?: boolean | undefined;
  /**
   * whether or not this env variable is decrypted
   */
  decrypted?: boolean | undefined;
  /**
   * A user provided comment that describes what this Shared Env Var is for.
   */
  comment?: string | undefined;
  /**
   * The last editor full name or username.
   */
  lastEditedByDisplayName?: string | undefined;
};

/** @internal */
export const GetSharedEnvVarRequest$inboundSchema: z.ZodType<
  GetSharedEnvVarRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type GetSharedEnvVarRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const GetSharedEnvVarRequest$outboundSchema: z.ZodType<
  GetSharedEnvVarRequest$Outbound,
  z.ZodTypeDef,
  GetSharedEnvVarRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSharedEnvVarRequest$ {
  /** @deprecated use `GetSharedEnvVarRequest$inboundSchema` instead. */
  export const inboundSchema = GetSharedEnvVarRequest$inboundSchema;
  /** @deprecated use `GetSharedEnvVarRequest$outboundSchema` instead. */
  export const outboundSchema = GetSharedEnvVarRequest$outboundSchema;
  /** @deprecated use `GetSharedEnvVarRequest$Outbound` instead. */
  export type Outbound = GetSharedEnvVarRequest$Outbound;
}

export function getSharedEnvVarRequestToJSON(
  getSharedEnvVarRequest: GetSharedEnvVarRequest,
): string {
  return JSON.stringify(
    GetSharedEnvVarRequest$outboundSchema.parse(getSharedEnvVarRequest),
  );
}

export function getSharedEnvVarRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetSharedEnvVarRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSharedEnvVarRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSharedEnvVarRequest' from JSON`,
  );
}

/** @internal */
export const GetSharedEnvVarType$inboundSchema: z.ZodNativeEnum<
  typeof GetSharedEnvVarType
> = z.nativeEnum(GetSharedEnvVarType);

/** @internal */
export const GetSharedEnvVarType$outboundSchema: z.ZodNativeEnum<
  typeof GetSharedEnvVarType
> = GetSharedEnvVarType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSharedEnvVarType$ {
  /** @deprecated use `GetSharedEnvVarType$inboundSchema` instead. */
  export const inboundSchema = GetSharedEnvVarType$inboundSchema;
  /** @deprecated use `GetSharedEnvVarType$outboundSchema` instead. */
  export const outboundSchema = GetSharedEnvVarType$outboundSchema;
}

/** @internal */
export const GetSharedEnvVarTarget$inboundSchema: z.ZodNativeEnum<
  typeof GetSharedEnvVarTarget
> = z.nativeEnum(GetSharedEnvVarTarget);

/** @internal */
export const GetSharedEnvVarTarget$outboundSchema: z.ZodNativeEnum<
  typeof GetSharedEnvVarTarget
> = GetSharedEnvVarTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSharedEnvVarTarget$ {
  /** @deprecated use `GetSharedEnvVarTarget$inboundSchema` instead. */
  export const inboundSchema = GetSharedEnvVarTarget$inboundSchema;
  /** @deprecated use `GetSharedEnvVarTarget$outboundSchema` instead. */
  export const outboundSchema = GetSharedEnvVarTarget$outboundSchema;
}

/** @internal */
export const GetSharedEnvVarResponseBody$inboundSchema: z.ZodType<
  GetSharedEnvVarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  created: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  key: z.string().optional(),
  ownerId: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  createdBy: z.nullable(z.string()).optional(),
  deletedBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  deletedAt: z.number().optional(),
  updatedAt: z.number().optional(),
  value: z.string().optional(),
  projectId: z.array(z.string()).optional(),
  type: GetSharedEnvVarType$inboundSchema.optional(),
  target: z.array(GetSharedEnvVarTarget$inboundSchema).optional(),
  applyToAllCustomEnvironments: z.boolean().optional(),
  decrypted: z.boolean().optional(),
  comment: z.string().optional(),
  lastEditedByDisplayName: z.string().optional(),
});

/** @internal */
export type GetSharedEnvVarResponseBody$Outbound = {
  created?: string | undefined;
  key?: string | undefined;
  ownerId?: string | null | undefined;
  id?: string | undefined;
  createdBy?: string | null | undefined;
  deletedBy?: string | null | undefined;
  updatedBy?: string | null | undefined;
  createdAt?: number | undefined;
  deletedAt?: number | undefined;
  updatedAt?: number | undefined;
  value?: string | undefined;
  projectId?: Array<string> | undefined;
  type?: string | undefined;
  target?: Array<string> | undefined;
  applyToAllCustomEnvironments?: boolean | undefined;
  decrypted?: boolean | undefined;
  comment?: string | undefined;
  lastEditedByDisplayName?: string | undefined;
};

/** @internal */
export const GetSharedEnvVarResponseBody$outboundSchema: z.ZodType<
  GetSharedEnvVarResponseBody$Outbound,
  z.ZodTypeDef,
  GetSharedEnvVarResponseBody
> = z.object({
  created: z.date().transform(v => v.toISOString()).optional(),
  key: z.string().optional(),
  ownerId: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  createdBy: z.nullable(z.string()).optional(),
  deletedBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  deletedAt: z.number().optional(),
  updatedAt: z.number().optional(),
  value: z.string().optional(),
  projectId: z.array(z.string()).optional(),
  type: GetSharedEnvVarType$outboundSchema.optional(),
  target: z.array(GetSharedEnvVarTarget$outboundSchema).optional(),
  applyToAllCustomEnvironments: z.boolean().optional(),
  decrypted: z.boolean().optional(),
  comment: z.string().optional(),
  lastEditedByDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetSharedEnvVarResponseBody$ {
  /** @deprecated use `GetSharedEnvVarResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetSharedEnvVarResponseBody$inboundSchema;
  /** @deprecated use `GetSharedEnvVarResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetSharedEnvVarResponseBody$outboundSchema;
  /** @deprecated use `GetSharedEnvVarResponseBody$Outbound` instead. */
  export type Outbound = GetSharedEnvVarResponseBody$Outbound;
}

export function getSharedEnvVarResponseBodyToJSON(
  getSharedEnvVarResponseBody: GetSharedEnvVarResponseBody,
): string {
  return JSON.stringify(
    GetSharedEnvVarResponseBody$outboundSchema.parse(
      getSharedEnvVarResponseBody,
    ),
  );
}

export function getSharedEnvVarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetSharedEnvVarResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetSharedEnvVarResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetSharedEnvVarResponseBody' from JSON`,
  );
}
