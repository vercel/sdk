/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  TldNotSupported,
  TldNotSupported$inboundSchema,
  TldNotSupported$Outbound,
  TldNotSupported$outboundSchema,
} from "./tldnotsupported.js";

export type GetTldPriceRequest = {
  tld: string;
  years?: string | undefined;
};

/**
 * There was something wrong with the request
 */
export type GetTldPriceDomainsRegistrarResponseBody =
  | HttpApiDecodeError
  | TldNotSupported;

/**
 * Success
 */
export type GetTldPriceResponseBody = {
  years: number;
  /**
   * Represents a monetary amount in USD dollars
   */
  purchasePrice: number;
  /**
   * Represents a monetary amount in USD dollars
   */
  renewalPrice: number;
  /**
   * Represents a monetary amount in USD dollars
   */
  transferPrice: number;
};

/** @internal */
export const GetTldPriceRequest$inboundSchema: z.ZodType<
  GetTldPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  tld: z.string(),
  years: z.string().optional(),
});

/** @internal */
export type GetTldPriceRequest$Outbound = {
  tld: string;
  years?: string | undefined;
};

/** @internal */
export const GetTldPriceRequest$outboundSchema: z.ZodType<
  GetTldPriceRequest$Outbound,
  z.ZodTypeDef,
  GetTldPriceRequest
> = z.object({
  tld: z.string(),
  years: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTldPriceRequest$ {
  /** @deprecated use `GetTldPriceRequest$inboundSchema` instead. */
  export const inboundSchema = GetTldPriceRequest$inboundSchema;
  /** @deprecated use `GetTldPriceRequest$outboundSchema` instead. */
  export const outboundSchema = GetTldPriceRequest$outboundSchema;
  /** @deprecated use `GetTldPriceRequest$Outbound` instead. */
  export type Outbound = GetTldPriceRequest$Outbound;
}

export function getTldPriceRequestToJSON(
  getTldPriceRequest: GetTldPriceRequest,
): string {
  return JSON.stringify(
    GetTldPriceRequest$outboundSchema.parse(getTldPriceRequest),
  );
}

export function getTldPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTldPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTldPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTldPriceRequest' from JSON`,
  );
}

/** @internal */
export const GetTldPriceDomainsRegistrarResponseBody$inboundSchema: z.ZodType<
  GetTldPriceDomainsRegistrarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([HttpApiDecodeError$inboundSchema, TldNotSupported$inboundSchema]);

/** @internal */
export type GetTldPriceDomainsRegistrarResponseBody$Outbound =
  | HttpApiDecodeError$Outbound
  | TldNotSupported$Outbound;

/** @internal */
export const GetTldPriceDomainsRegistrarResponseBody$outboundSchema: z.ZodType<
  GetTldPriceDomainsRegistrarResponseBody$Outbound,
  z.ZodTypeDef,
  GetTldPriceDomainsRegistrarResponseBody
> = z.union([
  HttpApiDecodeError$outboundSchema,
  TldNotSupported$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTldPriceDomainsRegistrarResponseBody$ {
  /** @deprecated use `GetTldPriceDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetTldPriceDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `GetTldPriceDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetTldPriceDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `GetTldPriceDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = GetTldPriceDomainsRegistrarResponseBody$Outbound;
}

export function getTldPriceDomainsRegistrarResponseBodyToJSON(
  getTldPriceDomainsRegistrarResponseBody:
    GetTldPriceDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    GetTldPriceDomainsRegistrarResponseBody$outboundSchema.parse(
      getTldPriceDomainsRegistrarResponseBody,
    ),
  );
}

export function getTldPriceDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTldPriceDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTldPriceDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTldPriceDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const GetTldPriceResponseBody$inboundSchema: z.ZodType<
  GetTldPriceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  years: z.number(),
  purchasePrice: z.number(),
  renewalPrice: z.number(),
  transferPrice: z.number(),
});

/** @internal */
export type GetTldPriceResponseBody$Outbound = {
  years: number;
  purchasePrice: number;
  renewalPrice: number;
  transferPrice: number;
};

/** @internal */
export const GetTldPriceResponseBody$outboundSchema: z.ZodType<
  GetTldPriceResponseBody$Outbound,
  z.ZodTypeDef,
  GetTldPriceResponseBody
> = z.object({
  years: z.number(),
  purchasePrice: z.number(),
  renewalPrice: z.number(),
  transferPrice: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTldPriceResponseBody$ {
  /** @deprecated use `GetTldPriceResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetTldPriceResponseBody$inboundSchema;
  /** @deprecated use `GetTldPriceResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetTldPriceResponseBody$outboundSchema;
  /** @deprecated use `GetTldPriceResponseBody$Outbound` instead. */
  export type Outbound = GetTldPriceResponseBody$Outbound;
}

export function getTldPriceResponseBodyToJSON(
  getTldPriceResponseBody: GetTldPriceResponseBody,
): string {
  return JSON.stringify(
    GetTldPriceResponseBody$outboundSchema.parse(getTldPriceResponseBody),
  );
}

export function getTldPriceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetTldPriceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTldPriceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTldPriceResponseBody' from JSON`,
  );
}
