/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type GetV1SecurityFirewallEventsRequest = {
  projectId: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
};

export type Actions = {
  startTime: string;
  endTime: string;
  isActive: boolean;
  actionType: string;
  host: string;
  publicIp: string;
  count: number;
};

export type GetV1SecurityFirewallEventsResponseBody = {
  actions: Array<Actions>;
};

/** @internal */
export const GetV1SecurityFirewallEventsRequest$inboundSchema: z.ZodType<
  GetV1SecurityFirewallEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectId: z.string(),
  startTimestamp: z.number().optional(),
  endTimestamp: z.number().optional(),
});

/** @internal */
export type GetV1SecurityFirewallEventsRequest$Outbound = {
  projectId: string;
  startTimestamp?: number | undefined;
  endTimestamp?: number | undefined;
};

/** @internal */
export const GetV1SecurityFirewallEventsRequest$outboundSchema: z.ZodType<
  GetV1SecurityFirewallEventsRequest$Outbound,
  z.ZodTypeDef,
  GetV1SecurityFirewallEventsRequest
> = z.object({
  projectId: z.string(),
  startTimestamp: z.number().optional(),
  endTimestamp: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1SecurityFirewallEventsRequest$ {
  /** @deprecated use `GetV1SecurityFirewallEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1SecurityFirewallEventsRequest$inboundSchema;
  /** @deprecated use `GetV1SecurityFirewallEventsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1SecurityFirewallEventsRequest$outboundSchema;
  /** @deprecated use `GetV1SecurityFirewallEventsRequest$Outbound` instead. */
  export type Outbound = GetV1SecurityFirewallEventsRequest$Outbound;
}

export function getV1SecurityFirewallEventsRequestToJSON(
  getV1SecurityFirewallEventsRequest: GetV1SecurityFirewallEventsRequest,
): string {
  return JSON.stringify(
    GetV1SecurityFirewallEventsRequest$outboundSchema.parse(
      getV1SecurityFirewallEventsRequest,
    ),
  );
}

export function getV1SecurityFirewallEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1SecurityFirewallEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1SecurityFirewallEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1SecurityFirewallEventsRequest' from JSON`,
  );
}

/** @internal */
export const Actions$inboundSchema: z.ZodType<Actions, z.ZodTypeDef, unknown> =
  z.object({
    startTime: z.string(),
    endTime: z.string(),
    isActive: z.boolean(),
    action_type: z.string(),
    host: z.string(),
    public_ip: z.string(),
    count: z.number(),
  }).transform((v) => {
    return remap$(v, {
      "action_type": "actionType",
      "public_ip": "publicIp",
    });
  });

/** @internal */
export type Actions$Outbound = {
  startTime: string;
  endTime: string;
  isActive: boolean;
  action_type: string;
  host: string;
  public_ip: string;
  count: number;
};

/** @internal */
export const Actions$outboundSchema: z.ZodType<
  Actions$Outbound,
  z.ZodTypeDef,
  Actions
> = z.object({
  startTime: z.string(),
  endTime: z.string(),
  isActive: z.boolean(),
  actionType: z.string(),
  host: z.string(),
  publicIp: z.string(),
  count: z.number(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    publicIp: "public_ip",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Actions$ {
  /** @deprecated use `Actions$inboundSchema` instead. */
  export const inboundSchema = Actions$inboundSchema;
  /** @deprecated use `Actions$outboundSchema` instead. */
  export const outboundSchema = Actions$outboundSchema;
  /** @deprecated use `Actions$Outbound` instead. */
  export type Outbound = Actions$Outbound;
}

export function actionsToJSON(actions: Actions): string {
  return JSON.stringify(Actions$outboundSchema.parse(actions));
}

export function actionsFromJSON(
  jsonString: string,
): SafeParseResult<Actions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Actions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Actions' from JSON`,
  );
}

/** @internal */
export const GetV1SecurityFirewallEventsResponseBody$inboundSchema: z.ZodType<
  GetV1SecurityFirewallEventsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  actions: z.array(z.lazy(() => Actions$inboundSchema)),
});

/** @internal */
export type GetV1SecurityFirewallEventsResponseBody$Outbound = {
  actions: Array<Actions$Outbound>;
};

/** @internal */
export const GetV1SecurityFirewallEventsResponseBody$outboundSchema: z.ZodType<
  GetV1SecurityFirewallEventsResponseBody$Outbound,
  z.ZodTypeDef,
  GetV1SecurityFirewallEventsResponseBody
> = z.object({
  actions: z.array(z.lazy(() => Actions$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1SecurityFirewallEventsResponseBody$ {
  /** @deprecated use `GetV1SecurityFirewallEventsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV1SecurityFirewallEventsResponseBody$inboundSchema;
  /** @deprecated use `GetV1SecurityFirewallEventsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV1SecurityFirewallEventsResponseBody$outboundSchema;
  /** @deprecated use `GetV1SecurityFirewallEventsResponseBody$Outbound` instead. */
  export type Outbound = GetV1SecurityFirewallEventsResponseBody$Outbound;
}

export function getV1SecurityFirewallEventsResponseBodyToJSON(
  getV1SecurityFirewallEventsResponseBody:
    GetV1SecurityFirewallEventsResponseBody,
): string {
  return JSON.stringify(
    GetV1SecurityFirewallEventsResponseBody$outboundSchema.parse(
      getV1SecurityFirewallEventsResponseBody,
    ),
  );
}

export function getV1SecurityFirewallEventsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1SecurityFirewallEventsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1SecurityFirewallEventsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1SecurityFirewallEventsResponseBody' from JSON`,
  );
}
