/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import {
  Issue,
  Issue$inboundSchema,
  Issue$Outbound,
  Issue$outboundSchema,
} from "./issue.js";
import { VercelError } from "./vercelerror.js";

export const HttpApiDecodeErrorTag = {
  HttpApiDecodeError: "HttpApiDecodeError",
} as const;
export type HttpApiDecodeErrorTag = ClosedEnum<typeof HttpApiDecodeErrorTag>;

/**
 * The request did not match the expected schema
 */
export type HttpApiDecodeErrorData = {
  issues: Array<Issue>;
  message: string;
  tag: HttpApiDecodeErrorTag;
};

/**
 * The request did not match the expected schema
 */
export class HttpApiDecodeError extends VercelError {
  issues: Array<Issue>;
  tag: HttpApiDecodeErrorTag;

  /** The original data that was passed to this error instance. */
  data$: HttpApiDecodeErrorData;

  constructor(
    err: HttpApiDecodeErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.issues = err.issues;
    this.tag = err.tag;

    this.name = "HttpApiDecodeError";
  }
}

/** @internal */
export const HttpApiDecodeErrorTag$inboundSchema: z.ZodNativeEnum<
  typeof HttpApiDecodeErrorTag
> = z.nativeEnum(HttpApiDecodeErrorTag);

/** @internal */
export const HttpApiDecodeErrorTag$outboundSchema: z.ZodNativeEnum<
  typeof HttpApiDecodeErrorTag
> = HttpApiDecodeErrorTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpApiDecodeErrorTag$ {
  /** @deprecated use `HttpApiDecodeErrorTag$inboundSchema` instead. */
  export const inboundSchema = HttpApiDecodeErrorTag$inboundSchema;
  /** @deprecated use `HttpApiDecodeErrorTag$outboundSchema` instead. */
  export const outboundSchema = HttpApiDecodeErrorTag$outboundSchema;
}

/** @internal */
export const HttpApiDecodeError$inboundSchema: z.ZodType<
  HttpApiDecodeError,
  z.ZodTypeDef,
  unknown
> = z.object({
  issues: z.array(Issue$inboundSchema),
  message: z.string(),
  _tag: HttpApiDecodeErrorTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new HttpApiDecodeError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type HttpApiDecodeError$Outbound = {
  issues: Array<Issue$Outbound>;
  message: string;
  _tag: string;
};

/** @internal */
export const HttpApiDecodeError$outboundSchema: z.ZodType<
  HttpApiDecodeError$Outbound,
  z.ZodTypeDef,
  HttpApiDecodeError
> = z.instanceof(HttpApiDecodeError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      issues: z.array(Issue$outboundSchema),
      message: z.string(),
      tag: HttpApiDecodeErrorTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HttpApiDecodeError$ {
  /** @deprecated use `HttpApiDecodeError$inboundSchema` instead. */
  export const inboundSchema = HttpApiDecodeError$inboundSchema;
  /** @deprecated use `HttpApiDecodeError$outboundSchema` instead. */
  export const outboundSchema = HttpApiDecodeError$outboundSchema;
  /** @deprecated use `HttpApiDecodeError$Outbound` instead. */
  export type Outbound = HttpApiDecodeError$Outbound;
}
