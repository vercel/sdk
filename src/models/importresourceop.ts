/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const Ownership = {
  Owned: "owned",
  Linked: "linked",
  Sandbox: "sandbox",
} as const;
export type Ownership = ClosedEnum<typeof Ownership>;

export const ImportResourceStatus = {
  Ready: "ready",
  Pending: "pending",
  Onboarding: "onboarding",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
export type ImportResourceStatus = ClosedEnum<typeof ImportResourceStatus>;

export const ImportResourceType = {
  Prepayment: "prepayment",
  Subscription: "subscription",
} as const;
export type ImportResourceType = ClosedEnum<typeof ImportResourceType>;

export type ImportResourceDetails = {
  label: string;
  value?: string | undefined;
};

export type ImportResourceHighlightedDetails = {
  label: string;
  value?: string | undefined;
};

export type ImportResourceBillingPlan = {
  id: string;
  type: ImportResourceType;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<ImportResourceDetails> | undefined;
  highlightedDetails?: Array<ImportResourceHighlightedDetails> | undefined;
  effectiveDate?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export const ImportResourceLevel = {
  Info: "info",
  Warn: "warn",
  Error: "error",
} as const;
export type ImportResourceLevel = ClosedEnum<typeof ImportResourceLevel>;

export type ImportResourceNotification = {
  level: ImportResourceLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/**
 * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
 */
export type EnvironmentOverrides = {
  /**
   * Value used for development environment.
   */
  development?: string | undefined;
  /**
   * Value used for preview environment.
   */
  preview?: string | undefined;
  /**
   * Value used for production environment.
   */
  production?: string | undefined;
};

export type ImportResourceSecrets = {
  name: string;
  value: string;
  prefix?: string | undefined;
  /**
   * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
   */
  environmentOverrides?: EnvironmentOverrides | undefined;
};

export type ImportResourceRequestBody = {
  ownership?: Ownership | undefined;
  productId: string;
  name: string;
  status: ImportResourceStatus;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: ImportResourceBillingPlan | undefined;
  notification?: ImportResourceNotification | undefined;
  extras?: { [k: string]: any } | undefined;
  secrets?: Array<ImportResourceSecrets> | undefined;
};

export type ImportResourceRequest = {
  integrationConfigurationId: string;
  resourceId: string;
  requestBody?: ImportResourceRequestBody | undefined;
};

export type ImportResourceResponseBody = {
  name: string;
};

/** @internal */
export const Ownership$inboundSchema: z.ZodNativeEnum<typeof Ownership> = z
  .nativeEnum(Ownership);

/** @internal */
export const Ownership$outboundSchema: z.ZodNativeEnum<typeof Ownership> =
  Ownership$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ownership$ {
  /** @deprecated use `Ownership$inboundSchema` instead. */
  export const inboundSchema = Ownership$inboundSchema;
  /** @deprecated use `Ownership$outboundSchema` instead. */
  export const outboundSchema = Ownership$outboundSchema;
}

/** @internal */
export const ImportResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof ImportResourceStatus
> = z.nativeEnum(ImportResourceStatus);

/** @internal */
export const ImportResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof ImportResourceStatus
> = ImportResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceStatus$ {
  /** @deprecated use `ImportResourceStatus$inboundSchema` instead. */
  export const inboundSchema = ImportResourceStatus$inboundSchema;
  /** @deprecated use `ImportResourceStatus$outboundSchema` instead. */
  export const outboundSchema = ImportResourceStatus$outboundSchema;
}

/** @internal */
export const ImportResourceType$inboundSchema: z.ZodNativeEnum<
  typeof ImportResourceType
> = z.nativeEnum(ImportResourceType);

/** @internal */
export const ImportResourceType$outboundSchema: z.ZodNativeEnum<
  typeof ImportResourceType
> = ImportResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceType$ {
  /** @deprecated use `ImportResourceType$inboundSchema` instead. */
  export const inboundSchema = ImportResourceType$inboundSchema;
  /** @deprecated use `ImportResourceType$outboundSchema` instead. */
  export const outboundSchema = ImportResourceType$outboundSchema;
}

/** @internal */
export const ImportResourceDetails$inboundSchema: z.ZodType<
  ImportResourceDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type ImportResourceDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const ImportResourceDetails$outboundSchema: z.ZodType<
  ImportResourceDetails$Outbound,
  z.ZodTypeDef,
  ImportResourceDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceDetails$ {
  /** @deprecated use `ImportResourceDetails$inboundSchema` instead. */
  export const inboundSchema = ImportResourceDetails$inboundSchema;
  /** @deprecated use `ImportResourceDetails$outboundSchema` instead. */
  export const outboundSchema = ImportResourceDetails$outboundSchema;
  /** @deprecated use `ImportResourceDetails$Outbound` instead. */
  export type Outbound = ImportResourceDetails$Outbound;
}

export function importResourceDetailsToJSON(
  importResourceDetails: ImportResourceDetails,
): string {
  return JSON.stringify(
    ImportResourceDetails$outboundSchema.parse(importResourceDetails),
  );
}

export function importResourceDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceDetails' from JSON`,
  );
}

/** @internal */
export const ImportResourceHighlightedDetails$inboundSchema: z.ZodType<
  ImportResourceHighlightedDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type ImportResourceHighlightedDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const ImportResourceHighlightedDetails$outboundSchema: z.ZodType<
  ImportResourceHighlightedDetails$Outbound,
  z.ZodTypeDef,
  ImportResourceHighlightedDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceHighlightedDetails$ {
  /** @deprecated use `ImportResourceHighlightedDetails$inboundSchema` instead. */
  export const inboundSchema = ImportResourceHighlightedDetails$inboundSchema;
  /** @deprecated use `ImportResourceHighlightedDetails$outboundSchema` instead. */
  export const outboundSchema = ImportResourceHighlightedDetails$outboundSchema;
  /** @deprecated use `ImportResourceHighlightedDetails$Outbound` instead. */
  export type Outbound = ImportResourceHighlightedDetails$Outbound;
}

export function importResourceHighlightedDetailsToJSON(
  importResourceHighlightedDetails: ImportResourceHighlightedDetails,
): string {
  return JSON.stringify(
    ImportResourceHighlightedDetails$outboundSchema.parse(
      importResourceHighlightedDetails,
    ),
  );
}

export function importResourceHighlightedDetailsFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceHighlightedDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceHighlightedDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceHighlightedDetails' from JSON`,
  );
}

/** @internal */
export const ImportResourceBillingPlan$inboundSchema: z.ZodType<
  ImportResourceBillingPlan,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    type: ImportResourceType$inboundSchema,
    name: z.string(),
    description: z.string().optional(),
    paymentMethodRequired: z.boolean().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => ImportResourceDetails$inboundSchema))
      .optional(),
    highlightedDetails: z.array(
      z.lazy(() => ImportResourceHighlightedDetails$inboundSchema),
    ).optional(),
    effectiveDate: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type ImportResourceBillingPlan$Outbound = {
  id: string;
  type: string;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<ImportResourceDetails$Outbound> | undefined;
  highlightedDetails?:
    | Array<ImportResourceHighlightedDetails$Outbound>
    | undefined;
  effectiveDate?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ImportResourceBillingPlan$outboundSchema: z.ZodType<
  ImportResourceBillingPlan$Outbound,
  z.ZodTypeDef,
  ImportResourceBillingPlan
> = z.object({
  id: z.string(),
  type: ImportResourceType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  paymentMethodRequired: z.boolean().optional(),
  cost: z.string().optional(),
  details: z.array(z.lazy(() => ImportResourceDetails$outboundSchema))
    .optional(),
  highlightedDetails: z.array(
    z.lazy(() => ImportResourceHighlightedDetails$outboundSchema),
  ).optional(),
  effectiveDate: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceBillingPlan$ {
  /** @deprecated use `ImportResourceBillingPlan$inboundSchema` instead. */
  export const inboundSchema = ImportResourceBillingPlan$inboundSchema;
  /** @deprecated use `ImportResourceBillingPlan$outboundSchema` instead. */
  export const outboundSchema = ImportResourceBillingPlan$outboundSchema;
  /** @deprecated use `ImportResourceBillingPlan$Outbound` instead. */
  export type Outbound = ImportResourceBillingPlan$Outbound;
}

export function importResourceBillingPlanToJSON(
  importResourceBillingPlan: ImportResourceBillingPlan,
): string {
  return JSON.stringify(
    ImportResourceBillingPlan$outboundSchema.parse(importResourceBillingPlan),
  );
}

export function importResourceBillingPlanFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceBillingPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceBillingPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceBillingPlan' from JSON`,
  );
}

/** @internal */
export const ImportResourceLevel$inboundSchema: z.ZodNativeEnum<
  typeof ImportResourceLevel
> = z.nativeEnum(ImportResourceLevel);

/** @internal */
export const ImportResourceLevel$outboundSchema: z.ZodNativeEnum<
  typeof ImportResourceLevel
> = ImportResourceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceLevel$ {
  /** @deprecated use `ImportResourceLevel$inboundSchema` instead. */
  export const inboundSchema = ImportResourceLevel$inboundSchema;
  /** @deprecated use `ImportResourceLevel$outboundSchema` instead. */
  export const outboundSchema = ImportResourceLevel$outboundSchema;
}

/** @internal */
export const ImportResourceNotification$inboundSchema: z.ZodType<
  ImportResourceNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: ImportResourceLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type ImportResourceNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const ImportResourceNotification$outboundSchema: z.ZodType<
  ImportResourceNotification$Outbound,
  z.ZodTypeDef,
  ImportResourceNotification
> = z.object({
  level: ImportResourceLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceNotification$ {
  /** @deprecated use `ImportResourceNotification$inboundSchema` instead. */
  export const inboundSchema = ImportResourceNotification$inboundSchema;
  /** @deprecated use `ImportResourceNotification$outboundSchema` instead. */
  export const outboundSchema = ImportResourceNotification$outboundSchema;
  /** @deprecated use `ImportResourceNotification$Outbound` instead. */
  export type Outbound = ImportResourceNotification$Outbound;
}

export function importResourceNotificationToJSON(
  importResourceNotification: ImportResourceNotification,
): string {
  return JSON.stringify(
    ImportResourceNotification$outboundSchema.parse(importResourceNotification),
  );
}

export function importResourceNotificationFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceNotification' from JSON`,
  );
}

/** @internal */
export const EnvironmentOverrides$inboundSchema: z.ZodType<
  EnvironmentOverrides,
  z.ZodTypeDef,
  unknown
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/** @internal */
export type EnvironmentOverrides$Outbound = {
  development?: string | undefined;
  preview?: string | undefined;
  production?: string | undefined;
};

/** @internal */
export const EnvironmentOverrides$outboundSchema: z.ZodType<
  EnvironmentOverrides$Outbound,
  z.ZodTypeDef,
  EnvironmentOverrides
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnvironmentOverrides$ {
  /** @deprecated use `EnvironmentOverrides$inboundSchema` instead. */
  export const inboundSchema = EnvironmentOverrides$inboundSchema;
  /** @deprecated use `EnvironmentOverrides$outboundSchema` instead. */
  export const outboundSchema = EnvironmentOverrides$outboundSchema;
  /** @deprecated use `EnvironmentOverrides$Outbound` instead. */
  export type Outbound = EnvironmentOverrides$Outbound;
}

export function environmentOverridesToJSON(
  environmentOverrides: EnvironmentOverrides,
): string {
  return JSON.stringify(
    EnvironmentOverrides$outboundSchema.parse(environmentOverrides),
  );
}

export function environmentOverridesFromJSON(
  jsonString: string,
): SafeParseResult<EnvironmentOverrides, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnvironmentOverrides$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnvironmentOverrides' from JSON`,
  );
}

/** @internal */
export const ImportResourceSecrets$inboundSchema: z.ZodType<
  ImportResourceSecrets,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() => EnvironmentOverrides$inboundSchema)
    .optional(),
});

/** @internal */
export type ImportResourceSecrets$Outbound = {
  name: string;
  value: string;
  prefix?: string | undefined;
  environmentOverrides?: EnvironmentOverrides$Outbound | undefined;
};

/** @internal */
export const ImportResourceSecrets$outboundSchema: z.ZodType<
  ImportResourceSecrets$Outbound,
  z.ZodTypeDef,
  ImportResourceSecrets
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() => EnvironmentOverrides$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceSecrets$ {
  /** @deprecated use `ImportResourceSecrets$inboundSchema` instead. */
  export const inboundSchema = ImportResourceSecrets$inboundSchema;
  /** @deprecated use `ImportResourceSecrets$outboundSchema` instead. */
  export const outboundSchema = ImportResourceSecrets$outboundSchema;
  /** @deprecated use `ImportResourceSecrets$Outbound` instead. */
  export type Outbound = ImportResourceSecrets$Outbound;
}

export function importResourceSecretsToJSON(
  importResourceSecrets: ImportResourceSecrets,
): string {
  return JSON.stringify(
    ImportResourceSecrets$outboundSchema.parse(importResourceSecrets),
  );
}

export function importResourceSecretsFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceSecrets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceSecrets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceSecrets' from JSON`,
  );
}

/** @internal */
export const ImportResourceRequestBody$inboundSchema: z.ZodType<
  ImportResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ownership: Ownership$inboundSchema.optional(),
  productId: z.string(),
  name: z.string(),
  status: ImportResourceStatus$inboundSchema,
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => ImportResourceBillingPlan$inboundSchema).optional(),
  notification: z.lazy(() => ImportResourceNotification$inboundSchema)
    .optional(),
  extras: z.record(z.any()).optional(),
  secrets: z.array(z.lazy(() => ImportResourceSecrets$inboundSchema))
    .optional(),
});

/** @internal */
export type ImportResourceRequestBody$Outbound = {
  ownership?: string | undefined;
  productId: string;
  name: string;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: ImportResourceBillingPlan$Outbound | undefined;
  notification?: ImportResourceNotification$Outbound | undefined;
  extras?: { [k: string]: any } | undefined;
  secrets?: Array<ImportResourceSecrets$Outbound> | undefined;
};

/** @internal */
export const ImportResourceRequestBody$outboundSchema: z.ZodType<
  ImportResourceRequestBody$Outbound,
  z.ZodTypeDef,
  ImportResourceRequestBody
> = z.object({
  ownership: Ownership$outboundSchema.optional(),
  productId: z.string(),
  name: z.string(),
  status: ImportResourceStatus$outboundSchema,
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => ImportResourceBillingPlan$outboundSchema)
    .optional(),
  notification: z.lazy(() => ImportResourceNotification$outboundSchema)
    .optional(),
  extras: z.record(z.any()).optional(),
  secrets: z.array(z.lazy(() => ImportResourceSecrets$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceRequestBody$ {
  /** @deprecated use `ImportResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = ImportResourceRequestBody$inboundSchema;
  /** @deprecated use `ImportResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = ImportResourceRequestBody$outboundSchema;
  /** @deprecated use `ImportResourceRequestBody$Outbound` instead. */
  export type Outbound = ImportResourceRequestBody$Outbound;
}

export function importResourceRequestBodyToJSON(
  importResourceRequestBody: ImportResourceRequestBody,
): string {
  return JSON.stringify(
    ImportResourceRequestBody$outboundSchema.parse(importResourceRequestBody),
  );
}

export function importResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const ImportResourceRequest$inboundSchema: z.ZodType<
  ImportResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  RequestBody: z.lazy(() => ImportResourceRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type ImportResourceRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
  RequestBody?: ImportResourceRequestBody$Outbound | undefined;
};

/** @internal */
export const ImportResourceRequest$outboundSchema: z.ZodType<
  ImportResourceRequest$Outbound,
  z.ZodTypeDef,
  ImportResourceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  requestBody: z.lazy(() => ImportResourceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceRequest$ {
  /** @deprecated use `ImportResourceRequest$inboundSchema` instead. */
  export const inboundSchema = ImportResourceRequest$inboundSchema;
  /** @deprecated use `ImportResourceRequest$outboundSchema` instead. */
  export const outboundSchema = ImportResourceRequest$outboundSchema;
  /** @deprecated use `ImportResourceRequest$Outbound` instead. */
  export type Outbound = ImportResourceRequest$Outbound;
}

export function importResourceRequestToJSON(
  importResourceRequest: ImportResourceRequest,
): string {
  return JSON.stringify(
    ImportResourceRequest$outboundSchema.parse(importResourceRequest),
  );
}

export function importResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceRequest' from JSON`,
  );
}

/** @internal */
export const ImportResourceResponseBody$inboundSchema: z.ZodType<
  ImportResourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type ImportResourceResponseBody$Outbound = {
  name: string;
};

/** @internal */
export const ImportResourceResponseBody$outboundSchema: z.ZodType<
  ImportResourceResponseBody$Outbound,
  z.ZodTypeDef,
  ImportResourceResponseBody
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImportResourceResponseBody$ {
  /** @deprecated use `ImportResourceResponseBody$inboundSchema` instead. */
  export const inboundSchema = ImportResourceResponseBody$inboundSchema;
  /** @deprecated use `ImportResourceResponseBody$outboundSchema` instead. */
  export const outboundSchema = ImportResourceResponseBody$outboundSchema;
  /** @deprecated use `ImportResourceResponseBody$Outbound` instead. */
  export type Outbound = ImportResourceResponseBody$Outbound;
}

export function importResourceResponseBodyToJSON(
  importResourceResponseBody: ImportResourceResponseBody,
): string {
  return JSON.stringify(
    ImportResourceResponseBody$outboundSchema.parse(importResourceResponseBody),
  );
}

export function importResourceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ImportResourceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImportResourceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImportResourceResponseBody' from JSON`,
  );
}
