/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const InvalidAdditionalContactInfoCode = {
  InvalidAdditionalContactInfo: "invalid_additional_contact_info",
} as const;
export type InvalidAdditionalContactInfoCode = ClosedEnum<
  typeof InvalidAdditionalContactInfoCode
>;

export const InvalidAdditionalContactInfoTag = {
  InvalidAdditionalContactInfo: "InvalidAdditionalContactInfo",
} as const;
export type InvalidAdditionalContactInfoTag = ClosedEnum<
  typeof InvalidAdditionalContactInfoTag
>;

export type InvalidAdditionalContactInfoData = {
  status: number;
  code: InvalidAdditionalContactInfoCode;
  message: string;
  tag: InvalidAdditionalContactInfoTag;
};

export class InvalidAdditionalContactInfo extends VercelError {
  status: number;
  code: InvalidAdditionalContactInfoCode;
  tag: InvalidAdditionalContactInfoTag;

  /** The original data that was passed to this error instance. */
  data$: InvalidAdditionalContactInfoData;

  constructor(
    err: InvalidAdditionalContactInfoData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "InvalidAdditionalContactInfo";
  }
}

/** @internal */
export const InvalidAdditionalContactInfoCode$inboundSchema: z.ZodNativeEnum<
  typeof InvalidAdditionalContactInfoCode
> = z.nativeEnum(InvalidAdditionalContactInfoCode);

/** @internal */
export const InvalidAdditionalContactInfoCode$outboundSchema: z.ZodNativeEnum<
  typeof InvalidAdditionalContactInfoCode
> = InvalidAdditionalContactInfoCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAdditionalContactInfoCode$ {
  /** @deprecated use `InvalidAdditionalContactInfoCode$inboundSchema` instead. */
  export const inboundSchema = InvalidAdditionalContactInfoCode$inboundSchema;
  /** @deprecated use `InvalidAdditionalContactInfoCode$outboundSchema` instead. */
  export const outboundSchema = InvalidAdditionalContactInfoCode$outboundSchema;
}

/** @internal */
export const InvalidAdditionalContactInfoTag$inboundSchema: z.ZodNativeEnum<
  typeof InvalidAdditionalContactInfoTag
> = z.nativeEnum(InvalidAdditionalContactInfoTag);

/** @internal */
export const InvalidAdditionalContactInfoTag$outboundSchema: z.ZodNativeEnum<
  typeof InvalidAdditionalContactInfoTag
> = InvalidAdditionalContactInfoTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAdditionalContactInfoTag$ {
  /** @deprecated use `InvalidAdditionalContactInfoTag$inboundSchema` instead. */
  export const inboundSchema = InvalidAdditionalContactInfoTag$inboundSchema;
  /** @deprecated use `InvalidAdditionalContactInfoTag$outboundSchema` instead. */
  export const outboundSchema = InvalidAdditionalContactInfoTag$outboundSchema;
}

/** @internal */
export const InvalidAdditionalContactInfo$inboundSchema: z.ZodType<
  InvalidAdditionalContactInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: InvalidAdditionalContactInfoCode$inboundSchema,
  message: z.string(),
  _tag: InvalidAdditionalContactInfoTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new InvalidAdditionalContactInfo(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type InvalidAdditionalContactInfo$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const InvalidAdditionalContactInfo$outboundSchema: z.ZodType<
  InvalidAdditionalContactInfo$Outbound,
  z.ZodTypeDef,
  InvalidAdditionalContactInfo
> = z.instanceof(InvalidAdditionalContactInfo)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: InvalidAdditionalContactInfoCode$outboundSchema,
      message: z.string(),
      tag: InvalidAdditionalContactInfoTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidAdditionalContactInfo$ {
  /** @deprecated use `InvalidAdditionalContactInfo$inboundSchema` instead. */
  export const inboundSchema = InvalidAdditionalContactInfo$inboundSchema;
  /** @deprecated use `InvalidAdditionalContactInfo$outboundSchema` instead. */
  export const outboundSchema = InvalidAdditionalContactInfo$outboundSchema;
  /** @deprecated use `InvalidAdditionalContactInfo$Outbound` instead. */
  export type Outbound = InvalidAdditionalContactInfo$Outbound;
}
