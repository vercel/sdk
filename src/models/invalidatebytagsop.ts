/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Tags = Array<string> | string;

export const InvalidateByTagsTarget = {
  Production: "production",
  Preview: "preview",
} as const;
export type InvalidateByTagsTarget = ClosedEnum<typeof InvalidateByTagsTarget>;

export type InvalidateByTagsRequestBody = {
  tags: Array<string> | string;
  target?: InvalidateByTagsTarget | undefined;
};

export type InvalidateByTagsRequest = {
  projectIdOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: InvalidateByTagsRequestBody | undefined;
};

/** @internal */
export const Tags$inboundSchema: z.ZodType<Tags, z.ZodTypeDef, unknown> = z
  .union([z.array(z.string()), z.string()]);

/** @internal */
export type Tags$Outbound = Array<string> | string;

/** @internal */
export const Tags$outboundSchema: z.ZodType<Tags$Outbound, z.ZodTypeDef, Tags> =
  z.union([z.array(z.string()), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tags$ {
  /** @deprecated use `Tags$inboundSchema` instead. */
  export const inboundSchema = Tags$inboundSchema;
  /** @deprecated use `Tags$outboundSchema` instead. */
  export const outboundSchema = Tags$outboundSchema;
  /** @deprecated use `Tags$Outbound` instead. */
  export type Outbound = Tags$Outbound;
}

export function tagsToJSON(tags: Tags): string {
  return JSON.stringify(Tags$outboundSchema.parse(tags));
}

export function tagsFromJSON(
  jsonString: string,
): SafeParseResult<Tags, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tags$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tags' from JSON`,
  );
}

/** @internal */
export const InvalidateByTagsTarget$inboundSchema: z.ZodNativeEnum<
  typeof InvalidateByTagsTarget
> = z.nativeEnum(InvalidateByTagsTarget);

/** @internal */
export const InvalidateByTagsTarget$outboundSchema: z.ZodNativeEnum<
  typeof InvalidateByTagsTarget
> = InvalidateByTagsTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidateByTagsTarget$ {
  /** @deprecated use `InvalidateByTagsTarget$inboundSchema` instead. */
  export const inboundSchema = InvalidateByTagsTarget$inboundSchema;
  /** @deprecated use `InvalidateByTagsTarget$outboundSchema` instead. */
  export const outboundSchema = InvalidateByTagsTarget$outboundSchema;
}

/** @internal */
export const InvalidateByTagsRequestBody$inboundSchema: z.ZodType<
  InvalidateByTagsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  tags: z.union([z.array(z.string()), z.string()]),
  target: InvalidateByTagsTarget$inboundSchema.optional(),
});

/** @internal */
export type InvalidateByTagsRequestBody$Outbound = {
  tags: Array<string> | string;
  target?: string | undefined;
};

/** @internal */
export const InvalidateByTagsRequestBody$outboundSchema: z.ZodType<
  InvalidateByTagsRequestBody$Outbound,
  z.ZodTypeDef,
  InvalidateByTagsRequestBody
> = z.object({
  tags: z.union([z.array(z.string()), z.string()]),
  target: InvalidateByTagsTarget$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidateByTagsRequestBody$ {
  /** @deprecated use `InvalidateByTagsRequestBody$inboundSchema` instead. */
  export const inboundSchema = InvalidateByTagsRequestBody$inboundSchema;
  /** @deprecated use `InvalidateByTagsRequestBody$outboundSchema` instead. */
  export const outboundSchema = InvalidateByTagsRequestBody$outboundSchema;
  /** @deprecated use `InvalidateByTagsRequestBody$Outbound` instead. */
  export type Outbound = InvalidateByTagsRequestBody$Outbound;
}

export function invalidateByTagsRequestBodyToJSON(
  invalidateByTagsRequestBody: InvalidateByTagsRequestBody,
): string {
  return JSON.stringify(
    InvalidateByTagsRequestBody$outboundSchema.parse(
      invalidateByTagsRequestBody,
    ),
  );
}

export function invalidateByTagsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<InvalidateByTagsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidateByTagsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidateByTagsRequestBody' from JSON`,
  );
}

/** @internal */
export const InvalidateByTagsRequest$inboundSchema: z.ZodType<
  InvalidateByTagsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  projectIdOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => InvalidateByTagsRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type InvalidateByTagsRequest$Outbound = {
  projectIdOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: InvalidateByTagsRequestBody$Outbound | undefined;
};

/** @internal */
export const InvalidateByTagsRequest$outboundSchema: z.ZodType<
  InvalidateByTagsRequest$Outbound,
  z.ZodTypeDef,
  InvalidateByTagsRequest
> = z.object({
  projectIdOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => InvalidateByTagsRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InvalidateByTagsRequest$ {
  /** @deprecated use `InvalidateByTagsRequest$inboundSchema` instead. */
  export const inboundSchema = InvalidateByTagsRequest$inboundSchema;
  /** @deprecated use `InvalidateByTagsRequest$outboundSchema` instead. */
  export const outboundSchema = InvalidateByTagsRequest$outboundSchema;
  /** @deprecated use `InvalidateByTagsRequest$Outbound` instead. */
  export type Outbound = InvalidateByTagsRequest$Outbound;
}

export function invalidateByTagsRequestToJSON(
  invalidateByTagsRequest: InvalidateByTagsRequest,
): string {
  return JSON.stringify(
    InvalidateByTagsRequest$outboundSchema.parse(invalidateByTagsRequest),
  );
}

export function invalidateByTagsRequestFromJSON(
  jsonString: string,
): SafeParseResult<InvalidateByTagsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InvalidateByTagsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InvalidateByTagsRequest' from JSON`,
  );
}
