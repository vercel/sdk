/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  PropertyKey,
  PropertyKey$inboundSchema,
  PropertyKey$Outbound,
  PropertyKey$outboundSchema,
} from "./propertykey.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

/**
 * The tag identifying the type of parse issue
 */
export const Tag = {
  Pointer: "Pointer",
  Unexpected: "Unexpected",
  Missing: "Missing",
  Composite: "Composite",
  Refinement: "Refinement",
  Transformation: "Transformation",
  Type: "Type",
  Forbidden: "Forbidden",
} as const;
/**
 * The tag identifying the type of parse issue
 */
export type Tag = ClosedEnum<typeof Tag>;

/**
 * Represents an error encountered while parsing a value to match the schema
 */
export type Issue = {
  /**
   * The tag identifying the type of parse issue
   */
  tag: Tag;
  /**
   * The path to the property where the issue occurred
   */
  path: Array<PropertyKey>;
  /**
   * A descriptive message explaining the issue
   */
  message: string;
};

/** @internal */
export const Tag$inboundSchema: z.ZodNativeEnum<typeof Tag> = z.nativeEnum(Tag);

/** @internal */
export const Tag$outboundSchema: z.ZodNativeEnum<typeof Tag> =
  Tag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
}

/** @internal */
export const Issue$inboundSchema: z.ZodType<Issue, z.ZodTypeDef, unknown> = z
  .object({
    _tag: Tag$inboundSchema,
    path: z.array(PropertyKey$inboundSchema),
    message: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "_tag": "tag",
    });
  });

/** @internal */
export type Issue$Outbound = {
  _tag: string;
  path: Array<PropertyKey$Outbound>;
  message: string;
};

/** @internal */
export const Issue$outboundSchema: z.ZodType<
  Issue$Outbound,
  z.ZodTypeDef,
  Issue
> = z.object({
  tag: Tag$outboundSchema,
  path: z.array(PropertyKey$outboundSchema),
  message: z.string(),
}).transform((v) => {
  return remap$(v, {
    tag: "_tag",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Issue$ {
  /** @deprecated use `Issue$inboundSchema` instead. */
  export const inboundSchema = Issue$inboundSchema;
  /** @deprecated use `Issue$outboundSchema` instead. */
  export const outboundSchema = Issue$outboundSchema;
  /** @deprecated use `Issue$Outbound` instead. */
  export type Outbound = Issue$Outbound;
}

export function issueToJSON(issue: Issue): string {
  return JSON.stringify(Issue$outboundSchema.parse(issue));
}

export function issueFromJSON(
  jsonString: string,
): SafeParseResult<Issue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Issue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Issue' from JSON`,
  );
}
