/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  Pagination,
  Pagination$inboundSchema,
  Pagination$Outbound,
  Pagination$outboundSchema,
} from "./pagination.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type ListSharedEnvVariableRequest = {
  search?: string | undefined;
  /**
   * Filter SharedEnvVariables that belong to a project
   */
  projectId?: string | undefined;
  /**
   * Filter SharedEnvVariables based on comma separated ids
   */
  ids?: string | undefined;
  /**
   * Filter SharedEnvVariables based on comma separated ids
   */
  excludeIdsQueryParameter?: string | undefined;
  /**
   * Filter SharedEnvVariables based on comma separated ids
   */
  excludeIdsQueryParameter1?: string | undefined;
  /**
   * Filter SharedEnvVariables that belong to a project
   */
  excludeProjectIdQueryParameter?: string | undefined;
  /**
   * Filter SharedEnvVariables that belong to a project
   */
  excludeProjectIdQueryParameter1?: string | undefined;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const ListSharedEnvVariableType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
  System: "system",
  Plain: "plain",
} as const;
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type ListSharedEnvVariableType = ClosedEnum<
  typeof ListSharedEnvVariableType
>;

/**
 * environments this env variable targets
 */
export const ListSharedEnvVariableTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
/**
 * environments this env variable targets
 */
export type ListSharedEnvVariableTarget = ClosedEnum<
  typeof ListSharedEnvVariableTarget
>;

export type Data = {
  /**
   * The date when the Shared Env Var was created.
   */
  created?: Date | undefined;
  /**
   * The name of the Shared Env Var.
   */
  key?: string | undefined;
  /**
   * The unique identifier of the owner (team) the Shared Env Var was created for.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the Shared Env Var.
   */
  id?: string | undefined;
  /**
   * The unique identifier of the user who created the Shared Env Var.
   */
  createdBy?: string | null | undefined;
  /**
   * The unique identifier of the user who deleted the Shared Env Var.
   */
  deletedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who last updated the Shared Env Var.
   */
  updatedBy?: string | null | undefined;
  /**
   * Timestamp for when the Shared Env Var was created.
   */
  createdAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was (soft) deleted.
   */
  deletedAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was last updated.
   */
  updatedAt?: number | undefined;
  /**
   * The value of the Shared Env Var.
   */
  value?: string | undefined;
  /**
   * The unique identifiers of the projects which the Shared Env Var is linked to.
   */
  projectId?: Array<string> | undefined;
  /**
   * The type of this cosmos doc instance, if blank, assume secret.
   */
  type?: ListSharedEnvVariableType | undefined;
  /**
   * environments this env variable targets
   */
  target?: Array<ListSharedEnvVariableTarget> | undefined;
  /**
   * whether or not this env varible applies to custom environments
   */
  applyToAllCustomEnvironments?: boolean | undefined;
  /**
   * whether or not this env variable is decrypted
   */
  decrypted?: boolean | undefined;
  /**
   * A user provided comment that describes what this Shared Env Var is for.
   */
  comment?: string | undefined;
  /**
   * The last editor full name or username.
   */
  lastEditedByDisplayName?: string | undefined;
};

export type ListSharedEnvVariableResponseBody = {
  data: Array<Data>;
  /**
   * This object contains information related to the pagination of the current request, including the necessary parameters to get the next or previous page of data.
   */
  pagination: Pagination;
};

/** @internal */
export const ListSharedEnvVariableRequest$inboundSchema: z.ZodType<
  ListSharedEnvVariableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  search: z.string().optional(),
  projectId: z.string().optional(),
  ids: z.string().optional(),
  exclude_idsQueryParameter: z.string().optional(),
  "exclude-idsQueryParameter1": z.string().optional(),
  exclude_projectIdQueryParameter: z.string().optional(),
  "exclude-projectIdQueryParameter1": z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "exclude_idsQueryParameter": "excludeIdsQueryParameter",
    "exclude-idsQueryParameter1": "excludeIdsQueryParameter1",
    "exclude_projectIdQueryParameter": "excludeProjectIdQueryParameter",
    "exclude-projectIdQueryParameter1": "excludeProjectIdQueryParameter1",
  });
});

/** @internal */
export type ListSharedEnvVariableRequest$Outbound = {
  search?: string | undefined;
  projectId?: string | undefined;
  ids?: string | undefined;
  exclude_idsQueryParameter?: string | undefined;
  "exclude-idsQueryParameter1"?: string | undefined;
  exclude_projectIdQueryParameter?: string | undefined;
  "exclude-projectIdQueryParameter1"?: string | undefined;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const ListSharedEnvVariableRequest$outboundSchema: z.ZodType<
  ListSharedEnvVariableRequest$Outbound,
  z.ZodTypeDef,
  ListSharedEnvVariableRequest
> = z.object({
  search: z.string().optional(),
  projectId: z.string().optional(),
  ids: z.string().optional(),
  excludeIdsQueryParameter: z.string().optional(),
  excludeIdsQueryParameter1: z.string().optional(),
  excludeProjectIdQueryParameter: z.string().optional(),
  excludeProjectIdQueryParameter1: z.string().optional(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    excludeIdsQueryParameter: "exclude_idsQueryParameter",
    excludeIdsQueryParameter1: "exclude-idsQueryParameter1",
    excludeProjectIdQueryParameter: "exclude_projectIdQueryParameter",
    excludeProjectIdQueryParameter1: "exclude-projectIdQueryParameter1",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSharedEnvVariableRequest$ {
  /** @deprecated use `ListSharedEnvVariableRequest$inboundSchema` instead. */
  export const inboundSchema = ListSharedEnvVariableRequest$inboundSchema;
  /** @deprecated use `ListSharedEnvVariableRequest$outboundSchema` instead. */
  export const outboundSchema = ListSharedEnvVariableRequest$outboundSchema;
  /** @deprecated use `ListSharedEnvVariableRequest$Outbound` instead. */
  export type Outbound = ListSharedEnvVariableRequest$Outbound;
}

export function listSharedEnvVariableRequestToJSON(
  listSharedEnvVariableRequest: ListSharedEnvVariableRequest,
): string {
  return JSON.stringify(
    ListSharedEnvVariableRequest$outboundSchema.parse(
      listSharedEnvVariableRequest,
    ),
  );
}

export function listSharedEnvVariableRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListSharedEnvVariableRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSharedEnvVariableRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSharedEnvVariableRequest' from JSON`,
  );
}

/** @internal */
export const ListSharedEnvVariableType$inboundSchema: z.ZodNativeEnum<
  typeof ListSharedEnvVariableType
> = z.nativeEnum(ListSharedEnvVariableType);

/** @internal */
export const ListSharedEnvVariableType$outboundSchema: z.ZodNativeEnum<
  typeof ListSharedEnvVariableType
> = ListSharedEnvVariableType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSharedEnvVariableType$ {
  /** @deprecated use `ListSharedEnvVariableType$inboundSchema` instead. */
  export const inboundSchema = ListSharedEnvVariableType$inboundSchema;
  /** @deprecated use `ListSharedEnvVariableType$outboundSchema` instead. */
  export const outboundSchema = ListSharedEnvVariableType$outboundSchema;
}

/** @internal */
export const ListSharedEnvVariableTarget$inboundSchema: z.ZodNativeEnum<
  typeof ListSharedEnvVariableTarget
> = z.nativeEnum(ListSharedEnvVariableTarget);

/** @internal */
export const ListSharedEnvVariableTarget$outboundSchema: z.ZodNativeEnum<
  typeof ListSharedEnvVariableTarget
> = ListSharedEnvVariableTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSharedEnvVariableTarget$ {
  /** @deprecated use `ListSharedEnvVariableTarget$inboundSchema` instead. */
  export const inboundSchema = ListSharedEnvVariableTarget$inboundSchema;
  /** @deprecated use `ListSharedEnvVariableTarget$outboundSchema` instead. */
  export const outboundSchema = ListSharedEnvVariableTarget$outboundSchema;
}

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: ListSharedEnvVariableType$inboundSchema.optional(),
    target: z.array(ListSharedEnvVariableTarget$inboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
  });

/** @internal */
export type Data$Outbound = {
  created?: string | undefined;
  key?: string | undefined;
  ownerId?: string | null | undefined;
  id?: string | undefined;
  createdBy?: string | null | undefined;
  deletedBy?: string | null | undefined;
  updatedBy?: string | null | undefined;
  createdAt?: number | undefined;
  deletedAt?: number | undefined;
  updatedAt?: number | undefined;
  value?: string | undefined;
  projectId?: Array<string> | undefined;
  type?: string | undefined;
  target?: Array<string> | undefined;
  applyToAllCustomEnvironments?: boolean | undefined;
  decrypted?: boolean | undefined;
  comment?: string | undefined;
  lastEditedByDisplayName?: string | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    created: z.date().transform(v => v.toISOString()).optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: ListSharedEnvVariableType$outboundSchema.optional(),
    target: z.array(ListSharedEnvVariableTarget$outboundSchema).optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const ListSharedEnvVariableResponseBody$inboundSchema: z.ZodType<
  ListSharedEnvVariableResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => Data$inboundSchema)),
  pagination: Pagination$inboundSchema,
});

/** @internal */
export type ListSharedEnvVariableResponseBody$Outbound = {
  data: Array<Data$Outbound>;
  pagination: Pagination$Outbound;
};

/** @internal */
export const ListSharedEnvVariableResponseBody$outboundSchema: z.ZodType<
  ListSharedEnvVariableResponseBody$Outbound,
  z.ZodTypeDef,
  ListSharedEnvVariableResponseBody
> = z.object({
  data: z.array(z.lazy(() => Data$outboundSchema)),
  pagination: Pagination$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListSharedEnvVariableResponseBody$ {
  /** @deprecated use `ListSharedEnvVariableResponseBody$inboundSchema` instead. */
  export const inboundSchema = ListSharedEnvVariableResponseBody$inboundSchema;
  /** @deprecated use `ListSharedEnvVariableResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    ListSharedEnvVariableResponseBody$outboundSchema;
  /** @deprecated use `ListSharedEnvVariableResponseBody$Outbound` instead. */
  export type Outbound = ListSharedEnvVariableResponseBody$Outbound;
}

export function listSharedEnvVariableResponseBodyToJSON(
  listSharedEnvVariableResponseBody: ListSharedEnvVariableResponseBody,
): string {
  return JSON.stringify(
    ListSharedEnvVariableResponseBody$outboundSchema.parse(
      listSharedEnvVariableResponseBody,
    ),
  );
}

export function listSharedEnvVariableResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<ListSharedEnvVariableResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListSharedEnvVariableResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListSharedEnvVariableResponseBody' from JSON`,
  );
}
