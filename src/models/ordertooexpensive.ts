/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const OrderTooExpensiveCode = {
  OrderTooExpensive: "order_too_expensive",
} as const;
export type OrderTooExpensiveCode = ClosedEnum<typeof OrderTooExpensiveCode>;

/**
 * The total price of the order is too high.
 */
export type OrderTooExpensiveData = {
  status: number;
  code: OrderTooExpensiveCode;
  message: string;
};

/**
 * The total price of the order is too high.
 */
export class OrderTooExpensive extends VercelError {
  status: number;
  code: OrderTooExpensiveCode;

  /** The original data that was passed to this error instance. */
  data$: OrderTooExpensiveData;

  constructor(
    err: OrderTooExpensiveData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;

    this.name = "OrderTooExpensive";
  }
}

/** @internal */
export const OrderTooExpensiveCode$inboundSchema: z.ZodNativeEnum<
  typeof OrderTooExpensiveCode
> = z.nativeEnum(OrderTooExpensiveCode);

/** @internal */
export const OrderTooExpensiveCode$outboundSchema: z.ZodNativeEnum<
  typeof OrderTooExpensiveCode
> = OrderTooExpensiveCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderTooExpensiveCode$ {
  /** @deprecated use `OrderTooExpensiveCode$inboundSchema` instead. */
  export const inboundSchema = OrderTooExpensiveCode$inboundSchema;
  /** @deprecated use `OrderTooExpensiveCode$outboundSchema` instead. */
  export const outboundSchema = OrderTooExpensiveCode$outboundSchema;
}

/** @internal */
export const OrderTooExpensive$inboundSchema: z.ZodType<
  OrderTooExpensive,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: OrderTooExpensiveCode$inboundSchema,
  message: z.string(),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new OrderTooExpensive(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type OrderTooExpensive$Outbound = {
  status: number;
  code: string;
  message: string;
};

/** @internal */
export const OrderTooExpensive$outboundSchema: z.ZodType<
  OrderTooExpensive$Outbound,
  z.ZodTypeDef,
  OrderTooExpensive
> = z.instanceof(OrderTooExpensive)
  .transform(v => v.data$)
  .pipe(z.object({
    status: z.number(),
    code: OrderTooExpensiveCode$outboundSchema,
    message: z.string(),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrderTooExpensive$ {
  /** @deprecated use `OrderTooExpensive$inboundSchema` instead. */
  export const inboundSchema = OrderTooExpensive$inboundSchema;
  /** @deprecated use `OrderTooExpensive$outboundSchema` instead. */
  export const outboundSchema = OrderTooExpensive$outboundSchema;
  /** @deprecated use `OrderTooExpensive$Outbound` instead. */
  export type Outbound = OrderTooExpensive$Outbound;
}
