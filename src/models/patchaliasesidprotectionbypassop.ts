/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const RequestBodyScope = {
  AliasProtectionOverride: "alias-protection-override",
} as const;
export type RequestBodyScope = ClosedEnum<typeof RequestBodyScope>;

export const PatchAliasesIdProtectionBypassRequestBodyAction = {
  Create: "create",
  Revoke: "revoke",
} as const;
export type PatchAliasesIdProtectionBypassRequestBodyAction = ClosedEnum<
  typeof PatchAliasesIdProtectionBypassRequestBodyAction
>;

export type Override = {
  scope: RequestBodyScope;
  action: PatchAliasesIdProtectionBypassRequestBodyAction;
};

export type RequestBody3 = {
  override: Override;
};

/**
 * Invitation status for the user scoped bypass.
 */
export const ScopeAccess = {
  Denied: "denied",
  Granted: "granted",
} as const;
/**
 * Invitation status for the user scoped bypass.
 */
export type ScopeAccess = ClosedEnum<typeof ScopeAccess>;

export type Scope2 = {
  /**
   * Specified user id for the scoped bypass.
   */
  userId?: string | undefined;
  /**
   * Specified email for the scoped bypass.
   */
  email: string;
  /**
   * Invitation status for the user scoped bypass.
   */
  access: ScopeAccess;
};

/**
 * Invitation status for the user scoped bypass.
 */
export const Access = {
  Denied: "denied",
  Granted: "granted",
} as const;
/**
 * Invitation status for the user scoped bypass.
 */
export type Access = ClosedEnum<typeof Access>;

export type Scope1 = {
  /**
   * Specified user id for the scoped bypass.
   */
  userId: string;
  /**
   * Specified email for the scoped bypass.
   */
  email?: string | undefined;
  /**
   * Invitation status for the user scoped bypass.
   */
  access: Access;
};

/**
 * Instructions for creating a user scoped protection bypass
 */
export type Scope = Scope1 | Scope2;

export type RequestBody2 = {
  /**
   * Instructions for creating a user scoped protection bypass
   */
  scope: Scope1 | Scope2;
};

/**
 * Optional instructions for revoking and regenerating a shareable link
 */
export type RequestBodyRevoke = {
  /**
   * Sharebale link to revoked
   */
  secret: string;
  /**
   * Whether or not a new shareable link should be created after the provided secret is revoked
   */
  regenerate: boolean;
};

export type RequestBody1 = {
  /**
   * Optional instructions for revoking and regenerating a shareable link
   */
  revoke?: RequestBodyRevoke | undefined;
};

export type PatchAliasesIdProtectionBypassRequestBody =
  | RequestBody1
  | RequestBody2
  | RequestBody3;

export type PatchAliasesIdProtectionBypassRequest = {
  /**
   * The alias or deployment ID
   */
  id: string;
  requestBody?: RequestBody1 | RequestBody2 | RequestBody3 | undefined;
};

/** @internal */
export const RequestBodyScope$inboundSchema: z.ZodNativeEnum<
  typeof RequestBodyScope
> = z.nativeEnum(RequestBodyScope);

/** @internal */
export const RequestBodyScope$outboundSchema: z.ZodNativeEnum<
  typeof RequestBodyScope
> = RequestBodyScope$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyScope$ {
  /** @deprecated use `RequestBodyScope$inboundSchema` instead. */
  export const inboundSchema = RequestBodyScope$inboundSchema;
  /** @deprecated use `RequestBodyScope$outboundSchema` instead. */
  export const outboundSchema = RequestBodyScope$outboundSchema;
}

/** @internal */
export const PatchAliasesIdProtectionBypassRequestBodyAction$inboundSchema:
  z.ZodNativeEnum<typeof PatchAliasesIdProtectionBypassRequestBodyAction> = z
    .nativeEnum(PatchAliasesIdProtectionBypassRequestBodyAction);

/** @internal */
export const PatchAliasesIdProtectionBypassRequestBodyAction$outboundSchema:
  z.ZodNativeEnum<typeof PatchAliasesIdProtectionBypassRequestBodyAction> =
    PatchAliasesIdProtectionBypassRequestBodyAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAliasesIdProtectionBypassRequestBodyAction$ {
  /** @deprecated use `PatchAliasesIdProtectionBypassRequestBodyAction$inboundSchema` instead. */
  export const inboundSchema =
    PatchAliasesIdProtectionBypassRequestBodyAction$inboundSchema;
  /** @deprecated use `PatchAliasesIdProtectionBypassRequestBodyAction$outboundSchema` instead. */
  export const outboundSchema =
    PatchAliasesIdProtectionBypassRequestBodyAction$outboundSchema;
}

/** @internal */
export const Override$inboundSchema: z.ZodType<
  Override,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: RequestBodyScope$inboundSchema,
  action: PatchAliasesIdProtectionBypassRequestBodyAction$inboundSchema,
});

/** @internal */
export type Override$Outbound = {
  scope: string;
  action: string;
};

/** @internal */
export const Override$outboundSchema: z.ZodType<
  Override$Outbound,
  z.ZodTypeDef,
  Override
> = z.object({
  scope: RequestBodyScope$outboundSchema,
  action: PatchAliasesIdProtectionBypassRequestBodyAction$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Override$ {
  /** @deprecated use `Override$inboundSchema` instead. */
  export const inboundSchema = Override$inboundSchema;
  /** @deprecated use `Override$outboundSchema` instead. */
  export const outboundSchema = Override$outboundSchema;
  /** @deprecated use `Override$Outbound` instead. */
  export type Outbound = Override$Outbound;
}

export function overrideToJSON(override: Override): string {
  return JSON.stringify(Override$outboundSchema.parse(override));
}

export function overrideFromJSON(
  jsonString: string,
): SafeParseResult<Override, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Override$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Override' from JSON`,
  );
}

/** @internal */
export const RequestBody3$inboundSchema: z.ZodType<
  RequestBody3,
  z.ZodTypeDef,
  unknown
> = z.object({
  override: z.lazy(() => Override$inboundSchema),
});

/** @internal */
export type RequestBody3$Outbound = {
  override: Override$Outbound;
};

/** @internal */
export const RequestBody3$outboundSchema: z.ZodType<
  RequestBody3$Outbound,
  z.ZodTypeDef,
  RequestBody3
> = z.object({
  override: z.lazy(() => Override$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody3$ {
  /** @deprecated use `RequestBody3$inboundSchema` instead. */
  export const inboundSchema = RequestBody3$inboundSchema;
  /** @deprecated use `RequestBody3$outboundSchema` instead. */
  export const outboundSchema = RequestBody3$outboundSchema;
  /** @deprecated use `RequestBody3$Outbound` instead. */
  export type Outbound = RequestBody3$Outbound;
}

export function requestBody3ToJSON(requestBody3: RequestBody3): string {
  return JSON.stringify(RequestBody3$outboundSchema.parse(requestBody3));
}

export function requestBody3FromJSON(
  jsonString: string,
): SafeParseResult<RequestBody3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody3' from JSON`,
  );
}

/** @internal */
export const ScopeAccess$inboundSchema: z.ZodNativeEnum<typeof ScopeAccess> = z
  .nativeEnum(ScopeAccess);

/** @internal */
export const ScopeAccess$outboundSchema: z.ZodNativeEnum<typeof ScopeAccess> =
  ScopeAccess$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ScopeAccess$ {
  /** @deprecated use `ScopeAccess$inboundSchema` instead. */
  export const inboundSchema = ScopeAccess$inboundSchema;
  /** @deprecated use `ScopeAccess$outboundSchema` instead. */
  export const outboundSchema = ScopeAccess$outboundSchema;
}

/** @internal */
export const Scope2$inboundSchema: z.ZodType<Scope2, z.ZodTypeDef, unknown> = z
  .object({
    userId: z.string().optional(),
    email: z.string(),
    access: ScopeAccess$inboundSchema,
  });

/** @internal */
export type Scope2$Outbound = {
  userId?: string | undefined;
  email: string;
  access: string;
};

/** @internal */
export const Scope2$outboundSchema: z.ZodType<
  Scope2$Outbound,
  z.ZodTypeDef,
  Scope2
> = z.object({
  userId: z.string().optional(),
  email: z.string(),
  access: ScopeAccess$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope2$ {
  /** @deprecated use `Scope2$inboundSchema` instead. */
  export const inboundSchema = Scope2$inboundSchema;
  /** @deprecated use `Scope2$outboundSchema` instead. */
  export const outboundSchema = Scope2$outboundSchema;
  /** @deprecated use `Scope2$Outbound` instead. */
  export type Outbound = Scope2$Outbound;
}

export function scope2ToJSON(scope2: Scope2): string {
  return JSON.stringify(Scope2$outboundSchema.parse(scope2));
}

export function scope2FromJSON(
  jsonString: string,
): SafeParseResult<Scope2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scope2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scope2' from JSON`,
  );
}

/** @internal */
export const Access$inboundSchema: z.ZodNativeEnum<typeof Access> = z
  .nativeEnum(Access);

/** @internal */
export const Access$outboundSchema: z.ZodNativeEnum<typeof Access> =
  Access$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Access$ {
  /** @deprecated use `Access$inboundSchema` instead. */
  export const inboundSchema = Access$inboundSchema;
  /** @deprecated use `Access$outboundSchema` instead. */
  export const outboundSchema = Access$outboundSchema;
}

/** @internal */
export const Scope1$inboundSchema: z.ZodType<Scope1, z.ZodTypeDef, unknown> = z
  .object({
    userId: z.string(),
    email: z.string().optional(),
    access: Access$inboundSchema,
  });

/** @internal */
export type Scope1$Outbound = {
  userId: string;
  email?: string | undefined;
  access: string;
};

/** @internal */
export const Scope1$outboundSchema: z.ZodType<
  Scope1$Outbound,
  z.ZodTypeDef,
  Scope1
> = z.object({
  userId: z.string(),
  email: z.string().optional(),
  access: Access$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope1$ {
  /** @deprecated use `Scope1$inboundSchema` instead. */
  export const inboundSchema = Scope1$inboundSchema;
  /** @deprecated use `Scope1$outboundSchema` instead. */
  export const outboundSchema = Scope1$outboundSchema;
  /** @deprecated use `Scope1$Outbound` instead. */
  export type Outbound = Scope1$Outbound;
}

export function scope1ToJSON(scope1: Scope1): string {
  return JSON.stringify(Scope1$outboundSchema.parse(scope1));
}

export function scope1FromJSON(
  jsonString: string,
): SafeParseResult<Scope1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scope1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scope1' from JSON`,
  );
}

/** @internal */
export const Scope$inboundSchema: z.ZodType<Scope, z.ZodTypeDef, unknown> = z
  .union([
    z.lazy(() => Scope1$inboundSchema),
    z.lazy(() => Scope2$inboundSchema),
  ]);

/** @internal */
export type Scope$Outbound = Scope1$Outbound | Scope2$Outbound;

/** @internal */
export const Scope$outboundSchema: z.ZodType<
  Scope$Outbound,
  z.ZodTypeDef,
  Scope
> = z.union([
  z.lazy(() => Scope1$outboundSchema),
  z.lazy(() => Scope2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Scope$ {
  /** @deprecated use `Scope$inboundSchema` instead. */
  export const inboundSchema = Scope$inboundSchema;
  /** @deprecated use `Scope$outboundSchema` instead. */
  export const outboundSchema = Scope$outboundSchema;
  /** @deprecated use `Scope$Outbound` instead. */
  export type Outbound = Scope$Outbound;
}

export function scopeToJSON(scope: Scope): string {
  return JSON.stringify(Scope$outboundSchema.parse(scope));
}

export function scopeFromJSON(
  jsonString: string,
): SafeParseResult<Scope, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Scope$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Scope' from JSON`,
  );
}

/** @internal */
export const RequestBody2$inboundSchema: z.ZodType<
  RequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.union([
    z.lazy(() => Scope1$inboundSchema),
    z.lazy(() => Scope2$inboundSchema),
  ]),
});

/** @internal */
export type RequestBody2$Outbound = {
  scope: Scope1$Outbound | Scope2$Outbound;
};

/** @internal */
export const RequestBody2$outboundSchema: z.ZodType<
  RequestBody2$Outbound,
  z.ZodTypeDef,
  RequestBody2
> = z.object({
  scope: z.union([
    z.lazy(() => Scope1$outboundSchema),
    z.lazy(() => Scope2$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody2$ {
  /** @deprecated use `RequestBody2$inboundSchema` instead. */
  export const inboundSchema = RequestBody2$inboundSchema;
  /** @deprecated use `RequestBody2$outboundSchema` instead. */
  export const outboundSchema = RequestBody2$outboundSchema;
  /** @deprecated use `RequestBody2$Outbound` instead. */
  export type Outbound = RequestBody2$Outbound;
}

export function requestBody2ToJSON(requestBody2: RequestBody2): string {
  return JSON.stringify(RequestBody2$outboundSchema.parse(requestBody2));
}

export function requestBody2FromJSON(
  jsonString: string,
): SafeParseResult<RequestBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody2' from JSON`,
  );
}

/** @internal */
export const RequestBodyRevoke$inboundSchema: z.ZodType<
  RequestBodyRevoke,
  z.ZodTypeDef,
  unknown
> = z.object({
  secret: z.string(),
  regenerate: z.boolean(),
});

/** @internal */
export type RequestBodyRevoke$Outbound = {
  secret: string;
  regenerate: boolean;
};

/** @internal */
export const RequestBodyRevoke$outboundSchema: z.ZodType<
  RequestBodyRevoke$Outbound,
  z.ZodTypeDef,
  RequestBodyRevoke
> = z.object({
  secret: z.string(),
  regenerate: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBodyRevoke$ {
  /** @deprecated use `RequestBodyRevoke$inboundSchema` instead. */
  export const inboundSchema = RequestBodyRevoke$inboundSchema;
  /** @deprecated use `RequestBodyRevoke$outboundSchema` instead. */
  export const outboundSchema = RequestBodyRevoke$outboundSchema;
  /** @deprecated use `RequestBodyRevoke$Outbound` instead. */
  export type Outbound = RequestBodyRevoke$Outbound;
}

export function requestBodyRevokeToJSON(
  requestBodyRevoke: RequestBodyRevoke,
): string {
  return JSON.stringify(
    RequestBodyRevoke$outboundSchema.parse(requestBodyRevoke),
  );
}

export function requestBodyRevokeFromJSON(
  jsonString: string,
): SafeParseResult<RequestBodyRevoke, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBodyRevoke$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBodyRevoke' from JSON`,
  );
}

/** @internal */
export const RequestBody1$inboundSchema: z.ZodType<
  RequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  revoke: z.lazy(() => RequestBodyRevoke$inboundSchema).optional(),
});

/** @internal */
export type RequestBody1$Outbound = {
  revoke?: RequestBodyRevoke$Outbound | undefined;
};

/** @internal */
export const RequestBody1$outboundSchema: z.ZodType<
  RequestBody1$Outbound,
  z.ZodTypeDef,
  RequestBody1
> = z.object({
  revoke: z.lazy(() => RequestBodyRevoke$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestBody1$ {
  /** @deprecated use `RequestBody1$inboundSchema` instead. */
  export const inboundSchema = RequestBody1$inboundSchema;
  /** @deprecated use `RequestBody1$outboundSchema` instead. */
  export const outboundSchema = RequestBody1$outboundSchema;
  /** @deprecated use `RequestBody1$Outbound` instead. */
  export type Outbound = RequestBody1$Outbound;
}

export function requestBody1ToJSON(requestBody1: RequestBody1): string {
  return JSON.stringify(RequestBody1$outboundSchema.parse(requestBody1));
}

export function requestBody1FromJSON(
  jsonString: string,
): SafeParseResult<RequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestBody1' from JSON`,
  );
}

/** @internal */
export const PatchAliasesIdProtectionBypassRequestBody$inboundSchema: z.ZodType<
  PatchAliasesIdProtectionBypassRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => RequestBody1$inboundSchema),
  z.lazy(() => RequestBody2$inboundSchema),
  z.lazy(() => RequestBody3$inboundSchema),
]);

/** @internal */
export type PatchAliasesIdProtectionBypassRequestBody$Outbound =
  | RequestBody1$Outbound
  | RequestBody2$Outbound
  | RequestBody3$Outbound;

/** @internal */
export const PatchAliasesIdProtectionBypassRequestBody$outboundSchema:
  z.ZodType<
    PatchAliasesIdProtectionBypassRequestBody$Outbound,
    z.ZodTypeDef,
    PatchAliasesIdProtectionBypassRequestBody
  > = z.union([
    z.lazy(() => RequestBody1$outboundSchema),
    z.lazy(() => RequestBody2$outboundSchema),
    z.lazy(() => RequestBody3$outboundSchema),
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAliasesIdProtectionBypassRequestBody$ {
  /** @deprecated use `PatchAliasesIdProtectionBypassRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchAliasesIdProtectionBypassRequestBody$inboundSchema;
  /** @deprecated use `PatchAliasesIdProtectionBypassRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchAliasesIdProtectionBypassRequestBody$outboundSchema;
  /** @deprecated use `PatchAliasesIdProtectionBypassRequestBody$Outbound` instead. */
  export type Outbound = PatchAliasesIdProtectionBypassRequestBody$Outbound;
}

export function patchAliasesIdProtectionBypassRequestBodyToJSON(
  patchAliasesIdProtectionBypassRequestBody:
    PatchAliasesIdProtectionBypassRequestBody,
): string {
  return JSON.stringify(
    PatchAliasesIdProtectionBypassRequestBody$outboundSchema.parse(
      patchAliasesIdProtectionBypassRequestBody,
    ),
  );
}

export function patchAliasesIdProtectionBypassRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchAliasesIdProtectionBypassRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchAliasesIdProtectionBypassRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PatchAliasesIdProtectionBypassRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchAliasesIdProtectionBypassRequest$inboundSchema: z.ZodType<
  PatchAliasesIdProtectionBypassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  RequestBody: z.union([
    z.lazy(() => RequestBody1$inboundSchema),
    z.lazy(() => RequestBody2$inboundSchema),
    z.lazy(() => RequestBody3$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PatchAliasesIdProtectionBypassRequest$Outbound = {
  id: string;
  RequestBody?:
    | RequestBody1$Outbound
    | RequestBody2$Outbound
    | RequestBody3$Outbound
    | undefined;
};

/** @internal */
export const PatchAliasesIdProtectionBypassRequest$outboundSchema: z.ZodType<
  PatchAliasesIdProtectionBypassRequest$Outbound,
  z.ZodTypeDef,
  PatchAliasesIdProtectionBypassRequest
> = z.object({
  id: z.string(),
  requestBody: z.union([
    z.lazy(() => RequestBody1$outboundSchema),
    z.lazy(() => RequestBody2$outboundSchema),
    z.lazy(() => RequestBody3$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchAliasesIdProtectionBypassRequest$ {
  /** @deprecated use `PatchAliasesIdProtectionBypassRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchAliasesIdProtectionBypassRequest$inboundSchema;
  /** @deprecated use `PatchAliasesIdProtectionBypassRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchAliasesIdProtectionBypassRequest$outboundSchema;
  /** @deprecated use `PatchAliasesIdProtectionBypassRequest$Outbound` instead. */
  export type Outbound = PatchAliasesIdProtectionBypassRequest$Outbound;
}

export function patchAliasesIdProtectionBypassRequestToJSON(
  patchAliasesIdProtectionBypassRequest: PatchAliasesIdProtectionBypassRequest,
): string {
  return JSON.stringify(
    PatchAliasesIdProtectionBypassRequest$outboundSchema.parse(
      patchAliasesIdProtectionBypassRequest,
    ),
  );
}

export function patchAliasesIdProtectionBypassRequestFromJSON(
  jsonString: string,
): SafeParseResult<PatchAliasesIdProtectionBypassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PatchAliasesIdProtectionBypassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PatchAliasesIdProtectionBypassRequest' from JSON`,
  );
}
