/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const PropertyKeyTag = {
  Symbol: "symbol",
} as const;
export type PropertyKeyTag = ClosedEnum<typeof PropertyKeyTag>;

/**
 * an object to be decoded into a globally shared symbol
 */
export type PropertyKey3 = {
  tag: PropertyKeyTag;
  key: string;
};

export type PropertyKey = PropertyKey3 | string | number;

/** @internal */
export const PropertyKeyTag$inboundSchema: z.ZodNativeEnum<
  typeof PropertyKeyTag
> = z.nativeEnum(PropertyKeyTag);

/** @internal */
export const PropertyKeyTag$outboundSchema: z.ZodNativeEnum<
  typeof PropertyKeyTag
> = PropertyKeyTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKeyTag$ {
  /** @deprecated use `PropertyKeyTag$inboundSchema` instead. */
  export const inboundSchema = PropertyKeyTag$inboundSchema;
  /** @deprecated use `PropertyKeyTag$outboundSchema` instead. */
  export const outboundSchema = PropertyKeyTag$outboundSchema;
}

/** @internal */
export const PropertyKey3$inboundSchema: z.ZodType<
  PropertyKey3,
  z.ZodTypeDef,
  unknown
> = z.object({
  _tag: PropertyKeyTag$inboundSchema,
  key: z.string(),
}).transform((v) => {
  return remap$(v, {
    "_tag": "tag",
  });
});

/** @internal */
export type PropertyKey3$Outbound = {
  _tag: string;
  key: string;
};

/** @internal */
export const PropertyKey3$outboundSchema: z.ZodType<
  PropertyKey3$Outbound,
  z.ZodTypeDef,
  PropertyKey3
> = z.object({
  tag: PropertyKeyTag$outboundSchema,
  key: z.string(),
}).transform((v) => {
  return remap$(v, {
    tag: "_tag",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKey3$ {
  /** @deprecated use `PropertyKey3$inboundSchema` instead. */
  export const inboundSchema = PropertyKey3$inboundSchema;
  /** @deprecated use `PropertyKey3$outboundSchema` instead. */
  export const outboundSchema = PropertyKey3$outboundSchema;
  /** @deprecated use `PropertyKey3$Outbound` instead. */
  export type Outbound = PropertyKey3$Outbound;
}

export function propertyKey3ToJSON(propertyKey3: PropertyKey3): string {
  return JSON.stringify(PropertyKey3$outboundSchema.parse(propertyKey3));
}

export function propertyKey3FromJSON(
  jsonString: string,
): SafeParseResult<PropertyKey3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyKey3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyKey3' from JSON`,
  );
}

/** @internal */
export const PropertyKey$inboundSchema: z.ZodType<
  PropertyKey,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => PropertyKey3$inboundSchema), z.string(), z.number()]);

/** @internal */
export type PropertyKey$Outbound = PropertyKey3$Outbound | string | number;

/** @internal */
export const PropertyKey$outboundSchema: z.ZodType<
  PropertyKey$Outbound,
  z.ZodTypeDef,
  PropertyKey
> = z.union([
  z.lazy(() => PropertyKey3$outboundSchema),
  z.string(),
  z.number(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PropertyKey$ {
  /** @deprecated use `PropertyKey$inboundSchema` instead. */
  export const inboundSchema = PropertyKey$inboundSchema;
  /** @deprecated use `PropertyKey$outboundSchema` instead. */
  export const outboundSchema = PropertyKey$outboundSchema;
  /** @deprecated use `PropertyKey$Outbound` instead. */
  export type Outbound = PropertyKey$Outbound;
}

export function propertyKeyToJSON(propertyKey: PropertyKey): string {
  return JSON.stringify(PropertyKey$outboundSchema.parse(propertyKey));
}

export function propertyKeyFromJSON(
  jsonString: string,
): SafeParseResult<PropertyKey, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PropertyKey$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PropertyKey' from JSON`,
  );
}
