/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type QueryExperimentationItemsRequest = {
  resourceId?: string | undefined;
};

/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export const QueryExperimentationItemsCategory = {
  Experiment: "experiment",
  Flag: "flag",
} as const;
/**
 * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
 */
export type QueryExperimentationItemsCategory = ClosedEnum<
  typeof QueryExperimentationItemsCategory
>;

export type QueryExperimentationItemsItems = {
  /**
   * The Vercel generated ID for this item Integrations should not receive this in API responses
   */
  id: string;
  slug: string;
  origin: string;
  /**
   * The ID the partner has for this item. Integrations should receive this as `id` in API responses
   */
  externalId: string;
  /**
   * The id of the integration installation on a team
   */
  integrationConfigurationId: string;
  /**
   * The flags collection ID
   */
  resourceId: string;
  /**
   * An optional functional category for the item. Categorization semantics are: - flag (can resolve variants, can freely update variant resolution, usually does not perform analysis) - experiment (has variants, constrains changes to variant allocations, performs analysis) Using statsig as an example: - FeatureGate -> flag - Experiment -> experiment - Autotune -> experiment Forwards compatibility for other primitives can be considered, ex. `DynamicConfig`, `Holdouts`, `Layers`
   */
  category?: QueryExperimentationItemsCategory | undefined;
  name?: string | undefined;
  description?: string | undefined;
  isArchived?: boolean | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
};

export type QueryExperimentationItemsResponseBody = {
  items: Array<QueryExperimentationItemsItems>;
};

/** @internal */
export const QueryExperimentationItemsRequest$inboundSchema: z.ZodType<
  QueryExperimentationItemsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resourceId: z.string().optional(),
});

/** @internal */
export type QueryExperimentationItemsRequest$Outbound = {
  resourceId?: string | undefined;
};

/** @internal */
export const QueryExperimentationItemsRequest$outboundSchema: z.ZodType<
  QueryExperimentationItemsRequest$Outbound,
  z.ZodTypeDef,
  QueryExperimentationItemsRequest
> = z.object({
  resourceId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryExperimentationItemsRequest$ {
  /** @deprecated use `QueryExperimentationItemsRequest$inboundSchema` instead. */
  export const inboundSchema = QueryExperimentationItemsRequest$inboundSchema;
  /** @deprecated use `QueryExperimentationItemsRequest$outboundSchema` instead. */
  export const outboundSchema = QueryExperimentationItemsRequest$outboundSchema;
  /** @deprecated use `QueryExperimentationItemsRequest$Outbound` instead. */
  export type Outbound = QueryExperimentationItemsRequest$Outbound;
}

export function queryExperimentationItemsRequestToJSON(
  queryExperimentationItemsRequest: QueryExperimentationItemsRequest,
): string {
  return JSON.stringify(
    QueryExperimentationItemsRequest$outboundSchema.parse(
      queryExperimentationItemsRequest,
    ),
  );
}

export function queryExperimentationItemsRequestFromJSON(
  jsonString: string,
): SafeParseResult<QueryExperimentationItemsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryExperimentationItemsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryExperimentationItemsRequest' from JSON`,
  );
}

/** @internal */
export const QueryExperimentationItemsCategory$inboundSchema: z.ZodNativeEnum<
  typeof QueryExperimentationItemsCategory
> = z.nativeEnum(QueryExperimentationItemsCategory);

/** @internal */
export const QueryExperimentationItemsCategory$outboundSchema: z.ZodNativeEnum<
  typeof QueryExperimentationItemsCategory
> = QueryExperimentationItemsCategory$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryExperimentationItemsCategory$ {
  /** @deprecated use `QueryExperimentationItemsCategory$inboundSchema` instead. */
  export const inboundSchema = QueryExperimentationItemsCategory$inboundSchema;
  /** @deprecated use `QueryExperimentationItemsCategory$outboundSchema` instead. */
  export const outboundSchema =
    QueryExperimentationItemsCategory$outboundSchema;
}

/** @internal */
export const QueryExperimentationItemsItems$inboundSchema: z.ZodType<
  QueryExperimentationItemsItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  slug: z.string(),
  origin: z.string(),
  externalId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  category: QueryExperimentationItemsCategory$inboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
});

/** @internal */
export type QueryExperimentationItemsItems$Outbound = {
  id: string;
  slug: string;
  origin: string;
  externalId: string;
  integrationConfigurationId: string;
  resourceId: string;
  category?: string | undefined;
  name?: string | undefined;
  description?: string | undefined;
  isArchived?: boolean | undefined;
  createdAt?: number | undefined;
  updatedAt?: number | undefined;
};

/** @internal */
export const QueryExperimentationItemsItems$outboundSchema: z.ZodType<
  QueryExperimentationItemsItems$Outbound,
  z.ZodTypeDef,
  QueryExperimentationItemsItems
> = z.object({
  id: z.string(),
  slug: z.string(),
  origin: z.string(),
  externalId: z.string(),
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  category: QueryExperimentationItemsCategory$outboundSchema.optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  isArchived: z.boolean().optional(),
  createdAt: z.number().optional(),
  updatedAt: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryExperimentationItemsItems$ {
  /** @deprecated use `QueryExperimentationItemsItems$inboundSchema` instead. */
  export const inboundSchema = QueryExperimentationItemsItems$inboundSchema;
  /** @deprecated use `QueryExperimentationItemsItems$outboundSchema` instead. */
  export const outboundSchema = QueryExperimentationItemsItems$outboundSchema;
  /** @deprecated use `QueryExperimentationItemsItems$Outbound` instead. */
  export type Outbound = QueryExperimentationItemsItems$Outbound;
}

export function queryExperimentationItemsItemsToJSON(
  queryExperimentationItemsItems: QueryExperimentationItemsItems,
): string {
  return JSON.stringify(
    QueryExperimentationItemsItems$outboundSchema.parse(
      queryExperimentationItemsItems,
    ),
  );
}

export function queryExperimentationItemsItemsFromJSON(
  jsonString: string,
): SafeParseResult<QueryExperimentationItemsItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => QueryExperimentationItemsItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryExperimentationItemsItems' from JSON`,
  );
}

/** @internal */
export const QueryExperimentationItemsResponseBody$inboundSchema: z.ZodType<
  QueryExperimentationItemsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  items: z.array(z.lazy(() => QueryExperimentationItemsItems$inboundSchema)),
});

/** @internal */
export type QueryExperimentationItemsResponseBody$Outbound = {
  items: Array<QueryExperimentationItemsItems$Outbound>;
};

/** @internal */
export const QueryExperimentationItemsResponseBody$outboundSchema: z.ZodType<
  QueryExperimentationItemsResponseBody$Outbound,
  z.ZodTypeDef,
  QueryExperimentationItemsResponseBody
> = z.object({
  items: z.array(z.lazy(() => QueryExperimentationItemsItems$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryExperimentationItemsResponseBody$ {
  /** @deprecated use `QueryExperimentationItemsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    QueryExperimentationItemsResponseBody$inboundSchema;
  /** @deprecated use `QueryExperimentationItemsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    QueryExperimentationItemsResponseBody$outboundSchema;
  /** @deprecated use `QueryExperimentationItemsResponseBody$Outbound` instead. */
  export type Outbound = QueryExperimentationItemsResponseBody$Outbound;
}

export function queryExperimentationItemsResponseBodyToJSON(
  queryExperimentationItemsResponseBody: QueryExperimentationItemsResponseBody,
): string {
  return JSON.stringify(
    QueryExperimentationItemsResponseBody$outboundSchema.parse(
      queryExperimentationItemsResponseBody,
    ),
  );
}

export function queryExperimentationItemsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<QueryExperimentationItemsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      QueryExperimentationItemsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'QueryExperimentationItemsResponseBody' from JSON`,
  );
}
