/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BadRequest,
  BadRequest$inboundSchema,
  BadRequest$Outbound,
  BadRequest$outboundSchema,
} from "./badrequest.js";
import {
  DomainNotAvailable,
  DomainNotAvailable$inboundSchema,
  DomainNotAvailable$Outbound,
  DomainNotAvailable$outboundSchema,
} from "./domainnotavailable.js";
import {
  DomainNotRegistered,
  DomainNotRegistered$inboundSchema,
  DomainNotRegistered$Outbound,
  DomainNotRegistered$outboundSchema,
} from "./domainnotregistered.js";
import {
  DomainTooShort,
  DomainTooShort$inboundSchema,
  DomainTooShort$Outbound,
  DomainTooShort$outboundSchema,
} from "./domaintooshort.js";
import {
  ExpectedPriceMismatch,
  ExpectedPriceMismatch$inboundSchema,
  ExpectedPriceMismatch$Outbound,
  ExpectedPriceMismatch$outboundSchema,
} from "./expectedpricemismatch.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  TldNotSupported,
  TldNotSupported$inboundSchema,
  TldNotSupported$Outbound,
  TldNotSupported$outboundSchema,
} from "./tldnotsupported.js";

export type RenewDomainContactInformation = {
  /**
   * a non empty string
   */
  firstName: string;
  /**
   * a non empty string
   */
  lastName: string;
  /**
   * a non empty string
   */
  email: string;
  /**
   * A valid E.164 phone number
   */
  phone: string;
  /**
   * a non empty string
   */
  address1: string;
  /**
   * a non empty string
   */
  address2?: string | undefined;
  /**
   * a non empty string
   */
  city: string;
  /**
   * a non empty string
   */
  state: string;
  /**
   * a non empty string
   */
  zip: string;
  /**
   * A valid ISO 3166-1 alpha-2 country code
   */
  country: string;
  /**
   * a non empty string
   */
  companyName?: string | undefined;
  /**
   * A valid E.164 phone number
   */
  fax?: string | undefined;
};

export type RenewDomainRequestBody = {
  /**
   * The number of years to renew the domain for.
   */
  years: number;
  /**
   * The expected price for the domain. Use the [Get price data for a domain](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/get-price-data-for-a-domain) endpoint to retrieve the price data for a domain.
   */
  expectedPrice: number;
  contactInformation?: RenewDomainContactInformation | undefined;
};

export type RenewDomainRequest = {
  domain: string;
  teamId?: string | undefined;
  requestBody: RenewDomainRequestBody;
};

/**
 * NotAuthorizedForScope
 */
export type RenewDomainDomainsRegistrarResponseResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

/**
 * There was something wrong with the request
 */
export type RenewDomainDomainsRegistrarResponseBody =
  | BadRequest
  | DomainTooShort
  | DomainNotRegistered
  | ExpectedPriceMismatch
  | DomainNotAvailable
  | TldNotSupported
  | HttpApiDecodeError;

export const RenewDomainMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
  Patch: "PATCH",
} as const;
export type RenewDomainMethod = ClosedEnum<typeof RenewDomainMethod>;

export type RenewDomainLinks = {
  href: string;
  method: RenewDomainMethod;
};

/**
 * Success
 */
export type RenewDomainResponseBody = {
  orderId: string;
  links: { [k: string]: RenewDomainLinks };
};

/** @internal */
export const RenewDomainContactInformation$inboundSchema: z.ZodType<
  RenewDomainContactInformation,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
});

/** @internal */
export type RenewDomainContactInformation$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  zip: string;
  country: string;
  companyName?: string | undefined;
  fax?: string | undefined;
};

/** @internal */
export const RenewDomainContactInformation$outboundSchema: z.ZodType<
  RenewDomainContactInformation$Outbound,
  z.ZodTypeDef,
  RenewDomainContactInformation
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainContactInformation$ {
  /** @deprecated use `RenewDomainContactInformation$inboundSchema` instead. */
  export const inboundSchema = RenewDomainContactInformation$inboundSchema;
  /** @deprecated use `RenewDomainContactInformation$outboundSchema` instead. */
  export const outboundSchema = RenewDomainContactInformation$outboundSchema;
  /** @deprecated use `RenewDomainContactInformation$Outbound` instead. */
  export type Outbound = RenewDomainContactInformation$Outbound;
}

export function renewDomainContactInformationToJSON(
  renewDomainContactInformation: RenewDomainContactInformation,
): string {
  return JSON.stringify(
    RenewDomainContactInformation$outboundSchema.parse(
      renewDomainContactInformation,
    ),
  );
}

export function renewDomainContactInformationFromJSON(
  jsonString: string,
): SafeParseResult<RenewDomainContactInformation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenewDomainContactInformation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenewDomainContactInformation' from JSON`,
  );
}

/** @internal */
export const RenewDomainRequestBody$inboundSchema: z.ZodType<
  RenewDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  years: z.number(),
  expectedPrice: z.number(),
  contactInformation: z.lazy(() => RenewDomainContactInformation$inboundSchema)
    .optional(),
});

/** @internal */
export type RenewDomainRequestBody$Outbound = {
  years: number;
  expectedPrice: number;
  contactInformation?: RenewDomainContactInformation$Outbound | undefined;
};

/** @internal */
export const RenewDomainRequestBody$outboundSchema: z.ZodType<
  RenewDomainRequestBody$Outbound,
  z.ZodTypeDef,
  RenewDomainRequestBody
> = z.object({
  years: z.number(),
  expectedPrice: z.number(),
  contactInformation: z.lazy(() => RenewDomainContactInformation$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainRequestBody$ {
  /** @deprecated use `RenewDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = RenewDomainRequestBody$inboundSchema;
  /** @deprecated use `RenewDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = RenewDomainRequestBody$outboundSchema;
  /** @deprecated use `RenewDomainRequestBody$Outbound` instead. */
  export type Outbound = RenewDomainRequestBody$Outbound;
}

export function renewDomainRequestBodyToJSON(
  renewDomainRequestBody: RenewDomainRequestBody,
): string {
  return JSON.stringify(
    RenewDomainRequestBody$outboundSchema.parse(renewDomainRequestBody),
  );
}

export function renewDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<RenewDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenewDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenewDomainRequestBody' from JSON`,
  );
}

/** @internal */
export const RenewDomainRequest$inboundSchema: z.ZodType<
  RenewDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
  RequestBody: z.lazy(() => RenewDomainRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type RenewDomainRequest$Outbound = {
  domain: string;
  teamId?: string | undefined;
  RequestBody: RenewDomainRequestBody$Outbound;
};

/** @internal */
export const RenewDomainRequest$outboundSchema: z.ZodType<
  RenewDomainRequest$Outbound,
  z.ZodTypeDef,
  RenewDomainRequest
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
  requestBody: z.lazy(() => RenewDomainRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainRequest$ {
  /** @deprecated use `RenewDomainRequest$inboundSchema` instead. */
  export const inboundSchema = RenewDomainRequest$inboundSchema;
  /** @deprecated use `RenewDomainRequest$outboundSchema` instead. */
  export const outboundSchema = RenewDomainRequest$outboundSchema;
  /** @deprecated use `RenewDomainRequest$Outbound` instead. */
  export type Outbound = RenewDomainRequest$Outbound;
}

export function renewDomainRequestToJSON(
  renewDomainRequest: RenewDomainRequest,
): string {
  return JSON.stringify(
    RenewDomainRequest$outboundSchema.parse(renewDomainRequest),
  );
}

export function renewDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<RenewDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenewDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenewDomainRequest' from JSON`,
  );
}

/** @internal */
export const RenewDomainDomainsRegistrarResponseResponseBody$inboundSchema:
  z.ZodType<
    RenewDomainDomainsRegistrarResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type RenewDomainDomainsRegistrarResponseResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const RenewDomainDomainsRegistrarResponseResponseBody$outboundSchema:
  z.ZodType<
    RenewDomainDomainsRegistrarResponseResponseBody$Outbound,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainDomainsRegistrarResponseResponseBody$ {
  /** @deprecated use `RenewDomainDomainsRegistrarResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RenewDomainDomainsRegistrarResponseResponseBody$inboundSchema;
  /** @deprecated use `RenewDomainDomainsRegistrarResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RenewDomainDomainsRegistrarResponseResponseBody$outboundSchema;
  /** @deprecated use `RenewDomainDomainsRegistrarResponseResponseBody$Outbound` instead. */
  export type Outbound =
    RenewDomainDomainsRegistrarResponseResponseBody$Outbound;
}

export function renewDomainDomainsRegistrarResponseResponseBodyToJSON(
  renewDomainDomainsRegistrarResponseResponseBody:
    RenewDomainDomainsRegistrarResponseResponseBody,
): string {
  return JSON.stringify(
    RenewDomainDomainsRegistrarResponseResponseBody$outboundSchema.parse(
      renewDomainDomainsRegistrarResponseResponseBody,
    ),
  );
}

export function renewDomainDomainsRegistrarResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RenewDomainDomainsRegistrarResponseResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RenewDomainDomainsRegistrarResponseResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RenewDomainDomainsRegistrarResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const RenewDomainDomainsRegistrarResponseBody$inboundSchema: z.ZodType<
  RenewDomainDomainsRegistrarResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  BadRequest$inboundSchema,
  DomainTooShort$inboundSchema,
  DomainNotRegistered$inboundSchema,
  ExpectedPriceMismatch$inboundSchema,
  DomainNotAvailable$inboundSchema,
  TldNotSupported$inboundSchema,
  HttpApiDecodeError$inboundSchema,
]);

/** @internal */
export type RenewDomainDomainsRegistrarResponseBody$Outbound =
  | BadRequest$Outbound
  | DomainTooShort$Outbound
  | DomainNotRegistered$Outbound
  | ExpectedPriceMismatch$Outbound
  | DomainNotAvailable$Outbound
  | TldNotSupported$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const RenewDomainDomainsRegistrarResponseBody$outboundSchema: z.ZodType<
  RenewDomainDomainsRegistrarResponseBody$Outbound,
  z.ZodTypeDef,
  unknown
> = z.union([
  BadRequest$outboundSchema,
  DomainTooShort$outboundSchema,
  DomainNotRegistered$outboundSchema,
  ExpectedPriceMismatch$outboundSchema,
  DomainNotAvailable$outboundSchema,
  TldNotSupported$outboundSchema,
  HttpApiDecodeError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainDomainsRegistrarResponseBody$ {
  /** @deprecated use `RenewDomainDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    RenewDomainDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `RenewDomainDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    RenewDomainDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `RenewDomainDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = RenewDomainDomainsRegistrarResponseBody$Outbound;
}

export function renewDomainDomainsRegistrarResponseBodyToJSON(
  renewDomainDomainsRegistrarResponseBody:
    RenewDomainDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    RenewDomainDomainsRegistrarResponseBody$outboundSchema.parse(
      renewDomainDomainsRegistrarResponseBody,
    ),
  );
}

export function renewDomainDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  RenewDomainDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      RenewDomainDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'RenewDomainDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const RenewDomainMethod$inboundSchema: z.ZodNativeEnum<
  typeof RenewDomainMethod
> = z.nativeEnum(RenewDomainMethod);

/** @internal */
export const RenewDomainMethod$outboundSchema: z.ZodNativeEnum<
  typeof RenewDomainMethod
> = RenewDomainMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainMethod$ {
  /** @deprecated use `RenewDomainMethod$inboundSchema` instead. */
  export const inboundSchema = RenewDomainMethod$inboundSchema;
  /** @deprecated use `RenewDomainMethod$outboundSchema` instead. */
  export const outboundSchema = RenewDomainMethod$outboundSchema;
}

/** @internal */
export const RenewDomainLinks$inboundSchema: z.ZodType<
  RenewDomainLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  method: RenewDomainMethod$inboundSchema,
});

/** @internal */
export type RenewDomainLinks$Outbound = {
  href: string;
  method: string;
};

/** @internal */
export const RenewDomainLinks$outboundSchema: z.ZodType<
  RenewDomainLinks$Outbound,
  z.ZodTypeDef,
  RenewDomainLinks
> = z.object({
  href: z.string(),
  method: RenewDomainMethod$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainLinks$ {
  /** @deprecated use `RenewDomainLinks$inboundSchema` instead. */
  export const inboundSchema = RenewDomainLinks$inboundSchema;
  /** @deprecated use `RenewDomainLinks$outboundSchema` instead. */
  export const outboundSchema = RenewDomainLinks$outboundSchema;
  /** @deprecated use `RenewDomainLinks$Outbound` instead. */
  export type Outbound = RenewDomainLinks$Outbound;
}

export function renewDomainLinksToJSON(
  renewDomainLinks: RenewDomainLinks,
): string {
  return JSON.stringify(
    RenewDomainLinks$outboundSchema.parse(renewDomainLinks),
  );
}

export function renewDomainLinksFromJSON(
  jsonString: string,
): SafeParseResult<RenewDomainLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenewDomainLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenewDomainLinks' from JSON`,
  );
}

/** @internal */
export const RenewDomainResponseBody$inboundSchema: z.ZodType<
  RenewDomainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  _links: z.record(z.lazy(() => RenewDomainLinks$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type RenewDomainResponseBody$Outbound = {
  orderId: string;
  _links: { [k: string]: RenewDomainLinks$Outbound };
};

/** @internal */
export const RenewDomainResponseBody$outboundSchema: z.ZodType<
  RenewDomainResponseBody$Outbound,
  z.ZodTypeDef,
  RenewDomainResponseBody
> = z.object({
  orderId: z.string(),
  links: z.record(z.lazy(() => RenewDomainLinks$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RenewDomainResponseBody$ {
  /** @deprecated use `RenewDomainResponseBody$inboundSchema` instead. */
  export const inboundSchema = RenewDomainResponseBody$inboundSchema;
  /** @deprecated use `RenewDomainResponseBody$outboundSchema` instead. */
  export const outboundSchema = RenewDomainResponseBody$outboundSchema;
  /** @deprecated use `RenewDomainResponseBody$Outbound` instead. */
  export type Outbound = RenewDomainResponseBody$Outbound;
}

export function renewDomainResponseBodyToJSON(
  renewDomainResponseBody: RenewDomainResponseBody,
): string {
  return JSON.stringify(
    RenewDomainResponseBody$outboundSchema.parse(renewDomainResponseBody),
  );
}

export function renewDomainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<RenewDomainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RenewDomainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RenewDomainResponseBody' from JSON`,
  );
}
