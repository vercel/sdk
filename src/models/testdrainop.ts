/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type TestDrainSchemas = {
  version: string;
};

export type TestDrainDelivery3 = {
  type: string;
  endpoint: string;
  secret: string;
};

export type TestDrainEndpoint1 = {
  traces: string;
};

export type TestDrainDeliveryEndpoint = TestDrainEndpoint1;

export const TestDrainDeliveryDrainsEncoding = {
  Proto: "proto",
  Json: "json",
} as const;
export type TestDrainDeliveryDrainsEncoding = ClosedEnum<
  typeof TestDrainDeliveryDrainsEncoding
>;

export type TestDrainDelivery2 = {
  type: string;
  endpoint: TestDrainEndpoint1;
  encoding: TestDrainDeliveryDrainsEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const TestDrainDeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type TestDrainDeliveryCompression = ClosedEnum<
  typeof TestDrainDeliveryCompression
>;

export const TestDrainDeliveryEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type TestDrainDeliveryEncoding = ClosedEnum<
  typeof TestDrainDeliveryEncoding
>;

export type TestDrainDelivery1 = {
  type: string;
  endpoint: string;
  compression?: TestDrainDeliveryCompression | undefined;
  encoding: TestDrainDeliveryEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type TestDrainDelivery =
  | TestDrainDelivery1
  | TestDrainDelivery2
  | TestDrainDelivery3;

export type TestDrainRequestBody = {
  schemas: { [k: string]: TestDrainSchemas };
  delivery: TestDrainDelivery1 | TestDrainDelivery2 | TestDrainDelivery3;
};

export type TestDrainRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: TestDrainRequestBody | undefined;
};

export type TestDrainResponseBody2 = {
  status: string;
  error: string;
  endpoint: string;
};

export type TestDrainResponseBody1 = {};

export type TestDrainResponseBody =
  | TestDrainResponseBody2
  | TestDrainResponseBody1;

/** @internal */
export const TestDrainSchemas$inboundSchema: z.ZodType<
  TestDrainSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
});

/** @internal */
export type TestDrainSchemas$Outbound = {
  version: string;
};

/** @internal */
export const TestDrainSchemas$outboundSchema: z.ZodType<
  TestDrainSchemas$Outbound,
  z.ZodTypeDef,
  TestDrainSchemas
> = z.object({
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainSchemas$ {
  /** @deprecated use `TestDrainSchemas$inboundSchema` instead. */
  export const inboundSchema = TestDrainSchemas$inboundSchema;
  /** @deprecated use `TestDrainSchemas$outboundSchema` instead. */
  export const outboundSchema = TestDrainSchemas$outboundSchema;
  /** @deprecated use `TestDrainSchemas$Outbound` instead. */
  export type Outbound = TestDrainSchemas$Outbound;
}

export function testDrainSchemasToJSON(
  testDrainSchemas: TestDrainSchemas,
): string {
  return JSON.stringify(
    TestDrainSchemas$outboundSchema.parse(testDrainSchemas),
  );
}

export function testDrainSchemasFromJSON(
  jsonString: string,
): SafeParseResult<TestDrainSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainSchemas' from JSON`,
  );
}

/** @internal */
export const TestDrainDelivery3$inboundSchema: z.ZodType<
  TestDrainDelivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type TestDrainDelivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const TestDrainDelivery3$outboundSchema: z.ZodType<
  TestDrainDelivery3$Outbound,
  z.ZodTypeDef,
  TestDrainDelivery3
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDelivery3$ {
  /** @deprecated use `TestDrainDelivery3$inboundSchema` instead. */
  export const inboundSchema = TestDrainDelivery3$inboundSchema;
  /** @deprecated use `TestDrainDelivery3$outboundSchema` instead. */
  export const outboundSchema = TestDrainDelivery3$outboundSchema;
  /** @deprecated use `TestDrainDelivery3$Outbound` instead. */
  export type Outbound = TestDrainDelivery3$Outbound;
}

export function testDrainDelivery3ToJSON(
  testDrainDelivery3: TestDrainDelivery3,
): string {
  return JSON.stringify(
    TestDrainDelivery3$outboundSchema.parse(testDrainDelivery3),
  );
}

export function testDrainDelivery3FromJSON(
  jsonString: string,
): SafeParseResult<TestDrainDelivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainDelivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainDelivery3' from JSON`,
  );
}

/** @internal */
export const TestDrainEndpoint1$inboundSchema: z.ZodType<
  TestDrainEndpoint1,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type TestDrainEndpoint1$Outbound = {
  traces: string;
};

/** @internal */
export const TestDrainEndpoint1$outboundSchema: z.ZodType<
  TestDrainEndpoint1$Outbound,
  z.ZodTypeDef,
  TestDrainEndpoint1
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainEndpoint1$ {
  /** @deprecated use `TestDrainEndpoint1$inboundSchema` instead. */
  export const inboundSchema = TestDrainEndpoint1$inboundSchema;
  /** @deprecated use `TestDrainEndpoint1$outboundSchema` instead. */
  export const outboundSchema = TestDrainEndpoint1$outboundSchema;
  /** @deprecated use `TestDrainEndpoint1$Outbound` instead. */
  export type Outbound = TestDrainEndpoint1$Outbound;
}

export function testDrainEndpoint1ToJSON(
  testDrainEndpoint1: TestDrainEndpoint1,
): string {
  return JSON.stringify(
    TestDrainEndpoint1$outboundSchema.parse(testDrainEndpoint1),
  );
}

export function testDrainEndpoint1FromJSON(
  jsonString: string,
): SafeParseResult<TestDrainEndpoint1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainEndpoint1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainEndpoint1' from JSON`,
  );
}

/** @internal */
export const TestDrainDeliveryEndpoint$inboundSchema: z.ZodType<
  TestDrainDeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => TestDrainEndpoint1$inboundSchema);

/** @internal */
export type TestDrainDeliveryEndpoint$Outbound = TestDrainEndpoint1$Outbound;

/** @internal */
export const TestDrainDeliveryEndpoint$outboundSchema: z.ZodType<
  TestDrainDeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  TestDrainDeliveryEndpoint
> = z.lazy(() => TestDrainEndpoint1$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDeliveryEndpoint$ {
  /** @deprecated use `TestDrainDeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = TestDrainDeliveryEndpoint$inboundSchema;
  /** @deprecated use `TestDrainDeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = TestDrainDeliveryEndpoint$outboundSchema;
  /** @deprecated use `TestDrainDeliveryEndpoint$Outbound` instead. */
  export type Outbound = TestDrainDeliveryEndpoint$Outbound;
}

export function testDrainDeliveryEndpointToJSON(
  testDrainDeliveryEndpoint: TestDrainDeliveryEndpoint,
): string {
  return JSON.stringify(
    TestDrainDeliveryEndpoint$outboundSchema.parse(testDrainDeliveryEndpoint),
  );
}

export function testDrainDeliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<TestDrainDeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainDeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainDeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const TestDrainDeliveryDrainsEncoding$inboundSchema: z.ZodNativeEnum<
  typeof TestDrainDeliveryDrainsEncoding
> = z.nativeEnum(TestDrainDeliveryDrainsEncoding);

/** @internal */
export const TestDrainDeliveryDrainsEncoding$outboundSchema: z.ZodNativeEnum<
  typeof TestDrainDeliveryDrainsEncoding
> = TestDrainDeliveryDrainsEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDeliveryDrainsEncoding$ {
  /** @deprecated use `TestDrainDeliveryDrainsEncoding$inboundSchema` instead. */
  export const inboundSchema = TestDrainDeliveryDrainsEncoding$inboundSchema;
  /** @deprecated use `TestDrainDeliveryDrainsEncoding$outboundSchema` instead. */
  export const outboundSchema = TestDrainDeliveryDrainsEncoding$outboundSchema;
}

/** @internal */
export const TestDrainDelivery2$inboundSchema: z.ZodType<
  TestDrainDelivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.lazy(() => TestDrainEndpoint1$inboundSchema),
  encoding: TestDrainDeliveryDrainsEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type TestDrainDelivery2$Outbound = {
  type: string;
  endpoint: TestDrainEndpoint1$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const TestDrainDelivery2$outboundSchema: z.ZodType<
  TestDrainDelivery2$Outbound,
  z.ZodTypeDef,
  TestDrainDelivery2
> = z.object({
  type: z.string(),
  endpoint: z.lazy(() => TestDrainEndpoint1$outboundSchema),
  encoding: TestDrainDeliveryDrainsEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDelivery2$ {
  /** @deprecated use `TestDrainDelivery2$inboundSchema` instead. */
  export const inboundSchema = TestDrainDelivery2$inboundSchema;
  /** @deprecated use `TestDrainDelivery2$outboundSchema` instead. */
  export const outboundSchema = TestDrainDelivery2$outboundSchema;
  /** @deprecated use `TestDrainDelivery2$Outbound` instead. */
  export type Outbound = TestDrainDelivery2$Outbound;
}

export function testDrainDelivery2ToJSON(
  testDrainDelivery2: TestDrainDelivery2,
): string {
  return JSON.stringify(
    TestDrainDelivery2$outboundSchema.parse(testDrainDelivery2),
  );
}

export function testDrainDelivery2FromJSON(
  jsonString: string,
): SafeParseResult<TestDrainDelivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainDelivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainDelivery2' from JSON`,
  );
}

/** @internal */
export const TestDrainDeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof TestDrainDeliveryCompression
> = z.nativeEnum(TestDrainDeliveryCompression);

/** @internal */
export const TestDrainDeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof TestDrainDeliveryCompression
> = TestDrainDeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDeliveryCompression$ {
  /** @deprecated use `TestDrainDeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = TestDrainDeliveryCompression$inboundSchema;
  /** @deprecated use `TestDrainDeliveryCompression$outboundSchema` instead. */
  export const outboundSchema = TestDrainDeliveryCompression$outboundSchema;
}

/** @internal */
export const TestDrainDeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof TestDrainDeliveryEncoding
> = z.nativeEnum(TestDrainDeliveryEncoding);

/** @internal */
export const TestDrainDeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof TestDrainDeliveryEncoding
> = TestDrainDeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDeliveryEncoding$ {
  /** @deprecated use `TestDrainDeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = TestDrainDeliveryEncoding$inboundSchema;
  /** @deprecated use `TestDrainDeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = TestDrainDeliveryEncoding$outboundSchema;
}

/** @internal */
export const TestDrainDelivery1$inboundSchema: z.ZodType<
  TestDrainDelivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  compression: TestDrainDeliveryCompression$inboundSchema.optional(),
  encoding: TestDrainDeliveryEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type TestDrainDelivery1$Outbound = {
  type: string;
  endpoint: string;
  compression?: string | undefined;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const TestDrainDelivery1$outboundSchema: z.ZodType<
  TestDrainDelivery1$Outbound,
  z.ZodTypeDef,
  TestDrainDelivery1
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  compression: TestDrainDeliveryCompression$outboundSchema.optional(),
  encoding: TestDrainDeliveryEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDelivery1$ {
  /** @deprecated use `TestDrainDelivery1$inboundSchema` instead. */
  export const inboundSchema = TestDrainDelivery1$inboundSchema;
  /** @deprecated use `TestDrainDelivery1$outboundSchema` instead. */
  export const outboundSchema = TestDrainDelivery1$outboundSchema;
  /** @deprecated use `TestDrainDelivery1$Outbound` instead. */
  export type Outbound = TestDrainDelivery1$Outbound;
}

export function testDrainDelivery1ToJSON(
  testDrainDelivery1: TestDrainDelivery1,
): string {
  return JSON.stringify(
    TestDrainDelivery1$outboundSchema.parse(testDrainDelivery1),
  );
}

export function testDrainDelivery1FromJSON(
  jsonString: string,
): SafeParseResult<TestDrainDelivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainDelivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainDelivery1' from JSON`,
  );
}

/** @internal */
export const TestDrainDelivery$inboundSchema: z.ZodType<
  TestDrainDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TestDrainDelivery1$inboundSchema),
  z.lazy(() => TestDrainDelivery2$inboundSchema),
  z.lazy(() => TestDrainDelivery3$inboundSchema),
]);

/** @internal */
export type TestDrainDelivery$Outbound =
  | TestDrainDelivery1$Outbound
  | TestDrainDelivery2$Outbound
  | TestDrainDelivery3$Outbound;

/** @internal */
export const TestDrainDelivery$outboundSchema: z.ZodType<
  TestDrainDelivery$Outbound,
  z.ZodTypeDef,
  TestDrainDelivery
> = z.union([
  z.lazy(() => TestDrainDelivery1$outboundSchema),
  z.lazy(() => TestDrainDelivery2$outboundSchema),
  z.lazy(() => TestDrainDelivery3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainDelivery$ {
  /** @deprecated use `TestDrainDelivery$inboundSchema` instead. */
  export const inboundSchema = TestDrainDelivery$inboundSchema;
  /** @deprecated use `TestDrainDelivery$outboundSchema` instead. */
  export const outboundSchema = TestDrainDelivery$outboundSchema;
  /** @deprecated use `TestDrainDelivery$Outbound` instead. */
  export type Outbound = TestDrainDelivery$Outbound;
}

export function testDrainDeliveryToJSON(
  testDrainDelivery: TestDrainDelivery,
): string {
  return JSON.stringify(
    TestDrainDelivery$outboundSchema.parse(testDrainDelivery),
  );
}

export function testDrainDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<TestDrainDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainDelivery' from JSON`,
  );
}

/** @internal */
export const TestDrainRequestBody$inboundSchema: z.ZodType<
  TestDrainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  schemas: z.record(z.lazy(() => TestDrainSchemas$inboundSchema)),
  delivery: z.union([
    z.lazy(() => TestDrainDelivery1$inboundSchema),
    z.lazy(() => TestDrainDelivery2$inboundSchema),
    z.lazy(() => TestDrainDelivery3$inboundSchema),
  ]),
});

/** @internal */
export type TestDrainRequestBody$Outbound = {
  schemas: { [k: string]: TestDrainSchemas$Outbound };
  delivery:
    | TestDrainDelivery1$Outbound
    | TestDrainDelivery2$Outbound
    | TestDrainDelivery3$Outbound;
};

/** @internal */
export const TestDrainRequestBody$outboundSchema: z.ZodType<
  TestDrainRequestBody$Outbound,
  z.ZodTypeDef,
  TestDrainRequestBody
> = z.object({
  schemas: z.record(z.lazy(() => TestDrainSchemas$outboundSchema)),
  delivery: z.union([
    z.lazy(() => TestDrainDelivery1$outboundSchema),
    z.lazy(() => TestDrainDelivery2$outboundSchema),
    z.lazy(() => TestDrainDelivery3$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainRequestBody$ {
  /** @deprecated use `TestDrainRequestBody$inboundSchema` instead. */
  export const inboundSchema = TestDrainRequestBody$inboundSchema;
  /** @deprecated use `TestDrainRequestBody$outboundSchema` instead. */
  export const outboundSchema = TestDrainRequestBody$outboundSchema;
  /** @deprecated use `TestDrainRequestBody$Outbound` instead. */
  export type Outbound = TestDrainRequestBody$Outbound;
}

export function testDrainRequestBodyToJSON(
  testDrainRequestBody: TestDrainRequestBody,
): string {
  return JSON.stringify(
    TestDrainRequestBody$outboundSchema.parse(testDrainRequestBody),
  );
}

export function testDrainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TestDrainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainRequestBody' from JSON`,
  );
}

/** @internal */
export const TestDrainRequest$inboundSchema: z.ZodType<
  TestDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => TestDrainRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TestDrainRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: TestDrainRequestBody$Outbound | undefined;
};

/** @internal */
export const TestDrainRequest$outboundSchema: z.ZodType<
  TestDrainRequest$Outbound,
  z.ZodTypeDef,
  TestDrainRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => TestDrainRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainRequest$ {
  /** @deprecated use `TestDrainRequest$inboundSchema` instead. */
  export const inboundSchema = TestDrainRequest$inboundSchema;
  /** @deprecated use `TestDrainRequest$outboundSchema` instead. */
  export const outboundSchema = TestDrainRequest$outboundSchema;
  /** @deprecated use `TestDrainRequest$Outbound` instead. */
  export type Outbound = TestDrainRequest$Outbound;
}

export function testDrainRequestToJSON(
  testDrainRequest: TestDrainRequest,
): string {
  return JSON.stringify(
    TestDrainRequest$outboundSchema.parse(testDrainRequest),
  );
}

export function testDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<TestDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainRequest' from JSON`,
  );
}

/** @internal */
export const TestDrainResponseBody2$inboundSchema: z.ZodType<
  TestDrainResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  error: z.string(),
  endpoint: z.string(),
});

/** @internal */
export type TestDrainResponseBody2$Outbound = {
  status: string;
  error: string;
  endpoint: string;
};

/** @internal */
export const TestDrainResponseBody2$outboundSchema: z.ZodType<
  TestDrainResponseBody2$Outbound,
  z.ZodTypeDef,
  TestDrainResponseBody2
> = z.object({
  status: z.string(),
  error: z.string(),
  endpoint: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainResponseBody2$ {
  /** @deprecated use `TestDrainResponseBody2$inboundSchema` instead. */
  export const inboundSchema = TestDrainResponseBody2$inboundSchema;
  /** @deprecated use `TestDrainResponseBody2$outboundSchema` instead. */
  export const outboundSchema = TestDrainResponseBody2$outboundSchema;
  /** @deprecated use `TestDrainResponseBody2$Outbound` instead. */
  export type Outbound = TestDrainResponseBody2$Outbound;
}

export function testDrainResponseBody2ToJSON(
  testDrainResponseBody2: TestDrainResponseBody2,
): string {
  return JSON.stringify(
    TestDrainResponseBody2$outboundSchema.parse(testDrainResponseBody2),
  );
}

export function testDrainResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<TestDrainResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainResponseBody2' from JSON`,
  );
}

/** @internal */
export const TestDrainResponseBody1$inboundSchema: z.ZodType<
  TestDrainResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type TestDrainResponseBody1$Outbound = {};

/** @internal */
export const TestDrainResponseBody1$outboundSchema: z.ZodType<
  TestDrainResponseBody1$Outbound,
  z.ZodTypeDef,
  TestDrainResponseBody1
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainResponseBody1$ {
  /** @deprecated use `TestDrainResponseBody1$inboundSchema` instead. */
  export const inboundSchema = TestDrainResponseBody1$inboundSchema;
  /** @deprecated use `TestDrainResponseBody1$outboundSchema` instead. */
  export const outboundSchema = TestDrainResponseBody1$outboundSchema;
  /** @deprecated use `TestDrainResponseBody1$Outbound` instead. */
  export type Outbound = TestDrainResponseBody1$Outbound;
}

export function testDrainResponseBody1ToJSON(
  testDrainResponseBody1: TestDrainResponseBody1,
): string {
  return JSON.stringify(
    TestDrainResponseBody1$outboundSchema.parse(testDrainResponseBody1),
  );
}

export function testDrainResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<TestDrainResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainResponseBody1' from JSON`,
  );
}

/** @internal */
export const TestDrainResponseBody$inboundSchema: z.ZodType<
  TestDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => TestDrainResponseBody2$inboundSchema),
  z.lazy(() => TestDrainResponseBody1$inboundSchema),
]);

/** @internal */
export type TestDrainResponseBody$Outbound =
  | TestDrainResponseBody2$Outbound
  | TestDrainResponseBody1$Outbound;

/** @internal */
export const TestDrainResponseBody$outboundSchema: z.ZodType<
  TestDrainResponseBody$Outbound,
  z.ZodTypeDef,
  TestDrainResponseBody
> = z.union([
  z.lazy(() => TestDrainResponseBody2$outboundSchema),
  z.lazy(() => TestDrainResponseBody1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TestDrainResponseBody$ {
  /** @deprecated use `TestDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema = TestDrainResponseBody$inboundSchema;
  /** @deprecated use `TestDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema = TestDrainResponseBody$outboundSchema;
  /** @deprecated use `TestDrainResponseBody$Outbound` instead. */
  export type Outbound = TestDrainResponseBody$Outbound;
}

export function testDrainResponseBodyToJSON(
  testDrainResponseBody: TestDrainResponseBody,
): string {
  return JSON.stringify(
    TestDrainResponseBody$outboundSchema.parse(testDrainResponseBody),
  );
}

export function testDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TestDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TestDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TestDrainResponseBody' from JSON`,
  );
}
