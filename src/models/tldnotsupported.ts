/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const TldNotSupportedCode = {
  TldNotSupported: "tld_not_supported",
} as const;
export type TldNotSupportedCode = ClosedEnum<typeof TldNotSupportedCode>;

export const TldNotSupportedTag = {
  TldNotSupported: "TldNotSupported",
} as const;
export type TldNotSupportedTag = ClosedEnum<typeof TldNotSupportedTag>;

export type TldNotSupportedData = {
  status: number;
  code: TldNotSupportedCode;
  message: string;
  tag: TldNotSupportedTag;
};

export class TldNotSupported extends VercelError {
  status: number;
  code: TldNotSupportedCode;
  tag: TldNotSupportedTag;

  /** The original data that was passed to this error instance. */
  data$: TldNotSupportedData;

  constructor(
    err: TldNotSupportedData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "TldNotSupported";
  }
}

/** @internal */
export const TldNotSupportedCode$inboundSchema: z.ZodNativeEnum<
  typeof TldNotSupportedCode
> = z.nativeEnum(TldNotSupportedCode);

/** @internal */
export const TldNotSupportedCode$outboundSchema: z.ZodNativeEnum<
  typeof TldNotSupportedCode
> = TldNotSupportedCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TldNotSupportedCode$ {
  /** @deprecated use `TldNotSupportedCode$inboundSchema` instead. */
  export const inboundSchema = TldNotSupportedCode$inboundSchema;
  /** @deprecated use `TldNotSupportedCode$outboundSchema` instead. */
  export const outboundSchema = TldNotSupportedCode$outboundSchema;
}

/** @internal */
export const TldNotSupportedTag$inboundSchema: z.ZodNativeEnum<
  typeof TldNotSupportedTag
> = z.nativeEnum(TldNotSupportedTag);

/** @internal */
export const TldNotSupportedTag$outboundSchema: z.ZodNativeEnum<
  typeof TldNotSupportedTag
> = TldNotSupportedTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TldNotSupportedTag$ {
  /** @deprecated use `TldNotSupportedTag$inboundSchema` instead. */
  export const inboundSchema = TldNotSupportedTag$inboundSchema;
  /** @deprecated use `TldNotSupportedTag$outboundSchema` instead. */
  export const outboundSchema = TldNotSupportedTag$outboundSchema;
}

/** @internal */
export const TldNotSupported$inboundSchema: z.ZodType<
  TldNotSupported,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: TldNotSupportedCode$inboundSchema,
  message: z.string(),
  _tag: TldNotSupportedTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new TldNotSupported(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TldNotSupported$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const TldNotSupported$outboundSchema: z.ZodType<
  TldNotSupported$Outbound,
  z.ZodTypeDef,
  TldNotSupported
> = z.instanceof(TldNotSupported)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: TldNotSupportedCode$outboundSchema,
      message: z.string(),
      tag: TldNotSupportedTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TldNotSupported$ {
  /** @deprecated use `TldNotSupported$inboundSchema` instead. */
  export const inboundSchema = TldNotSupported$inboundSchema;
  /** @deprecated use `TldNotSupported$outboundSchema` instead. */
  export const outboundSchema = TldNotSupported$outboundSchema;
  /** @deprecated use `TldNotSupported$Outbound` instead. */
  export type Outbound = TldNotSupported$Outbound;
}
