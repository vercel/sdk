/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const TooManyDomainsCode = {
  TooManyDomains: "too_many_domains",
} as const;
export type TooManyDomainsCode = ClosedEnum<typeof TooManyDomainsCode>;

export const TooManyDomainsTag = {
  TooManyDomains: "TooManyDomains",
} as const;
export type TooManyDomainsTag = ClosedEnum<typeof TooManyDomainsTag>;

export type TooManyDomainsData = {
  status: number;
  code: TooManyDomainsCode;
  message: string;
  tag: TooManyDomainsTag;
};

export class TooManyDomains extends VercelError {
  status: number;
  code: TooManyDomainsCode;
  tag: TooManyDomainsTag;

  /** The original data that was passed to this error instance. */
  data$: TooManyDomainsData;

  constructor(
    err: TooManyDomainsData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "TooManyDomains";
  }
}

/** @internal */
export const TooManyDomainsCode$inboundSchema: z.ZodNativeEnum<
  typeof TooManyDomainsCode
> = z.nativeEnum(TooManyDomainsCode);

/** @internal */
export const TooManyDomainsCode$outboundSchema: z.ZodNativeEnum<
  typeof TooManyDomainsCode
> = TooManyDomainsCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyDomainsCode$ {
  /** @deprecated use `TooManyDomainsCode$inboundSchema` instead. */
  export const inboundSchema = TooManyDomainsCode$inboundSchema;
  /** @deprecated use `TooManyDomainsCode$outboundSchema` instead. */
  export const outboundSchema = TooManyDomainsCode$outboundSchema;
}

/** @internal */
export const TooManyDomainsTag$inboundSchema: z.ZodNativeEnum<
  typeof TooManyDomainsTag
> = z.nativeEnum(TooManyDomainsTag);

/** @internal */
export const TooManyDomainsTag$outboundSchema: z.ZodNativeEnum<
  typeof TooManyDomainsTag
> = TooManyDomainsTag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyDomainsTag$ {
  /** @deprecated use `TooManyDomainsTag$inboundSchema` instead. */
  export const inboundSchema = TooManyDomainsTag$inboundSchema;
  /** @deprecated use `TooManyDomainsTag$outboundSchema` instead. */
  export const outboundSchema = TooManyDomainsTag$outboundSchema;
}

/** @internal */
export const TooManyDomains$inboundSchema: z.ZodType<
  TooManyDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: TooManyDomainsCode$inboundSchema,
  message: z.string(),
  _tag: TooManyDomainsTag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new TooManyDomains(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type TooManyDomains$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const TooManyDomains$outboundSchema: z.ZodType<
  TooManyDomains$Outbound,
  z.ZodTypeDef,
  TooManyDomains
> = z.instanceof(TooManyDomains)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: TooManyDomainsCode$outboundSchema,
      message: z.string(),
      tag: TooManyDomainsTag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TooManyDomains$ {
  /** @deprecated use `TooManyDomains$inboundSchema` instead. */
  export const inboundSchema = TooManyDomains$inboundSchema;
  /** @deprecated use `TooManyDomains$outboundSchema` instead. */
  export const outboundSchema = TooManyDomains$outboundSchema;
  /** @deprecated use `TooManyDomains$Outbound` instead. */
  export type Outbound = TooManyDomains$Outbound;
}
