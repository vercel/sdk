/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  BadRequest,
  BadRequest$inboundSchema,
  BadRequest$Outbound,
  BadRequest$outboundSchema,
} from "./badrequest.js";
import {
  DomainNotAvailable,
  DomainNotAvailable$inboundSchema,
  DomainNotAvailable$Outbound,
  DomainNotAvailable$outboundSchema,
} from "./domainnotavailable.js";
import {
  ExpectedPriceMismatch,
  ExpectedPriceMismatch$inboundSchema,
  ExpectedPriceMismatch$Outbound,
  ExpectedPriceMismatch$outboundSchema,
} from "./expectedpricemismatch.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";
import {
  TldNotSupported,
  TldNotSupported$inboundSchema,
  TldNotSupported$Outbound,
  TldNotSupported$outboundSchema,
} from "./tldnotsupported.js";

export type TransferInDomainContactInformation = {
  /**
   * a non empty string
   */
  firstName: string;
  /**
   * a non empty string
   */
  lastName: string;
  /**
   * a non empty string
   */
  email: string;
  /**
   * A valid E.164 phone number
   */
  phone: string;
  /**
   * a non empty string
   */
  address1: string;
  /**
   * a non empty string
   */
  address2?: string | undefined;
  /**
   * a non empty string
   */
  city: string;
  /**
   * a non empty string
   */
  state: string;
  /**
   * a non empty string
   */
  zip: string;
  /**
   * A valid ISO 3166-1 alpha-2 country code
   */
  country: string;
  /**
   * a non empty string
   */
  companyName?: string | undefined;
  /**
   * A valid E.164 phone number
   */
  fax?: string | undefined;
};

export type TransferInDomainRequestBody = {
  authCode: string;
  /**
   * Whether the domain should be auto-renewed before it expires. This can be configured later through the Vercel Dashboard or the [Update auto-renew for a domain](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/update-auto-renew-for-a-domain) endpoint.
   */
  autoRenew: boolean;
  /**
   * The number of years to renew the domain for once it is transferred in. This must be a valid number of transfer years for the TLD.
   */
  years: number;
  /**
   * The expected price for the domain. Use the [Get price data for a domain](https://vercel.com/docs/rest-api/reference/endpoints/domains-registrar/get-price-data-for-a-domain) endpoint to retrieve the price data for a domain.
   */
  expectedPrice: number;
  contactInformation: TransferInDomainContactInformation;
};

export type TransferInDomainRequest = {
  domain: string;
  requestBody: TransferInDomainRequestBody;
};

/**
 * NotAuthorizedForScope
 */
export type TransferInDomainDomainsRegistrarResponseResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

/**
 * There was something wrong with the request
 */
export type TransferInDomainDomainsRegistrarResponseBody =
  | BadRequest
  | ExpectedPriceMismatch
  | DomainNotAvailable
  | TldNotSupported
  | HttpApiDecodeError;

export const TransferInDomainMethod = {
  Get: "GET",
  Post: "POST",
  Put: "PUT",
  Delete: "DELETE",
  Patch: "PATCH",
} as const;
export type TransferInDomainMethod = ClosedEnum<typeof TransferInDomainMethod>;

export type TransferInDomainLinks = {
  href: string;
  method: TransferInDomainMethod;
};

/**
 * Success
 */
export type TransferInDomainResponseBody = {
  orderId: string;
  links: { [k: string]: TransferInDomainLinks };
};

/** @internal */
export const TransferInDomainContactInformation$inboundSchema: z.ZodType<
  TransferInDomainContactInformation,
  z.ZodTypeDef,
  unknown
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
});

/** @internal */
export type TransferInDomainContactInformation$Outbound = {
  firstName: string;
  lastName: string;
  email: string;
  phone: string;
  address1: string;
  address2?: string | undefined;
  city: string;
  state: string;
  zip: string;
  country: string;
  companyName?: string | undefined;
  fax?: string | undefined;
};

/** @internal */
export const TransferInDomainContactInformation$outboundSchema: z.ZodType<
  TransferInDomainContactInformation$Outbound,
  z.ZodTypeDef,
  TransferInDomainContactInformation
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  email: z.string(),
  phone: z.string(),
  address1: z.string(),
  address2: z.string().optional(),
  city: z.string(),
  state: z.string(),
  zip: z.string(),
  country: z.string(),
  companyName: z.string().optional(),
  fax: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainContactInformation$ {
  /** @deprecated use `TransferInDomainContactInformation$inboundSchema` instead. */
  export const inboundSchema = TransferInDomainContactInformation$inboundSchema;
  /** @deprecated use `TransferInDomainContactInformation$outboundSchema` instead. */
  export const outboundSchema =
    TransferInDomainContactInformation$outboundSchema;
  /** @deprecated use `TransferInDomainContactInformation$Outbound` instead. */
  export type Outbound = TransferInDomainContactInformation$Outbound;
}

export function transferInDomainContactInformationToJSON(
  transferInDomainContactInformation: TransferInDomainContactInformation,
): string {
  return JSON.stringify(
    TransferInDomainContactInformation$outboundSchema.parse(
      transferInDomainContactInformation,
    ),
  );
}

export function transferInDomainContactInformationFromJSON(
  jsonString: string,
): SafeParseResult<TransferInDomainContactInformation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      TransferInDomainContactInformation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferInDomainContactInformation' from JSON`,
  );
}

/** @internal */
export const TransferInDomainRequestBody$inboundSchema: z.ZodType<
  TransferInDomainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  authCode: z.string(),
  autoRenew: z.boolean(),
  years: z.number(),
  expectedPrice: z.number(),
  contactInformation: z.lazy(() =>
    TransferInDomainContactInformation$inboundSchema
  ),
});

/** @internal */
export type TransferInDomainRequestBody$Outbound = {
  authCode: string;
  autoRenew: boolean;
  years: number;
  expectedPrice: number;
  contactInformation: TransferInDomainContactInformation$Outbound;
};

/** @internal */
export const TransferInDomainRequestBody$outboundSchema: z.ZodType<
  TransferInDomainRequestBody$Outbound,
  z.ZodTypeDef,
  TransferInDomainRequestBody
> = z.object({
  authCode: z.string(),
  autoRenew: z.boolean(),
  years: z.number(),
  expectedPrice: z.number(),
  contactInformation: z.lazy(() =>
    TransferInDomainContactInformation$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainRequestBody$ {
  /** @deprecated use `TransferInDomainRequestBody$inboundSchema` instead. */
  export const inboundSchema = TransferInDomainRequestBody$inboundSchema;
  /** @deprecated use `TransferInDomainRequestBody$outboundSchema` instead. */
  export const outboundSchema = TransferInDomainRequestBody$outboundSchema;
  /** @deprecated use `TransferInDomainRequestBody$Outbound` instead. */
  export type Outbound = TransferInDomainRequestBody$Outbound;
}

export function transferInDomainRequestBodyToJSON(
  transferInDomainRequestBody: TransferInDomainRequestBody,
): string {
  return JSON.stringify(
    TransferInDomainRequestBody$outboundSchema.parse(
      transferInDomainRequestBody,
    ),
  );
}

export function transferInDomainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransferInDomainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferInDomainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferInDomainRequestBody' from JSON`,
  );
}

/** @internal */
export const TransferInDomainRequest$inboundSchema: z.ZodType<
  TransferInDomainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  RequestBody: z.lazy(() => TransferInDomainRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type TransferInDomainRequest$Outbound = {
  domain: string;
  RequestBody: TransferInDomainRequestBody$Outbound;
};

/** @internal */
export const TransferInDomainRequest$outboundSchema: z.ZodType<
  TransferInDomainRequest$Outbound,
  z.ZodTypeDef,
  TransferInDomainRequest
> = z.object({
  domain: z.string(),
  requestBody: z.lazy(() => TransferInDomainRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainRequest$ {
  /** @deprecated use `TransferInDomainRequest$inboundSchema` instead. */
  export const inboundSchema = TransferInDomainRequest$inboundSchema;
  /** @deprecated use `TransferInDomainRequest$outboundSchema` instead. */
  export const outboundSchema = TransferInDomainRequest$outboundSchema;
  /** @deprecated use `TransferInDomainRequest$Outbound` instead. */
  export type Outbound = TransferInDomainRequest$Outbound;
}

export function transferInDomainRequestToJSON(
  transferInDomainRequest: TransferInDomainRequest,
): string {
  return JSON.stringify(
    TransferInDomainRequest$outboundSchema.parse(transferInDomainRequest),
  );
}

export function transferInDomainRequestFromJSON(
  jsonString: string,
): SafeParseResult<TransferInDomainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferInDomainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferInDomainRequest' from JSON`,
  );
}

/** @internal */
export const TransferInDomainDomainsRegistrarResponseResponseBody$inboundSchema:
  z.ZodType<
    TransferInDomainDomainsRegistrarResponseResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type TransferInDomainDomainsRegistrarResponseResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const TransferInDomainDomainsRegistrarResponseResponseBody$outboundSchema:
  z.ZodType<
    TransferInDomainDomainsRegistrarResponseResponseBody$Outbound,
    z.ZodTypeDef,
    TransferInDomainDomainsRegistrarResponseResponseBody
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainDomainsRegistrarResponseResponseBody$ {
  /** @deprecated use `TransferInDomainDomainsRegistrarResponseResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TransferInDomainDomainsRegistrarResponseResponseBody$inboundSchema;
  /** @deprecated use `TransferInDomainDomainsRegistrarResponseResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TransferInDomainDomainsRegistrarResponseResponseBody$outboundSchema;
  /** @deprecated use `TransferInDomainDomainsRegistrarResponseResponseBody$Outbound` instead. */
  export type Outbound =
    TransferInDomainDomainsRegistrarResponseResponseBody$Outbound;
}

export function transferInDomainDomainsRegistrarResponseResponseBodyToJSON(
  transferInDomainDomainsRegistrarResponseResponseBody:
    TransferInDomainDomainsRegistrarResponseResponseBody,
): string {
  return JSON.stringify(
    TransferInDomainDomainsRegistrarResponseResponseBody$outboundSchema.parse(
      transferInDomainDomainsRegistrarResponseResponseBody,
    ),
  );
}

export function transferInDomainDomainsRegistrarResponseResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  TransferInDomainDomainsRegistrarResponseResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransferInDomainDomainsRegistrarResponseResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransferInDomainDomainsRegistrarResponseResponseBody' from JSON`,
  );
}

/** @internal */
export const TransferInDomainDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    TransferInDomainDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([
    BadRequest$inboundSchema,
    ExpectedPriceMismatch$inboundSchema,
    DomainNotAvailable$inboundSchema,
    TldNotSupported$inboundSchema,
    HttpApiDecodeError$inboundSchema,
  ]);

/** @internal */
export type TransferInDomainDomainsRegistrarResponseBody$Outbound =
  | BadRequest$Outbound
  | ExpectedPriceMismatch$Outbound
  | DomainNotAvailable$Outbound
  | TldNotSupported$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const TransferInDomainDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    TransferInDomainDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    TransferInDomainDomainsRegistrarResponseBody
  > = z.union([
    BadRequest$outboundSchema,
    ExpectedPriceMismatch$outboundSchema,
    DomainNotAvailable$outboundSchema,
    TldNotSupported$outboundSchema,
    HttpApiDecodeError$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainDomainsRegistrarResponseBody$ {
  /** @deprecated use `TransferInDomainDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    TransferInDomainDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `TransferInDomainDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    TransferInDomainDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `TransferInDomainDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound = TransferInDomainDomainsRegistrarResponseBody$Outbound;
}

export function transferInDomainDomainsRegistrarResponseBodyToJSON(
  transferInDomainDomainsRegistrarResponseBody:
    TransferInDomainDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    TransferInDomainDomainsRegistrarResponseBody$outboundSchema.parse(
      transferInDomainDomainsRegistrarResponseBody,
    ),
  );
}

export function transferInDomainDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  TransferInDomainDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      TransferInDomainDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'TransferInDomainDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const TransferInDomainMethod$inboundSchema: z.ZodNativeEnum<
  typeof TransferInDomainMethod
> = z.nativeEnum(TransferInDomainMethod);

/** @internal */
export const TransferInDomainMethod$outboundSchema: z.ZodNativeEnum<
  typeof TransferInDomainMethod
> = TransferInDomainMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainMethod$ {
  /** @deprecated use `TransferInDomainMethod$inboundSchema` instead. */
  export const inboundSchema = TransferInDomainMethod$inboundSchema;
  /** @deprecated use `TransferInDomainMethod$outboundSchema` instead. */
  export const outboundSchema = TransferInDomainMethod$outboundSchema;
}

/** @internal */
export const TransferInDomainLinks$inboundSchema: z.ZodType<
  TransferInDomainLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  method: TransferInDomainMethod$inboundSchema,
});

/** @internal */
export type TransferInDomainLinks$Outbound = {
  href: string;
  method: string;
};

/** @internal */
export const TransferInDomainLinks$outboundSchema: z.ZodType<
  TransferInDomainLinks$Outbound,
  z.ZodTypeDef,
  TransferInDomainLinks
> = z.object({
  href: z.string(),
  method: TransferInDomainMethod$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainLinks$ {
  /** @deprecated use `TransferInDomainLinks$inboundSchema` instead. */
  export const inboundSchema = TransferInDomainLinks$inboundSchema;
  /** @deprecated use `TransferInDomainLinks$outboundSchema` instead. */
  export const outboundSchema = TransferInDomainLinks$outboundSchema;
  /** @deprecated use `TransferInDomainLinks$Outbound` instead. */
  export type Outbound = TransferInDomainLinks$Outbound;
}

export function transferInDomainLinksToJSON(
  transferInDomainLinks: TransferInDomainLinks,
): string {
  return JSON.stringify(
    TransferInDomainLinks$outboundSchema.parse(transferInDomainLinks),
  );
}

export function transferInDomainLinksFromJSON(
  jsonString: string,
): SafeParseResult<TransferInDomainLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferInDomainLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferInDomainLinks' from JSON`,
  );
}

/** @internal */
export const TransferInDomainResponseBody$inboundSchema: z.ZodType<
  TransferInDomainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  orderId: z.string(),
  _links: z.record(z.lazy(() => TransferInDomainLinks$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "_links": "links",
  });
});

/** @internal */
export type TransferInDomainResponseBody$Outbound = {
  orderId: string;
  _links: { [k: string]: TransferInDomainLinks$Outbound };
};

/** @internal */
export const TransferInDomainResponseBody$outboundSchema: z.ZodType<
  TransferInDomainResponseBody$Outbound,
  z.ZodTypeDef,
  TransferInDomainResponseBody
> = z.object({
  orderId: z.string(),
  links: z.record(z.lazy(() => TransferInDomainLinks$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    links: "_links",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferInDomainResponseBody$ {
  /** @deprecated use `TransferInDomainResponseBody$inboundSchema` instead. */
  export const inboundSchema = TransferInDomainResponseBody$inboundSchema;
  /** @deprecated use `TransferInDomainResponseBody$outboundSchema` instead. */
  export const outboundSchema = TransferInDomainResponseBody$outboundSchema;
  /** @deprecated use `TransferInDomainResponseBody$Outbound` instead. */
  export type Outbound = TransferInDomainResponseBody$Outbound;
}

export function transferInDomainResponseBodyToJSON(
  transferInDomainResponseBody: TransferInDomainResponseBody,
): string {
  return JSON.stringify(
    TransferInDomainResponseBody$outboundSchema.parse(
      transferInDomainResponseBody,
    ),
  );
}

export function transferInDomainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<TransferInDomainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferInDomainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferInDomainResponseBody' from JSON`,
  );
}
