/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { ClosedEnum } from "../types/enums.js";
import { VercelError } from "./vercelerror.js";

export const Code = {
  Unauthorized: "unauthorized",
} as const;
export type Code = ClosedEnum<typeof Code>;

export const Tag = {
  Unauthorized: "Unauthorized",
} as const;
export type Tag = ClosedEnum<typeof Tag>;

export type UnauthorizedData = {
  status: number;
  code: Code;
  message: string;
  tag: Tag;
};

export class Unauthorized extends VercelError {
  status: number;
  code: Code;
  tag: Tag;

  /** The original data that was passed to this error instance. */
  data$: UnauthorizedData;

  constructor(
    err: UnauthorizedData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = err.message || `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.status = err.status;
    this.code = err.code;
    this.tag = err.tag;

    this.name = "Unauthorized";
  }
}

/** @internal */
export const Code$inboundSchema: z.ZodNativeEnum<typeof Code> = z.nativeEnum(
  Code,
);

/** @internal */
export const Code$outboundSchema: z.ZodNativeEnum<typeof Code> =
  Code$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Code$ {
  /** @deprecated use `Code$inboundSchema` instead. */
  export const inboundSchema = Code$inboundSchema;
  /** @deprecated use `Code$outboundSchema` instead. */
  export const outboundSchema = Code$outboundSchema;
}

/** @internal */
export const Tag$inboundSchema: z.ZodNativeEnum<typeof Tag> = z.nativeEnum(Tag);

/** @internal */
export const Tag$outboundSchema: z.ZodNativeEnum<typeof Tag> =
  Tag$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tag$ {
  /** @deprecated use `Tag$inboundSchema` instead. */
  export const inboundSchema = Tag$inboundSchema;
  /** @deprecated use `Tag$outboundSchema` instead. */
  export const outboundSchema = Tag$outboundSchema;
}

/** @internal */
export const Unauthorized$inboundSchema: z.ZodType<
  Unauthorized,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.number(),
  code: Code$inboundSchema,
  message: z.string(),
  _tag: Tag$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "_tag": "tag",
    });

    return new Unauthorized(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type Unauthorized$Outbound = {
  status: number;
  code: string;
  message: string;
  _tag: string;
};

/** @internal */
export const Unauthorized$outboundSchema: z.ZodType<
  Unauthorized$Outbound,
  z.ZodTypeDef,
  Unauthorized
> = z.instanceof(Unauthorized)
  .transform(v => v.data$)
  .pipe(
    z.object({
      status: z.number(),
      code: Code$outboundSchema,
      message: z.string(),
      tag: Tag$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        tag: "_tag",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Unauthorized$ {
  /** @deprecated use `Unauthorized$inboundSchema` instead. */
  export const inboundSchema = Unauthorized$inboundSchema;
  /** @deprecated use `Unauthorized$outboundSchema` instead. */
  export const outboundSchema = Unauthorized$outboundSchema;
  /** @deprecated use `Unauthorized$Outbound` instead. */
  export type Outbound = Unauthorized$Outbound;
}
