/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UnlinkSharedEnvVariableRequest = {
  /**
   * The unique ID for the Shared Environment Variable to unlink from the project.
   */
  id: string;
  projectId: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
};

export type UnlinkSharedEnvVariableResponseBody = {
  id: string;
};

/** @internal */
export const UnlinkSharedEnvVariableRequest$inboundSchema: z.ZodType<
  UnlinkSharedEnvVariableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/** @internal */
export type UnlinkSharedEnvVariableRequest$Outbound = {
  id: string;
  projectId: string;
  teamId?: string | undefined;
  slug?: string | undefined;
};

/** @internal */
export const UnlinkSharedEnvVariableRequest$outboundSchema: z.ZodType<
  UnlinkSharedEnvVariableRequest$Outbound,
  z.ZodTypeDef,
  UnlinkSharedEnvVariableRequest
> = z.object({
  id: z.string(),
  projectId: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnlinkSharedEnvVariableRequest$ {
  /** @deprecated use `UnlinkSharedEnvVariableRequest$inboundSchema` instead. */
  export const inboundSchema = UnlinkSharedEnvVariableRequest$inboundSchema;
  /** @deprecated use `UnlinkSharedEnvVariableRequest$outboundSchema` instead. */
  export const outboundSchema = UnlinkSharedEnvVariableRequest$outboundSchema;
  /** @deprecated use `UnlinkSharedEnvVariableRequest$Outbound` instead. */
  export type Outbound = UnlinkSharedEnvVariableRequest$Outbound;
}

export function unlinkSharedEnvVariableRequestToJSON(
  unlinkSharedEnvVariableRequest: UnlinkSharedEnvVariableRequest,
): string {
  return JSON.stringify(
    UnlinkSharedEnvVariableRequest$outboundSchema.parse(
      unlinkSharedEnvVariableRequest,
    ),
  );
}

export function unlinkSharedEnvVariableRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnlinkSharedEnvVariableRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnlinkSharedEnvVariableRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnlinkSharedEnvVariableRequest' from JSON`,
  );
}

/** @internal */
export const UnlinkSharedEnvVariableResponseBody$inboundSchema: z.ZodType<
  UnlinkSharedEnvVariableResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UnlinkSharedEnvVariableResponseBody$Outbound = {
  id: string;
};

/** @internal */
export const UnlinkSharedEnvVariableResponseBody$outboundSchema: z.ZodType<
  UnlinkSharedEnvVariableResponseBody$Outbound,
  z.ZodTypeDef,
  UnlinkSharedEnvVariableResponseBody
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnlinkSharedEnvVariableResponseBody$ {
  /** @deprecated use `UnlinkSharedEnvVariableResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UnlinkSharedEnvVariableResponseBody$inboundSchema;
  /** @deprecated use `UnlinkSharedEnvVariableResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UnlinkSharedEnvVariableResponseBody$outboundSchema;
  /** @deprecated use `UnlinkSharedEnvVariableResponseBody$Outbound` instead. */
  export type Outbound = UnlinkSharedEnvVariableResponseBody$Outbound;
}

export function unlinkSharedEnvVariableResponseBodyToJSON(
  unlinkSharedEnvVariableResponseBody: UnlinkSharedEnvVariableResponseBody,
): string {
  return JSON.stringify(
    UnlinkSharedEnvVariableResponseBody$outboundSchema.parse(
      unlinkSharedEnvVariableResponseBody,
    ),
  );
}

export function unlinkSharedEnvVariableResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UnlinkSharedEnvVariableResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UnlinkSharedEnvVariableResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnlinkSharedEnvVariableResponseBody' from JSON`,
  );
}
