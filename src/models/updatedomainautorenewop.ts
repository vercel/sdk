/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DomainAlreadyRenewing,
  DomainAlreadyRenewing$inboundSchema,
  DomainAlreadyRenewing$Outbound,
  DomainAlreadyRenewing$outboundSchema,
} from "./domainalreadyrenewing.js";
import {
  DomainNotRegistered,
  DomainNotRegistered$inboundSchema,
  DomainNotRegistered$Outbound,
  DomainNotRegistered$outboundSchema,
} from "./domainnotregistered.js";
import {
  DomainNotRenewable,
  DomainNotRenewable$inboundSchema,
  DomainNotRenewable$Outbound,
  DomainNotRenewable$outboundSchema,
} from "./domainnotrenewable.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateDomainAutoRenewRequestBody = {
  autoRenew: boolean;
};

export type UpdateDomainAutoRenewRequest = {
  domain: string;
  teamId?: string | undefined;
  requestBody: UpdateDomainAutoRenewRequestBody;
};

/**
 * NotAuthorizedForScope
 */
export type UpdateDomainAutoRenewDomainsRegistrarResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

/**
 * There was something wrong with the request
 */
export type UpdateDomainAutoRenewResponseBody =
  | DomainAlreadyRenewing
  | DomainNotRenewable
  | DomainNotRegistered
  | HttpApiDecodeError;

/** @internal */
export const UpdateDomainAutoRenewRequestBody$inboundSchema: z.ZodType<
  UpdateDomainAutoRenewRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  autoRenew: z.boolean(),
});

/** @internal */
export type UpdateDomainAutoRenewRequestBody$Outbound = {
  autoRenew: boolean;
};

/** @internal */
export const UpdateDomainAutoRenewRequestBody$outboundSchema: z.ZodType<
  UpdateDomainAutoRenewRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDomainAutoRenewRequestBody
> = z.object({
  autoRenew: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainAutoRenewRequestBody$ {
  /** @deprecated use `UpdateDomainAutoRenewRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDomainAutoRenewRequestBody$inboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDomainAutoRenewRequestBody$outboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewRequestBody$Outbound` instead. */
  export type Outbound = UpdateDomainAutoRenewRequestBody$Outbound;
}

export function updateDomainAutoRenewRequestBodyToJSON(
  updateDomainAutoRenewRequestBody: UpdateDomainAutoRenewRequestBody,
): string {
  return JSON.stringify(
    UpdateDomainAutoRenewRequestBody$outboundSchema.parse(
      updateDomainAutoRenewRequestBody,
    ),
  );
}

export function updateDomainAutoRenewRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDomainAutoRenewRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDomainAutoRenewRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDomainAutoRenewRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDomainAutoRenewRequest$inboundSchema: z.ZodType<
  UpdateDomainAutoRenewRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
  RequestBody: z.lazy(() => UpdateDomainAutoRenewRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDomainAutoRenewRequest$Outbound = {
  domain: string;
  teamId?: string | undefined;
  RequestBody: UpdateDomainAutoRenewRequestBody$Outbound;
};

/** @internal */
export const UpdateDomainAutoRenewRequest$outboundSchema: z.ZodType<
  UpdateDomainAutoRenewRequest$Outbound,
  z.ZodTypeDef,
  UpdateDomainAutoRenewRequest
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
  requestBody: z.lazy(() => UpdateDomainAutoRenewRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainAutoRenewRequest$ {
  /** @deprecated use `UpdateDomainAutoRenewRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDomainAutoRenewRequest$inboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDomainAutoRenewRequest$outboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewRequest$Outbound` instead. */
  export type Outbound = UpdateDomainAutoRenewRequest$Outbound;
}

export function updateDomainAutoRenewRequestToJSON(
  updateDomainAutoRenewRequest: UpdateDomainAutoRenewRequest,
): string {
  return JSON.stringify(
    UpdateDomainAutoRenewRequest$outboundSchema.parse(
      updateDomainAutoRenewRequest,
    ),
  );
}

export function updateDomainAutoRenewRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDomainAutoRenewRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDomainAutoRenewRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDomainAutoRenewRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDomainAutoRenewDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    UpdateDomainAutoRenewDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type UpdateDomainAutoRenewDomainsRegistrarResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const UpdateDomainAutoRenewDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    UpdateDomainAutoRenewDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    UpdateDomainAutoRenewDomainsRegistrarResponseBody
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainAutoRenewDomainsRegistrarResponseBody$ {
  /** @deprecated use `UpdateDomainAutoRenewDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDomainAutoRenewDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDomainAutoRenewDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound =
    UpdateDomainAutoRenewDomainsRegistrarResponseBody$Outbound;
}

export function updateDomainAutoRenewDomainsRegistrarResponseBodyToJSON(
  updateDomainAutoRenewDomainsRegistrarResponseBody:
    UpdateDomainAutoRenewDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    UpdateDomainAutoRenewDomainsRegistrarResponseBody$outboundSchema.parse(
      updateDomainAutoRenewDomainsRegistrarResponseBody,
    ),
  );
}

export function updateDomainAutoRenewDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateDomainAutoRenewDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDomainAutoRenewDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateDomainAutoRenewDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const UpdateDomainAutoRenewResponseBody$inboundSchema: z.ZodType<
  UpdateDomainAutoRenewResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  DomainAlreadyRenewing$inboundSchema,
  DomainNotRenewable$inboundSchema,
  DomainNotRegistered$inboundSchema,
  HttpApiDecodeError$inboundSchema,
]);

/** @internal */
export type UpdateDomainAutoRenewResponseBody$Outbound =
  | DomainAlreadyRenewing$Outbound
  | DomainNotRenewable$Outbound
  | DomainNotRegistered$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const UpdateDomainAutoRenewResponseBody$outboundSchema: z.ZodType<
  UpdateDomainAutoRenewResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateDomainAutoRenewResponseBody
> = z.union([
  DomainAlreadyRenewing$outboundSchema,
  DomainNotRenewable$outboundSchema,
  DomainNotRegistered$outboundSchema,
  HttpApiDecodeError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainAutoRenewResponseBody$ {
  /** @deprecated use `UpdateDomainAutoRenewResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDomainAutoRenewResponseBody$inboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDomainAutoRenewResponseBody$outboundSchema;
  /** @deprecated use `UpdateDomainAutoRenewResponseBody$Outbound` instead. */
  export type Outbound = UpdateDomainAutoRenewResponseBody$Outbound;
}

export function updateDomainAutoRenewResponseBodyToJSON(
  updateDomainAutoRenewResponseBody: UpdateDomainAutoRenewResponseBody,
): string {
  return JSON.stringify(
    UpdateDomainAutoRenewResponseBody$outboundSchema.parse(
      updateDomainAutoRenewResponseBody,
    ),
  );
}

export function updateDomainAutoRenewResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDomainAutoRenewResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDomainAutoRenewResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDomainAutoRenewResponseBody' from JSON`,
  );
}
