/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  DomainNotRegistered,
  DomainNotRegistered$inboundSchema,
  DomainNotRegistered$Outbound,
  DomainNotRegistered$outboundSchema,
} from "./domainnotregistered.js";
import {
  Forbidden,
  Forbidden$inboundSchema,
  Forbidden$Outbound,
  Forbidden$outboundSchema,
} from "./forbidden.js";
import {
  HttpApiDecodeError,
  HttpApiDecodeError$inboundSchema,
  HttpApiDecodeError$Outbound,
  HttpApiDecodeError$outboundSchema,
} from "./httpapidecodeerror.js";
import {
  NotAuthorizedForScope,
  NotAuthorizedForScope$inboundSchema,
  NotAuthorizedForScope$Outbound,
  NotAuthorizedForScope$outboundSchema,
} from "./notauthorizedforscope.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateDomainNameserversRequestBody = {
  nameservers: Array<string>;
};

export type UpdateDomainNameserversRequest = {
  domain: string;
  teamId?: string | undefined;
  requestBody: UpdateDomainNameserversRequestBody;
};

/**
 * NotAuthorizedForScope
 */
export type UpdateDomainNameserversDomainsRegistrarResponseBody =
  | NotAuthorizedForScope
  | Forbidden;

/**
 * There was something wrong with the request
 */
export type UpdateDomainNameserversResponseBody =
  | DomainNotRegistered
  | HttpApiDecodeError;

/** @internal */
export const UpdateDomainNameserversRequestBody$inboundSchema: z.ZodType<
  UpdateDomainNameserversRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  nameservers: z.array(z.string()),
});

/** @internal */
export type UpdateDomainNameserversRequestBody$Outbound = {
  nameservers: Array<string>;
};

/** @internal */
export const UpdateDomainNameserversRequestBody$outboundSchema: z.ZodType<
  UpdateDomainNameserversRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDomainNameserversRequestBody
> = z.object({
  nameservers: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainNameserversRequestBody$ {
  /** @deprecated use `UpdateDomainNameserversRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDomainNameserversRequestBody$inboundSchema;
  /** @deprecated use `UpdateDomainNameserversRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDomainNameserversRequestBody$outboundSchema;
  /** @deprecated use `UpdateDomainNameserversRequestBody$Outbound` instead. */
  export type Outbound = UpdateDomainNameserversRequestBody$Outbound;
}

export function updateDomainNameserversRequestBodyToJSON(
  updateDomainNameserversRequestBody: UpdateDomainNameserversRequestBody,
): string {
  return JSON.stringify(
    UpdateDomainNameserversRequestBody$outboundSchema.parse(
      updateDomainNameserversRequestBody,
    ),
  );
}

export function updateDomainNameserversRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDomainNameserversRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDomainNameserversRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDomainNameserversRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDomainNameserversRequest$inboundSchema: z.ZodType<
  UpdateDomainNameserversRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
  RequestBody: z.lazy(() => UpdateDomainNameserversRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDomainNameserversRequest$Outbound = {
  domain: string;
  teamId?: string | undefined;
  RequestBody: UpdateDomainNameserversRequestBody$Outbound;
};

/** @internal */
export const UpdateDomainNameserversRequest$outboundSchema: z.ZodType<
  UpdateDomainNameserversRequest$Outbound,
  z.ZodTypeDef,
  UpdateDomainNameserversRequest
> = z.object({
  domain: z.string(),
  teamId: z.string().optional(),
  requestBody: z.lazy(() => UpdateDomainNameserversRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainNameserversRequest$ {
  /** @deprecated use `UpdateDomainNameserversRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDomainNameserversRequest$inboundSchema;
  /** @deprecated use `UpdateDomainNameserversRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDomainNameserversRequest$outboundSchema;
  /** @deprecated use `UpdateDomainNameserversRequest$Outbound` instead. */
  export type Outbound = UpdateDomainNameserversRequest$Outbound;
}

export function updateDomainNameserversRequestToJSON(
  updateDomainNameserversRequest: UpdateDomainNameserversRequest,
): string {
  return JSON.stringify(
    UpdateDomainNameserversRequest$outboundSchema.parse(
      updateDomainNameserversRequest,
    ),
  );
}

export function updateDomainNameserversRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDomainNameserversRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDomainNameserversRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDomainNameserversRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDomainNameserversDomainsRegistrarResponseBody$inboundSchema:
  z.ZodType<
    UpdateDomainNameserversDomainsRegistrarResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.union([NotAuthorizedForScope$inboundSchema, Forbidden$inboundSchema]);

/** @internal */
export type UpdateDomainNameserversDomainsRegistrarResponseBody$Outbound =
  | NotAuthorizedForScope$Outbound
  | Forbidden$Outbound;

/** @internal */
export const UpdateDomainNameserversDomainsRegistrarResponseBody$outboundSchema:
  z.ZodType<
    UpdateDomainNameserversDomainsRegistrarResponseBody$Outbound,
    z.ZodTypeDef,
    UpdateDomainNameserversDomainsRegistrarResponseBody
  > = z.union([NotAuthorizedForScope$outboundSchema, Forbidden$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainNameserversDomainsRegistrarResponseBody$ {
  /** @deprecated use `UpdateDomainNameserversDomainsRegistrarResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDomainNameserversDomainsRegistrarResponseBody$inboundSchema;
  /** @deprecated use `UpdateDomainNameserversDomainsRegistrarResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDomainNameserversDomainsRegistrarResponseBody$outboundSchema;
  /** @deprecated use `UpdateDomainNameserversDomainsRegistrarResponseBody$Outbound` instead. */
  export type Outbound =
    UpdateDomainNameserversDomainsRegistrarResponseBody$Outbound;
}

export function updateDomainNameserversDomainsRegistrarResponseBodyToJSON(
  updateDomainNameserversDomainsRegistrarResponseBody:
    UpdateDomainNameserversDomainsRegistrarResponseBody,
): string {
  return JSON.stringify(
    UpdateDomainNameserversDomainsRegistrarResponseBody$outboundSchema.parse(
      updateDomainNameserversDomainsRegistrarResponseBody,
    ),
  );
}

export function updateDomainNameserversDomainsRegistrarResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateDomainNameserversDomainsRegistrarResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDomainNameserversDomainsRegistrarResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateDomainNameserversDomainsRegistrarResponseBody' from JSON`,
  );
}

/** @internal */
export const UpdateDomainNameserversResponseBody$inboundSchema: z.ZodType<
  UpdateDomainNameserversResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  DomainNotRegistered$inboundSchema,
  HttpApiDecodeError$inboundSchema,
]);

/** @internal */
export type UpdateDomainNameserversResponseBody$Outbound =
  | DomainNotRegistered$Outbound
  | HttpApiDecodeError$Outbound;

/** @internal */
export const UpdateDomainNameserversResponseBody$outboundSchema: z.ZodType<
  UpdateDomainNameserversResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateDomainNameserversResponseBody
> = z.union([
  DomainNotRegistered$outboundSchema,
  HttpApiDecodeError$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDomainNameserversResponseBody$ {
  /** @deprecated use `UpdateDomainNameserversResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDomainNameserversResponseBody$inboundSchema;
  /** @deprecated use `UpdateDomainNameserversResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDomainNameserversResponseBody$outboundSchema;
  /** @deprecated use `UpdateDomainNameserversResponseBody$Outbound` instead. */
  export type Outbound = UpdateDomainNameserversResponseBody$Outbound;
}

export function updateDomainNameserversResponseBodyToJSON(
  updateDomainNameserversResponseBody: UpdateDomainNameserversResponseBody,
): string {
  return JSON.stringify(
    UpdateDomainNameserversResponseBody$outboundSchema.parse(
      updateDomainNameserversResponseBody,
    ),
  );
}

export function updateDomainNameserversResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDomainNameserversResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDomainNameserversResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDomainNameserversResponseBody' from JSON`,
  );
}
