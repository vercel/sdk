/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UpdateDrainProjects = {
  Some: "some",
  All: "all",
} as const;
export type UpdateDrainProjects = ClosedEnum<typeof UpdateDrainProjects>;

export type UpdateDrainFilterDrains2 = {
  type: string;
  text: string;
};

export type FilterProject = {
  ids?: Array<string> | undefined;
};

export type FilterLog = {
  sources?: Array<string> | undefined;
};

export type FilterDeployment = {
  environments?: Array<string> | undefined;
};

export type UpdateDrainFilter1 = {
  type: string;
  project?: FilterProject | undefined;
  log?: FilterLog | undefined;
  deployment?: FilterDeployment | undefined;
};

export type UpdateDrainFilterFilter =
  | UpdateDrainFilterDrains2
  | UpdateDrainFilter1;

export type UpdateDrainFilter2 = {
  version: string;
  filter: UpdateDrainFilterDrains2 | UpdateDrainFilter1;
};

export type UpdateDrainFilter = UpdateDrainFilter2 | string;

export type UpdateDrainSchemas = {
  version: string;
};

export type UpdateDrainDelivery3 = {
  type: string;
  endpoint: string;
  secret: string;
};

export type UpdateDrainEndpoint1 = {
  traces: string;
};

export type DeliveryEndpoint = UpdateDrainEndpoint1;

export const UpdateDrainDeliveryDrainsEncoding = {
  Proto: "proto",
  Json: "json",
} as const;
export type UpdateDrainDeliveryDrainsEncoding = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsEncoding
>;

export type UpdateDrainDelivery2 = {
  type: string;
  endpoint: UpdateDrainEndpoint1;
  encoding: UpdateDrainDeliveryDrainsEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const DeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type DeliveryCompression = ClosedEnum<typeof DeliveryCompression>;

export const UpdateDrainDeliveryEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type UpdateDrainDeliveryEncoding = ClosedEnum<
  typeof UpdateDrainDeliveryEncoding
>;

export type UpdateDrainDelivery1 = {
  type: string;
  endpoint: string;
  compression?: DeliveryCompression | undefined;
  encoding: UpdateDrainDeliveryEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type UpdateDrainDelivery =
  | UpdateDrainDelivery1
  | UpdateDrainDelivery2
  | UpdateDrainDelivery3;

/**
 * Environment to apply sampling to
 */
export const UpdateDrainEnv = {
  Production: "production",
  Preview: "preview",
} as const;
/**
 * Environment to apply sampling to
 */
export type UpdateDrainEnv = ClosedEnum<typeof UpdateDrainEnv>;

export type UpdateDrainSampling = {
  type: string;
  /**
   * Sampling rate from 0 to 1 (e.g., 0.1 for 10%)
   */
  rate: number;
  /**
   * Environment to apply sampling to
   */
  env?: UpdateDrainEnv | undefined;
  /**
   * Request path prefix to apply the sampling rule to
   */
  requestPath?: string | undefined;
};

export type UpdateDrainTransforms = {
  id: string;
};

export const UpdateDrainStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
} as const;
export type UpdateDrainStatus = ClosedEnum<typeof UpdateDrainStatus>;

export type UpdateDrainSource2 = {
  kind?: string | undefined;
};

export type UpdateDrain13 = {
  kind?: string | undefined;
};

export type UpdateDrain12 = {
  kind?: string | undefined;
  resourceId: string;
};

export type UpdateDrain11 = {
  kind?: string | undefined;
  externalResourceId: string;
};

export type UpdateDrainSource1 = UpdateDrain11 | UpdateDrain12 | UpdateDrain13;

export type UpdateDrainSource =
  | UpdateDrain11
  | UpdateDrain12
  | UpdateDrain13
  | UpdateDrainSource2;

export type UpdateDrainRequestBody = {
  name?: string | undefined;
  projects?: UpdateDrainProjects | undefined;
  projectIds?: Array<string> | null | undefined;
  filter?: UpdateDrainFilter2 | string | null | undefined;
  schemas?: { [k: string]: UpdateDrainSchemas } | undefined;
  delivery?:
    | UpdateDrainDelivery1
    | UpdateDrainDelivery2
    | UpdateDrainDelivery3
    | undefined;
  sampling?: Array<UpdateDrainSampling> | null | undefined;
  transforms?: Array<UpdateDrainTransforms> | null | undefined;
  status?: UpdateDrainStatus | undefined;
  source?:
    | UpdateDrain11
    | UpdateDrain12
    | UpdateDrain13
    | UpdateDrainSource2
    | undefined;
};

export type UpdateDrainRequest = {
  id: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: UpdateDrainRequestBody | undefined;
};

export const UpdateDrainResponseBodyDrainsCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type UpdateDrainResponseBodyDrainsCreatedFrom = ClosedEnum<
  typeof UpdateDrainResponseBodyDrainsCreatedFrom
>;

export type UpdateDrainResponseBodyDrainsLog = {};

export type UpdateDrainResponseBodyDrainsTrace = {};

export type UpdateDrainResponseBodyDrainsAnalytics = {};

export type UpdateDrainResponseBodyDrainsSpeedInsights = {};

export type UpdateDrainResponseBodyDrainsSchemas = {
  log?: UpdateDrainResponseBodyDrainsLog | undefined;
  trace?: UpdateDrainResponseBodyDrainsTrace | undefined;
  analytics?: UpdateDrainResponseBodyDrainsAnalytics | undefined;
  speedInsights?: UpdateDrainResponseBodyDrainsSpeedInsights | undefined;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type =
  {
    Internal: "internal",
  } as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  >;

export const UpdateDrainDeliveryDrainsTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type UpdateDrainDeliveryDrainsTarget = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsTarget
>;

export type UpdateDrainDeliveryDrains5 = {
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type;
  target: UpdateDrainDeliveryDrainsTarget;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type =
  {
    Clickhouse: "clickhouse",
  } as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  >;

export type UpdateDrainDeliveryDrains4 = {
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type;
  endpoint: string;
  table: string;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type =
  {
    Syslog: "syslog",
  } as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type
  >;

export type UpdateDrainDeliveryDrainsResponse3 = {
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type;
  endpoint: string;
  secret: string;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type =
  {
    Otlphttp: "otlphttp",
  } as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  >;

export type UpdateDrainDeliveryDrainsEndpoint = {
  traces: string;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding =
  {
    Json: "json",
    Proto: "proto",
  } as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding
  >;

export type UpdateDrainDeliveryDrainsResponse2 = {
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type;
  endpoint: UpdateDrainDeliveryDrainsEndpoint;
  encoding:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  {
    Http: "http",
  } as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  >;

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding =
  ClosedEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding
  >;

export const UpdateDrainDeliveryDrainsCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type UpdateDrainDeliveryDrainsCompression = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsCompression
>;

export type UpdateDrainDeliveryDrainsResponse1 = {
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType;
  endpoint: string;
  encoding: UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding;
  compression?: UpdateDrainDeliveryDrainsCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type UpdateDrainResponseBodyDrainsDelivery =
  | UpdateDrainDeliveryDrainsResponse1
  | UpdateDrainDeliveryDrainsResponse2
  | UpdateDrainDeliveryDrainsResponse3
  | UpdateDrainDeliveryDrains4
  | UpdateDrainDeliveryDrains5;

export const UpdateDrainResponseBodyDrainsType = {
  HeadSampling: "head_sampling",
} as const;
export type UpdateDrainResponseBodyDrainsType = ClosedEnum<
  typeof UpdateDrainResponseBodyDrainsType
>;

export const UpdateDrainResponseBodyDrainsEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type UpdateDrainResponseBodyDrainsEnv = ClosedEnum<
  typeof UpdateDrainResponseBodyDrainsEnv
>;

export type UpdateDrainResponseBodyDrainsSampling = {
  type: UpdateDrainResponseBodyDrainsType;
  rate: number;
  env?: UpdateDrainResponseBodyDrainsEnv | undefined;
  requestPath?: string | undefined;
};

export const UpdateDrainResponseBodyDrainsStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type UpdateDrainResponseBodyDrainsStatus = ClosedEnum<
  typeof UpdateDrainResponseBodyDrainsStatus
>;

export const UpdateDrainResponseBodyDrainsDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type UpdateDrainResponseBodyDrainsDisabledReason = ClosedEnum<
  typeof UpdateDrainResponseBodyDrainsDisabledReason
>;

export const UpdateDrainSourceDrainsResponse200Kind = {
  Integration: "integration",
} as const;
export type UpdateDrainSourceDrainsResponse200Kind = ClosedEnum<
  typeof UpdateDrainSourceDrainsResponse200Kind
>;

export type UpdateDrainSourceDrainsResponse2 = {
  kind: UpdateDrainSourceDrainsResponse200Kind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const UpdateDrainSourceDrainsResponseKind = {
  SelfServed: "self-served",
} as const;
export type UpdateDrainSourceDrainsResponseKind = ClosedEnum<
  typeof UpdateDrainSourceDrainsResponseKind
>;

export type UpdateDrainSourceDrainsResponse1 = {
  kind: UpdateDrainSourceDrainsResponseKind;
};

export type UpdateDrainResponseBodyDrainsSource =
  | UpdateDrainSourceDrainsResponse2
  | UpdateDrainSourceDrainsResponse1;

export const UpdateDrainFilterV2DrainsResponse200Version = {
  V2: "v2",
} as const;
export type UpdateDrainFilterV2DrainsResponse200Version = ClosedEnum<
  typeof UpdateDrainFilterV2DrainsResponse200Version
>;

export const UpdateDrainFilterDrainsResponse200Type = {
  Odata: "odata",
} as const;
export type UpdateDrainFilterDrainsResponse200Type = ClosedEnum<
  typeof UpdateDrainFilterDrainsResponse200Type
>;

export type UpdateDrainFilterDrainsResponse2002 = {
  type: UpdateDrainFilterDrainsResponse200Type;
  text: string;
};

export const UpdateDrainFilterDrainsResponseType = {
  Basic: "basic",
} as const;
export type UpdateDrainFilterDrainsResponseType = ClosedEnum<
  typeof UpdateDrainFilterDrainsResponseType
>;

export type UpdateDrainFilterDrainsProject = {
  ids?: Array<string> | undefined;
};

export type UpdateDrainFilterDrainsLog = {
  sources?: Array<string> | undefined;
};

export type UpdateDrainFilterDrainsDeployment = {
  environments?: Array<string> | undefined;
};

export type UpdateDrainFilterDrainsResponse1 = {
  type: UpdateDrainFilterDrainsResponseType;
  project?: UpdateDrainFilterDrainsProject | undefined;
  log?: UpdateDrainFilterDrainsLog | undefined;
  deployment?: UpdateDrainFilterDrainsDeployment | undefined;
};

export type UpdateDrainFilterV2DrainsFilter =
  | UpdateDrainFilterDrainsResponse2002
  | UpdateDrainFilterDrainsResponse1;

export type UpdateDrainFilterV2Drains2 = {
  version: UpdateDrainFilterV2DrainsResponse200Version;
  filter:
    | UpdateDrainFilterDrainsResponse2002
    | UpdateDrainFilterDrainsResponse1;
};

export const UpdateDrainFilterV2DrainsResponseVersion = {
  V1: "v1",
} as const;
export type UpdateDrainFilterV2DrainsResponseVersion = ClosedEnum<
  typeof UpdateDrainFilterV2DrainsResponseVersion
>;

export type UpdateDrainFilterV2Drains1 = {
  version: UpdateDrainFilterV2DrainsResponseVersion;
};

export type UpdateDrainResponseBodyDrainsFilterV2 =
  | UpdateDrainFilterV2Drains2
  | UpdateDrainFilterV2Drains1;

export const UpdateDrainResponseBodyFramework = {
  Blitzjs: "blitzjs",
  Nextjs: "nextjs",
  Gatsby: "gatsby",
  Remix: "remix",
  ReactRouter: "react-router",
  Astro: "astro",
  Hexo: "hexo",
  Eleventy: "eleventy",
  Docusaurus2: "docusaurus-2",
  Docusaurus: "docusaurus",
  Preact: "preact",
  Solidstart1: "solidstart-1",
  Solidstart: "solidstart",
  Dojo: "dojo",
  Ember: "ember",
  Vue: "vue",
  Scully: "scully",
  IonicAngular: "ionic-angular",
  Angular: "angular",
  Polymer: "polymer",
  Svelte: "svelte",
  Sveltekit: "sveltekit",
  Sveltekit1: "sveltekit-1",
  IonicReact: "ionic-react",
  CreateReactApp: "create-react-app",
  Gridsome: "gridsome",
  Umijs: "umijs",
  Sapper: "sapper",
  Saber: "saber",
  Stencil: "stencil",
  Nuxtjs: "nuxtjs",
  Redwoodjs: "redwoodjs",
  Hugo: "hugo",
  Jekyll: "jekyll",
  Brunch: "brunch",
  Middleman: "middleman",
  Zola: "zola",
  Hydrogen: "hydrogen",
  Vite: "vite",
  Vitepress: "vitepress",
  Vuepress: "vuepress",
  Parcel: "parcel",
  Fastapi: "fastapi",
  Flask: "flask",
  Fasthtml: "fasthtml",
  SanityV3: "sanity-v3",
  Sanity: "sanity",
  Storybook: "storybook",
  Nitro: "nitro",
  Hono: "hono",
  Express: "express",
  H3: "h3",
  Nestjs: "nestjs",
  Xmcp: "xmcp",
} as const;
export type UpdateDrainResponseBodyFramework = ClosedEnum<
  typeof UpdateDrainResponseBodyFramework
>;

export type UpdateDrainResponseBodyProjectsMetadata = {
  id: string;
  name: string;
  framework?: UpdateDrainResponseBodyFramework | null | undefined;
  latestDeployment?: string | undefined;
};

export type UpdateDrainResponseBody2 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: UpdateDrainResponseBodyDrainsCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: UpdateDrainResponseBodyDrainsSchemas | undefined;
  delivery?:
    | UpdateDrainDeliveryDrainsResponse1
    | UpdateDrainDeliveryDrainsResponse2
    | UpdateDrainDeliveryDrainsResponse3
    | UpdateDrainDeliveryDrains4
    | UpdateDrainDeliveryDrains5
    | undefined;
  sampling?: Array<UpdateDrainResponseBodyDrainsSampling> | undefined;
  teamId?: string | null | undefined;
  status?: UpdateDrainResponseBodyDrainsStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: UpdateDrainResponseBodyDrainsDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: UpdateDrainSourceDrainsResponse2 | UpdateDrainSourceDrainsResponse1;
  filter?: string | undefined;
  filterV2?:
    | UpdateDrainFilterV2Drains2
    | UpdateDrainFilterV2Drains1
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?: Array<UpdateDrainResponseBodyProjectsMetadata> | undefined;
};

export const UpdateDrainResponseBodyCreatedFrom = {
  SelfServed: "self-served",
  Integration: "integration",
} as const;
export type UpdateDrainResponseBodyCreatedFrom = ClosedEnum<
  typeof UpdateDrainResponseBodyCreatedFrom
>;

export type UpdateDrainResponseBodyLog = {};

export type UpdateDrainResponseBodyTrace = {};

export type UpdateDrainResponseBodyAnalytics = {};

export type UpdateDrainResponseBodySpeedInsights = {};

export type UpdateDrainResponseBodySchemas = {
  log?: UpdateDrainResponseBodyLog | undefined;
  trace?: UpdateDrainResponseBodyTrace | undefined;
  analytics?: UpdateDrainResponseBodyAnalytics | undefined;
  speedInsights?: UpdateDrainResponseBodySpeedInsights | undefined;
};

export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONType = {
  Internal: "internal",
} as const;
export type UpdateDrainDeliveryDrainsResponse200ApplicationJSONType =
  ClosedEnum<typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONType>;

export const UpdateDrainDeliveryTarget = {
  VercelOtelTracesDb: "vercel-otel-traces-db",
} as const;
export type UpdateDrainDeliveryTarget = ClosedEnum<
  typeof UpdateDrainDeliveryTarget
>;

export type UpdateDrainDelivery5 = {
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONType;
  target: UpdateDrainDeliveryTarget;
};

export const UpdateDrainDeliveryDrainsResponse200Type = {
  Clickhouse: "clickhouse",
} as const;
export type UpdateDrainDeliveryDrainsResponse200Type = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsResponse200Type
>;

export type UpdateDrainDelivery4 = {
  type: UpdateDrainDeliveryDrainsResponse200Type;
  endpoint: string;
  table: string;
};

export const UpdateDrainDeliveryDrainsResponseType = {
  Syslog: "syslog",
} as const;
export type UpdateDrainDeliveryDrainsResponseType = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsResponseType
>;

export type UpdateDrainDeliveryDrains3 = {
  type: UpdateDrainDeliveryDrainsResponseType;
  endpoint: string;
  secret: string;
};

export const UpdateDrainDeliveryDrainsType = {
  Otlphttp: "otlphttp",
} as const;
export type UpdateDrainDeliveryDrainsType = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsType
>;

export type UpdateDrainDeliveryEndpoint = {
  traces: string;
};

export const UpdateDrainDeliveryDrainsResponse200Encoding = {
  Json: "json",
  Proto: "proto",
} as const;
export type UpdateDrainDeliveryDrainsResponse200Encoding = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsResponse200Encoding
>;

export type UpdateDrainDeliveryDrains2 = {
  type: UpdateDrainDeliveryDrainsType;
  endpoint: UpdateDrainDeliveryEndpoint;
  encoding: UpdateDrainDeliveryDrainsResponse200Encoding;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export const UpdateDrainDeliveryType = {
  Http: "http",
} as const;
export type UpdateDrainDeliveryType = ClosedEnum<
  typeof UpdateDrainDeliveryType
>;

export const UpdateDrainDeliveryDrainsResponseEncoding = {
  Json: "json",
  Ndjson: "ndjson",
} as const;
export type UpdateDrainDeliveryDrainsResponseEncoding = ClosedEnum<
  typeof UpdateDrainDeliveryDrainsResponseEncoding
>;

export const UpdateDrainDeliveryCompression = {
  Gzip: "gzip",
  None: "none",
} as const;
export type UpdateDrainDeliveryCompression = ClosedEnum<
  typeof UpdateDrainDeliveryCompression
>;

export type UpdateDrainDeliveryDrains1 = {
  type: UpdateDrainDeliveryType;
  endpoint: string;
  encoding: UpdateDrainDeliveryDrainsResponseEncoding;
  compression?: UpdateDrainDeliveryCompression | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

export type UpdateDrainResponseBodyDelivery =
  | UpdateDrainDeliveryDrains1
  | UpdateDrainDeliveryDrains2
  | UpdateDrainDeliveryDrains3
  | UpdateDrainDelivery4
  | UpdateDrainDelivery5;

export const UpdateDrainResponseBodyType = {
  HeadSampling: "head_sampling",
} as const;
export type UpdateDrainResponseBodyType = ClosedEnum<
  typeof UpdateDrainResponseBodyType
>;

export const UpdateDrainResponseBodyEnv = {
  Production: "production",
  Preview: "preview",
} as const;
export type UpdateDrainResponseBodyEnv = ClosedEnum<
  typeof UpdateDrainResponseBodyEnv
>;

export type UpdateDrainResponseBodySampling = {
  type: UpdateDrainResponseBodyType;
  rate: number;
  env?: UpdateDrainResponseBodyEnv | undefined;
  requestPath?: string | undefined;
};

export const UpdateDrainResponseBodyStatus = {
  Enabled: "enabled",
  Disabled: "disabled",
  Errored: "errored",
} as const;
export type UpdateDrainResponseBodyStatus = ClosedEnum<
  typeof UpdateDrainResponseBodyStatus
>;

export const UpdateDrainResponseBodyDisabledReason = {
  DisabledByOwner: "disabled-by-owner",
  FeatureNotAvailable: "feature-not-available",
  AccountPlanDowngrade: "account-plan-downgrade",
  DisabledByAdmin: "disabled-by-admin",
} as const;
export type UpdateDrainResponseBodyDisabledReason = ClosedEnum<
  typeof UpdateDrainResponseBodyDisabledReason
>;

export const UpdateDrainSourceDrainsKind = {
  Integration: "integration",
} as const;
export type UpdateDrainSourceDrainsKind = ClosedEnum<
  typeof UpdateDrainSourceDrainsKind
>;

export type UpdateDrainSourceDrains2 = {
  kind: UpdateDrainSourceDrainsKind;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

export const UpdateDrainSourceKind = {
  SelfServed: "self-served",
} as const;
export type UpdateDrainSourceKind = ClosedEnum<typeof UpdateDrainSourceKind>;

export type UpdateDrainSourceDrains1 = {
  kind: UpdateDrainSourceKind;
};

export type UpdateDrainResponseBodySource =
  | UpdateDrainSourceDrains2
  | UpdateDrainSourceDrains1;

export const UpdateDrainFilterV2DrainsVersion = {
  V2: "v2",
} as const;
export type UpdateDrainFilterV2DrainsVersion = ClosedEnum<
  typeof UpdateDrainFilterV2DrainsVersion
>;

export const UpdateDrainFilterDrainsType = {
  Odata: "odata",
} as const;
export type UpdateDrainFilterDrainsType = ClosedEnum<
  typeof UpdateDrainFilterDrainsType
>;

export type UpdateDrainFilterDrainsResponse2 = {
  type: UpdateDrainFilterDrainsType;
  text: string;
};

export const UpdateDrainFilterType = {
  Basic: "basic",
} as const;
export type UpdateDrainFilterType = ClosedEnum<typeof UpdateDrainFilterType>;

export type UpdateDrainFilterProject = {
  ids?: Array<string> | undefined;
};

export type UpdateDrainFilterLog = {
  sources?: Array<string> | undefined;
};

export type UpdateDrainFilterDeployment = {
  environments?: Array<string> | undefined;
};

export type UpdateDrainFilterDrains1 = {
  type: UpdateDrainFilterType;
  project?: UpdateDrainFilterProject | undefined;
  log?: UpdateDrainFilterLog | undefined;
  deployment?: UpdateDrainFilterDeployment | undefined;
};

export type UpdateDrainFilterV2Filter =
  | UpdateDrainFilterDrainsResponse2
  | UpdateDrainFilterDrains1;

export type UpdateDrainFilterV22 = {
  version: UpdateDrainFilterV2DrainsVersion;
  filter: UpdateDrainFilterDrainsResponse2 | UpdateDrainFilterDrains1;
};

export const UpdateDrainFilterV2Version = {
  V1: "v1",
} as const;
export type UpdateDrainFilterV2Version = ClosedEnum<
  typeof UpdateDrainFilterV2Version
>;

export type UpdateDrainFilterV21 = {
  version: UpdateDrainFilterV2Version;
};

export type UpdateDrainResponseBodyFilterV2 =
  | UpdateDrainFilterV22
  | UpdateDrainFilterV21;

export type UpdateDrainResponseBody1 = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: UpdateDrainResponseBodyCreatedFrom | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: UpdateDrainResponseBodySchemas | undefined;
  delivery?:
    | UpdateDrainDeliveryDrains1
    | UpdateDrainDeliveryDrains2
    | UpdateDrainDeliveryDrains3
    | UpdateDrainDelivery4
    | UpdateDrainDelivery5
    | undefined;
  sampling?: Array<UpdateDrainResponseBodySampling> | undefined;
  teamId?: string | null | undefined;
  status?: UpdateDrainResponseBodyStatus | undefined;
  disabledAt?: number | undefined;
  disabledReason?: UpdateDrainResponseBodyDisabledReason | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: UpdateDrainSourceDrains2 | UpdateDrainSourceDrains1;
  filter?: string | undefined;
  filterV2?: UpdateDrainFilterV22 | UpdateDrainFilterV21 | undefined;
};

export type UpdateDrainResponseBody =
  | UpdateDrainResponseBody1
  | UpdateDrainResponseBody2;

/** @internal */
export const UpdateDrainProjects$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainProjects
> = z.nativeEnum(UpdateDrainProjects);

/** @internal */
export const UpdateDrainProjects$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainProjects
> = UpdateDrainProjects$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainProjects$ {
  /** @deprecated use `UpdateDrainProjects$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainProjects$inboundSchema;
  /** @deprecated use `UpdateDrainProjects$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainProjects$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterDrains2$inboundSchema: z.ZodType<
  UpdateDrainFilterDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  text: z.string(),
});

/** @internal */
export type UpdateDrainFilterDrains2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdateDrainFilterDrains2$outboundSchema: z.ZodType<
  UpdateDrainFilterDrains2$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrains2
> = z.object({
  type: z.string(),
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrains2$ {
  /** @deprecated use `UpdateDrainFilterDrains2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrains2$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrains2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrains2$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrains2$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrains2$Outbound;
}

export function updateDrainFilterDrains2ToJSON(
  updateDrainFilterDrains2: UpdateDrainFilterDrains2,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrains2$outboundSchema.parse(updateDrainFilterDrains2),
  );
}

export function updateDrainFilterDrains2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrains2' from JSON`,
  );
}

/** @internal */
export const FilterProject$inboundSchema: z.ZodType<
  FilterProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type FilterProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const FilterProject$outboundSchema: z.ZodType<
  FilterProject$Outbound,
  z.ZodTypeDef,
  FilterProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterProject$ {
  /** @deprecated use `FilterProject$inboundSchema` instead. */
  export const inboundSchema = FilterProject$inboundSchema;
  /** @deprecated use `FilterProject$outboundSchema` instead. */
  export const outboundSchema = FilterProject$outboundSchema;
  /** @deprecated use `FilterProject$Outbound` instead. */
  export type Outbound = FilterProject$Outbound;
}

export function filterProjectToJSON(filterProject: FilterProject): string {
  return JSON.stringify(FilterProject$outboundSchema.parse(filterProject));
}

export function filterProjectFromJSON(
  jsonString: string,
): SafeParseResult<FilterProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterProject' from JSON`,
  );
}

/** @internal */
export const FilterLog$inboundSchema: z.ZodType<
  FilterLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type FilterLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const FilterLog$outboundSchema: z.ZodType<
  FilterLog$Outbound,
  z.ZodTypeDef,
  FilterLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterLog$ {
  /** @deprecated use `FilterLog$inboundSchema` instead. */
  export const inboundSchema = FilterLog$inboundSchema;
  /** @deprecated use `FilterLog$outboundSchema` instead. */
  export const outboundSchema = FilterLog$outboundSchema;
  /** @deprecated use `FilterLog$Outbound` instead. */
  export type Outbound = FilterLog$Outbound;
}

export function filterLogToJSON(filterLog: FilterLog): string {
  return JSON.stringify(FilterLog$outboundSchema.parse(filterLog));
}

export function filterLogFromJSON(
  jsonString: string,
): SafeParseResult<FilterLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterLog' from JSON`,
  );
}

/** @internal */
export const FilterDeployment$inboundSchema: z.ZodType<
  FilterDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type FilterDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const FilterDeployment$outboundSchema: z.ZodType<
  FilterDeployment$Outbound,
  z.ZodTypeDef,
  FilterDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilterDeployment$ {
  /** @deprecated use `FilterDeployment$inboundSchema` instead. */
  export const inboundSchema = FilterDeployment$inboundSchema;
  /** @deprecated use `FilterDeployment$outboundSchema` instead. */
  export const outboundSchema = FilterDeployment$outboundSchema;
  /** @deprecated use `FilterDeployment$Outbound` instead. */
  export type Outbound = FilterDeployment$Outbound;
}

export function filterDeploymentToJSON(
  filterDeployment: FilterDeployment,
): string {
  return JSON.stringify(
    FilterDeployment$outboundSchema.parse(filterDeployment),
  );
}

export function filterDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<FilterDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FilterDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FilterDeployment' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilter1$inboundSchema: z.ZodType<
  UpdateDrainFilter1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  project: z.lazy(() => FilterProject$inboundSchema).optional(),
  log: z.lazy(() => FilterLog$inboundSchema).optional(),
  deployment: z.lazy(() => FilterDeployment$inboundSchema).optional(),
});

/** @internal */
export type UpdateDrainFilter1$Outbound = {
  type: string;
  project?: FilterProject$Outbound | undefined;
  log?: FilterLog$Outbound | undefined;
  deployment?: FilterDeployment$Outbound | undefined;
};

/** @internal */
export const UpdateDrainFilter1$outboundSchema: z.ZodType<
  UpdateDrainFilter1$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilter1
> = z.object({
  type: z.string(),
  project: z.lazy(() => FilterProject$outboundSchema).optional(),
  log: z.lazy(() => FilterLog$outboundSchema).optional(),
  deployment: z.lazy(() => FilterDeployment$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilter1$ {
  /** @deprecated use `UpdateDrainFilter1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilter1$inboundSchema;
  /** @deprecated use `UpdateDrainFilter1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilter1$outboundSchema;
  /** @deprecated use `UpdateDrainFilter1$Outbound` instead. */
  export type Outbound = UpdateDrainFilter1$Outbound;
}

export function updateDrainFilter1ToJSON(
  updateDrainFilter1: UpdateDrainFilter1,
): string {
  return JSON.stringify(
    UpdateDrainFilter1$outboundSchema.parse(updateDrainFilter1),
  );
}

export function updateDrainFilter1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilter1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilter1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilter1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterFilter$inboundSchema: z.ZodType<
  UpdateDrainFilterFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainFilterDrains2$inboundSchema),
  z.lazy(() => UpdateDrainFilter1$inboundSchema),
]);

/** @internal */
export type UpdateDrainFilterFilter$Outbound =
  | UpdateDrainFilterDrains2$Outbound
  | UpdateDrainFilter1$Outbound;

/** @internal */
export const UpdateDrainFilterFilter$outboundSchema: z.ZodType<
  UpdateDrainFilterFilter$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterFilter
> = z.union([
  z.lazy(() => UpdateDrainFilterDrains2$outboundSchema),
  z.lazy(() => UpdateDrainFilter1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterFilter$ {
  /** @deprecated use `UpdateDrainFilterFilter$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterFilter$inboundSchema;
  /** @deprecated use `UpdateDrainFilterFilter$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterFilter$outboundSchema;
  /** @deprecated use `UpdateDrainFilterFilter$Outbound` instead. */
  export type Outbound = UpdateDrainFilterFilter$Outbound;
}

export function updateDrainFilterFilterToJSON(
  updateDrainFilterFilter: UpdateDrainFilterFilter,
): string {
  return JSON.stringify(
    UpdateDrainFilterFilter$outboundSchema.parse(updateDrainFilterFilter),
  );
}

export function updateDrainFilterFilterFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterFilter' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilter2$inboundSchema: z.ZodType<
  UpdateDrainFilter2,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  filter: z.union([
    z.lazy(() => UpdateDrainFilterDrains2$inboundSchema),
    z.lazy(() => UpdateDrainFilter1$inboundSchema),
  ]),
});

/** @internal */
export type UpdateDrainFilter2$Outbound = {
  version: string;
  filter: UpdateDrainFilterDrains2$Outbound | UpdateDrainFilter1$Outbound;
};

/** @internal */
export const UpdateDrainFilter2$outboundSchema: z.ZodType<
  UpdateDrainFilter2$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilter2
> = z.object({
  version: z.string(),
  filter: z.union([
    z.lazy(() => UpdateDrainFilterDrains2$outboundSchema),
    z.lazy(() => UpdateDrainFilter1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilter2$ {
  /** @deprecated use `UpdateDrainFilter2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilter2$inboundSchema;
  /** @deprecated use `UpdateDrainFilter2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilter2$outboundSchema;
  /** @deprecated use `UpdateDrainFilter2$Outbound` instead. */
  export type Outbound = UpdateDrainFilter2$Outbound;
}

export function updateDrainFilter2ToJSON(
  updateDrainFilter2: UpdateDrainFilter2,
): string {
  return JSON.stringify(
    UpdateDrainFilter2$outboundSchema.parse(updateDrainFilter2),
  );
}

export function updateDrainFilter2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilter2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilter2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilter2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilter$inboundSchema: z.ZodType<
  UpdateDrainFilter,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => UpdateDrainFilter2$inboundSchema), z.string()]);

/** @internal */
export type UpdateDrainFilter$Outbound = UpdateDrainFilter2$Outbound | string;

/** @internal */
export const UpdateDrainFilter$outboundSchema: z.ZodType<
  UpdateDrainFilter$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilter
> = z.union([z.lazy(() => UpdateDrainFilter2$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilter$ {
  /** @deprecated use `UpdateDrainFilter$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilter$inboundSchema;
  /** @deprecated use `UpdateDrainFilter$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilter$outboundSchema;
  /** @deprecated use `UpdateDrainFilter$Outbound` instead. */
  export type Outbound = UpdateDrainFilter$Outbound;
}

export function updateDrainFilterToJSON(
  updateDrainFilter: UpdateDrainFilter,
): string {
  return JSON.stringify(
    UpdateDrainFilter$outboundSchema.parse(updateDrainFilter),
  );
}

export function updateDrainFilterFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilter' from JSON`,
  );
}

/** @internal */
export const UpdateDrainSchemas$inboundSchema: z.ZodType<
  UpdateDrainSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
});

/** @internal */
export type UpdateDrainSchemas$Outbound = {
  version: string;
};

/** @internal */
export const UpdateDrainSchemas$outboundSchema: z.ZodType<
  UpdateDrainSchemas$Outbound,
  z.ZodTypeDef,
  UpdateDrainSchemas
> = z.object({
  version: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSchemas$ {
  /** @deprecated use `UpdateDrainSchemas$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSchemas$inboundSchema;
  /** @deprecated use `UpdateDrainSchemas$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSchemas$outboundSchema;
  /** @deprecated use `UpdateDrainSchemas$Outbound` instead. */
  export type Outbound = UpdateDrainSchemas$Outbound;
}

export function updateDrainSchemasToJSON(
  updateDrainSchemas: UpdateDrainSchemas,
): string {
  return JSON.stringify(
    UpdateDrainSchemas$outboundSchema.parse(updateDrainSchemas),
  );
}

export function updateDrainSchemasFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSchemas' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDelivery3$inboundSchema: z.ZodType<
  UpdateDrainDelivery3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type UpdateDrainDelivery3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const UpdateDrainDelivery3$outboundSchema: z.ZodType<
  UpdateDrainDelivery3$Outbound,
  z.ZodTypeDef,
  UpdateDrainDelivery3
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDelivery3$ {
  /** @deprecated use `UpdateDrainDelivery3$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDelivery3$inboundSchema;
  /** @deprecated use `UpdateDrainDelivery3$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDelivery3$outboundSchema;
  /** @deprecated use `UpdateDrainDelivery3$Outbound` instead. */
  export type Outbound = UpdateDrainDelivery3$Outbound;
}

export function updateDrainDelivery3ToJSON(
  updateDrainDelivery3: UpdateDrainDelivery3,
): string {
  return JSON.stringify(
    UpdateDrainDelivery3$outboundSchema.parse(updateDrainDelivery3),
  );
}

export function updateDrainDelivery3FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDelivery3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDelivery3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDelivery3' from JSON`,
  );
}

/** @internal */
export const UpdateDrainEndpoint1$inboundSchema: z.ZodType<
  UpdateDrainEndpoint1,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type UpdateDrainEndpoint1$Outbound = {
  traces: string;
};

/** @internal */
export const UpdateDrainEndpoint1$outboundSchema: z.ZodType<
  UpdateDrainEndpoint1$Outbound,
  z.ZodTypeDef,
  UpdateDrainEndpoint1
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainEndpoint1$ {
  /** @deprecated use `UpdateDrainEndpoint1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainEndpoint1$inboundSchema;
  /** @deprecated use `UpdateDrainEndpoint1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainEndpoint1$outboundSchema;
  /** @deprecated use `UpdateDrainEndpoint1$Outbound` instead. */
  export type Outbound = UpdateDrainEndpoint1$Outbound;
}

export function updateDrainEndpoint1ToJSON(
  updateDrainEndpoint1: UpdateDrainEndpoint1,
): string {
  return JSON.stringify(
    UpdateDrainEndpoint1$outboundSchema.parse(updateDrainEndpoint1),
  );
}

export function updateDrainEndpoint1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainEndpoint1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainEndpoint1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainEndpoint1' from JSON`,
  );
}

/** @internal */
export const DeliveryEndpoint$inboundSchema: z.ZodType<
  DeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.lazy(() => UpdateDrainEndpoint1$inboundSchema);

/** @internal */
export type DeliveryEndpoint$Outbound = UpdateDrainEndpoint1$Outbound;

/** @internal */
export const DeliveryEndpoint$outboundSchema: z.ZodType<
  DeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  DeliveryEndpoint
> = z.lazy(() => UpdateDrainEndpoint1$outboundSchema);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryEndpoint$ {
  /** @deprecated use `DeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = DeliveryEndpoint$inboundSchema;
  /** @deprecated use `DeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = DeliveryEndpoint$outboundSchema;
  /** @deprecated use `DeliveryEndpoint$Outbound` instead. */
  export type Outbound = DeliveryEndpoint$Outbound;
}

export function deliveryEndpointToJSON(
  deliveryEndpoint: DeliveryEndpoint,
): string {
  return JSON.stringify(
    DeliveryEndpoint$outboundSchema.parse(deliveryEndpoint),
  );
}

export function deliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<DeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsEncoding$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryDrainsEncoding
> = z.nativeEnum(UpdateDrainDeliveryDrainsEncoding);

/** @internal */
export const UpdateDrainDeliveryDrainsEncoding$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryDrainsEncoding
> = UpdateDrainDeliveryDrainsEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsEncoding$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsEncoding$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsEncoding$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsEncoding$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsEncoding$outboundSchema;
}

/** @internal */
export const UpdateDrainDelivery2$inboundSchema: z.ZodType<
  UpdateDrainDelivery2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.lazy(() => UpdateDrainEndpoint1$inboundSchema),
  encoding: UpdateDrainDeliveryDrainsEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type UpdateDrainDelivery2$Outbound = {
  type: string;
  endpoint: UpdateDrainEndpoint1$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const UpdateDrainDelivery2$outboundSchema: z.ZodType<
  UpdateDrainDelivery2$Outbound,
  z.ZodTypeDef,
  UpdateDrainDelivery2
> = z.object({
  type: z.string(),
  endpoint: z.lazy(() => UpdateDrainEndpoint1$outboundSchema),
  encoding: UpdateDrainDeliveryDrainsEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDelivery2$ {
  /** @deprecated use `UpdateDrainDelivery2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDelivery2$inboundSchema;
  /** @deprecated use `UpdateDrainDelivery2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDelivery2$outboundSchema;
  /** @deprecated use `UpdateDrainDelivery2$Outbound` instead. */
  export type Outbound = UpdateDrainDelivery2$Outbound;
}

export function updateDrainDelivery2ToJSON(
  updateDrainDelivery2: UpdateDrainDelivery2,
): string {
  return JSON.stringify(
    UpdateDrainDelivery2$outboundSchema.parse(updateDrainDelivery2),
  );
}

export function updateDrainDelivery2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDelivery2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDelivery2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDelivery2' from JSON`,
  );
}

/** @internal */
export const DeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof DeliveryCompression
> = z.nativeEnum(DeliveryCompression);

/** @internal */
export const DeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof DeliveryCompression
> = DeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeliveryCompression$ {
  /** @deprecated use `DeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = DeliveryCompression$inboundSchema;
  /** @deprecated use `DeliveryCompression$outboundSchema` instead. */
  export const outboundSchema = DeliveryCompression$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryEncoding$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryEncoding
> = z.nativeEnum(UpdateDrainDeliveryEncoding);

/** @internal */
export const UpdateDrainDeliveryEncoding$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryEncoding
> = UpdateDrainDeliveryEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryEncoding$ {
  /** @deprecated use `UpdateDrainDeliveryEncoding$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryEncoding$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryEncoding$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryEncoding$outboundSchema;
}

/** @internal */
export const UpdateDrainDelivery1$inboundSchema: z.ZodType<
  UpdateDrainDelivery1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  compression: DeliveryCompression$inboundSchema.optional(),
  encoding: UpdateDrainDeliveryEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type UpdateDrainDelivery1$Outbound = {
  type: string;
  endpoint: string;
  compression?: string | undefined;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const UpdateDrainDelivery1$outboundSchema: z.ZodType<
  UpdateDrainDelivery1$Outbound,
  z.ZodTypeDef,
  UpdateDrainDelivery1
> = z.object({
  type: z.string(),
  endpoint: z.string(),
  compression: DeliveryCompression$outboundSchema.optional(),
  encoding: UpdateDrainDeliveryEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDelivery1$ {
  /** @deprecated use `UpdateDrainDelivery1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDelivery1$inboundSchema;
  /** @deprecated use `UpdateDrainDelivery1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDelivery1$outboundSchema;
  /** @deprecated use `UpdateDrainDelivery1$Outbound` instead. */
  export type Outbound = UpdateDrainDelivery1$Outbound;
}

export function updateDrainDelivery1ToJSON(
  updateDrainDelivery1: UpdateDrainDelivery1,
): string {
  return JSON.stringify(
    UpdateDrainDelivery1$outboundSchema.parse(updateDrainDelivery1),
  );
}

export function updateDrainDelivery1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDelivery1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDelivery1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDelivery1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDelivery$inboundSchema: z.ZodType<
  UpdateDrainDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainDelivery1$inboundSchema),
  z.lazy(() => UpdateDrainDelivery2$inboundSchema),
  z.lazy(() => UpdateDrainDelivery3$inboundSchema),
]);

/** @internal */
export type UpdateDrainDelivery$Outbound =
  | UpdateDrainDelivery1$Outbound
  | UpdateDrainDelivery2$Outbound
  | UpdateDrainDelivery3$Outbound;

/** @internal */
export const UpdateDrainDelivery$outboundSchema: z.ZodType<
  UpdateDrainDelivery$Outbound,
  z.ZodTypeDef,
  UpdateDrainDelivery
> = z.union([
  z.lazy(() => UpdateDrainDelivery1$outboundSchema),
  z.lazy(() => UpdateDrainDelivery2$outboundSchema),
  z.lazy(() => UpdateDrainDelivery3$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDelivery$ {
  /** @deprecated use `UpdateDrainDelivery$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDelivery$inboundSchema;
  /** @deprecated use `UpdateDrainDelivery$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDelivery$outboundSchema;
  /** @deprecated use `UpdateDrainDelivery$Outbound` instead. */
  export type Outbound = UpdateDrainDelivery$Outbound;
}

export function updateDrainDeliveryToJSON(
  updateDrainDelivery: UpdateDrainDelivery,
): string {
  return JSON.stringify(
    UpdateDrainDelivery$outboundSchema.parse(updateDrainDelivery),
  );
}

export function updateDrainDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDelivery' from JSON`,
  );
}

/** @internal */
export const UpdateDrainEnv$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainEnv
> = z.nativeEnum(UpdateDrainEnv);

/** @internal */
export const UpdateDrainEnv$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainEnv
> = UpdateDrainEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainEnv$ {
  /** @deprecated use `UpdateDrainEnv$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainEnv$inboundSchema;
  /** @deprecated use `UpdateDrainEnv$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainEnv$outboundSchema;
}

/** @internal */
export const UpdateDrainSampling$inboundSchema: z.ZodType<
  UpdateDrainSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  rate: z.number(),
  env: UpdateDrainEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type UpdateDrainSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const UpdateDrainSampling$outboundSchema: z.ZodType<
  UpdateDrainSampling$Outbound,
  z.ZodTypeDef,
  UpdateDrainSampling
> = z.object({
  type: z.string(),
  rate: z.number(),
  env: UpdateDrainEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSampling$ {
  /** @deprecated use `UpdateDrainSampling$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSampling$inboundSchema;
  /** @deprecated use `UpdateDrainSampling$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSampling$outboundSchema;
  /** @deprecated use `UpdateDrainSampling$Outbound` instead. */
  export type Outbound = UpdateDrainSampling$Outbound;
}

export function updateDrainSamplingToJSON(
  updateDrainSampling: UpdateDrainSampling,
): string {
  return JSON.stringify(
    UpdateDrainSampling$outboundSchema.parse(updateDrainSampling),
  );
}

export function updateDrainSamplingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSampling' from JSON`,
  );
}

/** @internal */
export const UpdateDrainTransforms$inboundSchema: z.ZodType<
  UpdateDrainTransforms,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
});

/** @internal */
export type UpdateDrainTransforms$Outbound = {
  id: string;
};

/** @internal */
export const UpdateDrainTransforms$outboundSchema: z.ZodType<
  UpdateDrainTransforms$Outbound,
  z.ZodTypeDef,
  UpdateDrainTransforms
> = z.object({
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainTransforms$ {
  /** @deprecated use `UpdateDrainTransforms$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainTransforms$inboundSchema;
  /** @deprecated use `UpdateDrainTransforms$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainTransforms$outboundSchema;
  /** @deprecated use `UpdateDrainTransforms$Outbound` instead. */
  export type Outbound = UpdateDrainTransforms$Outbound;
}

export function updateDrainTransformsToJSON(
  updateDrainTransforms: UpdateDrainTransforms,
): string {
  return JSON.stringify(
    UpdateDrainTransforms$outboundSchema.parse(updateDrainTransforms),
  );
}

export function updateDrainTransformsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainTransforms, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainTransforms$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainTransforms' from JSON`,
  );
}

/** @internal */
export const UpdateDrainStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainStatus
> = z.nativeEnum(UpdateDrainStatus);

/** @internal */
export const UpdateDrainStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainStatus
> = UpdateDrainStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainStatus$ {
  /** @deprecated use `UpdateDrainStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainStatus$inboundSchema;
  /** @deprecated use `UpdateDrainStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainStatus$outboundSchema;
}

/** @internal */
export const UpdateDrainSource2$inboundSchema: z.ZodType<
  UpdateDrainSource2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().default("self-served"),
});

/** @internal */
export type UpdateDrainSource2$Outbound = {
  kind: string;
};

/** @internal */
export const UpdateDrainSource2$outboundSchema: z.ZodType<
  UpdateDrainSource2$Outbound,
  z.ZodTypeDef,
  UpdateDrainSource2
> = z.object({
  kind: z.string().default("self-served"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSource2$ {
  /** @deprecated use `UpdateDrainSource2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSource2$inboundSchema;
  /** @deprecated use `UpdateDrainSource2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSource2$outboundSchema;
  /** @deprecated use `UpdateDrainSource2$Outbound` instead. */
  export type Outbound = UpdateDrainSource2$Outbound;
}

export function updateDrainSource2ToJSON(
  updateDrainSource2: UpdateDrainSource2,
): string {
  return JSON.stringify(
    UpdateDrainSource2$outboundSchema.parse(updateDrainSource2),
  );
}

export function updateDrainSource2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSource2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSource2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSource2' from JSON`,
  );
}

/** @internal */
export const UpdateDrain13$inboundSchema: z.ZodType<
  UpdateDrain13,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().default("integration"),
});

/** @internal */
export type UpdateDrain13$Outbound = {
  kind: string;
};

/** @internal */
export const UpdateDrain13$outboundSchema: z.ZodType<
  UpdateDrain13$Outbound,
  z.ZodTypeDef,
  UpdateDrain13
> = z.object({
  kind: z.string().default("integration"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrain13$ {
  /** @deprecated use `UpdateDrain13$inboundSchema` instead. */
  export const inboundSchema = UpdateDrain13$inboundSchema;
  /** @deprecated use `UpdateDrain13$outboundSchema` instead. */
  export const outboundSchema = UpdateDrain13$outboundSchema;
  /** @deprecated use `UpdateDrain13$Outbound` instead. */
  export type Outbound = UpdateDrain13$Outbound;
}

export function updateDrain13ToJSON(updateDrain13: UpdateDrain13): string {
  return JSON.stringify(UpdateDrain13$outboundSchema.parse(updateDrain13));
}

export function updateDrain13FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrain13, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrain13$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrain13' from JSON`,
  );
}

/** @internal */
export const UpdateDrain12$inboundSchema: z.ZodType<
  UpdateDrain12,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().default("integration"),
  resourceId: z.string(),
});

/** @internal */
export type UpdateDrain12$Outbound = {
  kind: string;
  resourceId: string;
};

/** @internal */
export const UpdateDrain12$outboundSchema: z.ZodType<
  UpdateDrain12$Outbound,
  z.ZodTypeDef,
  UpdateDrain12
> = z.object({
  kind: z.string().default("integration"),
  resourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrain12$ {
  /** @deprecated use `UpdateDrain12$inboundSchema` instead. */
  export const inboundSchema = UpdateDrain12$inboundSchema;
  /** @deprecated use `UpdateDrain12$outboundSchema` instead. */
  export const outboundSchema = UpdateDrain12$outboundSchema;
  /** @deprecated use `UpdateDrain12$Outbound` instead. */
  export type Outbound = UpdateDrain12$Outbound;
}

export function updateDrain12ToJSON(updateDrain12: UpdateDrain12): string {
  return JSON.stringify(UpdateDrain12$outboundSchema.parse(updateDrain12));
}

export function updateDrain12FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrain12, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrain12$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrain12' from JSON`,
  );
}

/** @internal */
export const UpdateDrain11$inboundSchema: z.ZodType<
  UpdateDrain11,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: z.string().default("integration"),
  externalResourceId: z.string(),
});

/** @internal */
export type UpdateDrain11$Outbound = {
  kind: string;
  externalResourceId: string;
};

/** @internal */
export const UpdateDrain11$outboundSchema: z.ZodType<
  UpdateDrain11$Outbound,
  z.ZodTypeDef,
  UpdateDrain11
> = z.object({
  kind: z.string().default("integration"),
  externalResourceId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrain11$ {
  /** @deprecated use `UpdateDrain11$inboundSchema` instead. */
  export const inboundSchema = UpdateDrain11$inboundSchema;
  /** @deprecated use `UpdateDrain11$outboundSchema` instead. */
  export const outboundSchema = UpdateDrain11$outboundSchema;
  /** @deprecated use `UpdateDrain11$Outbound` instead. */
  export type Outbound = UpdateDrain11$Outbound;
}

export function updateDrain11ToJSON(updateDrain11: UpdateDrain11): string {
  return JSON.stringify(UpdateDrain11$outboundSchema.parse(updateDrain11));
}

export function updateDrain11FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrain11, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrain11$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrain11' from JSON`,
  );
}

/** @internal */
export const UpdateDrainSource1$inboundSchema: z.ZodType<
  UpdateDrainSource1,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrain11$inboundSchema),
  z.lazy(() => UpdateDrain12$inboundSchema),
  z.lazy(() => UpdateDrain13$inboundSchema),
]);

/** @internal */
export type UpdateDrainSource1$Outbound =
  | UpdateDrain11$Outbound
  | UpdateDrain12$Outbound
  | UpdateDrain13$Outbound;

/** @internal */
export const UpdateDrainSource1$outboundSchema: z.ZodType<
  UpdateDrainSource1$Outbound,
  z.ZodTypeDef,
  UpdateDrainSource1
> = z.union([
  z.lazy(() => UpdateDrain11$outboundSchema),
  z.lazy(() => UpdateDrain12$outboundSchema),
  z.lazy(() => UpdateDrain13$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSource1$ {
  /** @deprecated use `UpdateDrainSource1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSource1$inboundSchema;
  /** @deprecated use `UpdateDrainSource1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSource1$outboundSchema;
  /** @deprecated use `UpdateDrainSource1$Outbound` instead. */
  export type Outbound = UpdateDrainSource1$Outbound;
}

export function updateDrainSource1ToJSON(
  updateDrainSource1: UpdateDrainSource1,
): string {
  return JSON.stringify(
    UpdateDrainSource1$outboundSchema.parse(updateDrainSource1),
  );
}

export function updateDrainSource1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSource1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSource1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSource1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainSource$inboundSchema: z.ZodType<
  UpdateDrainSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.union([
    z.lazy(() => UpdateDrain11$inboundSchema),
    z.lazy(() => UpdateDrain12$inboundSchema),
    z.lazy(() => UpdateDrain13$inboundSchema),
  ]),
  z.lazy(() => UpdateDrainSource2$inboundSchema),
]);

/** @internal */
export type UpdateDrainSource$Outbound =
  | UpdateDrain11$Outbound
  | UpdateDrain12$Outbound
  | UpdateDrain13$Outbound
  | UpdateDrainSource2$Outbound;

/** @internal */
export const UpdateDrainSource$outboundSchema: z.ZodType<
  UpdateDrainSource$Outbound,
  z.ZodTypeDef,
  UpdateDrainSource
> = z.union([
  z.union([
    z.lazy(() => UpdateDrain11$outboundSchema),
    z.lazy(() => UpdateDrain12$outboundSchema),
    z.lazy(() => UpdateDrain13$outboundSchema),
  ]),
  z.lazy(() => UpdateDrainSource2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSource$ {
  /** @deprecated use `UpdateDrainSource$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSource$inboundSchema;
  /** @deprecated use `UpdateDrainSource$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSource$outboundSchema;
  /** @deprecated use `UpdateDrainSource$Outbound` instead. */
  export type Outbound = UpdateDrainSource$Outbound;
}

export function updateDrainSourceToJSON(
  updateDrainSource: UpdateDrainSource,
): string {
  return JSON.stringify(
    UpdateDrainSource$outboundSchema.parse(updateDrainSource),
  );
}

export function updateDrainSourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSource' from JSON`,
  );
}

/** @internal */
export const UpdateDrainRequestBody$inboundSchema: z.ZodType<
  UpdateDrainRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  projects: UpdateDrainProjects$inboundSchema.optional(),
  projectIds: z.nullable(z.array(z.string())).optional(),
  filter: z.nullable(
    z.union([z.lazy(() => UpdateDrainFilter2$inboundSchema), z.string()]),
  ).optional(),
  schemas: z.record(z.lazy(() => UpdateDrainSchemas$inboundSchema)).optional(),
  delivery: z.union([
    z.lazy(() => UpdateDrainDelivery1$inboundSchema),
    z.lazy(() => UpdateDrainDelivery2$inboundSchema),
    z.lazy(() => UpdateDrainDelivery3$inboundSchema),
  ]).optional(),
  sampling: z.nullable(z.array(z.lazy(() => UpdateDrainSampling$inboundSchema)))
    .optional(),
  transforms: z.nullable(
    z.array(z.lazy(() => UpdateDrainTransforms$inboundSchema)),
  ).optional(),
  status: UpdateDrainStatus$inboundSchema.optional(),
  source: z.union([
    z.union([
      z.lazy(() => UpdateDrain11$inboundSchema),
      z.lazy(() => UpdateDrain12$inboundSchema),
      z.lazy(() => UpdateDrain13$inboundSchema),
    ]),
    z.lazy(() => UpdateDrainSource2$inboundSchema),
  ]).optional(),
});

/** @internal */
export type UpdateDrainRequestBody$Outbound = {
  name?: string | undefined;
  projects?: string | undefined;
  projectIds?: Array<string> | null | undefined;
  filter?: UpdateDrainFilter2$Outbound | string | null | undefined;
  schemas?: { [k: string]: UpdateDrainSchemas$Outbound } | undefined;
  delivery?:
    | UpdateDrainDelivery1$Outbound
    | UpdateDrainDelivery2$Outbound
    | UpdateDrainDelivery3$Outbound
    | undefined;
  sampling?: Array<UpdateDrainSampling$Outbound> | null | undefined;
  transforms?: Array<UpdateDrainTransforms$Outbound> | null | undefined;
  status?: string | undefined;
  source?:
    | UpdateDrain11$Outbound
    | UpdateDrain12$Outbound
    | UpdateDrain13$Outbound
    | UpdateDrainSource2$Outbound
    | undefined;
};

/** @internal */
export const UpdateDrainRequestBody$outboundSchema: z.ZodType<
  UpdateDrainRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateDrainRequestBody
> = z.object({
  name: z.string().optional(),
  projects: UpdateDrainProjects$outboundSchema.optional(),
  projectIds: z.nullable(z.array(z.string())).optional(),
  filter: z.nullable(
    z.union([z.lazy(() => UpdateDrainFilter2$outboundSchema), z.string()]),
  ).optional(),
  schemas: z.record(z.lazy(() => UpdateDrainSchemas$outboundSchema)).optional(),
  delivery: z.union([
    z.lazy(() => UpdateDrainDelivery1$outboundSchema),
    z.lazy(() => UpdateDrainDelivery2$outboundSchema),
    z.lazy(() => UpdateDrainDelivery3$outboundSchema),
  ]).optional(),
  sampling: z.nullable(
    z.array(z.lazy(() => UpdateDrainSampling$outboundSchema)),
  ).optional(),
  transforms: z.nullable(
    z.array(z.lazy(() => UpdateDrainTransforms$outboundSchema)),
  ).optional(),
  status: UpdateDrainStatus$outboundSchema.optional(),
  source: z.union([
    z.union([
      z.lazy(() => UpdateDrain11$outboundSchema),
      z.lazy(() => UpdateDrain12$outboundSchema),
      z.lazy(() => UpdateDrain13$outboundSchema),
    ]),
    z.lazy(() => UpdateDrainSource2$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainRequestBody$ {
  /** @deprecated use `UpdateDrainRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainRequestBody$inboundSchema;
  /** @deprecated use `UpdateDrainRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainRequestBody$outboundSchema;
  /** @deprecated use `UpdateDrainRequestBody$Outbound` instead. */
  export type Outbound = UpdateDrainRequestBody$Outbound;
}

export function updateDrainRequestBodyToJSON(
  updateDrainRequestBody: UpdateDrainRequestBody,
): string {
  return JSON.stringify(
    UpdateDrainRequestBody$outboundSchema.parse(updateDrainRequestBody),
  );
}

export function updateDrainRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateDrainRequest$inboundSchema: z.ZodType<
  UpdateDrainRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => UpdateDrainRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateDrainRequest$Outbound = {
  id: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: UpdateDrainRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateDrainRequest$outboundSchema: z.ZodType<
  UpdateDrainRequest$Outbound,
  z.ZodTypeDef,
  UpdateDrainRequest
> = z.object({
  id: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => UpdateDrainRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainRequest$ {
  /** @deprecated use `UpdateDrainRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainRequest$inboundSchema;
  /** @deprecated use `UpdateDrainRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainRequest$outboundSchema;
  /** @deprecated use `UpdateDrainRequest$Outbound` instead. */
  export type Outbound = UpdateDrainRequest$Outbound;
}

export function updateDrainRequestToJSON(
  updateDrainRequest: UpdateDrainRequest,
): string {
  return JSON.stringify(
    UpdateDrainRequest$outboundSchema.parse(updateDrainRequest),
  );
}

export function updateDrainRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainRequest' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsCreatedFrom$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDrainsCreatedFrom> = z
    .nativeEnum(UpdateDrainResponseBodyDrainsCreatedFrom);

/** @internal */
export const UpdateDrainResponseBodyDrainsCreatedFrom$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDrainsCreatedFrom> =
    UpdateDrainResponseBodyDrainsCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsCreatedFrom$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsCreatedFrom$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsCreatedFrom$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsCreatedFrom$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsCreatedFrom$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyDrainsLog$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodyDrainsLog$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyDrainsLog$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsLog$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsLog$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsLog$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyDrainsLog$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsLog$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyDrainsLog$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsLog$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsLog$Outbound;
}

export function updateDrainResponseBodyDrainsLogToJSON(
  updateDrainResponseBodyDrainsLog: UpdateDrainResponseBodyDrainsLog,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsLog$outboundSchema.parse(
      updateDrainResponseBodyDrainsLog,
    ),
  );
}

export function updateDrainResponseBodyDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodyDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsLog' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsTrace$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodyDrainsTrace$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyDrainsTrace$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsTrace$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsTrace$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsTrace$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyDrainsTrace$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsTrace$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsTrace$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsTrace$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsTrace$Outbound;
}

export function updateDrainResponseBodyDrainsTraceToJSON(
  updateDrainResponseBodyDrainsTrace: UpdateDrainResponseBodyDrainsTrace,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsTrace$outboundSchema.parse(
      updateDrainResponseBodyDrainsTrace,
    ),
  );
}

export function updateDrainResponseBodyDrainsTraceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsTrace' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsAnalytics$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodyDrainsAnalytics$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyDrainsAnalytics$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsAnalytics$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsAnalytics$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsAnalytics$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsAnalytics$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsAnalytics$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsAnalytics$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsAnalytics$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsAnalytics$Outbound;
}

export function updateDrainResponseBodyDrainsAnalyticsToJSON(
  updateDrainResponseBodyDrainsAnalytics:
    UpdateDrainResponseBodyDrainsAnalytics,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsAnalytics$outboundSchema.parse(
      updateDrainResponseBodyDrainsAnalytics,
    ),
  );
}

export function updateDrainResponseBodyDrainsAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsAnalytics' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsSpeedInsights$inboundSchema:
  z.ZodType<UpdateDrainResponseBodyDrainsSpeedInsights, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type UpdateDrainResponseBodyDrainsSpeedInsights$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyDrainsSpeedInsights$outboundSchema:
  z.ZodType<
    UpdateDrainResponseBodyDrainsSpeedInsights$Outbound,
    z.ZodTypeDef,
    UpdateDrainResponseBodyDrainsSpeedInsights
  > = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsSpeedInsights$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsSpeedInsights$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsSpeedInsights$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsSpeedInsights$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSpeedInsights$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsSpeedInsights$Outbound;
}

export function updateDrainResponseBodyDrainsSpeedInsightsToJSON(
  updateDrainResponseBodyDrainsSpeedInsights:
    UpdateDrainResponseBodyDrainsSpeedInsights,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsSpeedInsights$outboundSchema.parse(
      updateDrainResponseBodyDrainsSpeedInsights,
    ),
  );
}

export function updateDrainResponseBodyDrainsSpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateDrainResponseBodyDrainsSpeedInsights,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsSpeedInsights$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateDrainResponseBodyDrainsSpeedInsights' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsSchemas$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsSchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => UpdateDrainResponseBodyDrainsLog$inboundSchema).optional(),
  trace: z.lazy(() => UpdateDrainResponseBodyDrainsTrace$inboundSchema)
    .optional(),
  analytics: z.lazy(() => UpdateDrainResponseBodyDrainsAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() =>
    UpdateDrainResponseBodyDrainsSpeedInsights$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type UpdateDrainResponseBodyDrainsSchemas$Outbound = {
  log?: UpdateDrainResponseBodyDrainsLog$Outbound | undefined;
  trace?: UpdateDrainResponseBodyDrainsTrace$Outbound | undefined;
  analytics?: UpdateDrainResponseBodyDrainsAnalytics$Outbound | undefined;
  speed_insights?:
    | UpdateDrainResponseBodyDrainsSpeedInsights$Outbound
    | undefined;
};

/** @internal */
export const UpdateDrainResponseBodyDrainsSchemas$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsSchemas$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsSchemas
> = z.object({
  log: z.lazy(() => UpdateDrainResponseBodyDrainsLog$outboundSchema).optional(),
  trace: z.lazy(() => UpdateDrainResponseBodyDrainsTrace$outboundSchema)
    .optional(),
  analytics: z.lazy(() => UpdateDrainResponseBodyDrainsAnalytics$outboundSchema)
    .optional(),
  speedInsights: z.lazy(() =>
    UpdateDrainResponseBodyDrainsSpeedInsights$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsSchemas$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsSchemas$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsSchemas$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSchemas$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsSchemas$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSchemas$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsSchemas$Outbound;
}

export function updateDrainResponseBodyDrainsSchemasToJSON(
  updateDrainResponseBodyDrainsSchemas: UpdateDrainResponseBodyDrainsSchemas,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsSchemas$outboundSchema.parse(
      updateDrainResponseBodyDrainsSchemas,
    ),
  );
}

export function updateDrainResponseBodyDrainsSchemasFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsSchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsSchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsSchemas' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  > = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type
  > =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsTarget$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryDrainsTarget
> = z.nativeEnum(UpdateDrainDeliveryDrainsTarget);

/** @internal */
export const UpdateDrainDeliveryDrainsTarget$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryDrainsTarget
> = UpdateDrainDeliveryDrainsTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsTarget$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsTarget$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrainsTarget$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrains5$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$inboundSchema,
  target: UpdateDrainDeliveryDrainsTarget$inboundSchema,
});

/** @internal */
export type UpdateDrainDeliveryDrains5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const UpdateDrainDeliveryDrains5$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains5$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrains5
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody25Type$outboundSchema,
  target: UpdateDrainDeliveryDrainsTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrains5$ {
  /** @deprecated use `UpdateDrainDeliveryDrains5$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrains5$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains5$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrains5$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains5$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrains5$Outbound;
}

export function updateDrainDeliveryDrains5ToJSON(
  updateDrainDeliveryDrains5: UpdateDrainDeliveryDrains5,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrains5$outboundSchema.parse(updateDrainDeliveryDrains5),
  );
}

export function updateDrainDeliveryDrains5FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrains5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryDrains5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrains5' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  > = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type
  > =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrains4$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type UpdateDrainDeliveryDrains4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const UpdateDrainDeliveryDrains4$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains4$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrains4
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody24Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrains4$ {
  /** @deprecated use `UpdateDrainDeliveryDrains4$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrains4$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains4$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrains4$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains4$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrains4$Outbound;
}

export function updateDrainDeliveryDrains4ToJSON(
  updateDrainDeliveryDrains4: UpdateDrainDeliveryDrains4,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrains4$outboundSchema.parse(updateDrainDeliveryDrains4),
  );
}

export function updateDrainDeliveryDrains4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrains4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryDrains4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrains4' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type
  > = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type
  > =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse3$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsResponse3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type UpdateDrainDeliveryDrainsResponse3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const UpdateDrainDeliveryDrainsResponse3$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsResponse3$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrainsResponse3
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody23Type$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse3$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse3$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsResponse3$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse3$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse3$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse3$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrainsResponse3$Outbound;
}

export function updateDrainDeliveryDrainsResponse3ToJSON(
  updateDrainDeliveryDrainsResponse3: UpdateDrainDeliveryDrainsResponse3,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrainsResponse3$outboundSchema.parse(
      updateDrainDeliveryDrainsResponse3,
    ),
  );
}

export function updateDrainDeliveryDrainsResponse3FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrainsResponse3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainDeliveryDrainsResponse3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrainsResponse3' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  > = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type
  > =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsEndpoint$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type UpdateDrainDeliveryDrainsEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const UpdateDrainDeliveryDrainsEndpoint$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsEndpoint$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrainsEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsEndpoint$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsEndpoint$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsEndpoint$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsEndpoint$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsEndpoint$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsEndpoint$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrainsEndpoint$Outbound;
}

export function updateDrainDeliveryDrainsEndpointToJSON(
  updateDrainDeliveryDrainsEndpoint: UpdateDrainDeliveryDrainsEndpoint,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrainsEndpoint$outboundSchema.parse(
      updateDrainDeliveryDrainsEndpoint,
    ),
  );
}

export function updateDrainDeliveryDrainsEndpointFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrainsEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryDrainsEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrainsEndpoint' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding
  > = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding
  > =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse2$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$inboundSchema,
  endpoint: z.lazy(() => UpdateDrainDeliveryDrainsEndpoint$inboundSchema),
  encoding:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type UpdateDrainDeliveryDrainsResponse2$Outbound = {
  type: string;
  endpoint: UpdateDrainDeliveryDrainsEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const UpdateDrainDeliveryDrainsResponse2$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsResponse2$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrainsResponse2
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBody2Type$outboundSchema,
  endpoint: z.lazy(() => UpdateDrainDeliveryDrainsEndpoint$outboundSchema),
  encoding:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyEncoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse2$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsResponse2$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse2$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse2$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse2$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrainsResponse2$Outbound;
}

export function updateDrainDeliveryDrainsResponse2ToJSON(
  updateDrainDeliveryDrainsResponse2: UpdateDrainDeliveryDrainsResponse2,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrainsResponse2$outboundSchema.parse(
      updateDrainDeliveryDrainsResponse2,
    ),
  );
}

export function updateDrainDeliveryDrainsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrainsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainDeliveryDrainsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrainsResponse2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType
  > =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding
  > = z.nativeEnum(UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding);

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding
  > = UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsCompression$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsCompression> = z.nativeEnum(
    UpdateDrainDeliveryDrainsCompression,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsCompression$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsCompression> =
    UpdateDrainDeliveryDrainsCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsCompression$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsCompression$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsCompression$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsCompression$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsCompression$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse1$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$inboundSchema,
  endpoint: z.string(),
  encoding:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$inboundSchema,
  compression: UpdateDrainDeliveryDrainsCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type UpdateDrainDeliveryDrainsResponse1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const UpdateDrainDeliveryDrainsResponse1$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrainsResponse1$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrainsResponse1
> = z.object({
  type:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONResponseBodyType$outboundSchema,
  endpoint: z.string(),
  encoding:
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONEncoding$outboundSchema,
  compression: UpdateDrainDeliveryDrainsCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse1$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsResponse1$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse1$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse1$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse1$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrainsResponse1$Outbound;
}

export function updateDrainDeliveryDrainsResponse1ToJSON(
  updateDrainDeliveryDrainsResponse1: UpdateDrainDeliveryDrainsResponse1,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrainsResponse1$outboundSchema.parse(
      updateDrainDeliveryDrainsResponse1,
    ),
  );
}

export function updateDrainDeliveryDrainsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrainsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainDeliveryDrainsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrainsResponse1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsDelivery$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainDeliveryDrainsResponse1$inboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrainsResponse2$inboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrainsResponse3$inboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains4$inboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains5$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBodyDrainsDelivery$Outbound =
  | UpdateDrainDeliveryDrainsResponse1$Outbound
  | UpdateDrainDeliveryDrainsResponse2$Outbound
  | UpdateDrainDeliveryDrainsResponse3$Outbound
  | UpdateDrainDeliveryDrains4$Outbound
  | UpdateDrainDeliveryDrains5$Outbound;

/** @internal */
export const UpdateDrainResponseBodyDrainsDelivery$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsDelivery$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsDelivery
> = z.union([
  z.lazy(() => UpdateDrainDeliveryDrainsResponse1$outboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrainsResponse2$outboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrainsResponse3$outboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains4$outboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsDelivery$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsDelivery$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsDelivery$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsDelivery$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsDelivery$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsDelivery$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsDelivery$Outbound;
}

export function updateDrainResponseBodyDrainsDeliveryToJSON(
  updateDrainResponseBodyDrainsDelivery: UpdateDrainResponseBodyDrainsDelivery,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsDelivery$outboundSchema.parse(
      updateDrainResponseBodyDrainsDelivery,
    ),
  );
}

export function updateDrainResponseBodyDrainsDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsDelivery' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyDrainsType
> = z.nativeEnum(UpdateDrainResponseBodyDrainsType);

/** @internal */
export const UpdateDrainResponseBodyDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyDrainsType
> = UpdateDrainResponseBodyDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsType$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsType$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyDrainsType$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsType$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyDrainsEnv$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyDrainsEnv
> = z.nativeEnum(UpdateDrainResponseBodyDrainsEnv);

/** @internal */
export const UpdateDrainResponseBodyDrainsEnv$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyDrainsEnv
> = UpdateDrainResponseBodyDrainsEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsEnv$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsEnv$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyDrainsEnv$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsEnv$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyDrainsEnv$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyDrainsSampling$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsSampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainResponseBodyDrainsType$inboundSchema,
  rate: z.number(),
  env: UpdateDrainResponseBodyDrainsEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type UpdateDrainResponseBodyDrainsSampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const UpdateDrainResponseBodyDrainsSampling$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsSampling$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsSampling
> = z.object({
  type: UpdateDrainResponseBodyDrainsType$outboundSchema,
  rate: z.number(),
  env: UpdateDrainResponseBodyDrainsEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsSampling$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsSampling$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsSampling$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSampling$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsSampling$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSampling$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsSampling$Outbound;
}

export function updateDrainResponseBodyDrainsSamplingToJSON(
  updateDrainResponseBodyDrainsSampling: UpdateDrainResponseBodyDrainsSampling,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsSampling$outboundSchema.parse(
      updateDrainResponseBodyDrainsSampling,
    ),
  );
}

export function updateDrainResponseBodyDrainsSamplingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsSampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsSampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsSampling' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyDrainsStatus
> = z.nativeEnum(UpdateDrainResponseBodyDrainsStatus);

/** @internal */
export const UpdateDrainResponseBodyDrainsStatus$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDrainsStatus> =
    UpdateDrainResponseBodyDrainsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsStatus$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsStatus$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsStatus$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsStatus$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsStatus$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyDrainsDisabledReason$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDrainsDisabledReason> = z
    .nativeEnum(UpdateDrainResponseBodyDrainsDisabledReason);

/** @internal */
export const UpdateDrainResponseBodyDrainsDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDrainsDisabledReason> =
    UpdateDrainResponseBodyDrainsDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsDisabledReason$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsDisabledReason$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsDisabledReason$outboundSchema;
}

/** @internal */
export const UpdateDrainSourceDrainsResponse200Kind$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainSourceDrainsResponse200Kind> = z.nativeEnum(
    UpdateDrainSourceDrainsResponse200Kind,
  );

/** @internal */
export const UpdateDrainSourceDrainsResponse200Kind$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainSourceDrainsResponse200Kind> =
    UpdateDrainSourceDrainsResponse200Kind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrainsResponse200Kind$ {
  /** @deprecated use `UpdateDrainSourceDrainsResponse200Kind$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainSourceDrainsResponse200Kind$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsResponse200Kind$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainSourceDrainsResponse200Kind$outboundSchema;
}

/** @internal */
export const UpdateDrainSourceDrainsResponse2$inboundSchema: z.ZodType<
  UpdateDrainSourceDrainsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: UpdateDrainSourceDrainsResponse200Kind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type UpdateDrainSourceDrainsResponse2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const UpdateDrainSourceDrainsResponse2$outboundSchema: z.ZodType<
  UpdateDrainSourceDrainsResponse2$Outbound,
  z.ZodTypeDef,
  UpdateDrainSourceDrainsResponse2
> = z.object({
  kind: UpdateDrainSourceDrainsResponse200Kind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrainsResponse2$ {
  /** @deprecated use `UpdateDrainSourceDrainsResponse2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSourceDrainsResponse2$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsResponse2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSourceDrainsResponse2$outboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsResponse2$Outbound` instead. */
  export type Outbound = UpdateDrainSourceDrainsResponse2$Outbound;
}

export function updateDrainSourceDrainsResponse2ToJSON(
  updateDrainSourceDrainsResponse2: UpdateDrainSourceDrainsResponse2,
): string {
  return JSON.stringify(
    UpdateDrainSourceDrainsResponse2$outboundSchema.parse(
      updateDrainSourceDrainsResponse2,
    ),
  );
}

export function updateDrainSourceDrainsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSourceDrainsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSourceDrainsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSourceDrainsResponse2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainSourceDrainsResponseKind$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainSourceDrainsResponseKind
> = z.nativeEnum(UpdateDrainSourceDrainsResponseKind);

/** @internal */
export const UpdateDrainSourceDrainsResponseKind$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainSourceDrainsResponseKind> =
    UpdateDrainSourceDrainsResponseKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrainsResponseKind$ {
  /** @deprecated use `UpdateDrainSourceDrainsResponseKind$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainSourceDrainsResponseKind$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsResponseKind$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainSourceDrainsResponseKind$outboundSchema;
}

/** @internal */
export const UpdateDrainSourceDrainsResponse1$inboundSchema: z.ZodType<
  UpdateDrainSourceDrainsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: UpdateDrainSourceDrainsResponseKind$inboundSchema,
});

/** @internal */
export type UpdateDrainSourceDrainsResponse1$Outbound = {
  kind: string;
};

/** @internal */
export const UpdateDrainSourceDrainsResponse1$outboundSchema: z.ZodType<
  UpdateDrainSourceDrainsResponse1$Outbound,
  z.ZodTypeDef,
  UpdateDrainSourceDrainsResponse1
> = z.object({
  kind: UpdateDrainSourceDrainsResponseKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrainsResponse1$ {
  /** @deprecated use `UpdateDrainSourceDrainsResponse1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSourceDrainsResponse1$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsResponse1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSourceDrainsResponse1$outboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsResponse1$Outbound` instead. */
  export type Outbound = UpdateDrainSourceDrainsResponse1$Outbound;
}

export function updateDrainSourceDrainsResponse1ToJSON(
  updateDrainSourceDrainsResponse1: UpdateDrainSourceDrainsResponse1,
): string {
  return JSON.stringify(
    UpdateDrainSourceDrainsResponse1$outboundSchema.parse(
      updateDrainSourceDrainsResponse1,
    ),
  );
}

export function updateDrainSourceDrainsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSourceDrainsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSourceDrainsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSourceDrainsResponse1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsSource$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsSource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainSourceDrainsResponse2$inboundSchema),
  z.lazy(() => UpdateDrainSourceDrainsResponse1$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBodyDrainsSource$Outbound =
  | UpdateDrainSourceDrainsResponse2$Outbound
  | UpdateDrainSourceDrainsResponse1$Outbound;

/** @internal */
export const UpdateDrainResponseBodyDrainsSource$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsSource$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsSource
> = z.union([
  z.lazy(() => UpdateDrainSourceDrainsResponse2$outboundSchema),
  z.lazy(() => UpdateDrainSourceDrainsResponse1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsSource$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsSource$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsSource$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSource$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsSource$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsSource$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsSource$Outbound;
}

export function updateDrainResponseBodyDrainsSourceToJSON(
  updateDrainResponseBodyDrainsSource: UpdateDrainResponseBodyDrainsSource,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsSource$outboundSchema.parse(
      updateDrainResponseBodyDrainsSource,
    ),
  );
}

export function updateDrainResponseBodyDrainsSourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsSource' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2DrainsResponse200Version$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterV2DrainsResponse200Version> = z
    .nativeEnum(UpdateDrainFilterV2DrainsResponse200Version);

/** @internal */
export const UpdateDrainFilterV2DrainsResponse200Version$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterV2DrainsResponse200Version> =
    UpdateDrainFilterV2DrainsResponse200Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2DrainsResponse200Version$ {
  /** @deprecated use `UpdateDrainFilterV2DrainsResponse200Version$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainFilterV2DrainsResponse200Version$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2DrainsResponse200Version$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainFilterV2DrainsResponse200Version$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterDrainsResponse200Type> = z.nativeEnum(
    UpdateDrainFilterDrainsResponse200Type,
  );

/** @internal */
export const UpdateDrainFilterDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterDrainsResponse200Type> =
    UpdateDrainFilterDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsResponse200Type$ {
  /** @deprecated use `UpdateDrainFilterDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainFilterDrainsResponse200Type$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainFilterDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterDrainsResponse2002$inboundSchema: z.ZodType<
  UpdateDrainFilterDrainsResponse2002,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainFilterDrainsResponse200Type$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdateDrainFilterDrainsResponse2002$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdateDrainFilterDrainsResponse2002$outboundSchema: z.ZodType<
  UpdateDrainFilterDrainsResponse2002$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrainsResponse2002
> = z.object({
  type: UpdateDrainFilterDrainsResponse200Type$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsResponse2002$ {
  /** @deprecated use `UpdateDrainFilterDrainsResponse2002$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainFilterDrainsResponse2002$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse2002$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainFilterDrainsResponse2002$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse2002$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrainsResponse2002$Outbound;
}

export function updateDrainFilterDrainsResponse2002ToJSON(
  updateDrainFilterDrainsResponse2002: UpdateDrainFilterDrainsResponse2002,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrainsResponse2002$outboundSchema.parse(
      updateDrainFilterDrainsResponse2002,
    ),
  );
}

export function updateDrainFilterDrainsResponse2002FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrainsResponse2002, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainFilterDrainsResponse2002$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrainsResponse2002' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterDrainsResponseType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterDrainsResponseType
> = z.nativeEnum(UpdateDrainFilterDrainsResponseType);

/** @internal */
export const UpdateDrainFilterDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterDrainsResponseType> =
    UpdateDrainFilterDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsResponseType$ {
  /** @deprecated use `UpdateDrainFilterDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainFilterDrainsResponseType$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainFilterDrainsResponseType$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterDrainsProject$inboundSchema: z.ZodType<
  UpdateDrainFilterDrainsProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateDrainFilterDrainsProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const UpdateDrainFilterDrainsProject$outboundSchema: z.ZodType<
  UpdateDrainFilterDrainsProject$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrainsProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsProject$ {
  /** @deprecated use `UpdateDrainFilterDrainsProject$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrainsProject$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsProject$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrainsProject$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsProject$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrainsProject$Outbound;
}

export function updateDrainFilterDrainsProjectToJSON(
  updateDrainFilterDrainsProject: UpdateDrainFilterDrainsProject,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrainsProject$outboundSchema.parse(
      updateDrainFilterDrainsProject,
    ),
  );
}

export function updateDrainFilterDrainsProjectFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrainsProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrainsProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrainsProject' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterDrainsLog$inboundSchema: z.ZodType<
  UpdateDrainFilterDrainsLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateDrainFilterDrainsLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const UpdateDrainFilterDrainsLog$outboundSchema: z.ZodType<
  UpdateDrainFilterDrainsLog$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrainsLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsLog$ {
  /** @deprecated use `UpdateDrainFilterDrainsLog$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrainsLog$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsLog$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrainsLog$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsLog$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrainsLog$Outbound;
}

export function updateDrainFilterDrainsLogToJSON(
  updateDrainFilterDrainsLog: UpdateDrainFilterDrainsLog,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrainsLog$outboundSchema.parse(updateDrainFilterDrainsLog),
  );
}

export function updateDrainFilterDrainsLogFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrainsLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrainsLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrainsLog' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterDrainsDeployment$inboundSchema: z.ZodType<
  UpdateDrainFilterDrainsDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateDrainFilterDrainsDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const UpdateDrainFilterDrainsDeployment$outboundSchema: z.ZodType<
  UpdateDrainFilterDrainsDeployment$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrainsDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsDeployment$ {
  /** @deprecated use `UpdateDrainFilterDrainsDeployment$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrainsDeployment$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsDeployment$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainFilterDrainsDeployment$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsDeployment$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrainsDeployment$Outbound;
}

export function updateDrainFilterDrainsDeploymentToJSON(
  updateDrainFilterDrainsDeployment: UpdateDrainFilterDrainsDeployment,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrainsDeployment$outboundSchema.parse(
      updateDrainFilterDrainsDeployment,
    ),
  );
}

export function updateDrainFilterDrainsDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrainsDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrainsDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrainsDeployment' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterDrainsResponse1$inboundSchema: z.ZodType<
  UpdateDrainFilterDrainsResponse1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainFilterDrainsResponseType$inboundSchema,
  project: z.lazy(() => UpdateDrainFilterDrainsProject$inboundSchema)
    .optional(),
  log: z.lazy(() => UpdateDrainFilterDrainsLog$inboundSchema).optional(),
  deployment: z.lazy(() => UpdateDrainFilterDrainsDeployment$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateDrainFilterDrainsResponse1$Outbound = {
  type: string;
  project?: UpdateDrainFilterDrainsProject$Outbound | undefined;
  log?: UpdateDrainFilterDrainsLog$Outbound | undefined;
  deployment?: UpdateDrainFilterDrainsDeployment$Outbound | undefined;
};

/** @internal */
export const UpdateDrainFilterDrainsResponse1$outboundSchema: z.ZodType<
  UpdateDrainFilterDrainsResponse1$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrainsResponse1
> = z.object({
  type: UpdateDrainFilterDrainsResponseType$outboundSchema,
  project: z.lazy(() => UpdateDrainFilterDrainsProject$outboundSchema)
    .optional(),
  log: z.lazy(() => UpdateDrainFilterDrainsLog$outboundSchema).optional(),
  deployment: z.lazy(() => UpdateDrainFilterDrainsDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsResponse1$ {
  /** @deprecated use `UpdateDrainFilterDrainsResponse1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrainsResponse1$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrainsResponse1$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse1$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrainsResponse1$Outbound;
}

export function updateDrainFilterDrainsResponse1ToJSON(
  updateDrainFilterDrainsResponse1: UpdateDrainFilterDrainsResponse1,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrainsResponse1$outboundSchema.parse(
      updateDrainFilterDrainsResponse1,
    ),
  );
}

export function updateDrainFilterDrainsResponse1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrainsResponse1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrainsResponse1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrainsResponse1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2DrainsFilter$inboundSchema: z.ZodType<
  UpdateDrainFilterV2DrainsFilter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainFilterDrainsResponse2002$inboundSchema),
  z.lazy(() => UpdateDrainFilterDrainsResponse1$inboundSchema),
]);

/** @internal */
export type UpdateDrainFilterV2DrainsFilter$Outbound =
  | UpdateDrainFilterDrainsResponse2002$Outbound
  | UpdateDrainFilterDrainsResponse1$Outbound;

/** @internal */
export const UpdateDrainFilterV2DrainsFilter$outboundSchema: z.ZodType<
  UpdateDrainFilterV2DrainsFilter$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterV2DrainsFilter
> = z.union([
  z.lazy(() => UpdateDrainFilterDrainsResponse2002$outboundSchema),
  z.lazy(() => UpdateDrainFilterDrainsResponse1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2DrainsFilter$ {
  /** @deprecated use `UpdateDrainFilterV2DrainsFilter$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV2DrainsFilter$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2DrainsFilter$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV2DrainsFilter$outboundSchema;
  /** @deprecated use `UpdateDrainFilterV2DrainsFilter$Outbound` instead. */
  export type Outbound = UpdateDrainFilterV2DrainsFilter$Outbound;
}

export function updateDrainFilterV2DrainsFilterToJSON(
  updateDrainFilterV2DrainsFilter: UpdateDrainFilterV2DrainsFilter,
): string {
  return JSON.stringify(
    UpdateDrainFilterV2DrainsFilter$outboundSchema.parse(
      updateDrainFilterV2DrainsFilter,
    ),
  );
}

export function updateDrainFilterV2DrainsFilterFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterV2DrainsFilter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterV2DrainsFilter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterV2DrainsFilter' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2Drains2$inboundSchema: z.ZodType<
  UpdateDrainFilterV2Drains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: UpdateDrainFilterV2DrainsResponse200Version$inboundSchema,
  filter: z.union([
    z.lazy(() => UpdateDrainFilterDrainsResponse2002$inboundSchema),
    z.lazy(() => UpdateDrainFilterDrainsResponse1$inboundSchema),
  ]),
});

/** @internal */
export type UpdateDrainFilterV2Drains2$Outbound = {
  version: string;
  filter:
    | UpdateDrainFilterDrainsResponse2002$Outbound
    | UpdateDrainFilterDrainsResponse1$Outbound;
};

/** @internal */
export const UpdateDrainFilterV2Drains2$outboundSchema: z.ZodType<
  UpdateDrainFilterV2Drains2$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterV2Drains2
> = z.object({
  version: UpdateDrainFilterV2DrainsResponse200Version$outboundSchema,
  filter: z.union([
    z.lazy(() => UpdateDrainFilterDrainsResponse2002$outboundSchema),
    z.lazy(() => UpdateDrainFilterDrainsResponse1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2Drains2$ {
  /** @deprecated use `UpdateDrainFilterV2Drains2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV2Drains2$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Drains2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV2Drains2$outboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Drains2$Outbound` instead. */
  export type Outbound = UpdateDrainFilterV2Drains2$Outbound;
}

export function updateDrainFilterV2Drains2ToJSON(
  updateDrainFilterV2Drains2: UpdateDrainFilterV2Drains2,
): string {
  return JSON.stringify(
    UpdateDrainFilterV2Drains2$outboundSchema.parse(updateDrainFilterV2Drains2),
  );
}

export function updateDrainFilterV2Drains2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterV2Drains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterV2Drains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterV2Drains2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2DrainsResponseVersion$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterV2DrainsResponseVersion> = z
    .nativeEnum(UpdateDrainFilterV2DrainsResponseVersion);

/** @internal */
export const UpdateDrainFilterV2DrainsResponseVersion$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainFilterV2DrainsResponseVersion> =
    UpdateDrainFilterV2DrainsResponseVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2DrainsResponseVersion$ {
  /** @deprecated use `UpdateDrainFilterV2DrainsResponseVersion$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainFilterV2DrainsResponseVersion$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2DrainsResponseVersion$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainFilterV2DrainsResponseVersion$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterV2Drains1$inboundSchema: z.ZodType<
  UpdateDrainFilterV2Drains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: UpdateDrainFilterV2DrainsResponseVersion$inboundSchema,
});

/** @internal */
export type UpdateDrainFilterV2Drains1$Outbound = {
  version: string;
};

/** @internal */
export const UpdateDrainFilterV2Drains1$outboundSchema: z.ZodType<
  UpdateDrainFilterV2Drains1$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterV2Drains1
> = z.object({
  version: UpdateDrainFilterV2DrainsResponseVersion$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2Drains1$ {
  /** @deprecated use `UpdateDrainFilterV2Drains1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV2Drains1$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Drains1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV2Drains1$outboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Drains1$Outbound` instead. */
  export type Outbound = UpdateDrainFilterV2Drains1$Outbound;
}

export function updateDrainFilterV2Drains1ToJSON(
  updateDrainFilterV2Drains1: UpdateDrainFilterV2Drains1,
): string {
  return JSON.stringify(
    UpdateDrainFilterV2Drains1$outboundSchema.parse(updateDrainFilterV2Drains1),
  );
}

export function updateDrainFilterV2Drains1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterV2Drains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterV2Drains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterV2Drains1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDrainsFilterV2$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainFilterV2Drains2$inboundSchema),
  z.lazy(() => UpdateDrainFilterV2Drains1$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBodyDrainsFilterV2$Outbound =
  | UpdateDrainFilterV2Drains2$Outbound
  | UpdateDrainFilterV2Drains1$Outbound;

/** @internal */
export const UpdateDrainResponseBodyDrainsFilterV2$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDrainsFilterV2$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDrainsFilterV2
> = z.union([
  z.lazy(() => UpdateDrainFilterV2Drains2$outboundSchema),
  z.lazy(() => UpdateDrainFilterV2Drains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDrainsFilterV2$ {
  /** @deprecated use `UpdateDrainResponseBodyDrainsFilterV2$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDrainsFilterV2$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsFilterV2$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDrainsFilterV2$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDrainsFilterV2$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDrainsFilterV2$Outbound;
}

export function updateDrainResponseBodyDrainsFilterV2ToJSON(
  updateDrainResponseBodyDrainsFilterV2: UpdateDrainResponseBodyDrainsFilterV2,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDrainsFilterV2$outboundSchema.parse(
      updateDrainResponseBodyDrainsFilterV2,
    ),
  );
}

export function updateDrainResponseBodyDrainsFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDrainsFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyDrainsFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDrainsFilterV2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyFramework$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyFramework
> = z.nativeEnum(UpdateDrainResponseBodyFramework);

/** @internal */
export const UpdateDrainResponseBodyFramework$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyFramework
> = UpdateDrainResponseBodyFramework$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyFramework$ {
  /** @deprecated use `UpdateDrainResponseBodyFramework$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyFramework$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyFramework$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyFramework$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyProjectsMetadata$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyProjectsMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(UpdateDrainResponseBodyFramework$inboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/** @internal */
export type UpdateDrainResponseBodyProjectsMetadata$Outbound = {
  id: string;
  name: string;
  framework?: string | null | undefined;
  latestDeployment?: string | undefined;
};

/** @internal */
export const UpdateDrainResponseBodyProjectsMetadata$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyProjectsMetadata$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyProjectsMetadata
> = z.object({
  id: z.string(),
  name: z.string(),
  framework: z.nullable(UpdateDrainResponseBodyFramework$outboundSchema)
    .optional(),
  latestDeployment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyProjectsMetadata$ {
  /** @deprecated use `UpdateDrainResponseBodyProjectsMetadata$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyProjectsMetadata$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyProjectsMetadata$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyProjectsMetadata$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyProjectsMetadata$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyProjectsMetadata$Outbound;
}

export function updateDrainResponseBodyProjectsMetadataToJSON(
  updateDrainResponseBodyProjectsMetadata:
    UpdateDrainResponseBodyProjectsMetadata,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyProjectsMetadata$outboundSchema.parse(
      updateDrainResponseBodyProjectsMetadata,
    ),
  );
}

export function updateDrainResponseBodyProjectsMetadataFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateDrainResponseBodyProjectsMetadata,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodyProjectsMetadata$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateDrainResponseBodyProjectsMetadata' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBody2$inboundSchema: z.ZodType<
  UpdateDrainResponseBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: UpdateDrainResponseBodyDrainsCreatedFrom$inboundSchema
    .optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => UpdateDrainResponseBodyDrainsSchemas$inboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => UpdateDrainDeliveryDrainsResponse1$inboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrainsResponse2$inboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrainsResponse3$inboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains4$inboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains5$inboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => UpdateDrainResponseBodyDrainsSampling$inboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: UpdateDrainResponseBodyDrainsStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: UpdateDrainResponseBodyDrainsDisabledReason$inboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => UpdateDrainSourceDrainsResponse2$inboundSchema),
    z.lazy(() => UpdateDrainSourceDrainsResponse1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => UpdateDrainFilterV2Drains2$inboundSchema),
    z.lazy(() => UpdateDrainFilterV2Drains1$inboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => UpdateDrainResponseBodyProjectsMetadata$inboundSchema),
  ).optional(),
});

/** @internal */
export type UpdateDrainResponseBody2$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: UpdateDrainResponseBodyDrainsSchemas$Outbound | undefined;
  delivery?:
    | UpdateDrainDeliveryDrainsResponse1$Outbound
    | UpdateDrainDeliveryDrainsResponse2$Outbound
    | UpdateDrainDeliveryDrainsResponse3$Outbound
    | UpdateDrainDeliveryDrains4$Outbound
    | UpdateDrainDeliveryDrains5$Outbound
    | undefined;
  sampling?: Array<UpdateDrainResponseBodyDrainsSampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source:
    | UpdateDrainSourceDrainsResponse2$Outbound
    | UpdateDrainSourceDrainsResponse1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | UpdateDrainFilterV2Drains2$Outbound
    | UpdateDrainFilterV2Drains1$Outbound
    | undefined;
  integrationIcon?: string | undefined;
  integrationConfigurationUri?: string | undefined;
  integrationWebsite?: string | undefined;
  projectsMetadata?:
    | Array<UpdateDrainResponseBodyProjectsMetadata$Outbound>
    | undefined;
};

/** @internal */
export const UpdateDrainResponseBody2$outboundSchema: z.ZodType<
  UpdateDrainResponseBody2$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBody2
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: UpdateDrainResponseBodyDrainsCreatedFrom$outboundSchema
    .optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => UpdateDrainResponseBodyDrainsSchemas$outboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => UpdateDrainDeliveryDrainsResponse1$outboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrainsResponse2$outboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrainsResponse3$outboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains4$outboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains5$outboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => UpdateDrainResponseBodyDrainsSampling$outboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: UpdateDrainResponseBodyDrainsStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: UpdateDrainResponseBodyDrainsDisabledReason$outboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => UpdateDrainSourceDrainsResponse2$outboundSchema),
    z.lazy(() => UpdateDrainSourceDrainsResponse1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => UpdateDrainFilterV2Drains2$outboundSchema),
    z.lazy(() => UpdateDrainFilterV2Drains1$outboundSchema),
  ]).optional(),
  integrationIcon: z.string().optional(),
  integrationConfigurationUri: z.string().optional(),
  integrationWebsite: z.string().optional(),
  projectsMetadata: z.array(
    z.lazy(() => UpdateDrainResponseBodyProjectsMetadata$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBody2$ {
  /** @deprecated use `UpdateDrainResponseBody2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBody2$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBody2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBody2$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBody2$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBody2$Outbound;
}

export function updateDrainResponseBody2ToJSON(
  updateDrainResponseBody2: UpdateDrainResponseBody2,
): string {
  return JSON.stringify(
    UpdateDrainResponseBody2$outboundSchema.parse(updateDrainResponseBody2),
  );
}

export function updateDrainResponseBody2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBody2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyCreatedFrom$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyCreatedFrom
> = z.nativeEnum(UpdateDrainResponseBodyCreatedFrom);

/** @internal */
export const UpdateDrainResponseBodyCreatedFrom$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyCreatedFrom
> = UpdateDrainResponseBodyCreatedFrom$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyCreatedFrom$ {
  /** @deprecated use `UpdateDrainResponseBodyCreatedFrom$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyCreatedFrom$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyCreatedFrom$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyCreatedFrom$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyLog$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyLog,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodyLog$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyLog$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyLog$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyLog
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyLog$ {
  /** @deprecated use `UpdateDrainResponseBodyLog$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyLog$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyLog$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyLog$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyLog$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyLog$Outbound;
}

export function updateDrainResponseBodyLogToJSON(
  updateDrainResponseBodyLog: UpdateDrainResponseBodyLog,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyLog$outboundSchema.parse(updateDrainResponseBodyLog),
  );
}

export function updateDrainResponseBodyLogFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodyLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyLog' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyTrace$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyTrace,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodyTrace$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyTrace$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyTrace$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyTrace
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyTrace$ {
  /** @deprecated use `UpdateDrainResponseBodyTrace$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyTrace$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyTrace$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyTrace$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyTrace$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyTrace$Outbound;
}

export function updateDrainResponseBodyTraceToJSON(
  updateDrainResponseBodyTrace: UpdateDrainResponseBodyTrace,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyTrace$outboundSchema.parse(
      updateDrainResponseBodyTrace,
    ),
  );
}

export function updateDrainResponseBodyTraceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyTrace, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodyTrace$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyTrace' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyAnalytics$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyAnalytics,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodyAnalytics$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodyAnalytics$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyAnalytics$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyAnalytics
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyAnalytics$ {
  /** @deprecated use `UpdateDrainResponseBodyAnalytics$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyAnalytics$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyAnalytics$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyAnalytics$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyAnalytics$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyAnalytics$Outbound;
}

export function updateDrainResponseBodyAnalyticsToJSON(
  updateDrainResponseBodyAnalytics: UpdateDrainResponseBodyAnalytics,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyAnalytics$outboundSchema.parse(
      updateDrainResponseBodyAnalytics,
    ),
  );
}

export function updateDrainResponseBodyAnalyticsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyAnalytics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodyAnalytics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyAnalytics' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodySpeedInsights$inboundSchema: z.ZodType<
  UpdateDrainResponseBodySpeedInsights,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type UpdateDrainResponseBodySpeedInsights$Outbound = {};

/** @internal */
export const UpdateDrainResponseBodySpeedInsights$outboundSchema: z.ZodType<
  UpdateDrainResponseBodySpeedInsights$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodySpeedInsights
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodySpeedInsights$ {
  /** @deprecated use `UpdateDrainResponseBodySpeedInsights$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodySpeedInsights$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySpeedInsights$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodySpeedInsights$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySpeedInsights$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodySpeedInsights$Outbound;
}

export function updateDrainResponseBodySpeedInsightsToJSON(
  updateDrainResponseBodySpeedInsights: UpdateDrainResponseBodySpeedInsights,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodySpeedInsights$outboundSchema.parse(
      updateDrainResponseBodySpeedInsights,
    ),
  );
}

export function updateDrainResponseBodySpeedInsightsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodySpeedInsights, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateDrainResponseBodySpeedInsights$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodySpeedInsights' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodySchemas$inboundSchema: z.ZodType<
  UpdateDrainResponseBodySchemas,
  z.ZodTypeDef,
  unknown
> = z.object({
  log: z.lazy(() => UpdateDrainResponseBodyLog$inboundSchema).optional(),
  trace: z.lazy(() => UpdateDrainResponseBodyTrace$inboundSchema).optional(),
  analytics: z.lazy(() => UpdateDrainResponseBodyAnalytics$inboundSchema)
    .optional(),
  speed_insights: z.lazy(() =>
    UpdateDrainResponseBodySpeedInsights$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "speed_insights": "speedInsights",
  });
});

/** @internal */
export type UpdateDrainResponseBodySchemas$Outbound = {
  log?: UpdateDrainResponseBodyLog$Outbound | undefined;
  trace?: UpdateDrainResponseBodyTrace$Outbound | undefined;
  analytics?: UpdateDrainResponseBodyAnalytics$Outbound | undefined;
  speed_insights?: UpdateDrainResponseBodySpeedInsights$Outbound | undefined;
};

/** @internal */
export const UpdateDrainResponseBodySchemas$outboundSchema: z.ZodType<
  UpdateDrainResponseBodySchemas$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodySchemas
> = z.object({
  log: z.lazy(() => UpdateDrainResponseBodyLog$outboundSchema).optional(),
  trace: z.lazy(() => UpdateDrainResponseBodyTrace$outboundSchema).optional(),
  analytics: z.lazy(() => UpdateDrainResponseBodyAnalytics$outboundSchema)
    .optional(),
  speedInsights: z.lazy(() =>
    UpdateDrainResponseBodySpeedInsights$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    speedInsights: "speed_insights",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodySchemas$ {
  /** @deprecated use `UpdateDrainResponseBodySchemas$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodySchemas$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySchemas$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodySchemas$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySchemas$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodySchemas$Outbound;
}

export function updateDrainResponseBodySchemasToJSON(
  updateDrainResponseBodySchemas: UpdateDrainResponseBodySchemas,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodySchemas$outboundSchema.parse(
      updateDrainResponseBodySchemas,
    ),
  );
}

export function updateDrainResponseBodySchemasFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodySchemas, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodySchemas$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodySchemas' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONType
  > = z.nativeEnum(UpdateDrainDeliveryDrainsResponse200ApplicationJSONType);

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema:
  z.ZodNativeEnum<
    typeof UpdateDrainDeliveryDrainsResponse200ApplicationJSONType
  > = UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryTarget$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryTarget
> = z.nativeEnum(UpdateDrainDeliveryTarget);

/** @internal */
export const UpdateDrainDeliveryTarget$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryTarget
> = UpdateDrainDeliveryTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryTarget$ {
  /** @deprecated use `UpdateDrainDeliveryTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryTarget$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryTarget$outboundSchema;
}

/** @internal */
export const UpdateDrainDelivery5$inboundSchema: z.ZodType<
  UpdateDrainDelivery5,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$inboundSchema,
  target: UpdateDrainDeliveryTarget$inboundSchema,
});

/** @internal */
export type UpdateDrainDelivery5$Outbound = {
  type: string;
  target: string;
};

/** @internal */
export const UpdateDrainDelivery5$outboundSchema: z.ZodType<
  UpdateDrainDelivery5$Outbound,
  z.ZodTypeDef,
  UpdateDrainDelivery5
> = z.object({
  type: UpdateDrainDeliveryDrainsResponse200ApplicationJSONType$outboundSchema,
  target: UpdateDrainDeliveryTarget$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDelivery5$ {
  /** @deprecated use `UpdateDrainDelivery5$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDelivery5$inboundSchema;
  /** @deprecated use `UpdateDrainDelivery5$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDelivery5$outboundSchema;
  /** @deprecated use `UpdateDrainDelivery5$Outbound` instead. */
  export type Outbound = UpdateDrainDelivery5$Outbound;
}

export function updateDrainDelivery5ToJSON(
  updateDrainDelivery5: UpdateDrainDelivery5,
): string {
  return JSON.stringify(
    UpdateDrainDelivery5$outboundSchema.parse(updateDrainDelivery5),
  );
}

export function updateDrainDelivery5FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDelivery5, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDelivery5$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDelivery5' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200Type$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponse200Type> = z
    .nativeEnum(UpdateDrainDeliveryDrainsResponse200Type);

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200Type$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponse200Type> =
    UpdateDrainDeliveryDrainsResponse200Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200Type$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200Type$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200Type$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200Type$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200Type$outboundSchema;
}

/** @internal */
export const UpdateDrainDelivery4$inboundSchema: z.ZodType<
  UpdateDrainDelivery4,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainDeliveryDrainsResponse200Type$inboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/** @internal */
export type UpdateDrainDelivery4$Outbound = {
  type: string;
  endpoint: string;
  table: string;
};

/** @internal */
export const UpdateDrainDelivery4$outboundSchema: z.ZodType<
  UpdateDrainDelivery4$Outbound,
  z.ZodTypeDef,
  UpdateDrainDelivery4
> = z.object({
  type: UpdateDrainDeliveryDrainsResponse200Type$outboundSchema,
  endpoint: z.string(),
  table: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDelivery4$ {
  /** @deprecated use `UpdateDrainDelivery4$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDelivery4$inboundSchema;
  /** @deprecated use `UpdateDrainDelivery4$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDelivery4$outboundSchema;
  /** @deprecated use `UpdateDrainDelivery4$Outbound` instead. */
  export type Outbound = UpdateDrainDelivery4$Outbound;
}

export function updateDrainDelivery4ToJSON(
  updateDrainDelivery4: UpdateDrainDelivery4,
): string {
  return JSON.stringify(
    UpdateDrainDelivery4$outboundSchema.parse(updateDrainDelivery4),
  );
}

export function updateDrainDelivery4FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDelivery4, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDelivery4$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDelivery4' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponseType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponseType> = z.nativeEnum(
    UpdateDrainDeliveryDrainsResponseType,
  );

/** @internal */
export const UpdateDrainDeliveryDrainsResponseType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponseType> =
    UpdateDrainDeliveryDrainsResponseType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponseType$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponseType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponseType$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponseType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponseType$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrains3$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains3,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainDeliveryDrainsResponseType$inboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/** @internal */
export type UpdateDrainDeliveryDrains3$Outbound = {
  type: string;
  endpoint: string;
  secret: string;
};

/** @internal */
export const UpdateDrainDeliveryDrains3$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains3$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrains3
> = z.object({
  type: UpdateDrainDeliveryDrainsResponseType$outboundSchema,
  endpoint: z.string(),
  secret: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrains3$ {
  /** @deprecated use `UpdateDrainDeliveryDrains3$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrains3$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains3$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrains3$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains3$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrains3$Outbound;
}

export function updateDrainDeliveryDrains3ToJSON(
  updateDrainDeliveryDrains3: UpdateDrainDeliveryDrains3,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrains3$outboundSchema.parse(updateDrainDeliveryDrains3),
  );
}

export function updateDrainDeliveryDrains3FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrains3, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryDrains3$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrains3' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryDrainsType
> = z.nativeEnum(UpdateDrainDeliveryDrainsType);

/** @internal */
export const UpdateDrainDeliveryDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryDrainsType
> = UpdateDrainDeliveryDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsType$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsType$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrainsType$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsType$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrainsType$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryEndpoint$inboundSchema: z.ZodType<
  UpdateDrainDeliveryEndpoint,
  z.ZodTypeDef,
  unknown
> = z.object({
  traces: z.string(),
});

/** @internal */
export type UpdateDrainDeliveryEndpoint$Outbound = {
  traces: string;
};

/** @internal */
export const UpdateDrainDeliveryEndpoint$outboundSchema: z.ZodType<
  UpdateDrainDeliveryEndpoint$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryEndpoint
> = z.object({
  traces: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryEndpoint$ {
  /** @deprecated use `UpdateDrainDeliveryEndpoint$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryEndpoint$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryEndpoint$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryEndpoint$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryEndpoint$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryEndpoint$Outbound;
}

export function updateDrainDeliveryEndpointToJSON(
  updateDrainDeliveryEndpoint: UpdateDrainDeliveryEndpoint,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryEndpoint$outboundSchema.parse(
      updateDrainDeliveryEndpoint,
    ),
  );
}

export function updateDrainDeliveryEndpointFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryEndpoint, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryEndpoint$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryEndpoint' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200Encoding$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponse200Encoding> = z
    .nativeEnum(UpdateDrainDeliveryDrainsResponse200Encoding);

/** @internal */
export const UpdateDrainDeliveryDrainsResponse200Encoding$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponse200Encoding> =
    UpdateDrainDeliveryDrainsResponse200Encoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponse200Encoding$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200Encoding$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponse200Encoding$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponse200Encoding$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponse200Encoding$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrains2$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainDeliveryDrainsType$inboundSchema,
  endpoint: z.lazy(() => UpdateDrainDeliveryEndpoint$inboundSchema),
  encoding: UpdateDrainDeliveryDrainsResponse200Encoding$inboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type UpdateDrainDeliveryDrains2$Outbound = {
  type: string;
  endpoint: UpdateDrainDeliveryEndpoint$Outbound;
  encoding: string;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const UpdateDrainDeliveryDrains2$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains2$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrains2
> = z.object({
  type: UpdateDrainDeliveryDrainsType$outboundSchema,
  endpoint: z.lazy(() => UpdateDrainDeliveryEndpoint$outboundSchema),
  encoding: UpdateDrainDeliveryDrainsResponse200Encoding$outboundSchema,
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrains2$ {
  /** @deprecated use `UpdateDrainDeliveryDrains2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrains2$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrains2$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains2$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrains2$Outbound;
}

export function updateDrainDeliveryDrains2ToJSON(
  updateDrainDeliveryDrains2: UpdateDrainDeliveryDrains2,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrains2$outboundSchema.parse(updateDrainDeliveryDrains2),
  );
}

export function updateDrainDeliveryDrains2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrains2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainDeliveryType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryType
> = z.nativeEnum(UpdateDrainDeliveryType);

/** @internal */
export const UpdateDrainDeliveryType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryType
> = UpdateDrainDeliveryType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryType$ {
  /** @deprecated use `UpdateDrainDeliveryType$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryType$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryType$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryType$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrainsResponseEncoding$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponseEncoding> = z
    .nativeEnum(UpdateDrainDeliveryDrainsResponseEncoding);

/** @internal */
export const UpdateDrainDeliveryDrainsResponseEncoding$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainDeliveryDrainsResponseEncoding> =
    UpdateDrainDeliveryDrainsResponseEncoding$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrainsResponseEncoding$ {
  /** @deprecated use `UpdateDrainDeliveryDrainsResponseEncoding$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainDeliveryDrainsResponseEncoding$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrainsResponseEncoding$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainDeliveryDrainsResponseEncoding$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryCompression$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryCompression
> = z.nativeEnum(UpdateDrainDeliveryCompression);

/** @internal */
export const UpdateDrainDeliveryCompression$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainDeliveryCompression
> = UpdateDrainDeliveryCompression$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryCompression$ {
  /** @deprecated use `UpdateDrainDeliveryCompression$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryCompression$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryCompression$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryCompression$outboundSchema;
}

/** @internal */
export const UpdateDrainDeliveryDrains1$inboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainDeliveryType$inboundSchema,
  endpoint: z.string(),
  encoding: UpdateDrainDeliveryDrainsResponseEncoding$inboundSchema,
  compression: UpdateDrainDeliveryCompression$inboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/** @internal */
export type UpdateDrainDeliveryDrains1$Outbound = {
  type: string;
  endpoint: string;
  encoding: string;
  compression?: string | undefined;
  headers: { [k: string]: string };
  secret?: string | undefined;
};

/** @internal */
export const UpdateDrainDeliveryDrains1$outboundSchema: z.ZodType<
  UpdateDrainDeliveryDrains1$Outbound,
  z.ZodTypeDef,
  UpdateDrainDeliveryDrains1
> = z.object({
  type: UpdateDrainDeliveryType$outboundSchema,
  endpoint: z.string(),
  encoding: UpdateDrainDeliveryDrainsResponseEncoding$outboundSchema,
  compression: UpdateDrainDeliveryCompression$outboundSchema.optional(),
  headers: z.record(z.string()),
  secret: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainDeliveryDrains1$ {
  /** @deprecated use `UpdateDrainDeliveryDrains1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainDeliveryDrains1$inboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainDeliveryDrains1$outboundSchema;
  /** @deprecated use `UpdateDrainDeliveryDrains1$Outbound` instead. */
  export type Outbound = UpdateDrainDeliveryDrains1$Outbound;
}

export function updateDrainDeliveryDrains1ToJSON(
  updateDrainDeliveryDrains1: UpdateDrainDeliveryDrains1,
): string {
  return JSON.stringify(
    UpdateDrainDeliveryDrains1$outboundSchema.parse(updateDrainDeliveryDrains1),
  );
}

export function updateDrainDeliveryDrains1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainDeliveryDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainDeliveryDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainDeliveryDrains1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyDelivery$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyDelivery,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainDeliveryDrains1$inboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains2$inboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains3$inboundSchema),
  z.lazy(() => UpdateDrainDelivery4$inboundSchema),
  z.lazy(() => UpdateDrainDelivery5$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBodyDelivery$Outbound =
  | UpdateDrainDeliveryDrains1$Outbound
  | UpdateDrainDeliveryDrains2$Outbound
  | UpdateDrainDeliveryDrains3$Outbound
  | UpdateDrainDelivery4$Outbound
  | UpdateDrainDelivery5$Outbound;

/** @internal */
export const UpdateDrainResponseBodyDelivery$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyDelivery$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyDelivery
> = z.union([
  z.lazy(() => UpdateDrainDeliveryDrains1$outboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains2$outboundSchema),
  z.lazy(() => UpdateDrainDeliveryDrains3$outboundSchema),
  z.lazy(() => UpdateDrainDelivery4$outboundSchema),
  z.lazy(() => UpdateDrainDelivery5$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDelivery$ {
  /** @deprecated use `UpdateDrainResponseBodyDelivery$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyDelivery$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDelivery$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyDelivery$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDelivery$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyDelivery$Outbound;
}

export function updateDrainResponseBodyDeliveryToJSON(
  updateDrainResponseBodyDelivery: UpdateDrainResponseBodyDelivery,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyDelivery$outboundSchema.parse(
      updateDrainResponseBodyDelivery,
    ),
  );
}

export function updateDrainResponseBodyDeliveryFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyDelivery, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodyDelivery$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyDelivery' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyType
> = z.nativeEnum(UpdateDrainResponseBodyType);

/** @internal */
export const UpdateDrainResponseBodyType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyType
> = UpdateDrainResponseBodyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyType$ {
  /** @deprecated use `UpdateDrainResponseBodyType$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyType$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyType$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyType$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyEnv$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyEnv
> = z.nativeEnum(UpdateDrainResponseBodyEnv);

/** @internal */
export const UpdateDrainResponseBodyEnv$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyEnv
> = UpdateDrainResponseBodyEnv$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyEnv$ {
  /** @deprecated use `UpdateDrainResponseBodyEnv$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyEnv$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyEnv$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyEnv$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodySampling$inboundSchema: z.ZodType<
  UpdateDrainResponseBodySampling,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainResponseBodyType$inboundSchema,
  rate: z.number(),
  env: UpdateDrainResponseBodyEnv$inboundSchema.optional(),
  requestPath: z.string().optional(),
});

/** @internal */
export type UpdateDrainResponseBodySampling$Outbound = {
  type: string;
  rate: number;
  env?: string | undefined;
  requestPath?: string | undefined;
};

/** @internal */
export const UpdateDrainResponseBodySampling$outboundSchema: z.ZodType<
  UpdateDrainResponseBodySampling$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodySampling
> = z.object({
  type: UpdateDrainResponseBodyType$outboundSchema,
  rate: z.number(),
  env: UpdateDrainResponseBodyEnv$outboundSchema.optional(),
  requestPath: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodySampling$ {
  /** @deprecated use `UpdateDrainResponseBodySampling$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodySampling$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySampling$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodySampling$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySampling$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodySampling$Outbound;
}

export function updateDrainResponseBodySamplingToJSON(
  updateDrainResponseBodySampling: UpdateDrainResponseBodySampling,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodySampling$outboundSchema.parse(
      updateDrainResponseBodySampling,
    ),
  );
}

export function updateDrainResponseBodySamplingFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodySampling, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodySampling$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodySampling' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyStatus
> = z.nativeEnum(UpdateDrainResponseBodyStatus);

/** @internal */
export const UpdateDrainResponseBodyStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainResponseBodyStatus
> = UpdateDrainResponseBodyStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyStatus$ {
  /** @deprecated use `UpdateDrainResponseBodyStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyStatus$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyStatus$outboundSchema;
}

/** @internal */
export const UpdateDrainResponseBodyDisabledReason$inboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDisabledReason> = z.nativeEnum(
    UpdateDrainResponseBodyDisabledReason,
  );

/** @internal */
export const UpdateDrainResponseBodyDisabledReason$outboundSchema:
  z.ZodNativeEnum<typeof UpdateDrainResponseBodyDisabledReason> =
    UpdateDrainResponseBodyDisabledReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyDisabledReason$ {
  /** @deprecated use `UpdateDrainResponseBodyDisabledReason$inboundSchema` instead. */
  export const inboundSchema =
    UpdateDrainResponseBodyDisabledReason$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyDisabledReason$outboundSchema` instead. */
  export const outboundSchema =
    UpdateDrainResponseBodyDisabledReason$outboundSchema;
}

/** @internal */
export const UpdateDrainSourceDrainsKind$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainSourceDrainsKind
> = z.nativeEnum(UpdateDrainSourceDrainsKind);

/** @internal */
export const UpdateDrainSourceDrainsKind$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainSourceDrainsKind
> = UpdateDrainSourceDrainsKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrainsKind$ {
  /** @deprecated use `UpdateDrainSourceDrainsKind$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSourceDrainsKind$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrainsKind$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSourceDrainsKind$outboundSchema;
}

/** @internal */
export const UpdateDrainSourceDrains2$inboundSchema: z.ZodType<
  UpdateDrainSourceDrains2,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: UpdateDrainSourceDrainsKind$inboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/** @internal */
export type UpdateDrainSourceDrains2$Outbound = {
  kind: string;
  resourceId?: string | undefined;
  externalResourceId?: string | undefined;
  integrationId: string;
  integrationConfigurationId: string;
};

/** @internal */
export const UpdateDrainSourceDrains2$outboundSchema: z.ZodType<
  UpdateDrainSourceDrains2$Outbound,
  z.ZodTypeDef,
  UpdateDrainSourceDrains2
> = z.object({
  kind: UpdateDrainSourceDrainsKind$outboundSchema,
  resourceId: z.string().optional(),
  externalResourceId: z.string().optional(),
  integrationId: z.string(),
  integrationConfigurationId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrains2$ {
  /** @deprecated use `UpdateDrainSourceDrains2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSourceDrains2$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrains2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSourceDrains2$outboundSchema;
  /** @deprecated use `UpdateDrainSourceDrains2$Outbound` instead. */
  export type Outbound = UpdateDrainSourceDrains2$Outbound;
}

export function updateDrainSourceDrains2ToJSON(
  updateDrainSourceDrains2: UpdateDrainSourceDrains2,
): string {
  return JSON.stringify(
    UpdateDrainSourceDrains2$outboundSchema.parse(updateDrainSourceDrains2),
  );
}

export function updateDrainSourceDrains2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSourceDrains2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSourceDrains2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSourceDrains2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainSourceKind$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainSourceKind
> = z.nativeEnum(UpdateDrainSourceKind);

/** @internal */
export const UpdateDrainSourceKind$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainSourceKind
> = UpdateDrainSourceKind$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceKind$ {
  /** @deprecated use `UpdateDrainSourceKind$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSourceKind$inboundSchema;
  /** @deprecated use `UpdateDrainSourceKind$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSourceKind$outboundSchema;
}

/** @internal */
export const UpdateDrainSourceDrains1$inboundSchema: z.ZodType<
  UpdateDrainSourceDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  kind: UpdateDrainSourceKind$inboundSchema,
});

/** @internal */
export type UpdateDrainSourceDrains1$Outbound = {
  kind: string;
};

/** @internal */
export const UpdateDrainSourceDrains1$outboundSchema: z.ZodType<
  UpdateDrainSourceDrains1$Outbound,
  z.ZodTypeDef,
  UpdateDrainSourceDrains1
> = z.object({
  kind: UpdateDrainSourceKind$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainSourceDrains1$ {
  /** @deprecated use `UpdateDrainSourceDrains1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainSourceDrains1$inboundSchema;
  /** @deprecated use `UpdateDrainSourceDrains1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainSourceDrains1$outboundSchema;
  /** @deprecated use `UpdateDrainSourceDrains1$Outbound` instead. */
  export type Outbound = UpdateDrainSourceDrains1$Outbound;
}

export function updateDrainSourceDrains1ToJSON(
  updateDrainSourceDrains1: UpdateDrainSourceDrains1,
): string {
  return JSON.stringify(
    UpdateDrainSourceDrains1$outboundSchema.parse(updateDrainSourceDrains1),
  );
}

export function updateDrainSourceDrains1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainSourceDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainSourceDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainSourceDrains1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodySource$inboundSchema: z.ZodType<
  UpdateDrainResponseBodySource,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainSourceDrains2$inboundSchema),
  z.lazy(() => UpdateDrainSourceDrains1$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBodySource$Outbound =
  | UpdateDrainSourceDrains2$Outbound
  | UpdateDrainSourceDrains1$Outbound;

/** @internal */
export const UpdateDrainResponseBodySource$outboundSchema: z.ZodType<
  UpdateDrainResponseBodySource$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodySource
> = z.union([
  z.lazy(() => UpdateDrainSourceDrains2$outboundSchema),
  z.lazy(() => UpdateDrainSourceDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodySource$ {
  /** @deprecated use `UpdateDrainResponseBodySource$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodySource$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySource$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodySource$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodySource$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodySource$Outbound;
}

export function updateDrainResponseBodySourceToJSON(
  updateDrainResponseBodySource: UpdateDrainResponseBodySource,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodySource$outboundSchema.parse(
      updateDrainResponseBodySource,
    ),
  );
}

export function updateDrainResponseBodySourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodySource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodySource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodySource' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2DrainsVersion$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterV2DrainsVersion
> = z.nativeEnum(UpdateDrainFilterV2DrainsVersion);

/** @internal */
export const UpdateDrainFilterV2DrainsVersion$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterV2DrainsVersion
> = UpdateDrainFilterV2DrainsVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2DrainsVersion$ {
  /** @deprecated use `UpdateDrainFilterV2DrainsVersion$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV2DrainsVersion$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2DrainsVersion$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV2DrainsVersion$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterDrainsType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterDrainsType
> = z.nativeEnum(UpdateDrainFilterDrainsType);

/** @internal */
export const UpdateDrainFilterDrainsType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterDrainsType
> = UpdateDrainFilterDrainsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsType$ {
  /** @deprecated use `UpdateDrainFilterDrainsType$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrainsType$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsType$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrainsType$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterDrainsResponse2$inboundSchema: z.ZodType<
  UpdateDrainFilterDrainsResponse2,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainFilterDrainsType$inboundSchema,
  text: z.string(),
});

/** @internal */
export type UpdateDrainFilterDrainsResponse2$Outbound = {
  type: string;
  text: string;
};

/** @internal */
export const UpdateDrainFilterDrainsResponse2$outboundSchema: z.ZodType<
  UpdateDrainFilterDrainsResponse2$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrainsResponse2
> = z.object({
  type: UpdateDrainFilterDrainsType$outboundSchema,
  text: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrainsResponse2$ {
  /** @deprecated use `UpdateDrainFilterDrainsResponse2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrainsResponse2$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrainsResponse2$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrainsResponse2$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrainsResponse2$Outbound;
}

export function updateDrainFilterDrainsResponse2ToJSON(
  updateDrainFilterDrainsResponse2: UpdateDrainFilterDrainsResponse2,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrainsResponse2$outboundSchema.parse(
      updateDrainFilterDrainsResponse2,
    ),
  );
}

export function updateDrainFilterDrainsResponse2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrainsResponse2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrainsResponse2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrainsResponse2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterType
> = z.nativeEnum(UpdateDrainFilterType);

/** @internal */
export const UpdateDrainFilterType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterType
> = UpdateDrainFilterType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterType$ {
  /** @deprecated use `UpdateDrainFilterType$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterType$inboundSchema;
  /** @deprecated use `UpdateDrainFilterType$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterType$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterProject$inboundSchema: z.ZodType<
  UpdateDrainFilterProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  ids: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateDrainFilterProject$Outbound = {
  ids?: Array<string> | undefined;
};

/** @internal */
export const UpdateDrainFilterProject$outboundSchema: z.ZodType<
  UpdateDrainFilterProject$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterProject
> = z.object({
  ids: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterProject$ {
  /** @deprecated use `UpdateDrainFilterProject$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterProject$inboundSchema;
  /** @deprecated use `UpdateDrainFilterProject$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterProject$outboundSchema;
  /** @deprecated use `UpdateDrainFilterProject$Outbound` instead. */
  export type Outbound = UpdateDrainFilterProject$Outbound;
}

export function updateDrainFilterProjectToJSON(
  updateDrainFilterProject: UpdateDrainFilterProject,
): string {
  return JSON.stringify(
    UpdateDrainFilterProject$outboundSchema.parse(updateDrainFilterProject),
  );
}

export function updateDrainFilterProjectFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterProject, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterProject$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterProject' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterLog$inboundSchema: z.ZodType<
  UpdateDrainFilterLog,
  z.ZodTypeDef,
  unknown
> = z.object({
  sources: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateDrainFilterLog$Outbound = {
  sources?: Array<string> | undefined;
};

/** @internal */
export const UpdateDrainFilterLog$outboundSchema: z.ZodType<
  UpdateDrainFilterLog$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterLog
> = z.object({
  sources: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterLog$ {
  /** @deprecated use `UpdateDrainFilterLog$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterLog$inboundSchema;
  /** @deprecated use `UpdateDrainFilterLog$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterLog$outboundSchema;
  /** @deprecated use `UpdateDrainFilterLog$Outbound` instead. */
  export type Outbound = UpdateDrainFilterLog$Outbound;
}

export function updateDrainFilterLogToJSON(
  updateDrainFilterLog: UpdateDrainFilterLog,
): string {
  return JSON.stringify(
    UpdateDrainFilterLog$outboundSchema.parse(updateDrainFilterLog),
  );
}

export function updateDrainFilterLogFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterLog, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterLog$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterLog' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterDeployment$inboundSchema: z.ZodType<
  UpdateDrainFilterDeployment,
  z.ZodTypeDef,
  unknown
> = z.object({
  environments: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateDrainFilterDeployment$Outbound = {
  environments?: Array<string> | undefined;
};

/** @internal */
export const UpdateDrainFilterDeployment$outboundSchema: z.ZodType<
  UpdateDrainFilterDeployment$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDeployment
> = z.object({
  environments: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDeployment$ {
  /** @deprecated use `UpdateDrainFilterDeployment$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDeployment$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDeployment$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDeployment$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDeployment$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDeployment$Outbound;
}

export function updateDrainFilterDeploymentToJSON(
  updateDrainFilterDeployment: UpdateDrainFilterDeployment,
): string {
  return JSON.stringify(
    UpdateDrainFilterDeployment$outboundSchema.parse(
      updateDrainFilterDeployment,
    ),
  );
}

export function updateDrainFilterDeploymentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDeployment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDeployment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDeployment' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterDrains1$inboundSchema: z.ZodType<
  UpdateDrainFilterDrains1,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: UpdateDrainFilterType$inboundSchema,
  project: z.lazy(() => UpdateDrainFilterProject$inboundSchema).optional(),
  log: z.lazy(() => UpdateDrainFilterLog$inboundSchema).optional(),
  deployment: z.lazy(() => UpdateDrainFilterDeployment$inboundSchema)
    .optional(),
});

/** @internal */
export type UpdateDrainFilterDrains1$Outbound = {
  type: string;
  project?: UpdateDrainFilterProject$Outbound | undefined;
  log?: UpdateDrainFilterLog$Outbound | undefined;
  deployment?: UpdateDrainFilterDeployment$Outbound | undefined;
};

/** @internal */
export const UpdateDrainFilterDrains1$outboundSchema: z.ZodType<
  UpdateDrainFilterDrains1$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterDrains1
> = z.object({
  type: UpdateDrainFilterType$outboundSchema,
  project: z.lazy(() => UpdateDrainFilterProject$outboundSchema).optional(),
  log: z.lazy(() => UpdateDrainFilterLog$outboundSchema).optional(),
  deployment: z.lazy(() => UpdateDrainFilterDeployment$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterDrains1$ {
  /** @deprecated use `UpdateDrainFilterDrains1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterDrains1$inboundSchema;
  /** @deprecated use `UpdateDrainFilterDrains1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterDrains1$outboundSchema;
  /** @deprecated use `UpdateDrainFilterDrains1$Outbound` instead. */
  export type Outbound = UpdateDrainFilterDrains1$Outbound;
}

export function updateDrainFilterDrains1ToJSON(
  updateDrainFilterDrains1: UpdateDrainFilterDrains1,
): string {
  return JSON.stringify(
    UpdateDrainFilterDrains1$outboundSchema.parse(updateDrainFilterDrains1),
  );
}

export function updateDrainFilterDrains1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterDrains1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterDrains1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterDrains1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2Filter$inboundSchema: z.ZodType<
  UpdateDrainFilterV2Filter,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainFilterDrainsResponse2$inboundSchema),
  z.lazy(() => UpdateDrainFilterDrains1$inboundSchema),
]);

/** @internal */
export type UpdateDrainFilterV2Filter$Outbound =
  | UpdateDrainFilterDrainsResponse2$Outbound
  | UpdateDrainFilterDrains1$Outbound;

/** @internal */
export const UpdateDrainFilterV2Filter$outboundSchema: z.ZodType<
  UpdateDrainFilterV2Filter$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterV2Filter
> = z.union([
  z.lazy(() => UpdateDrainFilterDrainsResponse2$outboundSchema),
  z.lazy(() => UpdateDrainFilterDrains1$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2Filter$ {
  /** @deprecated use `UpdateDrainFilterV2Filter$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV2Filter$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Filter$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV2Filter$outboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Filter$Outbound` instead. */
  export type Outbound = UpdateDrainFilterV2Filter$Outbound;
}

export function updateDrainFilterV2FilterToJSON(
  updateDrainFilterV2Filter: UpdateDrainFilterV2Filter,
): string {
  return JSON.stringify(
    UpdateDrainFilterV2Filter$outboundSchema.parse(updateDrainFilterV2Filter),
  );
}

export function updateDrainFilterV2FilterFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterV2Filter, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterV2Filter$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterV2Filter' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV22$inboundSchema: z.ZodType<
  UpdateDrainFilterV22,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: UpdateDrainFilterV2DrainsVersion$inboundSchema,
  filter: z.union([
    z.lazy(() => UpdateDrainFilterDrainsResponse2$inboundSchema),
    z.lazy(() => UpdateDrainFilterDrains1$inboundSchema),
  ]),
});

/** @internal */
export type UpdateDrainFilterV22$Outbound = {
  version: string;
  filter:
    | UpdateDrainFilterDrainsResponse2$Outbound
    | UpdateDrainFilterDrains1$Outbound;
};

/** @internal */
export const UpdateDrainFilterV22$outboundSchema: z.ZodType<
  UpdateDrainFilterV22$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterV22
> = z.object({
  version: UpdateDrainFilterV2DrainsVersion$outboundSchema,
  filter: z.union([
    z.lazy(() => UpdateDrainFilterDrainsResponse2$outboundSchema),
    z.lazy(() => UpdateDrainFilterDrains1$outboundSchema),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV22$ {
  /** @deprecated use `UpdateDrainFilterV22$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV22$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV22$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV22$outboundSchema;
  /** @deprecated use `UpdateDrainFilterV22$Outbound` instead. */
  export type Outbound = UpdateDrainFilterV22$Outbound;
}

export function updateDrainFilterV22ToJSON(
  updateDrainFilterV22: UpdateDrainFilterV22,
): string {
  return JSON.stringify(
    UpdateDrainFilterV22$outboundSchema.parse(updateDrainFilterV22),
  );
}

export function updateDrainFilterV22FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterV22, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterV22$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterV22' from JSON`,
  );
}

/** @internal */
export const UpdateDrainFilterV2Version$inboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterV2Version
> = z.nativeEnum(UpdateDrainFilterV2Version);

/** @internal */
export const UpdateDrainFilterV2Version$outboundSchema: z.ZodNativeEnum<
  typeof UpdateDrainFilterV2Version
> = UpdateDrainFilterV2Version$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV2Version$ {
  /** @deprecated use `UpdateDrainFilterV2Version$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV2Version$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV2Version$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV2Version$outboundSchema;
}

/** @internal */
export const UpdateDrainFilterV21$inboundSchema: z.ZodType<
  UpdateDrainFilterV21,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: UpdateDrainFilterV2Version$inboundSchema,
});

/** @internal */
export type UpdateDrainFilterV21$Outbound = {
  version: string;
};

/** @internal */
export const UpdateDrainFilterV21$outboundSchema: z.ZodType<
  UpdateDrainFilterV21$Outbound,
  z.ZodTypeDef,
  UpdateDrainFilterV21
> = z.object({
  version: UpdateDrainFilterV2Version$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainFilterV21$ {
  /** @deprecated use `UpdateDrainFilterV21$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainFilterV21$inboundSchema;
  /** @deprecated use `UpdateDrainFilterV21$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainFilterV21$outboundSchema;
  /** @deprecated use `UpdateDrainFilterV21$Outbound` instead. */
  export type Outbound = UpdateDrainFilterV21$Outbound;
}

export function updateDrainFilterV21ToJSON(
  updateDrainFilterV21: UpdateDrainFilterV21,
): string {
  return JSON.stringify(
    UpdateDrainFilterV21$outboundSchema.parse(updateDrainFilterV21),
  );
}

export function updateDrainFilterV21FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainFilterV21, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainFilterV21$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainFilterV21' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBodyFilterV2$inboundSchema: z.ZodType<
  UpdateDrainResponseBodyFilterV2,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainFilterV22$inboundSchema),
  z.lazy(() => UpdateDrainFilterV21$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBodyFilterV2$Outbound =
  | UpdateDrainFilterV22$Outbound
  | UpdateDrainFilterV21$Outbound;

/** @internal */
export const UpdateDrainResponseBodyFilterV2$outboundSchema: z.ZodType<
  UpdateDrainResponseBodyFilterV2$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBodyFilterV2
> = z.union([
  z.lazy(() => UpdateDrainFilterV22$outboundSchema),
  z.lazy(() => UpdateDrainFilterV21$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBodyFilterV2$ {
  /** @deprecated use `UpdateDrainResponseBodyFilterV2$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBodyFilterV2$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyFilterV2$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBodyFilterV2$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBodyFilterV2$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBodyFilterV2$Outbound;
}

export function updateDrainResponseBodyFilterV2ToJSON(
  updateDrainResponseBodyFilterV2: UpdateDrainResponseBodyFilterV2,
): string {
  return JSON.stringify(
    UpdateDrainResponseBodyFilterV2$outboundSchema.parse(
      updateDrainResponseBodyFilterV2,
    ),
  );
}

export function updateDrainResponseBodyFilterV2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBodyFilterV2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBodyFilterV2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBodyFilterV2' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBody1$inboundSchema: z.ZodType<
  UpdateDrainResponseBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: UpdateDrainResponseBodyCreatedFrom$inboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => UpdateDrainResponseBodySchemas$inboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => UpdateDrainDeliveryDrains1$inboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains2$inboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains3$inboundSchema),
    z.lazy(() => UpdateDrainDelivery4$inboundSchema),
    z.lazy(() => UpdateDrainDelivery5$inboundSchema),
  ]).optional(),
  sampling: z.array(z.lazy(() => UpdateDrainResponseBodySampling$inboundSchema))
    .optional(),
  teamId: z.nullable(z.string()).optional(),
  status: UpdateDrainResponseBodyStatus$inboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: UpdateDrainResponseBodyDisabledReason$inboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => UpdateDrainSourceDrains2$inboundSchema),
    z.lazy(() => UpdateDrainSourceDrains1$inboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => UpdateDrainFilterV22$inboundSchema),
    z.lazy(() => UpdateDrainFilterV21$inboundSchema),
  ]).optional(),
});

/** @internal */
export type UpdateDrainResponseBody1$Outbound = {
  id: string;
  ownerId: string;
  name: string;
  createdAt: number;
  createdFrom?: string | undefined;
  updatedAt: number;
  projectIds?: Array<string> | undefined;
  schemas?: UpdateDrainResponseBodySchemas$Outbound | undefined;
  delivery?:
    | UpdateDrainDeliveryDrains1$Outbound
    | UpdateDrainDeliveryDrains2$Outbound
    | UpdateDrainDeliveryDrains3$Outbound
    | UpdateDrainDelivery4$Outbound
    | UpdateDrainDelivery5$Outbound
    | undefined;
  sampling?: Array<UpdateDrainResponseBodySampling$Outbound> | undefined;
  teamId?: string | null | undefined;
  status?: string | undefined;
  disabledAt?: number | undefined;
  disabledReason?: string | undefined;
  disabledBy?: string | undefined;
  firstErrorTimestamp?: number | undefined;
  configurationId?: string | undefined;
  clientId?: string | undefined;
  source: UpdateDrainSourceDrains2$Outbound | UpdateDrainSourceDrains1$Outbound;
  filter?: string | undefined;
  filterV2?:
    | UpdateDrainFilterV22$Outbound
    | UpdateDrainFilterV21$Outbound
    | undefined;
};

/** @internal */
export const UpdateDrainResponseBody1$outboundSchema: z.ZodType<
  UpdateDrainResponseBody1$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBody1
> = z.object({
  id: z.string(),
  ownerId: z.string(),
  name: z.string(),
  createdAt: z.number(),
  createdFrom: UpdateDrainResponseBodyCreatedFrom$outboundSchema.optional(),
  updatedAt: z.number(),
  projectIds: z.array(z.string()).optional(),
  schemas: z.lazy(() => UpdateDrainResponseBodySchemas$outboundSchema)
    .optional(),
  delivery: z.union([
    z.lazy(() => UpdateDrainDeliveryDrains1$outboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains2$outboundSchema),
    z.lazy(() => UpdateDrainDeliveryDrains3$outboundSchema),
    z.lazy(() => UpdateDrainDelivery4$outboundSchema),
    z.lazy(() => UpdateDrainDelivery5$outboundSchema),
  ]).optional(),
  sampling: z.array(
    z.lazy(() => UpdateDrainResponseBodySampling$outboundSchema),
  ).optional(),
  teamId: z.nullable(z.string()).optional(),
  status: UpdateDrainResponseBodyStatus$outboundSchema.optional(),
  disabledAt: z.number().optional(),
  disabledReason: UpdateDrainResponseBodyDisabledReason$outboundSchema
    .optional(),
  disabledBy: z.string().optional(),
  firstErrorTimestamp: z.number().optional(),
  configurationId: z.string().optional(),
  clientId: z.string().optional(),
  source: z.union([
    z.lazy(() => UpdateDrainSourceDrains2$outboundSchema),
    z.lazy(() => UpdateDrainSourceDrains1$outboundSchema),
  ]),
  filter: z.string().optional(),
  filterV2: z.union([
    z.lazy(() => UpdateDrainFilterV22$outboundSchema),
    z.lazy(() => UpdateDrainFilterV21$outboundSchema),
  ]).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBody1$ {
  /** @deprecated use `UpdateDrainResponseBody1$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBody1$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBody1$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBody1$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBody1$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBody1$Outbound;
}

export function updateDrainResponseBody1ToJSON(
  updateDrainResponseBody1: UpdateDrainResponseBody1,
): string {
  return JSON.stringify(
    UpdateDrainResponseBody1$outboundSchema.parse(updateDrainResponseBody1),
  );
}

export function updateDrainResponseBody1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBody1' from JSON`,
  );
}

/** @internal */
export const UpdateDrainResponseBody$inboundSchema: z.ZodType<
  UpdateDrainResponseBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateDrainResponseBody1$inboundSchema),
  z.lazy(() => UpdateDrainResponseBody2$inboundSchema),
]);

/** @internal */
export type UpdateDrainResponseBody$Outbound =
  | UpdateDrainResponseBody1$Outbound
  | UpdateDrainResponseBody2$Outbound;

/** @internal */
export const UpdateDrainResponseBody$outboundSchema: z.ZodType<
  UpdateDrainResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateDrainResponseBody
> = z.union([
  z.lazy(() => UpdateDrainResponseBody1$outboundSchema),
  z.lazy(() => UpdateDrainResponseBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateDrainResponseBody$ {
  /** @deprecated use `UpdateDrainResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateDrainResponseBody$inboundSchema;
  /** @deprecated use `UpdateDrainResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateDrainResponseBody$outboundSchema;
  /** @deprecated use `UpdateDrainResponseBody$Outbound` instead. */
  export type Outbound = UpdateDrainResponseBody$Outbound;
}

export function updateDrainResponseBodyToJSON(
  updateDrainResponseBody: UpdateDrainResponseBody,
): string {
  return JSON.stringify(
    UpdateDrainResponseBody$outboundSchema.parse(updateDrainResponseBody),
  );
}

export function updateDrainResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateDrainResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateDrainResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateDrainResponseBody' from JSON`,
  );
}
