/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UpdateInstallationType = {
  Prepayment: "prepayment",
  Subscription: "subscription",
} as const;
export type UpdateInstallationType = ClosedEnum<typeof UpdateInstallationType>;

export type Details = {
  label: string;
  value?: string | undefined;
};

export type HighlightedDetails = {
  label: string;
  value?: string | undefined;
};

export type BillingPlan = {
  id: string;
  type: UpdateInstallationType;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<Details> | undefined;
  highlightedDetails?: Array<HighlightedDetails> | undefined;
  effectiveDate?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export const Level = {
  Info: "info",
  Warn: "warn",
  Error: "error",
} as const;
export type Level = ClosedEnum<typeof Level>;

export type Notification = {
  level: Level;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

export type UpdateInstallationRequestBody = {
  billingPlan?: BillingPlan | undefined;
  notification?: Notification | undefined;
};

export type UpdateInstallationRequest = {
  integrationConfigurationId: string;
  requestBody?: UpdateInstallationRequestBody | undefined;
};

/** @internal */
export const UpdateInstallationType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationType
> = z.nativeEnum(UpdateInstallationType);

/** @internal */
export const UpdateInstallationType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateInstallationType
> = UpdateInstallationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationType$ {
  /** @deprecated use `UpdateInstallationType$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationType$inboundSchema;
  /** @deprecated use `UpdateInstallationType$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationType$outboundSchema;
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    label: z.string(),
    value: z.string().optional(),
  });

/** @internal */
export type Details$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const HighlightedDetails$inboundSchema: z.ZodType<
  HighlightedDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type HighlightedDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const HighlightedDetails$outboundSchema: z.ZodType<
  HighlightedDetails$Outbound,
  z.ZodTypeDef,
  HighlightedDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HighlightedDetails$ {
  /** @deprecated use `HighlightedDetails$inboundSchema` instead. */
  export const inboundSchema = HighlightedDetails$inboundSchema;
  /** @deprecated use `HighlightedDetails$outboundSchema` instead. */
  export const outboundSchema = HighlightedDetails$outboundSchema;
  /** @deprecated use `HighlightedDetails$Outbound` instead. */
  export type Outbound = HighlightedDetails$Outbound;
}

export function highlightedDetailsToJSON(
  highlightedDetails: HighlightedDetails,
): string {
  return JSON.stringify(
    HighlightedDetails$outboundSchema.parse(highlightedDetails),
  );
}

export function highlightedDetailsFromJSON(
  jsonString: string,
): SafeParseResult<HighlightedDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => HighlightedDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'HighlightedDetails' from JSON`,
  );
}

/** @internal */
export const BillingPlan$inboundSchema: z.ZodType<
  BillingPlan,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    type: UpdateInstallationType$inboundSchema,
    name: z.string(),
    description: z.string().optional(),
    paymentMethodRequired: z.boolean().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => Details$inboundSchema)).optional(),
    highlightedDetails: z.array(z.lazy(() => HighlightedDetails$inboundSchema))
      .optional(),
    effectiveDate: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type BillingPlan$Outbound = {
  id: string;
  type: string;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<Details$Outbound> | undefined;
  highlightedDetails?: Array<HighlightedDetails$Outbound> | undefined;
  effectiveDate?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const BillingPlan$outboundSchema: z.ZodType<
  BillingPlan$Outbound,
  z.ZodTypeDef,
  BillingPlan
> = z.object({
  id: z.string(),
  type: UpdateInstallationType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  paymentMethodRequired: z.boolean().optional(),
  cost: z.string().optional(),
  details: z.array(z.lazy(() => Details$outboundSchema)).optional(),
  highlightedDetails: z.array(z.lazy(() => HighlightedDetails$outboundSchema))
    .optional(),
  effectiveDate: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BillingPlan$ {
  /** @deprecated use `BillingPlan$inboundSchema` instead. */
  export const inboundSchema = BillingPlan$inboundSchema;
  /** @deprecated use `BillingPlan$outboundSchema` instead. */
  export const outboundSchema = BillingPlan$outboundSchema;
  /** @deprecated use `BillingPlan$Outbound` instead. */
  export type Outbound = BillingPlan$Outbound;
}

export function billingPlanToJSON(billingPlan: BillingPlan): string {
  return JSON.stringify(BillingPlan$outboundSchema.parse(billingPlan));
}

export function billingPlanFromJSON(
  jsonString: string,
): SafeParseResult<BillingPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BillingPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BillingPlan' from JSON`,
  );
}

/** @internal */
export const Level$inboundSchema: z.ZodNativeEnum<typeof Level> = z.nativeEnum(
  Level,
);

/** @internal */
export const Level$outboundSchema: z.ZodNativeEnum<typeof Level> =
  Level$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Level$ {
  /** @deprecated use `Level$inboundSchema` instead. */
  export const inboundSchema = Level$inboundSchema;
  /** @deprecated use `Level$outboundSchema` instead. */
  export const outboundSchema = Level$outboundSchema;
}

/** @internal */
export const Notification$inboundSchema: z.ZodType<
  Notification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: Level$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type Notification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const Notification$outboundSchema: z.ZodType<
  Notification$Outbound,
  z.ZodTypeDef,
  Notification
> = z.object({
  level: Level$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Notification$ {
  /** @deprecated use `Notification$inboundSchema` instead. */
  export const inboundSchema = Notification$inboundSchema;
  /** @deprecated use `Notification$outboundSchema` instead. */
  export const outboundSchema = Notification$outboundSchema;
  /** @deprecated use `Notification$Outbound` instead. */
  export type Outbound = Notification$Outbound;
}

export function notificationToJSON(notification: Notification): string {
  return JSON.stringify(Notification$outboundSchema.parse(notification));
}

export function notificationFromJSON(
  jsonString: string,
): SafeParseResult<Notification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Notification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Notification' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationRequestBody$inboundSchema: z.ZodType<
  UpdateInstallationRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  billingPlan: z.lazy(() => BillingPlan$inboundSchema).optional(),
  notification: z.lazy(() => Notification$inboundSchema).optional(),
});

/** @internal */
export type UpdateInstallationRequestBody$Outbound = {
  billingPlan?: BillingPlan$Outbound | undefined;
  notification?: Notification$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationRequestBody$outboundSchema: z.ZodType<
  UpdateInstallationRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateInstallationRequestBody
> = z.object({
  billingPlan: z.lazy(() => BillingPlan$outboundSchema).optional(),
  notification: z.lazy(() => Notification$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationRequestBody$ {
  /** @deprecated use `UpdateInstallationRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationRequestBody$inboundSchema;
  /** @deprecated use `UpdateInstallationRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationRequestBody$outboundSchema;
  /** @deprecated use `UpdateInstallationRequestBody$Outbound` instead. */
  export type Outbound = UpdateInstallationRequestBody$Outbound;
}

export function updateInstallationRequestBodyToJSON(
  updateInstallationRequestBody: UpdateInstallationRequestBody,
): string {
  return JSON.stringify(
    UpdateInstallationRequestBody$outboundSchema.parse(
      updateInstallationRequestBody,
    ),
  );
}

export function updateInstallationRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateInstallationRequest$inboundSchema: z.ZodType<
  UpdateInstallationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  RequestBody: z.lazy(() => UpdateInstallationRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateInstallationRequest$Outbound = {
  integrationConfigurationId: string;
  RequestBody?: UpdateInstallationRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateInstallationRequest$outboundSchema: z.ZodType<
  UpdateInstallationRequest$Outbound,
  z.ZodTypeDef,
  UpdateInstallationRequest
> = z.object({
  integrationConfigurationId: z.string(),
  requestBody: z.lazy(() => UpdateInstallationRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateInstallationRequest$ {
  /** @deprecated use `UpdateInstallationRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateInstallationRequest$inboundSchema;
  /** @deprecated use `UpdateInstallationRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateInstallationRequest$outboundSchema;
  /** @deprecated use `UpdateInstallationRequest$Outbound` instead. */
  export type Outbound = UpdateInstallationRequest$Outbound;
}

export function updateInstallationRequestToJSON(
  updateInstallationRequest: UpdateInstallationRequest,
): string {
  return JSON.stringify(
    UpdateInstallationRequest$outboundSchema.parse(updateInstallationRequest),
  );
}

export function updateInstallationRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateInstallationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateInstallationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateInstallationRequest' from JSON`,
  );
}
