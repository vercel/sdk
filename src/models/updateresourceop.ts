/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UpdateResourceOwnership = {
  Owned: "owned",
  Linked: "linked",
  Sandbox: "sandbox",
} as const;
export type UpdateResourceOwnership = ClosedEnum<
  typeof UpdateResourceOwnership
>;

export const UpdateResourceStatus = {
  Ready: "ready",
  Pending: "pending",
  Onboarding: "onboarding",
  Suspended: "suspended",
  Resumed: "resumed",
  Uninstalled: "uninstalled",
  Error: "error",
} as const;
export type UpdateResourceStatus = ClosedEnum<typeof UpdateResourceStatus>;

export const UpdateResourceType = {
  Prepayment: "prepayment",
  Subscription: "subscription",
} as const;
export type UpdateResourceType = ClosedEnum<typeof UpdateResourceType>;

export type UpdateResourceDetails = {
  label: string;
  value?: string | undefined;
};

export type UpdateResourceHighlightedDetails = {
  label: string;
  value?: string | undefined;
};

export type UpdateResourceBillingPlan = {
  id: string;
  type: UpdateResourceType;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<UpdateResourceDetails> | undefined;
  highlightedDetails?: Array<UpdateResourceHighlightedDetails> | undefined;
  effectiveDate?: string | undefined;
  additionalProperties?: { [k: string]: any } | undefined;
};

export const UpdateResourceLevel = {
  Info: "info",
  Warn: "warn",
  Error: "error",
} as const;
export type UpdateResourceLevel = ClosedEnum<typeof UpdateResourceLevel>;

export type UpdateResourceNotification = {
  level: UpdateResourceLevel;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/**
 * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
 */
export type UpdateResourceEnvironmentOverrides = {
  /**
   * Value used for development environment.
   */
  development?: string | undefined;
  /**
   * Value used for preview environment.
   */
  preview?: string | undefined;
  /**
   * Value used for production environment.
   */
  production?: string | undefined;
};

export type UpdateResourceSecrets = {
  name: string;
  value: string;
  prefix?: string | undefined;
  /**
   * A map of environments to override values for the secret, used for setting different values across deployments in production, preview, and development environments. Note: the same value will be used for all deployments in the given environment.
   */
  environmentOverrides?: UpdateResourceEnvironmentOverrides | undefined;
};

export type UpdateResourceRequestBody = {
  ownership?: UpdateResourceOwnership | undefined;
  name?: string | undefined;
  status?: UpdateResourceStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: UpdateResourceBillingPlan | undefined;
  notification?: UpdateResourceNotification | undefined;
  extras?: { [k: string]: any } | undefined;
  secrets?: Array<UpdateResourceSecrets> | undefined;
};

export type UpdateResourceRequest = {
  integrationConfigurationId: string;
  resourceId: string;
  requestBody?: UpdateResourceRequestBody | undefined;
};

export type UpdateResourceResponseBody = {
  name: string;
};

/** @internal */
export const UpdateResourceOwnership$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceOwnership
> = z.nativeEnum(UpdateResourceOwnership);

/** @internal */
export const UpdateResourceOwnership$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceOwnership
> = UpdateResourceOwnership$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceOwnership$ {
  /** @deprecated use `UpdateResourceOwnership$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceOwnership$inboundSchema;
  /** @deprecated use `UpdateResourceOwnership$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceOwnership$outboundSchema;
}

/** @internal */
export const UpdateResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceStatus
> = z.nativeEnum(UpdateResourceStatus);

/** @internal */
export const UpdateResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceStatus
> = UpdateResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceStatus$ {
  /** @deprecated use `UpdateResourceStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceStatus$inboundSchema;
  /** @deprecated use `UpdateResourceStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceStatus$outboundSchema;
}

/** @internal */
export const UpdateResourceType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceType
> = z.nativeEnum(UpdateResourceType);

/** @internal */
export const UpdateResourceType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceType
> = UpdateResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceType$ {
  /** @deprecated use `UpdateResourceType$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceType$inboundSchema;
  /** @deprecated use `UpdateResourceType$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceType$outboundSchema;
}

/** @internal */
export const UpdateResourceDetails$inboundSchema: z.ZodType<
  UpdateResourceDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type UpdateResourceDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const UpdateResourceDetails$outboundSchema: z.ZodType<
  UpdateResourceDetails$Outbound,
  z.ZodTypeDef,
  UpdateResourceDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceDetails$ {
  /** @deprecated use `UpdateResourceDetails$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceDetails$inboundSchema;
  /** @deprecated use `UpdateResourceDetails$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceDetails$outboundSchema;
  /** @deprecated use `UpdateResourceDetails$Outbound` instead. */
  export type Outbound = UpdateResourceDetails$Outbound;
}

export function updateResourceDetailsToJSON(
  updateResourceDetails: UpdateResourceDetails,
): string {
  return JSON.stringify(
    UpdateResourceDetails$outboundSchema.parse(updateResourceDetails),
  );
}

export function updateResourceDetailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceDetails' from JSON`,
  );
}

/** @internal */
export const UpdateResourceHighlightedDetails$inboundSchema: z.ZodType<
  UpdateResourceHighlightedDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/** @internal */
export type UpdateResourceHighlightedDetails$Outbound = {
  label: string;
  value?: string | undefined;
};

/** @internal */
export const UpdateResourceHighlightedDetails$outboundSchema: z.ZodType<
  UpdateResourceHighlightedDetails$Outbound,
  z.ZodTypeDef,
  UpdateResourceHighlightedDetails
> = z.object({
  label: z.string(),
  value: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceHighlightedDetails$ {
  /** @deprecated use `UpdateResourceHighlightedDetails$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceHighlightedDetails$inboundSchema;
  /** @deprecated use `UpdateResourceHighlightedDetails$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceHighlightedDetails$outboundSchema;
  /** @deprecated use `UpdateResourceHighlightedDetails$Outbound` instead. */
  export type Outbound = UpdateResourceHighlightedDetails$Outbound;
}

export function updateResourceHighlightedDetailsToJSON(
  updateResourceHighlightedDetails: UpdateResourceHighlightedDetails,
): string {
  return JSON.stringify(
    UpdateResourceHighlightedDetails$outboundSchema.parse(
      updateResourceHighlightedDetails,
    ),
  );
}

export function updateResourceHighlightedDetailsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceHighlightedDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceHighlightedDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceHighlightedDetails' from JSON`,
  );
}

/** @internal */
export const UpdateResourceBillingPlan$inboundSchema: z.ZodType<
  UpdateResourceBillingPlan,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    id: z.string(),
    type: UpdateResourceType$inboundSchema,
    name: z.string(),
    description: z.string().optional(),
    paymentMethodRequired: z.boolean().optional(),
    cost: z.string().optional(),
    details: z.array(z.lazy(() => UpdateResourceDetails$inboundSchema))
      .optional(),
    highlightedDetails: z.array(
      z.lazy(() => UpdateResourceHighlightedDetails$inboundSchema),
    ).optional(),
    effectiveDate: z.string().optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
);

/** @internal */
export type UpdateResourceBillingPlan$Outbound = {
  id: string;
  type: string;
  name: string;
  description?: string | undefined;
  paymentMethodRequired?: boolean | undefined;
  cost?: string | undefined;
  details?: Array<UpdateResourceDetails$Outbound> | undefined;
  highlightedDetails?:
    | Array<UpdateResourceHighlightedDetails$Outbound>
    | undefined;
  effectiveDate?: string | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const UpdateResourceBillingPlan$outboundSchema: z.ZodType<
  UpdateResourceBillingPlan$Outbound,
  z.ZodTypeDef,
  UpdateResourceBillingPlan
> = z.object({
  id: z.string(),
  type: UpdateResourceType$outboundSchema,
  name: z.string(),
  description: z.string().optional(),
  paymentMethodRequired: z.boolean().optional(),
  cost: z.string().optional(),
  details: z.array(z.lazy(() => UpdateResourceDetails$outboundSchema))
    .optional(),
  highlightedDetails: z.array(
    z.lazy(() => UpdateResourceHighlightedDetails$outboundSchema),
  ).optional(),
  effectiveDate: z.string().optional(),
  additionalProperties: z.record(z.any()).optional(),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceBillingPlan$ {
  /** @deprecated use `UpdateResourceBillingPlan$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceBillingPlan$inboundSchema;
  /** @deprecated use `UpdateResourceBillingPlan$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceBillingPlan$outboundSchema;
  /** @deprecated use `UpdateResourceBillingPlan$Outbound` instead. */
  export type Outbound = UpdateResourceBillingPlan$Outbound;
}

export function updateResourceBillingPlanToJSON(
  updateResourceBillingPlan: UpdateResourceBillingPlan,
): string {
  return JSON.stringify(
    UpdateResourceBillingPlan$outboundSchema.parse(updateResourceBillingPlan),
  );
}

export function updateResourceBillingPlanFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceBillingPlan, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceBillingPlan$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceBillingPlan' from JSON`,
  );
}

/** @internal */
export const UpdateResourceLevel$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceLevel
> = z.nativeEnum(UpdateResourceLevel);

/** @internal */
export const UpdateResourceLevel$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceLevel
> = UpdateResourceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceLevel$ {
  /** @deprecated use `UpdateResourceLevel$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceLevel$inboundSchema;
  /** @deprecated use `UpdateResourceLevel$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceLevel$outboundSchema;
}

/** @internal */
export const UpdateResourceNotification$inboundSchema: z.ZodType<
  UpdateResourceNotification,
  z.ZodTypeDef,
  unknown
> = z.object({
  level: UpdateResourceLevel$inboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/** @internal */
export type UpdateResourceNotification$Outbound = {
  level: string;
  title: string;
  message?: string | undefined;
  href?: string | undefined;
};

/** @internal */
export const UpdateResourceNotification$outboundSchema: z.ZodType<
  UpdateResourceNotification$Outbound,
  z.ZodTypeDef,
  UpdateResourceNotification
> = z.object({
  level: UpdateResourceLevel$outboundSchema,
  title: z.string(),
  message: z.string().optional(),
  href: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceNotification$ {
  /** @deprecated use `UpdateResourceNotification$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceNotification$inboundSchema;
  /** @deprecated use `UpdateResourceNotification$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceNotification$outboundSchema;
  /** @deprecated use `UpdateResourceNotification$Outbound` instead. */
  export type Outbound = UpdateResourceNotification$Outbound;
}

export function updateResourceNotificationToJSON(
  updateResourceNotification: UpdateResourceNotification,
): string {
  return JSON.stringify(
    UpdateResourceNotification$outboundSchema.parse(updateResourceNotification),
  );
}

export function updateResourceNotificationFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceNotification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceNotification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceNotification' from JSON`,
  );
}

/** @internal */
export const UpdateResourceEnvironmentOverrides$inboundSchema: z.ZodType<
  UpdateResourceEnvironmentOverrides,
  z.ZodTypeDef,
  unknown
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/** @internal */
export type UpdateResourceEnvironmentOverrides$Outbound = {
  development?: string | undefined;
  preview?: string | undefined;
  production?: string | undefined;
};

/** @internal */
export const UpdateResourceEnvironmentOverrides$outboundSchema: z.ZodType<
  UpdateResourceEnvironmentOverrides$Outbound,
  z.ZodTypeDef,
  UpdateResourceEnvironmentOverrides
> = z.object({
  development: z.string().optional(),
  preview: z.string().optional(),
  production: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceEnvironmentOverrides$ {
  /** @deprecated use `UpdateResourceEnvironmentOverrides$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceEnvironmentOverrides$inboundSchema;
  /** @deprecated use `UpdateResourceEnvironmentOverrides$outboundSchema` instead. */
  export const outboundSchema =
    UpdateResourceEnvironmentOverrides$outboundSchema;
  /** @deprecated use `UpdateResourceEnvironmentOverrides$Outbound` instead. */
  export type Outbound = UpdateResourceEnvironmentOverrides$Outbound;
}

export function updateResourceEnvironmentOverridesToJSON(
  updateResourceEnvironmentOverrides: UpdateResourceEnvironmentOverrides,
): string {
  return JSON.stringify(
    UpdateResourceEnvironmentOverrides$outboundSchema.parse(
      updateResourceEnvironmentOverrides,
    ),
  );
}

export function updateResourceEnvironmentOverridesFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceEnvironmentOverrides, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateResourceEnvironmentOverrides$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceEnvironmentOverrides' from JSON`,
  );
}

/** @internal */
export const UpdateResourceSecrets$inboundSchema: z.ZodType<
  UpdateResourceSecrets,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() =>
    UpdateResourceEnvironmentOverrides$inboundSchema
  ).optional(),
});

/** @internal */
export type UpdateResourceSecrets$Outbound = {
  name: string;
  value: string;
  prefix?: string | undefined;
  environmentOverrides?:
    | UpdateResourceEnvironmentOverrides$Outbound
    | undefined;
};

/** @internal */
export const UpdateResourceSecrets$outboundSchema: z.ZodType<
  UpdateResourceSecrets$Outbound,
  z.ZodTypeDef,
  UpdateResourceSecrets
> = z.object({
  name: z.string(),
  value: z.string(),
  prefix: z.string().optional(),
  environmentOverrides: z.lazy(() =>
    UpdateResourceEnvironmentOverrides$outboundSchema
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceSecrets$ {
  /** @deprecated use `UpdateResourceSecrets$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceSecrets$inboundSchema;
  /** @deprecated use `UpdateResourceSecrets$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceSecrets$outboundSchema;
  /** @deprecated use `UpdateResourceSecrets$Outbound` instead. */
  export type Outbound = UpdateResourceSecrets$Outbound;
}

export function updateResourceSecretsToJSON(
  updateResourceSecrets: UpdateResourceSecrets,
): string {
  return JSON.stringify(
    UpdateResourceSecrets$outboundSchema.parse(updateResourceSecrets),
  );
}

export function updateResourceSecretsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceSecrets, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceSecrets$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceSecrets' from JSON`,
  );
}

/** @internal */
export const UpdateResourceRequestBody$inboundSchema: z.ZodType<
  UpdateResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  ownership: UpdateResourceOwnership$inboundSchema.optional(),
  name: z.string().optional(),
  status: UpdateResourceStatus$inboundSchema.optional(),
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => UpdateResourceBillingPlan$inboundSchema).optional(),
  notification: z.lazy(() => UpdateResourceNotification$inboundSchema)
    .optional(),
  extras: z.record(z.any()).optional(),
  secrets: z.array(z.lazy(() => UpdateResourceSecrets$inboundSchema))
    .optional(),
});

/** @internal */
export type UpdateResourceRequestBody$Outbound = {
  ownership?: string | undefined;
  name?: string | undefined;
  status?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  billingPlan?: UpdateResourceBillingPlan$Outbound | undefined;
  notification?: UpdateResourceNotification$Outbound | undefined;
  extras?: { [k: string]: any } | undefined;
  secrets?: Array<UpdateResourceSecrets$Outbound> | undefined;
};

/** @internal */
export const UpdateResourceRequestBody$outboundSchema: z.ZodType<
  UpdateResourceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateResourceRequestBody
> = z.object({
  ownership: UpdateResourceOwnership$outboundSchema.optional(),
  name: z.string().optional(),
  status: UpdateResourceStatus$outboundSchema.optional(),
  metadata: z.record(z.any()).optional(),
  billingPlan: z.lazy(() => UpdateResourceBillingPlan$outboundSchema)
    .optional(),
  notification: z.lazy(() => UpdateResourceNotification$outboundSchema)
    .optional(),
  extras: z.record(z.any()).optional(),
  secrets: z.array(z.lazy(() => UpdateResourceSecrets$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceRequestBody$ {
  /** @deprecated use `UpdateResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceRequestBody$inboundSchema;
  /** @deprecated use `UpdateResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceRequestBody$outboundSchema;
  /** @deprecated use `UpdateResourceRequestBody$Outbound` instead. */
  export type Outbound = UpdateResourceRequestBody$Outbound;
}

export function updateResourceRequestBodyToJSON(
  updateResourceRequestBody: UpdateResourceRequestBody,
): string {
  return JSON.stringify(
    UpdateResourceRequestBody$outboundSchema.parse(updateResourceRequestBody),
  );
}

export function updateResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateResourceRequest$inboundSchema: z.ZodType<
  UpdateResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  RequestBody: z.lazy(() => UpdateResourceRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateResourceRequest$Outbound = {
  integrationConfigurationId: string;
  resourceId: string;
  RequestBody?: UpdateResourceRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateResourceRequest$outboundSchema: z.ZodType<
  UpdateResourceRequest$Outbound,
  z.ZodTypeDef,
  UpdateResourceRequest
> = z.object({
  integrationConfigurationId: z.string(),
  resourceId: z.string(),
  requestBody: z.lazy(() => UpdateResourceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceRequest$ {
  /** @deprecated use `UpdateResourceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceRequest$inboundSchema;
  /** @deprecated use `UpdateResourceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceRequest$outboundSchema;
  /** @deprecated use `UpdateResourceRequest$Outbound` instead. */
  export type Outbound = UpdateResourceRequest$Outbound;
}

export function updateResourceRequestToJSON(
  updateResourceRequest: UpdateResourceRequest,
): string {
  return JSON.stringify(
    UpdateResourceRequest$outboundSchema.parse(updateResourceRequest),
  );
}

export function updateResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceRequest' from JSON`,
  );
}

/** @internal */
export const UpdateResourceResponseBody$inboundSchema: z.ZodType<
  UpdateResourceResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
});

/** @internal */
export type UpdateResourceResponseBody$Outbound = {
  name: string;
};

/** @internal */
export const UpdateResourceResponseBody$outboundSchema: z.ZodType<
  UpdateResourceResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateResourceResponseBody
> = z.object({
  name: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceResponseBody$ {
  /** @deprecated use `UpdateResourceResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceResponseBody$inboundSchema;
  /** @deprecated use `UpdateResourceResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceResponseBody$outboundSchema;
  /** @deprecated use `UpdateResourceResponseBody$Outbound` instead. */
  export type Outbound = UpdateResourceResponseBody$Outbound;
}

export function updateResourceResponseBodyToJSON(
  updateResourceResponseBody: UpdateResourceResponseBody,
): string {
  return JSON.stringify(
    UpdateResourceResponseBody$outboundSchema.parse(updateResourceResponseBody),
  );
}

export function updateResourceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceResponseBody' from JSON`,
  );
}
