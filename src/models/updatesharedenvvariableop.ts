/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export const UpdateSharedEnvVariableTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type UpdateSharedEnvVariableTarget = ClosedEnum<
  typeof UpdateSharedEnvVariableTarget
>;

/**
 * Incrementally update project associations without specifying the full list
 */
export type ProjectIdUpdates = {
  /**
   * Project IDs to add to this environment variable
   */
  link?: Array<string> | undefined;
  /**
   * Project IDs to remove from this environment variable
   */
  unlink?: Array<string> | undefined;
};

/**
 * The new type of the Shared Environment Variable
 */
export const UpdateSharedEnvVariableType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
} as const;
/**
 * The new type of the Shared Environment Variable
 */
export type UpdateSharedEnvVariableType = ClosedEnum<
  typeof UpdateSharedEnvVariableType
>;

export type Updates = {
  /**
   * The name of the Shared Environment Variable
   */
  key?: string | undefined;
  /**
   * The value of the Shared Environment Variable
   */
  value?: string | undefined;
  /**
   * The target environment of the Shared Environment Variable
   */
  target?: Array<UpdateSharedEnvVariableTarget> | undefined;
  /**
   * Associate a Shared Environment Variable to projects.
   */
  projectId?: Array<string> | undefined;
  /**
   * Incrementally update project associations without specifying the full list
   */
  projectIdUpdates?: ProjectIdUpdates | undefined;
  /**
   * The new type of the Shared Environment Variable
   */
  type?: UpdateSharedEnvVariableType | undefined;
  /**
   * A comment to add context on what this Shared Environment Variable is for
   */
  comment?: string | undefined;
};

export type UpdateSharedEnvVariableRequestBody = {
  updates: { [k: string]: Updates };
};

export type UpdateSharedEnvVariableRequest = {
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: UpdateSharedEnvVariableRequestBody | undefined;
};

/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export const UpdateSharedEnvVariableEnvironmentType = {
  Encrypted: "encrypted",
  Sensitive: "sensitive",
  System: "system",
  Plain: "plain",
} as const;
/**
 * The type of this cosmos doc instance, if blank, assume secret.
 */
export type UpdateSharedEnvVariableEnvironmentType = ClosedEnum<
  typeof UpdateSharedEnvVariableEnvironmentType
>;

/**
 * environments this env variable targets
 */
export const UpdateSharedEnvVariableEnvironmentTarget = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
/**
 * environments this env variable targets
 */
export type UpdateSharedEnvVariableEnvironmentTarget = ClosedEnum<
  typeof UpdateSharedEnvVariableEnvironmentTarget
>;

export type Updated = {
  /**
   * The date when the Shared Env Var was created.
   */
  created?: Date | undefined;
  /**
   * The name of the Shared Env Var.
   */
  key?: string | undefined;
  /**
   * The unique identifier of the owner (team) the Shared Env Var was created for.
   */
  ownerId?: string | null | undefined;
  /**
   * The unique identifier of the Shared Env Var.
   */
  id?: string | undefined;
  /**
   * The unique identifier of the user who created the Shared Env Var.
   */
  createdBy?: string | null | undefined;
  /**
   * The unique identifier of the user who deleted the Shared Env Var.
   */
  deletedBy?: string | null | undefined;
  /**
   * The unique identifier of the user who last updated the Shared Env Var.
   */
  updatedBy?: string | null | undefined;
  /**
   * Timestamp for when the Shared Env Var was created.
   */
  createdAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was (soft) deleted.
   */
  deletedAt?: number | undefined;
  /**
   * Timestamp for when the Shared Env Var was last updated.
   */
  updatedAt?: number | undefined;
  /**
   * The value of the Shared Env Var.
   */
  value?: string | undefined;
  /**
   * The unique identifiers of the projects which the Shared Env Var is linked to.
   */
  projectId?: Array<string> | undefined;
  /**
   * The type of this cosmos doc instance, if blank, assume secret.
   */
  type?: UpdateSharedEnvVariableEnvironmentType | undefined;
  /**
   * environments this env variable targets
   */
  target?: Array<UpdateSharedEnvVariableEnvironmentTarget> | undefined;
  /**
   * whether or not this env varible applies to custom environments
   */
  applyToAllCustomEnvironments?: boolean | undefined;
  /**
   * whether or not this env variable is decrypted
   */
  decrypted?: boolean | undefined;
  /**
   * A user provided comment that describes what this Shared Env Var is for.
   */
  comment?: string | undefined;
  /**
   * The last editor full name or username.
   */
  lastEditedByDisplayName?: string | undefined;
};

export const UpdateSharedEnvVariableValue2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type UpdateSharedEnvVariableValue2 = ClosedEnum<
  typeof UpdateSharedEnvVariableValue2
>;

export type UpdateSharedEnvVariableValue =
  | string
  | Array<UpdateSharedEnvVariableValue2>;

export const UpdateSharedEnvVariableTarget2 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type UpdateSharedEnvVariableTarget2 = ClosedEnum<
  typeof UpdateSharedEnvVariableTarget2
>;

export const UpdateSharedEnvVariableTarget1 = {
  Production: "production",
  Preview: "preview",
  Development: "development",
} as const;
export type UpdateSharedEnvVariableTarget1 = ClosedEnum<
  typeof UpdateSharedEnvVariableTarget1
>;

export type UpdateSharedEnvVariableEnvironmentResponseTarget =
  | Array<UpdateSharedEnvVariableTarget1>
  | UpdateSharedEnvVariableTarget2;

export type UpdateSharedEnvVariableError = {
  code: string;
  message: string;
  key?: string | undefined;
  envVarId?: string | undefined;
  envVarKey?: string | undefined;
  action?: string | undefined;
  link?: string | undefined;
  value?: string | Array<UpdateSharedEnvVariableValue2> | undefined;
  gitBranch?: string | undefined;
  target?:
    | Array<UpdateSharedEnvVariableTarget1>
    | UpdateSharedEnvVariableTarget2
    | undefined;
  project?: string | undefined;
};

export type UpdateSharedEnvVariableFailed = {
  error: UpdateSharedEnvVariableError;
};

export type UpdateSharedEnvVariableResponseBody = {
  updated: Array<Updated>;
  failed: Array<UpdateSharedEnvVariableFailed>;
};

/** @internal */
export const UpdateSharedEnvVariableTarget$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableTarget
> = z.nativeEnum(UpdateSharedEnvVariableTarget);

/** @internal */
export const UpdateSharedEnvVariableTarget$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableTarget
> = UpdateSharedEnvVariableTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableTarget$ {
  /** @deprecated use `UpdateSharedEnvVariableTarget$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableTarget$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableTarget$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableTarget$outboundSchema;
}

/** @internal */
export const ProjectIdUpdates$inboundSchema: z.ZodType<
  ProjectIdUpdates,
  z.ZodTypeDef,
  unknown
> = z.object({
  link: z.array(z.string()).optional(),
  unlink: z.array(z.string()).optional(),
});

/** @internal */
export type ProjectIdUpdates$Outbound = {
  link?: Array<string> | undefined;
  unlink?: Array<string> | undefined;
};

/** @internal */
export const ProjectIdUpdates$outboundSchema: z.ZodType<
  ProjectIdUpdates$Outbound,
  z.ZodTypeDef,
  ProjectIdUpdates
> = z.object({
  link: z.array(z.string()).optional(),
  unlink: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProjectIdUpdates$ {
  /** @deprecated use `ProjectIdUpdates$inboundSchema` instead. */
  export const inboundSchema = ProjectIdUpdates$inboundSchema;
  /** @deprecated use `ProjectIdUpdates$outboundSchema` instead. */
  export const outboundSchema = ProjectIdUpdates$outboundSchema;
  /** @deprecated use `ProjectIdUpdates$Outbound` instead. */
  export type Outbound = ProjectIdUpdates$Outbound;
}

export function projectIdUpdatesToJSON(
  projectIdUpdates: ProjectIdUpdates,
): string {
  return JSON.stringify(
    ProjectIdUpdates$outboundSchema.parse(projectIdUpdates),
  );
}

export function projectIdUpdatesFromJSON(
  jsonString: string,
): SafeParseResult<ProjectIdUpdates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ProjectIdUpdates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ProjectIdUpdates' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableType
> = z.nativeEnum(UpdateSharedEnvVariableType);

/** @internal */
export const UpdateSharedEnvVariableType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableType
> = UpdateSharedEnvVariableType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableType$ {
  /** @deprecated use `UpdateSharedEnvVariableType$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableType$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableType$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableType$outboundSchema;
}

/** @internal */
export const Updates$inboundSchema: z.ZodType<Updates, z.ZodTypeDef, unknown> =
  z.object({
    key: z.string().optional(),
    value: z.string().optional(),
    target: z.array(UpdateSharedEnvVariableTarget$inboundSchema).optional(),
    projectId: z.array(z.string()).optional(),
    projectIdUpdates: z.lazy(() => ProjectIdUpdates$inboundSchema).optional(),
    type: UpdateSharedEnvVariableType$inboundSchema.optional(),
    comment: z.string().optional(),
  });

/** @internal */
export type Updates$Outbound = {
  key?: string | undefined;
  value?: string | undefined;
  target?: Array<string> | undefined;
  projectId?: Array<string> | undefined;
  projectIdUpdates?: ProjectIdUpdates$Outbound | undefined;
  type?: string | undefined;
  comment?: string | undefined;
};

/** @internal */
export const Updates$outboundSchema: z.ZodType<
  Updates$Outbound,
  z.ZodTypeDef,
  Updates
> = z.object({
  key: z.string().optional(),
  value: z.string().optional(),
  target: z.array(UpdateSharedEnvVariableTarget$outboundSchema).optional(),
  projectId: z.array(z.string()).optional(),
  projectIdUpdates: z.lazy(() => ProjectIdUpdates$outboundSchema).optional(),
  type: UpdateSharedEnvVariableType$outboundSchema.optional(),
  comment: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Updates$ {
  /** @deprecated use `Updates$inboundSchema` instead. */
  export const inboundSchema = Updates$inboundSchema;
  /** @deprecated use `Updates$outboundSchema` instead. */
  export const outboundSchema = Updates$outboundSchema;
  /** @deprecated use `Updates$Outbound` instead. */
  export type Outbound = Updates$Outbound;
}

export function updatesToJSON(updates: Updates): string {
  return JSON.stringify(Updates$outboundSchema.parse(updates));
}

export function updatesFromJSON(
  jsonString: string,
): SafeParseResult<Updates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Updates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Updates' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableRequestBody$inboundSchema: z.ZodType<
  UpdateSharedEnvVariableRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  updates: z.record(z.lazy(() => Updates$inboundSchema)),
});

/** @internal */
export type UpdateSharedEnvVariableRequestBody$Outbound = {
  updates: { [k: string]: Updates$Outbound };
};

/** @internal */
export const UpdateSharedEnvVariableRequestBody$outboundSchema: z.ZodType<
  UpdateSharedEnvVariableRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateSharedEnvVariableRequestBody
> = z.object({
  updates: z.record(z.lazy(() => Updates$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableRequestBody$ {
  /** @deprecated use `UpdateSharedEnvVariableRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableRequestBody$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSharedEnvVariableRequestBody$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableRequestBody$Outbound` instead. */
  export type Outbound = UpdateSharedEnvVariableRequestBody$Outbound;
}

export function updateSharedEnvVariableRequestBodyToJSON(
  updateSharedEnvVariableRequestBody: UpdateSharedEnvVariableRequestBody,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableRequestBody$outboundSchema.parse(
      updateSharedEnvVariableRequestBody,
    ),
  );
}

export function updateSharedEnvVariableRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharedEnvVariableRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSharedEnvVariableRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharedEnvVariableRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableRequest$inboundSchema: z.ZodType<
  UpdateSharedEnvVariableRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => UpdateSharedEnvVariableRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateSharedEnvVariableRequest$Outbound = {
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: UpdateSharedEnvVariableRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateSharedEnvVariableRequest$outboundSchema: z.ZodType<
  UpdateSharedEnvVariableRequest$Outbound,
  z.ZodTypeDef,
  UpdateSharedEnvVariableRequest
> = z.object({
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => UpdateSharedEnvVariableRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableRequest$ {
  /** @deprecated use `UpdateSharedEnvVariableRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableRequest$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableRequest$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableRequest$Outbound` instead. */
  export type Outbound = UpdateSharedEnvVariableRequest$Outbound;
}

export function updateSharedEnvVariableRequestToJSON(
  updateSharedEnvVariableRequest: UpdateSharedEnvVariableRequest,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableRequest$outboundSchema.parse(
      updateSharedEnvVariableRequest,
    ),
  );
}

export function updateSharedEnvVariableRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharedEnvVariableRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSharedEnvVariableRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharedEnvVariableRequest' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableEnvironmentType$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSharedEnvVariableEnvironmentType> = z.nativeEnum(
    UpdateSharedEnvVariableEnvironmentType,
  );

/** @internal */
export const UpdateSharedEnvVariableEnvironmentType$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSharedEnvVariableEnvironmentType> =
    UpdateSharedEnvVariableEnvironmentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableEnvironmentType$ {
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentType$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSharedEnvVariableEnvironmentType$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentType$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSharedEnvVariableEnvironmentType$outboundSchema;
}

/** @internal */
export const UpdateSharedEnvVariableEnvironmentTarget$inboundSchema:
  z.ZodNativeEnum<typeof UpdateSharedEnvVariableEnvironmentTarget> = z
    .nativeEnum(UpdateSharedEnvVariableEnvironmentTarget);

/** @internal */
export const UpdateSharedEnvVariableEnvironmentTarget$outboundSchema:
  z.ZodNativeEnum<typeof UpdateSharedEnvVariableEnvironmentTarget> =
    UpdateSharedEnvVariableEnvironmentTarget$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableEnvironmentTarget$ {
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentTarget$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSharedEnvVariableEnvironmentTarget$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentTarget$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSharedEnvVariableEnvironmentTarget$outboundSchema;
}

/** @internal */
export const Updated$inboundSchema: z.ZodType<Updated, z.ZodTypeDef, unknown> =
  z.object({
    created: z.string().datetime({ offset: true }).transform(v => new Date(v))
      .optional(),
    key: z.string().optional(),
    ownerId: z.nullable(z.string()).optional(),
    id: z.string().optional(),
    createdBy: z.nullable(z.string()).optional(),
    deletedBy: z.nullable(z.string()).optional(),
    updatedBy: z.nullable(z.string()).optional(),
    createdAt: z.number().optional(),
    deletedAt: z.number().optional(),
    updatedAt: z.number().optional(),
    value: z.string().optional(),
    projectId: z.array(z.string()).optional(),
    type: UpdateSharedEnvVariableEnvironmentType$inboundSchema.optional(),
    target: z.array(UpdateSharedEnvVariableEnvironmentTarget$inboundSchema)
      .optional(),
    applyToAllCustomEnvironments: z.boolean().optional(),
    decrypted: z.boolean().optional(),
    comment: z.string().optional(),
    lastEditedByDisplayName: z.string().optional(),
  });

/** @internal */
export type Updated$Outbound = {
  created?: string | undefined;
  key?: string | undefined;
  ownerId?: string | null | undefined;
  id?: string | undefined;
  createdBy?: string | null | undefined;
  deletedBy?: string | null | undefined;
  updatedBy?: string | null | undefined;
  createdAt?: number | undefined;
  deletedAt?: number | undefined;
  updatedAt?: number | undefined;
  value?: string | undefined;
  projectId?: Array<string> | undefined;
  type?: string | undefined;
  target?: Array<string> | undefined;
  applyToAllCustomEnvironments?: boolean | undefined;
  decrypted?: boolean | undefined;
  comment?: string | undefined;
  lastEditedByDisplayName?: string | undefined;
};

/** @internal */
export const Updated$outboundSchema: z.ZodType<
  Updated$Outbound,
  z.ZodTypeDef,
  Updated
> = z.object({
  created: z.date().transform(v => v.toISOString()).optional(),
  key: z.string().optional(),
  ownerId: z.nullable(z.string()).optional(),
  id: z.string().optional(),
  createdBy: z.nullable(z.string()).optional(),
  deletedBy: z.nullable(z.string()).optional(),
  updatedBy: z.nullable(z.string()).optional(),
  createdAt: z.number().optional(),
  deletedAt: z.number().optional(),
  updatedAt: z.number().optional(),
  value: z.string().optional(),
  projectId: z.array(z.string()).optional(),
  type: UpdateSharedEnvVariableEnvironmentType$outboundSchema.optional(),
  target: z.array(UpdateSharedEnvVariableEnvironmentTarget$outboundSchema)
    .optional(),
  applyToAllCustomEnvironments: z.boolean().optional(),
  decrypted: z.boolean().optional(),
  comment: z.string().optional(),
  lastEditedByDisplayName: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Updated$ {
  /** @deprecated use `Updated$inboundSchema` instead. */
  export const inboundSchema = Updated$inboundSchema;
  /** @deprecated use `Updated$outboundSchema` instead. */
  export const outboundSchema = Updated$outboundSchema;
  /** @deprecated use `Updated$Outbound` instead. */
  export type Outbound = Updated$Outbound;
}

export function updatedToJSON(updated: Updated): string {
  return JSON.stringify(Updated$outboundSchema.parse(updated));
}

export function updatedFromJSON(
  jsonString: string,
): SafeParseResult<Updated, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Updated$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Updated' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableValue2$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableValue2
> = z.nativeEnum(UpdateSharedEnvVariableValue2);

/** @internal */
export const UpdateSharedEnvVariableValue2$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableValue2
> = UpdateSharedEnvVariableValue2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableValue2$ {
  /** @deprecated use `UpdateSharedEnvVariableValue2$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableValue2$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableValue2$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableValue2$outboundSchema;
}

/** @internal */
export const UpdateSharedEnvVariableValue$inboundSchema: z.ZodType<
  UpdateSharedEnvVariableValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.array(UpdateSharedEnvVariableValue2$inboundSchema)]);

/** @internal */
export type UpdateSharedEnvVariableValue$Outbound = string | Array<string>;

/** @internal */
export const UpdateSharedEnvVariableValue$outboundSchema: z.ZodType<
  UpdateSharedEnvVariableValue$Outbound,
  z.ZodTypeDef,
  UpdateSharedEnvVariableValue
> = z.union([
  z.string(),
  z.array(UpdateSharedEnvVariableValue2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableValue$ {
  /** @deprecated use `UpdateSharedEnvVariableValue$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableValue$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableValue$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableValue$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableValue$Outbound` instead. */
  export type Outbound = UpdateSharedEnvVariableValue$Outbound;
}

export function updateSharedEnvVariableValueToJSON(
  updateSharedEnvVariableValue: UpdateSharedEnvVariableValue,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableValue$outboundSchema.parse(
      updateSharedEnvVariableValue,
    ),
  );
}

export function updateSharedEnvVariableValueFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharedEnvVariableValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSharedEnvVariableValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharedEnvVariableValue' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableTarget2$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableTarget2
> = z.nativeEnum(UpdateSharedEnvVariableTarget2);

/** @internal */
export const UpdateSharedEnvVariableTarget2$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableTarget2
> = UpdateSharedEnvVariableTarget2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableTarget2$ {
  /** @deprecated use `UpdateSharedEnvVariableTarget2$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableTarget2$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableTarget2$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableTarget2$outboundSchema;
}

/** @internal */
export const UpdateSharedEnvVariableTarget1$inboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableTarget1
> = z.nativeEnum(UpdateSharedEnvVariableTarget1);

/** @internal */
export const UpdateSharedEnvVariableTarget1$outboundSchema: z.ZodNativeEnum<
  typeof UpdateSharedEnvVariableTarget1
> = UpdateSharedEnvVariableTarget1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableTarget1$ {
  /** @deprecated use `UpdateSharedEnvVariableTarget1$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableTarget1$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableTarget1$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableTarget1$outboundSchema;
}

/** @internal */
export const UpdateSharedEnvVariableEnvironmentResponseTarget$inboundSchema:
  z.ZodType<
    UpdateSharedEnvVariableEnvironmentResponseTarget,
    z.ZodTypeDef,
    unknown
  > = z.union([
    z.array(UpdateSharedEnvVariableTarget1$inboundSchema),
    UpdateSharedEnvVariableTarget2$inboundSchema,
  ]);

/** @internal */
export type UpdateSharedEnvVariableEnvironmentResponseTarget$Outbound =
  | Array<string>
  | string;

/** @internal */
export const UpdateSharedEnvVariableEnvironmentResponseTarget$outboundSchema:
  z.ZodType<
    UpdateSharedEnvVariableEnvironmentResponseTarget$Outbound,
    z.ZodTypeDef,
    UpdateSharedEnvVariableEnvironmentResponseTarget
  > = z.union([
    z.array(UpdateSharedEnvVariableTarget1$outboundSchema),
    UpdateSharedEnvVariableTarget2$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableEnvironmentResponseTarget$ {
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentResponseTarget$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSharedEnvVariableEnvironmentResponseTarget$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentResponseTarget$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSharedEnvVariableEnvironmentResponseTarget$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableEnvironmentResponseTarget$Outbound` instead. */
  export type Outbound =
    UpdateSharedEnvVariableEnvironmentResponseTarget$Outbound;
}

export function updateSharedEnvVariableEnvironmentResponseTargetToJSON(
  updateSharedEnvVariableEnvironmentResponseTarget:
    UpdateSharedEnvVariableEnvironmentResponseTarget,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableEnvironmentResponseTarget$outboundSchema.parse(
      updateSharedEnvVariableEnvironmentResponseTarget,
    ),
  );
}

export function updateSharedEnvVariableEnvironmentResponseTargetFromJSON(
  jsonString: string,
): SafeParseResult<
  UpdateSharedEnvVariableEnvironmentResponseTarget,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSharedEnvVariableEnvironmentResponseTarget$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UpdateSharedEnvVariableEnvironmentResponseTarget' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableError$inboundSchema: z.ZodType<
  UpdateSharedEnvVariableError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  message: z.string(),
  key: z.string().optional(),
  envVarId: z.string().optional(),
  envVarKey: z.string().optional(),
  action: z.string().optional(),
  link: z.string().optional(),
  value: z.union([
    z.string(),
    z.array(UpdateSharedEnvVariableValue2$inboundSchema),
  ]).optional(),
  gitBranch: z.string().optional(),
  target: z.union([
    z.array(UpdateSharedEnvVariableTarget1$inboundSchema),
    UpdateSharedEnvVariableTarget2$inboundSchema,
  ]).optional(),
  project: z.string().optional(),
});

/** @internal */
export type UpdateSharedEnvVariableError$Outbound = {
  code: string;
  message: string;
  key?: string | undefined;
  envVarId?: string | undefined;
  envVarKey?: string | undefined;
  action?: string | undefined;
  link?: string | undefined;
  value?: string | Array<string> | undefined;
  gitBranch?: string | undefined;
  target?: Array<string> | string | undefined;
  project?: string | undefined;
};

/** @internal */
export const UpdateSharedEnvVariableError$outboundSchema: z.ZodType<
  UpdateSharedEnvVariableError$Outbound,
  z.ZodTypeDef,
  UpdateSharedEnvVariableError
> = z.object({
  code: z.string(),
  message: z.string(),
  key: z.string().optional(),
  envVarId: z.string().optional(),
  envVarKey: z.string().optional(),
  action: z.string().optional(),
  link: z.string().optional(),
  value: z.union([
    z.string(),
    z.array(UpdateSharedEnvVariableValue2$outboundSchema),
  ]).optional(),
  gitBranch: z.string().optional(),
  target: z.union([
    z.array(UpdateSharedEnvVariableTarget1$outboundSchema),
    UpdateSharedEnvVariableTarget2$outboundSchema,
  ]).optional(),
  project: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableError$ {
  /** @deprecated use `UpdateSharedEnvVariableError$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableError$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableError$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableError$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableError$Outbound` instead. */
  export type Outbound = UpdateSharedEnvVariableError$Outbound;
}

export function updateSharedEnvVariableErrorToJSON(
  updateSharedEnvVariableError: UpdateSharedEnvVariableError,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableError$outboundSchema.parse(
      updateSharedEnvVariableError,
    ),
  );
}

export function updateSharedEnvVariableErrorFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharedEnvVariableError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSharedEnvVariableError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharedEnvVariableError' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableFailed$inboundSchema: z.ZodType<
  UpdateSharedEnvVariableFailed,
  z.ZodTypeDef,
  unknown
> = z.object({
  error: z.lazy(() => UpdateSharedEnvVariableError$inboundSchema),
});

/** @internal */
export type UpdateSharedEnvVariableFailed$Outbound = {
  error: UpdateSharedEnvVariableError$Outbound;
};

/** @internal */
export const UpdateSharedEnvVariableFailed$outboundSchema: z.ZodType<
  UpdateSharedEnvVariableFailed$Outbound,
  z.ZodTypeDef,
  UpdateSharedEnvVariableFailed
> = z.object({
  error: z.lazy(() => UpdateSharedEnvVariableError$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableFailed$ {
  /** @deprecated use `UpdateSharedEnvVariableFailed$inboundSchema` instead. */
  export const inboundSchema = UpdateSharedEnvVariableFailed$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableFailed$outboundSchema` instead. */
  export const outboundSchema = UpdateSharedEnvVariableFailed$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableFailed$Outbound` instead. */
  export type Outbound = UpdateSharedEnvVariableFailed$Outbound;
}

export function updateSharedEnvVariableFailedToJSON(
  updateSharedEnvVariableFailed: UpdateSharedEnvVariableFailed,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableFailed$outboundSchema.parse(
      updateSharedEnvVariableFailed,
    ),
  );
}

export function updateSharedEnvVariableFailedFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharedEnvVariableFailed, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateSharedEnvVariableFailed$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharedEnvVariableFailed' from JSON`,
  );
}

/** @internal */
export const UpdateSharedEnvVariableResponseBody$inboundSchema: z.ZodType<
  UpdateSharedEnvVariableResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  updated: z.array(z.lazy(() => Updated$inboundSchema)),
  failed: z.array(z.lazy(() => UpdateSharedEnvVariableFailed$inboundSchema)),
});

/** @internal */
export type UpdateSharedEnvVariableResponseBody$Outbound = {
  updated: Array<Updated$Outbound>;
  failed: Array<UpdateSharedEnvVariableFailed$Outbound>;
};

/** @internal */
export const UpdateSharedEnvVariableResponseBody$outboundSchema: z.ZodType<
  UpdateSharedEnvVariableResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateSharedEnvVariableResponseBody
> = z.object({
  updated: z.array(z.lazy(() => Updated$outboundSchema)),
  failed: z.array(z.lazy(() => UpdateSharedEnvVariableFailed$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateSharedEnvVariableResponseBody$ {
  /** @deprecated use `UpdateSharedEnvVariableResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UpdateSharedEnvVariableResponseBody$inboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateSharedEnvVariableResponseBody$outboundSchema;
  /** @deprecated use `UpdateSharedEnvVariableResponseBody$Outbound` instead. */
  export type Outbound = UpdateSharedEnvVariableResponseBody$Outbound;
}

export function updateSharedEnvVariableResponseBodyToJSON(
  updateSharedEnvVariableResponseBody: UpdateSharedEnvVariableResponseBody,
): string {
  return JSON.stringify(
    UpdateSharedEnvVariableResponseBody$outboundSchema.parse(
      updateSharedEnvVariableResponseBody,
    ),
  );
}

export function updateSharedEnvVariableResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateSharedEnvVariableResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UpdateSharedEnvVariableResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateSharedEnvVariableResponseBody' from JSON`,
  );
}
