/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UpdateStaticIpsRequestBody2 = {
  /**
   * Whether to use Static IPs for builds.
   */
  builds?: boolean | undefined;
  regions: Array<string>;
};

export type UpdateStaticIpsRequestBody1 = {
  /**
   * Whether to use Static IPs for builds.
   */
  builds: boolean;
  regions?: Array<string> | undefined;
};

export type UpdateStaticIpsRequestBody =
  | UpdateStaticIpsRequestBody1
  | UpdateStaticIpsRequestBody2;

export type UpdateStaticIpsRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?:
    | UpdateStaticIpsRequestBody1
    | UpdateStaticIpsRequestBody2
    | undefined;
};

export const UpdateStaticIpsEnvId2 = {
  Preview: "preview",
  Production: "production",
} as const;
export type UpdateStaticIpsEnvId2 = ClosedEnum<typeof UpdateStaticIpsEnvId2>;

export type UpdateStaticIpsEnvId = string | UpdateStaticIpsEnvId2;

export type UpdateStaticIpsAws = {
  subnetIds: Array<string>;
  securityGroupId: string;
};

export type UpdateStaticIpsResponseBody = {
  envId: string | UpdateStaticIpsEnvId2;
  connectConfigurationId: string;
  dc?: string | undefined;
  passive: boolean;
  buildsEnabled: boolean;
  aws?: UpdateStaticIpsAws | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const UpdateStaticIpsRequestBody2$inboundSchema: z.ZodType<
  UpdateStaticIpsRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  builds: z.boolean().optional(),
  regions: z.array(z.string()),
});

/** @internal */
export type UpdateStaticIpsRequestBody2$Outbound = {
  builds?: boolean | undefined;
  regions: Array<string>;
};

/** @internal */
export const UpdateStaticIpsRequestBody2$outboundSchema: z.ZodType<
  UpdateStaticIpsRequestBody2$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsRequestBody2
> = z.object({
  builds: z.boolean().optional(),
  regions: z.array(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsRequestBody2$ {
  /** @deprecated use `UpdateStaticIpsRequestBody2$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsRequestBody2$inboundSchema;
  /** @deprecated use `UpdateStaticIpsRequestBody2$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsRequestBody2$outboundSchema;
  /** @deprecated use `UpdateStaticIpsRequestBody2$Outbound` instead. */
  export type Outbound = UpdateStaticIpsRequestBody2$Outbound;
}

export function updateStaticIpsRequestBody2ToJSON(
  updateStaticIpsRequestBody2: UpdateStaticIpsRequestBody2,
): string {
  return JSON.stringify(
    UpdateStaticIpsRequestBody2$outboundSchema.parse(
      updateStaticIpsRequestBody2,
    ),
  );
}

export function updateStaticIpsRequestBody2FromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsRequestBody2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsRequestBody2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsRequestBody2' from JSON`,
  );
}

/** @internal */
export const UpdateStaticIpsRequestBody1$inboundSchema: z.ZodType<
  UpdateStaticIpsRequestBody1,
  z.ZodTypeDef,
  unknown
> = z.object({
  builds: z.boolean(),
  regions: z.array(z.string()).optional(),
});

/** @internal */
export type UpdateStaticIpsRequestBody1$Outbound = {
  builds: boolean;
  regions?: Array<string> | undefined;
};

/** @internal */
export const UpdateStaticIpsRequestBody1$outboundSchema: z.ZodType<
  UpdateStaticIpsRequestBody1$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsRequestBody1
> = z.object({
  builds: z.boolean(),
  regions: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsRequestBody1$ {
  /** @deprecated use `UpdateStaticIpsRequestBody1$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsRequestBody1$inboundSchema;
  /** @deprecated use `UpdateStaticIpsRequestBody1$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsRequestBody1$outboundSchema;
  /** @deprecated use `UpdateStaticIpsRequestBody1$Outbound` instead. */
  export type Outbound = UpdateStaticIpsRequestBody1$Outbound;
}

export function updateStaticIpsRequestBody1ToJSON(
  updateStaticIpsRequestBody1: UpdateStaticIpsRequestBody1,
): string {
  return JSON.stringify(
    UpdateStaticIpsRequestBody1$outboundSchema.parse(
      updateStaticIpsRequestBody1,
    ),
  );
}

export function updateStaticIpsRequestBody1FromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsRequestBody1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsRequestBody1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsRequestBody1' from JSON`,
  );
}

/** @internal */
export const UpdateStaticIpsRequestBody$inboundSchema: z.ZodType<
  UpdateStaticIpsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => UpdateStaticIpsRequestBody1$inboundSchema),
  z.lazy(() => UpdateStaticIpsRequestBody2$inboundSchema),
]);

/** @internal */
export type UpdateStaticIpsRequestBody$Outbound =
  | UpdateStaticIpsRequestBody1$Outbound
  | UpdateStaticIpsRequestBody2$Outbound;

/** @internal */
export const UpdateStaticIpsRequestBody$outboundSchema: z.ZodType<
  UpdateStaticIpsRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsRequestBody
> = z.union([
  z.lazy(() => UpdateStaticIpsRequestBody1$outboundSchema),
  z.lazy(() => UpdateStaticIpsRequestBody2$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsRequestBody$ {
  /** @deprecated use `UpdateStaticIpsRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsRequestBody$inboundSchema;
  /** @deprecated use `UpdateStaticIpsRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsRequestBody$outboundSchema;
  /** @deprecated use `UpdateStaticIpsRequestBody$Outbound` instead. */
  export type Outbound = UpdateStaticIpsRequestBody$Outbound;
}

export function updateStaticIpsRequestBodyToJSON(
  updateStaticIpsRequestBody: UpdateStaticIpsRequestBody,
): string {
  return JSON.stringify(
    UpdateStaticIpsRequestBody$outboundSchema.parse(updateStaticIpsRequestBody),
  );
}

export function updateStaticIpsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateStaticIpsRequest$inboundSchema: z.ZodType<
  UpdateStaticIpsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.union([
    z.lazy(() => UpdateStaticIpsRequestBody1$inboundSchema),
    z.lazy(() => UpdateStaticIpsRequestBody2$inboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateStaticIpsRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?:
    | UpdateStaticIpsRequestBody1$Outbound
    | UpdateStaticIpsRequestBody2$Outbound
    | undefined;
};

/** @internal */
export const UpdateStaticIpsRequest$outboundSchema: z.ZodType<
  UpdateStaticIpsRequest$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.union([
    z.lazy(() => UpdateStaticIpsRequestBody1$outboundSchema),
    z.lazy(() => UpdateStaticIpsRequestBody2$outboundSchema),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsRequest$ {
  /** @deprecated use `UpdateStaticIpsRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsRequest$inboundSchema;
  /** @deprecated use `UpdateStaticIpsRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsRequest$outboundSchema;
  /** @deprecated use `UpdateStaticIpsRequest$Outbound` instead. */
  export type Outbound = UpdateStaticIpsRequest$Outbound;
}

export function updateStaticIpsRequestToJSON(
  updateStaticIpsRequest: UpdateStaticIpsRequest,
): string {
  return JSON.stringify(
    UpdateStaticIpsRequest$outboundSchema.parse(updateStaticIpsRequest),
  );
}

export function updateStaticIpsRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsRequest' from JSON`,
  );
}

/** @internal */
export const UpdateStaticIpsEnvId2$inboundSchema: z.ZodNativeEnum<
  typeof UpdateStaticIpsEnvId2
> = z.nativeEnum(UpdateStaticIpsEnvId2);

/** @internal */
export const UpdateStaticIpsEnvId2$outboundSchema: z.ZodNativeEnum<
  typeof UpdateStaticIpsEnvId2
> = UpdateStaticIpsEnvId2$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsEnvId2$ {
  /** @deprecated use `UpdateStaticIpsEnvId2$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsEnvId2$inboundSchema;
  /** @deprecated use `UpdateStaticIpsEnvId2$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsEnvId2$outboundSchema;
}

/** @internal */
export const UpdateStaticIpsEnvId$inboundSchema: z.ZodType<
  UpdateStaticIpsEnvId,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), UpdateStaticIpsEnvId2$inboundSchema]);

/** @internal */
export type UpdateStaticIpsEnvId$Outbound = string | string;

/** @internal */
export const UpdateStaticIpsEnvId$outboundSchema: z.ZodType<
  UpdateStaticIpsEnvId$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsEnvId
> = z.union([z.string(), UpdateStaticIpsEnvId2$outboundSchema]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsEnvId$ {
  /** @deprecated use `UpdateStaticIpsEnvId$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsEnvId$inboundSchema;
  /** @deprecated use `UpdateStaticIpsEnvId$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsEnvId$outboundSchema;
  /** @deprecated use `UpdateStaticIpsEnvId$Outbound` instead. */
  export type Outbound = UpdateStaticIpsEnvId$Outbound;
}

export function updateStaticIpsEnvIdToJSON(
  updateStaticIpsEnvId: UpdateStaticIpsEnvId,
): string {
  return JSON.stringify(
    UpdateStaticIpsEnvId$outboundSchema.parse(updateStaticIpsEnvId),
  );
}

export function updateStaticIpsEnvIdFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsEnvId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsEnvId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsEnvId' from JSON`,
  );
}

/** @internal */
export const UpdateStaticIpsAws$inboundSchema: z.ZodType<
  UpdateStaticIpsAws,
  z.ZodTypeDef,
  unknown
> = z.object({
  subnetIds: z.array(z.string()),
  securityGroupId: z.string(),
});

/** @internal */
export type UpdateStaticIpsAws$Outbound = {
  subnetIds: Array<string>;
  securityGroupId: string;
};

/** @internal */
export const UpdateStaticIpsAws$outboundSchema: z.ZodType<
  UpdateStaticIpsAws$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsAws
> = z.object({
  subnetIds: z.array(z.string()),
  securityGroupId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsAws$ {
  /** @deprecated use `UpdateStaticIpsAws$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsAws$inboundSchema;
  /** @deprecated use `UpdateStaticIpsAws$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsAws$outboundSchema;
  /** @deprecated use `UpdateStaticIpsAws$Outbound` instead. */
  export type Outbound = UpdateStaticIpsAws$Outbound;
}

export function updateStaticIpsAwsToJSON(
  updateStaticIpsAws: UpdateStaticIpsAws,
): string {
  return JSON.stringify(
    UpdateStaticIpsAws$outboundSchema.parse(updateStaticIpsAws),
  );
}

export function updateStaticIpsAwsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsAws, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsAws$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsAws' from JSON`,
  );
}

/** @internal */
export const UpdateStaticIpsResponseBody$inboundSchema: z.ZodType<
  UpdateStaticIpsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  envId: z.union([z.string(), UpdateStaticIpsEnvId2$inboundSchema]),
  connectConfigurationId: z.string(),
  dc: z.string().optional(),
  passive: z.boolean(),
  buildsEnabled: z.boolean(),
  aws: z.lazy(() => UpdateStaticIpsAws$inboundSchema).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/** @internal */
export type UpdateStaticIpsResponseBody$Outbound = {
  envId: string | string;
  connectConfigurationId: string;
  dc?: string | undefined;
  passive: boolean;
  buildsEnabled: boolean;
  aws?: UpdateStaticIpsAws$Outbound | undefined;
  createdAt: number;
  updatedAt: number;
};

/** @internal */
export const UpdateStaticIpsResponseBody$outboundSchema: z.ZodType<
  UpdateStaticIpsResponseBody$Outbound,
  z.ZodTypeDef,
  UpdateStaticIpsResponseBody
> = z.object({
  envId: z.union([z.string(), UpdateStaticIpsEnvId2$outboundSchema]),
  connectConfigurationId: z.string(),
  dc: z.string().optional(),
  passive: z.boolean(),
  buildsEnabled: z.boolean(),
  aws: z.lazy(() => UpdateStaticIpsAws$outboundSchema).optional(),
  createdAt: z.number(),
  updatedAt: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateStaticIpsResponseBody$ {
  /** @deprecated use `UpdateStaticIpsResponseBody$inboundSchema` instead. */
  export const inboundSchema = UpdateStaticIpsResponseBody$inboundSchema;
  /** @deprecated use `UpdateStaticIpsResponseBody$outboundSchema` instead. */
  export const outboundSchema = UpdateStaticIpsResponseBody$outboundSchema;
  /** @deprecated use `UpdateStaticIpsResponseBody$Outbound` instead. */
  export type Outbound = UpdateStaticIpsResponseBody$Outbound;
}

export function updateStaticIpsResponseBodyToJSON(
  updateStaticIpsResponseBody: UpdateStaticIpsResponseBody,
): string {
  return JSON.stringify(
    UpdateStaticIpsResponseBody$outboundSchema.parse(
      updateStaticIpsResponseBody,
    ),
  );
}

export function updateStaticIpsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateStaticIpsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateStaticIpsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateStaticIpsResponseBody' from JSON`,
  );
}
