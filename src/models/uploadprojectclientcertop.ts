/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type UploadProjectClientCertRequestBody = {
  /**
   * The client certificate in PEM format
   */
  cert: string;
  /**
   * The private key in PEM format
   */
  key: string;
  /**
   * The certificate authority in PEM format
   */
  ca?: string | undefined;
  /**
   * The origin this certificate should be used for. If not specified, the certificate will be project-wide.
   */
  origin?: string | undefined;
  /**
   * Skip validation of the certificate
   */
  skipValidation?: boolean | undefined;
};

export type UploadProjectClientCertRequest = {
  /**
   * The unique project identifier or the project name
   */
  idOrName: string;
  /**
   * The Team identifier to perform the request on behalf of.
   */
  teamId?: string | undefined;
  /**
   * The Team slug to perform the request on behalf of.
   */
  slug?: string | undefined;
  requestBody?: UploadProjectClientCertRequestBody | undefined;
};

/**
 * Client certificate uploaded successfully
 */
export type UploadProjectClientCertResponseBody = {
  origin: string;
  certId: string;
};

/** @internal */
export const UploadProjectClientCertRequestBody$inboundSchema: z.ZodType<
  UploadProjectClientCertRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  cert: z.string(),
  key: z.string(),
  ca: z.string().optional(),
  origin: z.string().optional(),
  skipValidation: z.boolean().optional(),
});

/** @internal */
export type UploadProjectClientCertRequestBody$Outbound = {
  cert: string;
  key: string;
  ca?: string | undefined;
  origin?: string | undefined;
  skipValidation?: boolean | undefined;
};

/** @internal */
export const UploadProjectClientCertRequestBody$outboundSchema: z.ZodType<
  UploadProjectClientCertRequestBody$Outbound,
  z.ZodTypeDef,
  UploadProjectClientCertRequestBody
> = z.object({
  cert: z.string(),
  key: z.string(),
  ca: z.string().optional(),
  origin: z.string().optional(),
  skipValidation: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadProjectClientCertRequestBody$ {
  /** @deprecated use `UploadProjectClientCertRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadProjectClientCertRequestBody$inboundSchema;
  /** @deprecated use `UploadProjectClientCertRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadProjectClientCertRequestBody$outboundSchema;
  /** @deprecated use `UploadProjectClientCertRequestBody$Outbound` instead. */
  export type Outbound = UploadProjectClientCertRequestBody$Outbound;
}

export function uploadProjectClientCertRequestBodyToJSON(
  uploadProjectClientCertRequestBody: UploadProjectClientCertRequestBody,
): string {
  return JSON.stringify(
    UploadProjectClientCertRequestBody$outboundSchema.parse(
      uploadProjectClientCertRequestBody,
    ),
  );
}

export function uploadProjectClientCertRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadProjectClientCertRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UploadProjectClientCertRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadProjectClientCertRequestBody' from JSON`,
  );
}

/** @internal */
export const UploadProjectClientCertRequest$inboundSchema: z.ZodType<
  UploadProjectClientCertRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  RequestBody: z.lazy(() => UploadProjectClientCertRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UploadProjectClientCertRequest$Outbound = {
  idOrName: string;
  teamId?: string | undefined;
  slug?: string | undefined;
  RequestBody?: UploadProjectClientCertRequestBody$Outbound | undefined;
};

/** @internal */
export const UploadProjectClientCertRequest$outboundSchema: z.ZodType<
  UploadProjectClientCertRequest$Outbound,
  z.ZodTypeDef,
  UploadProjectClientCertRequest
> = z.object({
  idOrName: z.string(),
  teamId: z.string().optional(),
  slug: z.string().optional(),
  requestBody: z.lazy(() => UploadProjectClientCertRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadProjectClientCertRequest$ {
  /** @deprecated use `UploadProjectClientCertRequest$inboundSchema` instead. */
  export const inboundSchema = UploadProjectClientCertRequest$inboundSchema;
  /** @deprecated use `UploadProjectClientCertRequest$outboundSchema` instead. */
  export const outboundSchema = UploadProjectClientCertRequest$outboundSchema;
  /** @deprecated use `UploadProjectClientCertRequest$Outbound` instead. */
  export type Outbound = UploadProjectClientCertRequest$Outbound;
}

export function uploadProjectClientCertRequestToJSON(
  uploadProjectClientCertRequest: UploadProjectClientCertRequest,
): string {
  return JSON.stringify(
    UploadProjectClientCertRequest$outboundSchema.parse(
      uploadProjectClientCertRequest,
    ),
  );
}

export function uploadProjectClientCertRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadProjectClientCertRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadProjectClientCertRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadProjectClientCertRequest' from JSON`,
  );
}

/** @internal */
export const UploadProjectClientCertResponseBody$inboundSchema: z.ZodType<
  UploadProjectClientCertResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: z.string(),
  certId: z.string(),
});

/** @internal */
export type UploadProjectClientCertResponseBody$Outbound = {
  origin: string;
  certId: string;
};

/** @internal */
export const UploadProjectClientCertResponseBody$outboundSchema: z.ZodType<
  UploadProjectClientCertResponseBody$Outbound,
  z.ZodTypeDef,
  UploadProjectClientCertResponseBody
> = z.object({
  origin: z.string(),
  certId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadProjectClientCertResponseBody$ {
  /** @deprecated use `UploadProjectClientCertResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    UploadProjectClientCertResponseBody$inboundSchema;
  /** @deprecated use `UploadProjectClientCertResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    UploadProjectClientCertResponseBody$outboundSchema;
  /** @deprecated use `UploadProjectClientCertResponseBody$Outbound` instead. */
  export type Outbound = UploadProjectClientCertResponseBody$Outbound;
}

export function uploadProjectClientCertResponseBodyToJSON(
  uploadProjectClientCertResponseBody: UploadProjectClientCertResponseBody,
): string {
  return JSON.stringify(
    UploadProjectClientCertResponseBody$outboundSchema.parse(
      uploadProjectClientCertResponseBody,
    ),
  );
}

export function uploadProjectClientCertResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadProjectClientCertResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UploadProjectClientCertResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadProjectClientCertResponseBody' from JSON`,
  );
}
