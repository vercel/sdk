/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { edgeCacheDangerouslyDeleteByTags } from "../funcs/edgeCacheDangerouslyDeleteByTags.js";
import { edgeCacheInvalidateByTags } from "../funcs/edgeCacheInvalidateByTags.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import { DangerouslyDeleteByTagsRequest } from "../models/dangerouslydeletebytagsop.js";
import { InvalidateByTagsRequest } from "../models/invalidatebytagsop.js";
import { unwrapAsync } from "../types/fp.js";

export class EdgeCache extends ClientSDK {
  /**
   * Invalidate by tag
   *
   * @remarks
   * Marks a cache tag as stale, causing cache entries associated with that tag to be revalidated in the background on the next request.
   */
  async invalidateByTags(
    request: InvalidateByTagsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(edgeCacheInvalidateByTags(
      this,
      request,
      options,
    ));
  }

  /**
   * Dangerously delete by tag
   *
   * @remarks
   * Marks a cache tag as deleted, causing cache entries associated with that tag to be revalidated in the foreground on the next request. Use this method with caution because one tag can be associated with many paths and deleting the cache can cause many concurrent requests to the origin leading to cache stampede problem. A good use case for deleting the cache is when the origin has also been deleted, for example it returns a 404 or 410 status code.
   */
  async dangerouslyDeleteByTags(
    request: DangerouslyDeleteByTagsRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(edgeCacheDangerouslyDeleteByTags(
      this,
      request,
      options,
    ));
  }
}
